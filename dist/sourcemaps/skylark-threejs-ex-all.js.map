{"version":3,"sources":["skylark-threejs-ex-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","exports","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","hasOwnProperty","call","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","l","_lut","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","min","max","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Quaternion","z","w","_x","_y","_z","_w","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","console","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","c","cos","sin","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","angleTo","q","acos","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyNormalMatrix","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","denominator","theta","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","getZ","_canvas","_vector$1","Matrix3","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToBufferAttribute","count","setXYZ","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","g","h","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","rotation","cx","cy","scale","rotate","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isMesh","drawMode","isInstancedMesh","instanceMatrix","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","isScene","_points","_vector$2","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","setDrawMode","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","vertex","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","DataTexture","isWebGLRenderTargetCube","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","t2D","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","getShaderSource","lines","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","tangentSpaceNormalMap","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isRawShaderMaterial","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","isWebGLMultiviewRenderTarget","numViews","gammaOutput","gammaInput","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","state","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","internalFormat","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","texParameteri","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","DEFAULT_NUMVIEWS","maxNumViews","getCameraArray","isArrayCamera","cameras","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","Group","ArrayCamera","isGroup","_geometry","cameraLPos","cameraRPos","setProjectionFromUnion","cameraL","cameraR","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","WebVRManager","renderWidth","renderHeight","device","frameData","controllers","standingMatrix","standingMatrixInverse","framebufferScaleFactor","referenceSpaceType","window","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","tempCamera","cameraVR","isPresenting","currentPixelRatio","currentSize","eyeParameters","getEyeParameters","getPixelRatio","setDrawingBufferSize","animation","triggers","grips","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","hand","updateViewportFromBounds","bounds","getController","controller","getDevice","setDevice","setFramebufferScaleFactor","setReferenceSpaceType","getCamera","userHeight","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","buttons","pressed","updateControllers","getStandingMatrix","submitFrame","setFrameOfReferenceType","WebXRManager","session","referenceSpace","sortedInputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","onRequestReferenceSpace","updateInputSources","findInputSource","inputSources","handedness","updateCamera","getSession","setSession","updateRenderState","baseLayer","XRWebGLLayer","requestReferenceSpace","then","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","getPose","targetRaySpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","apply","calls","triangles","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateList","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","vr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","multiview","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","projectObject","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","isInterleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","zoomW","zoomH","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","THREE","geometryLoader","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$6","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_v1$5","_v2$3","_normalMatrix$1","_keys","VertexNormalsHelper","nNormals","objGeometry","objPos","objNorm","_vector$7","SpotLightHelper","cone","coneLength","coneWidth","_vector$8","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","_vector$9","_color1","_color2","HemisphereLightHelper","LightProbeHelper","GAMMA_OUTPUT","GridHelper","PolarGridHelper","radials","circles","PositionalAudioHelper","divisionsInnerAngle","divisionsOuterAngle","materialInnerAngle","materialOuterAngle","halfConeInnerAngle","halfConeOuterAngle","_v1$6","_v2$4","_normalMatrix$2","FaceNormalsHelper","_v1$7","_v2$5","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$a","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","renderReverseSided","renderSingleSided","activeMipMapLevel","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","threejs","CopyShader","tDiffuse","BokehShader","DEPTH_PACKING","PERSPECTIVE_CAMERA","tColor","tDepth","aperture","maxblur","nearClip","farClip","SAOShader","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","tNormal","cameraNear","cameraFar","cameraProjectionMatrix","cameraInverseProjectionMatrix","minResolution","kernelRadius","randomSeed","DepthLimitedBlurShader","KERNEL_RADIUS","sampleUvOffsets","sampleWeights","depthCutoff","BlurShaderUtils","createSampleWeights","stdDev","gaussian","exp","weights","createSampleOffsets","uvIncrement","configure","UnpackDepthRGBAShader","ConvolutionShader","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","uImageIncrement","cKernel","buildKernel","sigma","gauss","kernelSize","LuminosityHighPassShader","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","FXAAShader","SSAOShader","KERNEL_SIZE","tNoise","kernel","minDistance","SSAODepthShader","SSAOBlurShader","FilmShader","nIntensity","sIntensity","sCount","grayscale","DotScreenShader","tSize","LuminosityShader","SobelOperatorShader","ColorifyShader","ToneMapShader","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","TechnicolorShader","HueSaturationShader","Pass","needsSwap","renderToScreen","FullScreenQuad","ShaderPass","textureID","fsQuad","writeBuffer","readBuffer","MaskPass","writeValue","clearValue","REPLACE","ALWAYS","EQUAL","KEEP","EffectComposer","renderTarget1","renderTarget2","passes","copyPass","clock","swapBuffers","addPass","insertPass","isLastEnabledPass","passIndex","maskActive","NOTEQUAL","ClearMaskPass","effectiveWidth","effectiveHeight","RenderPass","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","NURBSUtils","findSpan","U","calcBasisFunctions","span","saved","rv","lv","temp","calcBSplinePoint","C","Nj","wNj","calcBasisFunctionDerivatives","zeroArr","ders","ndu","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","calcKoverI","nom","calcRationalCurveDerivatives","Pders","Aders","wders","calcNURBSDerivatives","calcSurfacePoint","V","uspan","vspan","Nu","Nv","Sw","NURBSCurve","degree","knots","controlPoints","startKnot","endKnot","hpoint","NURBSSurface","degree1","degree2","knots1","knots2","len1","len2","Lensflare","positionScreen","positionView","tempMap","occlusionMap","material1a","screenPosition","material1b","mesh1","LensflareElement","Shader","material2","mesh2","addElement","screenPositionPixels","validArea","invAspect","halfViewportWidth","halfViewportHeight","vecX","vecY","isLensflare","Reflector","textureWidth","textureHeight","clipBias","ReflectorShader","recursion","reflectorPlane","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","textureMatrix","virtualCamera","MathUtils","currentXrEnabled","xr","currentShadowAutoUpdate","Refractor","RefractorShader","refractor","refractorPlane","refractorWorldPosition","clipVector","updateRefractorPlane","updateVirtualCamera","updateTextureMatrix","TTFLoader","reversed","arraybuffer","reverseCommands","commands","command","opentype","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","getEnglishName","ascender","descender","underlinePosition","tables","post","head","original_font_information","ThreeMFLoader","availableExtensions","textureLoader","parseRelsXml","relsFileText","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","tex2coordNode","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colorObject","colorNode","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","parseComponentNode","componentNode","componentData","parseTransform","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertexNodes","vertexNode","triangleProperties","triangleNodes","triangleNode","triangleProperty","parseMeshNode","componentsNode","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","metadataNodes","metadataData","metadataNode","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","textureData","texture2ds","resources","texture2d","sourceURI","URL","createObjectURL","revokeObjectURL","buildBasematerialsMeshes","objectPindex","materialMap","meshes","trianglePropertiesProps","getBuild","buildBasematerial","positionData","buildTexturedMesh","uvData","buildVertexColorMesh","colorgroup","colorData","buildDefaultMesh","getResourceType","buildGroup","resourceMap","objectPid","analyzeObject","resourceId","resourceType","newMeshes","buildMeshes","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","displaycolor","buildComposite","compositeData","composite","component","buildObject","object3D","modelXml","applyExtensions","data3mf","relsName","modelRelsName","rels","modelRels","zip","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelParts","texturesParts","JSZip","ReferenceError","relsView","asArrayBuffer","modelPart","fileText","xmlData","documentElement","attr","$1","texturesPartName","model","printTicket","loadDocument","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","buildObjects","addExtension","AMFLoader","loadMaterials","matName","matId","loadedMaterial","childNodes","matChildEl","loadColor","matColor","loadMeshVolume","volume","materialid","currVolumeNode","firstElementChild","nodeValue","getElementsByTagName","nextElementSibling","loadMeshVertices","vertArray","currVerticesNode","vNode","nx","ny","nz","loadObject","objId","loadedObject","currColor","currObjNode","currMeshNode","volumes","loadedVertices","getUint8","amfName","amfAuthor","amfScale","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","sceneObject","defaultMaterial","author","part","newObject","objDefaultMaterial","newGeometry","AssimpLoader","Virtulous","KeyFrame","dist","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","tempAniQuat","tempAniMatrix","tempAniScale","KeyFrameTrack","_accelTable","addKey","sortKeys","parseFromThree","targets","parseFromCollada","keySortFunc","reTarget","compareitor","TrackTargetNodeNameCompare","keySearchAccel","key0","key1","find","Animation","addTrack","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","cloneTreeToBones","rootBone","nodeCount","nodeToBoneMap","sortWeights","indexes","pairs","findMatchingBone","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","mBones","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","mName","mParent","threeSkeletonRoot","toTHREE","threeSkeletonRootBone","threeNode","tbone","mOffsetMatrix","mMaterials","mIndexArray","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","mTangentBuffer","mBitangentBuffer","mWeights","mVertexId","mWeight","_weights","_bones","aiFace","mNumIndices","mIndices","aiString","str","aiNode","mTransformation","mNumChildren","mNumMeshes","mMeshes","mChildren","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","reader","getFloat32","dataAsFloat","dataAsBool","dataAsString","dataAsMap","namePropMapping","?mat.name","$mat.shadingm","$mat.twosided","$mat.wireframe","$clr.ambient","$clr.diffuse","$clr.specular","$clr.emissive","$clr.transparent","$clr.reflective","$mat.shininess","$mat.reflectivity","$mat.refracti","$tex.file","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","prop","veclerp","lm1","quatlerp","sampleTrack","lne","mValue","timeDist","mTime","dT","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","comp","pos","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","littleEndian","readFloat","dataview","val","Read_double","getFloat64","Read_uint8_t","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVectorKey","ReadBounds","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryBone","chunkID","shortened","ReadArray_aiVertexWeight","ReadBinaryMesh","mNumUVComponents","subArray32","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","ReadArray_aiQuatKey","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","ReadBinaryNode","mDepth","node2","mAnimations","mTextures","mLights","mCameras","compressed","aiOrigin_BEG","pFiledata","pScene","versionMajor","versionMinor","versionRevision","compileFlags","boneNode","markBones","off","ori","buff","bytes","newbuff","subArrayUint16","subArrayUint8","subArrayUint32","extendStream","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","InternReadFile","TGALoader","TGA_TYPE_NO_DATA","TGA_TYPE_INDEXED","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_INDEXED","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_BL","TGA_ORIGIN_BR","TGA_ORIGIN_UL","TGA_ORIGIN_UR","content","id_length","colormap_type","image_type","colormap_index","colormap_length","colormap_size","pixel_size","flags","tgaCheckHeader","use_rle","use_pal","use_grey","useOffscreen","createElement","imageData","createImageData","pixel_data","pixel_total","palettes","pixels","tgaParse","palette","x_start","y_start","x_step","y_step","x_end","y_end","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","colormap","tgaGetImageData8bits","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","getTgaRGBA","transferToImageBitmap","ColladaLoader","convertUpAxis","xml","parseStrings","parseFloats","parseInts","parseId","parseLibrary","libraryName","buildLibrary","parseAnimationSampler","inputs","nodeType","semantic","parseAnimationChannel","sid","arraySyntax","memberSyntax","member","sampler","buildAnimation","channels","samplers","sources","inputId","INPUT","outputId","OUTPUT","outputSource","buildAnimationChannel","createKeyframeTracks","getAnimation","nodes","getNode","transforms","defaultMatrix","keyframes","transformAnimationData","prepareAnimationData","quaternionData","scaleData","keyframe","defaultValue","getPrev","getNext","interpolate","createMissingKeyframes","buildAnimationClip","animationTracks","getAnimationClip","parseSkin","bindShapeMatrix","parseSource","joints","parseJoints","vertexWeights","parseVertexWeights","vcount","buildController","skin","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","descending","boneInverse","buildSkin","buildImage","init_from","getImage","parseEffectProfileCOMMON","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","parseEffectParameters","parseEffectParameter","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","parseEffectExtraTechnique","buildEffect","buildMaterial","effect","effects","profile","textureObject","surface","tgaLoader","getTextureLoader","wrapU","wrapV","offsetU","offsetV","repeatU","repeatV","parameter","float","double_sided","parseCameraOptics","parseCameraTechnique","parseCameraParameters","buildCamera","optics","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","parseLightTechnique","parseLightParameters","falloffAngle","buildLight","getLight","accessor","parseGeometryVertices","parseGeometryPrimitive","primitive","hasUV","inputname","checkUVCoordinates","primitives","uvsNeedsFix","buildGeometry","groupedPrimitives","groupPrimitives","primitiveType","buildGeometryType","materialKeys","input","prevLength","buildGeometryData","pushVector","sourceStride","buildKinematicsModel","parseKinematicsTechniqueCommon","parseKinematicsJoint","links","parseKinematicsLink","parseKinematicsJointParameter","limits","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","parsePhysicsRigidBody","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsBindJointAxis","param","tmpJointIndex","jointIndex","buildKinematicsScene","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","buildBoneHierarchy","visualScenes","visualScene","processed","instanceCamera","newObjects","instanceLight","fallbackMaterial","resolveMaterialBinding","instanceMaterials","buildVisualScene","getVisualScene","collada","parserError","errorText","errorElement","stack","TEXT_NODE","parserErrorToText","asset","hasAttribute","parseAssetUnit","upAxis","parseAssetUpAxis","parseAsset","kinematics","kinematicsModels","physicsModels","kinematicsScenes","prepareNodes","rigidBodies","bindJointAxis","setupAnimations","kinematicsModelId","kinematicsSceneId","visualSceneId","kinematicsModel","kinematicsScene","getKinematicsScene","jointMap","targetElement","parentVisualElement","parentElement","visualElement","visualElementName","buildTransformList","m0","getJointValue","jointData","setJointValue","setupKinematics","parseScene","DRACOLoader","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setSkipDequantization","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","preload","_initDecoder","useJS","WebAssembly","librariesPending","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","body","Worker","_taskCosts","_taskLoad","onmessage","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numPoints","num_points","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","GetAttributeInt16ForAllPoints","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","GetFaceFromMesh","releaseDecoderModule","getDecoderModule","CompressionMethod","DEFLATE","RESERVED","Zlib","Inflate","opt_params","cmf","flg","ip","rawinflate","verify","method","RawInflate","bufferSize","resize","BufferType","decompress","Adler32","FBXLoader","fbxTree","connections","sceneGraph","FBXTreeParser","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","dv","FBXTree","getFbxVersion","convertFBXTimeToSeconds","FBXBuffer","CORRECT","convertArrayBufferToString","FBXText","cursor","read","num","isFbxFormatASCII","parseConnections","deformers","parseDeformers","geometryMap","connectionMap","Map","rawConnections","Connections","rawConnection","fromID","toID","parents","parentRelationship","ID","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","RelativeFilename","Filename","arrayBufferContent","Content","base64Content","parseImage","filename","fileName","textureMap","textureNodes","parseTexture","textureNode","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","Scaling","FileName","materialNodes","parseMaterial","materialNode","ShadingModel","parseParameters","BumpFactor","Diffuse","DiffuseColor","DisplacementFactor","Emissive","EmissiveColor","EmissiveFactor","Opacity","ReflectionFactor","Shininess","Specular","SpecularColor","LayeredTexture","DeformerNodes","Deformer","deformerNode","attrType","parseSkeleton","geometryID","rawTargets","parseMorphTargets","deformerNodes","rawBones","rawBone","transformLink","TransformLink","Indexes","Weights","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","modelMap","parseModels","modelNodes","Model","setLookAtProperties","parentConnections","connection","bindSkeleton","createAmbientLight","setupMorphMaterials","transformData","parentMatrixWorld","generateTransform","createCamera","createLight","createMesh","createCurve","getTransformData","subBone","cameraAttribute","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","innerWidth","innerHeight","AspectWidth","AspectHeight","FieldOfView","FocalLength","lightAttribute","LightType","Intensity","CastLightOnObject","FarAttenuationEnd","EnableFarAttenuation","InnerAngle","OuterAngle","CastShadows","FBX_Deformer","reduce","geo","inheritType","InheritType","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","Lcl_Rotation","postRotation","PostRotation","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","BindPoseNode","Pose","poseNodes","PoseNode","poseNode","Matrix","GlobalSettings","ambientColor","AmbientColor","setupMorphMaterial","matUuid","sharedMat","clonedMat","geoNodes","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","genBuffers","weightsIndices","normalAttribute","mappingType","prevMaterialIndex","startIndex","currentIndex","lastGroup","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","parseUVs","weightTable","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","wt","wIndex","Weight","weightIndex","comparedWeight","comparedWeightIndex","comparedWeightArray","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","materialIndices","Order","KnotVector","pointsValues","Form","animationClips","rawClips","parseClips","rawClip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","rawCurves","animationCurve","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","rawTracks","generateTracks","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","quaternionValues","morphNum","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","valuesSpan","absoluteSpan","numSubIntervals","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","matchComment","matchEmpty","matchBeginning","matchProperty","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","connProps","rest","append","parseNumberArray","parseNodeSpecialProperty","props","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","skip","endOfContent","getOffset","endOffset","getUint64","numProperties","nameLen","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","inflate","reader2","nullByte","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","lLRM","lParentGRM","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","GCodeLoader","splitLayer","extruding","relative","currentLayer","pathMaterial","extrudingMaterial","newLayer","pathVertex","addSegment","absolute","tokens","cmd","args","addObject","GLTFLoader","dracoLoader","ddsLoader","_onError","gltf","setDRACOLoader","setDDSLoader","magic","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","headerView","BINARY_EXTENSION_HEADER_LENGTH","chunkView","chunkIndex","chunkLength","chunkType","BINARY_EXTENSION_CHUNK_TYPES","contentArray","BIN","byteOffset","extensionsUsed","extensionName","extensionsRequired","KHR_LIGHTS_PUNCTUAL","GLTFLightsExtension","KHR_MATERIALS_CLEARCOAT","GLTFMaterialsClearcoatExtension","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","GLTFMaterialsPbrSpecularGlossinessExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","MSFT_TEXTURE_DDS","GLTFTextureDDSExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","GLTFParser","lightDefs","loadLight","lightIndex","lightNode","lightDef","innerConeAngle","outerConeAngle","getMaterialType","extendParams","materialParams","materialDef","metallicRoughness","pbrMetallicRoughness","baseColorFactor","baseColorTexture","assignTexture","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","GLTFMeshStandardSGMaterial","isGLTFSpecularGlossinessMaterial","specularMapParsFragmentChunk","glossinessMapParsFragmentChunk","specularMapFragmentChunk","glossinessMapFragmentChunk","lightPhysicalFragmentChunk","glossiness","glossinessMap","_extraUniforms","uniformName","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","specularGlossinessParams","pbrSpecularGlossiness","diffuseFactor","diffuseTexture","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossMapDef","createMaterial","GLTFCubicSplineInterpolant","decodePrimitive","bufferViewIndex","bufferView","gltfAttributeMap","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","threeAttributeName","ATTRIBUTES","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","getDependency","extendTexture","texCoord","stride2","stride3","td","m1","WEBGL_CONSTANTS","FLOAT","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","LINEAR","REPEAT","SAMPLER_2D","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","5120","5121","5122","5123","5125","5126","WEBGL_FILTERS","9728","9729","9984","9985","9986","9987","WEBGL_WRAPPINGS","33071","33648","10497","WEBGL_TYPE_SIZES","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","INTERPOLATION","CUBICSPLINE","STEP","ALPHA_MODES","OPAQUE","MASK","BLEND","MIME_TYPE_FORMATS","image/png","image/jpeg","createDefaultMaterial","addUnknownExtensionsToUserData","knownExtensions","objectDef","gltfExtensions","assignExtrasToUserData","gltfDef","extras","meshDef","targetNames","createPrimitiveKey","primitiveDef","dracoExtension","createAttributesKey","attributesKey","removeAll","primitiveCache","fileLoader","addPrimitiveAttributes","assignAttributeAccessor","accessorIndex","gltfAttributeName","maxDisplacement","computeBounds","hasMorphPosition","hasMorphNormal","pendingPositionAccessors","pendingNormalAccessors","pendingAccessor","toTrianglesDrawMode","numberOfTriangles","newIndices","markDefs","getDependencies","dependencies","scenes","nodeDefs","skinDefs","skins","meshDefs","meshReferences","meshUses","skinLength","nodeIndex","nodeLength","nodeDef","dependency","loadScene","loadNode","loadMesh","loadAccessor","loadBufferView","loadBuffer","loadMaterial","loadSkin","loadAnimation","loadCamera","defs","def","bufferIndex","bufferDef","uri","bufferViewDef","bufferViews","sparse","pendingBufferViews","TypedArray","elementBytes","itemBytes","byteStride","ibSlice","ibCacheKey","ib","itemSizeIndices","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","textureIndex","webkitURL","textureDef","textureExtensions","isObjectURL","mapName","mapDef","assignFinalMaterial","useVertexTangents","useVertexColors","useFlatShading","useMorphTargets","useMorphNormals","pointsMaterial","lineMaterial","materialType","materialExtensions","sgExtension","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","alphaMode","alphaCutoff","normalTexture","occlusionTexture","strength","emissiveFactor","emissiveTexture","clearcoatExtension","loadGeometries","createDracoPrimitive","geometryPromise","meshIndex","cameraIndex","cameraDef","skinDef","skinEntry","inverseBindMatrices","animationIndex","animationDef","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","inputAccessors","outputAccessors","inputAccessor","outputAccessor","targetName","outputArray","scaled","isInterpolantFactoryMethodGLTFCubicSpline","instanceNum","buildNodeHierachy","nodeId","parentObject","pendingJoints","jointNodes","jointNode","sceneIndex","sceneDef","nodeIds","MTLLoader","setMaterialOptions","materialOptions","delimiter_pattern","materialsInfo","ss","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","materialsArray","nameLookup","converted","mn","covmat","save","lprop","normalizeRGB","ignoreZeroRGBs","materialName","getAsArray","createMaterial_","setMapForType","mapType","texParams","getTextureParams","invertTrProperty","matParams","items","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","mtllib","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertexPoint","addVertexLine","addNormal","addColor","addUVLine","ua","ub","uc","na","nb","nc","vLen","ia","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","lineFirstChar","trimLeft","lineData","vertexData","faceVertices","vertexParts","lineParts","lineVertices","lineUVs","li","llen","pointData","hasVertexColors","createdMaterials","miLen","sourceMaterial","materialHash","materialPoints","materialLine","PCDLoader","textData","PCDheader","result1","result2","headerLen","fields","viewpoint","sizeSum","rowSize","parseHeader","pcdData","rgb","normal_x","normal_y","normal_z","sizes","decompressedSize","decompressed","inData","outLength","ctrl","ref","inLength","outData","inPtr","outPtr","decompressLZF","row","PLYLoader","propertyNameMapping","setPropertyNameMapping","headerText","headerLength","currentElement","lineType","lineValues","comments","make_ply_element_property","propertValues","countType","itemType","parseASCIINumber","parseASCIIElement","parseASCII","currentElementCount","handleElement","postProcess","elementName","vertex_indices","vertex_index","texcoord","binaryRead","little_endian","getInt8","binaryReadElement","loc","parseBinary","PRWMLoader","bigEndianPlatform","isBigEndianPlatform","uint8Array","uint16Array","InvertedEncodingTypes","getMethods","copyFromBuffer","sourceArrayBuffer","viewType","fromBigEndian","readView","getMethod","arrayBuffer","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","cardinality","arrayType","decodePrwm","STLLoader","exception","matchDataViewAt","query","binData","array_buffer","ensureBinary","n_faces","isBinary","defaultR","defaultG","defaultB","normalX","normalY","normalZ","packedColor","vertexstart","componentIdx","patternSolid","patternFace","faceCounter","patternFloat","patternVertex","patternNormal","startVertex","endVertex","vertexCountPerFace","normalCountPerFace","ensureString","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","SVGLoader","defaultDPI","defaultUnit","parseArcCommand","rx","ry","x_axis_rotation","large_arc_flag","sweep_flag","dx2","dy2","x1p","y1p","rxs","rys","x1ps","y1ps","cr","dq","pq","cxp","cyp","svgAngle","ux","uy","vx","vy","ang","parseStyle","addStyle","svgName","jsName","adjustFunction","parseFloatWithUnits","positive","getReflection","number","unitConversion","mm","cm","in","pc","theUnit","endsWith","getNodeTransform","currentTransform","tempTransform0","transformsTexts","tIndex","transformText","openParPos","closeParPos","transformType","tempTransform1","tempTransform2","tempTransform3","parseNodeTransform","transformStack","getTransformScaleX","getTransformScaleY","tempV2","tempV3","control","isFirstPoint","doSetFirstPoint","numbers","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","subpath","parseCircleNode","parseEllipseNode","parseLineNode","fill","transfVec2","isRotated","isTransformRotated","subPath","transformPath","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","getStrokeStyle","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","pointsToStrokeWithBuffers","dupPoints","newPoints","removeDuplicatedPoints","nextPoint","innerSideModified","joinIsOnLeftSide","isMiter","isClosed","previousPoint","strokeWidth2","deltaU","u0","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","iPoint","normal1","u1","miterSide","miterLength2","segmentLengthPrev","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addCapGeometry","lastOuter","lastInner","TDSLoader","readFile","chunk","readChunk","MLIBMAGIC","CMAGIC","M3DMAGIC","nextChunk","M3D_VERSION","readDWord","debugMessage","MDATA","resetPosition","readMeshData","MESH_VERSION","MASTER_SCALE","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","readString","cur","N_TRI_OBJECT","readMesh","endChunk","MAT_NAME","MAT_WIRE","MAT_WIRE_SIZE","readByte","MAT_TWO_SIDE","MAT_ADDITIVE","MAT_DIFFUSE","readColor","MAT_SPECULAR","MAT_AMBIENT","MAT_SHININESS","readWord","MAT_TRANSPARENCY","MAT_TEXMAP","readMap","MAT_BUMPMAP","MAT_OPACMAP","MAT_SPECMAP","POINT_ARRAY","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","MSH_MAT_GROUP","readMaterialGroup","MAT_MAPNAME","MAT_MAP_UOFFSET","MAT_MAP_VOFFSET","MAT_MAP_USCALE","MAT_MAP_VSCALE","COLOR_24","LIN_COLOR_24","COLOR_F","LIN_COLOR_F","readInt","readShort","maxLength","VTKLoader","Float32Concat","first","second","firstLength","Int32Concat","getStringFile","stringFile","charArray","Base64toByteArray","b64","placeHolders","arr","Arr","lookup","revLookup","code","L","parseDataArray","ele","numBytes","header_type","rawData","byteData","blocks","cSizeStart","headerSize","dataOffsets","currentOffset","txt","currentBlockSize","el","dom","ActiveXObject","async","loadXML","parseError","reason","srcText","xmlToJson","item","hasChildNodes","old","PolyData","piece","Piece","sections","sectionIndex","numberOfSections","section","DataArray","dataArrayIndex","numberOfDataArrays","numberOfPoints","NumberOfPoints","normalsName","Name","NumberOfComponents","numberOfStrips","NumberOfStrips","connectivity","indicesIndex","strip","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","parseXML","includes","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","dataset","inds","numTriangles","newColors","pointIndex","dataView","vtk","findString","parsedString","indexCount","XLoader","classCallCheck","Constructor","createClass","descriptor","writable","protoProps","staticProps","XAnimationInfo","animeName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","XAnimationObj","_flags","putFlags","putPos","putRot","putScl","XAnimationInfoArray","makeBonekeys","refObj","keyFrameRefactor","rot","scl","XKeyFrameInfo","Frame","texloader","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","IsUvYReverse","Meshes","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_arg","_setArgOption","readed","foundNewLine","expect","fileLength","buf","_ensureBinary","_ensureString","_isBinary","_parseBinary","_parseASCII","_hierarchieParse","_changeRoot","_mainloop","_parent","endRead","find1","findEnd","findNext","nameData","_readLine","word","refs","DataEnder","nextStart","_refs","_this2","_mainProc","worked","models","breakFlag","_setFrame","_setFrameTransformMatrix","_getParentName","VertexSetedBoneCount","GeometryData","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","_makeOutputGeometry","_makeOutputAnimation","FrameTransformMatrix","_ParseMatrixData","putBone","mode_local","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","refI","stride4","_computeGroups","currentMaterialIndex","data2","data3","localObject","boneInf","XboneInf","BoneIndex","Indeces","initMatrix","OffsetMatrix","_i","_RootName","putting","rotq","putBones","_makePutBoneList","bi","boneIndex","bb","nowVertexID","nowVal","sk","offsetList","_bi","_buildGeometry","_initSkeleton","worldBaseMx","currentMxFrame","gbone","nowKeyType","keyInfo","frameFound","frameValue","animationObj","make","_model","_animation","put","findAnimation","c_key","_c_key","animationMixer","targetMatrix","DDSLoader","loadMipmaps","dds","fourCCToInt32","loadARGBMip","dataOffset","dataLength","srcBuffer","byteArray","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","fourCC","isRGBAUncompressed","caps2","PVRLoader","pvrDatas","_parseV3","_parseV2","bpp","metaLen","pixelFormat","numMipmaps","dataPtr","numSurfaces","_extract","bitmaskAlpha","numSurfs","formatFlags","_hasAlpha","pvr","blockWidth","blockHeight","widthBlocks","heightBlocks","mipLevel","sWidth","sHeight","surfIndex","KTXLoader","ktx","KhronosTextureContainer","pixelWidth","pixelHeight","numberOfFaces","numberOfMipmapLevels","facesExpected","identifier","headerDataView","endianness","glTypeSize","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","loadType","COMPRESSED_2D","HEADER_LEN","imageSize","COMPRESSED_3D","TEX_2D","TEX_3D","SimplifyModifier","removeFromArray","computeEdgeCollapseCost","sideFace","edgelength","curvature","sideFaces","hasVertex","minCurvature","dotProd","amt","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","assert","removeFace","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","computeNormal","addUniqueNeighbor","oldv","newv","modify","nextVertex","oldVertices","oldFaces","simplifiedGeometry","SubdivisionModifier","subdivisions","repeats","ABC","getEdge","vertexIndexA","vertexIndexB","processEdge","metaVertices","vertexA","vertexB","newEdge","newFace","newFaces","newUv","newUvs","oldUvs","newVertices","sourceEdges","newEdgeVertices","newSourceVertices","newUVs","currentEdge","edgeVertexWeight","adjacentVertexWeight","connectedFaces","beta","sourceVertexWeight","connectingVertexWeight","connectingEdge","connectingEdges","oldVertex","newSourceVertex","generateLookups","edge3","x4","x5","DRACOExporter","DracoEncoderModule","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","dracoEncoder","encoder","Encoder","MeshBuilder","AddFloatAttributeToMesh","AddFacesToMesh","TEX_COORD","COLOR","encodedData","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","outputData","MESH_SEQUENTIAL_ENCODING","INVALID","GENERIC","OBJExporter","indexVertex","indexVertexUvs","indexNormals","nbVertex","nbNormals","nbVertexUvs","normalMatrixWorld","parseMesh","parseLine","STLExporter","binary","bufferLength","setUint32","setFloat32","setUint16","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","THREE_TO_WEBGL","GLTFExporter","onDone","DEFAULT_OPTIONS","trs","onlyVisible","truncateDrawRange","embedImages","forceIndices","forcePowerOfTwoTextures","includeCustomExtensions","cachedCanvas","outputJSON","nodeMap","cachedData","attributesNormalized","uids","uid","getUID","equalArray","array1","every","getPaddedBufferSize","getPaddedArrayBuffer","paddingByte","paddedLength","serializeUserData","gltfProperty","applyTextureTransform","didTransform","transformDef","processBuffer","processAccessor","end2","bufferViewTarget","minMax","POSITIVE_INFINITY","NEGATIVE_INFINITY","getMinMax","componentSize","setUint8","gltfBufferView","processBufferView","gltfAccessor","3","4","16","processImage","cachedImages","gltfImage","ctx","toBlob","FileReader","readAsArrayBuffer","onloadend","processBufferViewImage","processTexture","gltfTexture","gltfSampler","processSampler","processMaterial","gltfMaterial","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","metalRoughMapDef","baseColorMapDef","specularMapDef","emissiveMapDef","normalMapDef","occlusionMapDef","processMesh","meshCacheKeyParts","meshCacheKey","gltfMesh","nameConversion","originalNormal","isNormalizedNormalAttribute","createNormalizedNormalAttribute","modifiedAttribute","reverseDictionary","warned","baseAttribute","relativeAttribute","didForceIndices","processAnimation","Utils","mergeMorphTargetTracks","trackBinding","trackNode","trackProperty","outputItemSize","processSkin","rootJoint","processNode","gltfNode","isOrtho","gltfCamera","orthographic","perspective","processCamera","processLight","processScene","gltfScene","objectsWithoutScene","processObjects","processInput","extensionsUsedList","binaryChunk","binaryChunkPrefix","jsonChunk","TextEncoder","encode","stringToArrayBuffer","jsonChunkPrefix","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","insertKeyframe","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","mergedTrack","targetCount","targetIndex","sourceInterpolant","keyframeIndex","ColladaExporter","textureDirectory","imageToData","naturalWidth","naturalHeight","base64ToBuffer","transMat","getFuncs","attrBufferToArray","subArray","st","ct","imageMap","libraryImages","imageNode","directory","original","geometryInfo","libraryGeometries","libraryEffects","libraryMaterials","libraryVisualScenes","processObject","getTransform","geomInfo","meshid","gname","gnode","posName","vertName","triangleInputs","normName","uvName","colName","subarr","polycount","processGeometry","matids","matidsArray","matid","transparencyNode","techniqueNode","effectnode","specLink","dae","toISOString","urdf","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","tagnum","ch","tag","PLYExporter","traverseMeshes","geomToBufferGeom","excludeAttributes","includeNormals","includeColors","includeUVs","vertexCount","faceCount","includeIndices","headerBin","vertexListLength","faceListLength","vOffset","fOffset","writtenVertices","vertexList","faceList"],"mappings":"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CAl7F,SACAm7F,cAAA,EACAC,mBAAA,GAEA17F,UACA27F,QAAA38I,MAAA,MACA48I,QAAA58I,MAAA,MACAwiD,OAAAxiD,MAAA,GACAsiD,QAAAtiD,MAAA,GACA68I,UAAA78I,MAAA,MACA88I,SAAA98I,MAAA,GACA+8I,UAAA/8I,MAAA,GACAg9I,SAAAh9I,MAAA,MAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,oBACA,oBACA,4BACA,4BACA,yBACA,0BACA,0BACA,yBACA,uBACA,wBACA,qBACA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IACA,2CACA,gCACA,gEACA,UACA,iEACA,WACA,IACA,gBACA,8CACA,+CACA,sCACA,2EACA,mCACA,mCACA,mCACA,4BACA,wCACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,+BACA,0BACA,KACA8D,KAAA,OAEA,OAAAk3F,IAEA79I,EAAA,wCACA,mBACA,SAAAusH,GACA,aACA,IAAA+xB,GACA37F,SACA47F,YAAA,EACAC,UAAA,EACAC,eAAA,EACAC,gBAAA,EACAZ,cAAA,EACAC,mBAAA,GAEA17F,UACA47F,QAAA58I,MAAA,MACAu8I,UAAAv8I,MAAA,MACAs9I,SAAAt9I,MAAA,MACAo0B,MAAAp0B,MAAA,IAAAkrH,EAAA19G,QAAA,IAAA,MACA+vI,YAAAv9I,MAAA,GACAw9I,WAAAx9I,MAAA,KACAy9I,wBAAAz9I,MAAA,IAAAkrH,EAAAxmG,SACAg5H,+BAAA19I,MAAA,IAAAkrH,EAAAxmG,SACAnF,OAAAvf,MAAA,GACA4oE,WAAA5oE,MAAA,IACAkpE,MAAAlpE,MAAA,IACA29I,eAAA39I,MAAA,GACA49I,cAAA59I,MAAA,KACA69I,YAAA79I,MAAA,IAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,oBACA,oBACA,2BACA,8BACA,SACA,4BACA,0BACA,6BACA,SACA,4BACA,2BACA,uCACA,8CACA,uBACA,2BACA,sBACA,8BACA,+BACA,qBACA,4BACA,gBACA,qBACA,yDACA,6BACA,uCACA,UACA,wBACA,WACA,IACA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IACA,2CACA,gCACA,oEACA,UACA,qEACA,WACA,IACA,qGACA,uFACA,oFACA,4CACA,iEACA,IACA,mFACA,4BACA,0EACA,UACA,6EACA,WACA,IACA,iCACA,4CACA,6HACA,8DACA,8CACA,yEACA,oKACA,IACA,uCACA,4EACA,4DACA,kEACA,0DACA,iDACA,oEACA,sEACA,0EACA,kDACA,iEACA,8BACA,8BACA,2BACA,8CACA,yEACA,4BACA,2BACA,gDACA,+CACA,kBACA,QACA,mDACA,uFACA,gGACA,wBACA,MACA,oCACA,qDACA,IACA,gBACA,yCACA,6CACA,eACA,MACA,iDACA,0EACA,kEACA,2CACA,iDACA,KACA8D,KAAA,OAEA,OAAA23F,IAEAt+I,EAAA,qDAAA,mBAAA,SAAAusH,GACA,aACA,IAAA4yB,GACAx8F,SACAy8F,cAAA,EACAtB,cAAA,EACAC,mBAAA,GAEA17F,UACAu7F,UAAAv8I,MAAA,MACAo0B,MAAAp0B,MAAA,IAAAkrH,EAAA19G,QAAA,IAAA,MACAwwI,iBAAAh+I,OAAA,IAAAkrH,EAAA19G,QAAA,EAAA,KACAywI,eAAAj+I,OAAA,IACA48I,QAAA58I,MAAA,MACAu9I,YAAAv9I,MAAA,IACAw9I,WAAAx9I,MAAA,KACAk+I,aAAAl+I,MAAA,KAEAuhD,cACA,oBACA,qBACA,oBACA,yBACA,gBACA,cACA,2BACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,oBACA,qBACA,8BACA,4BACA,4BACA,2BACA,6BACA,qDACA,oDACA,oBACA,yBA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A+zC,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,yBACA,GACA,8BACA,GACA,2BACA,GACA,oBACA,GACA,6FACA,GACA,uFACA,kEACA,wBACA,uCACA,+CACA,KACA,uEACA,KACA,wEACA,wEACA,cACA,uEACA,sEACA,0EACA,4EACA,6EACA,oEACA,wEACA,sEACA,KACA,0EACA,uEACA,wEACA,uEACA,2EACA,yEACA,wEACA,yEACA,kEACA,2EACA,0EACA,KACA,uFACA,GACA,oBACA,0BACA,iCACA,GACA,+BACA,GACA,iFACA,0BACA,SACA,kDACA,4DACA,yEACA,SACA,gCACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,6BACA,SACA,2CACA,sEACA,mEACA,8DACA,SACA,6EACA,2EACA,SACA,oDACA,wCACA,wCACA,iEACA,gDACA,SACA,iBACA,kBACA,SACA,mCACA,SACA,iFACA,0BACA,SACA,+CACA,6DACA,4EACA,yEACA,iCACA,SACA,iBACA,kBACA,SACA,gCACA,SACA,iFACA,uBACA,SACA,6CACA,6DACA,SACA,wDACA,yEACA,mEACA,SACA,6BACA,SACA,iFACA,iCACA,SACA,iCACA,SACA,gDACA,2CACA,SACA,gCACA,2CACA,aACA,+BACA,2CACA,aACA,gCACA,2CACA,aACA,qCACA,2CACA,aACA,SACA,iFACA,6BACA,SACA,oDACA,4DACA,SACA,6BACA,uCACA,aACA,gCACA,uCACA,aACA,+BACA,uCACA,aACA,iCACA,uCACA,aACA,SACA,GACA,GACA,iFACA,sDACA,iFACA,qEACA,iFACA,8BACA,SACA,oCACA,uEACA,uDACA,mEACA,SACA,iBACA,iFACA,2EACA,iFACA,8CACA,SACA,eACA,iFACA,8EACA,8DACA,gEACA,kEACA,6DACA,SACA,qCACA,SACA,GACA,GACA,iFACA,GACA,oDACA,GACA,iFACA,GACA,iFACA,4DACA,iFACA,kCACA,gCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,GACA,iFACA,yDACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,iFACA,sDACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,GACA,GACA,iFACA,GACA,8CACA,GACA,iFACA,2EACA,4BACA,kCACA,8BACA,8BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,6BACA,4CACA,gCACA,QACA,4BACA,mCACA,8BACA,gCACA,gCACA,gCACA,4BACA,8BACA,8BACA,8BACA,qCACA,SACA,iFACA,2BACA,kDACA,kEACA,SACA,iFACA,2BACA,mBACA,uBACA,uBACA,iDACA,6DACA,uDACA,wCACA,0EACA,YACA,2EACA,aACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,2BACA,2CACA,qDACA,oEACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,yBACA,8BACA,gCACA,gEACA,4EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,+DACA,wEACA,+DACA,wEACA,SACA,GACA,GACA,iFACA,2DACA,iFACA,gCACA,6DACA,QACA,6DACA,SACA,GACA,GACA,GACA,GACA,iFACA,GACA,kDACA,GACA,iFACA,qBACA,iFACA,8BACA,SACA,oFACA,gCACA,sBACA,SACA,sEACA,oFACA,qCACA,sCACA,oCACA,SACA,8BACA,4DACA,sCACA,iEACA,mBACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,oCACA,+CACA,wCACA,yCACA,sCACA,SACA,oCACA,+CACA,oEACA,mCACA,gCACA,gCACA,wCACA,yCACA,wCACA,yCACA,yCACA,SACA,oCACA,kDACA,+CACA,0CACA,2CACA,0CACA,2CACA,0CACA,SACA,oCACA,+DACA,+CACA,0CACA,2CACA,0CACA,2CACA,6CACA,SACA,oCACA,yDACA,gDACA,0DACA,oCACA,uCACA,8CACA,yEACA,6BACA,iCACA,mCACA,SACA,oCACA,iEACA,gDACA,2EACA,uCACA,+BACA,2BACA,gCACA,qCACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,iFACA,0CACA,2CACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,iEACA,yEACA,4DACA,uCACA,yBACA,qEACA,0CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,6DACA,yEACA,+EACA,+CACA,kEACA,qDACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,+EACA,sDACA,qCACA,+DACA,oDACA,0BACA,oDACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oDACA,yDACA,0EACA,2DACA,iDACA,wCACA,MACA,iFACA,uBACA,sBACA,sBACA,oCACA,kCACA,wDACA,4CACA,wCACA,oBACA,wCACA,qBACA,iBACA,wCACA,4DACA,iFACA,gBACA,4DACA,iFACA,iBACA,kCACA,qCACA,iBACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,YACA,oDACA,wCACA,oCACA,gBACA,oCACA,iBACA,mCACA,8GACA,8GACA,8GACA,8GACA,gBACA,wGACA,wGACA,wGACA,wGACA,iBACA,aACA,iFACA,2CACA,2CACA,4CACA,4CACA,2CACA,2CACA,+CACA,+CACA,sEACA,6CACA,oFACA,oDACA,iFACA,oBACA,kCACA,2BACA,gBACA,4BACA,iBACA,iFACA,oCACA,mCACA,+GACA,+GACA,+GACA,+GACA,gBACA,yGACA,yGACA,yGACA,yGACA,iBACA,YACA,uGACA,uGACA,aACA,iFACA,wCACA,wCACA,4CACA,8CACA,qDACA,qDACA,iFACA,4CACA,4CACA,uDACA,uDACA,iFACA,4CACA,4CACA,qEACA,qEACA,uDACA,uDACA,uDACA,uDACA,iFACA,sDACA,oDACA,gDACA,6DACA,iFACA,mCACA,mCACA,uDACA,0DACA,iFACA,2CACA,2CACA,wCACA,wCACA,yDACA,gEACA,0CACA,kEACA,iFACA,uBACA,uBACA,uBACA,wBACA,2DACA,2DACA,gDACA,gDACA,iFACA,uBACA,mDACA,mDACA,uBACA,mDACA,mDACA,kDACA,4DACA,6CACA,4DACA,iFACA,kCACA,qDACA,+CACA,6CACA,2CACA,iFACA,gCACA,gCACA,wDACA,wDACA,sDACA,sDACA,8CACA,sDACA,sDACA,iFACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,wCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,kEACA,kEACA,iDACA,kEACA,kEACA,iFACA,4CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,sEACA,sEACA,qDACA,sEACA,sEACA,iFACA,gDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,0EACA,0EACA,yDACA,0EACA,0EACA,iFACA,oDACA,uCACA,wFACA,wFACA,6EACA,6EACA,uEACA,uEACA,8EACA,8EACA,6DACA,8EACA,8EACA,iFACA,gCACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,yCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,mEACA,mEACA,iDACA,mEACA,mEACA,iFACA,6CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,uEACA,uEACA,qDACA,uEACA,uEACA,iFACA,iDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,2EACA,2EACA,yDACA,2EACA,2EACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,aACA,iFACA,4BACA,iCACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,iFACA,wCACA,wCACA,4CACA,4CACA,iFACA,4DACA,4CACA,4DACA,gDACA,iFACA,yCACA,uCACA,8DACA,6CACA,8DACA,uDACA,iFACA,gEACA,mEACA,8DACA,8DACA,8BACA,wCACA,YACA,+DACA,aACA,IACA,iFACA,SACA,GACA,gBACA,oCACA,WACA,iBACA,gBACA,gBACA,gBACA,kBACA,iBACA,iBACA,iBACA,YACA,aACA,cACA,WACA,WACA,WACA,gBACA,OACA,GACA,wDACA,iDACA,KACA8D,KAAA,OAEA,OAAAq6F,IAEAhhJ,EAAA,yCACA,mBACA,SAAAusH,GACA,aACA,IAAA00B,GACAt+F,SACAo7F,mBAAA,EACAmD,YAAA,IAEA7+F,UACAu7F,UAAAv8I,MAAA,MACAs9I,SAAAt9I,MAAA,MACA48I,QAAA58I,MAAA,MACA8/I,QAAA9/I,MAAA,MACA+/I,QAAA//I,MAAA,MACAu9I,YAAAv9I,MAAA,MACAw9I,WAAAx9I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,SACAiwI,wBAAAz9I,MAAA,IAAAkrH,EAAAxmG,SACAg5H,+BAAA19I,MAAA,IAAAkrH,EAAAxmG,SACAk5H,cAAA59I,MAAA,GACAggJ,aAAAhgJ,MAAA,MACA05H,aAAA15H,MAAA,MAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,8BACA,6BACA,4BACA,4BACA,sCACA,2BACA,4BACA,2BACA,uCACA,8CACA,8BACA,6BACA,6BACA,oBACA,qBACA,mDACA,kDACA,IACA,yDACA,gCACA,gEACA,kFACA,uEACA,UACA,iDACA,WACA,IACA,2CACA,gCACA,sEACA,UACA,uEACA,WACA,IACA,qGACA,uFACA,oFACA,4CACA,iEACA,IACA,uDACA,0EACA,IACA,gBACA,mCACA,qCACA,8DACA,4CACA,qEACA,6DACA,iFACA,mDACA,gEACA,0BACA,8CACA,sDACA,yEACA,+EACA,0CACA,0DACA,yDACA,4FACA,6CACA,0DACA,0BACA,QACA,MACA,qEACA,yDACA,KACA8D,KAAA,OAEA26F,GACA3+F,SAAAo7F,mBAAA,GACA17F,UACA47F,QAAA58I,MAAA,MACAu9I,YAAAv9I,MAAA,MACAw9I,WAAAx9I,MAAA,OAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,4BACA,4BACA,2BACA,oBACA,qBACA,yDACA,gCACA,gEACA,kFACA,uEACA,UACA,iDACA,WACA,IACA,gBACA,yCACA,qDACA,KACA8D,KAAA,OAEA46F,GACAl/F,UACAu7F,UAAAv8I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,UAEA+zC,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,8BACA,2BACA,oBACA,gBACA,2CACA,wBACA,wCACA,0CACA,sEACA,yDACA,QACA,MACA,gEACA,KACA8D,KAAA,OAEA,OACAs6F,WAAAA,EACAK,gBAAAA,EACAC,eAAAA,KAGAvhJ,EAAA,2CAAA,WACA,aACA,IAAAwhJ,GACAn/F,UACAu7F,UAAAv8I,MAAA,MACAizD,MAAAjzD,MAAA,GACAogJ,YAAApgJ,MAAA,IACAqgJ,YAAArgJ,MAAA,KACAsgJ,QAAAtgJ,MAAA,MACAugJ,WAAAvgJ,MAAA,IAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,oBACA,sBACA,0BACA,4BACA,4BACA,wBACA,8BACA,oBACA,gBACA,sDACA,mCACA,0FACA,oEACA,2EACA,oGACA,sBACA,+EACA,MACA,uDACA,KACA8D,KAAA,OAEA,OAAA66F,IAEAxhJ,EAAA,8CAAA,mBAAA,SAAAusH,GACA,aACA,IAAAs1B,GACAx/F,UACAu7F,UAAAv8I,MAAA,MACAygJ,OAAAzgJ,MAAA,IAAAkrH,EAAA19G,QAAA,IAAA,MACA8E,QAAAtS,MAAA,IAAAkrH,EAAA19G,QAAA,GAAA,KACAyD,OAAAjR,MAAA,MACAuf,OAAAvf,MAAA,IAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,uBACA,uBACA,uBACA,sBACA,8BACA,oBACA,oBACA,8CACA,qCACA,+EACA,sDACA,IACA,gBACA,6CACA,2DACA,8EACA,KACA8D,KAAA,OAEA,OAAAk7F,IAEA7hJ,EAAA,iDAAA,WACA,aACA,IAAA+hJ,GACA1/F,UAAAu7F,UAAAv8I,MAAA,OACAuhD,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,oBACA,8BACA,oBACA,gBACA,6CACA,sDACA,6CACA,KACA8D,KAAA,OAEA,OAAAo7F,IAEA/hJ,EAAA,kDACA,mBACA,SAAAusH,GACA,aACA,IAAAy1B,GACA3/F,UACAu7F,UAAAv8I,MAAA,MACAsrE,YAAAtrE,MAAA,IAAAkrH,EAAA19G,UAEA+zC,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,8BACA,2BACA,oBACA,gBACA,iEACA,0DACA,0DACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,8EACA,gEACA,+DACA,8EACA,gEACA,+DACA,qEACA,yCACA,KACA8D,KAAA,OAEA,OAAAq7F,IAEAhiJ,EAAA,6CAAA,mBAAA,SAAAusH,GACA,aACA,IAAA01B,GACA5/F,UACAu7F,UAAAv8I,MAAA,MACAynC,OAAAznC,MAAA,IAAAkrH,EAAA/jF,MAAA,YAEAoa,cACA,oBACA,gBACA,cACA,8EACA,KACA+D,KAAA,MACA9D,gBACA,sBACA,8BACA,oBACA,gBACA,6CACA,6CACA,sCACA,+CACA,KACA8D,KAAA,OAEA,OAAAs7F,IAEAjiJ,EAAA,8CAAA,WACA,aACA,IAAAkiJ,GACA7/F,UACAu7F,UAAAv8I,MAAA,MACA8gJ,kBAAA9gJ,MAAA,GACA+gJ,cAAA/gJ,MAAA,MACAghJ,cAAAhhJ,MAAA,IACAihJ,cAAAjhJ,MAAA,KACAkhJ,YAAAlhJ,MAAA,KAEAuhD,cACA,oBACA,gBACA,cACA,8EACA,K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","file":"../skylark-threejs-ex-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-threejs/three',[], function () { \r\n\t'use strict';\r\n\r\n\tvar exports = {};\r\n\r\n\t// Polyfills\r\n\r\n\tif ( Number.EPSILON === undefined ) {\r\n\r\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n\t}\r\n\r\n\tif ( Number.isInteger === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\r\n\r\n\t\tNumber.isInteger = function ( value ) {\r\n\r\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( Math.sign === undefined ) {\r\n\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\t\tMath.sign = function ( x ) {\r\n\r\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tif ( 'name' in Function.prototype === false ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\t\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif ( Object.assign === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\t\tObject.assign = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = Object( target );\r\n\r\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\r\n\r\n\t\t\t\tvar source = arguments[ index ];\r\n\r\n\t\t\t\tif ( source !== undefined && source !== null ) {\r\n\r\n\t\t\t\t\tfor ( var nextKey in source ) {\r\n\r\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\r\n\r\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar REVISION = '111';\r\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\n\tvar CullFaceNone = 0;\r\n\tvar CullFaceBack = 1;\r\n\tvar CullFaceFront = 2;\r\n\tvar CullFaceFrontBack = 3;\r\n\tvar FrontFaceDirectionCW = 0;\r\n\tvar FrontFaceDirectionCCW = 1;\r\n\tvar BasicShadowMap = 0;\r\n\tvar PCFShadowMap = 1;\r\n\tvar PCFSoftShadowMap = 2;\r\n\tvar VSMShadowMap = 3;\r\n\tvar FrontSide = 0;\r\n\tvar BackSide = 1;\r\n\tvar DoubleSide = 2;\r\n\tvar FlatShading = 1;\r\n\tvar SmoothShading = 2;\r\n\tvar NoColors = 0;\r\n\tvar FaceColors = 1;\r\n\tvar VertexColors = 2;\r\n\tvar NoBlending = 0;\r\n\tvar NormalBlending = 1;\r\n\tvar AdditiveBlending = 2;\r\n\tvar SubtractiveBlending = 3;\r\n\tvar MultiplyBlending = 4;\r\n\tvar CustomBlending = 5;\r\n\tvar AddEquation = 100;\r\n\tvar SubtractEquation = 101;\r\n\tvar ReverseSubtractEquation = 102;\r\n\tvar MinEquation = 103;\r\n\tvar MaxEquation = 104;\r\n\tvar ZeroFactor = 200;\r\n\tvar OneFactor = 201;\r\n\tvar SrcColorFactor = 202;\r\n\tvar OneMinusSrcColorFactor = 203;\r\n\tvar SrcAlphaFactor = 204;\r\n\tvar OneMinusSrcAlphaFactor = 205;\r\n\tvar DstAlphaFactor = 206;\r\n\tvar OneMinusDstAlphaFactor = 207;\r\n\tvar DstColorFactor = 208;\r\n\tvar OneMinusDstColorFactor = 209;\r\n\tvar SrcAlphaSaturateFactor = 210;\r\n\tvar NeverDepth = 0;\r\n\tvar AlwaysDepth = 1;\r\n\tvar LessDepth = 2;\r\n\tvar LessEqualDepth = 3;\r\n\tvar EqualDepth = 4;\r\n\tvar GreaterEqualDepth = 5;\r\n\tvar GreaterDepth = 6;\r\n\tvar NotEqualDepth = 7;\r\n\tvar MultiplyOperation = 0;\r\n\tvar MixOperation = 1;\r\n\tvar AddOperation = 2;\r\n\tvar NoToneMapping = 0;\r\n\tvar LinearToneMapping = 1;\r\n\tvar ReinhardToneMapping = 2;\r\n\tvar Uncharted2ToneMapping = 3;\r\n\tvar CineonToneMapping = 4;\r\n\tvar ACESFilmicToneMapping = 5;\r\n\r\n\tvar UVMapping = 300;\r\n\tvar CubeReflectionMapping = 301;\r\n\tvar CubeRefractionMapping = 302;\r\n\tvar EquirectangularReflectionMapping = 303;\r\n\tvar EquirectangularRefractionMapping = 304;\r\n\tvar SphericalReflectionMapping = 305;\r\n\tvar CubeUVReflectionMapping = 306;\r\n\tvar CubeUVRefractionMapping = 307;\r\n\tvar RepeatWrapping = 1000;\r\n\tvar ClampToEdgeWrapping = 1001;\r\n\tvar MirroredRepeatWrapping = 1002;\r\n\tvar NearestFilter = 1003;\r\n\tvar NearestMipmapNearestFilter = 1004;\r\n\tvar NearestMipMapNearestFilter = 1004;\r\n\tvar NearestMipmapLinearFilter = 1005;\r\n\tvar NearestMipMapLinearFilter = 1005;\r\n\tvar LinearFilter = 1006;\r\n\tvar LinearMipmapNearestFilter = 1007;\r\n\tvar LinearMipMapNearestFilter = 1007;\r\n\tvar LinearMipmapLinearFilter = 1008;\r\n\tvar LinearMipMapLinearFilter = 1008;\r\n\tvar UnsignedByteType = 1009;\r\n\tvar ByteType = 1010;\r\n\tvar ShortType = 1011;\r\n\tvar UnsignedShortType = 1012;\r\n\tvar IntType = 1013;\r\n\tvar UnsignedIntType = 1014;\r\n\tvar FloatType = 1015;\r\n\tvar HalfFloatType = 1016;\r\n\tvar UnsignedShort4444Type = 1017;\r\n\tvar UnsignedShort5551Type = 1018;\r\n\tvar UnsignedShort565Type = 1019;\r\n\tvar UnsignedInt248Type = 1020;\r\n\tvar AlphaFormat = 1021;\r\n\tvar RGBFormat = 1022;\r\n\tvar RGBAFormat = 1023;\r\n\tvar LuminanceFormat = 1024;\r\n\tvar LuminanceAlphaFormat = 1025;\r\n\tvar RGBEFormat = RGBAFormat;\r\n\tvar DepthFormat = 1026;\r\n\tvar DepthStencilFormat = 1027;\r\n\tvar RedFormat = 1028;\r\n\tvar RGB_S3TC_DXT1_Format = 33776;\r\n\tvar RGBA_S3TC_DXT1_Format = 33777;\r\n\tvar RGBA_S3TC_DXT3_Format = 33778;\r\n\tvar RGBA_S3TC_DXT5_Format = 33779;\r\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\r\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\r\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\r\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\r\n\tvar RGB_ETC1_Format = 36196;\r\n\tvar RGBA_ASTC_4x4_Format = 37808;\r\n\tvar RGBA_ASTC_5x4_Format = 37809;\r\n\tvar RGBA_ASTC_5x5_Format = 37810;\r\n\tvar RGBA_ASTC_6x5_Format = 37811;\r\n\tvar RGBA_ASTC_6x6_Format = 37812;\r\n\tvar RGBA_ASTC_8x5_Format = 37813;\r\n\tvar RGBA_ASTC_8x6_Format = 37814;\r\n\tvar RGBA_ASTC_8x8_Format = 37815;\r\n\tvar RGBA_ASTC_10x5_Format = 37816;\r\n\tvar RGBA_ASTC_10x6_Format = 37817;\r\n\tvar RGBA_ASTC_10x8_Format = 37818;\r\n\tvar RGBA_ASTC_10x10_Format = 37819;\r\n\tvar RGBA_ASTC_12x10_Format = 37820;\r\n\tvar RGBA_ASTC_12x12_Format = 37821;\r\n\tvar LoopOnce = 2200;\r\n\tvar LoopRepeat = 2201;\r\n\tvar LoopPingPong = 2202;\r\n\tvar InterpolateDiscrete = 2300;\r\n\tvar InterpolateLinear = 2301;\r\n\tvar InterpolateSmooth = 2302;\r\n\tvar ZeroCurvatureEnding = 2400;\r\n\tvar ZeroSlopeEnding = 2401;\r\n\tvar WrapAroundEnding = 2402;\r\n\tvar TrianglesDrawMode = 0;\r\n\tvar TriangleStripDrawMode = 1;\r\n\tvar TriangleFanDrawMode = 2;\r\n\tvar LinearEncoding = 3000;\r\n\tvar sRGBEncoding = 3001;\r\n\tvar GammaEncoding = 3007;\r\n\tvar RGBEEncoding = 3002;\r\n\tvar LogLuvEncoding = 3003;\r\n\tvar RGBM7Encoding = 3004;\r\n\tvar RGBM16Encoding = 3005;\r\n\tvar RGBDEncoding = 3006;\r\n\tvar BasicDepthPacking = 3200;\r\n\tvar RGBADepthPacking = 3201;\r\n\tvar TangentSpaceNormalMap = 0;\r\n\tvar ObjectSpaceNormalMap = 1;\r\n\r\n\tvar ZeroStencilOp = 0;\r\n\tvar KeepStencilOp = 7680;\r\n\tvar ReplaceStencilOp = 7681;\r\n\tvar IncrementStencilOp = 7682;\r\n\tvar DecrementStencilOp = 7683;\r\n\tvar IncrementWrapStencilOp = 34055;\r\n\tvar DecrementWrapStencilOp = 34056;\r\n\tvar InvertStencilOp = 5386;\r\n\r\n\tvar NeverStencilFunc = 512;\r\n\tvar LessStencilFunc = 513;\r\n\tvar EqualStencilFunc = 514;\r\n\tvar LessEqualStencilFunc = 515;\r\n\tvar GreaterStencilFunc = 516;\r\n\tvar NotEqualStencilFunc = 517;\r\n\tvar GreaterEqualStencilFunc = 518;\r\n\tvar AlwaysStencilFunc = 519;\r\n\r\n\tvar StaticDrawUsage = 35044;\r\n\tvar DynamicDrawUsage = 35048;\r\n\tvar StreamDrawUsage = 35040;\r\n\tvar StaticReadUsage = 35045;\r\n\tvar DynamicReadUsage = 35049;\r\n\tvar StreamReadUsage = 35041;\r\n\tvar StaticCopyUsage = 35046;\r\n\tvar DynamicCopyUsage = 35050;\r\n\tvar StreamCopyUsage = 35042;\r\n\r\n\t/**\r\n\t * https://github.com/mrdoob/eventdispatcher.js/\r\n\t */\r\n\r\n\tfunction EventDispatcher() {}\r\n\r\n\tObject.assign( EventDispatcher.prototype, {\r\n\r\n\t\taddEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\thasEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return false; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t\t},\r\n\r\n\t\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tdispatchEvent: function ( event ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tevent.target = this;\r\n\r\n\t\t\t\tvar array = listenerArray.slice( 0 );\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _lut = [];\r\n\r\n\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t}\r\n\r\n\tvar _Math = {\r\n\r\n\t\tDEG2RAD: Math.PI / 180,\r\n\t\tRAD2DEG: 180 / Math.PI,\r\n\r\n\t\tgenerateUUID: function () {\r\n\r\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\r\n\r\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\t\t\treturn uuid.toUpperCase();\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( value, min, max ) {\r\n\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t\t},\r\n\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t\t},\r\n\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t\t},\r\n\r\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\t\tlerp: function ( x, y, t ) {\r\n\r\n\t\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t\t},\r\n\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) { return 0; }\r\n\t\t\tif ( x >= max ) { return 1; }\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t},\r\n\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) { return 0; }\r\n\t\t\tif ( x >= max ) { return 1; }\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t\t},\r\n\r\n\t\t// Random integer from <low, high> interval\r\n\r\n\t\trandInt: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <low, high> interval\r\n\r\n\t\trandFloat: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\r\n\t\trandFloatSpread: function ( range ) {\r\n\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t\t},\r\n\r\n\t\tdegToRad: function ( degrees ) {\r\n\r\n\t\t\treturn degrees * _Math.DEG2RAD;\r\n\r\n\t\t},\r\n\r\n\t\tradToDeg: function ( radians ) {\r\n\r\n\t\t\treturn radians * _Math.RAD2DEG;\r\n\r\n\t\t},\r\n\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t\t},\r\n\r\n\t\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tfunction Vector2( x, y ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.x = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.y = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tisVector2: true,\r\n\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v ) {\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tangle: function () {\r\n\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\r\n\r\n\t\t\treturn angle;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateAround: function ( center, angle ) {\r\n\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Quaternion( x, y, z, w ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.assign( Quaternion, {\r\n\r\n\t\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t\t},\r\n\r\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\t\tx0 *= f;\r\n\t\t\t\t\ty0 *= f;\r\n\t\t\t\t\tz0 *= f;\r\n\t\t\t\t\tw0 *= f;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdst[ dstOffset ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Quaternion.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tw: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._w = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Quaternion.prototype, {\r\n\r\n\t\tisQuaternion: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( quaternion ) {\r\n\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\t\tvar cos = Math.cos;\r\n\t\t\tvar sin = Math.sin;\r\n\r\n\t\t\tvar c1 = cos( x / 2 );\r\n\t\t\tvar c2 = cos( y / 2 );\r\n\t\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\t\tvar s1 = sin( x / 2 );\r\n\t\t\tvar s2 = sin( y / 2 );\r\n\t\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\r\n\t\t\tif ( trace > 0 ) {\r\n\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\r\n\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\r\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\t\tthis._z = 0;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( q ) {\r\n\r\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t\t},\r\n\r\n\t\trotateTowards: function ( q, step ) {\r\n\r\n\t\t\tvar angle = this.angleTo( q );\r\n\r\n\t\t\tif ( angle === 0 ) { return this; }\r\n\r\n\t\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\t\tthis.slerp( q, t );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tinverse: function () {\r\n\r\n\t\t\t// quaternion is assumed to have unit length\r\n\r\n\t\t\treturn this.conjugate();\r\n\r\n\t\t},\r\n\r\n\t\tconjugate: function () {\r\n\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tvar l = this.length();\r\n\r\n\t\t\tif ( l === 0 ) {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl = 1 / l;\r\n\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( q, p ) {\r\n\r\n\t\t\tif ( p !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( q ) {\r\n\r\n\t\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tslerp: function ( qb, t ) {\r\n\r\n\t\t\tif ( t === 0 ) { return this; }\r\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\r\n\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.copy( qb );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\t\tvar s = 1 - t;\r\n\t\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\t\tthis.normalize();\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( quaternion ) {\r\n\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _vector = new Vector3();\r\n\tvar _quaternion = new Quaternion();\r\n\r\n\tfunction Vector3( x, y, z ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tisVector3: true,\r\n\r\n\t\tset: function ( x, y, z ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyNormalMatrix: function ( m ) {\r\n\r\n\t\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t\t// calculate quat * vector\r\n\r\n\t\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t\t// calculate result * inverse quat\r\n\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tunproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\ttransformDirection: function ( m ) {\r\n\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t\t},\r\n\r\n\t\t// TODO lengthSquared?\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.crossVectors( this, v );\r\n\r\n\t\t},\r\n\r\n\t\tcrossVectors: function ( a, b ) {\r\n\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnVector: function ( v ) {\r\n\r\n\t\t\t// v cannot be the zero v\r\n\r\n\t\t\tvar scalar = v.dot( this ) / v.lengthSq();\r\n\r\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnPlane: function ( planeNormal ) {\r\n\r\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( _vector );\r\n\r\n\t\t},\r\n\r\n\t\treflect: function ( normal ) {\r\n\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\r\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( v ) {\r\n\r\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\t\tif ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\\'t handle zero length vectors.' ); }\r\n\r\n\t\t\tvar theta = this.dot( v ) / denominator;\r\n\r\n\t\t\t// clamp, to handle numerical problems\r\n\r\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSpherical: function ( s ) {\r\n\r\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.x = radius * Math.sin( theta );\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 12 ];\r\n\t\t\tthis.y = e[ 13 ];\r\n\t\t\tthis.z = e[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t * @author tschw\r\n\t */\r\n\r\n\tvar _vector$1 = new Vector3();\r\n\r\n\tfunction Matrix3() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tisMatrix3: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix4: function ( m ) {\r\n\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector$1.x = attribute.getX( i );\r\n\t\t\t\t_vector$1.y = attribute.getY( i );\r\n\t\t\t\t_vector$1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t_vector$1.applyMatrix3( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar me = matrix.elements,\r\n\t\t\t\tte = this.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\t\tte[ 3 ] = t12 * detInv;\r\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\t\tte[ 6 ] = t13 * detInv;\r\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar tmp, m = this.elements;\r\n\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t\t},\r\n\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\t\tvar m = this.elements;\r\n\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\t\tvar c = Math.cos( rotation );\r\n\t\t\tvar s = Math.sin( rotation );\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t\t0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( sx, sy ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\r\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotate: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta );\r\n\t\t\tvar s = Math.sin( theta );\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\r\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\r\n\r\n\t\t\tte[ 0 ] = c * a11 + s * a21;\r\n\t\t\tte[ 3 ] = c * a12 + s * a22;\r\n\t\t\tte[ 6 ] = c * a13 + s * a23;\r\n\r\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\r\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\r\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( tx, ty ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\r\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar _canvas;\r\n\r\n\tvar ImageUtils = {\r\n\r\n\t\tgetDataURL: function ( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\r\n\r\n\t\t\t\treturn image.src;\r\n\r\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\r\n\r\n\t\t\t\t_canvas.width = image.width;\r\n\t\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\t\tvar context = _canvas.getContext( '2d' );\r\n\r\n\t\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcanvas = _canvas;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar textureId = 0;\r\n\r\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\r\n\r\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\r\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\r\n\r\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\r\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\r\n\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.matrixAutoUpdate = true;\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t\t//\r\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\r\n\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\r\n\t}\r\n\r\n\tTexture.DEFAULT_IMAGE = undefined;\r\n\tTexture.DEFAULT_MAPPING = UVMapping;\r\n\r\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Texture,\r\n\r\n\t\tisTexture: true,\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.image = source.image;\r\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\t\tthis.mapping = source.mapping;\r\n\r\n\t\t\tthis.wrapS = source.wrapS;\r\n\t\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\t\tthis.magFilter = source.magFilter;\r\n\t\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\t\tthis.format = source.format;\r\n\t\t\tthis.type = source.type;\r\n\r\n\t\t\tthis.offset.copy( source.offset );\r\n\t\t\tthis.repeat.copy( source.repeat );\r\n\t\t\tthis.center.copy( source.center );\r\n\t\t\tthis.rotation = source.rotation;\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\t\tthis.flipY = source.flipY;\r\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\t\tthis.encoding = source.encoding;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = {\r\n\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Texture',\r\n\t\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t\t},\r\n\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\tname: this.name,\r\n\r\n\t\t\t\tmapping: this.mapping,\r\n\r\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\t\trotation: this.rotation,\r\n\r\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\t\tformat: this.format,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\tencoding: this.encoding,\r\n\r\n\t\t\t\tminFilter: this.minFilter,\r\n\t\t\t\tmagFilter: this.magFilter,\r\n\t\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\t\tflipY: this.flipY,\r\n\r\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\r\n\t\t\t\tunpackAlignment: this.unpackAlignment\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\t\tvar image = this.image;\r\n\r\n\t\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tvar url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( image ) ) {\r\n\r\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\r\n\r\n\t\t\t\t\t\turl = [];\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// process single image\r\n\r\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\t\turl: url\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutput.image = image.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t},\r\n\r\n\t\ttransformUv: function ( uv ) {\r\n\r\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\r\n\r\n\t\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.flipY ) {\r\n\r\n\t\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uv;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Vector4( x, y, z, w ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector4.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.z = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.w = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tisVector4: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\t\tthis.w = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( w ) {\r\n\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t\t// q is assumed to be normalized\r\n\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t\tthis.x = 1;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = q.x / s;\r\n\t\t\t\tthis.y = q.y / s;\r\n\t\t\t\tthis.z = q.z / s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\t\tte = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\t\tangle = Math.PI;\r\n\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\r\n\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\t\t\tthis.w = attribute.getW( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Marius Kintel / https://github.com/kintel\r\n\t */\r\n\r\n\t/*\r\n\t In options, we can specify:\r\n\t * Texture parameters for an auto-generated target texture\r\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n\t*/\r\n\tfunction WebGLRenderTarget( width, height, options ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\toptions = options || {};\r\n\r\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\r\n\r\n\t\tthis.texture.image = {};\r\n\t\tthis.texture.image.width = width;\r\n\t\tthis.texture.image.height = height;\r\n\r\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\r\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\r\n\r\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\r\n\r\n\t}\r\n\r\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: WebGLRenderTarget,\r\n\r\n\t\tisWebGLRenderTarget: true,\r\n\r\n\t\tsetSize: function ( width, height ) {\r\n\r\n\t\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tthis.texture.image.width = width;\r\n\t\t\t\tthis.texture.image.height = height;\r\n\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\t\tthis.texture = source.texture.clone();\r\n\r\n\t\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\t\tthis.depthTexture = source.depthTexture;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t */\r\n\r\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.samples = 4;\r\n\r\n\t}\r\n\r\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\r\n\r\n\t\tconstructor: WebGLMultisampleRenderTarget,\r\n\r\n\t\tisWebGLMultisampleRenderTarget: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.samples = source.samples;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _v1 = new Vector3();\r\n\tvar _m1 = new Matrix4();\r\n\tvar _zero = new Vector3( 0, 0, 0 );\r\n\tvar _one = new Vector3( 1, 1, 1 );\r\n\tvar _x = new Vector3();\r\n\tvar _y = new Vector3();\r\n\tvar _z = new Vector3();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author jordi_ros / http://plattsoft.com\r\n\t * @author D1plo1d / http://github.com/D1plo1d\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author timknip / http://www.floorplanner.com/\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Matrix4() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\tisMatrix4: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyPosition: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractRotation: function ( m ) {\r\n\r\n\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bottom row\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\t// last column\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\t_z.subVectors( eye, target );\r\n\r\n\t\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\t_z.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_z.normalize();\r\n\t\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_x.normalize();\r\n\t\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m, n ) {\r\n\r\n\t\t\tif ( n !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_v1.x = attribute.getX( i );\r\n\t\t\t\t_v1.y = attribute.getY( i );\r\n\t\t\t\t_v1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t_v1.applyMatrix4( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, _v1.x, _v1.y, _v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPosition: function ( x, y, z ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\tte[ 12 ] = x.x;\r\n\t\t\t\tte[ 13 ] = x.y;\r\n\t\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tte[ 12 ] = x;\r\n\t\t\t\tte[ 13 ] = y;\r\n\t\t\t\tte[ 14 ] = z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements,\r\n\t\t\t\tme = m.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 4 ] = t12 * detInv;\r\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 8 ] = t13 * detInv;\r\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 12 ] = t14 * detInv;\r\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( v ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t\t},\r\n\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationX: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s, c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationY: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts, c, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\t return this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, y, z, 0,\r\n\t\t\t\tx, 1, z, 0,\r\n\t\t\t\tx, y, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = position.x;\r\n\t\t\tte[ 13 ] = position.y;\r\n\t\t\tte[ 14 ] = position.z;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdecompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) { sx = - sx; }\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\t\t\t_m1.copy( this );\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tif ( far === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = 1.0 / ( right - left );\r\n\t\t\tvar h = 1.0 / ( top - bottom );\r\n\t\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\t\tvar x = ( right + left ) * w;\r\n\t\t\tvar y = ( top + bottom ) * h;\r\n\t\t\tvar z = ( far + near ) * p;\r\n\r\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _matrix = new Matrix4();\r\n\tvar _quaternion$1 = new Quaternion();\r\n\r\n\tfunction Euler( x, y, z, order ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._order = order || Euler.DefaultOrder;\r\n\r\n\t}\r\n\r\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\n\tEuler.DefaultOrder = 'XYZ';\r\n\r\n\tObject.defineProperties( Euler.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\torder: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._order;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._order = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Euler.prototype, {\r\n\r\n\t\tisEuler: true,\r\n\r\n\t\tset: function ( x, y, z, order ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( euler ) {\r\n\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\t\tvar clamp = _Math.clamp;\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\torder = order || this._order;\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._order = order;\r\n\r\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromQuaternion: function ( q, order, update ) {\r\n\r\n\t\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t\t},\r\n\r\n\t\treorder: function ( newOrder ) {\r\n\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t\t_quaternion$1.setFromEuler( this );\r\n\r\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( euler ) {\r\n\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array ) {\r\n\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\t\tif ( optionalResult ) {\r\n\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Layers() {\r\n\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Layers.prototype, {\r\n\r\n\t\tset: function ( channel ) {\r\n\r\n\t\t\tthis.mask = 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenable: function ( channel ) {\r\n\r\n\t\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenableAll: function () {\r\n\r\n\t\t\tthis.mask = 0xffffffff | 0;\r\n\r\n\t\t},\r\n\r\n\t\ttoggle: function ( channel ) {\r\n\r\n\t\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tdisable: function ( channel ) {\r\n\r\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t\t},\r\n\r\n\t\tdisableAll: function () {\r\n\r\n\t\t\tthis.mask = 0;\r\n\r\n\t\t},\r\n\r\n\t\ttest: function ( layers ) {\r\n\r\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _object3DId = 0;\r\n\r\n\tvar _v1$1 = new Vector3();\r\n\tvar _q1 = new Quaternion();\r\n\tvar _m1$1 = new Matrix4();\r\n\tvar _target = new Vector3();\r\n\r\n\tvar _position = new Vector3();\r\n\tvar _scale = new Vector3();\r\n\tvar _quaternion$2 = new Quaternion();\r\n\r\n\tvar _xAxis = new Vector3( 1, 0, 0 );\r\n\tvar _yAxis = new Vector3( 0, 1, 0 );\r\n\tvar _zAxis = new Vector3( 0, 0, 1 );\r\n\r\n\tvar _addedEvent = { type: 'added' };\r\n\tvar _removedEvent = { type: 'removed' };\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author elephantatwork / www.elephantatwork.ch\r\n\t */\r\n\r\n\tfunction Object3D() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DefaultUp.clone();\r\n\r\n\t\tvar position = new Vector3();\r\n\t\tvar rotation = new Euler();\r\n\t\tvar quaternion = new Quaternion();\r\n\t\tvar scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\r\n\tObject3D.DefaultMatrixAutoUpdate = true;\r\n\r\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Object3D,\r\n\r\n\t\tisObject3D: true,\r\n\r\n\t\tonBeforeRender: function () {},\r\n\t\tonAfterRender: function () {},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// assumes q is normalized\r\n\r\n\t\t\tthis.quaternion.copy( q );\r\n\r\n\t\t},\r\n\r\n\t\trotateOnAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// rotate object on axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateOnWorldAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// rotate object on axis in world space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\t\t// method assumes no rotated parent\r\n\r\n\t\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateOnAxis: function ( axis, distance ) {\r\n\r\n\t\t\t// translate object by distance along axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslateX: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateY: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateZ: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\tlocalToWorld: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tworldToLocal: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( x, y, z ) {\r\n\r\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\t_target.copy( x );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_target.set( x, y, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\r\n\r\n\t\t\tif ( parent ) {\r\n\r\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\r\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\r\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object === this ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( object && object.isObject3D ) ) {\r\n\r\n\t\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.parent = this;\r\n\t\t\t\tthis.children.push( object );\r\n\r\n\t\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tobject.parent = null;\r\n\t\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( object ) {\r\n\r\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1$1.getInverse( this.matrixWorld );\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.applyMatrix( _m1$1 );\r\n\r\n\t\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectById: function ( id ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByName: function ( name ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\t\tif ( this[ name ] === value ) { return this; }\r\n\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar child = this.children[ i ];\r\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldPosition: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldQuaternion: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\r\n\t\t\t\ttarget = new Quaternion();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldScale: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\traycast: function () {},\r\n\r\n\t\ttraverse: function ( callback ) {\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseVisible: function ( callback ) {\r\n\r\n\t\t\tif ( this.visible === false ) { return; }\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tcallback( parent );\r\n\r\n\t\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t\tforce = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\t\tvar children = this.children;\r\n\r\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\t// meta is a string when called from JSON.stringify\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tvar output = {};\r\n\r\n\t\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t\t// not providing it implies that this is the root object\r\n\t\t\t// being serialized.\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\t// initialize meta obj\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\tgeometries: {},\r\n\t\t\t\t\tmaterials: {},\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {},\r\n\t\t\t\t\tshapes: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t\toutput.metadata = {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Object',\r\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// standard Object3D serialization\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tobject.uuid = this.uuid;\r\n\t\t\tobject.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\r\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\r\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\r\n\t\t\tif ( this.visible === false ) { object.visible = false; }\r\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\r\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\r\n\r\n\t\t\tobject.layers = this.layers.mask;\r\n\t\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\r\n\r\n\t\t\t// object specific properties\r\n\r\n\t\t\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }\r\n\r\n\t\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\t\tobject.count = this.count;\r\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn element.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\t\tvar parameters = this.geometry.parameters;\r\n\r\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\t\tvar shapes = parameters.shapes;\r\n\r\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\t\tvar uuids = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\t\tobject.children = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\r\n\r\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\r\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\r\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\r\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\r\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.object = object;\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t\t// extract data from the cache hash\r\n\t\t\t// remove metadata on each item\r\n\t\t\t// and return as array\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function ( recursive ) {\r\n\r\n\t\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tif ( recursive === undefined ) { recursive = true; }\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.up.copy( source.up );\r\n\r\n\t\t\tthis.position.copy( source.position );\r\n\t\t\tthis.quaternion.copy( source.quaternion );\r\n\t\t\tthis.scale.copy( source.scale );\r\n\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\t\tthis.layers.mask = source.layers.mask;\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.castShadow = source.castShadow;\r\n\t\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Scene() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Scene';\r\n\r\n\t\tthis.background = null;\r\n\t\tthis.fog = null;\r\n\t\tthis.overrideMaterial = null;\r\n\r\n\t\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Scene,\r\n\r\n\t\tisScene: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\r\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\r\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\r\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _points = [\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3()\r\n\t];\r\n\r\n\tvar _vector$2 = new Vector3();\r\n\r\n\tvar _box = new Box3();\r\n\r\n\t// triangle centered vertices\r\n\r\n\tvar _v0 = new Vector3();\r\n\tvar _v1$2 = new Vector3();\r\n\tvar _v2 = new Vector3();\r\n\r\n\t// triangle edge vectors\r\n\r\n\tvar _f0 = new Vector3();\r\n\tvar _f1 = new Vector3();\r\n\tvar _f2 = new Vector3();\r\n\r\n\tvar _center = new Vector3();\r\n\tvar _extents = new Vector3();\r\n\tvar _triangleNormal = new Vector3();\r\n\tvar _testAxis = new Vector3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tisBox3: true,\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromArray: function ( array ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar x = array[ i ];\r\n\t\t\t\tvar y = array[ i + 1 ];\r\n\t\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\tif ( z < minZ ) { minZ = z; }\r\n\r\n\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar x = attribute.getX( i );\r\n\t\t\t\tvar y = attribute.getY( i );\r\n\t\t\t\tvar z = attribute.getZ( i );\r\n\r\n\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\tif ( z < minZ ) { minZ = z; }\r\n\r\n\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\treturn this.expandByObject( object );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByObject: function ( object ) {\r\n\r\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box.copy( geometry.boundingBox );\r\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tthis.expandByPoint( _box.min );\r\n\t\t\t\tthis.expandByPoint( _box.max );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByObject( children[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, _vector$2 );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\t\tvar min, max;\r\n\r\n\t\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsTriangle: function ( triangle ) {\r\n\r\n\t\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute box center and extents\r\n\t\t\tthis.getCenter( _center );\r\n\t\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t\t// translate triangle to aabb origin\r\n\t\t\t_v0.subVectors( triangle.a, _center );\r\n\t\t\t_v1$2.subVectors( triangle.b, _center );\r\n\t\t\t_v2.subVectors( triangle.c, _center );\r\n\r\n\t\t\t// compute edge vectors for triangle\r\n\t\t\t_f0.subVectors( _v1$2, _v0 );\r\n\t\t\t_f1.subVectors( _v2, _v1$2 );\r\n\t\t\t_f2.subVectors( _v0, _v2 );\r\n\r\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\t\tvar axes = [\r\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t\t];\r\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// test 3 face normals from the aabb\r\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// finally testing the face normal of the triangle\r\n\t\t\t// use already existing triangle edge vectors here\r\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingSphere: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\r\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( _vector$2 ).length() * 0.5;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif ( this.isEmpty() ) { return this; }\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\t\tthis.setFromPoints( _points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t\t_testAxis.fromArray( axes, i );\r\n\t\t\t// project the aabb onto the seperating axis\r\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\r\n\t\t\tvar p0 = v0.dot( _testAxis );\r\n\t\t\tvar p1 = v1.dot( _testAxis );\r\n\t\t\tvar p2 = v2.dot( _testAxis );\r\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t\t// the axis is seperating and we can exit\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tvar _box$1 = new Box3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Sphere( center, radius ) {\r\n\r\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Sphere.prototype, {\r\n\r\n\t\tset: function ( center, radius ) {\r\n\r\n\t\t\tthis.center.copy( center );\r\n\t\t\tthis.radius = radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sphere ) {\r\n\r\n\t\t\tthis.center.copy( sphere.center );\r\n\t\t\tthis.radius = sphere.radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tempty: function () {\r\n\r\n\t\t\treturn ( this.radius <= 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsSphere( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.copy( point );\r\n\r\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingBox: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\r\n\t\t\t\ttarget = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.set( this.center, this.center );\r\n\t\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.center.applyMatrix4( matrix );\r\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.center.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _vector$3 = new Vector3();\r\n\tvar _segCenter = new Vector3();\r\n\tvar _segDir = new Vector3();\r\n\tvar _diff = new Vector3();\r\n\r\n\tvar _edge1 = new Vector3();\r\n\tvar _edge2 = new Vector3();\r\n\tvar _normal = new Vector3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Ray( origin, direction ) {\r\n\r\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\r\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\r\n\r\n\t}\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\tthis.origin.copy( origin );\r\n\t\t\tthis.direction.copy( direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( ray ) {\r\n\r\n\t\t\tthis.origin.copy( ray.origin );\r\n\t\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( v ) {\r\n\r\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trecast: function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, _vector$3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\t\tvar directionDistance = target.dot( this.direction );\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToPoint: function ( point ) {\r\n\r\n\t\t\tvar directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn _vector$3.distanceToSquared( point );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( _segDir );\r\n\t\t\tvar b0 = _diff.dot( this.direction );\r\n\t\t\tvar b1 = - _diff.dot( _segDir );\r\n\t\t\tvar c = _diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t},\r\n\r\n\t\tintersectSphere: function ( sphere, target ) {\r\n\r\n\t\t\t_vector$3.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = _vector$3.dot( this.direction );\r\n\t\t\tvar d2 = _vector$3.dot( _vector$3 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) { return null; }\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t\t// Return if the ray never intersects the plane\r\n\r\n\t\t\treturn t >= 0 ? t : null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectPlane: function ( plane, target ) {\r\n\r\n\t\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\t\tif ( t === null ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.at( t, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// check if the ray lies on the plane first\r\n\r\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t},\r\n\r\n\t\tintersectBox: function ( box, target ) {\r\n\r\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\t\tvar origin = this.origin;\r\n\r\n\t\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\r\n\r\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\r\n\r\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\r\n\r\n\t\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\r\n\r\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\r\n\r\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\r\n\r\n\t\t\t//return point closest to the ray (positive side)\r\n\r\n\t\t\tif ( tmax < 0 ) { return null; }\r\n\r\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, _vector$3 ) !== null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\t_edge1.subVectors( b, a );\r\n\t\t\t_edge2.subVectors( c, a );\r\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( _normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) { return null; }\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_diff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( ray ) {\r\n\r\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _vector1 = new Vector3();\r\n\tvar _vector2 = new Vector3();\r\n\tvar _normalMatrix = new Matrix3();\r\n\r\n\tfunction Plane( normal, constant ) {\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Plane.prototype, {\r\n\r\n\t\tisPlane: true,\r\n\r\n\t\tset: function ( normal, constant ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( plane ) {\r\n\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t\t},\r\n\r\n\t\tprojectPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\r\n\r\n\t\t},\r\n\r\n\t\tintersectLine: function ( line, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar direction = line.delta( _vector1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsLine: function ( line ) {\r\n\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tcoplanarPoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( plane ) {\r\n\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _v0$1 = new Vector3();\r\n\tvar _v1$3 = new Vector3();\r\n\tvar _v2$1 = new Vector3();\r\n\tvar _v3 = new Vector3();\r\n\r\n\tvar _vab = new Vector3();\r\n\tvar _vac = new Vector3();\r\n\tvar _vbc = new Vector3();\r\n\tvar _vap = new Vector3();\r\n\tvar _vbp = new Vector3();\r\n\tvar _vcp = new Vector3();\r\n\r\n\tfunction Triangle( a, b, c ) {\r\n\r\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\r\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\r\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tgetNormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( c, b );\r\n\t\t\t_v0$1.subVectors( a, b );\r\n\t\t\ttarget.cross( _v0$1 );\r\n\r\n\t\t\tvar targetLengthSq = target.lengthSq();\r\n\t\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t\t},\r\n\r\n\t\t// static/instance method to calculate barycentric coordinates\r\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\r\n\r\n\t\t\t_v0$1.subVectors( c, a );\r\n\t\t\t_v1$3.subVectors( b, a );\r\n\t\t\t_v2$1.subVectors( point, a );\r\n\r\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\r\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\r\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\r\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\r\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\r\n\r\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// collinear or singular triangle\r\n\t\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar invDenom = 1 / denom;\r\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point, a, b, c ) {\r\n\r\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\r\n\r\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\r\n\r\n\t\t\ttarget.set( 0, 0 );\r\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\r\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\r\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tisFrontFacing: function ( a, b, c, direction ) {\r\n\r\n\t\t\t_v0$1.subVectors( c, b );\r\n\t\t\t_v1$3.subVectors( a, b );\r\n\r\n\t\t\t// strictly front facing\r\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tset: function ( a, b, c ) {\r\n\r\n\t\t\tthis.a.copy( a );\r\n\t\t\tthis.b.copy( b );\r\n\t\t\tthis.c.copy( c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\t\tthis.a.copy( points[ i0 ] );\r\n\t\t\tthis.b.copy( points[ i1 ] );\r\n\t\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( triangle ) {\r\n\r\n\t\t\tthis.a.copy( triangle.a );\r\n\t\t\tthis.b.copy( triangle.b );\r\n\t\t\tthis.c.copy( triangle.c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetArea: function () {\r\n\r\n\t\t\t_v0$1.subVectors( this.c, this.b );\r\n\t\t\t_v1$3.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tgetMidpoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t\t},\r\n\r\n\t\tgetNormal: function ( target ) {\r\n\r\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetPlane: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\r\n\t\t\t\ttarget = new Plane();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tgetBarycoord: function ( point, target ) {\r\n\r\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tisFrontFacing: function ( direction ) {\r\n\r\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsTriangle( this );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( p, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar a = this.a, b = this.b, c = this.c;\r\n\t\t\tvar v, w;\r\n\r\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t\t_vab.subVectors( b, a );\r\n\t\t\t_vac.subVectors( c, a );\r\n\t\t\t_vap.subVectors( p, a );\r\n\t\t\tvar d1 = _vab.dot( _vap );\r\n\t\t\tvar d2 = _vac.dot( _vap );\r\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\t\treturn target.copy( a );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vbp.subVectors( p, b );\r\n\t\t\tvar d3 = _vab.dot( _vbp );\r\n\t\t\tvar d4 = _vac.dot( _vbp );\r\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\t\treturn target.copy( b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vc = d1 * d4 - d3 * d2;\r\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vcp.subVectors( p, c );\r\n\t\t\tvar d5 = _vab.dot( _vcp );\r\n\t\t\tvar d6 = _vac.dot( _vcp );\r\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\t\treturn target.copy( c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vb = d5 * d2 - d1 * d6;\r\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar va = d3 * d6 - d5 * d4;\r\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t\t_vbc.subVectors( c, b );\r\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face region\r\n\t\t\tvar denom = 1 / ( va + vb + vc );\r\n\t\t\t// u = va * denom\r\n\t\t\tv = vb * denom;\r\n\t\t\tw = vc * denom;\r\n\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( triangle ) {\r\n\r\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n\tvar _hslA = { h: 0, s: 0, l: 0 };\r\n\tvar _hslB = { h: 0, s: 0, l: 0 };\r\n\r\n\tfunction Color( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\t\t\treturn this.set( r );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.setRGB( r, g, b );\r\n\r\n\t}\r\n\r\n\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\tif ( t < 0 ) { t += 1; }\r\n\t\tif ( t > 1 ) { t -= 1; }\r\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\r\n\t\tif ( t < 1 / 2 ) { return q; }\r\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction SRGBToLinear( c ) {\r\n\r\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n\t}\r\n\r\n\tfunction LinearToSRGB( c ) {\r\n\r\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n\t}\r\n\r\n\tObject.assign( Color.prototype, {\r\n\r\n\t\tisColor: true,\r\n\r\n\t\tr: 1, g: 1, b: 1,\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.r = scalar;\r\n\t\t\tthis.g = scalar;\r\n\t\t\tthis.b = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHex: function ( hex ) {\r\n\r\n\t\t\thex = Math.floor( hex );\r\n\r\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\t\tthis.r = r;\r\n\t\t\tthis.g = g;\r\n\t\t\tthis.b = b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHSL: function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = _Math.euclideanModulo( h, 1 );\r\n\t\t\ts = _Math.clamp( s, 0, 1 );\r\n\t\t\tl = _Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetStyle: function ( style ) {\r\n\r\n\t\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\t\tif ( string === undefined ) { return; }\r\n\r\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar m;\r\n\r\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t\t// rgb / hsl\r\n\r\n\t\t\t\tvar color;\r\n\t\t\t\tvar name = m[ 1 ];\r\n\t\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'rgb':\r\n\t\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'hsl':\r\n\t\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t\t// hex color\r\n\r\n\t\t\t\tvar hex = m[ 1 ];\r\n\t\t\t\tvar size = hex.length;\r\n\r\n\t\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t\t// #ff0\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t\t// #ff0000\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t\treturn this.setColorName( style );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetColorName: function ( style ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = _colorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( color ) {\r\n\r\n\t\t\tthis.r = color.r;\r\n\t\t\tthis.g = color.g;\r\n\t\t\tthis.b = color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\r\n\r\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\r\n\r\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopySRGBToLinear: function ( color ) {\r\n\r\n\t\t\tthis.r = SRGBToLinear( color.r );\r\n\t\t\tthis.g = SRGBToLinear( color.g );\r\n\t\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToSRGB: function ( color ) {\r\n\r\n\t\t\tthis.r = LinearToSRGB( color.r );\r\n\t\t\tthis.g = LinearToSRGB( color.g );\r\n\t\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertSRGBToLinear: function () {\r\n\r\n\t\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToSRGB: function () {\r\n\r\n\t\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetHex: function () {\r\n\r\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t\t},\r\n\r\n\t\tgetHexString: function () {\r\n\r\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t\t},\r\n\r\n\t\tgetHSL: function ( target ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\r\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\t\tvar max = Math.max( r, g, b );\r\n\t\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\t\tvar hue, saturation;\r\n\t\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\t\tif ( min === max ) {\r\n\r\n\t\t\t\thue = 0;\r\n\t\t\t\tsaturation = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar delta = max - min;\r\n\r\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thue /= 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.h = hue;\r\n\t\t\ttarget.s = saturation;\r\n\t\t\ttarget.l = lightness;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetStyle: function () {\r\n\r\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t\t},\r\n\r\n\t\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\t\tthis.getHSL( _hslA );\r\n\r\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\r\n\r\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( color ) {\r\n\r\n\t\t\tthis.r += color.r;\r\n\t\t\tthis.g += color.g;\r\n\t\t\tthis.b += color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddColors: function ( color1, color2 ) {\r\n\r\n\t\t\tthis.r = color1.r + color2.r;\r\n\t\t\tthis.g = color1.g + color2.g;\r\n\t\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.r += s;\r\n\t\t\tthis.g += s;\r\n\t\t\tthis.b += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( color ) {\r\n\r\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( color ) {\r\n\r\n\t\t\tthis.r *= color.r;\r\n\t\t\tthis.g *= color.g;\r\n\t\t\tthis.b *= color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tthis.r *= s;\r\n\t\t\tthis.g *= s;\r\n\t\t\tthis.b *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( color, alpha ) {\r\n\r\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpHSL: function ( color, alpha ) {\r\n\r\n\t\t\tthis.getHSL( _hslA );\r\n\t\t\tcolor.getHSL( _hslB );\r\n\r\n\t\t\tvar h = _Math.lerp( _hslA.h, _hslB.h, alpha );\r\n\t\t\tvar s = _Math.lerp( _hslA.s, _hslB.s, alpha );\r\n\t\t\tvar l = _Math.lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\t\tthis.setHSL( h, s, l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( c ) {\r\n\r\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.r = array[ offset ];\r\n\t\t\tthis.g = array[ offset + 1 ];\r\n\t\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.r;\r\n\t\t\tarray[ offset + 1 ] = this.g;\r\n\t\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn this.getHex();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tColor.NAMES = _colorKeywords;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\r\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\r\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Face3.prototype, {\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.a = source.a;\r\n\t\t\tthis.b = source.b;\r\n\t\t\tthis.c = source.c;\r\n\r\n\t\t\tthis.normal.copy( source.normal );\r\n\t\t\tthis.color.copy( source.color );\r\n\r\n\t\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar materialId = 0;\r\n\r\n\tfunction Material() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.flatShading = false;\r\n\t\tthis.vertexTangents = false;\r\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\t\tthis.stencilRef = 0;\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaTest = 0;\r\n\t\tthis.premultipliedAlpha = false;\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Material,\r\n\r\n\t\tisMaterial: true,\r\n\r\n\t\tonBeforeCompile: function () {},\r\n\r\n\t\tsetValues: function ( values ) {\r\n\r\n\t\t\tif ( values === undefined ) { return; }\r\n\r\n\t\t\tfor ( var key in values ) {\r\n\r\n\t\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for backward compatability if shading is set in the constructor\r\n\t\t\t\tif ( key === 'shading' ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Material',\r\n\t\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Material serialization\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\r\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\r\n\r\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\r\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\r\n\r\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\r\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\r\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\r\n\r\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\r\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\r\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\r\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\r\n\r\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\r\n\r\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\r\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\r\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\r\n\r\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\r\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\r\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\r\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\r\n\r\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\r\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\r\n\r\n\t\t\tdata.depthFunc = this.depthFunc;\r\n\t\t\tdata.depthTest = this.depthTest;\r\n\t\t\tdata.depthWrite = this.depthWrite;\r\n\r\n\t\t\tdata.stencilWrite = this.stencilWrite;\r\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\r\n\t\t\tdata.stencilFunc = this.stencilFunc;\r\n\t\t\tdata.stencilRef = this.stencilRef;\r\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\r\n\t\t\tdata.stencilFail = this.stencilFail;\r\n\t\t\tdata.stencilZFail = this.stencilZFail;\r\n\t\t\tdata.stencilZPass = this.stencilZPass;\r\n\r\n\t\t\t// rotation (SpriteMaterial)\r\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\r\n\r\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\r\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\r\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\r\n\r\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\r\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\r\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\r\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\r\n\r\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\r\n\r\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\r\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\r\n\r\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\r\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\r\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\r\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\r\n\r\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\r\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\r\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\r\n\r\n\t\t\tif ( this.visible === false ) { data.visible = false; }\r\n\r\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\r\n\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\r\n\r\n\t\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\r\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.fog = source.fog;\r\n\r\n\t\t\tthis.blending = source.blending;\r\n\t\t\tthis.side = source.side;\r\n\t\t\tthis.flatShading = source.flatShading;\r\n\t\t\tthis.vertexTangents = source.vertexTangents;\r\n\t\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\t\tthis.opacity = source.opacity;\r\n\t\t\tthis.transparent = source.transparent;\r\n\r\n\t\t\tthis.blendSrc = source.blendSrc;\r\n\t\t\tthis.blendDst = source.blendDst;\r\n\t\t\tthis.blendEquation = source.blendEquation;\r\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\t\tthis.depthFunc = source.depthFunc;\r\n\t\t\tthis.depthTest = source.depthTest;\r\n\t\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\t\tthis.stencilRef = source.stencilRef;\r\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\t\tthis.stencilFail = source.stencilFail;\r\n\t\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\t\tvar srcPlanes = source.clippingPlanes,\r\n\t\t\t\tdstPlanes = null;\r\n\r\n\t\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\t\tvar n = srcPlanes.length;\r\n\t\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.clippingPlanes = dstPlanes;\r\n\t\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\t\tthis.precision = source.precision;\r\n\r\n\t\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\t\tthis.dithering = source.dithering;\r\n\r\n\t\t\tthis.alphaTest = source.alphaTest;\r\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\r\n\r\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\r\n\r\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\r\n\t\tisBufferAttribute: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetUsage: function ( value ) {\r\n\r\n\t\t\tthis.usage = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.itemSize = source.itemSize;\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.normalized = source.normalized;\r\n\r\n\t\t\tthis.usage = source.usage;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.itemSize;\r\n\t\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyArray: function ( array ) {\r\n\r\n\t\t\tthis.array.set( array );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\t\tcolor = new Color();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector2();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn {\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\ttype: this.array.constructor.name,\r\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\r\n\r\n\r\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\r\n\r\n\r\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\r\n\r\n\r\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\r\n\r\n\r\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\r\n\r\n\r\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\r\n\r\n\r\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectGeometry() {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.uvs2 = [];\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.morphTargets = {};\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\t// this.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( DirectGeometry.prototype, {\r\n\r\n\t\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\t\tvar group;\r\n\t\t\tvar groups = [];\r\n\t\t\tvar materialIndex = undefined;\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t// materials\r\n\r\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgroup = {\r\n\t\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.groups = groups;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\t\tvar morphTargetsPosition;\r\n\r\n\t\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\r\n\t\t\t\t\t\tname: morphTargets[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = geometry.morphNormals;\r\n\t\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\t\tvar morphTargetsNormal;\r\n\r\n\t\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\r\n\t\t\t\t\t\tname: morphNormals[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tvar skinIndices = geometry.skinIndices;\r\n\t\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// morphs\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// skins\r\n\r\n\t\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeGroups( geometry );\r\n\r\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction arrayMax( array ) {\r\n\r\n\t\tif ( array.length === 0 ) { return - Infinity; }\r\n\r\n\t\tvar max = array[ 0 ];\r\n\r\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\r\n\r\n\t\t}\r\n\r\n\t\treturn max;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\r\n\r\n\tvar _m1$2 = new Matrix4();\r\n\tvar _obj = new Object3D();\r\n\tvar _offset = new Vector3();\r\n\tvar _box$2 = new Box3();\r\n\tvar _boxMorphTargets = new Box3();\r\n\tvar _vector$4 = new Vector3();\r\n\r\n\tfunction BufferGeometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.morphTargetsRelative = false;\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometry,\r\n\r\n\t\tisBufferGeometry: true,\r\n\r\n\t\tgetIndex: function () {\r\n\r\n\t\t\treturn this.index;\r\n\r\n\t\t},\r\n\r\n\t\tsetIndex: function ( index ) {\r\n\r\n\t\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.index = index;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetAttribute: function ( name ) {\r\n\r\n\t\t\treturn this.attributes[ name ];\r\n\r\n\t\t},\r\n\r\n\t\tsetAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeleteAttribute: function ( name ) {\r\n\r\n\t\t\tdelete this.attributes[ name ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\t\tthis.groups.push( {\r\n\r\n\t\t\t\tstart: start,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclearGroups: function () {\r\n\r\n\t\t\tthis.groups = [];\r\n\r\n\t\t},\r\n\r\n\t\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\t\tthis.drawRange.start = start;\r\n\t\t\tthis.drawRange.count = count;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tmatrix.applyToBufferAttribute( position );\r\n\t\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normal = this.attributes.normal;\r\n\r\n\t\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\r\n\t\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tangent = this.attributes.tangent;\r\n\r\n\t\t\tif ( tangent !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\t// Tangent is vec4, but the '.w' component is a sign value (+1/-1).\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( tangent );\r\n\t\t\t\ttangent.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\t_m1$2.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\t_m1$2.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\t_m1$2.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( x, y, z ) {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\t_m1$2.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( x, y, z ) {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\t_m1$2.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( vector ) {\r\n\r\n\t\t\t_obj.lookAt( vector );\r\n\r\n\t\t\t_obj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( _obj.matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\r\n\r\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\r\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tvar position = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateFromObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\r\n\r\n\t\t\t\t\tdirect = undefined;\r\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry = direct;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.position;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.normal;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.color;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.uv;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.lineDistance;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t\t},\r\n\r\n\t\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\r\n\t\t\t\t\tattribute.name = morphTarget.name;\r\n\r\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning\r\n\r\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\t\tif ( position ) {\r\n\r\n\t\t\t\t// first, find the center of the bounding sphere\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\t_box$2.setFromBufferAttribute( position );\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box$2.getCenter( center );\r\n\r\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\r\n\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\r\n\r\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\r\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\t// backwards compatibility\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function () {\r\n\r\n\t\t\tvar index = this.index;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tif ( attributes.position ) {\r\n\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\t// indexed elements\r\n\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, offset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset === undefined ) {\r\n\r\n\t\t\t\toffset = 0;\r\n\r\n\t\t\t\tconsole.warn(\r\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\r\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\r\n\r\n\t\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\r\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\r\n\r\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeNormals: function () {\r\n\r\n\t\t\tvar normals = this.attributes.normal;\r\n\r\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t_vector$4.x = normals.getX( i );\r\n\t\t\t\t_vector$4.y = normals.getY( i );\r\n\t\t\t\t_vector$4.z = normals.getZ( i );\r\n\r\n\t\t\t\t_vector$4.normalize();\r\n\r\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoNonIndexed: function () {\r\n\r\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\t\tvar array = attribute.array;\r\n\t\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.index === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry2 = new BufferGeometry();\r\n\r\n\t\t\tvar indices = this.index.array;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = this.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar morphArray = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\r\n\r\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\t\tmorphArray.push( newAttribute );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry2;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard BufferGeometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = { attributes: {} };\r\n\r\n\t\t\tvar index = this.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdata.data.index = {\r\n\t\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\t\tvar attributeData = attribute.toJSON();\r\n\r\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\r\n\r\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = {};\r\n\t\t\tvar hasMorphAttributes = false;\r\n\r\n\t\t\tfor ( var key in this.morphAttributes ) {\r\n\r\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\r\n\r\n\t\t\t\tvar array = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar attribute = attributeArray[ i ];\r\n\r\n\t\t\t\t\tvar attributeData = attribute.toJSON();\r\n\r\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\r\n\r\n\t\t\t\t\tarray.push( attributeData );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( array.length > 0 ) {\r\n\r\n\t\t\t\t\tmorphAttributes[ key ] = array;\r\n\r\n\t\t\t\t\thasMorphAttributes = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphAttributes ) {\r\n\r\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\r\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new BufferGeometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar name, i, l;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.index = null;\r\n\t\t\tthis.attributes = {};\r\n\t\t\tthis.morphAttributes = {};\r\n\t\t\tthis.groups = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// index\r\n\r\n\t\t\tvar index = source.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tvar attributes = source.attributes;\r\n\r\n\t\t\tfor ( name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = source.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = source.groups;\r\n\r\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// draw range\r\n\r\n\t\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t\t// user data\r\n\r\n\t\t\tthis.userData = source.userData;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author jonobr1 / http://jonobr1.com/\r\n\t */\r\n\r\n\tvar _inverseMatrix = new Matrix4();\r\n\tvar _ray = new Ray();\r\n\tvar _sphere = new Sphere();\r\n\r\n\tvar _vA = new Vector3();\r\n\tvar _vB = new Vector3();\r\n\tvar _vC = new Vector3();\r\n\r\n\tvar _tempA = new Vector3();\r\n\tvar _tempB = new Vector3();\r\n\tvar _tempC = new Vector3();\r\n\r\n\tvar _morphA = new Vector3();\r\n\tvar _morphB = new Vector3();\r\n\tvar _morphC = new Vector3();\r\n\r\n\tvar _uvA = new Vector2();\r\n\tvar _uvB = new Vector2();\r\n\tvar _uvC = new Vector2();\r\n\r\n\tvar _intersectionPoint = new Vector3();\r\n\tvar _intersectionPointWorld = new Vector3();\r\n\r\n\tfunction Mesh( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.drawMode = TrianglesDrawMode;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Mesh,\r\n\r\n\t\tisMesh: true,\r\n\r\n\t\tsetDrawMode: function ( value ) {\r\n\r\n\t\t\tthis.drawMode = value;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.drawMode = source.drawMode;\r\n\r\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\tif ( material === undefined ) { return; }\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\r\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t\t// Check boundingBox before continuing\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check unsupported draw modes\r\n\r\n\t\t\tif ( this.drawMode !== TrianglesDrawMode ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar intersection;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar position = geometry.attributes.position;\r\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\r\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\r\n\t\t\t\tvar uv = geometry.attributes.uv;\r\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\r\n\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\tvar drawRange = geometry.drawRange;\r\n\t\t\t\tvar i, j, il, jl;\r\n\t\t\t\tvar group, groupMaterial;\r\n\t\t\t\tvar start, end;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t// indexed buffer geometry\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = index.getX( j );\r\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\r\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\ta = index.getX( i );\r\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\r\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\r\n\r\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = j;\r\n\t\t\t\t\t\t\t\tb = j + 1;\r\n\t\t\t\t\t\t\t\tc = j + 2;\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\ta = i;\r\n\t\t\t\t\t\t\tb = i + 1;\r\n\t\t\t\t\t\t\tc = i + 2;\r\n\r\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar uvs;\r\n\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\r\n\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\r\n\r\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\r\n\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\r\n\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\tvar intersect;\r\n\r\n\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n\t\t}\r\n\r\n\t\tif ( intersect === null ) { return null; }\r\n\r\n\t\t_intersectionPointWorld.copy( point );\r\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\r\n\r\n\t\treturn {\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: _intersectionPointWorld.clone(),\r\n\t\t\tobject: object\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\r\n\r\n\t\t_vA.fromBufferAttribute( position, a );\r\n\t\t_vB.fromBufferAttribute( position, b );\r\n\t\t_vC.fromBufferAttribute( position, c );\r\n\r\n\t\tvar morphInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\r\n\r\n\t\t\t_morphA.set( 0, 0, 0 );\r\n\t\t\t_morphB.set( 0, 0, 0 );\r\n\t\t\t_morphC.set( 0, 0, 0 );\r\n\r\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphInfluences[ i ];\r\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\r\n\r\n\t\t\t\tif ( influence === 0 ) { continue; }\r\n\r\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\r\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\r\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\r\n\r\n\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\r\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\r\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\r\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\r\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vA.add( _morphA );\r\n\t\t\t_vB.add( _morphB );\r\n\t\t\t_vC.add( _morphC );\r\n\r\n\t\t}\r\n\r\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\r\n\r\n\t\tif ( intersection ) {\r\n\r\n\t\t\tif ( uv ) {\r\n\r\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\r\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\r\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv2 ) {\r\n\r\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\r\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\r\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\r\n\r\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar face = new Face3( a, b, c );\r\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\r\n\r\n\t\t\tintersection.face = face;\r\n\r\n\t\t}\r\n\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\r\n\tvar _m1$3 = new Matrix4();\r\n\tvar _obj$1 = new Object3D();\r\n\tvar _offset$1 = new Vector3();\r\n\r\n\tfunction Geometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Geometry';\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [[]];\r\n\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\tthis.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.elementsNeedUpdate = false;\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.lineDistancesNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Geometry,\r\n\r\n\t\tisGeometry: true,\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\t_m1$3.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\t_m1$3.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\t_m1$3.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( x, y, z ) {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\t_m1$3.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( x, y, z ) {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\t_m1$3.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( vector ) {\r\n\r\n\t\t\t_obj$1.lookAt( vector );\r\n\r\n\t\t\t_obj$1.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( _obj$1.matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\r\n\t\t\tif ( attributes.position === undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\r\n\r\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\r\n\r\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\r\n\r\n\t\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\r\n\t\t\t\t\tscope.colors[ a ].clone(),\r\n\t\t\t\t\tscope.colors[ b ].clone(),\r\n\t\t\t\t\tscope.colors[ c ].clone() ];\r\n\r\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\r\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\r\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\r\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\r\n\t\t\t\t];\r\n\r\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\r\n\t\t\t\t\t] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\r\n\t\t\t\t\t] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\r\n\r\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\tvar center = this.boundingSphere.center;\r\n\t\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\t\tvar matrix = new Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\tthis.applyMatrix( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tcb.normalize();\r\n\r\n\t\t\t\tface.normal.copy( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\r\n\r\n\t\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFlatVertexNormals: function () {\r\n\r\n\t\t\tvar f, fl, face;\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeMorphNormals: function () {\r\n\r\n\t\t\tvar i, il, f, fl, face;\r\n\r\n\t\t\t// save original normals\r\n\t\t\t// - create temp variables on first access\r\n\t\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\r\n\r\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\t\tvar tmpGeo = new Geometry();\r\n\t\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// create on first access\r\n\r\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\tfaceNormal = new Vector3();\r\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\r\n\r\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t\t// set vertices to morph target\r\n\r\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t// compute morph normals\r\n\r\n\t\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t\t// store morph normals\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// restore original normals\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normalMatrix,\r\n\t\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\t\tvertices1 = this.vertices,\r\n\t\t\t\tvertices2 = geometry.vertices,\r\n\t\t\t\tfaces1 = this.faces,\r\n\t\t\t\tfaces2 = geometry.faces,\r\n\t\t\t\tcolors1 = this.colors,\r\n\t\t\t\tcolors2 = geometry.colors;\r\n\r\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\r\n\r\n\t\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\r\n\r\n\t\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmergeMesh: function ( mesh ) {\r\n\r\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\r\n\r\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Checks for duplicate vertices with hashmap.\r\n\t\t * Duplicated vertices are removed\r\n\t\t * and faces' vertices are updated.\r\n\t\t */\r\n\r\n\t\tmergeVertices: function () {\r\n\r\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\t\tvar unique = [], changes = [];\r\n\r\n\t\t\tvar v, key;\r\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\t\tvar i, il, face;\r\n\t\t\tvar indices, j, jl;\r\n\r\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tv = this.vertices[ i ];\r\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t\t// have to remove them from the geometry.\r\n\t\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Use unique set of vertices\r\n\r\n\t\t\tvar diff = this.vertices.length - unique.length;\r\n\t\t\tthis.vertices = unique;\r\n\t\t\treturn diff;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.vertices = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\t\tvar faces = this.faces;\r\n\t\t\tvar length = faces.length;\r\n\r\n\t\t\t// tag faces\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sort faces\r\n\r\n\t\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t\t// sort uvs\r\n\r\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\t\tvar newUvs1, newUvs2;\r\n\r\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\r\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\r\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\r\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Geometry',\r\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Geometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertices = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar normalsHash = {};\r\n\t\t\tvar colors = [];\r\n\t\t\tvar colorsHash = {};\r\n\t\t\tvar uvs = [];\r\n\t\t\tvar uvsHash = {};\r\n\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\t\tvar hasMaterial = true;\r\n\t\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\t\tvar faceType = 0;\r\n\r\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\t\tfaces.push( faceType );\r\n\t\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = {};\r\n\r\n\t\t\tdata.data.vertices = vertices;\r\n\t\t\tdata.data.normals = normals;\r\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\r\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\r\n\t\t\tdata.data.faces = faces;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new Geometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar i, il, j, jl, k, kl;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.colors = [];\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.faceVertexUvs = [[]];\r\n\t\t\tthis.morphTargets = [];\r\n\t\t\tthis.morphNormals = [];\r\n\t\t\tthis.skinWeights = [];\r\n\t\t\tthis.skinIndices = [];\r\n\t\t\tthis.lineDistances = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tvar vertices = source.vertices;\r\n\r\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tvar colors = source.colors;\r\n\r\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tvar faces = source.faces;\r\n\r\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face vertex uvs\r\n\r\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphTargets = source.morphTargets;\r\n\r\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = {};\r\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.vertices = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// normals\r\n\r\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.normals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph normals\r\n\r\n\t\t\tvar morphNormals = source.morphNormals;\r\n\r\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = {};\r\n\r\n\t\t\t\t// vertex normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.vertexNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\r\n\t\t\t\t\t\tvar destVertexNormal = {};\r\n\r\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\r\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\r\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\r\n\r\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// face normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.faceNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphNormals.push( morphNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin weights\r\n\r\n\t\t\tvar skinWeights = source.skinWeights;\r\n\r\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin indices\r\n\r\n\t\t\tvar skinIndices = source.skinIndices;\r\n\r\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tvar lineDistances = source.lineDistances;\r\n\r\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update flags\r\n\r\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\r\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\r\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// BoxGeometry\r\n\r\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\r\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\t\tGeometry.call(this);\r\n\r\n\t\t\tthis.type = 'BoxGeometry';\r\n\r\n\t\t\tthis.parameters = {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepth: depth,\r\n\t\t\t\twidthSegments: widthSegments,\r\n\t\t\t\theightSegments: heightSegments,\r\n\t\t\t\tdepthSegments: depthSegments\r\n\t\t\t};\r\n\r\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\t\t\tthis.mergeVertices();\r\n\r\n\t\t}\r\n\r\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\r\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\r\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\r\n\r\n\t\treturn BoxGeometry;\r\n\t}(Geometry));\r\n\r\n\t// BoxBufferGeometry\r\n\r\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\r\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\t\tBufferGeometry.call(this);\r\n\r\n\t\t\tthis.type = 'BoxBufferGeometry';\r\n\r\n\t\t\tthis.parameters = {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepth: depth,\r\n\t\t\t\twidthSegments: widthSegments,\r\n\t\t\t\theightSegments: heightSegments,\r\n\t\t\t\tdepthSegments: depthSegments\r\n\t\t\t};\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\twidth = width || 1;\r\n\t\t\theight = height || 1;\r\n\t\t\tdepth = depth || 1;\r\n\r\n\t\t\t// segments\r\n\r\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t\t\t// buffers\r\n\r\n\t\t\tvar indices = [];\r\n\t\t\tvar vertices = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar uvs = [];\r\n\r\n\t\t\t// helper variables\r\n\r\n\t\t\tvar numberOfVertices = 0;\r\n\t\t\tvar groupStart = 0;\r\n\r\n\t\t\t// build each side of the box geometry\r\n\r\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\r\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\r\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\r\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\r\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\r\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t\t\t// build geometry\r\n\r\n\t\t\tthis.setIndex( indices );\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\t\t\tvar segmentWidth = width / gridX;\r\n\t\t\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\t\t\tvar widthHalf = width / 2;\r\n\t\t\t\tvar heightHalf = height / 2;\r\n\t\t\t\tvar depthHalf = depth / 2;\r\n\r\n\t\t\t\tvar gridX1 = gridX + 1;\r\n\t\t\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\t\t\tvar vertexCounter = 0;\r\n\t\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t\tvar ix, iy;\r\n\r\n\t\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t\t\t// now apply vector to vertex buffer\r\n\r\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t\t\t// now apply vector to normal buffer\r\n\r\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t\t\t\t// counters\r\n\r\n\t\t\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t\t// increase counter\r\n\r\n\t\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t\t\t// calculate new start value for groups\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\r\n\t\t\t\t// update total number of vertices\r\n\r\n\t\t\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\r\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\r\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\r\n\r\n\t\treturn BoxBufferGeometry;\r\n\t}(BufferGeometry));\r\n\r\n\t/**\r\n\t * Uniform Utilities\r\n\t */\r\n\r\n\tfunction cloneUniforms( src ) {\r\n\r\n\t\tvar dst = {};\r\n\r\n\t\tfor ( var u in src ) {\r\n\r\n\t\t\tdst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in src[ u ] ) {\r\n\r\n\t\t\t\tvar property = src[ u ][ p ];\r\n\r\n\t\t\t\tif ( property && ( property.isColor ||\r\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\r\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\r\n\t\t\t\t\tproperty.isTexture ) ) {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( property ) ) {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tfunction mergeUniforms( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t}\r\n\r\n\t// Legacy\r\n\r\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\r\n\r\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\r\n\r\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  defines: { \"label\" : \"value\" },\r\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\r\n\t *\r\n\t *  fragmentShader: <string>,\r\n\t *  vertexShader: <string>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  lights: <bool>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShaderMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShaderMaterial';\r\n\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\r\n\t\tthis.vertexShader = default_vertex;\r\n\t\tthis.fragmentShader = default_fragment;\r\n\r\n\t\tthis.linewidth = 1;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\t\tthis.skinning = false; // set to use skinning attribute streams\r\n\t\tthis.morphTargets = false; // set to use morph targets\r\n\t\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\t\tthis.extensions = {\r\n\t\t\tderivatives: false, // set to use derivatives\r\n\t\t\tfragDepth: false, // set to use fragment depth values\r\n\t\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t\t};\r\n\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv2': [ 0, 0 ]\r\n\t\t};\r\n\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\tthis.uniformsNeedUpdate = false;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setValues( parameters );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShaderMaterial.prototype = Object.create( Material.prototype );\r\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\r\n\r\n\tShaderMaterial.prototype.isShaderMaterial = true;\r\n\r\n\tShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\r\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\r\n\r\n\t\tthis.defines = Object.assign( {}, source.defines );\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.lights = source.lights;\r\n\t\tthis.clipping = source.clipping;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\tthis.extensions = source.extensions;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.uniforms = {};\r\n\r\n\t\tfor ( var name in this.uniforms ) {\r\n\r\n\t\t\tvar uniform = this.uniforms[ name ];\r\n\t\t\tvar value = uniform.value;\r\n\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 't',\r\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isColor ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'c',\r\n\t\t\t\t\tvalue: value.getHex()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector2 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v2',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\r\n\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\tfor ( var key in this.extensions ) {\r\n\r\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\r\n\tfunction Camera() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Camera,\r\n\r\n\t\tisCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author greggman / http://games.greggman.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\tthis.fov = fov !== undefined ? fov : 50;\r\n\t\tthis.zoom = 1;\r\n\r\n\t\tthis.near = near !== undefined ? near : 0.1;\r\n\t\tthis.far = far !== undefined ? far : 2000;\r\n\t\tthis.focus = 10;\r\n\r\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: PerspectiveCamera,\r\n\r\n\t\tisPerspectiveCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.fov = source.fov;\r\n\t\t\tthis.zoom = source.zoom;\r\n\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\t\t\tthis.focus = source.focus;\r\n\r\n\t\t\tthis.aspect = source.aspect;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\tthis.filmGauge = source.filmGauge;\r\n\t\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t\t *\r\n\t\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t\t * a 35mm (full frame) camera.\r\n\t\t *\r\n\t\t * Values for focal length and film gauge must have the same unit.\r\n\t\t */\r\n\t\tsetFocalLength: function ( focalLength ) {\r\n\r\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t\t */\r\n\t\tgetFocalLength: function () {\r\n\r\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t\t},\r\n\r\n\t\tgetEffectiveFOV: function () {\r\n\r\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\r\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmWidth: function () {\r\n\r\n\t\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmHeight: function () {\r\n\r\n\t\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t\t * multi-monitor/multi-machine setups.\r\n\t\t *\r\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t\t * the monitors are in grid like this\r\n\t\t *\r\n\t\t *   +---+---+---+\r\n\t\t *   | A | B | C |\r\n\t\t *   +---+---+---+\r\n\t\t *   | D | E | F |\r\n\t\t *   +---+---+---+\r\n\t\t *\r\n\t\t * then for each monitor you would call it like this\r\n\t\t *\r\n\t\t *   var w = 1920;\r\n\t\t *   var h = 1080;\r\n\t\t *   var fullWidth = w * 3;\r\n\t\t *   var fullHeight = h * 2;\r\n\t\t *\r\n\t\t *   --A--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t\t *   --B--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t\t *   --C--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t\t *   --D--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t\t *   --E--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t\t *   --F--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t\t *\r\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t\t */\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar near = this.near,\r\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\r\n\t\t\t\theight = 2 * top,\r\n\t\t\t\twidth = this.aspect * height,\r\n\t\t\t\tleft = - 0.5 * width,\r\n\t\t\t\tview = this.view;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar fullWidth = view.fullWidth,\r\n\t\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\t\twidth *= view.width / fullWidth;\r\n\t\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar skew = this.filmOffset;\r\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\r\n\r\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.fov = this.fov;\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\t\t\tdata.object.focus = this.focus;\r\n\r\n\t\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\r\n\r\n\t\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Camera for rendering cube maps\r\n\t *\t- renders scene into axis-aligned cube\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'CubeCamera';\r\n\r\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\r\n\t\tthis.add( cameraPX );\r\n\r\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\r\n\t\tthis.add( cameraNX );\r\n\r\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\r\n\t\tthis.add( cameraPY );\r\n\r\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\r\n\t\tthis.add( cameraNY );\r\n\r\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\r\n\t\tthis.add( cameraPZ );\r\n\r\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\r\n\t\tthis.add( cameraNZ );\r\n\r\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\r\n\r\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\r\n\r\n\t\tthis.update = function ( renderer, scene ) {\r\n\r\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\r\n\t\t\trenderer.render( scene, cameraPX );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\r\n\t\t\trenderer.render( scene, cameraNX );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\r\n\t\t\trenderer.render( scene, cameraPY );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\r\n\t\t\trenderer.render( scene, cameraNY );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\r\n\t\t\trenderer.render( scene, cameraPZ );\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\r\n\t\t\trenderer.render( scene, cameraNZ );\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\r\n\r\n\t\t\t\trenderer.clear( color, depth, stencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\r\n\tCubeCamera.prototype.constructor = CubeCamera;\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction WebGLRenderTargetCube( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t}\r\n\r\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\r\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\r\n\r\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\r\n\r\n\tWebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\r\n\r\n\t\tthis.texture.type = texture.type;\r\n\t\tthis.texture.format = texture.format;\r\n\t\tthis.texture.encoding = texture.encoding;\r\n\r\n\t\tvar scene = new Scene();\r\n\r\n\t\tvar shader = {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\"varying vec3 vWorldDirection;\",\r\n\r\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\r\n\r\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\r\n\r\n\t\t\t\t\"\t#include <begin_vertex>\",\r\n\t\t\t\t\"\t#include <project_vertex>\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\"uniform sampler2D tEquirect;\",\r\n\r\n\t\t\t\t\"varying vec3 vWorldDirection;\",\r\n\r\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\r\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\r\n\r\n\t\t\t\t\"\tvec2 sampleUV;\",\r\n\r\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\r\n\r\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\r\n\r\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( '\\n' ),\r\n\t\t};\r\n\r\n\t\tvar material = new ShaderMaterial( {\r\n\r\n\t\t\ttype: 'CubemapFromEquirect',\r\n\r\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader,\r\n\t\t\tside: BackSide,\r\n\t\t\tblending: NoBlending\r\n\r\n\t\t} );\r\n\r\n\t\tmaterial.uniforms.tEquirect.value = texture;\r\n\r\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\r\n\r\n\t\tscene.add( mesh );\r\n\r\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\r\n\r\n\t\tcamera.renderTarget = this;\r\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\r\n\r\n\t\tcamera.update( renderer, scene );\r\n\r\n\t\tmesh.geometry.dispose();\r\n\t\tmesh.material.dispose();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tDataTexture.prototype = Object.create( Texture.prototype );\r\n\tDataTexture.prototype.constructor = DataTexture;\r\n\r\n\tDataTexture.prototype.isDataTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _sphere$1 = new Sphere();\r\n\tvar _vector$5 = new Vector3();\r\n\r\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tthis.planes = [\r\n\r\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\r\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\r\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\r\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\r\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\r\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( Frustum.prototype, {\r\n\r\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tplanes[ 0 ].copy( p0 );\r\n\t\t\tplanes[ 1 ].copy( p1 );\r\n\t\t\tplanes[ 2 ].copy( p2 );\r\n\t\t\tplanes[ 3 ].copy( p3 );\r\n\t\t\tplanes[ 4 ].copy( p4 );\r\n\t\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( frustum ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix: function ( m ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar me = m.elements;\r\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( _sphere$1 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSprite: function ( sprite ) {\r\n\r\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\r\n\t\t\t_sphere$1.radius = 0.7071067811865476;\r\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( _sphere$1 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar center = sphere.center;\r\n\t\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\t// corner at max distance\r\n\r\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\r\n\r\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\r\n\r\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\r\n\r\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\r\n\r\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\r\n\r\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\r\n\r\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\r\n\r\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\r\n\r\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\r\n\r\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\r\n\r\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\r\n\r\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\";\r\n\r\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = normalMatrix * objectTangent;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\r\n\r\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\r\n\r\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\r\n\r\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\r\n\r\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\r\n\r\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\r\n\r\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\r\n\r\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\r\n\r\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\r\n\r\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\r\n\r\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\r\n\r\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\r\n\r\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\r\n\r\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\r\n\r\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\r\n\r\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\r\n\r\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\r\n\r\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\r\n\r\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\r\n\r\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\r\n\r\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\r\n\r\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\r\n\r\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\r\n\r\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\r\n\r\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\r\n\r\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\r\n\r\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\r\n\r\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\r\n\r\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\r\n\r\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\r\n\r\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpack2HalfToRGBA( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\r\n\r\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\r\n\r\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\r\n\r\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\r\n\r\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\r\n\r\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\r\n\r\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\r\n\r\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\r\n\r\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\r\n\r\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\r\n\r\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\r\n\r\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\r\n\r\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\r\n\r\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\r\n\r\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\r\n\r\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\r\n\r\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\r\n\r\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\r\n\r\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\r\n\r\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\r\n\r\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\r\n\r\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\r\n\r\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\r\n\r\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\r\n\r\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\r\n\r\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar ShaderChunk = {\r\n\t\talphamap_fragment: alphamap_fragment,\r\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\r\n\t\talphatest_fragment: alphatest_fragment,\r\n\t\taomap_fragment: aomap_fragment,\r\n\t\taomap_pars_fragment: aomap_pars_fragment,\r\n\t\tbegin_vertex: begin_vertex,\r\n\t\tbeginnormal_vertex: beginnormal_vertex,\r\n\t\tbsdfs: bsdfs,\r\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\r\n\t\tclipping_planes_fragment: clipping_planes_fragment,\r\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\r\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\r\n\t\tclipping_planes_vertex: clipping_planes_vertex,\r\n\t\tcolor_fragment: color_fragment,\r\n\t\tcolor_pars_fragment: color_pars_fragment,\r\n\t\tcolor_pars_vertex: color_pars_vertex,\r\n\t\tcolor_vertex: color_vertex,\r\n\t\tcommon: common,\r\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\r\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\r\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\r\n\t\tdisplacementmap_vertex: displacementmap_vertex,\r\n\t\temissivemap_fragment: emissivemap_fragment,\r\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\r\n\t\tencodings_fragment: encodings_fragment,\r\n\t\tencodings_pars_fragment: encodings_pars_fragment,\r\n\t\tenvmap_fragment: envmap_fragment,\r\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\r\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\r\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\r\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\r\n\t\tenvmap_vertex: envmap_vertex,\r\n\t\tfog_vertex: fog_vertex,\r\n\t\tfog_pars_vertex: fog_pars_vertex,\r\n\t\tfog_fragment: fog_fragment,\r\n\t\tfog_pars_fragment: fog_pars_fragment,\r\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\r\n\t\tlightmap_fragment: lightmap_fragment,\r\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\r\n\t\tlights_lambert_vertex: lights_lambert_vertex,\r\n\t\tlights_pars_begin: lights_pars_begin,\r\n\t\tlights_phong_fragment: lights_phong_fragment,\r\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\r\n\t\tlights_physical_fragment: lights_physical_fragment,\r\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\r\n\t\tlights_fragment_begin: lights_fragment_begin,\r\n\t\tlights_fragment_maps: lights_fragment_maps,\r\n\t\tlights_fragment_end: lights_fragment_end,\r\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\r\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\r\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\r\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\r\n\t\tmap_fragment: map_fragment,\r\n\t\tmap_pars_fragment: map_pars_fragment,\r\n\t\tmap_particle_fragment: map_particle_fragment,\r\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\r\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\r\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\r\n\t\tmorphnormal_vertex: morphnormal_vertex,\r\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\r\n\t\tmorphtarget_vertex: morphtarget_vertex,\r\n\t\tnormal_fragment_begin: normal_fragment_begin,\r\n\t\tnormal_fragment_maps: normal_fragment_maps,\r\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\r\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\r\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\r\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\r\n\t\tpacking: packing,\r\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\r\n\t\tproject_vertex: project_vertex,\r\n\t\tdithering_fragment: dithering_fragment,\r\n\t\tdithering_pars_fragment: dithering_pars_fragment,\r\n\t\troughnessmap_fragment: roughnessmap_fragment,\r\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\r\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\r\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\r\n\t\tshadowmap_vertex: shadowmap_vertex,\r\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\r\n\t\tskinbase_vertex: skinbase_vertex,\r\n\t\tskinning_pars_vertex: skinning_pars_vertex,\r\n\t\tskinning_vertex: skinning_vertex,\r\n\t\tskinnormal_vertex: skinnormal_vertex,\r\n\t\tspecularmap_fragment: specularmap_fragment,\r\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\r\n\t\ttonemapping_fragment: tonemapping_fragment,\r\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\r\n\t\tuv_pars_fragment: uv_pars_fragment,\r\n\t\tuv_pars_vertex: uv_pars_vertex,\r\n\t\tuv_vertex: uv_vertex,\r\n\t\tuv2_pars_fragment: uv2_pars_fragment,\r\n\t\tuv2_pars_vertex: uv2_pars_vertex,\r\n\t\tuv2_vertex: uv2_vertex,\r\n\t\tworldpos_vertex: worldpos_vertex,\r\n\r\n\t\tbackground_frag: background_frag,\r\n\t\tbackground_vert: background_vert,\r\n\t\tcube_frag: cube_frag,\r\n\t\tcube_vert: cube_vert,\r\n\t\tdepth_frag: depth_frag,\r\n\t\tdepth_vert: depth_vert,\r\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\r\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\r\n\t\tequirect_frag: equirect_frag,\r\n\t\tequirect_vert: equirect_vert,\r\n\t\tlinedashed_frag: linedashed_frag,\r\n\t\tlinedashed_vert: linedashed_vert,\r\n\t\tmeshbasic_frag: meshbasic_frag,\r\n\t\tmeshbasic_vert: meshbasic_vert,\r\n\t\tmeshlambert_frag: meshlambert_frag,\r\n\t\tmeshlambert_vert: meshlambert_vert,\r\n\t\tmeshmatcap_frag: meshmatcap_frag,\r\n\t\tmeshmatcap_vert: meshmatcap_vert,\r\n\t\tmeshphong_frag: meshphong_frag,\r\n\t\tmeshphong_vert: meshphong_vert,\r\n\t\tmeshphysical_frag: meshphysical_frag,\r\n\t\tmeshphysical_vert: meshphysical_vert,\r\n\t\tnormal_frag: normal_frag,\r\n\t\tnormal_vert: normal_vert,\r\n\t\tpoints_frag: points_frag,\r\n\t\tpoints_vert: points_vert,\r\n\t\tshadow_frag: shadow_frag,\r\n\t\tshadow_vert: shadow_vert,\r\n\t\tsprite_frag: sprite_frag,\r\n\t\tsprite_vert: sprite_vert\r\n\t};\r\n\r\n\t/**\r\n\t * Uniforms library for shared webgl shaders\r\n\t */\r\n\r\n\tvar UniformsLib = {\r\n\r\n\t\tcommon: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\r\n\t\t\tmap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() },\r\n\r\n\t\t\talphaMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tspecularmap: {\r\n\r\n\t\t\tspecularMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tenvmap: {\r\n\r\n\t\t\tenvMap: { value: null },\r\n\t\t\tflipEnvMap: { value: - 1 },\r\n\t\t\treflectivity: { value: 1.0 },\r\n\t\t\trefractionRatio: { value: 0.98 },\r\n\t\t\tmaxMipLevel: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\taomap: {\r\n\r\n\t\t\taoMap: { value: null },\r\n\t\t\taoMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tlightmap: {\r\n\r\n\t\t\tlightMap: { value: null },\r\n\t\t\tlightMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\temissivemap: {\r\n\r\n\t\t\temissiveMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tbumpmap: {\r\n\r\n\t\t\tbumpMap: { value: null },\r\n\t\t\tbumpScale: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tnormalmap: {\r\n\r\n\t\t\tnormalMap: { value: null },\r\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\r\n\r\n\t\t},\r\n\r\n\t\tdisplacementmap: {\r\n\r\n\t\t\tdisplacementMap: { value: null },\r\n\t\t\tdisplacementScale: { value: 1 },\r\n\t\t\tdisplacementBias: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\troughnessmap: {\r\n\r\n\t\t\troughnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tmetalnessmap: {\r\n\r\n\t\t\tmetalnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tgradientmap: {\r\n\r\n\t\t\tgradientMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tfog: {\r\n\r\n\t\t\tfogDensity: { value: 0.00025 },\r\n\t\t\tfogNear: { value: 1 },\r\n\t\t\tfogFar: { value: 2000 },\r\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\r\n\r\n\t\t},\r\n\r\n\t\tlights: {\r\n\r\n\t\t\tambientLightColor: { value: [] },\r\n\r\n\t\t\tlightProbe: { value: [] },\r\n\r\n\t\t\tdirectionalLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tcolor: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tdirectionalShadowMap: { value: [] },\r\n\t\t\tdirectionalShadowMatrix: { value: [] },\r\n\r\n\t\t\tspotLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tdistance: {},\r\n\t\t\t\tconeCos: {},\r\n\t\t\t\tpenumbraCos: {},\r\n\t\t\t\tdecay: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tspotShadowMap: { value: [] },\r\n\t\t\tspotShadowMatrix: { value: [] },\r\n\r\n\t\t\tpointLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdecay: {},\r\n\t\t\t\tdistance: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {},\r\n\t\t\t\tshadowCameraNear: {},\r\n\t\t\t\tshadowCameraFar: {}\r\n\t\t\t} },\r\n\r\n\t\t\tpointShadowMap: { value: [] },\r\n\t\t\tpointShadowMatrix: { value: [] },\r\n\r\n\t\t\themisphereLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tskyColor: {},\r\n\t\t\t\tgroundColor: {}\r\n\t\t\t} },\r\n\r\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\r\n\t\t\trectAreaLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\twidth: {},\r\n\t\t\t\theight: {}\r\n\t\t\t} }\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tsize: { value: 1.0 },\r\n\t\t\tscale: { value: 1.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\talphaMap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\trotation: { value: 0.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\talphaMap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t */\r\n\r\n\tvar ShaderLib = {\r\n\r\n\t\tbasic: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\r\n\r\n\t\t},\r\n\r\n\t\tlambert: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\r\n\r\n\t\t},\r\n\r\n\t\tphong: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.gradientmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\r\n\t\t\t\t\tshininess: { value: 30 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\r\n\r\n\t\t},\r\n\r\n\t\tstandard: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.roughnessmap,\r\n\t\t\t\tUniformsLib.metalnessmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\troughness: { value: 0.5 },\r\n\t\t\t\t\tmetalness: { value: 0.5 },\r\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t\t},\r\n\r\n\t\tmatcap: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tmatcap: { value: null }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.points,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.points_vert,\r\n\t\t\tfragmentShader: ShaderChunk.points_frag\r\n\r\n\t\t},\r\n\r\n\t\tdashed: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tscale: { value: 1 },\r\n\t\t\t\t\tdashSize: { value: 1 },\r\n\t\t\t\t\ttotalSize: { value: 2 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\r\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\r\n\r\n\t\t},\r\n\r\n\t\tdepth: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.depth_vert,\r\n\t\t\tfragmentShader: ShaderChunk.depth_frag\r\n\r\n\t\t},\r\n\r\n\t\tnormal: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.normal_vert,\r\n\t\t\tfragmentShader: ShaderChunk.normal_frag\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.sprite,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\r\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\r\n\r\n\t\t},\r\n\r\n\t\tbackground: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tuvTransform: { value: new Matrix3() },\r\n\t\t\t\tt2D: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.background_vert,\r\n\t\t\tfragmentShader: ShaderChunk.background_frag\r\n\r\n\t\t},\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\r\n\t\tcube: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttCube: { value: null },\r\n\t\t\t\ttFlip: { value: - 1 },\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.cube_vert,\r\n\t\t\tfragmentShader: ShaderChunk.cube_frag\r\n\r\n\t\t},\r\n\r\n\t\tequirect: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\r\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\r\n\r\n\t\t},\r\n\r\n\t\tdistanceRGBA: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\treferencePosition: { value: new Vector3() },\r\n\t\t\t\t\tnearDistance: { value: 1 },\r\n\t\t\t\t\tfarDistance: { value: 1000 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\r\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\r\n\r\n\t\t},\r\n\r\n\t\tshadow: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t} ] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\r\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tShaderLib.physical = {\r\n\r\n\t\tuniforms: mergeUniforms( [\r\n\t\t\tShaderLib.standard.uniforms,\r\n\t\t\t{\r\n\t\t\t\ttransparency: { value: 0 },\r\n\t\t\t\tclearcoat: { value: 0 },\r\n\t\t\t\tclearcoatRoughness: { value: 0 },\r\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\r\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\r\n\t\t\t\tclearcoatNormalMap: { value: null },\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAnimation() {\r\n\r\n\t\tvar context = null;\r\n\t\tvar isAnimating = false;\r\n\t\tvar animationLoop = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tif ( isAnimating === false ) { return; }\r\n\r\n\t\t\tanimationLoop( time, frame );\r\n\r\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tstart: function () {\r\n\r\n\t\t\t\tif ( isAnimating === true ) { return; }\r\n\t\t\t\tif ( animationLoop === null ) { return; }\r\n\r\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t\t\tisAnimating = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tstop: function () {\r\n\r\n\t\t\t\tisAnimating = false;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetAnimationLoop: function ( callback ) {\r\n\r\n\t\t\t\tanimationLoop = callback;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t\tcontext = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAttributes( gl ) {\r\n\r\n\t\tvar buffers = new WeakMap();\r\n\r\n\t\tfunction createBuffer( attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar usage = attribute.usage;\r\n\r\n\t\t\tvar buffer = gl.createBuffer();\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\t\t\tgl.bufferData( bufferType, array, usage );\r\n\r\n\t\t\tattribute.onUploadCallback();\r\n\r\n\t\t\tvar type = 5126;\r\n\r\n\t\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\t\ttype = 5126;\r\n\r\n\t\t\t} else if ( array instanceof Float64Array ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\r\n\r\n\t\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\t\ttype = 5123;\r\n\r\n\t\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\t\ttype = 5122;\r\n\r\n\t\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\t\ttype = 5125;\r\n\r\n\t\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\t\ttype = 5124;\r\n\r\n\t\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\t\ttype = 5120;\r\n\r\n\t\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\t\ttype = 5121;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\ttype: type,\r\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\r\n\t\t\t\tversion: attribute.version\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar updateRange = attribute.updateRange;\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\r\n\t\t\tif ( updateRange.count === - 1 ) {\r\n\r\n\t\t\t\t// Not using update ranges\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\r\n\r\n\t\t\t\tupdateRange.count = - 1; // reset range\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction get( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\treturn buffers.get( attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data ) {\r\n\r\n\t\t\t\tgl.deleteBuffer( data.buffer );\r\n\r\n\t\t\t\tbuffers.delete( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( attribute, bufferType ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data === undefined ) {\r\n\r\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\r\n\r\n\t\t\t} else if ( data.version < attribute.version ) {\r\n\r\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\r\n\r\n\t\t\t\tdata.version = attribute.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PlaneGeometry\r\n\r\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\r\n\r\n\t// PlaneBufferGeometry\r\n\r\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\twidth = width || 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\r\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar segment_width = width / gridX;\r\n\t\tvar segment_height = height / gridY;\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\t\tvertices.push( x, - y, 0 );\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\r\n\r\n\t\tvar clearColor = new Color( 0x000000 );\r\n\t\tvar clearAlpha = 0;\r\n\r\n\t\tvar planeMesh;\r\n\t\tvar boxMesh;\r\n\t\t// Store the current background texture and its `version`\r\n\t\t// so we can recompile the material accordingly.\r\n\t\tvar currentBackground = null;\r\n\t\tvar currentBackgroundVersion = 0;\r\n\r\n\t\tfunction render( renderList, scene, camera, forceClear ) {\r\n\r\n\t\t\tvar background = scene.background;\r\n\r\n\t\t\t// Ignore background in AR\r\n\t\t\t// TODO: Reconsider this.\r\n\r\n\t\t\tvar vr = renderer.vr;\r\n\t\t\tvar session = vr.getSession && vr.getSession();\r\n\r\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\r\n\r\n\t\t\t\tbackground = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background === null ) {\r\n\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\t\t\t\tcurrentBackground = null;\r\n\t\t\t\tcurrentBackgroundVersion = 0;\r\n\r\n\t\t\t} else if ( background && background.isColor ) {\r\n\r\n\t\t\t\tsetClear( background, 1 );\r\n\t\t\t\tforceClear = true;\r\n\t\t\t\tcurrentBackground = null;\r\n\t\t\t\tcurrentBackgroundVersion = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderer.autoClear || forceClear ) {\r\n\r\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\r\n\r\n\t\t\t\tif ( boxMesh === undefined ) {\r\n\r\n\t\t\t\t\tboxMesh = new Mesh(\r\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\r\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\r\n\t\t\t\t\t\t\tside: BackSide,\r\n\t\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\r\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\r\n\r\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// enable code injection for non-built-in material\r\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'map', {\r\n\r\n\t\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\t\treturn this.uniforms.tCube.value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tobjects.update( boxMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\r\n\t\t\t\tboxMesh.material.uniforms.tCube.value = texture;\r\n\t\t\t\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\r\n\r\n\t\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\t     currentBackgroundVersion !== texture.version ) {\r\n\r\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\t\tcurrentBackground = background;\r\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\r\n\r\n\t\t\t} else if ( background && background.isTexture ) {\r\n\r\n\t\t\t\tif ( planeMesh === undefined ) {\r\n\r\n\t\t\t\t\tplaneMesh = new Mesh(\r\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\r\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\r\n\t\t\t\t\t\t\tside: FrontSide,\r\n\t\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\r\n\r\n\t\t\t\t\t// enable code injection for non-built-in material\r\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\r\n\r\n\t\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tobjects.update( planeMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\r\n\r\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tbackground.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\r\n\r\n\t\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\t\t   currentBackgroundVersion !== background.version ) {\r\n\r\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\t\tcurrentBackground = background;\r\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setClear( color, alpha ) {\r\n\r\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tgetClearColor: function () {\r\n\r\n\t\t\t\treturn clearColor;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearColor: function ( color, alpha ) {\r\n\r\n\t\t\t\tclearColor.set( color );\r\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\tgetClearAlpha: function () {\r\n\r\n\t\t\t\treturn clearAlpha;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearAlpha: function ( alpha ) {\r\n\r\n\t\t\t\tclearAlpha = alpha;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\trender: render\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawArrays( mode, start, count );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\r\n\r\n\t\t\tif ( primcount === 0 ) { return; }\r\n\r\n\t\t\tvar extension, methodName;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\t\t\t\tmethodName = 'drawArraysInstanced';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ methodName ]( mode, start, count, primcount );\r\n\r\n\t\t\tinfo.update( count, mode, primcount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n\t\tvar maxAnisotropy;\r\n\r\n\t\tfunction getMaxAnisotropy() {\r\n\r\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaxAnisotropy = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxAnisotropy;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\r\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'highp';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprecision = 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\r\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 'lowp';\r\n\r\n\t\t}\r\n\r\n\t\t/* eslint-disable no-undef */\r\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\r\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\r\n\t\t/* eslint-enable no-undef */\r\n\r\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\t\tvar maxPrecision = getMaxPrecision( precision );\r\n\r\n\t\tif ( maxPrecision !== precision ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n\t\t\tprecision = maxPrecision;\r\n\r\n\t\t}\r\n\r\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n\t\tvar maxTextures = gl.getParameter( 34930 );\r\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\r\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\r\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\r\n\r\n\t\tvar maxAttributes = gl.getParameter( 34921 );\r\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\r\n\t\tvar maxVaryings = gl.getParameter( 36348 );\r\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\r\n\r\n\t\tvar vertexTextures = maxVertexTextures > 0;\r\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\r\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\r\n\t\t\tgetMaxPrecision: getMaxPrecision,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\tmaxTextures: maxTextures,\r\n\t\t\tmaxVertexTextures: maxVertexTextures,\r\n\t\t\tmaxTextureSize: maxTextureSize,\r\n\t\t\tmaxCubemapSize: maxCubemapSize,\r\n\r\n\t\t\tmaxAttributes: maxAttributes,\r\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\r\n\t\t\tmaxVaryings: maxVaryings,\r\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\r\n\r\n\t\t\tvertexTextures: vertexTextures,\r\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\r\n\t\t\tfloatVertexTextures: floatVertexTextures,\r\n\r\n\t\t\tmaxSamples: maxSamples\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLClipping() {\r\n\r\n\t\tvar scope = this,\r\n\r\n\t\t\tglobalState = null,\r\n\t\t\tnumGlobalPlanes = 0,\r\n\t\t\tlocalClippingEnabled = false,\r\n\t\t\trenderingShadows = false,\r\n\r\n\t\t\tplane = new Plane(),\r\n\t\t\tviewNormalMatrix = new Matrix3(),\r\n\r\n\t\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\t\tthis.uniform = uniform;\r\n\t\tthis.numPlanes = 0;\r\n\t\tthis.numIntersection = 0;\r\n\r\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\r\n\r\n\t\t\tvar enabled =\r\n\t\t\t\tplanes.length !== 0 ||\r\n\t\t\t\tenableLocalClipping ||\r\n\t\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t\t// run another frame in order to reset the state:\r\n\t\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\t\tlocalClippingEnabled;\r\n\r\n\t\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\t\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\t\treturn enabled;\r\n\r\n\t\t};\r\n\r\n\t\tthis.beginShadows = function () {\r\n\r\n\t\t\trenderingShadows = true;\r\n\t\t\tprojectPlanes( null );\r\n\r\n\t\t};\r\n\r\n\t\tthis.endShadows = function () {\r\n\r\n\t\t\trenderingShadows = false;\r\n\t\t\tresetGlobalState();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\r\n\r\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\r\n\r\n\t\t\t\t// there's no local clipping\r\n\r\n\t\t\t\tif ( renderingShadows ) {\r\n\r\n\t\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresetGlobalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\t\tlGlobal = nGlobal * 4,\r\n\r\n\t\t\t\t\tdstArray = cache.clippingState || null;\r\n\r\n\t\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcache.clippingState = dstArray;\r\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\r\n\t\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t};\r\n\r\n\t\tfunction resetGlobalState() {\r\n\r\n\t\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\t\tuniform.value = globalState;\r\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = numGlobalPlanes;\r\n\t\t\tscope.numIntersection = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\r\n\t\t\t\tdstArray = null;\r\n\r\n\t\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniform.value = dstArray;\r\n\t\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = nPlanes;\r\n\r\n\t\t\treturn dstArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLExtensions( gl ) {\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( name ) {\r\n\r\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn extensions[ name ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar extension;\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\textensions[ name ] = extension;\r\n\r\n\t\t\t\treturn extension;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLGeometries( gl, attributes, info ) {\r\n\r\n\t\tvar geometries = new WeakMap();\r\n\t\tvar wireframeAttributes = new WeakMap();\r\n\r\n\t\tfunction onGeometryDispose( event ) {\r\n\r\n\t\t\tvar geometry = event.target;\r\n\t\t\tvar buffergeometry = geometries.get( geometry );\r\n\r\n\t\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in buffergeometry.attributes ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tgeometries.delete( geometry );\r\n\r\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\r\n\r\n\t\t\tif ( attribute ) {\r\n\r\n\t\t\t\tattributes.remove( attribute );\r\n\t\t\t\twireframeAttributes.delete( buffergeometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinfo.memory.geometries --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( object, geometry ) {\r\n\r\n\t\t\tvar buffergeometry = geometries.get( geometry );\r\n\r\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\r\n\r\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometries.set( geometry, buffergeometry );\r\n\r\n\t\t\tinfo.memory.geometries ++;\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( geometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattributes.update( index, 34963 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in geometryAttributes ) {\r\n\r\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\tvar geometryIndex = geometry.index;\r\n\t\t\tvar geometryPosition = geometry.attributes.position;\r\n\t\t\tvar version = 0;\r\n\r\n\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\tvar array = geometryIndex.array;\r\n\t\t\t\tversion = geometryIndex.version;\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar array = geometryPosition.array;\r\n\t\t\t\tversion = geometryPosition.version;\r\n\r\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = i + 0;\r\n\t\t\t\t\tvar b = i + 1;\r\n\t\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\r\n\t\t\tattribute.version = version;\r\n\r\n\t\t\tattributes.update( attribute, 34963 );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\r\n\r\n\t\t\t//\r\n\r\n\t\t\twireframeAttributes.set( geometry, attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\t\tif ( currentAttribute ) {\r\n\r\n\t\t\t\tvar geometryIndex = geometry.index;\r\n\r\n\t\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\t\t// if the attribute is obsolete, create a new one\r\n\r\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\r\n\r\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn wireframeAttributes.get( geometry );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tupdate: update,\r\n\r\n\t\t\tgetWireframeAttribute: getWireframeAttribute\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tvar type, bytesPerElement;\r\n\r\n\t\tfunction setIndex( value ) {\r\n\r\n\t\t\ttype = value.type;\r\n\t\t\tbytesPerElement = value.bytesPerElement;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\r\n\r\n\t\t\tif ( primcount === 0 ) { return; }\r\n\r\n\t\t\tvar extension, methodName;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\t\t\t\tmethodName = 'drawElementsInstanced';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\r\n\r\n\t\t\tinfo.update( count, mode, primcount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.setIndex = setIndex;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLInfo( gl ) {\r\n\r\n\t\tvar memory = {\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\t};\r\n\r\n\t\tvar render = {\r\n\t\t\tframe: 0,\r\n\t\t\tcalls: 0,\r\n\t\t\ttriangles: 0,\r\n\t\t\tpoints: 0,\r\n\t\t\tlines: 0\r\n\t\t};\r\n\r\n\t\tfunction update( count, mode, instanceCount ) {\r\n\r\n\t\t\tinstanceCount = instanceCount || 1;\r\n\r\n\t\t\trender.calls ++;\r\n\r\n\t\t\tswitch ( mode ) {\r\n\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 5:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\trender.lines += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\trender.points += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\trender.frame ++;\r\n\t\t\trender.calls = 0;\r\n\t\t\trender.triangles = 0;\r\n\t\t\trender.points = 0;\r\n\t\t\trender.lines = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmemory: memory,\r\n\t\t\trender: render,\r\n\t\t\tprograms: null,\r\n\t\t\tautoReset: true,\r\n\t\t\treset: reset,\r\n\t\t\tupdate: update\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\r\n\r\n\t}\r\n\r\n\tfunction WebGLMorphtargets( gl ) {\r\n\r\n\t\tvar influencesList = {};\r\n\t\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\t\tfunction update( object, geometry, material, program ) {\r\n\r\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\t\tvar length = objectInfluences.length;\r\n\r\n\t\t\tvar influences = influencesList[ geometry.id ];\r\n\r\n\t\t\tif ( influences === undefined ) {\r\n\r\n\t\t\t\t// initialise list\r\n\r\n\t\t\t\tinfluences = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\r\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\r\n\r\n\t\t\t// Remove current morphAttributes\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\r\n\r\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\r\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Collect influences\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tinfluence[ 0 ] = i;\r\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfluences.sort( absNumericalSort );\r\n\r\n\t\t\t// Add morphAttributes\r\n\r\n\t\t\tvar morphInfluencesSum = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 0 ];\r\n\t\t\t\t\tvar value = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( value ) {\r\n\r\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\r\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\r\n\r\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\r\n\t\t\t\t\t\tmorphInfluencesSum += value;\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmorphInfluences[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\r\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\r\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\r\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\r\n\r\n\t\tvar updateList = {};\r\n\r\n\t\tfunction update( object ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\r\n\r\n\t\t\t// Update once per frame\r\n\r\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometries.update( buffergeometry );\r\n\r\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tupdateList = {};\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\timages = images !== undefined ? images : [];\r\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\r\n\t\tformat = format !== undefined ? format : RGBFormat;\r\n\r\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t}\r\n\r\n\tCubeTexture.prototype = Object.create( Texture.prototype );\r\n\tCubeTexture.prototype.constructor = CubeTexture;\r\n\r\n\tCubeTexture.prototype.isCubeTexture = true;\r\n\r\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.image;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.image = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction DataTexture2DArray( data, width, height, depth ) {\r\n\r\n\t\tTexture.call( this, null );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\r\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\r\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\r\n\r\n\t/**\r\n\t * @author Artur Trzesiok\r\n\t */\r\n\r\n\tfunction DataTexture3D( data, width, height, depth ) {\r\n\r\n\t\t// We're going to add .setXXX() methods for setting properties later.\r\n\t\t// Users can still set in DataTexture3D directly.\r\n\t\t//\r\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\r\n\t\t// \ttexture.anisotropy = 16;\r\n\t\t//\r\n\t\t// See #14839\r\n\r\n\t\tTexture.call( this, null );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\r\n\t}\r\n\r\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\r\n\tDataTexture3D.prototype.constructor = DataTexture3D;\r\n\tDataTexture3D.prototype.isDataTexture3D = true;\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Uniforms of a program.\r\n\t * Those form a tree structure with a special top-level container for the root,\r\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\r\n\t *\r\n\t *\r\n\t * Properties of inner nodes including the top-level container:\r\n\t *\r\n\t * .seq - array of nested uniforms\r\n\t * .map - nested uniforms by name\r\n\t *\r\n\t *\r\n\t * Methods of all nodes except the top-level container:\r\n\t *\r\n\t * .setValue( gl, value, [textures] )\r\n\t *\r\n\t * \t\tuploads a uniform value(s)\r\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\r\n\t *\r\n\t *\r\n\t * Static methods of the top-level container (textures factorizations):\r\n\t *\r\n\t * .upload( gl, seq, values, textures )\r\n\t *\r\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n\t *\r\n\t * .seqWithValue( seq, values ) : filteredSeq\r\n\t *\r\n\t * \t\tfilters 'seq' entries with corresponding entry in values\r\n\t *\r\n\t *\r\n\t * Methods of the top-level container (textures factorizations):\r\n\t *\r\n\t * .setValue( gl, name, value, textures )\r\n\t *\r\n\t * \t\tsets uniform with  name 'name' to 'value'\r\n\t *\r\n\t * .setOptional( gl, obj, prop )\r\n\t *\r\n\t * \t\tlike .set for an optional property of the object\r\n\t *\r\n\t */\r\n\r\n\tvar emptyTexture = new Texture();\r\n\tvar emptyTexture2dArray = new DataTexture2DArray();\r\n\tvar emptyTexture3d = new DataTexture3D();\r\n\tvar emptyCubeTexture = new CubeTexture();\r\n\r\n\t// --- Utilities ---\r\n\r\n\t// Array Caches (provide typed arrays for temporary by size)\r\n\r\n\tvar arrayCacheF32 = [];\r\n\tvar arrayCacheI32 = [];\r\n\r\n\t// Float32Array caches used for uploading Matrix uniforms\r\n\r\n\tvar mat4array = new Float32Array( 16 );\r\n\tvar mat3array = new Float32Array( 9 );\r\n\tvar mat2array = new Float32Array( 4 );\r\n\r\n\t// Flattening for arrays of vectors and matrices\r\n\r\n\tfunction flatten( array, nBlocks, blockSize ) {\r\n\r\n\t\tvar firstElem = array[ 0 ];\r\n\r\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\r\n\t\t// unoptimized: ! isNaN( firstElem )\r\n\t\t// see http://jacksondunstan.com/articles/983\r\n\r\n\t\tvar n = nBlocks * blockSize,\r\n\t\t\tr = arrayCacheF32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Float32Array( n );\r\n\t\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tif ( nBlocks !== 0 ) {\r\n\r\n\t\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\t\toffset += blockSize;\r\n\t\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\tfunction arraysEqual( a, b ) {\r\n\r\n\t\tif ( a.length !== b.length ) { return false; }\r\n\r\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction copyArray( a, b ) {\r\n\r\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\r\n\r\n\t\t\ta[ i ] = b[ i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Texture unit allocation\r\n\r\n\tfunction allocTexUnits( textures, n ) {\r\n\r\n\t\tvar r = arrayCacheI32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Int32Array( n );\r\n\t\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\t// --- Setters ---\r\n\r\n\t// Note: Defining these methods externally, because they come in a bunch\r\n\t// and this way their names minify.\r\n\r\n\t// Single scalar\r\n\r\n\tfunction setValueV1f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) { return; }\r\n\r\n\t\tgl.uniform1f( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\t// Single float vector (from flat array or THREE.VectorN)\r\n\r\n\tfunction setValueV2f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform2fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueV3f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( v.r !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\r\n\t\t\t\tcache[ 0 ] = v.r;\r\n\t\t\t\tcache[ 1 ] = v.g;\r\n\t\t\t\tcache[ 2 ] = v.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueV4f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\t\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform4fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single matrix (from flat array or MatrixN)\r\n\r\n\tfunction setValueM2( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat2array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueM3( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat3array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueM4( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat4array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single texture (2D / Cube)\r\n\r\n\tfunction setValueT1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT2DArray1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT3D1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT6( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\r\n\tfunction setValueV1i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) { return; }\r\n\r\n\t\tgl.uniform1i( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\tfunction setValueV2i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for the singular case\r\n\r\n\tfunction getSingularSetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\r\n\t\t\tcase 0x8b5f: return setValueT3D1; // SAMPLER_3D\r\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\r\n\t\t\tcase 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Array of scalars\r\n\tfunction setValueV1fArray( gl, v ) {\r\n\r\n\t\tgl.uniform1fv( this.addr, v );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\tfunction setValueV1iArray( gl, v ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV2iArray( gl, v ) {\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3iArray( gl, v ) {\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4iArray( gl, v ) {\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\r\n\t// Array of vectors (flat or from THREE classes)\r\n\r\n\tfunction setValueV2fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 2 );\r\n\r\n\t\tgl.uniform2fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 3 );\r\n\r\n\t\tgl.uniform3fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tgl.uniform4fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\t// Array of matrices (flat or from THREE clases)\r\n\r\n\tfunction setValueM2Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM3Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 9 );\r\n\r\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM4Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 16 );\r\n\r\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\t// Array of textures (2D / Cube)\r\n\r\n\tfunction setValueT1Array( gl, v, textures ) {\r\n\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( textures, n );\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueT6Array( gl, v, textures ) {\r\n\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( textures, n );\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n\tfunction getPureArraySetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: return setValueT1Array; // SAMPLER_2D\r\n\t\t\tcase 0x8b60: return setValueT6Array; // SAMPLER_CUBE\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// --- Uniform Classes ---\r\n\r\n\tfunction SingleUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.size = activeInfo.size;\r\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\r\n\r\n\t\t\tthis.cache = new Float32Array( data.length );\r\n\r\n\t\t}\r\n\r\n\t\tcopyArray( cache, data );\r\n\r\n\t};\r\n\r\n\tfunction StructuredUniform( id ) {\r\n\r\n\t\tthis.id = id;\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t}\r\n\r\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\r\n\r\n\t\tvar seq = this.seq;\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ], textures );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// --- Top-level ---\r\n\r\n\t// Parser - builds up the property tree from the path strings\r\n\r\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\r\n\r\n\t// extracts\r\n\t// \t- the identifier (member name or array index)\r\n\t//  - followed by an optional right bracket (found when array index)\r\n\t//  - followed by an optional left bracket or dot (type of subscript)\r\n\t//\r\n\t// Note: These portions can be read in a non-overlapping fashion and\r\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\r\n\t// in the uniform names.\r\n\r\n\tfunction addUniform( container, uniformObject ) {\r\n\r\n\t\tcontainer.seq.push( uniformObject );\r\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n\t}\r\n\r\n\tfunction parseUniform( activeInfo, addr, container ) {\r\n\r\n\t\tvar path = activeInfo.name,\r\n\t\t\tpathLength = path.length;\r\n\r\n\t\t// reset RegExp object, because of the early exit of a previous run\r\n\t\tRePathPart.lastIndex = 0;\r\n\r\n\t\twhile ( true ) {\r\n\r\n\t\t\tvar match = RePathPart.exec( path ),\r\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\r\n\r\n\t\t\t\tid = match[ 1 ],\r\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\r\n\t\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\r\n\r\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\r\n\r\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\t\tvar map = container.map, next = map[ id ];\r\n\r\n\t\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontainer = next;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Root Container\r\n\r\n\tfunction WebGLUniforms( gl, program ) {\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, 35718 );\r\n\r\n\t\tfor ( var i = 0; i < n; ++ i ) {\r\n\r\n\t\t\tvar info = gl.getActiveUniform( program, i ),\r\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\r\n\r\n\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\r\n\r\n\t\tvar v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\r\n\r\n\t};\r\n\r\n\r\n\t// Static interface\r\n\r\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\t\t\t\tu.setValue( gl, v.value, textures );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\r\n\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tif ( u.id in values ) { r.push( u ); }\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\treturn shader;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase LinearEncoding:\r\n\t\t\t\treturn [ 'Linear', '( value )' ];\r\n\t\t\tcase sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB', '( value )' ];\r\n\t\t\tcase RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE', '( value )' ];\r\n\t\t\tcase RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\r\n\t\t\tcase RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\r\n\t\t\tcase RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\r\n\t\t\tcase GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tcase LogLuvEncoding:\r\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getShaderErrors( gl, shader, type ) {\r\n\r\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\r\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\r\n\r\n\t\tif ( status && log === '' ) { return ''; }\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\tvar source = gl.getShaderSource( shader );\r\n\r\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase LinearToneMapping:\r\n\t\t\t\ttoneMappingName = 'Linear';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = 'Reinhard';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = 'Uncharted2';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CineonToneMapping:\r\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ACESFilmicToneMapping:\r\n\t\t\t\ttoneMappingName = 'ACESFilmic';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) { continue; }\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, 35721 );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\r\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\r\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\r\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\r\n\r\n\t}\r\n\r\n\tfunction replaceClippingPlaneNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\r\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\r\n\r\n\t}\r\n\r\n\t// Resolve Includes\r\n\r\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n\r\n\tfunction resolveIncludes( string ) {\r\n\r\n\t\treturn string.replace( includePattern, includeReplacer );\r\n\r\n\t}\r\n\r\n\tfunction includeReplacer( match, include ) {\r\n\r\n\t\tvar string = ShaderChunk[ include ];\r\n\r\n\t\tif ( string === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t}\r\n\r\n\t\treturn resolveIncludes( string );\r\n\r\n\t}\r\n\r\n\t// Unroll Loops\r\n\r\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\treturn string.replace( loopPattern, loopReplacer );\r\n\r\n\t}\r\n\r\n\tfunction loopReplacer( match, start, end, snippet ) {\r\n\r\n\t\tvar string = '';\r\n\r\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\tstring += snippet\r\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\r\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\r\n\r\n\t\t}\r\n\r\n\t\treturn string;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction generatePrecision( parameters ) {\r\n\r\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\r\n\r\n\t\tif ( parameters.precision === \"highp\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\r\n\r\n\t\t} else if ( parameters.precision === \"mediump\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\r\n\r\n\t\t} else if ( parameters.precision === \"lowp\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\r\n\r\n\t\t}\r\n\r\n\t\treturn precisionstring;\r\n\r\n\t}\r\n\r\n\tfunction generateShadowMapTypeDefine( parameters ) {\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\r\n\r\n\t\t}\r\n\r\n\t\treturn shadowMapTypeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapTypeDefine( parameters ) {\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\t\tcase CubeReflectionMapping:\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase CubeUVReflectionMapping:\r\n\t\t\t\tcase CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase EquirectangularReflectionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapTypeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapModeDefine( parameters ) {\r\n\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapModeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapBlendingDefine( parameters ) {\r\n\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.combine ) {\r\n\r\n\t\t\t\tcase MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapBlendingDefine;\r\n\r\n\t}\r\n\r\n\tfunction WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {\r\n\r\n\t\tvar gl = renderer.getContext();\r\n\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = shader.vertexShader;\r\n\t\tvar fragmentShader = shader.fragmentShader;\r\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\r\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\r\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\r\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\r\n\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\r\n\r\n\t\tif ( material.isRawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixVertex.length > 0 ) {\r\n\r\n\t\t\t\tprefixVertex += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixFragment.length > 0 ) {\r\n\r\n\t\t\t\tprefixFragment += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\r\n\r\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\r\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\r\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t\t'#ifdef USE_INSTANCING',\r\n\r\n\t\t\t\t' attribute mat4 instanceMatrix;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_TANGENT',\r\n\r\n\t\t\t\t'\tattribute vec4 tangent;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\r\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\r\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\r\n\r\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\r\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n\r\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\r\n\r\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\r\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = resolveIncludes( vertexShader );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = resolveIncludes( fragmentShader );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\r\n\r\n\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\tif ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {\r\n\r\n\t\t\tvar isGLSL3ShaderMaterial = false;\r\n\r\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\r\n\r\n\t\t\tif ( material.isShaderMaterial &&\r\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\r\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\r\n\r\n\t\t\t\tisGLSL3ShaderMaterial = true;\r\n\r\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\r\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL 3.0 conversion\r\n\r\n\t\t\tprefixVertex = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define attribute in',\r\n\t\t\t\t'#define varying out',\r\n\t\t\t\t'#define texture2D texture'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\r\n\r\n\t\t\tprefixFragment = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define varying in',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\r\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\r\n\t\t\t\t'#define texture2D texture',\r\n\t\t\t\t'#define textureCube texture',\r\n\t\t\t\t'#define texture2DProj textureProj',\r\n\t\t\t\t'#define texture2DLodEXT textureLod',\r\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\r\n\t\t\t\t'#define textureCubeLodEXT textureLod',\r\n\t\t\t\t'#define texture2DGradEXT textureGrad',\r\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\r\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\r\n\r\n\t\t\t// Multiview\r\n\r\n\t\t\tif ( numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\tprefixVertex = prefixVertex.replace(\r\n\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\r\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\r\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixVertex = prefixVertex.replace(\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\r\n\t\t\t\t\t].join( '\\n' ),\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\r\n\r\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixFragment = prefixFragment.replace(\r\n\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\r\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixFragment = prefixFragment.replace(\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\r\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\t// check for link errors\r\n\t\tif ( renderer.debug.checkShaderErrors ) {\r\n\r\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\r\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\r\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\r\n\r\n\t\t\tvar runnable = true;\r\n\t\t\tvar haveDiagnostics = true;\r\n\r\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\r\n\r\n\t\t\t\trunnable = false;\r\n\r\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\r\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\r\n\r\n\t\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\t\thaveDiagnostics = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\t\trunnable: runnable,\r\n\t\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function () {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function () {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function () {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.name = shader.name;\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.cacheKey = cacheKey;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\t\tthis.numMultiviewViews = numMultiviewViews;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\r\n\r\n\t\tvar programs = [];\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\r\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\r\n\t\tvar precision = capabilities.precision;\r\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\tvar vertexTextures = capabilities.vertexTextures;\r\n\r\n\t\tvar shaderIDs = {\r\n\t\t\tMeshDepthMaterial: 'depth',\r\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\r\n\t\t\tMeshNormalMaterial: 'normal',\r\n\t\t\tMeshBasicMaterial: 'basic',\r\n\t\t\tMeshLambertMaterial: 'lambert',\r\n\t\t\tMeshPhongMaterial: 'phong',\r\n\t\t\tMeshToonMaterial: 'phong',\r\n\t\t\tMeshStandardMaterial: 'physical',\r\n\t\t\tMeshPhysicalMaterial: 'physical',\r\n\t\t\tMeshMatcapMaterial: 'matcap',\r\n\t\t\tLineBasicMaterial: 'basic',\r\n\t\t\tLineDashedMaterial: 'dashed',\r\n\t\t\tPointsMaterial: 'points',\r\n\t\t\tShadowMaterial: 'shadow',\r\n\t\t\tSpriteMaterial: 'sprite'\r\n\t\t};\r\n\r\n\t\tvar parameterNames = [\r\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\r\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\r\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\r\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\r\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\r\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\r\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\r\n\t\t\t\"sheen\"\r\n\t\t];\r\n\r\n\r\n\t\tfunction allocateBones( object ) {\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\tif ( floatVertexTextures ) {\r\n\r\n\t\t\t\treturn 1024;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// default for when object is not specified\r\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t\t//\r\n\t\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\r\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\r\n\r\n\t\t\t\tif ( maxBones < bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn maxBones;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\t\tvar encoding;\r\n\r\n\t\t\tif ( ! map ) {\r\n\r\n\t\t\t\tencoding = LinearEncoding;\r\n\r\n\t\t\t} else if ( map.isTexture ) {\r\n\r\n\t\t\t\tencoding = map.encoding;\r\n\r\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\t\tencoding = GammaEncoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn encoding;\r\n\r\n\t\t}\r\n\r\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\r\n\r\n\t\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t\t// (not to blow over maxLights budget)\r\n\r\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\r\n\r\n\t\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\r\n\r\n\t\t\tvar parameters = {\r\n\r\n\t\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\t\tshaderID: shaderID,\r\n\r\n\t\t\t\tprecision: precision,\r\n\r\n\t\t\t\tinstancing: object.isInstancedMesh === true,\r\n\r\n\t\t\t\tsupportsVertexTextures: vertexTextures,\r\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\r\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\r\n\t\t\t\tmap: !! material.map,\r\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\t\tmatcap: !! material.matcap,\r\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\r\n\t\t\t\tenvMap: !! material.envMap,\r\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\r\n\t\t\t\tlightMap: !! material.lightMap,\r\n\t\t\t\taoMap: !! material.aoMap,\r\n\t\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\r\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\r\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\r\n\t\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\t\tgradientMap: !! material.gradientMap,\r\n\r\n\t\t\t\tsheen: !! material.sheen,\r\n\r\n\t\t\t\tcombine: material.combine,\r\n\r\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\r\n\t\t\t\tvertexColors: material.vertexColors,\r\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\r\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\r\n\r\n\t\t\t\tfog: !! fog,\r\n\t\t\t\tuseFog: material.fog,\r\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\r\n\r\n\t\t\t\tflatShading: material.flatShading,\r\n\r\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\t\tskinning: material.skinning && maxBones > 0,\r\n\t\t\t\tmaxBones: maxBones,\r\n\t\t\t\tuseVertexTexture: floatVertexTextures,\r\n\r\n\t\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\t\tnumPointLights: lights.point.length,\r\n\t\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\r\n\t\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\r\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\r\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\r\n\r\n\t\t\t\tnumClippingPlanes: nClipPlanes,\r\n\t\t\t\tnumClipIntersection: nClipIntersection,\r\n\r\n\t\t\t\tdithering: material.dithering,\r\n\r\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\r\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\r\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\t\talphaTest: material.alphaTest,\r\n\t\t\t\tdoubleSided: material.side === DoubleSide,\r\n\t\t\t\tflipSided: material.side === BackSide,\r\n\r\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\r\n\r\n\t\t\t};\r\n\r\n\t\t\treturn parameters;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getProgramCacheKey = function ( material, parameters ) {\r\n\r\n\t\t\tvar array = [];\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarray.push( material.fragmentShader );\r\n\t\t\t\tarray.push( material.vertexShader );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\t\tarray.push( name );\r\n\t\t\t\t\tarray.push( material.defines[ name ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray.push( material.onBeforeCompile.toString() );\r\n\r\n\t\t\tarray.push( renderer.gammaOutput );\r\n\r\n\t\t\tarray.push( renderer.gammaFactor );\r\n\r\n\t\t\treturn array.join();\r\n\r\n\t\t};\r\n\r\n\t\tthis.acquireProgram = function ( material, shader, parameters, cacheKey ) {\r\n\r\n\t\t\tvar program;\r\n\r\n\t\t\t// Check if code has been already compiled\r\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tvar preexistingProgram = programs[ p ];\r\n\r\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\r\n\r\n\t\t\t\t\tprogram = preexistingProgram;\r\n\t\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );\r\n\t\t\t\tprograms.push( program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t};\r\n\r\n\t\tthis.releaseProgram = function ( program ) {\r\n\r\n\t\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t\t// Remove from unordered set\r\n\t\t\t\tvar i = programs.indexOf( program );\r\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\t\tprograms.pop();\r\n\r\n\t\t\t\t// Free WebGL resources\r\n\t\t\t\tprogram.destroy();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tthis.programs = programs;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fordacious / fordacious.github.io\r\n\t */\r\n\r\n\tfunction WebGLProperties() {\r\n\r\n\t\tvar properties = new WeakMap();\r\n\r\n\t\tfunction get( object ) {\r\n\r\n\t\t\tvar map = properties.get( object );\r\n\r\n\t\t\tif ( map === undefined ) {\r\n\r\n\t\t\t\tmap = {};\r\n\t\t\t\tproperties.set( object, map );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn map;\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( object ) {\r\n\r\n\t\t\tproperties.delete( object );\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( object, key, value ) {\r\n\r\n\t\t\tproperties.get( object )[ key ] = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tproperties = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction painterSortStable( a, b ) {\r\n\r\n\t\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.program !== b.program ) {\r\n\r\n\t\t\treturn a.program.id - b.program.id;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable( a, b ) {\r\n\r\n\t\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction WebGLRenderList() {\r\n\r\n\t\tvar renderItems = [];\r\n\t\tvar renderItemsIndex = 0;\r\n\r\n\t\tvar opaque = [];\r\n\t\tvar transparent = [];\r\n\r\n\t\tvar defaultProgram = { id: - 1 };\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\trenderItemsIndex = 0;\r\n\r\n\t\t\topaque.length = 0;\r\n\t\t\ttransparent.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\r\n\r\n\t\t\tif ( renderItem === undefined ) {\r\n\r\n\t\t\t\trenderItem = {\r\n\t\t\t\t\tid: object.id,\r\n\t\t\t\t\tobject: object,\r\n\t\t\t\t\tgeometry: geometry,\r\n\t\t\t\t\tmaterial: material,\r\n\t\t\t\t\tprogram: material.program || defaultProgram,\r\n\t\t\t\t\tgroupOrder: groupOrder,\r\n\t\t\t\t\trenderOrder: object.renderOrder,\r\n\t\t\t\t\tz: z,\r\n\t\t\t\t\tgroup: group\r\n\t\t\t\t};\r\n\r\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderItem.id = object.id;\r\n\t\t\t\trenderItem.object = object;\r\n\t\t\t\trenderItem.geometry = geometry;\r\n\t\t\t\trenderItem.material = material;\r\n\t\t\t\trenderItem.program = material.program || defaultProgram;\r\n\t\t\t\trenderItem.groupOrder = groupOrder;\r\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\r\n\t\t\t\trenderItem.z = z;\r\n\t\t\t\trenderItem.group = group;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderItemsIndex ++;\r\n\r\n\t\t\treturn renderItem;\r\n\r\n\t\t}\r\n\r\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\r\n\r\n\t\t}\r\n\r\n\t\tfunction sort() {\r\n\r\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }\r\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\topaque: opaque,\r\n\t\t\ttransparent: transparent,\r\n\r\n\t\t\tinit: init,\r\n\t\t\tpush: push,\r\n\t\t\tunshift: unshift,\r\n\r\n\t\t\tsort: sort\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderLists() {\r\n\r\n\t\tvar lists = new WeakMap();\r\n\r\n\t\tfunction onSceneDispose( event ) {\r\n\r\n\t\t\tvar scene = event.target;\r\n\r\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\tlists.delete( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar cameras = lists.get( scene );\r\n\t\t\tvar list;\r\n\t\t\tif ( cameras === undefined ) {\r\n\r\n\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\tlists.set( scene, new WeakMap() );\r\n\t\t\t\tlists.get( scene ).set( camera, list );\r\n\r\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlist = cameras.get( camera );\r\n\t\t\t\tif ( list === undefined ) {\r\n\r\n\t\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\t\tcameras.set( camera, list );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tlists = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction UniformsCache() {\r\n\r\n\t\tvar lights = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( light ) {\r\n\r\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn lights[ light.id ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniforms;\r\n\r\n\t\t\t\tswitch ( light.type ) {\r\n\r\n\t\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\r\n\t\t\t\t\t\t\tshadowCameraNear: 1,\r\n\t\t\t\t\t\t\tshadowCameraFar: 1000\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'HemisphereLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tskyColor: new Color(),\r\n\t\t\t\t\t\t\tgroundColor: new Color()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RectAreaLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\r\n\t\t\t\t\t\t\thalfHeight: new Vector3()\r\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\t\t\treturn uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar nextVersion = 0;\r\n\r\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\r\n\r\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\r\n\r\n\t}\r\n\r\n\tfunction WebGLLights() {\r\n\r\n\t\tvar cache = new UniformsCache();\r\n\r\n\t\tvar state = {\r\n\r\n\t\t\tversion: 0,\r\n\r\n\t\t\thash: {\r\n\t\t\t\tdirectionalLength: - 1,\r\n\t\t\t\tpointLength: - 1,\r\n\t\t\t\tspotLength: - 1,\r\n\t\t\t\trectAreaLength: - 1,\r\n\t\t\t\themiLength: - 1,\r\n\r\n\t\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\t\tnumPointShadows: - 1,\r\n\t\t\t\tnumSpotShadows: - 1,\r\n\t\t\t},\r\n\r\n\t\t\tambient: [ 0, 0, 0 ],\r\n\t\t\tprobe: [],\r\n\t\t\tdirectional: [],\r\n\t\t\tdirectionalShadowMap: [],\r\n\t\t\tdirectionalShadowMatrix: [],\r\n\t\t\tspot: [],\r\n\t\t\tspotShadowMap: [],\r\n\t\t\tspotShadowMatrix: [],\r\n\t\t\trectArea: [],\r\n\t\t\tpoint: [],\r\n\t\t\tpointShadowMap: [],\r\n\t\t\tpointShadowMatrix: [],\r\n\t\t\themi: [],\r\n\r\n\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\tnumPointShadows: - 1,\r\n\t\t\tnumSpotShadows: - 1\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\r\n\r\n\t\tvar vector3 = new Vector3();\r\n\t\tvar matrix4 = new Matrix4();\r\n\t\tvar matrix42 = new Matrix4();\r\n\r\n\t\tfunction setup( lights, shadows, camera ) {\r\n\r\n\t\t\tvar r = 0, g = 0, b = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\r\n\r\n\t\t\tvar directionalLength = 0;\r\n\t\t\tvar pointLength = 0;\r\n\t\t\tvar spotLength = 0;\r\n\t\t\tvar rectAreaLength = 0;\r\n\t\t\tvar hemiLength = 0;\r\n\r\n\t\t\tvar numDirectionalShadows = 0;\r\n\t\t\tvar numPointShadows = 0;\r\n\t\t\tvar numSpotShadows = 0;\r\n\r\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\tlights.sort( shadowCastingLightsFirst );\r\n\r\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tvar color = light.color;\r\n\t\t\t\tvar intensity = light.intensity;\r\n\t\t\t\tvar distance = light.distance;\r\n\r\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\t\tif ( light.isAmbientLight ) {\r\n\r\n\t\t\t\t\tr += color.r * intensity;\r\n\t\t\t\t\tg += color.g * intensity;\r\n\t\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t\t} else if ( light.isLightProbe ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\r\n\r\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumDirectionalShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\r\n\r\n\t\t\t\t\tdirectionalLength ++;\r\n\r\n\t\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumSpotShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\r\n\r\n\t\t\t\t\tspotLength ++;\r\n\r\n\t\t\t\t} else if ( light.isRectAreaLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\t// (a) intensity is the total visible light emitted\r\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\r\n\r\n\t\t\t\t\t// (b) intensity is the brightness of the light\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\r\n\t\t\t\t\tmatrix42.identity();\r\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\r\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\r\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\r\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\r\n\r\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\r\n\t\t\t\t\t// uniforms.distance = distance;\r\n\r\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\r\n\r\n\t\t\t\t\trectAreaLength ++;\r\n\r\n\t\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\r\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\r\n\r\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumPointShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\r\n\r\n\t\t\t\t\tpointLength ++;\r\n\r\n\t\t\t\t} else if ( light.isHemisphereLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\r\n\r\n\t\t\t\t\themiLength ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.ambient[ 0 ] = r;\r\n\t\t\tstate.ambient[ 1 ] = g;\r\n\t\t\tstate.ambient[ 2 ] = b;\r\n\r\n\t\t\tvar hash = state.hash;\r\n\r\n\t\t\tif ( hash.directionalLength !== directionalLength ||\r\n\t\t\t\thash.pointLength !== pointLength ||\r\n\t\t\t\thash.spotLength !== spotLength ||\r\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\r\n\t\t\t\thash.hemiLength !== hemiLength ||\r\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\r\n\t\t\t\thash.numPointShadows !== numPointShadows ||\r\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\r\n\r\n\t\t\t\tstate.directional.length = directionalLength;\r\n\t\t\t\tstate.spot.length = spotLength;\r\n\t\t\t\tstate.rectArea.length = rectAreaLength;\r\n\t\t\t\tstate.point.length = pointLength;\r\n\t\t\t\tstate.hemi.length = hemiLength;\r\n\r\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\r\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\r\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\r\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\r\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\r\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\r\n\r\n\t\t\t\thash.directionalLength = directionalLength;\r\n\t\t\t\thash.pointLength = pointLength;\r\n\t\t\t\thash.spotLength = spotLength;\r\n\t\t\t\thash.rectAreaLength = rectAreaLength;\r\n\t\t\t\thash.hemiLength = hemiLength;\r\n\r\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\r\n\t\t\t\thash.numPointShadows = numPointShadows;\r\n\t\t\t\thash.numSpotShadows = numSpotShadows;\r\n\r\n\t\t\t\tstate.version = nextVersion ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsetup: setup,\r\n\t\t\tstate: state\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLRenderState() {\r\n\r\n\t\tvar lights = new WebGLLights();\r\n\r\n\t\tvar lightsArray = [];\r\n\t\tvar shadowsArray = [];\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\tlightsArray.length = 0;\r\n\t\t\tshadowsArray.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushLight( light ) {\r\n\r\n\t\t\tlightsArray.push( light );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushShadow( shadowLight ) {\r\n\r\n\t\t\tshadowsArray.push( shadowLight );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setupLights( camera ) {\r\n\r\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\r\n\r\n\t\t}\r\n\r\n\t\tvar state = {\r\n\t\t\tlightsArray: lightsArray,\r\n\t\t\tshadowsArray: shadowsArray,\r\n\r\n\t\t\tlights: lights\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\tinit: init,\r\n\t\t\tstate: state,\r\n\t\t\tsetupLights: setupLights,\r\n\r\n\t\t\tpushLight: pushLight,\r\n\t\t\tpushShadow: pushShadow\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderStates() {\r\n\r\n\t\tvar renderStates = new WeakMap();\r\n\r\n\t\tfunction onSceneDispose( event ) {\r\n\r\n\t\t\tvar scene = event.target;\r\n\r\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\trenderStates.delete( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar renderState;\r\n\r\n\t\t\tif ( renderStates.has( scene ) === false ) {\r\n\r\n\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\trenderStates.set( scene, new WeakMap() );\r\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\r\n\r\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\r\n\r\n\t\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn renderState;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\trenderStates = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / https://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDepthMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\r\n\t\tthis.depthPacking = BasicDepthPacking;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\r\n\r\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\r\n\r\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.depthPacking = source.depthPacking;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  referencePosition: <float>,\r\n\t *  nearDistance: <float>,\r\n\t *  farDistance: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDistanceMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDistanceMaterial';\r\n\r\n\t\tthis.referencePosition = new Vector3();\r\n\t\tthis.nearDistance = 1;\r\n\t\tthis.farDistance = 1000;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\r\n\r\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\r\n\r\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.referencePosition.copy( source.referencePosition );\r\n\t\tthis.nearDistance = source.nearDistance;\r\n\t\tthis.farDistance = source.farDistance;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\r\n\r\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\r\n\r\n\t\tvar _frustum = new Frustum(),\r\n\r\n\t\t\t_shadowMapSize = new Vector2(),\r\n\t\t\t_viewportSize = new Vector2(),\r\n\r\n\t\t\t_viewport = new Vector4(),\r\n\r\n\t\t\t_depthMaterials = [],\r\n\t\t\t_distanceMaterials = [],\r\n\r\n\t\t\t_materialCache = {};\r\n\r\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\r\n\r\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\r\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tshadow_pass: { value: null },\r\n\t\t\t\tresolution: { value: new Vector2() },\r\n\t\t\t\tradius: { value: 4.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: vsm_vert,\r\n\r\n\t\t\tfragmentShader: vsm_frag\r\n\r\n\t\t} );\r\n\r\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\r\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\r\n\r\n\t\tvar fullScreenTri = new BufferGeometry();\r\n\t\tfullScreenTri.setAttribute(\r\n\t\t\t\"position\",\r\n\t\t\tnew BufferAttribute(\r\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\r\n\t\t\t\t3\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tthis.type = PCFShadowMap;\r\n\r\n\t\tthis.render = function ( lights, scene, camera ) {\r\n\r\n\t\t\tif ( scope.enabled === false ) { return; }\r\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\r\n\r\n\t\t\tif ( lights.length === 0 ) { return; }\r\n\r\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\r\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\r\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\r\n\r\n\t\t\tvar _state = _renderer.state;\r\n\r\n\t\t\t// Set GL state for depth map.\r\n\t\t\t_state.setBlending( NoBlending );\r\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\r\n\t\t\t_state.buffers.depth.setTest( true );\r\n\t\t\t_state.setScissorTest( false );\r\n\r\n\t\t\t// render depth map\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\r\n\r\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\r\n\r\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\r\n\r\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\r\n\r\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\r\n\r\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\r\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\r\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\r\n\r\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\r\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\r\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\r\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\r\n\t\t\t\t_renderer.clear();\r\n\r\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\r\n\r\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\r\n\r\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\r\n\r\n\t\t\t\t\t_viewport.set(\r\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\r\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\r\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\r\n\t\t\t\t\t\t_viewportSize.y * viewport.w\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t_state.viewport( _viewport );\r\n\r\n\t\t\t\t\tshadow.updateMatrices( light, vp );\r\n\r\n\t\t\t\t\t_frustum = shadow.getFrustum();\r\n\r\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do blur pass for VSM\r\n\r\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\t\tVSMPass( shadow, camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.needsUpdate = false;\r\n\r\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\r\n\r\n\t\t};\r\n\r\n\t\tfunction VSMPass( shadow, camera ) {\r\n\r\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\r\n\r\n\t\t\t// vertical pass\r\n\r\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\r\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\r\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\r\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\r\n\t\t\t_renderer.clear();\r\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\r\n\r\n\t\t\t// horizonal pass\r\n\r\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\r\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\r\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\r\n\t\t\t_renderer.setRenderTarget( shadow.map );\r\n\t\t\t_renderer.clear();\r\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\r\n\r\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\r\n\r\n\t\t\tvar material = _depthMaterials[ index ];\r\n\r\n\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\tmaterial = new MeshDepthMaterial( {\r\n\r\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\r\n\r\n\t\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_depthMaterials[ index ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\r\n\r\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\r\n\r\n\t\t\tvar material = _distanceMaterials[ index ];\r\n\r\n\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\r\n\r\n\t\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_distanceMaterials[ index ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tvar result = null;\r\n\r\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\r\n\t\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\t\tif ( light.isPointLight === true ) {\r\n\r\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\r\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customMaterial === undefined ) {\r\n\r\n\t\t\t\tvar useMorphing = false;\r\n\r\n\t\t\t\tif ( material.morphTargets === true ) {\r\n\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\r\n\r\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useSkinning = false;\r\n\r\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\t\t\tif ( material.skinning === true ) {\r\n\r\n\t\t\t\t\t\tuseSkinning = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\r\n\r\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = customMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _renderer.localClippingEnabled &&\r\n\t\t\t\t\tmaterial.clipShadows === true &&\r\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\r\n\r\n\t\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t\t// appropriate state\r\n\r\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.visible = material.visible;\r\n\t\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\t\tif ( type === VSMShadowMap ) {\r\n\r\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.clipShadows = material.clipShadows;\r\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\t\t\tresult.clipIntersection = material.clipIntersection;\r\n\r\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\r\n\r\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tresult.nearDistance = shadowCameraNear;\r\n\t\t\t\tresult.farDistance = shadowCameraFar;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\r\n\r\n\t\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\r\n\r\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\r\n\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\r\n\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLState( gl, extensions, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tfunction ColorBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar color = new Vector4();\r\n\t\t\tvar currentColorMask = null;\r\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetMask: function ( colorMask ) {\r\n\r\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\t\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcolor.set( r, g, b, a );\r\n\r\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentColorMask = null;\r\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction DepthBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentDepthMask = null;\r\n\t\t\tvar currentDepthFunc = null;\r\n\t\t\tvar currentDepthClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( depthTest ) {\r\n\r\n\t\t\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t\t\tenable( 2929 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( 2929 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( depthMask ) {\r\n\r\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.depthMask( depthMask );\r\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( depthFunc ) {\r\n\r\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\t\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\t\tcase NeverDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase EqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( depth ) {\r\n\r\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentDepthMask = null;\r\n\t\t\t\t\tcurrentDepthFunc = null;\r\n\t\t\t\t\tcurrentDepthClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction StencilBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentStencilMask = null;\r\n\t\t\tvar currentStencilFunc = null;\r\n\t\t\tvar currentStencilRef = null;\r\n\t\t\tvar currentStencilFuncMask = null;\r\n\t\t\tvar currentStencilFail = null;\r\n\t\t\tvar currentStencilZFail = null;\r\n\t\t\tvar currentStencilZPass = null;\r\n\t\t\tvar currentStencilClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( stencilTest ) {\r\n\r\n\t\t\t\t\tif ( ! locked ) {\r\n\r\n\t\t\t\t\t\tif ( stencilTest ) {\r\n\r\n\t\t\t\t\t\t\tenable( 2960 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tdisable( 2960 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\r\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\r\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\r\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( stencil ) {\r\n\r\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentStencilMask = null;\r\n\t\t\t\t\tcurrentStencilFunc = null;\r\n\t\t\t\t\tcurrentStencilRef = null;\r\n\t\t\t\t\tcurrentStencilFuncMask = null;\r\n\t\t\t\t\tcurrentStencilFail = null;\r\n\t\t\t\t\tcurrentStencilZFail = null;\r\n\t\t\t\t\tcurrentStencilZPass = null;\r\n\t\t\t\t\tcurrentStencilClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar colorBuffer = new ColorBuffer();\r\n\t\tvar depthBuffer = new DepthBuffer();\r\n\t\tvar stencilBuffer = new StencilBuffer();\r\n\r\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\r\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\r\n\r\n\t\tvar enabledCapabilities = {};\r\n\r\n\t\tvar currentProgram = null;\r\n\r\n\t\tvar currentBlendingEnabled = null;\r\n\t\tvar currentBlending = null;\r\n\t\tvar currentBlendEquation = null;\r\n\t\tvar currentBlendSrc = null;\r\n\t\tvar currentBlendDst = null;\r\n\t\tvar currentBlendEquationAlpha = null;\r\n\t\tvar currentBlendSrcAlpha = null;\r\n\t\tvar currentBlendDstAlpha = null;\r\n\t\tvar currentPremultipledAlpha = false;\r\n\r\n\t\tvar currentFlipSided = null;\r\n\t\tvar currentCullFace = null;\r\n\r\n\t\tvar currentLineWidth = null;\r\n\r\n\t\tvar currentPolygonOffsetFactor = null;\r\n\t\tvar currentPolygonOffsetUnits = null;\r\n\r\n\t\tvar maxTextures = gl.getParameter( 35661 );\r\n\r\n\t\tvar lineWidthAvailable = false;\r\n\t\tvar version = 0;\r\n\t\tvar glVersion = gl.getParameter( 7938 );\r\n\r\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\r\n\r\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvar currentTextureSlot = null;\r\n\t\tvar currentBoundTextures = {};\r\n\r\n\t\tvar currentScissor = new Vector4();\r\n\t\tvar currentViewport = new Vector4();\r\n\r\n\t\tfunction createTexture( type, target, count ) {\r\n\r\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\r\n\t\t\tvar texture = gl.createTexture();\r\n\r\n\t\t\tgl.bindTexture( type, texture );\r\n\t\t\tgl.texParameteri( type, 10241, 9728 );\r\n\t\t\tgl.texParameteri( type, 10240, 9728 );\r\n\r\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t\tvar emptyTextures = {};\r\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\r\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\r\n\r\n\t\t// init\r\n\r\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\r\n\t\tdepthBuffer.setClear( 1 );\r\n\t\tstencilBuffer.setClear( 0 );\r\n\r\n\t\tenable( 2929 );\r\n\t\tdepthBuffer.setFunc( LessEqualDepth );\r\n\r\n\t\tsetFlipSided( false );\r\n\t\tsetCullFace( CullFaceBack );\r\n\t\tenable( 2884 );\r\n\r\n\t\tsetBlending( NoBlending );\r\n\r\n\t\t//\r\n\r\n\t\tfunction initAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttribute( attribute ) {\r\n\r\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\r\n\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\r\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disableUnusedAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\r\n\r\n\t\t\t\tgl.enable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\r\n\r\n\t\t\t\tgl.disable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction useProgram( program ) {\r\n\r\n\t\t\tif ( currentProgram !== program ) {\r\n\r\n\t\t\t\tgl.useProgram( program );\r\n\r\n\t\t\t\tcurrentProgram = program;\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tvar equationToGL = {};\r\n\t\tequationToGL[ AddEquation ] = 32774;\r\n\t\tequationToGL[ SubtractEquation ] = 32778;\r\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\r\n\r\n\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\tequationToGL[ MinEquation ] = 32775;\r\n\t\t\tequationToGL[ MaxEquation ] = 32776;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\r\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar factorToGL = {};\r\n\t\tfactorToGL[ ZeroFactor ] = 0;\r\n\t\tfactorToGL[ OneFactor ] = 1;\r\n\t\tfactorToGL[ SrcColorFactor ] = 768;\r\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\r\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\r\n\t\tfactorToGL[ DstColorFactor ] = 774;\r\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\r\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\r\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\r\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\r\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\r\n\r\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\t\tif ( blending === NoBlending ) {\r\n\r\n\t\t\t\tif ( currentBlendingEnabled ) {\r\n\r\n\t\t\t\t\tdisable( 3042 );\r\n\t\t\t\t\tcurrentBlendingEnabled = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! currentBlendingEnabled ) {\r\n\r\n\t\t\t\tenable( 3042 );\r\n\t\t\t\tcurrentBlendingEnabled = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blending !== CustomBlending ) {\r\n\r\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\r\n\r\n\t\t\t\t\t\tgl.blendEquation( 32774 );\r\n\r\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\r\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// custom blending\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMaterial( material, frontFaceCW ) {\r\n\r\n\t\t\tmaterial.side === DoubleSide\r\n\t\t\t\t? disable( 2884 )\r\n\t\t\t\t: enable( 2884 );\r\n\r\n\t\t\tvar flipSided = ( material.side === BackSide );\r\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\r\n\r\n\t\t\tsetFlipSided( flipSided );\r\n\r\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\r\n\t\t\t\t? setBlending( NoBlending )\r\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\r\n\t\t\tdepthBuffer.setTest( material.depthTest );\r\n\t\t\tdepthBuffer.setMask( material.depthWrite );\r\n\t\t\tcolorBuffer.setMask( material.colorWrite );\r\n\r\n\t\t\tvar stencilWrite = material.stencilWrite;\r\n\t\t\tstencilBuffer.setTest( stencilWrite );\r\n\t\t\tif ( stencilWrite ) {\r\n\r\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\r\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\r\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setFlipSided( flipSided ) {\r\n\r\n\t\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t\tgl.frontFace( 2304 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.frontFace( 2305 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setCullFace( cullFace ) {\r\n\r\n\t\t\tif ( cullFace !== CullFaceNone ) {\r\n\r\n\t\t\t\tenable( 2884 );\r\n\r\n\t\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1029 );\r\n\r\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1028 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1032 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 2884 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentCullFace = cullFace;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setLineWidth( width ) {\r\n\r\n\t\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\r\n\r\n\t\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\r\n\r\n\t\t\tif ( polygonOffset ) {\r\n\r\n\t\t\t\tenable( 32823 );\r\n\r\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 32823 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setScissorTest( scissorTest ) {\r\n\r\n\t\t\tif ( scissorTest ) {\r\n\r\n\t\t\t\tenable( 3089 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 3089 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// texture\r\n\r\n\t\tfunction activeTexture( webglSlot ) {\r\n\r\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\r\n\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction bindTexture( webglType, webglTexture ) {\r\n\r\n\t\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t\tactiveTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\t\tboundTexture.type = webglType;\r\n\t\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction unbindTexture() {\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\r\n\r\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\r\n\r\n\t\t\t\tboundTexture.type = undefined;\r\n\t\t\t\tboundTexture.texture = undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction compressedTexImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage3D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction scissor( scissor ) {\r\n\r\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction viewport( viewport ) {\r\n\r\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tenabledCapabilities = {};\r\n\r\n\t\t\tcurrentTextureSlot = null;\r\n\t\t\tcurrentBoundTextures = {};\r\n\r\n\t\t\tcurrentProgram = null;\r\n\r\n\t\t\tcurrentBlending = null;\r\n\r\n\t\t\tcurrentFlipSided = null;\r\n\t\t\tcurrentCullFace = null;\r\n\r\n\t\t\tcolorBuffer.reset();\r\n\t\t\tdepthBuffer.reset();\r\n\t\t\tstencilBuffer.reset();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tbuffers: {\r\n\t\t\t\tcolor: colorBuffer,\r\n\t\t\t\tdepth: depthBuffer,\r\n\t\t\t\tstencil: stencilBuffer\r\n\t\t\t},\r\n\r\n\t\t\tinitAttributes: initAttributes,\r\n\t\t\tenableAttribute: enableAttribute,\r\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\r\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\r\n\t\t\tenable: enable,\r\n\t\t\tdisable: disable,\r\n\r\n\t\t\tuseProgram: useProgram,\r\n\r\n\t\t\tsetBlending: setBlending,\r\n\t\t\tsetMaterial: setMaterial,\r\n\r\n\t\t\tsetFlipSided: setFlipSided,\r\n\t\t\tsetCullFace: setCullFace,\r\n\r\n\t\t\tsetLineWidth: setLineWidth,\r\n\t\t\tsetPolygonOffset: setPolygonOffset,\r\n\r\n\t\t\tsetScissorTest: setScissorTest,\r\n\r\n\t\t\tactiveTexture: activeTexture,\r\n\t\t\tbindTexture: bindTexture,\r\n\t\t\tunbindTexture: unbindTexture,\r\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\r\n\t\t\ttexImage2D: texImage2D,\r\n\t\t\ttexImage3D: texImage3D,\r\n\r\n\t\t\tscissor: scissor,\r\n\t\t\tviewport: viewport,\r\n\r\n\t\t\treset: reset\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\t\tvar maxTextures = capabilities.maxTextures;\r\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\r\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\r\n\t\tvar maxSamples = capabilities.maxSamples;\r\n\r\n\t\tvar _videoTextures = new WeakMap();\r\n\t\tvar _canvas;\r\n\r\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\r\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\r\n\r\n\t\tvar useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\r\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\r\n\r\n\t\tfunction createCanvas( width, height ) {\r\n\r\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\r\n\r\n\t\t\treturn useOffscreenCanvas ?\r\n\t\t\t\tnew OffscreenCanvas( width, height ) :\r\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\r\n\t\t}\r\n\r\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\r\n\r\n\t\t\tvar scale = 1;\r\n\r\n\t\t\t// handle case if texture exceeds max size\r\n\r\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only perform resize if necessary\r\n\r\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\r\n\r\n\t\t\t\t// only perform resize for certain image types\r\n\r\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\r\n\r\n\t\t\t\t\tvar width = floor( scale * image.width );\r\n\t\t\t\t\tvar height = floor( scale * image.height );\r\n\r\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\r\n\r\n\t\t\t\t\t// cube textures can't reuse the same canvas\r\n\r\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\r\n\r\n\t\t\t\t\tcanvas.width = width;\r\n\t\t\t\t\tcanvas.height = height;\r\n\r\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\r\n\r\n\t\t\t\t\treturn canvas;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( 'data' in image ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn image;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\t\tif ( isWebGL2 ) { return false; }\r\n\r\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\r\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\r\n\r\n\t\t\treturn texture.generateMipmaps && supportsMips &&\r\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateMipmap( target, texture, width, height ) {\r\n\r\n\t\t\t_gl.generateMipmap( target );\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\r\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getInternalFormat( glFormat, glType ) {\r\n\r\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\r\n\r\n\t\t\tvar internalFormat = glFormat;\r\n\r\n\t\t\tif ( glFormat === 6403 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === 6407 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === 6408 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\r\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\r\n\r\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\r\n\r\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn internalFormat;\r\n\r\n\t\t}\r\n\r\n\t\t// Fallback filters for non-power-of-2 textures\r\n\r\n\t\tfunction filterFallback( f ) {\r\n\r\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\r\n\r\n\t\t\t\treturn 9728;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 9729;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction onTextureDispose( event ) {\r\n\r\n\t\t\tvar texture = event.target;\r\n\r\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\tdeallocateTexture( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\t\t_videoTextures.delete( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\t\tvar renderTarget = event.target;\r\n\r\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction deallocateTexture( texture ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\tproperties.remove( texture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\tif ( ! renderTarget ) { return; }\r\n\r\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\r\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\r\n\r\n\t\t\t\tinfo.memory.textures -= 2;\r\n\r\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tproperties.remove( renderTarget.texture );\r\n\t\t\tproperties.remove( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar textureUnits = 0;\r\n\r\n\t\tfunction resetTextureUnits() {\r\n\r\n\t\t\ttextureUnits = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction allocateTextureUnit() {\r\n\r\n\t\t\tvar textureUnit = textureUnits;\r\n\r\n\t\t\tif ( textureUnit >= maxTextures ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureUnits += 1;\r\n\r\n\t\t\treturn textureUnit;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tvar image = texture.image;\r\n\r\n\t\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\r\n\r\n\t\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTexture2DArray( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTexture3D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCube( texture, slot ) {\r\n\r\n\t\t\tif ( texture.image.length !== 6 ) { return; }\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tinitTexture( textureProperties, texture );\r\n\r\n\t\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\r\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\r\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\r\n\r\n\t\t\t\tvar mipmaps;\r\n\r\n\t\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmipmaps = texture.mipmaps;\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\t// We assume images for cube map have the same size.\r\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tvar wrappingToGL = {};\r\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\r\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\r\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\r\n\r\n\t\tvar filterToGL = {};\r\n\t\tfilterToGL[ NearestFilter ] = 9728;\r\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\r\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\r\n\t\tfilterToGL[ LinearFilter ] = 9729;\r\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\r\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\r\n\r\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\r\n\r\n\t\t\tif ( supportsMips ) {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\r\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\r\n\r\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\r\n\r\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\r\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\r\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\r\n\r\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\r\n\r\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension ) {\r\n\r\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\r\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\r\n\r\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\r\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction initTexture( textureProperties, texture ) {\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\t\tvar textureType = 3553;\r\n\r\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\r\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\r\n\r\n\t\t\tinitTexture( textureProperties, texture );\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\r\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\r\n\r\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\r\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\r\n\r\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture.isDepthTexture ) {\r\n\r\n\t\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\t\tglInternalFormat = 6402;\r\n\r\n\t\t\t\tif ( texture.type === FloatType ) {\r\n\r\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\r\n\t\t\t\t\tglInternalFormat = 36012;\r\n\r\n\t\t\t\t} else if ( isWebGL2 ) {\r\n\r\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\r\n\t\t\t\t\tglInternalFormat = 33189;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\r\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t\tglInternalFormat = 34041;\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t} else if ( texture.isDataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\r\n\r\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t} else if ( texture.isDataTexture3D ) {\r\n\r\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( 3553, texture, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\r\n\r\n\t\t}\r\n\r\n\t\t// Render targets\r\n\r\n\t\t// Setup storage for target texture and bind it to correct framebuffer\r\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\r\n\r\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\r\n\r\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\r\n\r\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( 36161, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\r\n\r\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\r\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\r\n\r\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\r\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// upload an empty depth texture with framebuffer size\r\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\r\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Setup GL resources for a non-texture depth buffer\r\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\r\n\r\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Set up GL resources for the render target\r\n\t\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\r\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\r\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t\t// Setup framebuffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\r\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\r\n\r\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( isMultiview ) {\r\n\r\n\t\t\t\t\tvar width = renderTarget.width;\r\n\t\t\t\t\tvar height = renderTarget.height;\r\n\t\t\t\t\tvar numViews = renderTarget.numViews;\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\r\n\r\n\t\t\t\t\tinfo.memory.textures += 2;\r\n\r\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\r\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\r\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\r\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\r\n\r\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\r\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\r\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\r\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\r\n\r\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\r\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\r\n\r\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\r\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\r\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\r\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\t\t\t\t\t_gl.bindTexture( 35866, null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup color buffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( 34067, null );\r\n\r\n\t\t\t} else if ( ! isMultiview ) {\r\n\r\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( 3553, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup depth and stencil buffers\r\n\r\n\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\r\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\r\n\r\n\t\t\t\tstate.bindTexture( target, webglTexture );\r\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\r\n\t\t\t\tstate.bindTexture( target, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\t\tvar width = renderTarget.width;\r\n\t\t\t\t\tvar height = renderTarget.height;\r\n\t\t\t\t\tvar mask = 16384;\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\r\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\r\n\r\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getRenderTargetSamples( renderTarget ) {\r\n\r\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\r\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateVideoTexture( texture ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\t// Check the last frame we updated the VideoTexture\r\n\r\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\r\n\r\n\t\t\t\t_videoTextures.set( texture, frame );\r\n\t\t\t\ttexture.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t\tvar warnedTexture2D = false;\r\n\t\tvar warnedTextureCube = false;\r\n\r\n\t\tfunction safeSetTexture2D( texture, slot ) {\r\n\r\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tif ( warnedTexture2D === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarnedTexture2D = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( texture, slot );\r\n\r\n\t\t}\r\n\r\n\t\tfunction safeSetTextureCube( texture, slot ) {\r\n\r\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tif ( warnedTextureCube === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarnedTextureCube = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\r\n\t\t\t// TODO: unify these code paths\r\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\r\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t// this function alone should take care of cube textures\r\n\t\t\t\tsetTextureCube( texture, slot );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\r\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\r\n\t\tthis.resetTextureUnits = resetTextureUnits;\r\n\r\n\t\tthis.setTexture2D = setTexture2D;\r\n\t\tthis.setTexture2DArray = setTexture2DArray;\r\n\t\tthis.setTexture3D = setTexture3D;\r\n\t\tthis.setTextureCube = setTextureCube;\r\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\r\n\t\tthis.setupRenderTarget = setupRenderTarget;\r\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\r\n\r\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\r\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author thespite / http://www.twitter.com/thespite\r\n\t */\r\n\r\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tfunction convert( p ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\r\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\r\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\r\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\r\n\r\n\t\t\tif ( p === ByteType ) { return 5120; }\r\n\t\t\tif ( p === ShortType ) { return 5122; }\r\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\r\n\t\t\tif ( p === IntType ) { return 5124; }\r\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\r\n\t\t\tif ( p === FloatType ) { return 5126; }\r\n\r\n\t\t\tif ( p === HalfFloatType ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\r\n\r\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\r\n\t\t\tif ( p === RGBFormat ) { return 6407; }\r\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\r\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\r\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\r\n\t\t\tif ( p === DepthFormat ) { return 6402; }\r\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\r\n\t\t\tif ( p === RedFormat ) { return 6403; }\r\n\r\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\r\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\r\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_ETC1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\r\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\t// TODO Complete?\r\n\r\n\t\t\t\t\treturn p;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === UnsignedInt248Type ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { convert: convert };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fernandojsg / http://fernandojsg.com\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.depthBuffer = false;\r\n\t\tthis.stencilBuffer = false;\r\n\r\n\t\tthis.numViews = numViews;\r\n\r\n\t}\r\n\r\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\r\n\r\n\t\tconstructor: WebGLMultiviewRenderTarget,\r\n\r\n\t\tisWebGLMultiviewRenderTarget: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.numViews = source.numViews;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetNumViews: function ( numViews ) {\r\n\r\n\t\t\tif ( this.numViews !== numViews ) {\r\n\r\n\t\t\t\tthis.numViews = numViews;\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author fernandojsg / http://fernandojsg.com\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction WebGLMultiview( renderer, gl ) {\r\n\r\n\t\tvar DEFAULT_NUMVIEWS = 2;\r\n\r\n\t\tvar extensions = renderer.extensions;\r\n\t\tvar properties = renderer.properties;\r\n\r\n\t\tvar renderTarget, currentRenderTarget;\r\n\t\tvar mat3, mat4, cameraArray, renderSize;\r\n\r\n\t\tvar available;\r\n\t\tvar maxNumViews = 0;\r\n\r\n\t\t//\r\n\r\n\t\tfunction isAvailable() {\r\n\r\n\t\t\tif ( available === undefined ) {\r\n\r\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\r\n\r\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\r\n\r\n\t\t\t\tif ( available ) {\r\n\r\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\r\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\r\n\r\n\t\t\t\t\trenderSize = new Vector2();\r\n\t\t\t\t\tmat4 = [];\r\n\t\t\t\t\tmat3 = [];\r\n\t\t\t\t\tcameraArray = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\r\n\r\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\r\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn available;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getCameraArray( camera ) {\r\n\r\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\r\n\r\n\t\t\tcameraArray[ 0 ] = camera;\r\n\r\n\t\t\treturn cameraArray;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\r\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction isMultiviewCompatible( camera ) {\r\n\r\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\r\n\r\n\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\r\n\r\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\r\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction resizeRenderTarget( camera ) {\r\n\r\n\t\t\tif ( currentRenderTarget ) {\r\n\r\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\r\n\r\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\r\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\r\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction attachCamera( camera ) {\r\n\r\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\r\n\r\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\r\n\t\t\tresizeRenderTarget( camera );\r\n\t\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\tfunction detachCamera( camera ) {\r\n\r\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t\tflush( camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction flush( camera ) {\r\n\r\n\t\t\tvar srcRenderTarget = renderTarget;\r\n\t\t\tvar numViews = srcRenderTarget.numViews;\r\n\r\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\r\n\r\n\t\t\tvar viewWidth = srcRenderTarget.width;\r\n\t\t\tvar viewHeight = srcRenderTarget.height;\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\r\n\r\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\r\n\r\n\t\t\t\t\tvar x1 = viewport.x;\r\n\t\t\t\t\tvar y1 = viewport.y;\r\n\t\t\t\t\tvar x2 = x1 + viewport.z;\r\n\t\t\t\t\tvar y2 = y1 + viewport.w;\r\n\r\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\r\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\r\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.isAvailable = isAvailable;\r\n\t\tthis.attachCamera = attachCamera;\r\n\t\tthis.detachCamera = detachCamera;\r\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\r\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\r\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Group() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Group';\r\n\r\n\t}\r\n\r\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Group,\r\n\r\n\t\tisGroup: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ArrayCamera( array ) {\r\n\r\n\t\tPerspectiveCamera.call( this );\r\n\r\n\t\tthis.cameras = array || [];\r\n\r\n\t}\r\n\r\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\r\n\r\n\t\tconstructor: ArrayCamera,\r\n\r\n\t\tisArrayCamera: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author jsantell / https://www.jsantell.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar cameraLPos = new Vector3();\r\n\tvar cameraRPos = new Vector3();\r\n\r\n\t/**\r\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\r\n\t * the cameras' projection and world matrices have already been set.\r\n\t * And that near and far planes are identical for both cameras.\r\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\r\n\t */\r\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\r\n\r\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\r\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\r\n\r\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\r\n\r\n\t\tvar projL = cameraL.projectionMatrix.elements;\r\n\t\tvar projR = cameraR.projectionMatrix.elements;\r\n\r\n\t\t// VR systems will have identical far and near planes, and\r\n\t\t// most likely identical top and bottom frustum extents.\r\n\t\t// Use the left camera for these values.\r\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\r\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\r\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\r\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\r\n\r\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\r\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\r\n\t\tvar left = near * leftFov;\r\n\t\tvar right = near * rightFov;\r\n\r\n\t\t// Calculate the new camera's position offset from the\r\n\t\t// left camera. xOffset should be roughly half `ipd`.\r\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\r\n\t\tvar xOffset = zOffset * - leftFov;\r\n\r\n\t\t// TODO: Better way to apply this offset?\r\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\r\n\t\tcamera.translateX( xOffset );\r\n\t\tcamera.translateZ( zOffset );\r\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t// Find the union of the frustum values of the cameras and scale\r\n\t\t// the values so that the near plane's position does not change in world space,\r\n\t\t// although must now be relative to the new union camera.\r\n\t\tvar near2 = near + zOffset;\r\n\t\tvar far2 = far + zOffset;\r\n\t\tvar left2 = left - xOffset;\r\n\t\tvar right2 = right + ( ipd - xOffset );\r\n\t\tvar top2 = topFov * far / far2 * near2;\r\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\r\n\r\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebVRManager( renderer ) {\r\n\r\n\t\tvar renderWidth, renderHeight;\r\n\t\tvar scope = this;\r\n\r\n\t\tvar device = null;\r\n\t\tvar frameData = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar standingMatrix = new Matrix4();\r\n\t\tvar standingMatrixInverse = new Matrix4();\r\n\r\n\t\tvar framebufferScaleFactor = 1.0;\r\n\r\n\t\tvar referenceSpaceType = 'local-floor';\r\n\r\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\r\n\r\n\t\t\tframeData = new window.VRFrameData();\r\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\r\n\r\n\t\t}\r\n\r\n\t\tvar matrixWorldInverse = new Matrix4();\r\n\t\tvar tempQuaternion = new Quaternion();\r\n\t\tvar tempPosition = new Vector3();\r\n\r\n\t\tvar tempCamera = new PerspectiveCamera();\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.viewport = new Vector4();\r\n\t\tcameraL.layers.enable( 1 );\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.viewport = new Vector4();\r\n\t\tcameraR.layers.enable( 2 );\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn device !== null && device.isPresenting === true;\r\n\r\n\t\t}\r\n\r\n\t\tvar currentSize = new Vector2(), currentPixelRatio;\r\n\r\n\t\tfunction onVRDisplayPresentChange() {\r\n\r\n\t\t\tif ( isPresenting() ) {\r\n\r\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\r\n\t\t\t\trenderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;\r\n\t\t\t\trenderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\r\n\r\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\r\n\t\t\t\trenderer.getSize( currentSize );\r\n\r\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );\r\n\r\n\t\t\t\tcameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );\r\n\t\t\t\tcameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );\r\n\r\n\t\t\t\tanimation.start();\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( scope.enabled ) {\r\n\r\n\t\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimation.stop();\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar triggers = [];\r\n\t\tvar grips = [];\r\n\r\n\t\tfunction findGamepad( id ) {\r\n\r\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\r\n\r\n\t\t\tfor ( var i = 0, l = gamepads.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar gamepad = gamepads[ i ];\r\n\r\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\r\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\r\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'HTC Vive Focus' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\r\n\r\n\t\t\t\t\tvar hand = gamepad.hand;\r\n\r\n\t\t\t\t\tif ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }\r\n\t\t\t\t\tif ( id === 1 && ( hand === 'left' ) ) { return gamepad; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateControllers() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar gamepad = findGamepad( i );\r\n\r\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\r\n\r\n\t\t\t\t\tif ( gamepad.pose === null ) { return; }\r\n\r\n\t\t\t\t\t// Pose\r\n\r\n\t\t\t\t\tvar pose = gamepad.pose;\r\n\r\n\t\t\t\t\tif ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }\r\n\r\n\t\t\t\t\tif ( pose.position !== null ) { controller.position.fromArray( pose.position ); }\r\n\t\t\t\t\tif ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }\r\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\r\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t// Trigger\r\n\r\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\r\n\r\n\t\t\t\t\tif ( triggers[ i ] === undefined ) { triggers[ i ] = false; }\r\n\r\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Grip\r\n\t\t\t\t\tbuttonId = 2;\r\n\r\n\t\t\t\t\tif ( grips[ i ] === undefined ) { grips[ i ] = false; }\r\n\r\n\t\t\t\t\t// Skip if the grip button doesn't exist on this controller\r\n\t\t\t\t\tif ( gamepad.buttons[ buttonId ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\t\tgrips[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\t\tif ( grips[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezestart' } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezeend' } );\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeeze' } );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateViewportFromBounds( viewport, bounds ) {\r\n\r\n\t\t\tif ( bounds !== null && bounds.length === 4 ) {\r\n\r\n\t\t\t\tviewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\treturn device;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function ( value ) {\r\n\r\n\t\t\tif ( value !== undefined ) { device = value; }\r\n\r\n\t\t\tanimation.setContext( value );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\r\n\r\n\t\t\tframebufferScaleFactor = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tvar userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;\r\n\r\n\t\t\tdevice.depthNear = camera.near;\r\n\t\t\tdevice.depthFar = camera.far;\r\n\r\n\t\t\tdevice.getFrameData( frameData );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\r\n\r\n\t\t\t\tvar stageParameters = device.stageParameters;\r\n\r\n\t\t\t\tif ( stageParameters ) {\r\n\r\n\t\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar pose = frameData.pose;\r\n\r\n\t\t\ttempCamera.matrix.copy( standingMatrix );\r\n\t\t\ttempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );\r\n\r\n\t\t\tif ( pose.orientation !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\r\n\t\t\t\ttempCamera.quaternion.multiply( tempQuaternion );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pose.position !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\r\n\t\t\t\ttempPosition.fromArray( pose.position );\r\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\r\n\t\t\t\ttempCamera.position.add( tempPosition );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttempCamera.updateMatrixWorld();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcamera.matrixWorld.copy( tempCamera.matrixWorld );\r\n\r\n\t\t\tvar children = camera.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcameraL.near = camera.near;\r\n\t\t\tcameraR.near = camera.near;\r\n\r\n\t\t\tcameraL.far = camera.far;\r\n\t\t\tcameraR.far = camera.far;\r\n\r\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\r\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\r\n\r\n\t\t\t// TODO (mrdoob) Double check this code\r\n\r\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\r\n\r\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = camera.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// envMap and Mirror needs camera.matrixWorld\r\n\r\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\r\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\r\n\r\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\r\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\r\n\r\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar layers = device.getLayers();\r\n\r\n\t\t\tif ( layers.length ) {\r\n\r\n\t\t\t\tvar layer = layers[ 0 ];\r\n\r\n\t\t\t\tupdateViewportFromBounds( cameraL.viewport, layer.leftBounds );\r\n\t\t\t\tupdateViewportFromBounds( cameraR.viewport, layer.rightBounds );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateControllers();\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\treturn standingMatrix;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tanimation.setAnimationLoop( callback );\r\n\r\n\t\t\tif ( isPresenting() ) { animation.start(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {\r\n\r\n\t\t\tif ( isPresenting() ) { device.submitFrame(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\tif ( typeof window !== 'undefined' ) {\r\n\r\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.setFrameOfReferenceType = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( WebVRManager.prototype, EventDispatcher.prototype );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebXRManager( renderer, gl ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar session = null;\r\n\r\n\t\t// var framebufferScaleFactor = 1.0;\r\n\r\n\t\tvar referenceSpace = null;\r\n\t\tvar referenceSpaceType = 'local-floor';\r\n\r\n\t\tvar pose = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar sortedInputSources = [];\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn session !== null && referenceSpace !== null;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.layers.enable( 1 );\r\n\t\tcameraL.viewport = new Vector4();\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.layers.enable( 2 );\r\n\t\tcameraR.viewport = new Vector4();\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tfunction onSessionEvent( event ) {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tif ( sortedInputSources[ i ] === event.inputSource ) {\r\n\r\n\t\t\t\t\tcontrollers[ i ].dispatchEvent( { type: event.type } );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction onSessionEnd() {\r\n\r\n\t\t\trenderer.setFramebuffer( null );\r\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\r\n\t\t\tanimation.stop();\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRequestReferenceSpace( value ) {\r\n\r\n\t\t\treferenceSpace = value;\r\n\r\n\t\t\tanimation.setContext( session );\r\n\t\t\tanimation.start();\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\r\n\r\n\t\t\t// framebufferScaleFactor = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSession = function () {\r\n\r\n\t\t\treturn session;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSession = function ( value ) {\r\n\r\n\t\t\tsession = value;\r\n\r\n\t\t\tif ( session !== null ) {\r\n\r\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\r\n\r\n\t\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\t\tsession.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );\r\n\r\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\r\n\r\n\t\t\t\tupdateInputSources();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction updateInputSources() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tsortedInputSources[ i ] = findInputSource( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction findInputSource( id ) {\r\n\r\n\t\t\tvar inputSources = session.inputSources;\r\n\r\n\t\t\tfor ( var i = 0; i < inputSources.length; i ++ ) {\r\n\r\n\t\t\t\tvar inputSource = inputSources[ i ];\r\n\t\t\t\tvar handedness = inputSource.handedness;\r\n\r\n\t\t\t\tif ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }\r\n\t\t\t\tif ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction updateCamera( camera, parent ) {\r\n\r\n\t\t\tif ( parent === null ) {\r\n\r\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tvar parent = camera.parent;\r\n\t\t\tvar cameras = cameraVR.cameras;\r\n\r\n\t\t\tupdateCamera( cameraVR, parent );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tupdateCamera( cameras[ i ], parent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update camera and its children\r\n\r\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\r\n\r\n\t\t\tvar children = camera.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tpose = frame.getViewerPose( referenceSpace );\r\n\r\n\t\t\tif ( pose !== null ) {\r\n\r\n\t\t\t\tvar views = pose.views;\r\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\r\n\r\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\r\n\r\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar view = views[ i ];\r\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\r\n\t\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\r\n\r\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\r\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\r\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\r\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\r\n\r\n\t\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar inputSource = sortedInputSources[ i ];\r\n\r\n\t\t\t\tif ( inputSource ) {\r\n\r\n\t\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\r\n\r\n\t\t\t\t\tif ( inputPose !== null ) {\r\n\r\n\t\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\r\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\r\n\t\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\r\n\t\t\treturn new Matrix4();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFrameOfReferenceType = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {};\r\n\r\n\t}\r\n\r\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLRenderer( parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\r\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\r\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\r\n\r\n\t\tvar currentRenderList = null;\r\n\t\tvar currentRenderState = null;\r\n\r\n\t\t// public properties\r\n\r\n\t\tthis.domElement = _canvas;\r\n\r\n\t\t// Debug configuration container\r\n\t\tthis.debug = {\r\n\r\n\t\t\t/**\r\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tcheckShaderErrors: true\r\n\t\t};\r\n\r\n\t\t// clearing\r\n\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\r\n\t\t// scene graph\r\n\r\n\t\tthis.sortObjects = true;\r\n\r\n\t\t// user-defined clipping\r\n\r\n\t\tthis.clippingPlanes = [];\r\n\t\tthis.localClippingEnabled = false;\r\n\r\n\t\t// physically based shading\r\n\r\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\t\tthis.gammaInput = false;\r\n\t\tthis.gammaOutput = false;\r\n\r\n\t\t// physical lights\r\n\r\n\t\tthis.physicallyCorrectLights = false;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tthis.toneMapping = LinearToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\t\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tthis.maxMorphTargets = 8;\r\n\t\tthis.maxMorphNormals = 4;\r\n\r\n\t\t// internal properties\r\n\r\n\t\tvar _this = this,\r\n\r\n\t\t\t_isContextLost = false,\r\n\r\n\t\t\t// internal state cache\r\n\r\n\t\t\t_framebuffer = null,\r\n\r\n\t\t\t_currentActiveCubeFace = 0,\r\n\t\t\t_currentActiveMipmapLevel = 0,\r\n\t\t\t_currentRenderTarget = null,\r\n\t\t\t_currentFramebuffer = null,\r\n\t\t\t_currentMaterialId = - 1,\r\n\r\n\t\t\t// geometry and program caching\r\n\r\n\t\t\t_currentGeometryProgram = {\r\n\t\t\t\tgeometry: null,\r\n\t\t\t\tprogram: null,\r\n\t\t\t\twireframe: false\r\n\t\t\t},\r\n\r\n\t\t\t_currentCamera = null,\r\n\t\t\t_currentArrayCamera = null,\r\n\r\n\t\t\t_currentViewport = new Vector4(),\r\n\t\t\t_currentScissor = new Vector4(),\r\n\t\t\t_currentScissorTest = null,\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_width = _canvas.width,\r\n\t\t\t_height = _canvas.height,\r\n\r\n\t\t\t_pixelRatio = 1,\r\n\r\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissorTest = false,\r\n\r\n\t\t\t// frustum\r\n\r\n\t\t\t_frustum = new Frustum(),\r\n\r\n\t\t\t// clipping\r\n\r\n\t\t\t_clipping = new WebGLClipping(),\r\n\t\t\t_clippingEnabled = false,\r\n\t\t\t_localClippingEnabled = false,\r\n\r\n\t\t\t// camera matrices cache\r\n\r\n\t\t\t_projScreenMatrix = new Matrix4(),\r\n\r\n\t\t\t_vector3 = new Vector3();\r\n\r\n\t\tfunction getTargetPixelRatio() {\r\n\r\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t\t}\r\n\r\n\t\t// initialize\r\n\r\n\t\tvar _gl;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tvar contextAttributes = {\r\n\t\t\t\talpha: _alpha,\r\n\t\t\t\tdepth: _depth,\r\n\t\t\t\tstencil: _stencil,\r\n\t\t\t\tantialias: _antialias,\r\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\r\n\t\t\t\tpowerPreference: _powerPreference,\r\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\r\n\t\t\t\txrCompatible: true\r\n\t\t\t};\r\n\r\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\r\n\r\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\r\n\r\n\t\t\tif ( _gl === null ) {\r\n\r\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\r\n\t\t\tthrow error;\r\n\r\n\t\t}\r\n\r\n\t\tvar extensions, capabilities, state, info;\r\n\t\tvar properties, textures, attributes, geometries, objects;\r\n\t\tvar programCache, renderLists, renderStates;\r\n\r\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\r\n\r\n\t\tvar utils;\r\n\r\n\t\tfunction initGLContext() {\r\n\r\n\t\t\textensions = new WebGLExtensions( _gl );\r\n\r\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\t\t\tif ( capabilities.isWebGL2 === false ) {\r\n\r\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\r\n\t\t\t\textensions.get( 'OES_texture_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\r\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\r\n\t\t\t\textensions.get( 'OES_element_index_uint' );\r\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\textensions.get( 'OES_texture_float_linear' );\r\n\r\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\r\n\r\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t\tinfo = new WebGLInfo( _gl );\r\n\t\t\tproperties = new WebGLProperties();\r\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\r\n\t\t\tattributes = new WebGLAttributes( _gl );\r\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\r\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\r\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\r\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\r\n\t\t\trenderLists = new WebGLRenderLists();\r\n\t\t\trenderStates = new WebGLRenderStates();\r\n\r\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\r\n\r\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\r\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\r\n\r\n\t\t\tinfo.programs = programCache.programs;\r\n\r\n\t\t\t_this.capabilities = capabilities;\r\n\t\t\t_this.extensions = extensions;\r\n\t\t\t_this.properties = properties;\r\n\t\t\t_this.renderLists = renderLists;\r\n\t\t\t_this.state = state;\r\n\t\t\t_this.info = info;\r\n\r\n\t\t}\r\n\r\n\t\tinitGLContext();\r\n\r\n\t\t// vr\r\n\r\n\t\tvar vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );\r\n\r\n\t\tthis.vr = vr;\r\n\r\n\t\t// Multiview\r\n\r\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\r\n\r\n\t\t// shadow map\r\n\r\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\r\n\r\n\t\tthis.shadowMap = shadowMap;\r\n\r\n\t\t// API\r\n\r\n\t\tthis.getContext = function () {\r\n\r\n\t\t\treturn _gl;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getContextAttributes = function () {\r\n\r\n\t\t\treturn _gl.getContextAttributes();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextLoss = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) { extension.loseContext(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextRestore = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) { extension.restoreContext(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.getPixelRatio = function () {\r\n\r\n\t\t\treturn _pixelRatio;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\t\tif ( value === undefined ) { return; }\r\n\r\n\t\t\t_pixelRatio = value;\r\n\r\n\t\t\tthis.setSize( _width, _height, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSize = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( _width, _height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\r\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\r\n\r\n\t\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDrawingBufferSize = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_pixelRatio = pixelRatio;\r\n\r\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\r\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCurrentViewport = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( _currentViewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getViewport = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _viewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_viewport.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissor = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _scissor );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_scissor.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissorTest = function () {\r\n\r\n\t\t\treturn _scissorTest;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t\t};\r\n\r\n\t\t// Clearing\r\n\r\n\t\tthis.getClearColor = function () {\r\n\r\n\t\t\treturn background.getClearColor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearColor = function () {\r\n\r\n\t\t\tbackground.setClearColor.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getClearAlpha = function () {\r\n\r\n\t\t\treturn background.getClearAlpha();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearAlpha = function () {\r\n\r\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\t\tvar bits = 0;\r\n\r\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\r\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\r\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\r\n\r\n\t\t\t_gl.clear( bits );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearColor = function () {\r\n\r\n\t\t\tthis.clear( true, false, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearDepth = function () {\r\n\r\n\t\t\tthis.clear( false, true, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearStencil = function () {\r\n\r\n\t\t\tthis.clear( false, false, true );\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\trenderLists.dispose();\r\n\t\t\trenderStates.dispose();\r\n\t\t\tproperties.dispose();\r\n\t\t\tobjects.dispose();\r\n\r\n\t\t\tvr.dispose();\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t};\r\n\r\n\t\t// Events\r\n\r\n\t\tfunction onContextLost( event ) {\r\n\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\r\n\r\n\t\t\t_isContextLost = true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onContextRestore( /* event */ ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\r\n\r\n\t\t\t_isContextLost = false;\r\n\r\n\t\t\tinitGLContext();\r\n\r\n\t\t}\r\n\r\n\t\tfunction onMaterialDispose( event ) {\r\n\r\n\t\t\tvar material = event.target;\r\n\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\tdeallocateMaterial( material );\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer deallocation\r\n\r\n\t\tfunction deallocateMaterial( material ) {\r\n\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\tproperties.remove( material );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\t\tmaterial.program = undefined;\r\n\r\n\t\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer rendering\r\n\r\n\t\tfunction renderObjectImmediate( object, program ) {\r\n\r\n\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t_this.renderBufferImmediate( object, program );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderBufferImmediate = function ( object, program ) {\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar buffers = properties.get( object );\r\n\r\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\r\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\r\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasUvs ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\r\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasColors ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\r\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t\t_gl.drawArrays( 4, 0, object.count );\r\n\r\n\t\t\tobject.count = 0;\r\n\r\n\t\t};\r\n\r\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\r\n\r\n\t\t\tstate.setMaterial( material, frontFaceCW );\r\n\r\n\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\tvar updateBuffers = false;\r\n\r\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\r\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\r\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\r\n\t\t\t\t_currentGeometryProgram.program = program.id;\r\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.morphTargetInfluences ) {\r\n\r\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\r\n\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar position = geometry.attributes.position;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( index !== null && index.count === 0 ) { return; }\r\n\t\t\tif ( position === undefined || position.count === 0 ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar rangeFactor = 1;\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\r\n\t\t\t\trangeFactor = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\t\t\tvar renderer = bufferRenderer;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattribute = attributes.get( index );\r\n\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar dataCount = Infinity;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdataCount = index.count;\r\n\r\n\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\tdataCount = position.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\r\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\r\n\r\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\r\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\r\n\r\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\r\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t\tif ( drawCount === 0 ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\t\trenderer.setMode( 1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\t\tcase TrianglesDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 4 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleStripDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 5 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleFanDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 6 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isLine ) {\r\n\r\n\t\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\r\n\r\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\t\tif ( object.isLineSegments ) {\r\n\r\n\t\t\t\t\trenderer.setMode( 1 );\r\n\r\n\t\t\t\t} else if ( object.isLineLoop ) {\r\n\r\n\t\t\t\t\trenderer.setMode( 2 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderer.setMode( 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints ) {\r\n\r\n\t\t\t\trenderer.setMode( 0 );\r\n\r\n\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\trenderer.setMode( 4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\r\n\r\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\r\n\r\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\r\n\r\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\r\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\r\n\r\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// Compile\r\n\r\n\t\tthis.compile = function ( scene, camera ) {\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.material ) {\r\n\r\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) { return; }\r\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\t\t\tvr.setAnimationLoop( callback );\r\n\r\n\t\t\tanimation.start();\r\n\r\n\t\t};\r\n\r\n\t\t// Rendering\r\n\r\n\t\tthis.render = function ( scene, camera ) {\r\n\r\n\t\t\tvar renderTarget, forceClear;\r\n\r\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\r\n\t\t\t\trenderTarget = arguments[ 2 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\r\n\t\t\t\tforceClear = arguments[ 3 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _isContextLost ) { return; }\r\n\r\n\t\t\t// reset caching for this frame\r\n\r\n\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t_currentGeometryProgram.wireframe = false;\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\r\n\r\n\t\t\tif ( vr.enabled && vr.isPresenting() ) {\r\n\r\n\t\t\t\tcamera = vr.getCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\r\n\r\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\r\n\t\t\tcurrentRenderList.init();\r\n\r\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\r\n\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\tcurrentRenderList.sort();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\r\n\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\r\n\r\n\t\t\tif ( renderTarget !== undefined ) {\r\n\r\n\t\t\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\r\n\r\n\t\t\t\tmultiview.attachCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\r\n\r\n\t\t\t// render scene\r\n\r\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\r\n\t\t\tvar transparentObjects = currentRenderList.transparent;\r\n\r\n\t\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\r\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\r\n\r\n\t\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tscene.onAfterRender( _this, scene, camera );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _currentRenderTarget !== null ) {\r\n\r\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\r\n\r\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\r\n\r\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\t\tstate.buffers.depth.setTest( true );\r\n\t\t\tstate.buffers.depth.setMask( true );\r\n\t\t\tstate.buffers.color.setMask( true );\r\n\r\n\t\t\tstate.setPolygonOffset( false );\r\n\r\n\t\t\tif ( vr.enabled ) {\r\n\r\n\t\t\t\tif ( multiview.isAvailable() ) {\r\n\r\n\t\t\t\t\tmultiview.detachCamera( camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvr.submitFrame();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// _gl.finish();\r\n\r\n\t\t\tcurrentRenderList = null;\r\n\t\t\tcurrentRenderState = null;\r\n\r\n\t\t};\r\n\r\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\r\n\r\n\t\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible ) {\r\n\r\n\t\t\t\tif ( object.isGroup ) {\r\n\r\n\t\t\t\t\tgroupOrder = object.renderOrder;\r\n\r\n\t\t\t\t} else if ( object.isLOD ) {\r\n\r\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\r\n\r\n\t\t\t\t} else if ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\t\t\t\t// update skeleton only once in a frame\r\n\r\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\r\n\r\n\t\t\t\t\t\t\tobject.skeleton.update();\r\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\r\n\r\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\t\tvar object = renderItem.object;\r\n\t\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\t\t_currentArrayCamera = camera;\r\n\r\n\t\t\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\r\n\r\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\r\n\r\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\r\n\r\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_currentArrayCamera = null;\r\n\r\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\r\n\r\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\tstate.setMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t\t_currentGeometryProgram.wireframe = false;\r\n\r\n\t\t\t\trenderObjectImmediate( object, program );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tvar lightsStateVersion = lights.state.version;\r\n\r\n\t\t\tvar parameters = programCache.getParameters(\r\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\r\n\r\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( material, parameters );\r\n\r\n\t\t\tvar program = materialProperties.program;\r\n\t\t\tvar programChange = true;\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\t// new material\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\r\n\r\n\t\t\t\t// changed glsl or parameters\r\n\t\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\r\n\r\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t\t// same glsl and uniform list\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// only rebuild uniform list\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( programChange ) {\r\n\r\n\t\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\r\n\r\n\t\t\t\t// Computing cache key again as onBeforeCompile may have changed the shaders\r\n\t\t\t\tprogramCacheKey = programCache.getProgramCacheKey( material, parameters );\r\n\r\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );\r\n\r\n\t\t\t\tmaterialProperties.program = program;\r\n\t\t\t\tmaterial.program = program;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( ! material.isShaderMaterial &&\r\n\t\t\t\t! material.isRawShaderMaterial ||\r\n\t\t\t\tmaterial.clipping === true ) {\r\n\r\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\r\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\r\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialProperties.fog = fog;\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\r\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\r\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\r\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\r\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\r\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\r\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\r\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\r\n\r\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\r\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\r\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\r\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\r\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\r\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\r\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\r\n\t\t\t\tuniformsList =\r\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\r\n\r\n\t\t\tmaterialProperties.uniformsList = uniformsList;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t\ttextures.resetTextureUnits();\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\r\n\t\t\tif ( _clippingEnabled ) {\r\n\r\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\r\n\r\n\t\t\t\t\tvar useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t\t_clipping.setState(\r\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\r\n\t\t\t\t\t\tcamera, materialProperties, useCache );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.version === materialProperties.__version ) {\r\n\r\n\t\t\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\r\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.version !== materialProperties.__version ) {\r\n\r\n\t\t\t\tinitMaterial( material, fog, object );\r\n\t\t\t\tmaterialProperties.__version = material.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar refreshProgram = false;\r\n\t\t\tvar refreshMaterial = false;\r\n\t\t\tvar refreshLights = false;\r\n\r\n\t\t\tvar program = materialProperties.program,\r\n\t\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( state.useProgram( program.program ) ) {\r\n\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\t\trefreshMaterial = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\r\n\r\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _currentCamera !== camera ) {\r\n\r\n\t\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// load material specific uniforms\r\n\t\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.envMap ) {\r\n\r\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\t\tuCamPos.setValue( _gl,\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.skinning ) {\r\n\r\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\t\tif ( material.skinning ) {\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\r\n\r\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\r\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\r\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\r\n\r\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\r\n\r\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\r\n\r\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\r\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\r\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\r\n\r\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\r\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\r\n\r\n\t\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t\t// values\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isPointsMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isShadowMaterial ) {\r\n\r\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// RectAreaLight Texture\r\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\r\n\r\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\r\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\r\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// common matrices\r\n\r\n\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t}\r\n\r\n\t\t// Uniforms (refresh uniforms objects)\r\n\r\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\r\n\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t\tif ( material.color ) {\r\n\r\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissive ) {\r\n\r\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.specularMap ) {\r\n\r\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\tuniforms.envMap.value = material.envMap;\r\n\r\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\r\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\r\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\r\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\r\n\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\r\n\r\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.lightMap ) {\r\n\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.aoMap ) {\r\n\r\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. specular map\r\n\t\t\t// 3. normal map\r\n\t\t\t// 4. bump map\r\n\t\t\t// 5. alpha map\r\n\t\t\t// 6. emissive map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\t// backwards compatibility\r\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLine( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDash( uniforms, material ) {\r\n\r\n\t\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\t\tuniforms.scale.value = material.scale;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\t\tuniforms.scale.value = _height * 0.5;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. alpha map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.rotation.value = material.rotation;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. alpha map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\r\n\r\n\t\t\tuniforms.fogColor.value.copy( fog.color );\r\n\r\n\t\t\tif ( fog.isFog ) {\r\n\r\n\t\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t\t} else if ( fog.isFogExp2 ) {\r\n\r\n\t\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\r\n\r\n\t\t\tuniforms.specular.value.copy( material.specular );\r\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsToon( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsPhong( uniforms, material );\r\n\r\n\t\t\tif ( material.gradientMap ) {\r\n\r\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\r\n\r\n\t\t\tuniforms.roughness.value = material.roughness;\r\n\t\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\r\n\r\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\r\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\r\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\r\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\r\n\r\n\t\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.transparency.value = material.transparency;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\r\n\r\n\t\t\tif ( material.matcap ) {\r\n\r\n\t\t\t\tuniforms.matcap.value = material.matcap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\r\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\r\n\t\t\tuniforms.farDistance.value = material.farDistance;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\r\n\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\t\t\tuniforms.lightProbe.needsUpdate = value;\r\n\r\n\t\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction materialNeedsLights( material ) {\r\n\r\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshPhongMaterial ||\r\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\r\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\t\tthis.setFramebuffer = function ( value ) {\r\n\r\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\r\n\r\n\t\t\t_framebuffer = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveCubeFace = function () {\r\n\r\n\t\t\treturn _currentActiveCubeFace;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveMipmapLevel = function () {\r\n\r\n\t\t\treturn _currentActiveMipmapLevel;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getRenderTarget = function () {\r\n\r\n\t\t\treturn _currentRenderTarget;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\r\n\r\n\t\t\t_currentRenderTarget = renderTarget;\r\n\t\t\t_currentActiveCubeFace = activeCubeFace;\r\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\r\n\r\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = _framebuffer;\r\n\t\t\tvar isCube = false;\r\n\r\n\t\t\tif ( renderTarget ) {\r\n\r\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\r\n\t\t\t\t\tisCube = true;\r\n\r\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\r\n\r\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\t\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport );\r\n\t\t\tstate.scissor( _currentScissor );\r\n\t\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\r\n\r\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {\r\n\r\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( framebuffer ) {\r\n\r\n\t\t\t\tvar restore = false;\r\n\r\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\r\n\t\t\t\t\trestore = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar texture = renderTarget.texture;\r\n\t\t\t\t\tvar textureFormat = texture.format;\r\n\t\t\t\t\tvar textureType = texture.type;\r\n\r\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\r\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\r\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\r\n\r\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} finally {\r\n\r\n\t\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\r\n\r\n\t\t\tif ( level === undefined ) { level = 0; }\r\n\r\n\t\t\tvar levelScale = Math.pow( 2, - level );\r\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\r\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\r\n\t\t\tvar glFormat = utils.convert( texture.format );\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\r\n\r\n\t\t\tvar width = srcTexture.image.width;\r\n\t\t\tvar height = srcTexture.image.height;\r\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\r\n\t\t\tvar glType = utils.convert( dstTexture.type );\r\n\r\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\r\n\r\n\t\t\tif ( srcTexture.isDataTexture ) {\r\n\r\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.initTexture = function ( texture ) {\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction FogExp2( color, density ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n\t}\r\n\r\n\tObject.assign( FogExp2.prototype, {\r\n\r\n\t\tisFogExp2: true,\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new FogExp2( this.color, this.density );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( /* meta */ ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'FogExp2',\r\n\t\t\t\tcolor: this.color.getHex(),\r\n\t\t\t\tdensity: this.density\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Fog( color, near, far ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n\t}\r\n\r\n\tObject.assign( Fog.prototype, {\r\n\r\n\t\tisFog: true,\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Fog( this.color, this.near, this.far );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( /* meta */ ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'Fog',\r\n\t\t\t\tcolor: this.color.getHex(),\r\n\t\t\t\tnear: this.near,\r\n\t\t\t\tfar: this.far\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBuffer( array, stride ) {\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\r\n\t\tisInterleavedBuffer: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetUsage: function ( value ) {\r\n\r\n\t\t\tthis.usage = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.stride = source.stride;\r\n\t\t\tthis.usage = source.usage;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.stride;\r\n\t\t\tindex2 *= attribute.stride;\r\n\r\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\r\n\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tcount: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tarray: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tisInterleavedBufferAttribute: true,\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *  rotation: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction SpriteMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'SpriteMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\r\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\r\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\r\n\r\n\tSpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar _geometry;\r\n\r\n\tvar _intersectPoint = new Vector3();\r\n\tvar _worldScale = new Vector3();\r\n\tvar _mvPosition = new Vector3();\r\n\r\n\tvar _alignedPosition = new Vector2();\r\n\tvar _rotatedPosition = new Vector2();\r\n\tvar _viewWorldMatrix = new Matrix4();\r\n\r\n\tvar _vA$1 = new Vector3();\r\n\tvar _vB$1 = new Vector3();\r\n\tvar _vC$1 = new Vector3();\r\n\r\n\tvar _uvA$1 = new Vector2();\r\n\tvar _uvB$1 = new Vector2();\r\n\tvar _uvC$1 = new Vector2();\r\n\r\n\tfunction Sprite( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( _geometry === undefined ) {\r\n\r\n\t\t\t_geometry = new BufferGeometry();\r\n\r\n\t\t\tvar float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = _geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Sprite,\r\n\r\n\t\tisSprite: true,\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tif ( raycaster.camera === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\r\n\r\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\r\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\r\n\r\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\r\n\r\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rotation = this.material.rotation;\r\n\t\t\tvar sin, cos;\r\n\t\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\t\tcos = Math.cos( rotation );\r\n\t\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\r\n\t\t\t_uvA$1.set( 0, 0 );\r\n\t\t\t_uvB$1.set( 1, 0 );\r\n\t\t\t_uvC$1.set( 1, 1 );\r\n\r\n\t\t\t// check first triangle\r\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\r\n\r\n\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t// check second triangle\r\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\t\t_uvB$1.set( 0, 1 );\r\n\r\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\r\n\t\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: _intersectPoint.clone(),\r\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.material ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t} );\r\n\r\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t\t// compute position in camera space\r\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t\t// to check if rotation is not zero\r\n\t\tif ( sin !== undefined ) {\r\n\r\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\r\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_rotatedPosition.copy( _alignedPosition );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvertexPosition.copy( mvPosition );\r\n\t\tvertexPosition.x += _rotatedPosition.x;\r\n\t\tvertexPosition.y += _rotatedPosition.y;\r\n\r\n\t\t// transform to world space\r\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _v1$4 = new Vector3();\r\n\tvar _v2$2 = new Vector3();\r\n\r\n\tfunction LOD() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'LOD';\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t}\r\n\r\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: LOD,\r\n\r\n\t\tisLOD: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\t\tvar levels = source.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddLevel: function ( object, distance ) {\r\n\r\n\t\t\tif ( distance === undefined ) { distance = 0; }\r\n\r\n\t\t\tdistance = Math.abs( distance );\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectForDistance: function ( distance ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn levels[ i - 1 ].object;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\r\n\r\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: function ( camera ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\r\n\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\r\n\r\n\t\t\tdata.object.levels = [];\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tdata.object.levels.push( {\r\n\t\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\t\tdistance: level.distance\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction SkinnedMesh( geometry, material ) {\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'SkinnedMesh';\r\n\r\n\t\tthis.bindMode = 'attached';\r\n\t\tthis.bindMatrix = new Matrix4();\r\n\t\tthis.bindMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: SkinnedMesh,\r\n\r\n\t\tisSkinnedMesh: true,\r\n\r\n\t\tbind: function ( skeleton, bindMatrix ) {\r\n\r\n\t\t\tthis.skeleton = skeleton;\r\n\r\n\t\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tthis.skeleton.pose();\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeSkinWeights: function () {\r\n\r\n\t\t\tvar vector = new Vector4();\r\n\r\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvector.x = skinWeight.getX( i );\r\n\t\t\t\tvector.y = skinWeight.getY( i );\r\n\t\t\t\tvector.z = skinWeight.getZ( i );\r\n\t\t\t\tvector.w = skinWeight.getW( i );\r\n\r\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tvector.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.bindMode === 'attached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t\t} else if ( this.bindMode === 'detached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author michael guerrero / http://realitymeltdown.com\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tvar _offsetMatrix = new Matrix4();\r\n\tvar _identityMatrix = new Matrix4();\r\n\r\n\tfunction Skeleton( bones, boneInverses ) {\r\n\r\n\t\t// copy the bone array\r\n\r\n\t\tbones = bones || [];\r\n\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\r\n\r\n\t\tthis.frame = - 1;\r\n\r\n\t\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\t\tif ( boneInverses === undefined ) {\r\n\r\n\t\t\tthis.calculateInverses();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\r\n\r\n\t\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Skeleton.prototype, {\r\n\r\n\t\tcalculateInverses: function () {\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar inverse = new Matrix4();\r\n\r\n\t\t\t\tif ( this.bones[ i ] ) {\r\n\r\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tvar bone, i, il;\r\n\r\n\t\t\t// recover the bind-time world matrices\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar bones = this.bones;\r\n\t\t\tvar boneInverses = this.boneInverses;\r\n\t\t\tvar boneMatrices = this.boneMatrices;\r\n\t\t\tvar boneTexture = this.boneTexture;\r\n\r\n\t\t\t// flatten bone matrices to array\r\n\r\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\r\n\r\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\r\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boneTexture !== undefined ) {\r\n\r\n\t\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\r\n\r\n\t\t},\r\n\r\n\t\tgetBoneByName: function ( name ) {\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar bone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone.name === name ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction Bone() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Bone';\r\n\r\n\t}\r\n\r\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Bone,\r\n\r\n\t\tisBone: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _instanceLocalMatrix = new Matrix4();\r\n\tvar _instanceWorldMatrix = new Matrix4();\r\n\r\n\tvar _instanceIntersects = [];\r\n\r\n\tvar _mesh = new Mesh();\r\n\r\n\tfunction InstancedMesh( geometry, material, count ) {\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\r\n\r\n\t\tthis.count = count;\r\n\r\n\t}\r\n\r\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: InstancedMesh,\r\n\r\n\t\tisInstancedMesh: true,\r\n\r\n\t\tgetMatrixAt: function ( index, matrix ) {\r\n\r\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar raycastTimes = this.count;\r\n\r\n\t\t\t_mesh.geometry = this.geometry;\r\n\t\t\t_mesh.material = this.material;\r\n\r\n\t\t\tif ( _mesh.material === undefined ) { return; }\r\n\r\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\r\n\r\n\t\t\t\t// calculate the world matrix for each instance\r\n\r\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\r\n\r\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\r\n\r\n\t\t\t\t// the mesh represents this single instance\r\n\r\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\r\n\r\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\r\n\r\n\t\t\t\t// process the result of raycast\r\n\r\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\r\n\r\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\r\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\r\n\r\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\r\n\r\n\t\t\t\t\t_instanceIntersects.length = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsetMatrixAt: function ( index, matrix ) {\r\n\r\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *  linecap: \"round\",\r\n\t *  linejoin: \"round\"\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\r\n\r\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\r\n\r\n\tLineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _start = new Vector3();\r\n\tvar _end = new Vector3();\r\n\tvar _inverseMatrix$1 = new Matrix4();\r\n\tvar _ray$1 = new Ray();\r\n\tvar _sphere$2 = new Sphere();\r\n\r\n\tfunction Line( geometry, material, mode ) {\r\n\r\n\t\tif ( mode === 1 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Line';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t}\r\n\r\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Line,\r\n\r\n\t\tisLine: true,\r\n\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\tvar lineDistances = [ 0 ];\r\n\r\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\r\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\tlineDistances[ 0 ] = 0;\r\n\r\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\r\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\r\n\t\t\t_sphere$2.radius += precision;\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\r\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\r\n\r\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\r\n\r\n\t\t\tvar vStart = new Vector3();\r\n\t\t\tvar vEnd = new Vector3();\r\n\t\t\tvar interSegment = new Vector3();\r\n\t\t\tvar interRay = new Vector3();\r\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _start$1 = new Vector3();\r\n\tvar _end$1 = new Vector3();\r\n\r\n\tfunction LineSegments( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineSegments,\r\n\r\n\t\tisLineSegments: true,\r\n\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\tvar lineDistances = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\r\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\r\n\r\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mgreter / http://github.com/mgreter\r\n\t */\r\n\r\n\tfunction LineLoop( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineLoop';\r\n\r\n\t}\r\n\r\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineLoop,\r\n\r\n\t\tisLineLoop: true,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  size: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t *\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction PointsMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'PointsMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tPointsMaterial.prototype = Object.create( Material.prototype );\r\n\tPointsMaterial.prototype.constructor = PointsMaterial;\r\n\r\n\tPointsMaterial.prototype.isPointsMaterial = true;\r\n\r\n\tPointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar _inverseMatrix$2 = new Matrix4();\r\n\tvar _ray$2 = new Ray();\r\n\tvar _sphere$3 = new Sphere();\r\n\tvar _position$1 = new Vector3();\r\n\r\n\tfunction Points( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Points';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Points,\r\n\r\n\t\tisPoints: true,\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\r\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\r\n\t\t\t_sphere$3.radius += threshold;\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\r\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\r\n\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\r\n\r\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\r\n\r\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\tvar intersectPoint = new Vector3();\r\n\r\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\r\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\tpoint: intersectPoint,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: object\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBFormat;\r\n\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\r\n\r\n\t\tconstructor: VideoTexture,\r\n\r\n\t\tisVideoTexture: true,\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar video = this.image;\r\n\r\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\r\n\tCompressedTexture.prototype.constructor = CompressedTexture;\r\n\r\n\tCompressedTexture.prototype.isCompressedTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\r\n\tCanvasTexture.prototype.constructor = CanvasTexture;\r\n\tCanvasTexture.prototype.isCanvasTexture = true;\r\n\r\n\t/**\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t * @author atix / arthursilber.de\r\n\t */\r\n\r\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\r\n\r\n\t\tformat = format !== undefined ? format : DepthFormat;\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\r\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps\t= false;\r\n\r\n\t}\r\n\r\n\tDepthTexture.prototype = Object.create( Texture.prototype );\r\n\tDepthTexture.prototype.constructor = DepthTexture;\r\n\tDepthTexture.prototype.isDepthTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WireframeGeometry( geometry ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'WireframeGeometry';\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j, l, o, ol;\r\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\t\tvar vertex;\r\n\r\n\t\t// different logic for Geometry and BufferGeometry\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t// create a data structure that contains all edges without duplicates\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate vertices\r\n\r\n\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar position, indices, groups;\r\n\t\t\tvar group, start, count;\r\n\t\t\tvar index1, index2;\r\n\r\n\t\t\tvertex = new Vector3();\r\n\r\n\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\t\t\t\tindices = geometry.index;\r\n\t\t\t\tgroups = geometry.groups;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a data structure that contains all eges without duplicates\r\n\r\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\t\tgroup = groups[ o ];\r\n\r\n\t\t\t\t\tstart = group.start;\r\n\t\t\t\t\tcount = group.count;\r\n\r\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\r\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\r\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// generate vertices\r\n\r\n\t\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\r\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\r\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\r\n\r\n\t\t\t\t\t\tindex1 = 3 * i + j;\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Parametric Surfaces Geometry\r\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n\t */\r\n\r\n\t// ParametricGeometry\r\n\r\n\tfunction ParametricGeometry( func, slices, stacks ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\r\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\r\n\r\n\t// ParametricBufferGeometry\r\n\r\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\tvar EPS = 0.00001;\r\n\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\r\n\t\tvar pu = new Vector3(), pv = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tif ( func.length < 3 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tvar sliceCount = slices + 1;\r\n\r\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\t\tvar v = i / stacks;\r\n\r\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\t\tvar u = j / slices;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tfunc( u, v, p0 );\r\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\t// approximate tangent vectors via finite differences\r\n\r\n\t\t\t\tif ( u - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u - EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u + EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( v - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u, v - EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u, v + EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// cross product of tangent vectors returns surface normal\r\n\r\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\t\tvar a = i * sliceCount + j;\r\n\t\t\t\tvar b = i * sliceCount + j + 1;\r\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\t\t// faces one and two\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\r\n\r\n\t/**\r\n\t * @author clockworkgeek / https://github.com/clockworkgeek\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PolyhedronGeometry\r\n\r\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\r\n\r\n\t// PolyhedronBufferGeometry\r\n\r\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tdetail = detail || 0;\r\n\r\n\t\t// default buffer data\r\n\r\n\t\tvar vertexBuffer = [];\r\n\t\tvar uvBuffer = [];\r\n\r\n\t\t// the subdivision creates the vertex buffer data\r\n\r\n\t\tsubdivide( detail );\r\n\r\n\t\t// all vertices should lie on a conceptual sphere with a given radius\r\n\r\n\t\tapplyRadius( radius );\r\n\r\n\t\t// finally, create the uv data\r\n\r\n\t\tgenerateUVs();\r\n\r\n\t\t// build non-indexed geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\r\n\r\n\t\tif ( detail === 0 ) {\r\n\r\n\t\t\tthis.computeVertexNormals(); // flat normals\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.normalizeNormals(); // smooth normals\r\n\r\n\t\t}\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction subdivide( detail ) {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\r\n\r\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t// get the vertices of the face\r\n\r\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\r\n\r\n\t\t\t\t// perform subdivision\r\n\r\n\t\t\t\tsubdivideFace( a, b, c, detail );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction subdivideFace( a, b, c, detail ) {\r\n\r\n\t\t\tvar cols = Math.pow( 2, detail );\r\n\r\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\r\n\r\n\t\t\tvar v = [];\r\n\r\n\t\t\tvar i, j;\r\n\r\n\t\t\t// construct all of the vertices for this subdivision\r\n\r\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\r\n\r\n\t\t\t\tv[ i ] = [];\r\n\r\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\r\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\r\n\r\n\t\t\t\tvar rows = cols - i;\r\n\r\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// construct all of the faces\r\n\r\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction applyRadius( radius ) {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\r\n\r\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\r\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\r\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\r\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\r\n\t\t\t\tuvBuffer.push( u, 1 - v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcorrectUVs();\r\n\r\n\t\t\tcorrectSeam();\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctSeam() {\r\n\r\n\t\t\t// handle case when face straddles the seam, see #3269\r\n\r\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\r\n\r\n\t\t\t\t// uv data of a single face\r\n\r\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\r\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\r\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\r\n\r\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\r\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\r\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushVertex( vertex ) {\r\n\r\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getVertexByIndex( index, vertex ) {\r\n\r\n\t\t\tvar stride = index * 3;\r\n\r\n\t\t\tvertex.x = vertices[ stride + 0 ];\r\n\t\t\tvertex.y = vertices[ stride + 1 ];\r\n\t\t\tvertex.z = vertices[ stride + 2 ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUVs() {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\tvar centroid = new Vector3();\r\n\r\n\t\t\tvar uvA = new Vector2();\r\n\t\t\tvar uvB = new Vector2();\r\n\t\t\tvar uvC = new Vector2();\r\n\r\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\r\n\r\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\r\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\r\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\r\n\r\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\r\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\r\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\r\n\r\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\r\n\r\n\t\t\t\tvar azi = azimuth( centroid );\r\n\r\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\r\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\r\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\r\n\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\t\tfunction azimuth( vector ) {\r\n\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Angle above the XZ plane.\r\n\r\n\t\tfunction inclination( vector ) {\r\n\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TetrahedronGeometry\r\n\r\n\tfunction TetrahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\r\n\r\n\t// TetrahedronBufferGeometry\r\n\r\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'TetrahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// OctahedronGeometry\r\n\r\n\tfunction OctahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\r\n\r\n\t// OctahedronBufferGeometry\r\n\r\n\tfunction OctahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\r\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\r\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\r\n\t\t\t1, 3, 4,\t1, 4, 2\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'OctahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// IcosahedronGeometry\r\n\r\n\tfunction IcosahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\r\n\r\n\t// IcosahedronBufferGeometry\r\n\r\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\r\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\r\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\r\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\r\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\r\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'IcosahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Abe Pazos / https://hamoid.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// DodecahedronGeometry\r\n\r\n\tfunction DodecahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\r\n\r\n\t// DodecahedronBufferGeometry\r\n\r\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tvar r = 1 / t;\r\n\r\n\t\tvar vertices = [\r\n\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\r\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\r\n\t\t\t1, - 1, - 1, 1, - 1, 1,\r\n\t\t\t1, 1, - 1, 1, 1, 1,\r\n\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t 0, - r, - t, 0, - r, t,\r\n\t\t\t 0, r, - t, 0, r, t,\r\n\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t, 0, - r, t, 0,\r\n\t\t\t r, - t, 0, r, t, 0,\r\n\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t, 0, - r, t, 0, - r,\r\n\t\t\t- t, 0, r, t, 0, r\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\r\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\r\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\r\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\r\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\r\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\r\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\r\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\r\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\r\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\r\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\r\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'DodecahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\r\n\t * @author WestLangley / https://github.com/WestLangley\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author miningold / https://github.com/miningold\r\n\t * @author jonobr1 / https://github.com/jonobr1\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t */\r\n\r\n\t// TubeGeometry\r\n\r\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\r\n\r\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = bufferGeometry.tangents;\r\n\t\tthis.normals = bufferGeometry.normals;\r\n\t\tthis.binormals = bufferGeometry.binormals;\r\n\r\n\t\t// create geometry\r\n\r\n\t\tthis.fromBufferGeometry( bufferGeometry );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTubeGeometry.prototype.constructor = TubeGeometry;\r\n\r\n\t// TubeBufferGeometry\r\n\r\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\ttubularSegments = tubularSegments || 64;\r\n\t\tradius = radius || 1;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\tclosed = closed || false;\r\n\r\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = frames.tangents;\r\n\t\tthis.normals = frames.normals;\r\n\t\tthis.binormals = frames.binormals;\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar P = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\t\tvar indices = [];\r\n\r\n\t\t// create buffer data\r\n\r\n\t\tgenerateBufferData();\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction generateBufferData() {\r\n\r\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tgenerateSegment( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\r\n\t\t\t// at the regular position on the given path\r\n\t\t\t//\r\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\r\n\r\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\r\n\r\n\t\t\t// uvs are generated in a separate function.\r\n\t\t\t// this makes it easy compute correct values for closed geometries\r\n\r\n\t\t\tgenerateUVs();\r\n\r\n\t\t\t// finally create faces\r\n\r\n\t\t\tgenerateIndices();\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateSegment( i ) {\r\n\r\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\r\n\r\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\r\n\r\n\t\t\t// retrieve corresponding normal and binormal\r\n\r\n\t\t\tvar N = frames.normals[ i ];\r\n\t\t\tvar B = frames.binormals[ i ];\r\n\r\n\t\t\t// generate normals and vertices for the current segment\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\tvar sin = Math.sin( v );\r\n\t\t\t\tvar cos = - Math.cos( v );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\r\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\r\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\r\n\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = P.x + radius * normal.x;\r\n\t\t\t\tvertex.y = P.y + radius * normal.y;\r\n\t\t\t\tvertex.z = P.z + radius * normal.z;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateIndices() {\r\n\r\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\t\tuv.x = i / tubularSegments;\r\n\t\t\t\t\tuv.y = j / radialSegments;\r\n\r\n\t\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\r\n\r\n\tTubeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tdata.path = this.parameters.path.toJSON();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * based on http://www.blackpawn.com/texts/pqtorus/\r\n\t */\r\n\r\n\t// TorusKnotGeometry\r\n\r\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\r\n\r\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\r\n\r\n\t// TorusKnotBufferGeometry\r\n\r\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\tp = p || 2;\r\n\t\tq = q || 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar P1 = new Vector3();\r\n\t\tvar P2 = new Vector3();\r\n\r\n\t\tvar B = new Vector3();\r\n\t\tvar T = new Vector3();\r\n\t\tvar N = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t\t// calculate orthonormal basis\r\n\r\n\t\t\tT.subVectors( P2, P1 );\r\n\t\t\tN.addVectors( P2, P1 );\r\n\t\t\tB.crossVectors( T, N );\r\n\t\t\tN.crossVectors( B, T );\r\n\r\n\t\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\t\tB.normalize();\r\n\t\t\tN.normalize();\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t\t// now calculate the final vertex position.\r\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\r\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// this function calculates the current position on the torus curve\r\n\r\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\t\tvar cu = Math.cos( u );\r\n\t\t\tvar su = Math.sin( u );\r\n\t\t\tvar quOverP = q / p * u;\r\n\t\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TorusGeometry\r\n\r\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusGeometry.prototype.constructor = TorusGeometry;\r\n\r\n\t// TorusBufferGeometry\r\n\r\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\t\tarc = arc || Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar center = new Vector3();\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\r\n\t */\r\n\r\n\tvar Earcut = {\r\n\r\n\t\ttriangulate: function ( data, holeIndices, dim ) {\r\n\r\n\t\t\tdim = dim || 2;\r\n\r\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\r\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\r\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\r\n\t\t\t\ttriangles = [];\r\n\r\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\r\n\r\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\r\n\r\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\t\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\t\tx = data[ i ];\r\n\t\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\treturn triangles;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// create a circular doubly linked list from polygon points in the specified winding order\r\n\tfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\t\tvar i, last;\r\n\r\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n\t\t}\r\n\r\n\t\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\t\tremoveNode( last );\r\n\t\t\tlast = last.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn last;\r\n\r\n\t}\r\n\r\n\t// eliminate colinear or duplicate points\r\n\tfunction filterPoints( start, end ) {\r\n\r\n\t\tif ( ! start ) { return start; }\r\n\t\tif ( ! end ) { end = start; }\r\n\r\n\t\tvar p = start,\r\n\t\t\tagain;\r\n\t\tdo {\r\n\r\n\t\t\tagain = false;\r\n\r\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tp = end = p.prev;\r\n\t\t\t\tif ( p === p.next ) { break; }\r\n\t\t\t\tagain = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = p.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t} while ( again || p !== end );\r\n\r\n\t\treturn end;\r\n\r\n\t}\r\n\r\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\t\tif ( ! ear ) { return; }\r\n\r\n\t\t// interlink polygon nodes in z-order\r\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\r\n\r\n\t\tvar stop = ear,\r\n\t\t\tprev, next;\r\n\r\n\t\t// iterate through ears, slicing them one by one\r\n\t\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\t\tprev = ear.prev;\r\n\t\t\tnext = ear.next;\r\n\r\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t\t// cut off the triangle\r\n\t\t\t\ttriangles.push( prev.i / dim );\r\n\t\t\t\ttriangles.push( ear.i / dim );\r\n\t\t\t\ttriangles.push( next.i / dim );\r\n\r\n\t\t\t\tremoveNode( ear );\r\n\r\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\r\n\t\t\t\tear = next.next;\r\n\t\t\t\tstop = next.next;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tear = next;\r\n\r\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\t\t\tif ( ear === stop ) {\r\n\r\n\t\t\t\t// try filtering points and slicing again\r\n\t\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\r\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// check whether a polygon node forms a valid ear with adjacent nodes\r\n\tfunction isEar( ear ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n\t\t// now make sure we don't have other points inside the potential ear\r\n\t\tvar p = ear.next.next;\r\n\r\n\t\twhile ( p !== ear.prev ) {\r\n\r\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n\t\t// triangle bbox; min & max are calculated like this for speed\r\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n\t\t// z-order range for the current triangle bbox;\r\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n\t\tvar p = ear.prevZ,\r\n\t\t\tn = ear.nextZ;\r\n\r\n\t\t// look for points inside the triangle in both directions\r\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\r\n\t\t\tn = n.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\t// look for remaining points in decreasing z-order\r\n\t\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t}\r\n\r\n\t\t// look for remaining points in increasing z-order\r\n\t\twhile ( n && n.z <= maxZ ) {\r\n\r\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\r\n\t\t\tn = n.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t// go through all polygon nodes and cure small local self-intersections\r\n\tfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\t\tvar p = start;\r\n\t\tdo {\r\n\r\n\t\t\tvar a = p.prev,\r\n\t\t\t\tb = p.next.next;\r\n\r\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\t\ttriangles.push( a.i / dim );\r\n\t\t\t\ttriangles.push( p.i / dim );\r\n\t\t\t\ttriangles.push( b.i / dim );\r\n\r\n\t\t\t\t// remove two nodes involved\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tremoveNode( p.next );\r\n\r\n\t\t\t\tp = start = b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\t// try splitting polygon into two and triangulate them independently\r\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t\t// look for a valid diagonal that divides the polygon into two\r\n\t\tvar a = start;\r\n\t\tdo {\r\n\r\n\t\t\tvar b = a.next.next;\r\n\t\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t\t// split the polygon in two by the diagonal\r\n\t\t\t\t\tvar c = splitPolygon( a, b );\r\n\r\n\t\t\t\t\t// filter colinear points around the cuts\r\n\t\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t\t// run earcut on each half\r\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tb = b.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ta = a.next;\r\n\r\n\t\t} while ( a !== start );\r\n\r\n\t}\r\n\r\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\r\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\t\tvar queue = [],\r\n\t\t\ti, len, start, end, list;\r\n\r\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\t\tstart = holeIndices[ i ] * dim;\r\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\t\tif ( list === list.next ) { list.steiner = true; }\r\n\t\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t\t}\r\n\r\n\t\tqueue.sort( compareX );\r\n\r\n\t\t// process holes from left to right\r\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\t\teliminateHole( queue[ i ], outerNode );\r\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\r\n\r\n\t\t}\r\n\r\n\t\treturn outerNode;\r\n\r\n\t}\r\n\r\n\tfunction compareX( a, b ) {\r\n\r\n\t\treturn a.x - b.x;\r\n\r\n\t}\r\n\r\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\r\n\tfunction eliminateHole( hole, outerNode ) {\r\n\r\n\t\touterNode = findHoleBridge( hole, outerNode );\r\n\t\tif ( outerNode ) {\r\n\r\n\t\t\tvar b = splitPolygon( outerNode, hole );\r\n\t\t\tfilterPoints( b, b.next );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\tfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\t\tvar p = outerNode,\r\n\t\t\thx = hole.x,\r\n\t\t\thy = hole.y,\r\n\t\t\tqx = - Infinity,\r\n\t\t\tm;\r\n\r\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t\t// segment's endpoint with lesser x will be potential connection point\r\n\t\tdo {\r\n\r\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\t\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\t\tqx = x;\r\n\t\t\t\t\tif ( x === hx ) {\r\n\r\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\r\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== outerNode );\r\n\r\n\t\tif ( ! m ) { return null; }\r\n\r\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\r\n\r\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t\t// if there are no points found, we have a valid connection;\r\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\t\tvar stop = m,\r\n\t\t\tmx = m.x,\r\n\t\t\tmy = m.y,\r\n\t\t\ttanMin = Infinity,\r\n\t\t\ttan;\r\n\r\n\t\tp = m.next;\r\n\r\n\t\twhile ( p !== stop ) {\r\n\r\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\r\n\r\n\t\t\t\t\tm = p;\r\n\t\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn m;\r\n\r\n\t}\r\n\r\n\t// interlink polygon nodes in z-order\r\n\tfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\t\tvar p = start;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\r\n\t\t\tp.prevZ = p.prev;\r\n\t\t\tp.nextZ = p.next;\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\tp.prevZ.nextZ = null;\r\n\t\tp.prevZ = null;\r\n\r\n\t\tsortLinked( p );\r\n\r\n\t}\r\n\r\n\t// Simon Tatham's linked list merge sort algorithm\r\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\tfunction sortLinked( list ) {\r\n\r\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\r\n\t\t\tinSize = 1;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tp = list;\r\n\t\t\tlist = null;\r\n\t\t\ttail = null;\r\n\t\t\tnumMerges = 0;\r\n\r\n\t\t\twhile ( p ) {\r\n\r\n\t\t\t\tnumMerges ++;\r\n\t\t\t\tq = p;\r\n\t\t\t\tpSize = 0;\r\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\t\tpSize ++;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tif ( ! q ) { break; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tqSize = inSize;\r\n\r\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\t\te = p;\r\n\t\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\te = q;\r\n\t\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\r\n\t\t\t\t\telse { list = e; }\r\n\r\n\t\t\t\t\te.prevZ = tail;\r\n\t\t\t\t\ttail = e;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttail.nextZ = null;\r\n\t\t\tinSize *= 2;\r\n\r\n\t\t} while ( numMerges > 1 );\r\n\r\n\t\treturn list;\r\n\r\n\t}\r\n\r\n\t// z-order of a point given coords and inverse of the longer side of data bbox\r\n\tfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t\t// coords are transformed into non-negative 15-bit integer range\r\n\t\tx = 32767 * ( x - minX ) * invSize;\r\n\t\ty = 32767 * ( y - minY ) * invSize;\r\n\r\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\t\treturn x | ( y << 1 );\r\n\r\n\t}\r\n\r\n\t// find the leftmost node of a polygon ring\r\n\tfunction getLeftmost( start ) {\r\n\r\n\t\tvar p = start,\r\n\t\t\tleftmost = start;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn leftmost;\r\n\r\n\t}\r\n\r\n\t// check if a point lies within a convex triangle\r\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n\t}\r\n\r\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\tfunction isValidDiagonal( a, b ) {\r\n\r\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\r\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\r\n\r\n\t}\r\n\r\n\t// signed area of a triangle\r\n\tfunction area( p, q, r ) {\r\n\r\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n\t}\r\n\r\n\t// check if two points are equal\r\n\tfunction equals( p1, p2 ) {\r\n\r\n\t\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n\t}\r\n\r\n\t// check if two segments intersect\r\n\tfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\r\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\r\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\r\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal intersects any polygon segments\r\n\tfunction intersectsPolygon( a, b ) {\r\n\r\n\t\tvar p = a;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal is locally inside the polygon\r\n\tfunction locallyInside( a, b ) {\r\n\r\n\t\treturn area( a.prev, a, a.next ) < 0 ?\r\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n\t}\r\n\r\n\t// check if the middle point of a polygon diagonal is inside the polygon\r\n\tfunction middleInside( a, b ) {\r\n\r\n\t\tvar p = a,\r\n\t\t\tinside = false,\r\n\t\t\tpx = ( a.x + b.x ) / 2,\r\n\t\t\tpy = ( a.y + b.y ) / 2;\r\n\t\tdo {\r\n\r\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\r\n\t\t\t\t{ inside = ! inside; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn inside;\r\n\r\n\t}\r\n\r\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\tfunction splitPolygon( a, b ) {\r\n\r\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\r\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\t\tan = a.next,\r\n\t\t\tbp = b.prev;\r\n\r\n\t\ta.next = b;\r\n\t\tb.prev = a;\r\n\r\n\t\ta2.next = an;\r\n\t\tan.prev = a2;\r\n\r\n\t\tb2.next = a2;\r\n\t\ta2.prev = b2;\r\n\r\n\t\tbp.next = b2;\r\n\t\tb2.prev = bp;\r\n\r\n\t\treturn b2;\r\n\r\n\t}\r\n\r\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\tfunction insertNode( i, x, y, last ) {\r\n\r\n\t\tvar p = new Node( i, x, y );\r\n\r\n\t\tif ( ! last ) {\r\n\r\n\t\t\tp.prev = p;\r\n\t\t\tp.next = p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp.next = last.next;\r\n\t\t\tp.prev = last;\r\n\t\t\tlast.next.prev = p;\r\n\t\t\tlast.next = p;\r\n\r\n\t\t}\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction removeNode( p ) {\r\n\r\n\t\tp.next.prev = p.prev;\r\n\t\tp.prev.next = p.next;\r\n\r\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\r\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\r\n\r\n\t}\r\n\r\n\tfunction Node( i, x, y ) {\r\n\r\n\t\t// vertex index in coordinates array\r\n\t\tthis.i = i;\r\n\r\n\t\t// vertex coordinates\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\t// previous and next vertex nodes in a polygon ring\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\r\n\t\t// z-order curve value\r\n\t\tthis.z = null;\r\n\r\n\t\t// previous and next nodes in z-order\r\n\t\tthis.prevZ = null;\r\n\t\tthis.nextZ = null;\r\n\r\n\t\t// indicates whether this is a steiner point\r\n\t\tthis.steiner = false;\r\n\r\n\t}\r\n\r\n\tfunction signedArea( data, start, end, dim ) {\r\n\r\n\t\tvar sum = 0;\r\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\t\tj = i;\r\n\r\n\t\t}\r\n\r\n\t\treturn sum;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tvar ShapeUtils = {\r\n\r\n\t\t// calculate area of the contour polygon\r\n\r\n\t\tarea: function ( contour ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\t\t\tvar a = 0.0;\r\n\r\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tisClockWise: function ( pts ) {\r\n\r\n\t\t\treturn ShapeUtils.area( pts ) < 0;\r\n\r\n\t\t},\r\n\r\n\t\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\t\t\tvar holeIndices = []; // array of hole indices\r\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n\t\t\tremoveDupEndPts( contour );\r\n\t\t\taddContour( vertices, contour );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar holeIndex = contour.length;\r\n\r\n\t\t\tholes.forEach( removeDupEndPts );\r\n\r\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\r\n\r\n\t\t\t\tholeIndices.push( holeIndex );\r\n\t\t\t\tholeIndex += holes[ i ].length;\r\n\t\t\t\taddContour( vertices, holes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\r\n\r\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn faces;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeDupEndPts( points ) {\r\n\r\n\t\tvar l = points.length;\r\n\r\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\tpoints.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction addContour( vertices, contour ) {\r\n\r\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\r\n\r\n\t\t\tvertices.push( contour[ i ].x );\r\n\t\t\tvertices.push( contour[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Creates extruded geometry from a path shape.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n\t *  depth: <float>, // Depth to extrude the shape\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\r\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\r\n\t *  bevelSegments: <int>, // number of bevel layers\r\n\t *\r\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\r\n\t *\r\n\t *  UVGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\t// ExtrudeGeometry\r\n\r\n\tfunction ExtrudeGeometry( shapes, options ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\r\n\r\n\tExtrudeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t// ExtrudeBufferGeometry\r\n\r\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar verticesArray = [];\r\n\t\tvar uvArray = [];\r\n\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar shape = shapes[ i ];\r\n\t\t\taddShape( shape );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar placeholder = [];\r\n\r\n\t\t\t// options\r\n\r\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\r\n\r\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\r\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\r\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\r\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\t\t\tvar extrudePath = options.extrudePath;\r\n\r\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\r\n\r\n\t\t\t// deprecated options\r\n\r\n\t\t\tif ( options.amount !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\r\n\t\t\t\tdepth = options.amount;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar extrudePts, extrudeByPath = false;\r\n\t\t\tvar splineTube, binormal, normal, position2;\r\n\r\n\t\t\tif ( extrudePath ) {\r\n\r\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\t\t\textrudeByPath = true;\r\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t\t\t// SETUP TNB variables\r\n\r\n\t\t\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\r\n\r\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\t\t\tbinormal = new Vector3();\r\n\t\t\t\tnormal = new Vector3();\r\n\t\t\t\tposition2 = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Safeguards if bevels are not enabled\r\n\r\n\t\t\tif ( ! bevelEnabled ) {\r\n\r\n\t\t\t\tbevelSegments = 0;\r\n\t\t\t\tbevelThickness = 0;\r\n\t\t\t\tbevelSize = 0;\r\n\t\t\t\tbevelOffset = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Variables initialization\r\n\r\n\t\t\tvar ahole, h, hl; // looping of holes\r\n\r\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar vertices = shapePoints.shape;\r\n\t\t\tvar holes = shapePoints.holes;\r\n\r\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\r\n\r\n\t\t\tif ( reverse ) {\r\n\r\n\t\t\t\tvertices = vertices.reverse();\r\n\r\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t\t\t/* Vertices */\r\n\r\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\tvertices = vertices.concat( ahole );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction scalePt2( pt, vec, size ) {\r\n\r\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\r\n\r\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar b, bs, t, z,\r\n\t\t\t\tvert, vlen = vertices.length,\r\n\t\t\t\tface, flen = faces.length;\r\n\r\n\r\n\t\t\t// Find directions for point movement\r\n\r\n\r\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t\t//\r\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n\r\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\r\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\r\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\r\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\r\n\r\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t\t\t// check for collinear edges\r\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not collinear\r\n\r\n\t\t\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\r\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\r\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\t\tv_trans_y = v_prev_x;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar contourMovements = [];\r\n\r\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\tif ( j === il ) { j = 0; }\r\n\t\t\t\tif ( k === il ) { k = 0; }\r\n\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesMovements = [],\r\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\toneHoleMovements = [];\r\n\r\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\t\tif ( j === il ) { j = 0; }\r\n\t\t\t\t\tif ( k === il ) { k = 0; }\r\n\r\n\t\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbs = bevelSize + bevelOffset;\r\n\r\n\t\t\t// Back facing vertices\r\n\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Add stepped vertices...\r\n\t\t\t// Including front facing vertices\r\n\r\n\t\t\tvar s;\r\n\r\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Add bevel segments planes\r\n\r\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* Faces */\r\n\r\n\t\t\t// Top and bottom faces\r\n\r\n\t\t\tbuildLidFaces();\r\n\r\n\t\t\t// Sides faces\r\n\r\n\t\t\tbuildSideFaces();\r\n\r\n\r\n\t\t\t/////  Internal functions\r\n\r\n\t\t\tfunction buildLidFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\r\n\t\t\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Create faces for the z-sides of the shape\r\n\r\n\t\t\tfunction buildSideFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\t\t\t\tvar layeroffset = 0;\r\n\t\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\t\tlayeroffset += contour.length;\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t\t\t//, true\r\n\t\t\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\t\t\tvar j, k;\r\n\t\t\t\ti = contour.length;\r\n\r\n\t\t\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\t\t\tj = i;\r\n\t\t\t\t\tk = i - 1;\r\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\r\n\r\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\t\t\tvar s = 0,\r\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\r\n\r\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\t\t\tf4( a, b, c, d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction v( x, y, z ) {\r\n\r\n\t\t\t\tplaceholder.push( x );\r\n\t\t\t\tplaceholder.push( y );\r\n\t\t\t\tplaceholder.push( z );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction f3( a, b, c ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction f4( a, b, c, d ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( d );\r\n\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\t\t\t\taddVertex( d );\r\n\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addVertex( index ) {\r\n\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction addUV( vector2 ) {\r\n\r\n\t\t\t\tuvArray.push( vector2.x );\r\n\t\t\t\tuvArray.push( vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\r\n\r\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar WorldUVGenerator = {\r\n\r\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_x, a_y ),\r\n\t\t\t\tnew Vector2( b_x, b_y ),\r\n\t\t\t\tnew Vector2( c_x, c_y )\r\n\t\t\t];\r\n\r\n\t\t},\r\n\r\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\r\n\t\t\tvar d_x = vertices[ indexD * 3 ];\r\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\r\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\r\n\r\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tfunction toJSON( shapes, options, data ) {\r\n\r\n\t\t//\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Text = 3D Text\r\n\t *\r\n\t * parameters = {\r\n\t *  font: <THREE.Font>, // font\r\n\t *\r\n\t *  size: <float>, // size of the text\r\n\t *  height: <float>, // thickness to extrude text\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into text bevel goes\r\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n\t *  bevelOffset: <float> // how far from text outline does bevel start\r\n\t * }\r\n\t */\r\n\r\n\t// TextGeometry\r\n\r\n\tfunction TextGeometry( text, parameters ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\ttext: text,\r\n\t\t\tparameters: parameters\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTextGeometry.prototype.constructor = TextGeometry;\r\n\r\n\t// TextBufferGeometry\r\n\r\n\tfunction TextBufferGeometry( text, parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar font = parameters.font;\r\n\r\n\t\tif ( ! ( font && font.isFont ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\t\treturn new Geometry();\r\n\r\n\t\t}\r\n\r\n\t\tvar shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t// translate parameters to ExtrudeGeometry API\r\n\r\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t\t// defaults\r\n\r\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\r\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\r\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\r\n\r\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\r\n\r\n\t\tthis.type = 'TextBufferGeometry';\r\n\r\n\t}\r\n\r\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\r\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// SphereGeometry\r\n\r\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\r\n\tSphereGeometry.prototype.constructor = SphereGeometry;\r\n\r\n\t// SphereBufferGeometry\r\n\r\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\tvar index = 0;\r\n\t\tvar grid = [];\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tvar verticesRow = [];\r\n\r\n\t\t\tvar v = iy / heightSegments;\r\n\r\n\t\t\t// special case for the poles\r\n\r\n\t\t\tvar uOffset = 0;\r\n\r\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\r\n\r\n\t\t\t\tuOffset = 0.5 / widthSegments;\r\n\r\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\r\n\r\n\t\t\t\tuOffset = - 0.5 / widthSegments;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.copy( vertex ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tvar b = grid[ iy ][ ix ];\r\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Kaleb Murphy\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// RingGeometry\r\n\r\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\r\n\tRingGeometry.prototype.constructor = RingGeometry;\r\n\r\n\t// RingBufferGeometry\r\n\r\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tinnerRadius = innerRadius || 0.5;\r\n\t\touterRadius = outerRadius || 1;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// some helper variables\r\n\r\n\t\tvar segment;\r\n\t\tvar radius = innerRadius;\r\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\t\t// values are generate from the inside of the ring to the outside\r\n\r\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// increase the radius for next row of vertices\r\n\r\n\t\t\tradius += radiusStep;\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t\tvar a = segment;\r\n\t\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// LatheGeometry\r\n\r\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\r\n\tLatheGeometry.prototype.constructor = LatheGeometry;\r\n\r\n\t// LatheBufferGeometry\r\n\r\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tsegments = Math.floor( segments ) || 12;\r\n\t\tphiStart = phiStart || 0;\r\n\t\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\r\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar base;\r\n\t\tvar inverseSegments = 1.0 / segments;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar i, j;\r\n\r\n\t\t// generate vertices and uvs\r\n\r\n\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\t\tvar sin = Math.sin( phi );\r\n\t\t\tvar cos = Math.cos( phi );\r\n\r\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\t\tvertex.y = points[ j ].y;\r\n\t\t\t\tvertex.z = points[ j ].x * cos;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = i / segments;\r\n\t\t\t\tuv.y = j / ( points.length - 1 );\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t\tvar a = base;\r\n\t\t\t\tvar b = base + points.length;\r\n\t\t\t\tvar c = base + points.length + 1;\r\n\t\t\t\tvar d = base + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// generate normals\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\t\tif ( phiLength === Math.PI * 2 ) {\r\n\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\t\tvar n1 = new Vector3();\r\n\t\t\tvar n2 = new Vector3();\r\n\t\t\tvar n = new Vector3();\r\n\r\n\t\t\t// this is the buffer offset for the last line of vertices\r\n\r\n\t\t\tbase = segments * points.length * 3;\r\n\r\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t\t// select the normal of the vertex in the first line\r\n\r\n\t\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t\t// select the normal of the vertex in the last line\r\n\r\n\t\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t\t// average normals\r\n\r\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t\t// assign the new values to both normals\r\n\r\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\r\n\r\n\t/**\r\n\t * @author jonobr1 / http://jonobr1.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// ShapeGeometry\r\n\r\n\tfunction ShapeGeometry( shapes, curveSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeGeometry';\r\n\r\n\t\tif ( typeof curveSegments === 'object' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\r\n\r\n\t\t\tcurveSegments = curveSegments.curveSegments;\r\n\r\n\t\t}\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\r\n\r\n\tShapeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t// ShapeBufferGeometry\r\n\r\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tcurveSegments = curveSegments || 12;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar groupStart = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\t// allow single and array values for \"shapes\" parameter\r\n\r\n\t\tif ( Array.isArray( shapes ) === false ) {\r\n\r\n\t\t\taddShape( shapes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\r\n\r\n\t\t\t\taddShape( shapes[ i ] );\r\n\r\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\t\t\t\tgroupCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar i, l, shapeHole;\r\n\r\n\t\t\tvar indexOffset = vertices.length / 3;\r\n\t\t\tvar points = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar shapeVertices = points.shape;\r\n\t\t\tvar shapeHoles = points.holes;\r\n\r\n\t\t\t// check direction of vertices\r\n\r\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\r\n\r\n\t\t\t\tshapeVertices = shapeVertices.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\r\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\r\n\r\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\r\n\r\n\t\t\t// join vertices of inner and outer paths to a single array\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices, normals, uvs\r\n\r\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = shapeVertices[ i ];\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// incides\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\r\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\r\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\r\n\r\n\t\t\t\tindices.push( a, b, c );\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\r\n\r\n\tShapeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction toJSON$1( shapes, data ) {\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'EdgesGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tthresholdAngle: thresholdAngle\r\n\t\t};\r\n\r\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\r\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\t// prepare source geometry\r\n\r\n\t\tvar geometry2;\r\n\r\n\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\tgeometry2 = new Geometry();\r\n\t\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgeometry2 = geometry.clone();\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.mergeVertices();\r\n\t\tgeometry2.computeFaceNormals();\r\n\r\n\t\tvar sourceVertices = geometry2.vertices;\r\n\t\tvar faces = geometry2.faces;\r\n\r\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\r\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tedges[ key ].face2 = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices\r\n\r\n\t\tfor ( key in edges ) {\r\n\r\n\t\t\tvar e = edges[ key ];\r\n\r\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\r\n\r\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// CylinderGeometry\r\n\r\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\r\n\r\n\t// CylinderBufferGeometry\r\n\r\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\r\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar index = 0;\r\n\t\tvar indexArray = [];\r\n\t\tvar halfHeight = height / 2;\r\n\t\tvar groupStart = 0;\r\n\r\n\t\t// generate geometry\r\n\r\n\t\tgenerateTorso();\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\r\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction generateTorso() {\r\n\r\n\t\t\tvar x, y;\r\n\t\t\tvar normal = new Vector3();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t// this will be used to calculate the normal\r\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\t\tvar indexRow = [];\r\n\r\n\t\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t\t// calculate the radius of the current row\r\n\r\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\r\n\t\t\t\t\t// vertex\r\n\r\n\t\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t// normal\r\n\r\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\r\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\t// uv\r\n\r\n\t\t\t\t\tuvs.push( u, 1 - v );\r\n\r\n\t\t\t\t\t// save index of vertex in respective row\r\n\r\n\t\t\t\t\tindexRow.push( index ++ );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// now save vertices of the row in our index array\r\n\r\n\t\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t\t// we use the index array to access the correct indices\r\n\r\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\r\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\r\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// update group counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateCap( top ) {\r\n\r\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\r\n\t\t\tvar uv = new Vector2();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t\t// save the index of the first center vertex\r\n\t\t\tcenterIndexStart = index;\r\n\r\n\t\t\t// first we generate the center vertex data of the cap.\r\n\t\t\t// because the geometry needs one set of uvs per face,\r\n\t\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// save the index of the last center vertex\r\n\r\n\t\t\tcenterIndexEnd = index;\r\n\r\n\t\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar c = centerIndexStart + x;\r\n\t\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t\t// face top\r\n\r\n\t\t\t\t\tindices.push( i, i + 1, c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// face bottom\r\n\r\n\t\t\t\t\tindices.push( i + 1, i, c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\t// ConeGeometry\r\n\r\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\r\n\tConeGeometry.prototype.constructor = ConeGeometry;\r\n\r\n\t// ConeBufferGeometry\r\n\r\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\r\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author hughes\r\n\t */\r\n\r\n\t// CircleGeometry\r\n\r\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCircleGeometry.prototype.constructor = CircleGeometry;\r\n\r\n\t// CircleBufferGeometry\r\n\r\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, s;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\r\n\t\t// center point\r\n\r\n\t\tvertices.push( 0, 0, 0 );\r\n\t\tnormals.push( 0, 0, 1 );\r\n\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\r\n\r\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\r\n\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\r\n\r\n\r\n\r\n\tvar Geometries = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tWireframeGeometry: WireframeGeometry,\r\n\t\tParametricGeometry: ParametricGeometry,\r\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\r\n\t\tTetrahedronGeometry: TetrahedronGeometry,\r\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\r\n\t\tOctahedronGeometry: OctahedronGeometry,\r\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\r\n\t\tIcosahedronGeometry: IcosahedronGeometry,\r\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\r\n\t\tDodecahedronGeometry: DodecahedronGeometry,\r\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\r\n\t\tPolyhedronGeometry: PolyhedronGeometry,\r\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\r\n\t\tTubeGeometry: TubeGeometry,\r\n\t\tTubeBufferGeometry: TubeBufferGeometry,\r\n\t\tTorusKnotGeometry: TorusKnotGeometry,\r\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\r\n\t\tTorusGeometry: TorusGeometry,\r\n\t\tTorusBufferGeometry: TorusBufferGeometry,\r\n\t\tTextGeometry: TextGeometry,\r\n\t\tTextBufferGeometry: TextBufferGeometry,\r\n\t\tSphereGeometry: SphereGeometry,\r\n\t\tSphereBufferGeometry: SphereBufferGeometry,\r\n\t\tRingGeometry: RingGeometry,\r\n\t\tRingBufferGeometry: RingBufferGeometry,\r\n\t\tPlaneGeometry: PlaneGeometry,\r\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\r\n\t\tLatheGeometry: LatheGeometry,\r\n\t\tLatheBufferGeometry: LatheBufferGeometry,\r\n\t\tShapeGeometry: ShapeGeometry,\r\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\r\n\t\tExtrudeGeometry: ExtrudeGeometry,\r\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\r\n\t\tEdgesGeometry: EdgesGeometry,\r\n\t\tConeGeometry: ConeGeometry,\r\n\t\tConeBufferGeometry: ConeBufferGeometry,\r\n\t\tCylinderGeometry: CylinderGeometry,\r\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\r\n\t\tCircleGeometry: CircleGeometry,\r\n\t\tCircleBufferGeometry: CircleBufferGeometry,\r\n\t\tBoxGeometry: BoxGeometry,\r\n\t\tBoxBufferGeometry: BoxBufferGeometry\r\n\t});\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <THREE.Color>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShadowMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShadowMaterial';\r\n\r\n\t\tthis.color = new Color( 0x000000 );\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tShadowMaterial.prototype = Object.create( Material.prototype );\r\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\r\n\r\n\tShadowMaterial.prototype.isShadowMaterial = true;\r\n\r\n\tShadowMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction RawShaderMaterial( parameters ) {\r\n\r\n\t\tShaderMaterial.call( this, parameters );\r\n\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\r\n\t}\r\n\r\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\r\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\r\n\r\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  roughness: <float>,\r\n\t *  metalness: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  roughnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  metalnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  envMapIntensity: <float>\r\n\t *\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshStandardMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 0.5;\r\n\t\tthis.metalness = 0.5;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.roughnessMap = null;\r\n\r\n\t\tthis.metalnessMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapIntensity = 1.0;\r\n\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\r\n\r\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\r\n\r\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  reflectivity: <float>\r\n\t *  clearcoat: <float>\r\n\t *  clearcoatRoughness: <float>\r\n\t *\r\n\t *  sheen: <Color>\r\n\t *\r\n\t *  clearcoatNormalScale: <Vector2>,\r\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhysicalMaterial( parameters ) {\r\n\r\n\t\tMeshStandardMaterial.call( this );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n\t\tthis.clearcoat = 0.0;\r\n\t\tthis.clearcoatRoughness = 0.0;\r\n\r\n\t\tthis.sheen = null; // null will disable sheen bsdf\r\n\r\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\r\n\t\tthis.clearcoatNormalMap = null;\r\n\r\n\t\tthis.transparency = 0.0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\r\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\r\n\r\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\r\n\r\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\r\n\t\tthis.clearcoat = source.clearcoat;\r\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\r\n\r\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\r\n\t\telse { this.sheen = null; }\r\n\r\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\r\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\r\n\r\n\t\tthis.transparency = source.transparency;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  specular: <hex>,\r\n\t *  shininess: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.MultiplyOperation,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhongMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\r\n\r\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\r\n\r\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahirox / http://github.com/takahirox\r\n\t *\r\n\t * parameters = {\r\n\t *  gradientMap: new THREE.Texture( <Image> )\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshToonMaterial( parameters ) {\r\n\r\n\t\tMeshPhongMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'TOON': '' };\r\n\r\n\t\tthis.type = 'MeshToonMaterial';\r\n\r\n\t\tthis.gradientMap = null;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\r\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\r\n\r\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\r\n\r\n\tMeshToonMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.gradientMap = source.gradientMap;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshNormalMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\r\n\r\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\r\n\r\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshLambertMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\r\n\r\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\r\n\r\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  matcap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshMatcapMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.type = 'MeshMatcapMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.matcap = null;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\r\n\r\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\r\n\r\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.matcap = source.matcap;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *\r\n\t *  scale: <float>,\r\n\t *  dashSize: <float>,\r\n\t *  gapSize: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineDashedMaterial( parameters ) {\r\n\r\n\t\tLineBasicMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\r\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\r\n\r\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\r\n\r\n\tLineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Materials = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tShadowMaterial: ShadowMaterial,\r\n\t\tSpriteMaterial: SpriteMaterial,\r\n\t\tRawShaderMaterial: RawShaderMaterial,\r\n\t\tShaderMaterial: ShaderMaterial,\r\n\t\tPointsMaterial: PointsMaterial,\r\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\r\n\t\tMeshStandardMaterial: MeshStandardMaterial,\r\n\t\tMeshPhongMaterial: MeshPhongMaterial,\r\n\t\tMeshToonMaterial: MeshToonMaterial,\r\n\t\tMeshNormalMaterial: MeshNormalMaterial,\r\n\t\tMeshLambertMaterial: MeshLambertMaterial,\r\n\t\tMeshDepthMaterial: MeshDepthMaterial,\r\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\r\n\t\tMeshBasicMaterial: MeshBasicMaterial,\r\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\r\n\t\tLineDashedMaterial: LineDashedMaterial,\r\n\t\tLineBasicMaterial: LineBasicMaterial,\r\n\t\tMaterial: Material\r\n\t});\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tvar AnimationUtils = {\r\n\r\n\t\t// same as Array.prototype.slice, but also works on typed arrays\r\n\t\tarraySlice: function ( array, from, to ) {\r\n\r\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\r\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\r\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array.slice( from, to );\r\n\r\n\t\t},\r\n\r\n\t\t// converts an array to a specific type\r\n\t\tconvertArray: function ( array, type, forceClone ) {\r\n\r\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\r\n\r\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t\t},\r\n\r\n\t\tisTypedArray: function ( object ) {\r\n\r\n\t\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t\t},\r\n\r\n\t\t// returns an array by which times and values can be sorted\r\n\t\tgetKeyframeOrder: function ( times ) {\r\n\r\n\t\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar n = times.length;\r\n\t\t\tvar result = new Array( n );\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\r\n\r\n\t\t\tresult.sort( compareTime );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\t\tsortedArray: function ( values, stride, order ) {\r\n\r\n\t\t\tvar nValues = values.length;\r\n\t\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// function for parsing AOS keyframe formats\r\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( key === undefined ) { return; } // no data\r\n\r\n\t\t\tvar value = key[ valuePropertyName ];\r\n\t\t\tif ( value === undefined ) { return; } // no data\r\n\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else if ( value.toArray !== undefined ) {\r\n\r\n\t\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// otherwise push as-is\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\r\n\r\n\t\t\tfps = fps || 30;\r\n\r\n\t\t\tvar clip = sourceClip.clone();\r\n\r\n\t\t\tclip.name = name;\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tvar track = clip.tracks[ i ];\r\n\t\t\t\tvar valueSize = track.getValueSize();\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\r\n\r\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\r\n\r\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\r\n\r\n\t\t\t\t\ttimes.push( track.times[ j ] );\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\r\n\r\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( times.length === 0 ) { continue; }\r\n\r\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\r\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\r\n\r\n\t\t\t\ttracks.push( track );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip.tracks = tracks;\r\n\r\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\r\n\r\n\t\t\tvar minStartTime = Infinity;\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\r\n\r\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// shift all tracks such that clip begins at t=0\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip.resetDuration();\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Abstract base class of interpolants over parametric samples.\r\n\t *\r\n\t * The parameter domain is one dimensional, typically the time or a path\r\n\t * along a curve defined by the data.\r\n\t *\r\n\t * The sample values can have any dimensionality and derived classes may\r\n\t * apply special interpretations to the data.\r\n\t *\r\n\t * This class provides the interval seek in a Template Method, deferring\r\n\t * the actual interpolation to derived classes.\r\n\t *\r\n\t * Time complexity is O(1) for linear access crossing at most two points\r\n\t * and O(log N) for random access, where N is the number of positions.\r\n\t *\r\n\t * References:\r\n\t *\r\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t}\r\n\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\tevaluate: function ( t ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\t\tt1 = pp[ i1 ],\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\tvalidate_interval: {\r\n\r\n\t\t\t\tseek: {\r\n\r\n\t\t\t\t\tvar right;\r\n\r\n\t\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\r\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\r\n\r\n\t\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\r\n\r\n\t\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\r\n\r\n\t\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t\t// binary search\r\n\r\n\t\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // seek\r\n\r\n\t\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t\t} // validate_interval\r\n\r\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t\t},\r\n\r\n\t\tsettings: null, // optional, subclass-specific settings structure\r\n\t\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t\t// --- Protected interface\r\n\r\n\t\tDefaultSettings_: {},\r\n\r\n\t\tgetSettings_: function () {\r\n\r\n\t\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t\t},\r\n\r\n\t\tcopySampleValue_: function ( index ) {\r\n\r\n\t\t\t// copies a sample value to the result buffer\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = index * stride;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// Template methods for derived classes:\r\n\r\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\t\tthrow new Error( 'call to abstract method' );\r\n\t\t\t// implementations shall return this.resultBuffer\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\r\n\r\n\t\t\t// empty\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\t//( 0, t, t0 ), returns this.resultBuffer\r\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Fast and simple cubic spline interpolant.\r\n\t *\r\n\t * It was derived from a Hermitian construction setting the first derivative\r\n\t * at each sample position to the linear slope between neighboring positions\r\n\t * over their parameter interval.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t}\r\n\r\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: CubicInterpolant,\r\n\r\n\t\tDefaultSettings_: {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\tiPrev = i1 - 2,\r\n\t\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\t\tstride = this.valueSize;\r\n\r\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\t\tthis._offsetPrev = iPrev * stride;\r\n\t\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t\t},\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tpp = p * p,\r\n\t\t\t\tppp = pp * p;\r\n\r\n\t\t\t// evaluate polynomials\r\n\r\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\t\tvar sN = wN * ppp - wN * pp;\r\n\r\n\t\t\t// combine data linearly\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: LinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset1 = i1 * stride,\r\n\t\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Interpolant that evaluates to the sample value at the position preceeding\r\n\t * the parameter.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: DiscreteInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\r\n\r\n\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A timed sequence of keyframes for a specific property.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\r\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\t}\r\n\r\n\t// Static methods\r\n\r\n\tObject.assign( KeyframeTrack, {\r\n\r\n\t\t// Serialization (in static context, because of constructor invocation\r\n\t\t// and automatic invocation of .toJSON):\r\n\r\n\t\ttoJSON: function ( track ) {\r\n\r\n\t\t\tvar trackType = track.constructor;\r\n\r\n\t\t\tvar json;\r\n\r\n\t\t\t// derived classes can define a static toJSON method\r\n\t\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\t\tjson = {\r\n\r\n\t\t\t\t\t'name': track.name,\r\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( KeyframeTrack.prototype, {\r\n\r\n\t\tconstructor: KeyframeTrack,\r\n\r\n\t\tTimeBufferType: Float32Array,\r\n\r\n\t\tValueBufferType: Float32Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\r\n\r\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\r\n\r\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tsetInterpolation: function ( interpolation ) {\r\n\r\n\t\t\tvar factoryMethod;\r\n\r\n\t\t\tswitch ( interpolation ) {\r\n\r\n\t\t\t\tcase InterpolateDiscrete:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateLinear:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateSmooth:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInterpolation: function () {\r\n\r\n\t\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\t\treturn InterpolateDiscrete;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\t\treturn InterpolateLinear;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\t\treturn InterpolateSmooth;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetValueSize: function () {\r\n\r\n\t\t\treturn this.values.length / this.times.length;\r\n\r\n\t\t},\r\n\r\n\t\t// move all keyframes either forwards or backwards in time\r\n\t\tshift: function ( timeOffset ) {\r\n\r\n\t\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\t\tscale: function ( timeScale ) {\r\n\r\n\t\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\t\ttrim: function ( startTime, endTime ) {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tnKeys = times.length,\r\n\t\t\t\tfrom = 0,\r\n\t\t\t\tto = nKeys - 1;\r\n\r\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\r\n\r\n\t\t\t\t++ from;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\r\n\r\n\t\t\t\t-- to;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\t\tif ( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\r\n\r\n\t\t\t\tvar stride = this.getValueSize();\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tvar valueSize = this.getValueSize();\r\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\r\n\t\t\t\tnKeys = times.length;\r\n\r\n\t\t\tif ( nKeys === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevTime = null;\r\n\r\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprevTime = currTime;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( values !== undefined ) {\r\n\r\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\r\n\t\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\t// removes equivalent sequential keys as common in morph target sequences\r\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\t\toptimize: function () {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\t\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n\r\n\t\t\t\twriteIndex = 1,\r\n\t\t\t\tlastIndex = times.length - 1;\r\n\r\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\r\n\r\n\t\t\t\tvar keep = false;\r\n\r\n\t\t\t\tvar time = times[ i ];\r\n\t\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t\tif ( ! smoothInterpolation ) {\r\n\r\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\r\n\t\t\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in-place compaction\r\n\r\n\t\t\t\tif ( keep ) {\r\n\r\n\t\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// flush last keyframe (compaction looks ahead)\r\n\r\n\t\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\r\n\r\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\r\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\r\n\r\n\t\t\tvar TypedKeyframeTrack = this.constructor;\r\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\r\n\r\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\r\n\t\t\ttrack.createInterpolant = this.createInterpolant;\r\n\r\n\t\t\treturn track;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of Boolean keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction BooleanKeyframeTrack( name, times, values ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values );\r\n\r\n\t}\r\n\r\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: BooleanKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'bool',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t\t// Note: Actually this track could have a optimized / compressed\r\n\t\t// representation of a single value and a custom interpolant that\r\n\t\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of keyframe values that represent color.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: ColorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'color'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t\t// Note: Very basic implementation and nothing special yet.\r\n\t\t// However, this is the place for color space parameterization.\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of numeric keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: NumberKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'number'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Spherical linear unit quaternion interpolant.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: QuaternionLinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset = i1 * stride,\r\n\r\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of quaternion keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: QuaternionKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'quaternion',\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Strings\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: StringKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'string',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of vectored keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: VectorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'vector'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Reusable set of Tracks that represent an animation.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tfunction AnimationClip( name, duration, tracks ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\r\n\t\t\tthis.resetDuration();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTrackTypeForValueTypeName( typeName ) {\r\n\r\n\t\tswitch ( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase 'scalar':\r\n\t\t\tcase 'double':\r\n\t\t\tcase 'float':\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'integer':\r\n\r\n\t\t\t\treturn NumberKeyframeTrack;\r\n\r\n\t\t\tcase 'vector':\r\n\t\t\tcase 'vector2':\r\n\t\t\tcase 'vector3':\r\n\t\t\tcase 'vector4':\r\n\r\n\t\t\t\treturn VectorKeyframeTrack;\r\n\r\n\t\t\tcase 'color':\r\n\r\n\t\t\t\treturn ColorKeyframeTrack;\r\n\r\n\t\t\tcase 'quaternion':\r\n\r\n\t\t\t\treturn QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase 'bool':\r\n\t\t\tcase 'boolean':\r\n\r\n\t\t\t\treturn BooleanKeyframeTrack;\r\n\r\n\t\t\tcase 'string':\r\n\r\n\t\t\t\treturn StringKeyframeTrack;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\r\n\r\n\t}\r\n\r\n\tfunction parseKeyframeTrack( json ) {\r\n\r\n\t\tif ( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume a constructor compatible with the base\r\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationClip, {\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tjsonTracks = json.tracks,\r\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( clip ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\t\tvar json = {\r\n\r\n\t\t\t\t'name': clip.name,\r\n\t\t\t\t'duration': clip.duration,\r\n\t\t\t\t'tracks': tracks,\r\n\t\t\t\t'uuid': clip.uuid\r\n\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t},\r\n\r\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\r\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t\t// last frame as well for perfect loop.\r\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttracks.push(\r\n\t\t\t\t\tnew NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( name, - 1, tracks );\r\n\r\n\t\t},\r\n\r\n\t\tfindByName: function ( objectOrClipArray, name ) {\r\n\r\n\t\t\tvar clipArray = objectOrClipArray;\r\n\r\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\t\tvar o = objectOrClipArray;\r\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\r\n\r\n\t\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t\t// sort morph target names into animation groups based\r\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clips = [];\r\n\r\n\t\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn clips;\r\n\r\n\t\t},\r\n\r\n\t\t// parse the animation.hierarchy format\r\n\t\tparseAnimation: function ( animation, bones ) {\r\n\r\n\t\t\tif ( ! animation ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t\t// only return track if there are actually keys.\r\n\t\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tvar clipName = animation.name || 'default';\r\n\t\t\t// automatic length determination in AnimationClip.\r\n\t\t\tvar duration = animation.length || - 1;\r\n\t\t\tvar fps = animation.fps || 30;\r\n\r\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t\t// skip empty tracks\r\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\r\n\r\n\t\t\t\t// process morph targets\r\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\r\n\r\n\t\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\t\tvar morphTargetNames = {};\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t\t// the morphTarget is named.\r\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\t\tvar times = [];\r\n\t\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\r\n\r\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( AnimationClip.prototype, {\r\n\r\n\t\tresetDuration: function () {\r\n\r\n\t\t\tvar tracks = this.tracks, duration = 0;\r\n\r\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.duration = duration;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttrim: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\toptimize: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar Cache = {\r\n\r\n\t\tenabled: false,\r\n\r\n\t\tfiles: {},\r\n\r\n\t\tadd: function ( key, file ) {\r\n\r\n\t\t\tif ( this.enabled === false ) { return; }\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\t\tthis.files[ key ] = file;\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( key ) {\r\n\r\n\t\t\tif ( this.enabled === false ) { return; }\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\t\treturn this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( key ) {\r\n\r\n\t\t\tdelete this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tclear: function () {\r\n\r\n\t\t\tthis.files = {};\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar isLoading = false;\r\n\t\tvar itemsLoaded = 0;\r\n\t\tvar itemsTotal = 0;\r\n\t\tvar urlModifier = undefined;\r\n\t\tvar handlers = [];\r\n\r\n\t\t// Refer to #5689 for the reason why we don't set .onStart\r\n\t\t// in the constructor\r\n\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\r\n\t\tthis.itemStart = function ( url ) {\r\n\r\n\t\t\titemsTotal ++;\r\n\r\n\t\t\tif ( isLoading === false ) {\r\n\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = true;\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemEnd = function ( url ) {\r\n\r\n\t\t\titemsLoaded ++;\r\n\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\t\tisLoading = false;\r\n\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemError = function ( url ) {\r\n\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\t\tscope.onError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.resolveURL = function ( url ) {\r\n\r\n\t\t\tif ( urlModifier ) {\r\n\r\n\t\t\t\treturn urlModifier( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn url;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setURLModifier = function ( transform ) {\r\n\r\n\t\t\turlModifier = transform;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.addHandler = function ( regex, loader ) {\r\n\r\n\t\t\thandlers.push( regex, loader );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.removeHandler = function ( regex ) {\r\n\r\n\t\t\tvar index = handlers.indexOf( regex );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\thandlers.splice( index, 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getHandler = function ( file ) {\r\n\r\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tvar regex = handlers[ i ];\r\n\t\t\t\tvar loader = handlers[ i + 1 ];\r\n\r\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\r\n\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\t\treturn loader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar DefaultLoadingManager = new LoadingManager();\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Loader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\t\tthis.path = '';\r\n\t\tthis.resourcePath = '';\r\n\r\n\t}\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\r\n\r\n\t\tparse: function ( /* data */ ) {},\r\n\r\n\t\tsetCrossOrigin: function ( crossOrigin ) {\r\n\r\n\t\t\tthis.crossOrigin = crossOrigin;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( path ) {\r\n\r\n\t\t\tthis.path = path;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetResourcePath: function ( resourcePath ) {\r\n\r\n\t\t\tthis.resourcePath = resourcePath;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar loading = {};\r\n\r\n\tfunction FileLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: FileLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) { url = ''; }\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if request is duplicate\r\n\r\n\t\t\tif ( loading[ url ] !== undefined ) {\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check for data: URI\r\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\r\n\r\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n\t\t\tif ( dataUriRegexResult ) {\r\n\r\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\r\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\r\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\r\n\r\n\t\t\t\tdata = decodeURIComponent( data );\r\n\r\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar response;\r\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\r\n\r\n\t\t\t\t\tswitch ( responseType ) {\r\n\r\n\t\t\t\t\t\tcase 'arraybuffer':\r\n\t\t\t\t\t\tcase 'blob':\r\n\r\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\r\n\r\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tresponse = view.buffer;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'document':\r\n\r\n\t\t\t\t\t\t\tvar parser = new DOMParser();\r\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'json':\r\n\r\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault: // 'text' or other\r\n\r\n\t\t\t\t\t\t\tresponse = data;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\r\n\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Initialise array for duplicate requests\r\n\r\n\t\t\t\tloading[ url ] = [];\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\r\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\t\t\tvar response = this.response;\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\r\n\r\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\r\n\r\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\r\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\r\n\t\t\t\t\t\tCache.add( url, response );\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\r\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\r\n\r\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\r\n\r\n\t\t\t\tfor ( var header in this.requestHeader ) {\r\n\r\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn request;\r\n\r\n\t\t},\r\n\r\n\t\tsetResponseType: function ( value ) {\r\n\r\n\t\t\tthis.responseType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetWithCredentials: function ( value ) {\r\n\r\n\t\t\tthis.withCredentials = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMimeType: function ( value ) {\r\n\r\n\t\t\tthis.mimeType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRequestHeader: function ( value ) {\r\n\r\n\t\t\tthis.requestHeader = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io/\r\n\t */\r\n\r\n\tfunction AnimationLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: AnimationLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n\t *\r\n\t * Sub classes have to implement the parse() method which will be used in load().\r\n\t */\r\n\r\n\tfunction CompressedTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: CompressedTextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar images = [];\r\n\r\n\t\t\tvar texture = new CompressedTexture();\r\n\t\t\ttexture.image = images;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\r\n\r\n\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\tvar loaded = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Nikos M. / https://github.com/foo123/\r\n\t *\r\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n\t *\r\n\t * Sub classes have to implement the parse() method which will be used in load().\r\n\t */\r\n\r\n\tfunction DataTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: DataTextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar texture = new DataTexture();\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texData = scope.parse( buffer );\r\n\r\n\t\t\t\tif ( ! texData ) { return; }\r\n\r\n\t\t\t\tif ( texData.image !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t\t} else if ( texData.data !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\r\n\r\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\r\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\r\n\r\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\r\n\r\n\t\t\t\tif ( texData.format !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( texData.type !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ImageLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ImageLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\r\n\r\n\t\t\tfunction onImageLoad() {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tCache.add( url, this );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction onImageError( event ) {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tif ( onError ) { onError( event ); }\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\r\n\t\t\timage.addEventListener( 'error', onImageError, false );\r\n\r\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\r\n\r\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\timage.src = url;\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction CubeTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: CubeTextureLoader,\r\n\r\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new CubeTexture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\t\tloaded ++;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, undefined, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction TextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: TextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new Texture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\t\ttexture.image = image;\r\n\r\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\r\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\r\n\r\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Extensible curve object\r\n\t *\r\n\t * Some common of curve methods:\r\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\r\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\r\n\t * .getPoints(), .getSpacedPoints()\r\n\t * .getLength()\r\n\t * .updateArcLengths()\r\n\t *\r\n\t * This following curves inherit from THREE.Curve:\r\n\t *\r\n\t * -- 2D curves --\r\n\t * THREE.ArcCurve\r\n\t * THREE.CubicBezierCurve\r\n\t * THREE.EllipseCurve\r\n\t * THREE.LineCurve\r\n\t * THREE.QuadraticBezierCurve\r\n\t * THREE.SplineCurve\r\n\t *\r\n\t * -- 3D curves --\r\n\t * THREE.CatmullRomCurve3\r\n\t * THREE.CubicBezierCurve3\r\n\t * THREE.LineCurve3\r\n\t * THREE.QuadraticBezierCurve3\r\n\t *\r\n\t * A series of curves can be represented as a THREE.CurvePath.\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tAbstract Curve base class\r\n\t **************************************************************/\r\n\r\n\tfunction Curve() {\r\n\r\n\t\tthis.type = 'Curve';\r\n\r\n\t\tthis.arcLengthDivisions = 200;\r\n\r\n\t}\r\n\r\n\tObject.assign( Curve.prototype, {\r\n\r\n\t\t// Virtual base class method to overwrite and implement in subclasses\r\n\t\t//\t- t [0 .. 1]\r\n\r\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// Get point at relative position in curve according to arc length\r\n\t\t// - u [0 .. 1]\r\n\r\n\t\tgetPointAt: function ( u, optionalTarget ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getPoint( t, optionalTarget );\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPoint( t )\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPointAt( u )\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get total curve arc length\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lengths = this.getLengths();\r\n\t\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// Get list of cumulative segment lengths\r\n\r\n\t\tgetLengths: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\r\n\r\n\t\t\tif ( this.cacheArcLengths &&\r\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\r\n\t\t\t\t! this.needsUpdate ) {\r\n\r\n\t\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.needsUpdate = false;\r\n\r\n\t\t\tvar cache = [];\r\n\t\t\tvar current, last = this.getPoint( 0 );\r\n\t\t\tvar p, sum = 0;\r\n\r\n\t\t\tcache.push( 0 );\r\n\r\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\t\tcurrent = this.getPoint( p / divisions );\r\n\t\t\t\tsum += current.distanceTo( last );\r\n\t\t\t\tcache.push( sum );\r\n\t\t\t\tlast = current;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n\r\n\t\t},\r\n\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.getLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\t\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\t\tif ( distance ) {\r\n\r\n\t\t\t\ttargetArcLength = distance;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\t\twhile ( low <= high ) {\r\n\r\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\thigh = i;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// DONE\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti = high;\r\n\r\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\t\treturn i / ( il - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t\t// add that fractional amount to t\r\n\r\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\t// Returns a unit vector tangent at t\r\n\t\t// In case any sub curve does not implement its tangent derivation,\r\n\t\t// 2 points a small delta apart will be used to find its gradient\r\n\t\t// which seems to give a reasonable approximation\r\n\r\n\t\tgetTangent: function ( t ) {\r\n\r\n\t\t\tvar delta = 0.0001;\r\n\t\t\tvar t1 = t - delta;\r\n\t\t\tvar t2 = t + delta;\r\n\r\n\t\t\t// Capping in case of danger\r\n\r\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\r\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\r\n\r\n\t\t\tvar pt1 = this.getPoint( t1 );\r\n\t\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\t\treturn vec.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tgetTangentAt: function ( u ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getTangent( t );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\r\n\r\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\r\n\t\t\tvar normal = new Vector3();\r\n\r\n\t\t\tvar tangents = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar binormals = [];\r\n\r\n\t\t\tvar vec = new Vector3();\r\n\t\t\tvar mat = new Matrix4();\r\n\r\n\t\t\tvar i, u, theta;\r\n\r\n\t\t\t// compute the tangent vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tu = i / segments;\r\n\r\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\r\n\t\t\t\ttangents[ i ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t\t// and in the direction of the minimum tangent xyz component\r\n\r\n\t\t\tnormals[ 0 ] = new Vector3();\r\n\t\t\tbinormals[ 0 ] = new Vector3();\r\n\t\t\tvar min = Number.MAX_VALUE;\r\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\r\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\r\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\t\tif ( tx <= min ) {\r\n\r\n\t\t\t\tmin = tx;\r\n\t\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ty <= min ) {\r\n\r\n\t\t\t\tmin = ty;\r\n\t\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tz <= min ) {\r\n\r\n\t\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\r\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvec.normalize();\r\n\r\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\t\t\tif ( closed === true ) {\r\n\r\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\r\n\t\t\t\ttheta /= segments;\r\n\r\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\r\n\r\n\t\t\t\t\ttheta = - theta;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\t\t// twist a little...\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttangents: tangents,\r\n\t\t\t\tnormals: normals,\r\n\t\t\t\tbinormals: binormals\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Curve',\r\n\t\t\t\t\tgenerator: 'Curve.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'EllipseCurve';\r\n\r\n\t\tthis.aX = aX || 0;\r\n\t\tthis.aY = aY || 0;\r\n\r\n\t\tthis.xRadius = xRadius || 1;\r\n\t\tthis.yRadius = yRadius || 1;\r\n\r\n\t\tthis.aStartAngle = aStartAngle || 0;\r\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\r\n\r\n\t\tthis.aClockwise = aClockwise || false;\r\n\r\n\t\tthis.aRotation = aRotation || 0;\r\n\r\n\t}\r\n\r\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\r\n\tEllipseCurve.prototype.constructor = EllipseCurve;\r\n\r\n\tEllipseCurve.prototype.isEllipseCurve = true;\r\n\r\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar twoPi = Math.PI * 2;\r\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t\t// ensures that deltaAngle is 0 .. 2 PI\r\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\r\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\r\n\r\n\t\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\t\tif ( samePoints ) {\r\n\r\n\t\t\t\tdeltaAngle = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\t\tvar cos = Math.cos( this.aRotation );\r\n\t\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\t\tvar tx = x - this.aX;\r\n\t\t\tvar ty = y - this.aY;\r\n\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( x, y );\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.aX = source.aX;\r\n\t\tthis.aY = source.aY;\r\n\r\n\t\tthis.xRadius = source.xRadius;\r\n\t\tthis.yRadius = source.yRadius;\r\n\r\n\t\tthis.aStartAngle = source.aStartAngle;\r\n\t\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\t\tthis.aClockwise = source.aClockwise;\r\n\r\n\t\tthis.aRotation = source.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\tEllipseCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.aX = this.aX;\r\n\t\tdata.aY = this.aY;\r\n\r\n\t\tdata.xRadius = this.xRadius;\r\n\t\tdata.yRadius = this.yRadius;\r\n\r\n\t\tdata.aStartAngle = this.aStartAngle;\r\n\t\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\t\tdata.aClockwise = this.aClockwise;\r\n\r\n\t\tdata.aRotation = this.aRotation;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.aX = json.aX;\r\n\t\tthis.aY = json.aY;\r\n\r\n\t\tthis.xRadius = json.xRadius;\r\n\t\tthis.yRadius = json.yRadius;\r\n\r\n\t\tthis.aStartAngle = json.aStartAngle;\r\n\t\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\t\tthis.aClockwise = json.aClockwise;\r\n\r\n\t\tthis.aRotation = json.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\tthis.type = 'ArcCurve';\r\n\r\n\t}\r\n\r\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\r\n\tArcCurve.prototype.constructor = ArcCurve;\r\n\r\n\tArcCurve.prototype.isArcCurve = true;\r\n\r\n\t/**\r\n\t * @author zz85 https://github.com/zz85\r\n\t *\r\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\r\n\t * cusps and self-intersections in non-uniform catmull rom curves.\r\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n\t *\r\n\t * curve.type accepts centripetal(default), chordal and catmullrom\r\n\t * curve.tension is used for catmullrom which defaults to 0.5\r\n\t */\r\n\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t\t/*\r\n\t\t * Compute coefficients for a cubic polynomial\r\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t\t * such that\r\n\t\t *   p(0) = x0, p(1) = x1\r\n\t\t *  and\r\n\t\t *   p'(0) = t0, p'(1) = t1.\r\n\t\t */\r\n\t\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\t\tc0 = x0;\r\n\t\t\tc1 = t0;\r\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\t\tt1 *= dt1;\r\n\t\t\t\tt2 *= dt1;\r\n\r\n\t\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tcalc: function ( t ) {\r\n\r\n\t\t\t\tvar t2 = t * t;\r\n\t\t\t\tvar t3 = t2 * t;\r\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar tmp = new Vector3();\r\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\r\n\r\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points || [];\r\n\t\tthis.closed = closed || false;\r\n\t\tthis.curveType = curveType || 'centripetal';\r\n\t\tthis.tension = tension || 0.5;\r\n\r\n\t}\r\n\r\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\r\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\r\n\r\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar l = points.length;\r\n\r\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tp1 = points[ intPoint % l ];\r\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\r\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\r\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Bezier Curves formulas obtained from\r\n\t * http://en.wikipedia.org/wiki/Bézier_curve\r\n\t */\r\n\r\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction QuadraticBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP1( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP2( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\r\n\r\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\r\n\t\t\tQuadraticBezierP2( t, p2 );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction CubicBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP1( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP2( t, p ) {\r\n\r\n\t\treturn 3 * ( 1 - t ) * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP3( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\r\n\t\t\tCubicBezierP3( t, p3 );\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\t\tthis.v3 = v3 || new Vector2();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\r\n\r\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\r\n\r\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\t\tthis.v3 = v3 || new Vector3();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\r\n\r\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\r\n\r\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\r\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve';\r\n\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tLineCurve.prototype = Object.create( Curve.prototype );\r\n\tLineCurve.prototype.constructor = LineCurve;\r\n\r\n\tLineCurve.prototype.isLineCurve = true;\r\n\r\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\r\n\r\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\t\treturn tangent.normalize();\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve3( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve3';\r\n\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tLineCurve3.prototype = Object.create( Curve.prototype );\r\n\tLineCurve3.prototype.constructor = LineCurve3;\r\n\r\n\tLineCurve3.prototype.isLineCurve3 = true;\r\n\r\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\r\n\r\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\r\n\r\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\r\n\r\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\r\n\r\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\r\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'SplineCurve';\r\n\r\n\t\tthis.points = points || [];\r\n\r\n\t}\r\n\r\n\tSplineCurve.prototype = Object.create( Curve.prototype );\r\n\tSplineCurve.prototype.constructor = SplineCurve;\r\n\r\n\tSplineCurve.prototype.isSplineCurve = true;\r\n\r\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar p = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar p1 = points[ intPoint ];\r\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tpoint.set(\r\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Curves = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tArcCurve: ArcCurve,\r\n\t\tCatmullRomCurve3: CatmullRomCurve3,\r\n\t\tCubicBezierCurve: CubicBezierCurve,\r\n\t\tCubicBezierCurve3: CubicBezierCurve3,\r\n\t\tEllipseCurve: EllipseCurve,\r\n\t\tLineCurve: LineCurve,\r\n\t\tLineCurve3: LineCurve3,\r\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\r\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\r\n\t\tSplineCurve: SplineCurve\r\n\t});\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tCurved Path - a curve path is simply a array of connected\r\n\t *  curves, but retains the api of a curve\r\n\t **************************************************************/\r\n\r\n\tfunction CurvePath() {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CurvePath';\r\n\r\n\t\tthis.curves = [];\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\r\n\t}\r\n\r\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\r\n\r\n\t\tconstructor: CurvePath,\r\n\r\n\t\tadd: function ( curve ) {\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t},\r\n\r\n\t\tclosePath: function () {\r\n\r\n\t\t\t// Add a line curve if start and end of lines are not connected\r\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// To get accurate point with reference to\r\n\t\t// entire path distance at time t,\r\n\t\t// following has to be done:\r\n\r\n\t\t// 1. Length of each sub path have to be known\r\n\t\t// 2. Locate and identify type of curve\r\n\t\t// 3. Get t for the curve\r\n\t\t// 4. Return curve.getPointAt(t')\r\n\r\n\t\tgetPoint: function ( t ) {\r\n\r\n\t\t\tvar d = t * this.getLength();\r\n\t\t\tvar curveLengths = this.getCurveLengths();\r\n\t\t\tvar i = 0;\r\n\r\n\t\t\t// To think about boundaries points.\r\n\r\n\t\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\t\tvar segmentLength = curve.getLength();\r\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n\r\n\t\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t\t},\r\n\r\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t\t// getPoint() depends on getLength\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lens = this.getCurveLengths();\r\n\t\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// cacheLengths must be recalculated.\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.cacheLengths = null;\r\n\t\t\tthis.getCurveLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Compute lengths and cache them\r\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\t\tgetCurveLengths: function () {\r\n\r\n\t\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\t\treturn this.cacheLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Get length of sub-curve\r\n\t\t\t// Push sums into cached array\r\n\r\n\t\t\tvar lengths = [], sums = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\t\tlengths.push( sums );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheLengths = lengths;\r\n\r\n\t\t\treturn lengths;\r\n\r\n\t\t},\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tdivisions = divisions || 12;\r\n\r\n\t\t\tvar points = [], last;\r\n\r\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\r\n\r\n\t\t\t\tvar curve = curves[ i ];\r\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\r\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\r\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\r\n\t\t\t\t\t\t\t: divisions;\r\n\r\n\t\t\t\tvar pts = curve.getPoints( resolution );\r\n\r\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\t\tvar point = pts[ j ];\r\n\r\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\r\n\r\n\t\t\t\t\tpoints.push( point );\r\n\t\t\t\t\tlast = point;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = source.curves[ i ];\r\n\r\n\t\t\t\tthis.curves.push( curve.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoClose = source.autoClose;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.autoClose = this.autoClose;\r\n\t\t\tdata.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\t\t\t\tdata.curves.push( curve.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.autoClose = json.autoClose;\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = json.curves[ i ];\r\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Creates free form 2d path using series of points, lines or curves.\r\n\t **/\r\n\r\n\tfunction Path( points ) {\r\n\r\n\t\tCurvePath.call( this );\r\n\r\n\t\tthis.type = 'Path';\r\n\r\n\t\tthis.currentPoint = new Vector2();\r\n\r\n\t\tif ( points ) {\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\r\n\r\n\t\tconstructor: Path,\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tvar curve = new QuadraticBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tvar curve = new CubicBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\t\tvar curve = new SplineCurve( npts );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurvePath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Defines a 2d shape plane using paths.\r\n\t **/\r\n\r\n\t// STEP 1 Create a path.\r\n\t// STEP 2 Turn path into shape.\r\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n\t// STEP 3a - Extract points from each shape, turn to vertices\r\n\t// STEP 3b - Triangulate each shape, add faces.\r\n\r\n\tfunction Shape( points ) {\r\n\r\n\t\tPath.call( this, points );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.type = 'Shape';\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t}\r\n\r\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\r\n\r\n\t\tconstructor: Shape,\r\n\r\n\t\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\t\tvar holesPts = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn holesPts;\r\n\r\n\t\t},\r\n\r\n\t\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\t\textractPoints: function ( divisions ) {\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tPath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = source.holes[ i ];\r\n\r\n\t\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Path.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = this.holes[ i ];\r\n\t\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tPath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.uuid = json.uuid;\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = json.holes[ i ];\r\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Light( color, intensity ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Light';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\t\tthis.receiveShadow = undefined;\r\n\r\n\t}\r\n\r\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Light,\r\n\r\n\t\tisLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.color.copy( source.color );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.color = this.color.getHex();\r\n\t\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\r\n\r\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\r\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\r\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\r\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\r\n\r\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLight.call( this, skyColor, intensity );\r\n\r\n\t\tthis.type = 'HemisphereLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.groundColor = new Color( groundColor );\r\n\r\n\t}\r\n\r\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLight,\r\n\r\n\t\tisHemisphereLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LightShadow( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.bias = 0;\r\n\t\tthis.radius = 1;\r\n\r\n\t\tthis.mapSize = new Vector2( 512, 512 );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.mapPass = null;\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t\tthis._frustum = new Frustum();\r\n\t\tthis._frameExtents = new Vector2( 1, 1 );\r\n\r\n\t\tthis._viewportCount = 1;\r\n\r\n\t\tthis._viewports = [\r\n\r\n\t\t\tnew Vector4( 0, 0, 1, 1 )\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( LightShadow.prototype, {\r\n\r\n\t\t_projScreenMatrix: new Matrix4(),\r\n\r\n\t\t_lightPositionWorld: new Vector3(),\r\n\r\n\t\t_lookTarget: new Vector3(),\r\n\r\n\t\tgetViewportCount: function () {\r\n\r\n\t\t\treturn this._viewportCount;\r\n\r\n\t\t},\r\n\r\n\t\tgetFrustum: function () {\r\n\r\n\t\t\treturn this._frustum;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tvar shadowCamera = this.camera,\r\n\t\t\t\tshadowMatrix = this.matrix,\r\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\r\n\t\t\t\tlookTarget = this._lookTarget,\r\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\r\n\r\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\r\n\r\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\tshadowCamera.lookAt( lookTarget );\r\n\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\r\n\r\n\t\t\tshadowMatrix.set(\r\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t);\r\n\r\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t},\r\n\r\n\t\tgetViewport: function ( viewportIndex ) {\r\n\r\n\t\t\treturn this._viewports[ viewportIndex ];\r\n\r\n\t\t},\r\n\r\n\t\tgetFrameExtents: function () {\r\n\r\n\t\t\treturn this._frameExtents;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.camera = source.camera.clone();\r\n\r\n\t\t\tthis.bias = source.bias;\r\n\t\t\tthis.radius = source.radius;\r\n\r\n\t\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\r\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\r\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\r\n\r\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\r\n\t\t\tdelete object.camera.matrix;\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction SpotLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: SpotLightShadow,\r\n\r\n\t\tisSpotLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tvar camera = this.camera;\r\n\r\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\r\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\r\n\t\t\tvar far = light.distance || camera.far;\r\n\r\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\t\tcamera.fov = fov;\r\n\t\t\t\tcamera.aspect = aspect;\r\n\t\t\t\tcamera.far = far;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'SpotLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / Math.PI;\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new SpotLightShadow();\r\n\r\n\t}\r\n\r\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: SpotLight,\r\n\r\n\t\tisSpotLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.angle = source.angle;\r\n\t\t\tthis.penumbra = source.penumbra;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction PointLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n\t\tthis._frameExtents = new Vector2( 4, 2 );\r\n\r\n\t\tthis._viewportCount = 6;\r\n\r\n\t\tthis._viewports = [\r\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t// following orientation:\r\n\t\t\t//\r\n\t\t\t//  xzXZ\r\n\t\t\t//   y Y\r\n\t\t\t//\r\n\t\t\t// X - Positive x direction\r\n\t\t\t// x - Negative x direction\r\n\t\t\t// Y - Positive y direction\r\n\t\t\t// y - Negative y direction\r\n\t\t\t// Z - Positive z direction\r\n\t\t\t// z - Negative z direction\r\n\r\n\t\t\t// positive X\r\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\r\n\t\t\t// negative X\r\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\r\n\t\t\t// positive Z\r\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\r\n\t\t\t// negative Z\r\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\r\n\t\t\t// positive Y\r\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\r\n\t\t\t// negative Y\r\n\t\t\tnew Vector4( 1, 0, 1, 1 )\r\n\t\t];\r\n\r\n\t\tthis._cubeDirections = [\r\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\r\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\r\n\t\tthis._cubeUps = [\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: PointLightShadow,\r\n\r\n\t\tisPointLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light, viewportIndex ) {\r\n\r\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\r\n\r\n\t\t\tvar camera = this.camera,\r\n\t\t\t\tshadowMatrix = this.matrix,\r\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\r\n\t\t\t\tlookTarget = this._lookTarget,\r\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\r\n\r\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tcamera.position.copy( lightPositionWorld );\r\n\r\n\t\t\tlookTarget.copy( camera.position );\r\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\r\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\r\n\t\t\tcamera.lookAt( lookTarget );\r\n\t\t\tcamera.updateMatrixWorld();\r\n\r\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\r\n\r\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction PointLight( color, intensity, distance, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'PointLight';\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new PointLightShadow();\r\n\r\n\t}\r\n\r\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: PointLight,\r\n\r\n\t\tisPointLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author arose / http://github.com/arose\r\n\t */\r\n\r\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\r\n\t\tthis.right = ( right !== undefined ) ? right : 1;\r\n\t\tthis.top = ( top !== undefined ) ? top : 1;\r\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: OrthographicCamera,\r\n\r\n\t\tisOrthographicCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.left = source.left;\r\n\t\t\tthis.right = source.right;\r\n\t\t\tthis.top = source.top;\r\n\t\t\tthis.bottom = source.bottom;\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\r\n\t\t\tthis.zoom = source.zoom;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\t\tvar left = cx - dx;\r\n\t\t\tvar right = cx + dx;\r\n\t\t\tvar top = cy + dy;\r\n\t\t\tvar bottom = cy - dy;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\r\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\r\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\r\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\r\n\r\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\r\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\r\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\r\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\t\t\tdata.object.left = this.left;\r\n\t\t\tdata.object.right = this.right;\r\n\t\t\tdata.object.top = this.top;\r\n\t\t\tdata.object.bottom = this.bottom;\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\r\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectionalLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLightShadow,\r\n\r\n\t\tisDirectionalLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DirectionalLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'DirectionalLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.shadow = new DirectionalLightShadow();\r\n\r\n\t}\r\n\r\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLight,\r\n\r\n\t\tisDirectionalLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AmbientLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'AmbientLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t}\r\n\r\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: AmbientLight,\r\n\r\n\t\tisAmbientLight: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\tfunction RectAreaLight( color, intensity, width, height ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'RectAreaLight';\r\n\r\n\t\tthis.width = ( width !== undefined ) ? width : 10;\r\n\t\tthis.height = ( height !== undefined ) ? height : 10;\r\n\r\n\t}\r\n\r\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: RectAreaLight,\r\n\r\n\t\tisRectAreaLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.width = this.width;\r\n\t\t\tdata.object.height = this.height;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction MaterialLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t\tthis.textures = {};\r\n\r\n\t}\r\n\r\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: MaterialLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar textures = this.textures;\r\n\r\n\t\t\tfunction getTexture( name ) {\r\n\r\n\t\t\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn textures[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar material = new Materials[ json.type ]();\r\n\r\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\r\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\r\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\r\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\r\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\r\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\r\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\r\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\r\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\r\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\r\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\r\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\r\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\r\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\r\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\r\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\r\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\r\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\r\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\r\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\r\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\r\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\r\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\r\n\r\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\r\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\r\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\r\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\r\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\r\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\r\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\r\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\r\n\r\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\r\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\r\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\r\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\r\n\r\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\r\n\r\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\r\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\r\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\r\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\r\n\r\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\r\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\r\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\r\n\r\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\r\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\r\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\r\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\r\n\r\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\r\n\r\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\r\n\r\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\r\n\r\n\t\t\t// Shader Material\r\n\r\n\t\t\tif ( json.uniforms !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in json.uniforms ) {\r\n\r\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\r\n\r\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\r\n\r\n\t\t\t\t\tswitch ( uniform.type ) {\r\n\r\n\t\t\t\t\t\tcase 't':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v2':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'm3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\r\n\r\n\t\t\t\t\t\tcase 'm4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\r\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\r\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\r\n\r\n\t\t\tif ( json.extensions !== undefined ) {\r\n\r\n\t\t\t\tfor ( var key in json.extensions ) {\r\n\r\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Deprecated\r\n\r\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\r\n\r\n\t\t\t// for PointsMaterial\r\n\r\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\r\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\r\n\r\n\t\t\t// maps\r\n\r\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\r\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\r\n\r\n\t\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\r\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\r\n\r\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\r\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\r\n\t\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\r\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\r\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\r\n\r\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\r\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\r\n\r\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\r\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\r\n\r\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\r\n\r\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\r\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\r\n\r\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\r\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\r\n\r\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\r\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\r\n\r\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\r\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\r\n\r\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\r\n\r\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\r\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t},\r\n\r\n\t\tsetTextures: function ( value ) {\r\n\r\n\t\t\tthis.textures = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Don McCurdy / https://www.donmccurdy.com\r\n\t */\r\n\r\n\tvar LoaderUtils = {\r\n\r\n\t\tdecodeText: function ( array ) {\r\n\r\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\r\n\r\n\t\t\t\treturn new TextDecoder().decode( array );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n\t\t\tvar s = '';\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// Implicitly assumes little-endian.\r\n\t\t\t\ts += String.fromCharCode( array[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\t// merges multi-byte utf-8 characters.\r\n\r\n\t\t\t\treturn decodeURIComponent( escape( s ) );\r\n\r\n\t\t\t} catch ( e ) { // see #16358\r\n\r\n\t\t\t\treturn s;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tvar index = url.lastIndexOf( '/' );\r\n\r\n\t\t\tif ( index === - 1 ) { return './'; }\r\n\r\n\t\t\treturn url.substr( 0, index + 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferGeometry() {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.maxInstancedCount = undefined;\r\n\r\n\t}\r\n\r\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferGeometry,\r\n\r\n\t\tisInstancedBufferGeometry: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\r\n\r\n\t\t\tdata.isInstancedBufferGeometry = true;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\r\n\r\n\t\tif ( typeof ( normalized ) === 'number' ) {\r\n\r\n\t\t\tmeshPerAttribute = normalized;\r\n\r\n\t\t\tnormalized = false;\r\n\r\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\r\n\r\n\t\t}\r\n\r\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferAttribute,\r\n\r\n\t\tisInstancedBufferAttribute: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ()\t{\r\n\r\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\t\tdata.isInstancedBufferAttribute = true;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferGeometryLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometryLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\r\n\r\n\t\t\tvar index = json.data.index;\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = json.data.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\r\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\r\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\r\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = json.data.morphAttributes;\r\n\r\n\t\t\tif ( morphAttributes ) {\r\n\r\n\t\t\t\tfor ( var key in morphAttributes ) {\r\n\r\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\r\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\r\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\r\n\t\t\t\t\t\tarray.push( bufferAttribute );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\r\n\r\n\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\tgeometry.morphTargetsRelative = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\t\tvar center = new Vector3();\r\n\r\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.name ) { geometry.name = json.name; }\r\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TYPED_ARRAYS = {\r\n\t\tInt8Array: Int8Array,\r\n\t\tUint8Array: Uint8Array,\r\n\t\t// Workaround for IE11 pre KB2929437. See #11440\r\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\r\n\t\tInt16Array: Int16Array,\r\n\t\tUint16Array: Uint16Array,\r\n\t\tInt32Array: Int32Array,\r\n\t\tUint32Array: Uint32Array,\r\n\t\tFloat32Array: Float32Array,\r\n\t\tFloat64Array: Float64Array\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ObjectLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ObjectLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\t\t\tthis.resourcePath = this.resourcePath || path;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json = null;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\r\n\r\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.parse( json, onLoad );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json, onLoad ) {\r\n\r\n\t\t\tvar shapes = this.parseShape( json.shapes );\r\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\r\n\r\n\t\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tvar textures = this.parseTextures( json.textures, images );\r\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\t\tif ( json.animations ) {\r\n\r\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t},\r\n\r\n\t\tparseShape: function ( json ) {\r\n\r\n\t\t\tvar shapes = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\r\n\r\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t},\r\n\r\n\t\tparseGeometries: function ( json, shapes ) {\r\n\r\n\t\t\tvar geometries = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar geometry;\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ConeGeometry':\r\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TubeGeometry':\r\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\r\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.closed\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'LatheGeometry':\r\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\r\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.vertices,\r\n\t\t\t\t\t\t\t\tdata.indices,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.details\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ShapeGeometry':\r\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.curveSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\r\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\r\n\r\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.options\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BufferGeometry':\r\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\r\n\r\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\r\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\r\n\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\r\n\r\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometries;\r\n\r\n\t\t},\r\n\r\n\t\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\t\tvar cache = {}; // MultiMaterial\r\n\t\t\tvar materials = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar loader = new MaterialLoader();\r\n\t\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\r\n\r\n\t\t\t\t\t\t// Deprecated\r\n\r\n\t\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materials;\r\n\r\n\t\t},\r\n\r\n\t\tparseAnimations: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( data );\r\n\r\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t},\r\n\r\n\t\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\t\tvar scope = this;\r\n\t\t\tvar images = {};\r\n\r\n\t\t\tfunction loadImage( url ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, undefined, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\t\tvar manager = new LoadingManager( onLoad );\r\n\r\n\t\t\t\tvar loader = new ImageLoader( manager );\r\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar image = json[ i ];\r\n\t\t\t\t\tvar url = image.url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\t\t\t// load array of images e.g CubeTexture\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\r\n\r\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\r\n\r\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// load single image\r\n\r\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn images;\r\n\r\n\t\t},\r\n\r\n\t\tparseTextures: function ( json, images ) {\r\n\r\n\t\t\tfunction parseConstant( value, type ) {\r\n\r\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\t\treturn type[ value ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar texture;\r\n\r\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\r\n\r\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\r\n\r\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\r\n\r\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\r\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\r\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\r\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\r\n\r\n\t\t\t\t\tif ( data.wrap !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\r\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\r\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\r\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\r\n\r\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\r\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\r\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\r\n\r\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\r\n\r\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\r\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\r\n\r\n\t\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures;\r\n\r\n\t\t},\r\n\r\n\t\tparseObject: function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) { return undefined; }\r\n\r\n\t\t\t\tif ( Array.isArray( name ) ) {\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar uuid = name[ i ];\r\n\r\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new Scene();\r\n\r\n\t\t\t\t\tif ( data.background !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\r\n\r\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.fog !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\r\n\r\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\r\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\r\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\r\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\r\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\r\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RectAreaLight':\r\n\r\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SkinnedMesh':\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'InstancedMesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\t\t\t\t\tvar count = data.count;\r\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\r\n\r\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\r\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineLoop':\r\n\r\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineSegments':\r\n\r\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\r\n\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tobject.matrix.fromArray( data.matrix );\r\n\r\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\r\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\r\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\r\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\r\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\r\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\r\n\r\n\t\t\tif ( data.shadow ) {\r\n\r\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\r\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\r\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\r\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\r\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\r\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\r\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\r\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\r\n\r\n\t\t\tif ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tvar children = data.children;\r\n\r\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TEXTURE_MAPPING = {\r\n\t\tUVMapping: UVMapping,\r\n\t\tCubeReflectionMapping: CubeReflectionMapping,\r\n\t\tCubeRefractionMapping: CubeRefractionMapping,\r\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\r\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\r\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\r\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\r\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\r\n\t};\r\n\r\n\tvar TEXTURE_WRAPPING = {\r\n\t\tRepeatWrapping: RepeatWrapping,\r\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\r\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\r\n\t};\r\n\r\n\tvar TEXTURE_FILTER = {\r\n\t\tNearestFilter: NearestFilter,\r\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\r\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\r\n\t\tLinearFilter: LinearFilter,\r\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\r\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\r\n\t};\r\n\r\n\t/**\r\n\t * @author thespite / http://clicktorelease.com/\r\n\t */\r\n\r\n\r\n\tfunction ImageBitmapLoader( manager ) {\r\n\r\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof fetch === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t\tthis.options = undefined;\r\n\r\n\t}\r\n\r\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ImageBitmapLoader,\r\n\r\n\t\tsetOptions: function setOptions( options ) {\r\n\r\n\t\t\tthis.options = options;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) { url = ''; }\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfetch( url ).then( function ( res ) {\r\n\r\n\t\t\t\treturn res.blob();\r\n\r\n\t\t\t} ).then( function ( blob ) {\r\n\r\n\t\t\t\tif ( scope.options === undefined ) {\r\n\r\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\r\n\t\t\t\t\treturn createImageBitmap( blob );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} ).then( function ( imageBitmap ) {\r\n\r\n\t\t\t\tCache.add( url, imageBitmap );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} ).catch( function ( e ) {\r\n\r\n\t\t\t\tif ( onError ) { onError( e ); }\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\r\n\t **/\r\n\r\n\tfunction ShapePath() {\r\n\r\n\t\tthis.type = 'ShapePath';\r\n\r\n\t\tthis.color = new Color();\r\n\r\n\t\tthis.subPaths = [];\r\n\t\tthis.currentPath = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( ShapePath.prototype, {\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath = new Path();\r\n\t\t\tthis.subPaths.push( this.currentPath );\r\n\t\t\tthis.currentPath.moveTo( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath.lineTo( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts ) {\r\n\r\n\t\t\tthis.currentPath.splineThru( pts );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoShapes: function ( isCCW, noHoles ) {\r\n\r\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\t\tvar shapes = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\t\tvar tmpShape = new Shape();\r\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\t\tvar inside = false;\r\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\r\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t// not parallel\r\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\r\n\r\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\r\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\r\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\r\n\t\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tinside;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\r\n\r\n\t\t\tvar subPaths = this.subPaths;\r\n\t\t\tif ( subPaths.length === 0 ) { return []; }\r\n\r\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\r\n\r\n\r\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\t\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\t\ttmpShape = new Shape();\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\t\tvar betterShapeHoles = [];\r\n\t\t\tvar newShapes = [];\r\n\t\t\tvar newShapeHoles = [];\r\n\t\t\tvar mainIdx = 0;\r\n\t\t\tvar tmpPoints;\r\n\r\n\t\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\t\tif ( solid ) {\r\n\r\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\r\n\r\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\r\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\r\n\r\n\r\n\t\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\t\tvar ambiguous = false;\r\n\t\t\t\tvar toChange = [];\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\r\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tmpHoles;\r\n\r\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction Font( data ) {\r\n\r\n\t\tthis.type = 'Font';\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\tObject.assign( Font.prototype, {\r\n\r\n\t\tisFont: true,\r\n\r\n\t\tgenerateShapes: function ( text, size ) {\r\n\r\n\t\t\tif ( size === undefined ) { size = 100; }\r\n\r\n\t\t\tvar shapes = [];\r\n\t\t\tvar paths = createPaths( text, size, this.data );\r\n\r\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction createPaths( text, size, data ) {\r\n\r\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\r\n\t\tvar scale = size / data.resolution;\r\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\r\n\r\n\t\tvar paths = [];\r\n\r\n\t\tvar offsetX = 0, offsetY = 0;\r\n\r\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\tvar char = chars[ i ];\r\n\r\n\t\t\tif ( char === '\\n' ) {\r\n\r\n\t\t\t\toffsetX = 0;\r\n\t\t\t\toffsetY -= line_height;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\r\n\t\t\t\toffsetX += ret.offsetX;\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\r\n\t}\r\n\r\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\r\n\r\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\r\n\r\n\t\tif ( ! glyph ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar path = new ShapePath();\r\n\r\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { offsetX: glyph.ha * scale, path: path };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction FontLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: FontLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar font = scope.parse( json );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\treturn new Font( json );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _context;\r\n\r\n\tvar AudioContext = {\r\n\r\n\t\tgetContext: function () {\r\n\r\n\t\t\tif ( _context === undefined ) {\r\n\r\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn _context;\r\n\r\n\t\t},\r\n\r\n\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t_context = value;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction AudioLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: AudioLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\r\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\r\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\r\n\r\n\t\t\t\tvar context = AudioContext.getContext();\r\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\r\n\r\n\t\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Primary reference:\r\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\t *\r\n\t * Secondary reference:\r\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\r\n\t */\r\n\r\n\t// 3-band SH defined by 9 coefficients\r\n\r\n\tfunction SphericalHarmonics3() {\r\n\r\n\t\tthis.coefficients = [];\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients.push( new Vector3() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( SphericalHarmonics3.prototype, {\r\n\r\n\t\tisSphericalHarmonics3: true,\r\n\r\n\t\tset: function ( coefficients ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tzero: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// get the radiance in the direction of the normal\r\n\t\t// target is a Vector3\r\n\t\tgetAt: function ( normal, target ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\tvar coeff = this.coefficients;\r\n\r\n\t\t\t// band 0\r\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\r\n\r\n\t\t\t// band 1\r\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\r\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\r\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\r\n\r\n\t\t\t// band 2\r\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\r\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\r\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\r\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\r\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\r\n\t\t// target is a Vector3\r\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\t\tgetIrradianceAt: function ( normal, target ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\tvar coeff = this.coefficients;\r\n\r\n\t\t\t// band 0\r\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\r\n\r\n\t\t\t// band 1\r\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\r\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\r\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\r\n\r\n\t\t\t// band 2\r\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\r\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\r\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\r\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\r\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( sh ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\tscale: function ( s ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( sh, alpha ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sh ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sh ) {\r\n\r\n\t\t\treturn this.set( sh.coefficients );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar coefficients = this.coefficients;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar coefficients = this.coefficients;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( SphericalHarmonics3, {\r\n\r\n\t\t// evaluate the basis functions\r\n\t\t// shBasis is an Array[ 9 ]\r\n\t\tgetBasisAt: function ( normal, shBasis ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\t// band 0\r\n\t\t\tshBasis[ 0 ] = 0.282095;\r\n\r\n\t\t\t// band 1\r\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\r\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\r\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\r\n\r\n\t\t\t// band 2\r\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\r\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\r\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\r\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\r\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * A LightProbe is a source of indirect-diffuse light\r\n\t */\r\n\r\n\tfunction LightProbe( sh, intensity ) {\r\n\r\n\t\tLight.call( this, undefined, intensity );\r\n\r\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\r\n\r\n\t}\r\n\r\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: LightProbe,\r\n\r\n\t\tisLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.sh.copy( source.sh );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLightProbe.call( this, undefined, intensity );\r\n\r\n\t\tvar color1 = new Color().set( skyColor );\r\n\t\tvar color2 = new Color().set( groundColor );\r\n\r\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\r\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\r\n\r\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\r\n\t\tvar c0 = Math.sqrt( Math.PI );\r\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\r\n\r\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\r\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\r\n\r\n\t}\r\n\r\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLightProbe,\r\n\r\n\t\tisHemisphereLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) { // modifying colors not currently supported\r\n\r\n\t\t\tLightProbe.prototype.copy.call( this, source );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction AmbientLightProbe( color, intensity ) {\r\n\r\n\t\tLightProbe.call( this, undefined, intensity );\r\n\r\n\t\tvar color1 = new Color().set( color );\r\n\r\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\r\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\r\n\r\n\t}\r\n\r\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\r\n\r\n\t\tconstructor: AmbientLightProbe,\r\n\r\n\t\tisAmbientLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) { // modifying color not currently supported\r\n\r\n\t\t\tLightProbe.prototype.copy.call( this, source );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _eyeRight = new Matrix4();\r\n\tvar _eyeLeft = new Matrix4();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction StereoCamera() {\r\n\r\n\t\tthis.type = 'StereoCamera';\r\n\r\n\t\tthis.aspect = 1;\r\n\r\n\t\tthis.eyeSep = 0.064;\r\n\r\n\t\tthis.cameraL = new PerspectiveCamera();\r\n\t\tthis.cameraL.layers.enable( 1 );\r\n\t\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\t\tthis.cameraR = new PerspectiveCamera();\r\n\t\tthis.cameraR.layers.enable( 2 );\r\n\t\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n\t\tthis._cache = {\r\n\t\t\tfocus: null,\r\n\t\t\tfov: null,\r\n\t\t\taspect: null,\r\n\t\t\tnear: null,\r\n\t\t\tfar: null,\r\n\t\t\tzoom: null,\r\n\t\t\teyeSep: null\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( StereoCamera.prototype, {\r\n\r\n\t\tupdate: function ( camera ) {\r\n\r\n\t\t\tvar cache = this._cache;\r\n\r\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\r\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\r\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\r\n\r\n\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\tcache.focus = camera.focus;\r\n\t\t\t\tcache.fov = camera.fov;\r\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\r\n\t\t\t\tcache.near = camera.near;\r\n\t\t\t\tcache.far = camera.far;\r\n\t\t\t\tcache.zoom = camera.zoom;\r\n\t\t\t\tcache.eyeSep = this.eyeSep;\r\n\r\n\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\r\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\r\n\t\t\t\tvar ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\r\n\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\r\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\r\n\r\n\t\t\t\t// for left eye\r\n\r\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t// for right eye\r\n\r\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\r\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Clock( autoStart ) {\r\n\r\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\r\n\t\tthis.running = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( Clock.prototype, {\r\n\r\n\t\tstart: function () {\r\n\r\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\r\n\r\n\t\t\tthis.oldTime = this.startTime;\r\n\t\t\tthis.elapsedTime = 0;\r\n\t\t\tthis.running = true;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis.getElapsedTime();\r\n\t\t\tthis.running = false;\r\n\t\t\tthis.autoStart = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetElapsedTime: function () {\r\n\r\n\t\t\tthis.getDelta();\r\n\t\t\treturn this.elapsedTime;\r\n\r\n\t\t},\r\n\r\n\t\tgetDelta: function () {\r\n\r\n\t\t\tvar diff = 0;\r\n\r\n\t\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\t\tthis.start();\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.running ) {\r\n\r\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\r\n\r\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn diff;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _position$2 = new Vector3();\r\n\tvar _quaternion$3 = new Quaternion();\r\n\tvar _scale$1 = new Vector3();\r\n\tvar _orientation = new Vector3();\r\n\r\n\tfunction AudioListener() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'AudioListener';\r\n\r\n\t\tthis.context = AudioContext.getContext();\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\r\n\t\tthis.filter = null;\r\n\r\n\t\tthis.timeDelta = 0;\r\n\r\n\t\t// private\r\n\r\n\t\tthis._clock = new Clock();\r\n\r\n\t}\r\n\r\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: AudioListener,\r\n\r\n\t\tgetInput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tremoveFilter: function ( ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\t\tthis.filter = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.filter;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( value ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filter = value;\r\n\t\t\tthis.gain.connect( this.filter );\r\n\t\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMasterVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetMasterVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\r\n\t\t\tthis.timeDelta = this._clock.getDelta();\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\r\n\r\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\r\n\r\n\t\t\tif ( listener.positionX ) {\r\n\r\n\t\t\t\t// code path for Chrome (see #14393)\r\n\r\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\r\n\r\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\r\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\r\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\r\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\r\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\r\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\r\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\r\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\r\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\r\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction Audio( listener ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Audio';\r\n\r\n\t\tthis.listener = listener;\r\n\t\tthis.context = listener.context;\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( listener.getInput() );\r\n\r\n\t\tthis.autoplay = false;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.detune = 0;\r\n\t\tthis.loop = false;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopEnd = 0;\r\n\t\tthis.offset = 0;\r\n\t\tthis.duration = undefined;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.hasPlaybackControl = true;\r\n\t\tthis.sourceType = 'empty';\r\n\r\n\t\tthis._startedAt = 0;\r\n\t\tthis._pausedAt = 0;\r\n\r\n\t\tthis.filters = [];\r\n\r\n\t}\r\n\r\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Audio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tsetNodeSource: function ( audioNode ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'audioNode';\r\n\t\t\tthis.source = audioNode;\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaElementSource: function ( mediaElement ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaNode';\r\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaStreamSource: function ( mediaStream ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaStreamNode';\r\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetBuffer: function ( audioBuffer ) {\r\n\r\n\t\t\tthis.buffer = audioBuffer;\r\n\t\t\tthis.sourceType = 'buffer';\r\n\r\n\t\t\tif ( this.autoplay ) { this.play(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tplay: function ( delay ) {\r\n\r\n\t\t\tif ( delay === undefined ) { delay = 0; }\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._startedAt = this.context.currentTime + delay;\r\n\r\n\t\t\tvar source = this.context.createBufferSource();\r\n\t\t\tsource.buffer = this.buffer;\r\n\t\t\tsource.loop = this.loop;\r\n\t\t\tsource.loopStart = this.loopStart;\r\n\t\t\tsource.loopEnd = this.loopEnd;\r\n\t\t\tsource.onended = this.onEnded.bind( this );\r\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\r\n\r\n\t\t\tthis.isPlaying = true;\r\n\r\n\t\t\tthis.source = source;\r\n\r\n\t\t\tthis.setDetune( this.detune );\r\n\t\t\tthis.setPlaybackRate( this.playbackRate );\r\n\r\n\t\t\treturn this.connect();\r\n\r\n\t\t},\r\n\r\n\t\tpause: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\r\n\r\n\t\t\t\tthis.source.stop();\r\n\t\t\t\tthis.source.onended = null;\r\n\r\n\t\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pausedAt = 0;\r\n\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.source.onended = null;\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdisconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilters: function () {\r\n\r\n\t\t\treturn this.filters;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilters: function ( value ) {\r\n\r\n\t\t\tif ( ! value ) { value = []; }\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.disconnect();\r\n\t\t\t\tthis.filters = value;\r\n\t\t\t\tthis.connect();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.filters = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDetune: function ( value ) {\r\n\r\n\t\t\tthis.detune = value;\r\n\r\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDetune: function () {\r\n\r\n\t\t\treturn this.detune;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( filter ) {\r\n\r\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t\t},\r\n\r\n\t\tsetPlaybackRate: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.playbackRate = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetPlaybackRate: function () {\r\n\r\n\t\t\treturn this.playbackRate;\r\n\r\n\t\t},\r\n\r\n\t\tonEnded: function () {\r\n\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetLoop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.loop;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.loop = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.loop = this.loop;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoopStart: function ( value ) {\r\n\r\n\t\t\tthis.loopStart = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoopEnd: function ( value ) {\r\n\r\n\t\t\tthis.loopEnd = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _position$3 = new Vector3();\r\n\tvar _quaternion$4 = new Quaternion();\r\n\tvar _scale$2 = new Vector3();\r\n\tvar _orientation$1 = new Vector3();\r\n\r\n\tfunction PositionalAudio( listener ) {\r\n\r\n\t\tAudio.call( this, listener );\r\n\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.panningModel = 'HRTF';\r\n\t\tthis.panner.connect( this.gain );\r\n\r\n\t}\r\n\r\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\r\n\r\n\t\tconstructor: PositionalAudio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.panner;\r\n\r\n\t\t},\r\n\r\n\t\tgetRefDistance: function () {\r\n\r\n\t\t\treturn this.panner.refDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetRefDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.refDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetRolloffFactor: function () {\r\n\r\n\t\t\treturn this.panner.rolloffFactor;\r\n\r\n\t\t},\r\n\r\n\t\tsetRolloffFactor: function ( value ) {\r\n\r\n\t\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDistanceModel: function () {\r\n\r\n\t\t\treturn this.panner.distanceModel;\r\n\r\n\t\t},\r\n\r\n\t\tsetDistanceModel: function ( value ) {\r\n\r\n\t\t\tthis.panner.distanceModel = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxDistance: function () {\r\n\r\n\t\t\treturn this.panner.maxDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetMaxDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.maxDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\r\n\r\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\r\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\r\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\r\n\r\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\r\n\r\n\t\t\tvar panner = this.panner;\r\n\r\n\t\t\tif ( panner.positionX ) {\r\n\r\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\r\n\r\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\r\n\r\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\r\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\r\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\r\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\r\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\r\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\r\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AudioAnalyser( audio, fftSize ) {\r\n\r\n\t\tthis.analyser = audio.context.createAnalyser();\r\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\t\taudio.getOutput().connect( this.analyser );\r\n\r\n\t}\r\n\r\n\tObject.assign( AudioAnalyser.prototype, {\r\n\r\n\t\tgetFrequencyData: function () {\r\n\r\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\t\treturn this.data;\r\n\r\n\t\t},\r\n\r\n\t\tgetAverageFrequency: function () {\r\n\r\n\t\t\tvar value = 0, data = this.getFrequencyData();\r\n\r\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tvalue += data[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value / data.length;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Buffered scene graph property that allows weighted accumulation.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\r\n\r\n\t\tthis.binding = binding;\r\n\t\tthis.valueSize = valueSize;\r\n\r\n\t\tvar bufferType = Float64Array,\r\n\t\t\tmixFunction;\r\n\r\n\t\tswitch ( typeName ) {\r\n\r\n\t\t\tcase 'quaternion':\r\n\t\t\t\tmixFunction = this._slerp;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'bool':\r\n\t\t\t\tbufferType = Array;\r\n\t\t\t\tmixFunction = this._select;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t\t}\r\n\r\n\t\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t\t//\r\n\t\t// interpolators can use .buffer as their .result\r\n\t\t// the data then goes to 'incoming'\r\n\t\t//\r\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t\t// the cumulative result and are compared to detect\r\n\t\t// changes\r\n\t\t//\r\n\t\t// 'orig' stores the original state of the property\r\n\r\n\t\tthis._mixBufferRegion = mixFunction;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tthis.useCount = 0;\r\n\t\tthis.referenceCount = 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyMixer.prototype, {\r\n\r\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\t\taccumulate: function ( accuIndex, weight ) {\r\n\r\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentWeight = weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\t\tcurrentWeight += weight;\r\n\t\t\t\tvar mix = weight / currentWeight;\r\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\t\tapply: function ( accuIndex ) {\r\n\r\n\t\t\tvar stride = this.valueSize,\r\n\t\t\t\tbuffer = this.buffer,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\t\tbinding = this.binding;\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remember the state of the bound property and copy it to both accus\r\n\t\tsaveOriginalState: function () {\r\n\r\n\t\t\tvar binding = this.binding;\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\t\trestoreOriginalState: function () {\r\n\r\n\t\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// mix functions\r\n\r\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t\t},\r\n\r\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tvar s = 1 - t;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A reference to a real property in the scene graph.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\t// Characters [].:/ are reserved for track binding syntax.\r\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\r\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\r\n\r\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\r\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\r\n\t// instead, we exclude reserved characters and match everything else.\r\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\r\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\r\n\r\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\r\n\t// be matched to parse the rest of the track name.\r\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\r\n\r\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\r\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\r\n\r\n\t// Object on target node, and accessor. May not contain reserved\r\n\t// characters. Accessor may contain any character except closing bracket.\r\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\r\n\r\n\t// Property and accessor. May not contain reserved characters. Accessor may\r\n\t// contain any non-bracket characters.\r\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\r\n\r\n\tvar _trackRe = new RegExp( ''\r\n\t\t+ '^'\r\n\t\t+ _directoryRe\r\n\t\t+ _nodeRe\r\n\t\t+ _objectRe\r\n\t\t+ _propertyRe\r\n\t\t+ '$'\r\n\t);\r\n\r\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\r\n\r\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\r\n\r\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis._targetGroup = targetGroup;\r\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n\t}\r\n\r\n\tObject.assign( Composite.prototype, {\r\n\r\n\t\tgetValue: function ( array, offset ) {\r\n\r\n\t\t\tthis.bind(); // bind all binding\r\n\r\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t\t// and only call .getValue on the first\r\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function ( array, offset ) {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].bind();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\r\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\r\n\r\n\t\tthis.path = path;\r\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\t\tthis.rootNode = rootNode;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyBinding, {\r\n\r\n\t\tComposite: Composite,\r\n\r\n\t\tcreate: function ( root, path, parsedPath ) {\r\n\r\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\r\n\r\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Replaces spaces with underscores and removes unsupported characters from\r\n\t\t * node names, to ensure compatibility with parseTrackName().\r\n\t\t *\r\n\t\t * @param {string} name Node name to be sanitized.\r\n\t\t * @return {string}\r\n\t\t */\r\n\t\tsanitizeNodeName: function ( name ) {\r\n\r\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\r\n\r\n\t\t},\r\n\r\n\t\tparseTrackName: function ( trackName ) {\r\n\r\n\t\t\tvar matches = _trackRe.exec( trackName );\r\n\r\n\t\t\tif ( ! matches ) {\r\n\r\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar results = {\r\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\r\n\t\t\t\tnodeName: matches[ 2 ],\r\n\t\t\t\tobjectName: matches[ 3 ],\r\n\t\t\t\tobjectIndex: matches[ 4 ],\r\n\t\t\t\tpropertyName: matches[ 5 ], // required\r\n\t\t\t\tpropertyIndex: matches[ 6 ]\r\n\t\t\t};\r\n\r\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\r\n\r\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\r\n\r\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\r\n\r\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\r\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\r\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\r\n\t\t\t\t// include '.' characters).\r\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\r\n\r\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\r\n\t\t\t\t\tresults.objectName = objectName;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\r\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn results;\r\n\r\n\t\t},\r\n\r\n\t\tfindNode: function ( root, nodeName ) {\r\n\r\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\t\t\treturn root;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into skeleton bones.\r\n\t\t\tif ( root.skeleton ) {\r\n\r\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\r\n\r\n\t\t\t\tif ( bone !== undefined ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into node subtree.\r\n\t\t\tif ( root.children ) {\r\n\r\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar childNode = children[ i ];\r\n\r\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\t\t\tif ( result ) { return result; }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\t\t\tif ( subTreeNode ) {\r\n\r\n\t\t\t\t\treturn subTreeNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t\t// these are used to \"bind\" a nonexistent property\r\n\t\t_getValue_unavailable: function () {},\r\n\t\t_setValue_unavailable: function () {},\r\n\r\n\t\tBindingType: {\r\n\t\t\tDirect: 0,\r\n\t\t\tEntireArray: 1,\r\n\t\t\tArrayElement: 2,\r\n\t\t\tHasFromToArray: 3\r\n\t\t},\r\n\r\n\t\tVersioning: {\r\n\t\t\tNone: 0,\r\n\t\t\tNeedsUpdate: 1,\r\n\t\t\tMatrixWorldNeedsUpdate: 2\r\n\t\t},\r\n\r\n\t\tGetterByBindingType: [\r\n\r\n\t\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t],\r\n\r\n\t\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t\t[\r\n\t\t\t\t// Direct\r\n\r\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// EntireArray\r\n\r\n\t\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// ArrayElement\r\n\r\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// HasToFromArray\r\n\r\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t]\r\n\r\n\t\t],\r\n\r\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t\t// prototype version of these methods with one that represents\r\n\t\t\t// the bound state. When the property is not found, the methods\r\n\t\t\t// become no-ops.\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t\t},\r\n\r\n\t\t// create getter / setter pair for a property in the scene graph\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar targetObject = this.node,\r\n\t\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\t\tthis.node = targetObject;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set fail state so we can just 'return' on error\r\n\t\t\tthis.getValue = this._getValue_unavailable;\r\n\t\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n\t\t\t// ensure there is a value node\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectName ) {\r\n\r\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// resolve property\r\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\t\tif ( nodeProperty === undefined ) {\r\n\r\n\t\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\r\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine versioning scheme\r\n\t\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\r\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine how the property gets bound\r\n\t\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\t\tif ( propertyIndex !== undefined ) {\r\n\r\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\r\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\r\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\r\n\r\n\t\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select getter / setter\r\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tthis.node = null;\r\n\r\n\t\t\t// back to the prototype version of getValue / setValue\r\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\t\tthis.getValue = this._getValue_unbound;\r\n\t\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( PropertyBinding.prototype, {\r\n\r\n\t\t// initial state of these methods that calls 'bind'\r\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\r\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A group of objects that receives a shared animation state.\r\n\t *\r\n\t * Usage:\r\n\t *\r\n\t *  - Add objects you would otherwise pass as 'root' to the\r\n\t *    constructor or the .clipAction method of AnimationMixer.\r\n\t *\r\n\t *  - Instead pass this object as 'root'.\r\n\t *\r\n\t *  - You can also add and remove objects later when the mixer\r\n\t *    is running.\r\n\t *\r\n\t * Note:\r\n\t *\r\n\t *    Objects of this class appear as one object to the mixer,\r\n\t *    so cache control of the individual objects must be done\r\n\t *    on the group.\r\n\t *\r\n\t * Limitation:\r\n\t *\r\n\t *  - The animated properties must be compatible among the\r\n\t *    all objects in the group.\r\n\t *\r\n\t *  - A single property can either be controlled through a\r\n\t *    target group or directly, but not both.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationObjectGroup() {\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// cached objects followed by the active ones\r\n\t\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\t\tthis.nCachedObjects_ = 0; // threshold\r\n\t\t// note: read by PropertyBinding.Composite\r\n\r\n\t\tvar indices = {};\r\n\t\tthis._indicesByUUID = indices; // for bookkeeping\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tthis._paths = []; // inside: string\r\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\r\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\r\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tobjects: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._objects.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tget bindingsPerObject() {\r\n\r\n\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationObjectGroup.prototype, {\r\n\r\n\t\tisAnimationObjectGroup: true,\r\n\r\n\t\tadd: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tpaths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length,\r\n\t\t\t\tknownObject = undefined;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\t\tindex = nObjects ++;\r\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\tknownObject = objects[ index ];\r\n\r\n\t\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\r\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\r\n\r\n\t\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// remove & forget\r\n\t\tuncache: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} // cached or active\r\n\r\n\t\t\t\t} // if object is known\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\t\tsubscribe_: function ( path, parsedPath ) {\r\n\r\n\t\t\t// returns an array of bindings for the given path that is changed\r\n\t\t\t// according to the contained objects in the group\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ],\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tobjects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\t\tindex = bindings.length;\r\n\r\n\t\t\tindicesByPath[ path ] = index;\r\n\r\n\t\t\tpaths.push( path );\r\n\t\t\tparsedPaths.push( parsedPath );\r\n\t\t\tbindings.push( bindingsForPath );\r\n\r\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = objects[ i ];\r\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bindingsForPath;\r\n\r\n\t\t},\r\n\r\n\t\tunsubscribe_: function ( path ) {\r\n\r\n\t\t\t// tells the group to forget about a property path and no longer\r\n\t\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar paths = this._paths,\r\n\t\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\t\tbindings = this._bindings,\r\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\t\tbindings.pop();\r\n\r\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\t\tparsedPaths.pop();\r\n\r\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\t\tpaths.pop();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\r\n\t * objects.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t *\r\n\t */\r\n\r\n\tfunction AnimationAction( mixer, clip, localRoot ) {\r\n\r\n\t\tthis._mixer = mixer;\r\n\t\tthis._clip = clip;\r\n\t\tthis._localRoot = localRoot || null;\r\n\r\n\t\tvar tracks = clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tinterpolants = new Array( nTracks );\r\n\r\n\t\tvar interpolantSettings = {\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\t\tinterpolants[ i ] = interpolant;\r\n\t\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t\t}\r\n\r\n\t\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\t\tthis._interpolants = interpolants; // bound by the mixer\r\n\r\n\t\t// inside: PropertyMixer (managed by the mixer)\r\n\t\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\t\tthis._cacheIndex = null; // for the memory manager\r\n\t\tthis._byClipCacheIndex = null; // for the memory manager\r\n\r\n\t\tthis._timeScaleInterpolant = null;\r\n\t\tthis._weightInterpolant = null;\r\n\r\n\t\tthis.loop = LoopRepeat;\r\n\t\tthis._loopCount = - 1;\r\n\r\n\t\t// global mixer time when the action is to be started\r\n\t\t// it's set back to 'null' upon start of the action\r\n\t\tthis._startTime = null;\r\n\r\n\t\t// scaled local time of the action\r\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1;\r\n\t\tthis._effectiveTimeScale = 1;\r\n\r\n\t\tthis.weight = 1;\r\n\t\tthis._effectiveWeight = 1;\r\n\r\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\r\n\r\n\t\tthis.paused = false; // true -> zero effective time scale\r\n\t\tthis.enabled = true; // false -> zero effective weight\r\n\r\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\r\n\r\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\r\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationAction.prototype, {\r\n\r\n\t\t// State & Scheduling\r\n\r\n\t\tplay: function () {\r\n\r\n\t\t\tthis._mixer._activateAction( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\t\treturn this.reset();\r\n\r\n\t\t},\r\n\r\n\t\treset: function () {\r\n\r\n\t\t\tthis.paused = false;\r\n\t\t\tthis.enabled = true;\r\n\r\n\t\t\tthis.time = 0; // restart clip\r\n\t\t\tthis._loopCount = - 1;// forget previous loops\r\n\t\t\tthis._startTime = null;// forget scheduling\r\n\r\n\t\t\treturn this.stopFading().stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tisRunning: function () {\r\n\r\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\t// return true when play has been called\r\n\t\tisScheduled: function () {\r\n\r\n\t\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\tstartAt: function ( time ) {\r\n\r\n\t\t\tthis._startTime = time;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( mode, repetitions ) {\r\n\r\n\t\t\tthis.loop = mode;\r\n\t\t\tthis.repetitions = repetitions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Weight\r\n\r\n\t\t// set the weight stopping any scheduled fading\r\n\t\t// although .enabled = false yields an effective weight of zero, this\r\n\t\t// method does *not* change .enabled, because it would be confusing\r\n\t\tsetEffectiveWeight: function ( weight ) {\r\n\r\n\t\t\tthis.weight = weight;\r\n\r\n\t\t\t// note: same logic as when updated at runtime\r\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\t\treturn this.stopFading();\r\n\r\n\t\t},\r\n\r\n\t\t// return the weight considering fading and .enabled\r\n\t\tgetEffectiveWeight: function () {\r\n\r\n\t\t\treturn this._effectiveWeight;\r\n\r\n\t\t},\r\n\r\n\t\tfadeIn: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tfadeOut: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\r\n\r\n\t\t\tfadeOutAction.fadeOut( duration );\r\n\t\t\tthis.fadeIn( duration );\r\n\r\n\t\t\tif ( warp ) {\r\n\r\n\t\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\r\n\r\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t\t},\r\n\r\n\t\tstopFading: function () {\r\n\r\n\t\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._weightInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Time Scale Control\r\n\r\n\t\t// set the time scale stopping any scheduled warping\r\n\t\t// although .paused = true yields an effective time scale of zero, this\r\n\t\t// method does *not* change .paused, because it would be confusing\r\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\r\n\r\n\t\t\tthis.timeScale = timeScale;\r\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\t// return the time scale considering warping and .paused\r\n\t\tgetEffectiveTimeScale: function () {\r\n\r\n\t\t\treturn this._effectiveTimeScale;\r\n\r\n\t\t},\r\n\r\n\t\tsetDuration: function ( duration ) {\r\n\r\n\t\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tsyncWith: function ( action ) {\r\n\r\n\t\t\tthis.time = action.time;\r\n\t\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\thalt: function ( duration ) {\r\n\r\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t\t},\r\n\r\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstopWarping: function () {\r\n\r\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Object Accessors\r\n\r\n\t\tgetMixer: function () {\r\n\r\n\t\t\treturn this._mixer;\r\n\r\n\t\t},\r\n\r\n\t\tgetClip: function () {\r\n\r\n\t\t\treturn this._clip;\r\n\r\n\t\t},\r\n\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t\t},\r\n\r\n\t\t// Interna\r\n\r\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\r\n\r\n\t\t\t// called by the mixer\r\n\r\n\t\t\tif ( ! this.enabled ) {\r\n\r\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\r\n\r\n\t\t\t\tthis._updateWeight( time );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar startTime = this._startTime;\r\n\r\n\t\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t\t// check for scheduled start of action\r\n\r\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// start\r\n\r\n\t\t\t\tthis._startTime = null; // unschedule\r\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply time scale and advance time\r\n\r\n\t\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t\t// note: _updateTime may disable the action resulting in\r\n\t\t\t// an effective weight of 0\r\n\r\n\t\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\t\tif ( weight > 0 ) {\r\n\r\n\t\t\t\tvar interpolants = this._interpolants;\r\n\t\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_updateWeight: function ( time ) {\r\n\r\n\t\t\tvar weight = 0;\r\n\r\n\t\t\tif ( this.enabled ) {\r\n\r\n\t\t\t\tweight = this.weight;\r\n\t\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveWeight = weight;\r\n\t\t\treturn weight;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTimeScale: function ( time ) {\r\n\r\n\t\t\tvar timeScale = 0;\r\n\r\n\t\t\tif ( ! this.paused ) {\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveTimeScale = timeScale;\r\n\t\t\treturn timeScale;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTime: function ( deltaTime ) {\r\n\r\n\t\t\tvar time = this.time + deltaTime;\r\n\t\t\tvar duration = this._clip.duration;\r\n\t\t\tvar loop = this.loop;\r\n\t\t\tvar loopCount = this._loopCount;\r\n\r\n\t\t\tvar pingPong = ( loop === LoopPingPong );\r\n\r\n\t\t\tif ( deltaTime === 0 ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\r\n\r\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( loop === LoopOnce ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tthis._loopCount = 0;\r\n\t\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thandle_stop: {\r\n\r\n\t\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tbreak handle_stop;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\r\n\t\t\t\t\telse { this.enabled = false; }\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( time >= duration || time < 0 ) {\r\n\r\n\t\t\t\t\t// wrap around\r\n\r\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\t\tif ( pending <= 0 ) {\r\n\r\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\r\n\t\t\t\t\t\telse { this.enabled = false; }\r\n\r\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\t\tif ( pending === 1 ) {\r\n\r\n\t\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\r\n\t\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\t\treturn duration - time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn time;\r\n\r\n\t\t},\r\n\r\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\r\n\r\n\t\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\t\tif ( pingPong ) {\r\n\r\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\r\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\tvalues[ 0 ] = weightNow;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\t\t\tvalues[ 1 ] = weightThen;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Player for AnimationClips.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationMixer( root ) {\r\n\r\n\t\tthis._root = root;\r\n\t\tthis._initMemoryManager();\r\n\t\tthis._accuIndex = 0;\r\n\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1.0;\r\n\r\n\t}\r\n\r\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: AnimationMixer,\r\n\r\n\t\t_bindAction: function ( action, prototypeAction ) {\r\n\r\n\t\t\tvar root = action._localRoot || this._root,\r\n\t\t\t\ttracks = action._clip.tracks,\r\n\t\t\t\tnTracks = tracks.length,\r\n\t\t\t\tbindings = action._propertyBindings,\r\n\t\t\t\tinterpolants = action._interpolants,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\t\tbindingsByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\t\tvar track = tracks[ i ],\r\n\t\t\t\t\ttrackName = track.name,\r\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\t\tbinding = new PropertyMixer(\r\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_activateAction: function ( action ) {\r\n\r\n\t\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// increment reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._lendAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_deactivateAction: function ( action ) {\r\n\r\n\t\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// decrement reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Memory manager\r\n\r\n\t\t_initMemoryManager: function () {\r\n\r\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\t\tthis._nActiveActions = 0;\r\n\r\n\t\t\tthis._actionsByClip = {};\r\n\t\t\t// inside:\r\n\t\t\t// {\r\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\r\n\t\t\t// \tactionByRoot: AnimationAction - lookup\r\n\t\t\t// }\r\n\r\n\r\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\t\tthis._controlInterpolants = []; // same game as above\r\n\t\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tthis.stats = {\r\n\r\n\t\t\t\tactions: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._actions.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveActions;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tbindings: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveBindings;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcontrolInterpolants: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for AnimationAction objects\r\n\r\n\t\t_isActiveAction: function ( action ) {\r\n\r\n\t\t\tvar index = action._cacheIndex;\r\n\t\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t\t},\r\n\r\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\t\tactionsForClip = {\r\n\r\n\t\t\t\t\tknownActions: [ action ],\r\n\t\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\t\tknownActions.push( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taction._cacheIndex = actions.length;\r\n\t\t\tactions.push( action );\r\n\r\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveAction: function ( action ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\tactions.pop();\r\n\r\n\t\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\t\tvar clipUuid = action._clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\t\tlastKnownAction =\r\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\t\tknownActionsForClip.pop();\r\n\r\n\t\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\r\n\r\n\t\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBindingsForAction: function ( action ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendAction: function ( action ) {\r\n\r\n\t\t\t// [ active actions |  inactive actions  ]\r\n\t\t\t// [  active actions >| inactive actions ]\r\n\t\t\t//                 s        a\r\n\t\t\t//                  <-swap->\r\n\t\t\t//                 a        s\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = lastActiveIndex;\r\n\t\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackAction: function ( action ) {\r\n\r\n\t\t\t// [  active actions  | inactive actions ]\r\n\t\t\t// [ active actions |< inactive actions  ]\r\n\t\t\t//        a        s\r\n\t\t\t//         <-swap->\r\n\t\t\t//        s        a\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for PropertyMixer objects\r\n\r\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\t\tbindingByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\t\tbinding._cacheIndex = bindings.length;\r\n\t\t\tbindings.push( binding );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tpropBinding = binding.binding,\r\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\t\ttrackName = propBinding.path,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\r\n\r\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t\t_lendControlInterpolant: function () {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\t\tinterpolant = new LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn interpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\r\n\r\n\t\t// return an action for a clip optionally using a custom root target\r\n\t\t// object (this method allocates a lot of dynamic memory in case a\r\n\t\t// previously unknown clip/root combination is specified)\r\n\t\tclipAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\r\n\t\t\t\tprototypeAction = null;\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\tvar existingAction =\r\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\t\treturn existingAction;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t\t// the bindings again but can just copy\r\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t\t// also, take the clip from the prototype action\r\n\t\t\t\tif ( clipObject === null )\r\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// clip must be known when specified via string\r\n\t\t\tif ( clipObject === null ) { return null; }\r\n\r\n\t\t\t// allocate all resources required to run it\r\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\r\n\r\n\t\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t\t// and make the action known to the memory manager\r\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\t\treturn newAction;\r\n\r\n\t\t},\r\n\r\n\t\t// get an existing action\r\n\t\texistingAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// deactivates all previously scheduled actions\r\n\t\tstopAllAction: function () {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tthis._nActiveActions = 0;\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tactions[ i ].reset();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// advance the time and update apply the animation\r\n\t\tupdate: function ( deltaTime ) {\r\n\r\n\t\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\t\ttime = this.time += deltaTime,\r\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t\t// run active actions\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Allows you to seek to a specific time in an animation.\r\n\t\tsetTime: function ( timeInSeconds ) {\r\n\r\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\r\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\r\n\r\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\r\n\r\n\t\t},\r\n\r\n\t\t// return this mixer's root target object\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._root;\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular clip\r\n\t\tuncacheClip: function ( clip ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tclipUuid = clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t\t// just throw away\r\n\r\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\t\tactions.pop();\r\n\r\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular root target object\r\n\t\tuncacheRoot: function ( root ) {\r\n\r\n\t\t\tvar rootUuid = root.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\t\tfor ( var clipUuid in actionsByClip ) {\r\n\r\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remove a targeted clip from the cache\r\n\t\tuncacheAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\t\tif ( action !== null ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Uniform( value ) {\r\n\r\n\t\tif ( typeof value === 'string' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\r\n\t\t\tvalue = arguments[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tUniform.prototype.clone = function () {\r\n\r\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\r\n\r\n\t\tInterleavedBuffer.call( this, array, stride );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\r\n\r\n\t\tconstructor: InstancedInterleavedBuffer,\r\n\r\n\t\tisInstancedInterleavedBuffer: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author bhouston / http://clara.io/\r\n\t * @author stephomi / http://stephaneginier.com/\r\n\t */\r\n\r\n\tfunction Raycaster( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\t\tthis.camera = null;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Raycaster.prototype, {\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\t\t\t\tthis.camera = camera;\r\n\r\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\t\t\tthis.camera = camera;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n\t *\r\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\r\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\r\n\t */\r\n\r\n\tfunction Spherical( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Spherical.prototype, {\r\n\r\n\t\tset: function ( radius, phi, theta ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.phi = phi;\r\n\t\t\tthis.theta = theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.phi = other.phi;\r\n\t\t\tthis.theta = other.theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// restrict phi to be betwee EPS and PI-EPS\r\n\t\tmakeSafe: function () {\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\t\tthis.theta = 0;\r\n\t\t\t\tthis.phi = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n\t *\r\n\t */\r\n\r\n\tfunction Cylindrical( radius, theta, y ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Cylindrical.prototype, {\r\n\r\n\t\tset: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.theta = theta;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.theta = other.theta;\r\n\t\t\tthis.y = other.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\r\n\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _vector$6 = new Vector2();\r\n\r\n\tfunction Box2( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 4 splitting planes to rule out intersections\r\n\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t},\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _startP = new Vector3();\r\n\tvar _startEnd = new Vector3();\r\n\r\n\tfunction Line3( start, end ) {\r\n\r\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\r\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Line3.prototype, {\r\n\r\n\t\tset: function ( start, end ) {\r\n\r\n\t\t\tthis.start.copy( start );\r\n\t\t\tthis.end.copy( end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( line ) {\r\n\r\n\t\t\tthis.start.copy( line.start );\r\n\t\t\tthis.end.copy( line.end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tdelta: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSq: function () {\r\n\r\n\t\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tdistance: function () {\r\n\r\n\t\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\r\n\r\n\t\t\t_startP.subVectors( point, this.start );\r\n\t\t\t_startEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\r\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\r\n\r\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.start.applyMatrix4( matrix );\r\n\t\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( line ) {\r\n\r\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction ImmediateRenderObject( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.material = material;\r\n\t\tthis.render = function ( /* renderCallback */ ) {};\r\n\r\n\t}\r\n\r\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\r\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\r\n\r\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$5 = new Vector3();\r\n\tvar _v2$3 = new Vector3();\r\n\tvar _normalMatrix$1 = new Matrix3();\r\n\tvar _keys = [ 'a', 'b', 'c' ];\r\n\r\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.attributes.normal.count;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.setAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\r\n\r\n\tVertexNormalsHelper.prototype.update = function () {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ _keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\t_v1$5.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\t_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\t_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _vector$7 = new Vector3();\r\n\r\n\tfunction SpotLightHelper( light, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = [\r\n\t\t\t0, 0, 0, \t0, 0, 1,\r\n\t\t\t0, 0, 0, \t1, 0, 1,\r\n\t\t\t0, 0, 0,\t- 1, 0, 1,\r\n\t\t\t0, 0, 0, \t0, 1, 1,\r\n\t\t\t0, 0, 0, \t0, - 1, 1\r\n\t\t];\r\n\r\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\r\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\t\tpositions.push(\r\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.cone = new LineSegments( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\r\n\r\n\tSpotLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\r\n\t};\r\n\r\n\tSpotLightHelper.prototype.update = function () {\r\n\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\t_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( _vector$7 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.cone.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.cone.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Sean Griffin / http://twitter.com/sgrif\r\n\t * @author Michael Guerrero / http://realitymeltdown.com\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author ikerr / http://verold.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _vector$8 = new Vector3();\r\n\tvar _boneMatrix = new Matrix4();\r\n\tvar _matrixWorldInv = new Matrix4();\r\n\r\n\tfunction getBoneList( object ) {\r\n\r\n\t\tvar boneList = [];\r\n\r\n\t\tif ( object && object.isBone ) {\r\n\r\n\t\t\tboneList.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn boneList;\r\n\r\n\t}\r\n\r\n\tfunction SkeletonHelper( object ) {\r\n\r\n\t\tvar bones = getBoneList( object );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar color1 = new Color( 0, 0, 1 );\r\n\t\tvar color2 = new Color( 0, 1, 0 );\r\n\r\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\r\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.root = object;\r\n\t\tthis.bones = bones;\r\n\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t}\r\n\r\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\r\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\r\n\r\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar bones = this.bones;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\r\n\r\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );\r\n\r\n\t\t\t\tj += 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction PointLightHelper( light, sphereSize, color ) {\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\r\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\r\n\t\t/*\r\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\r\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\t\tvar d = light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\r\n\t\tthis.add( this.lightDistance );\r\n\t\t*/\r\n\r\n\t}\r\n\r\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\r\n\tPointLightHelper.prototype.constructor = PointLightHelper;\r\n\r\n\tPointLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tPointLightHelper.prototype.update = function () {\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tvar d = this.light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t *  This helper must be added as a child of the light\r\n\t */\r\n\r\n\tfunction RectAreaLightHelper( light, color ) {\r\n\r\n\t\tthis.type = 'RectAreaLightHelper';\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.color = color; // optional hardwired color for the helper\r\n\r\n\t\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tRectAreaLightHelper.prototype = Object.create( Line.prototype );\r\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\r\n\r\n\tRectAreaLightHelper.prototype.update = function () {\r\n\r\n\t\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\t\t\tthis.children[ 0 ].material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\t\t// prevent hue shift\r\n\t\t\tvar c = this.material.color;\r\n\t\t\tvar max = Math.max( c.r, c.g, c.b );\r\n\t\t\tif ( max > 1 ) { c.multiplyScalar( 1 / max ); }\r\n\r\n\t\t\tthis.children[ 0 ].material.color.copy( this.material.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tRectAreaLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _vector$9 = new Vector3();\r\n\tvar _color1 = new Color();\r\n\tvar _color2 = new Color();\r\n\r\n\tfunction HemisphereLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new OctahedronBufferGeometry( size );\r\n\t\tgeometry.rotateY( Math.PI * 0.5 );\r\n\r\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\r\n\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\t\tvar colors = new Float32Array( position.count * 3 );\r\n\r\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\r\n\r\n\t\tthis.add( new Mesh( geometry, this.material ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\r\n\r\n\tHemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\tHemisphereLightHelper.prototype.update = function () {\r\n\r\n\t\tvar mesh = this.children[ 0 ];\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\r\n\r\n\t\t\t_color1.copy( this.light.color );\r\n\t\t\t_color2.copy( this.light.groundColor );\r\n\r\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\r\n\r\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolors.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction LightProbeHelper( lightProbe, size ) {\r\n\r\n\t\tthis.lightProbe = lightProbe;\r\n\r\n\t\tthis.size = size;\r\n\r\n\t\tvar defines = {};\r\n\t\tdefines[ 'GAMMA_OUTPUT' ] = \"\";\r\n\r\n\t\t// material\r\n\t\tvar material = new ShaderMaterial( {\r\n\r\n\t\t\tdefines: defines,\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tsh: { value: this.lightProbe.sh.coefficients }, // by reference\r\n\r\n\t\t\t\tintensity: { value: this.lightProbe.intensity }\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t'varying vec3 vNormal;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\r\n\r\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t\t\t'}' ].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t'#define RECIPROCAL_PI 0.318309886',\r\n\r\n\t\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\r\n\r\n\t\t\t\t'\t// matrix is assumed to be orthogonal',\r\n\r\n\t\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'vec3 linearToOutput( in vec3 a ) {',\r\n\r\n\t\t\t\t'\t#ifdef GAMMA_OUTPUT',\r\n\r\n\t\t\t\t'\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\treturn a;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\r\n\t\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\r\n\r\n\t\t\t\t'\t// normal is assumed to have unit length',\r\n\r\n\t\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\r\n\r\n\t\t\t\t'\t// band 0',\r\n\t\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\r\n\r\n\t\t\t\t'\t// band 1',\r\n\t\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\r\n\t\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\r\n\r\n\t\t\t\t'\t// band 2',\r\n\t\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\r\n\t\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\r\n\t\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\r\n\r\n\t\t\t\t'\treturn result;',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\r\n\r\n\t\t\t\t'uniform float intensity; // light probe intensity',\r\n\r\n\t\t\t\t'varying vec3 vNormal;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tvec3 normal = normalize( vNormal );',\r\n\r\n\t\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\r\n\r\n\t\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\r\n\r\n\t\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\r\n\r\n\t\t\t\t'\toutgoingLight = linearToOutput( outgoingLight );',\r\n\r\n\t\t\t\t'\tgl_FragColor = vec4( outgoingLight, 1.0 );',\r\n\r\n\t\t\t\t'}'\r\n\r\n\t\t\t].join( '\\n' )\r\n\r\n\t\t} );\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( 1, 32, 16 );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.onBeforeRender();\r\n\r\n\t}\r\n\r\n\tLightProbeHelper.prototype = Object.create( Mesh.prototype );\r\n\tLightProbeHelper.prototype.constructor = LightProbeHelper;\r\n\r\n\tLightProbeHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tLightProbeHelper.prototype.onBeforeRender = function () {\r\n\r\n\t\tthis.position.copy( this.lightProbe.position );\r\n\r\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\r\n\r\n\t\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction GridHelper( size, divisions, color1, color2 ) {\r\n\r\n\t\tsize = size || 10;\r\n\t\tdivisions = divisions || 10;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar center = divisions / 2;\r\n\t\tvar step = size / divisions;\r\n\t\tvar halfSize = size / 2;\r\n\r\n\t\tvar vertices = [], colors = [];\r\n\r\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\r\n\r\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\r\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\r\n\r\n\t\t\tvar color = i === center ? color1 : color2;\r\n\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\r\n\r\n\t\tconstructor: GridHelper,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLineSegments.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.geometry.copy( source.geometry );\r\n\t\t\tthis.material.copy( source.material );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author Hectate / http://www.github.com/Hectate\r\n\t */\r\n\r\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\r\n\r\n\t\tradius = radius || 10;\r\n\t\tradials = radials || 16;\r\n\t\tcircles = circles || 8;\r\n\t\tdivisions = divisions || 64;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar x, z;\r\n\t\tvar v, i, j, r, color;\r\n\r\n\t\t// create the radials\r\n\r\n\t\tfor ( i = 0; i <= radials; i ++ ) {\r\n\r\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\r\n\r\n\t\t\tx = Math.sin( v ) * radius;\r\n\t\t\tz = Math.cos( v ) * radius;\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tvertices.push( x, 0, z );\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t}\r\n\r\n\t\t// create the circles\r\n\r\n\t\tfor ( i = 0; i <= circles; i ++ ) {\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tr = radius - ( radius / circles * i );\r\n\r\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\r\n\r\n\t\t\t\t// first vertex\r\n\r\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t\t// second vertex\r\n\r\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\r\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\r\n\r\n\t/**\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {\r\n\r\n\t\tthis.audio = audio;\r\n\t\tthis.range = range || 1;\r\n\t\tthis.divisionsInnerAngle = divisionsInnerAngle || 16;\r\n\t\tthis.divisionsOuterAngle = divisionsOuterAngle || 2;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\r\n\t\tvar positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\r\n\t\tvar materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\r\n\r\n\t\tLine.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tPositionalAudioHelper.prototype = Object.create( Line.prototype );\r\n\tPositionalAudioHelper.prototype.constructor = PositionalAudioHelper;\r\n\r\n\tPositionalAudioHelper.prototype.update = function () {\r\n\r\n\t\tvar audio = this.audio;\r\n\t\tvar range = this.range;\r\n\t\tvar divisionsInnerAngle = this.divisionsInnerAngle;\r\n\t\tvar divisionsOuterAngle = this.divisionsOuterAngle;\r\n\r\n\t\tvar coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );\r\n\t\tvar coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );\r\n\r\n\t\tvar halfConeInnerAngle = coneInnerAngle / 2;\r\n\t\tvar halfConeOuterAngle = coneOuterAngle / 2;\r\n\r\n\t\tvar start = 0;\r\n\t\tvar count = 0;\r\n\t\tvar i, stride;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar positionAttribute = geometry.attributes.position;\r\n\r\n\t\tgeometry.clearGroups();\r\n\r\n\t\t//\r\n\r\n\t\tfunction generateSegment( from, to, divisions, materialIndex ) {\r\n\r\n\t\t\tvar step = ( to - from ) / divisions;\r\n\r\n\t\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\r\n\t\t\tcount ++;\r\n\r\n\t\t\tfor ( i = from; i < to; i += step ) {\r\n\r\n\t\t\t\tstride = start + count;\r\n\r\n\t\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\r\n\t\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\r\n\t\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\r\n\r\n\t\t\t\tcount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.addGroup( start, count, materialIndex );\r\n\r\n\t\t\tstart += count;\r\n\t\t\tcount = 0;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\r\n\t\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\r\n\t\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\r\n\r\n\t\t//\r\n\r\n\t\tpositionAttribute.needsUpdate = true;\r\n\r\n\t\tif ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }\r\n\r\n\t};\r\n\r\n\tPositionalAudioHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material[ 0 ].dispose();\r\n\t\tthis.material[ 1 ].dispose();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$6 = new Vector3();\r\n\tvar _v2$4 = new Vector3();\r\n\tvar _normalMatrix$2 = new Matrix3();\r\n\r\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.setAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\r\n\r\n\tFaceNormalsHelper.prototype.update = function () {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t_v1$6.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );\r\n\r\n\t\t\tposition.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$7 = new Vector3();\r\n\tvar _v2$5 = new Vector3();\r\n\tvar _v3$1 = new Vector3();\r\n\r\n\tfunction DirectionalLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tif ( size === undefined ) { size = 1; }\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\r\n\t\t\t- size, size, 0,\r\n\t\t\tsize, size, 0,\r\n\t\t\tsize, - size, 0,\r\n\t\t\t- size, - size, 0,\r\n\t\t\t- size, size, 0\r\n\t\t], 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.lightPlane = new Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\r\n\t\tgeometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\t\tthis.targetLine = new Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\r\n\r\n\tDirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\r\n\t};\r\n\r\n\tDirectionalLightHelper.prototype.update = function () {\r\n\r\n\t\t_v1$7.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t_v3$1.subVectors( _v2$5, _v1$7 );\r\n\r\n\t\tthis.lightPlane.lookAt( _v2$5 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.lightPlane.material.color.set( this.color );\r\n\t\t\tthis.targetLine.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\r\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\tthis.targetLine.lookAt( _v2$5 );\r\n\t\tthis.targetLine.scale.z = _v3$1.length();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t *\t- shows frustum, line of sight and up of the camera\r\n\t *\t- suitable for fast updates\r\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\r\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n\t */\r\n\r\n\tvar _vector$a = new Vector3();\r\n\tvar _camera = new Camera();\r\n\r\n\tfunction CameraHelper( camera ) {\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar pointMap = {};\r\n\r\n\t\t// colors\r\n\r\n\t\tvar colorFrustum = new Color( 0xffaa00 );\r\n\t\tvar colorCone = new Color( 0xff0000 );\r\n\t\tvar colorUp = new Color( 0x00aaff );\r\n\t\tvar colorTarget = new Color( 0xffffff );\r\n\t\tvar colorCross = new Color( 0x333333 );\r\n\r\n\t\t// near\r\n\r\n\t\taddLine( 'n1', 'n2', colorFrustum );\r\n\t\taddLine( 'n2', 'n4', colorFrustum );\r\n\t\taddLine( 'n4', 'n3', colorFrustum );\r\n\t\taddLine( 'n3', 'n1', colorFrustum );\r\n\r\n\t\t// far\r\n\r\n\t\taddLine( 'f1', 'f2', colorFrustum );\r\n\t\taddLine( 'f2', 'f4', colorFrustum );\r\n\t\taddLine( 'f4', 'f3', colorFrustum );\r\n\t\taddLine( 'f3', 'f1', colorFrustum );\r\n\r\n\t\t// sides\r\n\r\n\t\taddLine( 'n1', 'f1', colorFrustum );\r\n\t\taddLine( 'n2', 'f2', colorFrustum );\r\n\t\taddLine( 'n3', 'f3', colorFrustum );\r\n\t\taddLine( 'n4', 'f4', colorFrustum );\r\n\r\n\t\t// cone\r\n\r\n\t\taddLine( 'p', 'n1', colorCone );\r\n\t\taddLine( 'p', 'n2', colorCone );\r\n\t\taddLine( 'p', 'n3', colorCone );\r\n\t\taddLine( 'p', 'n4', colorCone );\r\n\r\n\t\t// up\r\n\r\n\t\taddLine( 'u1', 'u2', colorUp );\r\n\t\taddLine( 'u2', 'u3', colorUp );\r\n\t\taddLine( 'u3', 'u1', colorUp );\r\n\r\n\t\t// target\r\n\r\n\t\taddLine( 'c', 't', colorTarget );\r\n\t\taddLine( 'p', 'c', colorCross );\r\n\r\n\t\t// cross\r\n\r\n\t\taddLine( 'cn1', 'cn2', colorCross );\r\n\t\taddLine( 'cn3', 'cn4', colorCross );\r\n\r\n\t\taddLine( 'cf1', 'cf2', colorCross );\r\n\t\taddLine( 'cf3', 'cf4', colorCross );\r\n\r\n\t\tfunction addLine( a, b, color ) {\r\n\r\n\t\t\taddPoint( a, color );\r\n\t\t\taddPoint( b, color );\r\n\r\n\t\t}\r\n\r\n\t\tfunction addPoint( id, color ) {\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.camera = camera;\r\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\r\n\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.pointMap = pointMap;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\r\n\tCameraHelper.prototype.constructor = CameraHelper;\r\n\r\n\tCameraHelper.prototype.update = function () {\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar pointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix inverse\r\n\t\t// world matrix must be identity\r\n\r\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\r\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\r\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\r\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\r\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\r\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\r\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\r\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\r\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\r\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\r\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\r\n\r\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\r\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\r\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\r\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t};\r\n\r\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\r\n\r\n\t\t_vector$a.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tposition.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _box$3 = new Box3();\r\n\r\n\tfunction BoxHelper( object, color ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tif ( color === undefined ) { color = 0xffff00; }\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\r\n\tBoxHelper.prototype.constructor = BoxHelper;\r\n\r\n\tBoxHelper.prototype.update = function ( object ) {\r\n\r\n\t\tif ( object !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.object !== undefined ) {\r\n\r\n\t\t\t_box$3.setFromObject( this.object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _box$3.isEmpty() ) { return; }\r\n\r\n\t\tvar min = _box$3.min;\r\n\t\tvar max = _box$3.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\r\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\r\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\r\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.setFromObject = function ( object ) {\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.update();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.copy = function ( source ) {\r\n\r\n\t\tLineSegments.prototype.copy.call( this, source );\r\n\r\n\t\tthis.object = source.object;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.clone = function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3Helper( box, color ) {\r\n\r\n\t\tthis.type = 'Box3Helper';\r\n\r\n\t\tthis.box = box;\r\n\r\n\t\tcolor = color || 0xffff00;\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\r\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\r\n\tBox3Helper.prototype.constructor = Box3Helper;\r\n\r\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar box = this.box;\r\n\r\n\t\tif ( box.isEmpty() ) { return; }\r\n\r\n\t\tbox.getCenter( this.position );\r\n\r\n\t\tbox.getSize( this.scale );\r\n\r\n\t\tthis.scale.multiplyScalar( 0.5 );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction PlaneHelper( plane, size, hex ) {\r\n\r\n\t\tthis.type = 'PlaneHelper';\r\n\r\n\t\tthis.plane = plane;\r\n\r\n\t\tthis.size = ( size === undefined ) ? 1 : size;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\r\n\r\n\t}\r\n\r\n\tPlaneHelper.prototype = Object.create( Line.prototype );\r\n\tPlaneHelper.prototype.constructor = PlaneHelper;\r\n\r\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar scale = - this.plane.constant;\r\n\r\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\r\n\r\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\r\n\r\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\r\n\r\n\t\tthis.lookAt( this.plane.normal );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author zz85 / http://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t *\r\n\t * Creates an arrow for visualizing directions\r\n\t *\r\n\t * Parameters:\r\n\t *  dir - Vector3\r\n\t *  origin - Vector3\r\n\t *  length - Number\r\n\t *  color - color in hex value\r\n\t *  headLength - Number\r\n\t *  headWidth - Number\r\n\t */\r\n\r\n\tvar _axis = new Vector3();\r\n\tvar _lineGeometry, _coneGeometry;\r\n\r\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\r\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\r\n\t\tif ( length === undefined ) { length = 1; }\r\n\t\tif ( color === undefined ) { color = 0xffff00; }\r\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\r\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\r\n\r\n\t\tif ( _lineGeometry === undefined ) {\r\n\r\n\t\t\t_lineGeometry = new BufferGeometry();\r\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\r\n\tArrowHelper.prototype.constructor = ArrowHelper;\r\n\r\n\tArrowHelper.prototype.setDirection = function ( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tvar radians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\r\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\r\n\r\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\r\n\t\tthis.line.updateMatrix();\r\n\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\t\tthis.line.material.color.set( color );\r\n\t\tthis.cone.material.color.set( color );\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.copy = function ( source ) {\r\n\r\n\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\tthis.line.copy( source.line );\r\n\t\tthis.cone.copy( source.cone );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.clone = function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author sroucheray / http://sroucheray.org/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AxesHelper( size ) {\r\n\r\n\t\tsize = size || 1;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t0, 0, 0,\tsize, 0, 0,\r\n\t\t\t0, 0, 0,\t0, size, 0,\r\n\t\t\t0, 0, 0,\t0, 0, size\r\n\t\t];\r\n\r\n\t\tvar colors = [\r\n\t\t\t1, 0, 0,\t1, 0.6, 0,\r\n\t\t\t0, 1, 0,\t0.6, 1, 0,\r\n\t\t\t0, 0, 1,\t0, 0.6, 1\r\n\t\t];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\r\n\tAxesHelper.prototype.constructor = AxesHelper;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\r\n\r\n\t}\r\n\r\n\tvar LineStrip = 0;\r\n\r\n\tvar LinePieces = 1;\r\n\r\n\tfunction MeshFaceMaterial( materials ) {\r\n\r\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction MultiMaterial( materials ) {\r\n\r\n\t\tif ( materials === undefined ) { materials = []; }\r\n\r\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\r\n\t\tmaterials.isMultiMaterial = true;\r\n\t\tmaterials.materials = materials;\r\n\t\tmaterials.clone = function () {\r\n\r\n\t\t\treturn materials.slice();\r\n\r\n\t\t};\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction PointCloud( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction Particle( material ) {\r\n\r\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\r\n\t\treturn new Sprite( material );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystem( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction PointCloudMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleBasicMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystemMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction Vertex( x, y, z ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new Vector3( x, y, z );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction DynamicBufferAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n\t}\r\n\r\n\tfunction Int8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\r\n\t\treturn new Int8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\r\n\t\treturn new Uint8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\r\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\r\n\t\treturn new Int16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\r\n\t\treturn new Uint16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\r\n\t\treturn new Int32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\r\n\t\treturn new Uint32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\r\n\t\treturn new Float32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float64Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\r\n\t\treturn new Float64BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tCurve.create = function ( construct, getPoint ) {\r\n\r\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\r\n\r\n\t\tconstruct.prototype = Object.create( Curve.prototype );\r\n\t\tconstruct.prototype.constructor = construct;\r\n\t\tconstruct.prototype.getPoint = getPoint;\r\n\r\n\t\treturn construct;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.assign( CurvePath.prototype, {\r\n\r\n\t\tcreatePointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from path points (for Line or Points objects)\r\n\r\n\t\t\tvar pts = this.getPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from equidistant sampling along the path\r\n\r\n\t\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateGeometry: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\tvar geometry = new Geometry();\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Path.prototype, {\r\n\r\n\t\tfromPoints: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\r\n\t\t\treturn this.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction ClosedSplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\t\tthis.closed = true;\r\n\r\n\t}\r\n\r\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction SplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction Spline( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\tObject.assign( Spline.prototype, {\r\n\r\n\t\tinitFromArray: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction AxisHelper( size ) {\r\n\r\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\r\n\t\treturn new AxesHelper( size );\r\n\r\n\t}\r\n\r\n\tfunction BoundingBoxHelper( object, color ) {\r\n\r\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\r\n\t\treturn new BoxHelper( object, color );\r\n\r\n\t}\r\n\r\n\tfunction EdgesHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\r\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype.setColors = function () {\r\n\r\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\r\n\r\n\t};\r\n\r\n\tSkeletonHelper.prototype.update = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\r\n\r\n\t};\r\n\r\n\tfunction WireframeHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\r\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\r\n\t\t\treturn LoaderUtils.extractUrlBase( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tLoader.Handlers = {\r\n\r\n\t\tadd: function ( /* regex, loader */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( /* file */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction XHRLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\r\n\t\treturn new FileLoader( manager );\r\n\r\n\t}\r\n\r\n\tfunction BinaryTextureLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\r\n\t\treturn new DataTextureLoader( manager );\r\n\r\n\t}\r\n\r\n\tObject.assign( ObjectLoader.prototype, {\r\n\r\n\t\tsetTexturePath: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\r\n\t\t\treturn this.setResourcePath( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tLine3.prototype.center = function ( optionalTarget ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\r\n\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t};\r\n\r\n\tObject.assign( _Math, {\r\n\r\n\t\trandom16: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\r\n\t\t\treturn Math.random();\r\n\r\n\t\t},\r\n\r\n\t\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\r\n\t\t\treturn _Math.floorPowerOfTwo( value );\r\n\r\n\t\t},\r\n\r\n\t\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\r\n\t\t\treturn _Math.ceilPowerOfTwo( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix3( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\textractPosition: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\treturn this.copyPosition( m );\r\n\r\n\t\t},\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tgetPosition: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\r\n\r\n\t\t},\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\r\n\t\t},\r\n\t\tmultiplyToArray: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateAxis: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\t\tv.transformDirection( this );\r\n\r\n\t\t},\r\n\t\tcrossVector: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\ttranslate: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateX: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateY: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateZ: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateByAxis: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\r\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tPlane.prototype.isIntersectionLine = function ( line ) {\r\n\r\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\treturn this.intersectsLine( line );\r\n\r\n\t};\r\n\r\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t};\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\t\treturn this.intersectsPlane( plane );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tarea: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\r\n\t\t\treturn this.getArea();\r\n\r\n\t\t},\r\n\t\tbarycoordFromPoint: function ( point, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn this.getBarycoord( point, target );\r\n\r\n\t\t},\r\n\t\tmidpoint: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\r\n\t\t\treturn this.getMidpoint( target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn this.getNormal( target );\r\n\r\n\t\t},\r\n\t\tplane: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\r\n\t\t\treturn this.getPlane( target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn Triangle.getNormal( a, b, c, target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Shape.prototype, {\r\n\r\n\t\textractAllPoints: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\r\n\t\t\treturn this.extractPoints( divisions );\r\n\r\n\t\t},\r\n\t\textrude: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\r\n\t\t\treturn new ExtrudeGeometry( this, options );\r\n\r\n\t\t},\r\n\t\tmakeGeometry: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\r\n\t\t\treturn new ShapeGeometry( this, options );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tsetEulerFromRotationMatrix: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\r\n\t\t},\r\n\t\tsetEulerFromQuaternion: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\r\n\t\t},\r\n\t\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\t\treturn this.setFromMatrixPosition( m );\r\n\r\n\t\t},\r\n\t\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\t\treturn this.setFromMatrixScale( m );\r\n\r\n\t\t},\r\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\r\n\r\n\t\t},\r\n\t\tapplyProjection: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\r\n\t\t\treturn this.applyMatrix4( m );\r\n\r\n\t\t},\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Geometry.prototype, {\r\n\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Object3D.prototype, {\r\n\r\n\t\tgetChildByName: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\treturn this.getObjectByName( name );\r\n\r\n\t\t},\r\n\t\trenderDepth: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\r\n\t\t},\r\n\t\ttranslate: function ( distance, axis ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\treturn this.translateOnAxis( axis, distance );\r\n\r\n\t\t},\r\n\t\tgetWorldRotation: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Object3D.prototype, {\r\n\r\n\t\teulerOrder: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\treturn this.rotation.order;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\tthis.rotation.order = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuseQuaternion: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( LOD.prototype, {\r\n\r\n\t\tobjects: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\treturn this.levels;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t},\r\n\t\tset: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tSkinnedMesh.prototype.initBones = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\r\n\r\n\t};\r\n\r\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\treturn this.arcLengthDivisions;\r\n\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\tthis.arcLengthDivisions = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\r\n\r\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\r\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\r\n\r\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\r\n\t\tthis.setFocalLength( focalLength );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Light.prototype, {\r\n\t\tonlyShadow: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFov: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\t\tthis.shadow.camera.fov = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraLeft: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\t\tthis.shadow.camera.left = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraRight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\t\tthis.shadow.camera.right = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraTop: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\t\tthis.shadow.camera.top = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraBottom: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\t\tthis.shadow.camera.bottom = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraNear: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\t\tthis.shadow.camera.near = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFar: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\t\tthis.shadow.camera.far = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraVisible: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowBias: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\t\tthis.shadow.bias = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowDarkness: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapWidth: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\t\tthis.shadow.mapSize.width = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapHeight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\t\tthis.shadow.mapSize.height = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( BufferAttribute.prototype, {\r\n\r\n\t\tlength: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\r\n\t\t\t\treturn this.array.length;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tdynamic: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\r\n\t\t\t\treturn this.usage === DynamicDrawUsage;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\r\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\r\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\t\tcopyIndicesArray: function ( /* indices */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetArray: function ( /* array */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( BufferGeometry.prototype, {\r\n\r\n\t\taddIndex: function ( index ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\tthis.setIndex( index );\r\n\r\n\t\t},\r\n\t\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\r\n\r\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( name === 'index' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.setAttribute( name, attribute );\r\n\r\n\t\t},\r\n\t\taddDrawCall: function ( start, count, indexOffset ) {\r\n\r\n\t\t\tif ( indexOffset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\r\n\t\t\t}\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\tthis.addGroup( start, count );\r\n\r\n\t\t},\r\n\t\tclearDrawCalls: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\tthis.clearGroups();\r\n\r\n\t\t},\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeOffsets: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\r\n\t\t},\r\n\t\tremoveAttribute: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\r\n\r\n\t\t\treturn this.deleteAttribute( name );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.defineProperties( BufferGeometry.prototype, {\r\n\r\n\t\tdrawcalls: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffsets: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( InterleavedBuffer.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\r\n\t\t\t\treturn this.usage === DynamicDrawUsage;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\r\n\t\t\t\tthis.setUsage( value );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\r\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\t\tsetArray: function ( /* array */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\r\n\r\n\t\tgetArrays: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShapeList: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShape: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Uniform.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tonUpdate: {\r\n\t\t\tvalue: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Material.prototype, {\r\n\r\n\t\twrapAround: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toverdraw: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\twrapRGB: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\r\n\t\t\t\treturn new Color();\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshading: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\tthis.flatShading = ( value === FlatShading );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstencilMask: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\r\n\t\t\t\treturn this.stencilFuncMask;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\r\n\t\t\t\tthis.stencilFuncMask = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\r\n\r\n\t\tmetal: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( ShaderMaterial.prototype, {\r\n\r\n\t\tderivatives: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\treturn this.extensions.derivatives;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\tthis.extensions.derivatives = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( WebGLRenderer.prototype, {\r\n\r\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\t\tthis.clear( color, depth, stencil );\r\n\r\n\t\t},\r\n\t\tanimate: function ( callback ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\r\n\t\t\tthis.setAnimationLoop( callback );\r\n\r\n\t\t},\r\n\t\tgetCurrentRenderTarget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\r\n\t\t\treturn this.getRenderTarget();\r\n\r\n\t\t},\r\n\t\tgetMaxAnisotropy: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\r\n\t\t\treturn this.capabilities.getMaxAnisotropy();\r\n\r\n\t\t},\r\n\t\tgetPrecision: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\r\n\t\t\treturn this.capabilities.precision;\r\n\r\n\t\t},\r\n\t\tresetGLState: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\r\n\t\t\treturn this.state.reset();\r\n\r\n\t\t},\r\n\t\tsupportsFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\r\n\t\t},\r\n\t\tsupportsHalfFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t},\r\n\t\tsupportsStandardDerivatives: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTextureS3TC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTexturePVRTC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t},\r\n\t\tsupportsBlendMinMax: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t},\r\n\t\tsupportsVertexTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\r\n\t\t\treturn this.capabilities.vertexTextures;\r\n\r\n\t\t},\r\n\t\tsupportsInstancedArrays: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t},\r\n\t\tenableScissorTest: function ( boolean ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\t\tthis.setScissorTest( boolean );\r\n\r\n\t\t},\r\n\t\tinitMaterial: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPrePlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPostPlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\tupdateShadowMap: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetFaceCulling: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\r\n\r\n\t\t},\r\n\t\tallocTextureUnit: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTexture: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTexture2D: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTextureCube: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetActiveMipMapLevel: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\r\n\t\t\treturn this.getActiveMipmapLevel();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLRenderer.prototype, {\r\n\r\n\t\tshadowMapEnabled: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.enabled;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\tthis.shadowMap.enabled = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapType: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\tthis.shadowMap.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapCullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tcontext: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\r\n\t\t\t\treturn this.getContext();\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLShadowMap.prototype, {\r\n\r\n\t\tcullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* cullFace */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderReverseSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderSingleSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTargetCube.prototype, {\r\n\r\n\t\tactiveCubeFace: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tactiveMipMapLevel: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\r\n\r\n\t\twrapS: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\treturn this.texture.wrapS;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\tthis.texture.wrapS = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapT: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\treturn this.texture.wrapT;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\tthis.texture.wrapT = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tmagFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\treturn this.texture.magFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\tthis.texture.magFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tminFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\treturn this.texture.minFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\tthis.texture.minFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tanisotropy: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\treturn this.texture.anisotropy;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\tthis.texture.anisotropy = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffset: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\treturn this.texture.offset;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\tthis.texture.offset = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trepeat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\treturn this.texture.repeat;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\tthis.texture.repeat = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tformat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\treturn this.texture.format;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\tthis.texture.format = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\ttype: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\treturn this.texture.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\tthis.texture.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tgenerateMipmaps: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\treturn this.texture.generateMipmaps;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\tthis.texture.generateMipmaps = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebVRManager.prototype, {\r\n\r\n\t\tstanding: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuserHeight: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Audio.prototype, {\r\n\r\n\t\tload: {\r\n\t\t\tvalue: function ( file ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\r\n\t\t\t\tvar scope = this;\r\n\t\t\t\tvar audioLoader = new AudioLoader();\r\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\r\n\r\n\t\t\t\t\tscope.setBuffer( buffer );\r\n\r\n\t\t\t\t} );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tstartTime: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tAudioAnalyser.prototype.getData = function () {\r\n\r\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\r\n\t\treturn this.getFrequencyData();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\r\n\t\treturn this.update( renderer, scene );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar GeometryUtils = {\r\n\r\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\t\t\tvar matrix;\r\n\r\n\t\t\tif ( geometry2.isMesh ) {\r\n\r\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\t\tmatrix = geometry2.matrix;\r\n\t\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function ( geometry ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\t\treturn geometry.center();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tImageUtils.crossOrigin = undefined;\r\n\r\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) { texture.mapping = mapping; }\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) { texture.mapping = mapping; }\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTexture = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTextureCube = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction CanvasRenderer() {\r\n\r\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction JSONLoader() {\r\n\r\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar SceneUtils = {\r\n\r\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tdetach: function ( /* child, parent, scene */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( /* child, scene, parent */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction LensFlare() {\r\n\r\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\r\n\r\n\t}\r\n\r\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t/* eslint-disable no-undef */\r\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\r\n\t\t\trevision: REVISION,\r\n\t\t} } ) );\r\n\t\t/* eslint-enable no-undef */\r\n\r\n\t}\r\n\r\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\r\n\texports.AddEquation = AddEquation;\r\n\texports.AddOperation = AddOperation;\r\n\texports.AdditiveBlending = AdditiveBlending;\r\n\texports.AlphaFormat = AlphaFormat;\r\n\texports.AlwaysDepth = AlwaysDepth;\r\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\r\n\texports.AmbientLight = AmbientLight;\r\n\texports.AmbientLightProbe = AmbientLightProbe;\r\n\texports.AnimationClip = AnimationClip;\r\n\texports.AnimationLoader = AnimationLoader;\r\n\texports.AnimationMixer = AnimationMixer;\r\n\texports.AnimationObjectGroup = AnimationObjectGroup;\r\n\texports.AnimationUtils = AnimationUtils;\r\n\texports.ArcCurve = ArcCurve;\r\n\texports.ArrayCamera = ArrayCamera;\r\n\texports.ArrowHelper = ArrowHelper;\r\n\texports.Audio = Audio;\r\n\texports.AudioAnalyser = AudioAnalyser;\r\n\texports.AudioContext = AudioContext;\r\n\texports.AudioListener = AudioListener;\r\n\texports.AudioLoader = AudioLoader;\r\n\texports.AxesHelper = AxesHelper;\r\n\texports.AxisHelper = AxisHelper;\r\n\texports.BackSide = BackSide;\r\n\texports.BasicDepthPacking = BasicDepthPacking;\r\n\texports.BasicShadowMap = BasicShadowMap;\r\n\texports.BinaryTextureLoader = BinaryTextureLoader;\r\n\texports.Bone = Bone;\r\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\r\n\texports.BoundingBoxHelper = BoundingBoxHelper;\r\n\texports.Box2 = Box2;\r\n\texports.Box3 = Box3;\r\n\texports.Box3Helper = Box3Helper;\r\n\texports.BoxBufferGeometry = BoxBufferGeometry;\r\n\texports.BoxGeometry = BoxGeometry;\r\n\texports.BoxHelper = BoxHelper;\r\n\texports.BufferAttribute = BufferAttribute;\r\n\texports.BufferGeometry = BufferGeometry;\r\n\texports.BufferGeometryLoader = BufferGeometryLoader;\r\n\texports.ByteType = ByteType;\r\n\texports.Cache = Cache;\r\n\texports.Camera = Camera;\r\n\texports.CameraHelper = CameraHelper;\r\n\texports.CanvasRenderer = CanvasRenderer;\r\n\texports.CanvasTexture = CanvasTexture;\r\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\r\n\texports.CineonToneMapping = CineonToneMapping;\r\n\texports.CircleBufferGeometry = CircleBufferGeometry;\r\n\texports.CircleGeometry = CircleGeometry;\r\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\r\n\texports.Clock = Clock;\r\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\r\n\texports.Color = Color;\r\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\r\n\texports.CompressedTexture = CompressedTexture;\r\n\texports.CompressedTextureLoader = CompressedTextureLoader;\r\n\texports.ConeBufferGeometry = ConeBufferGeometry;\r\n\texports.ConeGeometry = ConeGeometry;\r\n\texports.CubeCamera = CubeCamera;\r\n\texports.CubeGeometry = BoxGeometry;\r\n\texports.CubeReflectionMapping = CubeReflectionMapping;\r\n\texports.CubeRefractionMapping = CubeRefractionMapping;\r\n\texports.CubeTexture = CubeTexture;\r\n\texports.CubeTextureLoader = CubeTextureLoader;\r\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\r\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\r\n\texports.CubicBezierCurve = CubicBezierCurve;\r\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\r\n\texports.CubicInterpolant = CubicInterpolant;\r\n\texports.CullFaceBack = CullFaceBack;\r\n\texports.CullFaceFront = CullFaceFront;\r\n\texports.CullFaceFrontBack = CullFaceFrontBack;\r\n\texports.CullFaceNone = CullFaceNone;\r\n\texports.Curve = Curve;\r\n\texports.CurvePath = CurvePath;\r\n\texports.CustomBlending = CustomBlending;\r\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\r\n\texports.CylinderGeometry = CylinderGeometry;\r\n\texports.Cylindrical = Cylindrical;\r\n\texports.DataTexture = DataTexture;\r\n\texports.DataTexture2DArray = DataTexture2DArray;\r\n\texports.DataTexture3D = DataTexture3D;\r\n\texports.DataTextureLoader = DataTextureLoader;\r\n\texports.DecrementStencilOp = DecrementStencilOp;\r\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\r\n\texports.DefaultLoadingManager = DefaultLoadingManager;\r\n\texports.DepthFormat = DepthFormat;\r\n\texports.DepthStencilFormat = DepthStencilFormat;\r\n\texports.DepthTexture = DepthTexture;\r\n\texports.DirectionalLight = DirectionalLight;\r\n\texports.DirectionalLightHelper = DirectionalLightHelper;\r\n\texports.DirectionalLightShadow = DirectionalLightShadow;\r\n\texports.DiscreteInterpolant = DiscreteInterpolant;\r\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\r\n\texports.DodecahedronGeometry = DodecahedronGeometry;\r\n\texports.DoubleSide = DoubleSide;\r\n\texports.DstAlphaFactor = DstAlphaFactor;\r\n\texports.DstColorFactor = DstColorFactor;\r\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\r\n\texports.DynamicCopyUsage = DynamicCopyUsage;\r\n\texports.DynamicDrawUsage = DynamicDrawUsage;\r\n\texports.DynamicReadUsage = DynamicReadUsage;\r\n\texports.EdgesGeometry = EdgesGeometry;\r\n\texports.EdgesHelper = EdgesHelper;\r\n\texports.EllipseCurve = EllipseCurve;\r\n\texports.EqualDepth = EqualDepth;\r\n\texports.EqualStencilFunc = EqualStencilFunc;\r\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\r\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\r\n\texports.Euler = Euler;\r\n\texports.EventDispatcher = EventDispatcher;\r\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\r\n\texports.ExtrudeGeometry = ExtrudeGeometry;\r\n\texports.Face3 = Face3;\r\n\texports.Face4 = Face4;\r\n\texports.FaceColors = FaceColors;\r\n\texports.FaceNormalsHelper = FaceNormalsHelper;\r\n\texports.FileLoader = FileLoader;\r\n\texports.FlatShading = FlatShading;\r\n\texports.Float32Attribute = Float32Attribute;\r\n\texports.Float32BufferAttribute = Float32BufferAttribute;\r\n\texports.Float64Attribute = Float64Attribute;\r\n\texports.Float64BufferAttribute = Float64BufferAttribute;\r\n\texports.FloatType = FloatType;\r\n\texports.Fog = Fog;\r\n\texports.FogExp2 = FogExp2;\r\n\texports.Font = Font;\r\n\texports.FontLoader = FontLoader;\r\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\r\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\r\n\texports.FrontSide = FrontSide;\r\n\texports.Frustum = Frustum;\r\n\texports.GammaEncoding = GammaEncoding;\r\n\texports.Geometry = Geometry;\r\n\texports.GeometryUtils = GeometryUtils;\r\n\texports.GreaterDepth = GreaterDepth;\r\n\texports.GreaterEqualDepth = GreaterEqualDepth;\r\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\r\n\texports.GreaterStencilFunc = GreaterStencilFunc;\r\n\texports.GridHelper = GridHelper;\r\n\texports.Group = Group;\r\n\texports.HalfFloatType = HalfFloatType;\r\n\texports.HemisphereLight = HemisphereLight;\r\n\texports.HemisphereLightHelper = HemisphereLightHelper;\r\n\texports.HemisphereLightProbe = HemisphereLightProbe;\r\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\r\n\texports.IcosahedronGeometry = IcosahedronGeometry;\r\n\texports.ImageBitmapLoader = ImageBitmapLoader;\r\n\texports.ImageLoader = ImageLoader;\r\n\texports.ImageUtils = ImageUtils;\r\n\texports.ImmediateRenderObject = ImmediateRenderObject;\r\n\texports.IncrementStencilOp = IncrementStencilOp;\r\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\r\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\r\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\r\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\r\n\texports.InstancedMesh = InstancedMesh;\r\n\texports.Int16Attribute = Int16Attribute;\r\n\texports.Int16BufferAttribute = Int16BufferAttribute;\r\n\texports.Int32Attribute = Int32Attribute;\r\n\texports.Int32BufferAttribute = Int32BufferAttribute;\r\n\texports.Int8Attribute = Int8Attribute;\r\n\texports.Int8BufferAttribute = Int8BufferAttribute;\r\n\texports.IntType = IntType;\r\n\texports.InterleavedBuffer = InterleavedBuffer;\r\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\r\n\texports.Interpolant = Interpolant;\r\n\texports.InterpolateDiscrete = InterpolateDiscrete;\r\n\texports.InterpolateLinear = InterpolateLinear;\r\n\texports.InterpolateSmooth = InterpolateSmooth;\r\n\texports.InvertStencilOp = InvertStencilOp;\r\n\texports.JSONLoader = JSONLoader;\r\n\texports.KeepStencilOp = KeepStencilOp;\r\n\texports.KeyframeTrack = KeyframeTrack;\r\n\texports.LOD = LOD;\r\n\texports.LatheBufferGeometry = LatheBufferGeometry;\r\n\texports.LatheGeometry = LatheGeometry;\r\n\texports.Layers = Layers;\r\n\texports.LensFlare = LensFlare;\r\n\texports.LessDepth = LessDepth;\r\n\texports.LessEqualDepth = LessEqualDepth;\r\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\r\n\texports.LessStencilFunc = LessStencilFunc;\r\n\texports.Light = Light;\r\n\texports.LightProbe = LightProbe;\r\n\texports.LightProbeHelper = LightProbeHelper;\r\n\texports.LightShadow = LightShadow;\r\n\texports.Line = Line;\r\n\texports.Line3 = Line3;\r\n\texports.LineBasicMaterial = LineBasicMaterial;\r\n\texports.LineCurve = LineCurve;\r\n\texports.LineCurve3 = LineCurve3;\r\n\texports.LineDashedMaterial = LineDashedMaterial;\r\n\texports.LineLoop = LineLoop;\r\n\texports.LinePieces = LinePieces;\r\n\texports.LineSegments = LineSegments;\r\n\texports.LineStrip = LineStrip;\r\n\texports.LinearEncoding = LinearEncoding;\r\n\texports.LinearFilter = LinearFilter;\r\n\texports.LinearInterpolant = LinearInterpolant;\r\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\r\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\r\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\r\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\r\n\texports.LinearToneMapping = LinearToneMapping;\r\n\texports.Loader = Loader;\r\n\texports.LoaderUtils = LoaderUtils;\r\n\texports.LoadingManager = LoadingManager;\r\n\texports.LogLuvEncoding = LogLuvEncoding;\r\n\texports.LoopOnce = LoopOnce;\r\n\texports.LoopPingPong = LoopPingPong;\r\n\texports.LoopRepeat = LoopRepeat;\r\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\r\n\texports.LuminanceFormat = LuminanceFormat;\r\n\texports.MOUSE = MOUSE;\r\n\texports.Material = Material;\r\n\texports.MaterialLoader = MaterialLoader;\r\n\texports.Math = _Math;\r\n\texports.Matrix3 = Matrix3;\r\n\texports.Matrix4 = Matrix4;\r\n\texports.MaxEquation = MaxEquation;\r\n\texports.Mesh = Mesh;\r\n\texports.MeshBasicMaterial = MeshBasicMaterial;\r\n\texports.MeshDepthMaterial = MeshDepthMaterial;\r\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\r\n\texports.MeshFaceMaterial = MeshFaceMaterial;\r\n\texports.MeshLambertMaterial = MeshLambertMaterial;\r\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\r\n\texports.MeshNormalMaterial = MeshNormalMaterial;\r\n\texports.MeshPhongMaterial = MeshPhongMaterial;\r\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\r\n\texports.MeshStandardMaterial = MeshStandardMaterial;\r\n\texports.MeshToonMaterial = MeshToonMaterial;\r\n\texports.MinEquation = MinEquation;\r\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\r\n\texports.MixOperation = MixOperation;\r\n\texports.MultiMaterial = MultiMaterial;\r\n\texports.MultiplyBlending = MultiplyBlending;\r\n\texports.MultiplyOperation = MultiplyOperation;\r\n\texports.NearestFilter = NearestFilter;\r\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\r\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\r\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\r\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\r\n\texports.NeverDepth = NeverDepth;\r\n\texports.NeverStencilFunc = NeverStencilFunc;\r\n\texports.NoBlending = NoBlending;\r\n\texports.NoColors = NoColors;\r\n\texports.NoToneMapping = NoToneMapping;\r\n\texports.NormalBlending = NormalBlending;\r\n\texports.NotEqualDepth = NotEqualDepth;\r\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\r\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\r\n\texports.Object3D = Object3D;\r\n\texports.ObjectLoader = ObjectLoader;\r\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\r\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\r\n\texports.OctahedronGeometry = OctahedronGeometry;\r\n\texports.OneFactor = OneFactor;\r\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\r\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\r\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\r\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\r\n\texports.OrthographicCamera = OrthographicCamera;\r\n\texports.PCFShadowMap = PCFShadowMap;\r\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\r\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\r\n\texports.ParametricGeometry = ParametricGeometry;\r\n\texports.Particle = Particle;\r\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\r\n\texports.ParticleSystem = ParticleSystem;\r\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\r\n\texports.Path = Path;\r\n\texports.PerspectiveCamera = PerspectiveCamera;\r\n\texports.Plane = Plane;\r\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\r\n\texports.PlaneGeometry = PlaneGeometry;\r\n\texports.PlaneHelper = PlaneHelper;\r\n\texports.PointCloud = PointCloud;\r\n\texports.PointCloudMaterial = PointCloudMaterial;\r\n\texports.PointLight = PointLight;\r\n\texports.PointLightHelper = PointLightHelper;\r\n\texports.Points = Points;\r\n\texports.PointsMaterial = PointsMaterial;\r\n\texports.PolarGridHelper = PolarGridHelper;\r\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\r\n\texports.PolyhedronGeometry = PolyhedronGeometry;\r\n\texports.PositionalAudio = PositionalAudio;\r\n\texports.PositionalAudioHelper = PositionalAudioHelper;\r\n\texports.PropertyBinding = PropertyBinding;\r\n\texports.PropertyMixer = PropertyMixer;\r\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\r\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\r\n\texports.Quaternion = Quaternion;\r\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\r\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\r\n\texports.REVISION = REVISION;\r\n\texports.RGBADepthPacking = RGBADepthPacking;\r\n\texports.RGBAFormat = RGBAFormat;\r\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\r\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\r\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\r\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\r\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\r\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\r\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\r\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\r\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\r\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\r\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\r\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\r\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\r\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\r\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\r\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\r\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\r\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\r\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\r\n\texports.RGBDEncoding = RGBDEncoding;\r\n\texports.RGBEEncoding = RGBEEncoding;\r\n\texports.RGBEFormat = RGBEFormat;\r\n\texports.RGBFormat = RGBFormat;\r\n\texports.RGBM16Encoding = RGBM16Encoding;\r\n\texports.RGBM7Encoding = RGBM7Encoding;\r\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\r\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\r\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\r\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\r\n\texports.RawShaderMaterial = RawShaderMaterial;\r\n\texports.Ray = Ray;\r\n\texports.Raycaster = Raycaster;\r\n\texports.RectAreaLight = RectAreaLight;\r\n\texports.RectAreaLightHelper = RectAreaLightHelper;\r\n\texports.RedFormat = RedFormat;\r\n\texports.ReinhardToneMapping = ReinhardToneMapping;\r\n\texports.RepeatWrapping = RepeatWrapping;\r\n\texports.ReplaceStencilOp = ReplaceStencilOp;\r\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\r\n\texports.RingBufferGeometry = RingBufferGeometry;\r\n\texports.RingGeometry = RingGeometry;\r\n\texports.Scene = Scene;\r\n\texports.SceneUtils = SceneUtils;\r\n\texports.ShaderChunk = ShaderChunk;\r\n\texports.ShaderLib = ShaderLib;\r\n\texports.ShaderMaterial = ShaderMaterial;\r\n\texports.ShadowMaterial = ShadowMaterial;\r\n\texports.Shape = Shape;\r\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\r\n\texports.ShapeGeometry = ShapeGeometry;\r\n\texports.ShapePath = ShapePath;\r\n\texports.ShapeUtils = ShapeUtils;\r\n\texports.ShortType = ShortType;\r\n\texports.Skeleton = Skeleton;\r\n\texports.SkeletonHelper = SkeletonHelper;\r\n\texports.SkinnedMesh = SkinnedMesh;\r\n\texports.SmoothShading = SmoothShading;\r\n\texports.Sphere = Sphere;\r\n\texports.SphereBufferGeometry = SphereBufferGeometry;\r\n\texports.SphereGeometry = SphereGeometry;\r\n\texports.Spherical = Spherical;\r\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\r\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\r\n\texports.Spline = Spline;\r\n\texports.SplineCurve = SplineCurve;\r\n\texports.SplineCurve3 = SplineCurve3;\r\n\texports.SpotLight = SpotLight;\r\n\texports.SpotLightHelper = SpotLightHelper;\r\n\texports.SpotLightShadow = SpotLightShadow;\r\n\texports.Sprite = Sprite;\r\n\texports.SpriteMaterial = SpriteMaterial;\r\n\texports.SrcAlphaFactor = SrcAlphaFactor;\r\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\r\n\texports.SrcColorFactor = SrcColorFactor;\r\n\texports.StaticCopyUsage = StaticCopyUsage;\r\n\texports.StaticDrawUsage = StaticDrawUsage;\r\n\texports.StaticReadUsage = StaticReadUsage;\r\n\texports.StereoCamera = StereoCamera;\r\n\texports.StreamCopyUsage = StreamCopyUsage;\r\n\texports.StreamDrawUsage = StreamDrawUsage;\r\n\texports.StreamReadUsage = StreamReadUsage;\r\n\texports.StringKeyframeTrack = StringKeyframeTrack;\r\n\texports.SubtractEquation = SubtractEquation;\r\n\texports.SubtractiveBlending = SubtractiveBlending;\r\n\texports.TOUCH = TOUCH;\r\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\r\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\r\n\texports.TetrahedronGeometry = TetrahedronGeometry;\r\n\texports.TextBufferGeometry = TextBufferGeometry;\r\n\texports.TextGeometry = TextGeometry;\r\n\texports.Texture = Texture;\r\n\texports.TextureLoader = TextureLoader;\r\n\texports.TorusBufferGeometry = TorusBufferGeometry;\r\n\texports.TorusGeometry = TorusGeometry;\r\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\r\n\texports.TorusKnotGeometry = TorusKnotGeometry;\r\n\texports.Triangle = Triangle;\r\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\r\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\r\n\texports.TrianglesDrawMode = TrianglesDrawMode;\r\n\texports.TubeBufferGeometry = TubeBufferGeometry;\r\n\texports.TubeGeometry = TubeGeometry;\r\n\texports.UVMapping = UVMapping;\r\n\texports.Uint16Attribute = Uint16Attribute;\r\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\r\n\texports.Uint32Attribute = Uint32Attribute;\r\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\r\n\texports.Uint8Attribute = Uint8Attribute;\r\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\r\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\r\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\r\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\r\n\texports.Uniform = Uniform;\r\n\texports.UniformsLib = UniformsLib;\r\n\texports.UniformsUtils = UniformsUtils;\r\n\texports.UnsignedByteType = UnsignedByteType;\r\n\texports.UnsignedInt248Type = UnsignedInt248Type;\r\n\texports.UnsignedIntType = UnsignedIntType;\r\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\r\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\r\n\texports.UnsignedShort565Type = UnsignedShort565Type;\r\n\texports.UnsignedShortType = UnsignedShortType;\r\n\texports.VSMShadowMap = VSMShadowMap;\r\n\texports.Vector2 = Vector2;\r\n\texports.Vector3 = Vector3;\r\n\texports.Vector4 = Vector4;\r\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\r\n\texports.Vertex = Vertex;\r\n\texports.VertexColors = VertexColors;\r\n\texports.VertexNormalsHelper = VertexNormalsHelper;\r\n\texports.VideoTexture = VideoTexture;\r\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\r\n\texports.WebGLRenderTarget = WebGLRenderTarget;\r\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\r\n\texports.WebGLRenderer = WebGLRenderer;\r\n\texports.WebGLUtils = WebGLUtils;\r\n\texports.WireframeGeometry = WireframeGeometry;\r\n\texports.WireframeHelper = WireframeHelper;\r\n\texports.WrapAroundEnding = WrapAroundEnding;\r\n\texports.XHRLoader = XHRLoader;\r\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\r\n\texports.ZeroFactor = ZeroFactor;\r\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\r\n\texports.ZeroStencilOp = ZeroStencilOp;\r\n\texports.sRGBEncoding = sRGBEncoding;\r\n\r\n    return exports;\r\n});\r\n\ndefine('skylark-threejs/main',[\r\n\t\"skylark-langx/skylark\",\r\n    \"./three\"\r\n], function(skylark,threejs) {\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\ndefine('skylark-threejs-ex/shaders/CopyShader',[],function () {\n    'use strict';\n    var CopyShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float opacity;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tgl_FragColor = opacity * texel;',\n            '}'\n        ].join('\\n')\n    };\n    return CopyShader;\n});\ndefine('skylark-threejs-ex/shaders/BokehShader',[],function () {\n    'use strict';\n    var BokehShader = {\n        defines: {\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tColor': { value: null },\n            'tDepth': { value: null },\n            'focus': { value: 1 },\n            'aspect': { value: 1 },\n            'aperture': { value: 0.025 },\n            'maxblur': { value: 1 },\n            'nearClip': { value: 1 },\n            'farClip': { value: 1000 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            'uniform sampler2D tColor;',\n            'uniform sampler2D tDepth;',\n            'uniform float maxblur;',\n            'uniform float aperture;',\n            'uniform float nearClip;',\n            'uniform float farClip;',\n            'uniform float focus;',\n            'uniform float aspect;',\n            '#include <packing>',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, nearClip, farClip );',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tvec2 aspectcorrect = vec2( 1.0, aspect );',\n            '\\tfloat viewZ = getViewZ( getDepth( vUv ) );',\n            '\\tfloat factor = ( focus + viewZ );',\n            '\\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );',\n            '\\tvec2 dofblur9 = dofblur * 0.9;',\n            '\\tvec2 dofblur7 = dofblur * 0.7;',\n            '\\tvec2 dofblur4 = dofblur * 0.4;',\n            '\\tvec4 col = vec4( 0.0 );',\n            '\\tcol += texture2D( tColor, vUv.xy );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );',\n            '\\tgl_FragColor = col / 41.0;',\n            '\\tgl_FragColor.a = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n    return BokehShader;\n});\ndefine('skylark-threejs-ex/shaders/SAOShader',[\n   \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SAOShader = {\n        defines: {\n            'NUM_SAMPLES': 7,\n            'NUM_RINGS': 4,\n            'NORMAL_TEXTURE': 0,\n            'DIFFUSE_TEXTURE': 0,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDepth': { value: null },\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'cameraNear': { value: 1 },\n            'cameraFar': { value: 100 },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'scale': { value: 1 },\n            'intensity': { value: 0.1 },\n            'bias': { value: 0.5 },\n            'minResolution': { value: 0 },\n            'kernelRadius': { value: 100 },\n            'randomSeed': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            '#if DIFFUSE_TEXTURE == 1',\n            'uniform sampler2D tDiffuse;',\n            '#endif',\n            'uniform sampler2D tDepth;',\n            '#if NORMAL_TEXTURE == 1',\n            'uniform sampler2D tNormal;',\n            '#endif',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float scale;',\n            'uniform float intensity;',\n            'uniform float bias;',\n            'uniform float kernelRadius;',\n            'uniform float minResolution;',\n            'uniform vec2 size;',\n            'uniform float randomSeed;',\n            '// RGBA depth',\n            '#include <packing>',\n            'vec4 getDefaultColor( const in vec2 screenPosition ) {',\n            '\\t#if DIFFUSE_TEXTURE == 1',\n            '\\treturn texture2D( tDiffuse, vUv );',\n            '\\t#else',\n            '\\treturn vec4( 1.0 );',\n            '\\t#endif',\n            '}',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',\n            '\\t#if NORMAL_TEXTURE == 1',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '\\t#else',\n            '\\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',\n            '\\t#endif',\n            '}',\n            'float scaleDividedByCameraFar;',\n            'float minResolutionMultipliedByCameraFar;',\n            'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',\n            '\\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',\n            '\\tfloat viewDistance = length( viewDelta );',\n            '\\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',\n            '\\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',\n            '}',\n            '// moving costly divides into consts',\n            'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',\n            'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',\n            'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',\n            '\\t// precompute some variables require in getOcclusion.',\n            '\\tscaleDividedByCameraFar = scale / cameraFar;',\n            '\\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',\n            '\\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',\n            '\\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',\n            '\\tfloat angle = rand( vUv + randomSeed ) * PI2;',\n            '\\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',\n            '\\tvec2 radiusStep = radius;',\n            '\\tfloat occlusionSum = 0.0;',\n            '\\tfloat weightSum = 0.0;',\n            '\\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',\n            '\\t\\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',\n            '\\t\\tradius += radiusStep;',\n            '\\t\\tangle += ANGLE_STEP;',\n            '\\t\\tfloat sampleDepth = getDepth( sampleUv );',\n            '\\t\\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\t\\tcontinue;',\n            '\\t\\t}',\n            '\\t\\tfloat sampleViewZ = getViewZ( sampleDepth );',\n            '\\t\\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',\n            '\\t\\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',\n            '\\t\\tweightSum += 1.0;',\n            '\\t}',\n            '\\tif( weightSum == 0.0 ) discard;',\n            '\\treturn occlusionSum * ( intensity / weightSum );',\n            '}',\n            'void main() {',\n            '\\tfloat centerDepth = getDepth( vUv );',\n            '\\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = getViewZ( centerDepth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',\n            '\\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',\n            '\\tgl_FragColor = getDefaultColor( vUv );',\n            '\\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',\n            '}'\n        ].join('\\n')\n    };\n    return SAOShader;\n});\ndefine('skylark-threejs-ex/shaders/DepthLimitedBlurShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var DepthLimitedBlurShader = {\n        defines: {\n            'KERNEL_RADIUS': 4,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'sampleUvOffsets': { value: [new THREE.Vector2(0, 0)] },\n            'sampleWeights': { value: [1] },\n            'tDepth': { value: null },\n            'cameraNear': { value: 10 },\n            'cameraFar': { value: 1000 },\n            'depthCutoff': { value: 10 }\n        },\n        vertexShader: [\n            '#include <common>',\n            'uniform vec2 size;',\n            'varying vec2 vUv;',\n            'varying vec2 vInvSize;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tvInvSize = 1.0 / size;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            '#include <packing>',\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tDepth;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform float depthCutoff;',\n            'uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];',\n            'uniform float sampleWeights[ KERNEL_RADIUS + 1 ];',\n            'varying vec2 vUv;',\n            'varying vec2 vInvSize;',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getDepth( vUv );',\n            '\\tif( depth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = -getViewZ( depth );',\n            '\\tbool rBreak = false, lBreak = false;',\n            '\\tfloat weightSum = sampleWeights[0];',\n            '\\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;',\n            '\\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {',\n            '\\t\\tfloat sampleWeight = sampleWeights[i];',\n            '\\t\\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;',\n            '\\t\\tvec2 sampleUv = vUv + sampleUvOffset;',\n            '\\t\\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );',\n            '\\t\\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;',\n            '\\t\\tif( ! rBreak ) {',\n            '\\t\\t\\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',\n            '\\t\\t\\tweightSum += sampleWeight;',\n            '\\t\\t}',\n            '\\t\\tsampleUv = vUv - sampleUvOffset;',\n            '\\t\\tviewZ = -getViewZ( getDepth( sampleUv ) );',\n            '\\t\\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;',\n            '\\t\\tif( ! lBreak ) {',\n            '\\t\\t\\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',\n            '\\t\\t\\tweightSum += sampleWeight;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tgl_FragColor = diffuseSum / weightSum;',\n            '}'\n        ].join('\\n')\n    };\n    var BlurShaderUtils = DepthLimitedBlurShader.BlurShaderUtils = {\n        createSampleWeights: function (kernelRadius, stdDev) {\n            var gaussian = function (x, stdDev) {\n                return Math.exp(-(x * x) / (2 * (stdDev * stdDev))) / (Math.sqrt(2 * Math.PI) * stdDev);\n            };\n            var weights = [];\n            for (var i = 0; i <= kernelRadius; i++) {\n                weights.push(gaussian(i, stdDev));\n            }\n            return weights;\n        },\n        createSampleOffsets: function (kernelRadius, uvIncrement) {\n            var offsets = [];\n            for (var i = 0; i <= kernelRadius; i++) {\n                offsets.push(uvIncrement.clone().multiplyScalar(i));\n            }\n            return offsets;\n        },\n        configure: function (material, kernelRadius, stdDev, uvIncrement) {\n            material.defines['KERNEL_RADIUS'] = kernelRadius;\n            material.uniforms['sampleUvOffsets'].value = BlurShaderUtils.createSampleOffsets(kernelRadius, uvIncrement);\n            material.uniforms['sampleWeights'].value = BlurShaderUtils.createSampleWeights(kernelRadius, stdDev);\n            material.needsUpdate = true;\n        }\n    };\n\n    return DepthLimitedBlurShader;\n    \n});\ndefine('skylark-threejs-ex/shaders/UnpackDepthRGBAShader',[],function () {\n    'use strict';\n    var UnpackDepthRGBAShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float opacity;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'void main() {',\n            '\\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );',\n            '\\tgl_FragColor = vec4( vec3( depth ), opacity );',\n            '}'\n        ].join('\\n')\n    };\n    return  UnpackDepthRGBAShader ;\n});\ndefine('skylark-threejs-ex/shaders/ConvolutionShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var ConvolutionShader = {\n        defines: {\n            'KERNEL_SIZE_FLOAT': '25.0',\n            'KERNEL_SIZE_INT': '25'\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'uImageIncrement': { value: new THREE.Vector2(0.001953125, 0) },\n            'cKernel': { value: [] }\n        },\n        vertexShader: [\n            'uniform vec2 uImageIncrement;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float cKernel[ KERNEL_SIZE_INT ];',\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 uImageIncrement;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 imageCoord = vUv;',\n            '\\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );',\n            '\\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {',\n            '\\t\\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];',\n            '\\t\\timageCoord += uImageIncrement;',\n            '\\t}',\n            '\\tgl_FragColor = sum;',\n            '}'\n        ].join('\\n'),\n        buildKernel: function (sigma) {\n            function gauss(x, sigma) {\n                return Math.exp(-(x * x) / (2 * sigma * sigma));\n            }\n            var i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil(sigma * 3) + 1;\n            if (kernelSize > kMaxKernelSize)\n                kernelSize = kMaxKernelSize;\n            halfWidth = (kernelSize - 1) * 0.5;\n            values = new Array(kernelSize);\n            sum = 0;\n            for (i = 0; i < kernelSize; ++i) {\n                values[i] = gauss(i - halfWidth, sigma);\n                sum += values[i];\n            }\n            for (i = 0; i < kernelSize; ++i)\n                values[i] /= sum;\n            return values;\n        }\n    };\n    return ConvolutionShader;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityHighPassShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var LuminosityHighPassShader = {\n        shaderID: 'luminosityHighPass',\n        uniforms: {\n            'tDiffuse': { value: null },\n            'luminosityThreshold': { value: 1 },\n            'smoothWidth': { value: 1 },\n            'defaultColor': { value: new THREE.Color(0) },\n            'defaultOpacity': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec3 defaultColor;',\n            'uniform float defaultOpacity;',\n            'uniform float luminosityThreshold;',\n            'uniform float smoothWidth;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\n            '\\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\n            '\\tgl_FragColor = mix( outputColor, texel, alpha );',\n            '}'\n        ].join('\\n')\n    };\n    return LuminosityHighPassShader;\n});\ndefine('skylark-threejs-ex/shaders/FXAAShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var FXAAShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new  THREE.Vector2(1 / 1024, 1 / 512) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'precision highp float;',\n            '',\n            'uniform sampler2D tDiffuse;',\n            '',\n            'uniform vec2 resolution;',\n            '',\n            'varying vec2 vUv;',\n            '',\n            '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)',\n            '',\n            '//----------------------------------------------------------------------------------',\n            '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag',\n            '// SDK Version: v3.00',\n            '// Email:       gameworks@nvidia.com',\n            '// Site:        http://developer.nvidia.com/',\n            '//',\n            '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.',\n            '//',\n            '// Redistribution and use in source and binary forms, with or without',\n            '// modification, are permitted provided that the following conditions',\n            '// are met:',\n            '//  * Redistributions of source code must retain the above copyright',\n            '//    notice, this list of conditions and the following disclaimer.',\n            '//  * Redistributions in binary form must reproduce the above copyright',\n            '//    notice, this list of conditions and the following disclaimer in the',\n            '//    documentation and/or other materials provided with the distribution.',\n            '//  * Neither the name of NVIDIA CORPORATION nor the names of its',\n            '//    contributors may be used to endorse or promote products derived',\n            '//    from this software without specific prior written permission.',\n            '//',\n            \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\n            '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',\n            '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',\n            '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR',\n            '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,',\n            '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,',\n            '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR',\n            '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY',\n            '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',\n            '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE',\n            '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',\n            '//',\n            '//----------------------------------------------------------------------------------',\n            '',\n            '#define FXAA_PC 1',\n            '#define FXAA_GLSL_100 1',\n            '#define FXAA_QUALITY_PRESET 12',\n            '',\n            '#define FXAA_GREEN_AS_LUMA 1',\n            '',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_PC_CONSOLE',\n            '    //',\n            '    // The console algorithm for PC is included',\n            '    // for developers targeting really low spec machines.',\n            '    // Likely better to just run FXAA_PC, and use a really low preset.',\n            '    //',\n            '    #define FXAA_PC_CONSOLE 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GLSL_120',\n            '    #define FXAA_GLSL_120 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GLSL_130',\n            '    #define FXAA_GLSL_130 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_3',\n            '    #define FXAA_HLSL_3 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_4',\n            '    #define FXAA_HLSL_4 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_5',\n            '    #define FXAA_HLSL_5 0',\n            '#endif',\n            '/*==========================================================================*/',\n            '#ifndef FXAA_GREEN_AS_LUMA',\n            '    //',\n            '    // For those using non-linear color,',\n            '    // and either not able to get luma in alpha, or not wanting to,',\n            '    // this enables FXAA to run using green as a proxy for luma.',\n            '    // So with this enabled, no need to pack luma in alpha.',\n            '    //',\n            '    // This will turn off AA on anything which lacks some amount of green.',\n            '    // Pure red and blue or combination of only R and B, will get no AA.',\n            '    //',\n            '    // Might want to lower the settings for both,',\n            '    //    fxaaConsoleEdgeThresholdMin',\n            '    //    fxaaQualityEdgeThresholdMin',\n            '    // In order to insure AA does not get turned off on colors',\n            '    // which contain a minor amount of green.',\n            '    //',\n            '    // 1 = On.',\n            '    // 0 = Off.',\n            '    //',\n            '    #define FXAA_GREEN_AS_LUMA 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_EARLY_EXIT',\n            '    //',\n            \"    // Controls algorithm's early exit path.\",\n            '    // On PS3 turning this ON adds 2 cycles to the shader.',\n            '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',\n            '    // Turning this off on console will result in a more blurry image.',\n            '    // So this defaults to on.',\n            '    //',\n            '    // 1 = On.',\n            '    // 0 = Off.',\n            '    //',\n            '    #define FXAA_EARLY_EXIT 1',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_DISCARD',\n            '    //',\n            '    // Only valid for PC OpenGL currently.',\n            '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',\n            '    //',\n            \"    // 1 = Use discard on pixels which don't need AA.\",\n            '    //     For APIs which enable concurrent TEX+ROP from same surface.',\n            \"    // 0 = Return unchanged color on pixels which don't need AA.\",\n            '    //',\n            '    #define FXAA_DISCARD 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_FAST_PIXEL_OFFSET',\n            '    //',\n            '    // Used for GLSL 120 only.',\n            '    //',\n            '    // 1 = GL API supports fast pixel offsets',\n            '    // 0 = do not use fast pixel offsets',\n            '    //',\n            '    #ifdef GL_EXT_gpu_shader4',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifdef GL_NV_gpu_shader5',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifdef GL_ARB_gpu_shader5',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifndef FXAA_FAST_PIXEL_OFFSET',\n            '        #define FXAA_FAST_PIXEL_OFFSET 0',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GATHER4_ALPHA',\n            '    //',\n            '    // 1 = API supports gather4 on alpha channel.',\n            '    // 0 = API does not support gather4 on alpha channel.',\n            '    //',\n            '    #if (FXAA_HLSL_5 == 1)',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifdef GL_ARB_gpu_shader5',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifdef GL_NV_gpu_shader5',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifndef FXAA_GATHER4_ALPHA',\n            '        #define FXAA_GATHER4_ALPHA 0',\n            '    #endif',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '                        FXAA QUALITY - TUNING KNOBS',\n            '------------------------------------------------------------------------------',\n            'NOTE the other tuning knobs are now in the shader function inputs!',\n            '============================================================================*/',\n            '#ifndef FXAA_QUALITY_PRESET',\n            '    //',\n            '    // Choose the quality preset.',\n            '    // This needs to be compiled into the shader as it effects code.',\n            '    // Best option to include multiple presets is to',\n            '    // in each shader define the preset, then include this file.',\n            '    //',\n            '    // OPTIONS',\n            '    // -----------------------------------------------------------------------',\n            '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',\n            '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',\n            '    // 39       - no dither, very expensive',\n            '    //',\n            '    // NOTES',\n            '    // -----------------------------------------------------------------------',\n            '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',\n            '    // 13 = about same speed as FXAA 3.9 and better than 12',\n            '    // 23 = closest to FXAA 3.9 visually and performance wise',\n            '    //  _ = the lowest digit is directly related to performance',\n            '    // _  = the highest digit is directly related to style',\n            '    //',\n            '    #define FXAA_QUALITY_PRESET 12',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                           FXAA QUALITY - PRESETS',\n            '',\n            '============================================================================*/',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - MEDIUM DITHER PRESETS',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 10)',\n            '    #define FXAA_QUALITY_PS 3',\n            '    #define FXAA_QUALITY_P0 1.5',\n            '    #define FXAA_QUALITY_P1 3.0',\n            '    #define FXAA_QUALITY_P2 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 11)',\n            '    #define FXAA_QUALITY_PS 4',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 3.0',\n            '    #define FXAA_QUALITY_P3 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 12)',\n            '    #define FXAA_QUALITY_PS 5',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 4.0',\n            '    #define FXAA_QUALITY_P4 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 13)',\n            '    #define FXAA_QUALITY_PS 6',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 4.0',\n            '    #define FXAA_QUALITY_P5 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 14)',\n            '    #define FXAA_QUALITY_PS 7',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 4.0',\n            '    #define FXAA_QUALITY_P6 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 15)',\n            '    #define FXAA_QUALITY_PS 8',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 4.0',\n            '    #define FXAA_QUALITY_P7 12.0',\n            '#endif',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - LOW DITHER PRESETS',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 20)',\n            '    #define FXAA_QUALITY_PS 3',\n            '    #define FXAA_QUALITY_P0 1.5',\n            '    #define FXAA_QUALITY_P1 2.0',\n            '    #define FXAA_QUALITY_P2 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 21)',\n            '    #define FXAA_QUALITY_PS 4',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 22)',\n            '    #define FXAA_QUALITY_PS 5',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 23)',\n            '    #define FXAA_QUALITY_PS 6',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 24)',\n            '    #define FXAA_QUALITY_PS 7',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 3.0',\n            '    #define FXAA_QUALITY_P6 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 25)',\n            '    #define FXAA_QUALITY_PS 8',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 4.0',\n            '    #define FXAA_QUALITY_P7 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 26)',\n            '    #define FXAA_QUALITY_PS 9',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 4.0',\n            '    #define FXAA_QUALITY_P8 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 27)',\n            '    #define FXAA_QUALITY_PS 10',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 4.0',\n            '    #define FXAA_QUALITY_P9 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 28)',\n            '    #define FXAA_QUALITY_PS 11',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 4.0',\n            '    #define FXAA_QUALITY_P10 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 29)',\n            '    #define FXAA_QUALITY_PS 12',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 2.0',\n            '    #define FXAA_QUALITY_P10 4.0',\n            '    #define FXAA_QUALITY_P11 8.0',\n            '#endif',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - EXTREME QUALITY',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 39)',\n            '    #define FXAA_QUALITY_PS 12',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.0',\n            '    #define FXAA_QUALITY_P2 1.0',\n            '    #define FXAA_QUALITY_P3 1.0',\n            '    #define FXAA_QUALITY_P4 1.0',\n            '    #define FXAA_QUALITY_P5 1.5',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 2.0',\n            '    #define FXAA_QUALITY_P10 4.0',\n            '    #define FXAA_QUALITY_P11 8.0',\n            '#endif',\n            '',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                                API PORTING',\n            '',\n            '============================================================================*/',\n            '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',\n            '    #define FxaaBool bool',\n            '    #define FxaaDiscard discard',\n            '    #define FxaaFloat float',\n            '    #define FxaaFloat2 vec2',\n            '    #define FxaaFloat3 vec3',\n            '    #define FxaaFloat4 vec4',\n            '    #define FxaaHalf float',\n            '    #define FxaaHalf2 vec2',\n            '    #define FxaaHalf3 vec3',\n            '    #define FxaaHalf4 vec4',\n            '    #define FxaaInt2 ivec2',\n            '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',\n            '    #define FxaaTex sampler2D',\n            '#else',\n            '    #define FxaaBool bool',\n            '    #define FxaaDiscard clip(-1)',\n            '    #define FxaaFloat float',\n            '    #define FxaaFloat2 float2',\n            '    #define FxaaFloat3 float3',\n            '    #define FxaaFloat4 float4',\n            '    #define FxaaHalf half',\n            '    #define FxaaHalf2 half2',\n            '    #define FxaaHalf3 half3',\n            '    #define FxaaHalf4 half4',\n            '    #define FxaaSat(x) saturate(x)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_100 == 1)',\n            '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',\n            '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_120 == 1)',\n            '    // Requires,',\n            '    //  #version 120',\n            '    // And at least,',\n            '    //  #extension GL_EXT_gpu_shader4 : enable',\n            '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',\n            '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',\n            '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',\n            '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',\n            '    #else',\n            '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',\n            '    #endif',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_130 == 1)',\n            '    // Requires \"#version 130\" or better',\n            '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_3 == 1)',\n            '    #define FxaaInt2 float2',\n            '    #define FxaaTex sampler2D',\n            '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',\n            '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_4 == 1)',\n            '    #define FxaaInt2 int2',\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_5 == 1)',\n            '    #define FxaaInt2 int2',\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n            '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',\n            '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',\n            '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',\n            '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',\n            '============================================================================*/',\n            '#if (FXAA_GREEN_AS_LUMA == 0)',\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',\n            '#else',\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',\n            '#endif',\n            '',\n            '',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                             FXAA3 QUALITY - PC',\n            '',\n            '============================================================================*/',\n            '#if (FXAA_PC == 1)',\n            '/*--------------------------------------------------------------------------*/',\n            'FxaaFloat4 FxaaPixelShader(',\n            '    //',\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\n            '    // {xy} = center of pixel',\n            '    FxaaFloat2 pos,',\n            '    //',\n            '    // Used only for FXAA Console, and not used on the 360 version.',\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\n            '    // {xy_} = upper left of pixel',\n            '    // {_zw} = lower right of pixel',\n            '    FxaaFloat4 fxaaConsolePosPos,',\n            '    //',\n            '    // Input color texture.',\n            '    // {rgb_} = color in linear or perceptual color space',\n            '    // if (FXAA_GREEN_AS_LUMA == 0)',\n            '    //     {__a} = luma in perceptual color space (not linear)',\n            '    FxaaTex tex,',\n            '    //',\n            '    // Only used on the optimized 360 version of FXAA Console.',\n            '    // For everything but 360, just use the same input here as for \"tex\".',\n            '    // For 360, same texture, just alias with a 2nd sampler.',\n            '    // This sampler needs to have an exponent bias of -1.',\n            '    FxaaTex fxaaConsole360TexExpBiasNegOne,',\n            '    //',\n            '    // Only used on the optimized 360 version of FXAA Console.',\n            '    // For everything but 360, just use the same input here as for \"tex\".',\n            '    // For 360, same texture, just alias with a 3nd sampler.',\n            '    // This sampler needs to have an exponent bias of -2.',\n            '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This must be from a constant/uniform.',\n            '    // {x_} = 1.0/screenWidthInPixels',\n            '    // {_y} = 1.0/screenHeightInPixels',\n            '    FxaaFloat2 fxaaQualityRcpFrame,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This must be from a constant/uniform.',\n            '    // This effects sub-pixel AA quality and inversely sharpness.',\n            '    //   Where N ranges between,',\n            '    //     N = 0.50 (default)',\n            '    //     N = 0.33 (sharper)',\n            '    // {x__} = -N/screenWidthInPixels',\n            '    // {_y_} = -N/screenHeightInPixels',\n            '    // {_z_} =  N/screenWidthInPixels',\n            '    // {__w} =  N/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // Not used on 360, but used on PS3 and PC.',\n            '    // This must be from a constant/uniform.',\n            '    // {x__} = -2.0/screenWidthInPixels',\n            '    // {_y_} = -2.0/screenHeightInPixels',\n            '    // {_z_} =  2.0/screenWidthInPixels',\n            '    // {__w} =  2.0/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',\n            '    // This must be from a constant/uniform.',\n            '    // {x__} =  8.0/screenWidthInPixels',\n            '    // {_y_} =  8.0/screenHeightInPixels',\n            '    // {_z_} = -4.0/screenWidthInPixels',\n            '    // {__w} = -4.0/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_SUBPIX define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Choose the amount of sub-pixel aliasing removal.',\n            '    // This can effect sharpness.',\n            '    //   1.00 - upper limit (softer)',\n            '    //   0.75 - default amount of filtering',\n            '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',\n            '    //   0.25 - almost off',\n            '    //   0.00 - completely off',\n            '    FxaaFloat fxaaQualitySubpix,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',\n            '    // It is here now to allow easier tuning.',\n            '    // The minimum amount of local contrast required to apply algorithm.',\n            '    //   0.333 - too little (faster)',\n            '    //   0.250 - low quality',\n            '    //   0.166 - default',\n            '    //   0.125 - high quality',\n            '    //   0.063 - overkill (slower)',\n            '    FxaaFloat fxaaQualityEdgeThreshold,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Trims the algorithm from processing darks.',\n            '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',\n            '    //   0.0625 - high quality (faster)',\n            '    //   0.0312 - visible limit (slower)',\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n            '    //   Likely want to set this to zero.',\n            '    //   As colors that are mostly not-green',\n            '    //   will appear very dark in the green channel!',\n            '    //   Tune by looking at mostly non-green content,',\n            '    //   then start at zero and increase until aliasing is a problem.',\n            '    FxaaFloat fxaaQualityEdgeThresholdMin,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',\n            '    // It is here now to allow easier tuning.',\n            '    // This does not effect PS3, as this needs to be compiled in.',\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',\n            '    //   Due to the PS3 being ALU bound,',\n            '    //   there are only three safe values here: 2 and 4 and 8.',\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n            '    // For all other platforms can be a non-power of two.',\n            '    //   8.0 is sharper (default!!!)',\n            '    //   4.0 is softer',\n            '    //   2.0 is really soft (good only for vector graphics inputs)',\n            '    FxaaFloat fxaaConsoleEdgeSharpness,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',\n            '    // It is here now to allow easier tuning.',\n            '    // This does not effect PS3, as this needs to be compiled in.',\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',\n            '    //   Due to the PS3 being ALU bound,',\n            '    //   there are only two safe values here: 1/4 and 1/8.',\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n            '    // The console setting has a different mapping than the quality setting.',\n            '    // Other platforms can use other values.',\n            '    //   0.125 leaves less aliasing, but is softer (default!!!)',\n            '    //   0.25 leaves more aliasing, and is sharper',\n            '    FxaaFloat fxaaConsoleEdgeThreshold,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Trims the algorithm from processing darks.',\n            '    // The console setting has a different mapping than the quality setting.',\n            '    // This only applies when FXAA_EARLY_EXIT is 1.',\n            '    // This does not apply to PS3,',\n            '    // PS3 was simplified to avoid more shader instructions.',\n            '    //   0.06 - faster but more aliasing in darks',\n            '    //   0.05 - default',\n            '    //   0.04 - slower and less aliasing in darks',\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n            '    //   Likely want to set this to zero.',\n            '    //   As colors that are mostly not-green',\n            '    //   will appear very dark in the green channel!',\n            '    //   Tune by looking at mostly non-green content,',\n            '    //   then start at zero and increase until aliasing is a problem.',\n            '    FxaaFloat fxaaConsoleEdgeThresholdMin,',\n            '    //',\n            '    // Extra constants for 360 FXAA Console only.',\n            '    // Use zeros or anything else for other platforms.',\n            '    // These must be in physical constant registers and NOT immediates.',\n            '    // Immediates will result in compiler un-optimizing.',\n            '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',\n            '    FxaaFloat4 fxaaConsole360ConstDir',\n            ') {',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posM;',\n            '    posM.x = pos.x;',\n            '    posM.y = pos.y;',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        #if (FXAA_DISCARD == 0)',\n            '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n            '            #if (FXAA_GREEN_AS_LUMA == 0)',\n            '                #define lumaM rgbyM.w',\n            '            #else',\n            '                #define lumaM rgbyM.y',\n            '            #endif',\n            '        #endif',\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\n            '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',\n            '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',\n            '        #else',\n            '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',\n            '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',\n            '        #endif',\n            '        #if (FXAA_DISCARD == 1)',\n            '            #define lumaM luma4A.w',\n            '        #endif',\n            '        #define lumaE luma4A.z',\n            '        #define lumaS luma4A.x',\n            '        #define lumaSE luma4A.y',\n            '        #define lumaNW luma4B.w',\n            '        #define lumaN luma4B.z',\n            '        #define lumaW luma4B.x',\n            '    #else',\n            '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\n            '            #define lumaM rgbyM.w',\n            '        #else',\n            '            #define lumaM rgbyM.y',\n            '        #endif',\n            '        #if (FXAA_GLSL_100 == 1)',\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',\n            '        #else',\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',\n            '        #endif',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat maxSM = max(lumaS, lumaM);',\n            '    FxaaFloat minSM = min(lumaS, lumaM);',\n            '    FxaaFloat maxESM = max(lumaE, maxSM);',\n            '    FxaaFloat minESM = min(lumaE, minSM);',\n            '    FxaaFloat maxWN = max(lumaN, lumaW);',\n            '    FxaaFloat minWN = min(lumaN, lumaW);',\n            '    FxaaFloat rangeMax = max(maxWN, maxESM);',\n            '    FxaaFloat rangeMin = min(minWN, minESM);',\n            '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',\n            '    FxaaFloat range = rangeMax - rangeMin;',\n            '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',\n            '    FxaaBool earlyExit = range < rangeMaxClamped;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(earlyExit)',\n            '        #if (FXAA_DISCARD == 1)',\n            '            FxaaDiscard;',\n            '        #else',\n            '            return rgbyM;',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    #if (FXAA_GATHER4_ALPHA == 0)',\n            '        #if (FXAA_GLSL_100 == 1)',\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '        #else',\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n            '        #endif',\n            '    #else',\n            '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',\n            '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNS = lumaN + lumaS;',\n            '    FxaaFloat lumaWE = lumaW + lumaE;',\n            '    FxaaFloat subpixRcpRange = 1.0/range;',\n            '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',\n            '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\n            '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNESE = lumaNE + lumaSE;',\n            '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',\n            '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\n            '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',\n            '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',\n            '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\n            '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\n            '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\n            '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\n            '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',\n            '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',\n            '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',\n            '    FxaaBool horzSpan = edgeHorz >= edgeVert;',\n            '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(!horzSpan) lumaN = lumaW;',\n            '    if(!horzSpan) lumaS = lumaE;',\n            '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',\n            '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat gradientN = lumaN - lumaM;',\n            '    FxaaFloat gradientS = lumaS - lumaM;',\n            '    FxaaFloat lumaNN = lumaN + lumaM;',\n            '    FxaaFloat lumaSS = lumaS + lumaM;',\n            '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',\n            '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',\n            '    if(pairN) lengthSign = -lengthSign;',\n            '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posB;',\n            '    posB.x = posM.x;',\n            '    posB.y = posM.y;',\n            '    FxaaFloat2 offNP;',\n            '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',\n            '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',\n            '    if(!horzSpan) posB.x += lengthSign * 0.5;',\n            '    if( horzSpan) posB.y += lengthSign * 0.5;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posN;',\n            '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\n            '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\n            '    FxaaFloat2 posP;',\n            '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\n            '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\n            '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',\n            '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',\n            '    FxaaFloat subpixE = subpixC * subpixC;',\n            '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(!pairN) lumaNN = lumaSS;',\n            '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',\n            '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',\n            '    FxaaFloat subpixF = subpixD * subpixE;',\n            '    FxaaBool lumaMLTZero = lumaMM < 0.0;',\n            '/*--------------------------------------------------------------------------*/',\n            '    lumaEndN -= lumaNN * 0.5;',\n            '    lumaEndP -= lumaNN * 0.5;',\n            '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',\n            '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',\n            '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\n            '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\n            '    FxaaBool doneNP = (!doneN) || (!doneP);',\n            '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\n            '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(doneNP) {',\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\n            '        doneNP = (!doneN) || (!doneP);',\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\n            '/*--------------------------------------------------------------------------*/',\n            '        #if (FXAA_QUALITY_PS > 3)',\n            '        if(doneNP) {',\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\n            '            doneNP = (!doneN) || (!doneP);',\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\n            '/*--------------------------------------------------------------------------*/',\n            '            #if (FXAA_QUALITY_PS > 4)',\n            '            if(doneNP) {',\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\n            '                doneNP = (!doneN) || (!doneP);',\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\n            '/*--------------------------------------------------------------------------*/',\n            '                #if (FXAA_QUALITY_PS > 5)',\n            '                if(doneNP) {',\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\n            '                    doneNP = (!doneN) || (!doneP);',\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    #if (FXAA_QUALITY_PS > 6)',\n            '                    if(doneNP) {',\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\n            '                        doneNP = (!doneN) || (!doneP);',\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\n            '/*--------------------------------------------------------------------------*/',\n            '                        #if (FXAA_QUALITY_PS > 7)',\n            '                        if(doneNP) {',\n            '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                            doneN = abs(lumaEndN) >= gradientScaled;',\n            '                            doneP = abs(lumaEndP) >= gradientScaled;',\n            '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\n            '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\n            '                            doneNP = (!doneN) || (!doneP);',\n            '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\n            '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\n            '/*--------------------------------------------------------------------------*/',\n            '    #if (FXAA_QUALITY_PS > 8)',\n            '    if(doneNP) {',\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\n            '        doneNP = (!doneN) || (!doneP);',\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\n            '/*--------------------------------------------------------------------------*/',\n            '        #if (FXAA_QUALITY_PS > 9)',\n            '        if(doneNP) {',\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\n            '            doneNP = (!doneN) || (!doneP);',\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\n            '/*--------------------------------------------------------------------------*/',\n            '            #if (FXAA_QUALITY_PS > 10)',\n            '            if(doneNP) {',\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\n            '                doneNP = (!doneN) || (!doneP);',\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\n            '/*--------------------------------------------------------------------------*/',\n            '                #if (FXAA_QUALITY_PS > 11)',\n            '                if(doneNP) {',\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\n            '                    doneNP = (!doneN) || (!doneP);',\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    #if (FXAA_QUALITY_PS > 12)',\n            '                    if(doneNP) {',\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\n            '                        doneNP = (!doneN) || (!doneP);',\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    }',\n            '                    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                }',\n            '                #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '            }',\n            '            #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '        }',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    }',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                        }',\n            '                        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                    }',\n            '                    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                }',\n            '                #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '            }',\n            '            #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '        }',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    }',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat dstN = posM.x - posN.x;',\n            '    FxaaFloat dstP = posP.x - posM.x;',\n            '    if(!horzSpan) dstN = posM.y - posN.y;',\n            '    if(!horzSpan) dstP = posP.y - posM.y;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\n            '    FxaaFloat spanLength = (dstP + dstN);',\n            '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\n            '    FxaaFloat spanLengthRcp = 1.0/spanLength;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaBool directionN = dstN < dstP;',\n            '    FxaaFloat dst = min(dstN, dstP);',\n            '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',\n            '    FxaaFloat subpixG = subpixF * subpixF;',\n            '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\n            '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\n            '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\n            '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\n            '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\n            '    #if (FXAA_DISCARD == 1)',\n            '        return FxaaTexTop(tex, posM);',\n            '    #else',\n            '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',\n            '    #endif',\n            '}',\n            '/*==========================================================================*/',\n            '#endif',\n            '',\n            'void main() {',\n            '  gl_FragColor = FxaaPixelShader(',\n            '    vUv,',\n            '    vec4(0.0),',\n            '    tDiffuse,',\n            '    tDiffuse,',\n            '    tDiffuse,',\n            '    resolution,',\n            '    vec4(0.0),',\n            '    vec4(0.0),',\n            '    vec4(0.0),',\n            '    0.75,',\n            '    0.166,',\n            '    0.0833,',\n            '    0.0,',\n            '    0.0,',\n            '    0.0,',\n            '    vec4(0.0)',\n            '  );',\n            '',\n            '  // TODO avoid querying texture twice for same texel',\n            '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',\n            '}'\n        ].join('\\n')\n    };\n    return FXAAShader;\n});\ndefine('skylark-threejs-ex/shaders/SSAOShader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SSAOShader = {\n        defines: {\n            'PERSPECTIVE_CAMERA': 1,\n            'KERNEL_SIZE': 32\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'tDepth': { value: null },\n            'tNoise': { value: null },\n            'kernel': { value: null },\n            'cameraNear': { value: null },\n            'cameraFar': { value: null },\n            'resolution': { value: new THREE.Vector2() },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'kernelRadius': { value: 8 },\n            'minDistance': { value: 0.005 },\n            'maxDistance': { value: 0.05 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tNormal;',\n            'uniform sampler2D tDepth;',\n            'uniform sampler2D tNoise;',\n            'uniform vec3 kernel[ KERNEL_SIZE ];',\n            'uniform vec2 resolution;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float kernelRadius;',\n            'uniform float minDistance;',\n            'uniform float maxDistance;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '}',\n            'float getLinearDepth( const in vec2 screenPosition ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec2 screenPosition ) {',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getDepth( vUv );',\n            '\\tfloat viewZ = getViewZ( depth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );',\n            '\\tvec3 viewNormal = getViewNormal( vUv );',\n            ' vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );',\n            '\\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;',\n            '\\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );',\n            '\\tvec3 bitangent = cross( viewNormal, tangent );',\n            '\\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );',\n            ' float occlusion = 0.0;',\n            ' for ( int i = 0; i < KERNEL_SIZE; i ++ ) {',\n            '\\t\\tvec3 sampleVector = kernelMatrix * kernel[ i ];',\n            '\\t\\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );',\n            '\\t\\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );',\n            '\\t\\tsamplePointNDC /= samplePointNDC.w;',\n            '\\t\\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;',\n            '\\t\\tfloat realDepth = getLinearDepth( samplePointUv );',\n            '\\t\\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );',\n            '\\t\\tfloat delta = sampleDepth - realDepth;',\n            '\\t\\tif ( delta > minDistance && delta < maxDistance ) {',\n            '\\t\\t\\tocclusion += 1.0;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );',\n            '\\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    var SSAODepthShader = {\n        defines: { 'PERSPECTIVE_CAMERA': 1 },\n        uniforms: {\n            'tDepth': { value: null },\n            'cameraNear': { value: null },\n            'cameraFar': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDepth;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'float getLinearDepth( const in vec2 screenPosition ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getLinearDepth( vUv );',\n            '\\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    var SSAOBlurShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new THREE.Vector2() }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 resolution;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 texelSize = ( 1.0 / resolution );',\n            '\\tfloat result = 0.0;',\n            '\\tfor ( int i = - 2; i <= 2; i ++ ) {',\n            '\\t\\tfor ( int j = - 2; j <= 2; j ++ ) {',\n            '\\t\\t\\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;',\n            '\\t\\t\\tresult += texture2D( tDiffuse, vUv + offset ).r;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return {\n        SSAOShader,\n        SSAODepthShader,\n        SSAOBlurShader\n    };\n});\ndefine('skylark-threejs-ex/shaders/FilmShader',[],function () {\n    'use strict';\n    var FilmShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'time': { value: 0 },\n            'nIntensity': { value: 0.5 },\n            'sIntensity': { value: 0.05 },\n            'sCount': { value: 4096 },\n            'grayscale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform float time;',\n            'uniform bool grayscale;',\n            'uniform float nIntensity;',\n            'uniform float sIntensity;',\n            'uniform float sCount;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );',\n            '\\tfloat dx = rand( vUv + time );',\n            '\\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );',\n            '\\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );',\n            '\\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;',\n            '\\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );',\n            '\\tif( grayscale ) {',\n            '\\t\\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );',\n            '\\t}',\n            '\\tgl_FragColor =  vec4( cResult, cTextureScreen.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  FilmShader ;\n});\ndefine('skylark-threejs-ex/shaders/DotScreenShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var DotScreenShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tSize': { value: new THREE.Vector2(256, 256) },\n            'center': { value: new THREE.Vector2(0.5, 0.5) },\n            'angle': { value: 1.57 },\n            'scale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec2 center;',\n            'uniform float angle;',\n            'uniform float scale;',\n            'uniform vec2 tSize;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'float pattern() {',\n            '\\tfloat s = sin( angle ), c = cos( angle );',\n            '\\tvec2 tex = vUv * tSize - center;',\n            '\\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',\n            '\\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',\n            '}',\n            'void main() {',\n            '\\tvec4 color = texture2D( tDiffuse, vUv );',\n            '\\tfloat average = ( color.r + color.g + color.b ) / 3.0;',\n            '\\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  DotScreenShader ;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityShader',[],function () {\n    'use strict';\n    var LuminosityShader = {\n        uniforms: { 'tDiffuse': { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tfloat l = linearToRelativeLuminance( texel.rgb );',\n            '\\tgl_FragColor = vec4( l, l, l, texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return  LuminosityShader ;\n});\ndefine('skylark-threejs-ex/shaders/SobelOperatorShader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SobelOperatorShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new THREE.Vector2() }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 resolution;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );',\n            '\\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );',\n            '\\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );',\n            '\\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;',\n            '\\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;',\n            '\\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;',\n            '\\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;',\n            '\\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;',\n            '\\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;',\n            '\\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;',\n            '\\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;',\n            '\\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;',\n            '\\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + ',\n            '\\t\\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + ',\n            '\\t\\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; ',\n            '\\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + ',\n            '\\t\\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + ',\n            '\\t\\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; ',\n            '\\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );',\n            '\\tgl_FragColor = vec4( vec3( G ), 1 );',\n            '}'\n        ].join('\\n')\n    };\n    return  SobelOperatorShader ;\n});\ndefine('skylark-threejs-ex/shaders/ColorifyShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var ColorifyShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'color': { value: new THREE.Color(16777215) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tgl_FragColor = vec4( v * color, texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return ColorifyShader;\n});\ndefine('skylark-threejs-ex/shaders/ToneMapShader',[],function () {\n    'use strict';\n    var ToneMapShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'averageLuminance': { value: 1 },\n            'luminanceMap': { value: null },\n            'maxLuminance': { value: 16 },\n            'minLuminance': { value: 0.01 },\n            'middleGrey': { value: 0.6 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'uniform float middleGrey;',\n            'uniform float minLuminance;',\n            'uniform float maxLuminance;',\n            '#ifdef ADAPTED_LUMINANCE',\n            '\\tuniform sampler2D luminanceMap;',\n            '#else',\n            '\\tuniform float averageLuminance;',\n            '#endif',\n            'vec3 ToneMap( vec3 vColor ) {',\n            '\\t#ifdef ADAPTED_LUMINANCE',\n            '\\t\\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;',\n            '\\t#else',\n            '\\t\\tfloat fLumAvg = averageLuminance;',\n            '\\t#endif',\n            '\\tfloat fLumPixel = linearToRelativeLuminance( vColor );',\n            '\\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );',\n            '\\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);',\n            '\\treturn fLumCompressed * vColor;',\n            '}',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return  ToneMapShader ;\n});\ndefine('skylark-threejs-ex/shaders/TechnicolorShader',[],function () {\n    'use strict';\n    var TechnicolorShader = {\n        uniforms: { 'tDiffuse': { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );',\n            '\\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);',\n            '\\tgl_FragColor = newTex;',\n            '}'\n        ].join('\\n')\n    };\n    return  TechnicolorShader ;\n});\ndefine('skylark-threejs-ex/shaders/HueSaturationShader',[],function () {\n    'use strict';\n    var HueSaturationShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'hue': { value: 0 },\n            'saturation': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float hue;',\n            'uniform float saturation;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tgl_FragColor = texture2D( tDiffuse, vUv );',\n            '\\tfloat angle = hue * 3.14159265;',\n            '\\tfloat s = sin(angle), c = cos(angle);',\n            '\\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',\n            '\\tfloat len = length(gl_FragColor.rgb);',\n            '\\tgl_FragColor.rgb = vec3(',\n            '\\t\\tdot(gl_FragColor.rgb, weights.xyz),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.zxy),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.yzx)',\n            '\\t);',\n            '\\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',\n            '\\tif (saturation > 0.0) {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',\n            '\\t} else {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',\n            '\\t}',\n            '}'\n        ].join('\\n')\n    };\n    return  HueSaturationShader ;\n});\ndefine('skylark-threejs-ex/postprocessing/Pass',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    function Pass() {\n        this.enabled = true;\n        this.needsSwap = true;\n        this.clear = false;\n        this.renderToScreen = false;\n    }\n    Object.assign(Pass.prototype, {\n        setSize: function () {\n        },\n        render: function () {\n            console.error('THREE.Pass: .render() must be implemented in derived pass.');\n        }\n    });\n    Pass.FullScreenQuad = function () {\n        var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        var geometry = new THREE.PlaneBufferGeometry(2, 2);\n        var FullScreenQuad = function (material) {\n            this._mesh = new THREE.Mesh(geometry, material);\n        };\n        Object.defineProperty(FullScreenQuad.prototype, 'material', {\n            get: function () {\n                return this._mesh.material;\n            },\n            set: function (value) {\n                this._mesh.material = value;\n            }\n        });\n        Object.assign(FullScreenQuad.prototype, {\n            dispose: function () {\n                this._mesh.geometry.dispose();\n            },\n            render: function (renderer) {\n                renderer.render(this._mesh, camera);\n            }\n        });\n        return FullScreenQuad;\n    }();\n    return Pass;\n});\ndefine('skylark-threejs-ex/postprocessing/ShaderPass',[\n    \"skylark-threejs\",\n    './Pass'\n], function (\n    THREE, \n    Pass\n) {\n    'use strict';\n    var ShaderPass = function (shader, textureID) {\n        Pass.call(this);\n        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else if (shader) {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: Object.assign({}, shader.defines),\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: ShaderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            if (this.uniforms[this.textureID]) {\n                this.uniforms[this.textureID].value = readBuffer.texture;\n            }\n            this.fsQuad.material = this.material;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n                this.fsQuad.render(renderer);\n            }\n        }\n    });\n    return ShaderPass;\n});\ndefine('skylark-threejs-ex/postprocessing/MaskPass',[\n    './Pass'\n], function (Pass) {\n    'use strict';\n    var MaskPass = function (scene, camera) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.clear = true;\n        this.needsSwap = false;\n        this.inverse = false;\n    };\n    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: MaskPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var context = renderer.getContext();\n            var state = renderer.state;\n            state.buffers.color.setMask(false);\n            state.buffers.depth.setMask(false);\n            state.buffers.color.setLocked(true);\n            state.buffers.depth.setLocked(true);\n            var writeValue, clearValue;\n            if (this.inverse) {\n                writeValue = 0;\n                clearValue = 1;\n            } else {\n                writeValue = 1;\n                clearValue = 0;\n            }\n            state.buffers.stencil.setTest(true);\n            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);\n            state.buffers.stencil.setClear(clearValue);\n            state.buffers.stencil.setLocked(true);\n            renderer.setRenderTarget(readBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            state.buffers.color.setLocked(false);\n            state.buffers.depth.setLocked(false);\n            state.buffers.stencil.setLocked(false);\n            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);\n            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n            state.buffers.stencil.setLocked(true);\n        }\n    });\n    return  MaskPass;\n});\ndefine('skylark-threejs-ex/postprocessing/EffectComposer',[\n    \"skylark-threejs\",\n    '../shaders/CopyShader',\n    '../postprocessing/ShaderPass',\n    '../postprocessing/MaskPass'\n], function (\n    THREE, \n    CopyShader, \n    ShaderPass, \n    MaskPass\n) {\n    'use strict';\n    var EffectComposer = function (renderer, renderTarget) {\n        this.renderer = renderer;\n        if (renderTarget === undefined) {\n            var parameters = {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat,\n                stencilBuffer: false\n            };\n            var size = renderer.getSize(new THREE.Vector2());\n            this._pixelRatio = renderer.getPixelRatio();\n            this._width = size.width;\n            this._height = size.height;\n            renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n            renderTarget.texture.name = 'EffectComposer.rt1';\n        } else {\n            this._pixelRatio = 1;\n            this._width = renderTarget.width;\n            this._height = renderTarget.height;\n        }\n        this.renderTarget1 = renderTarget;\n        this.renderTarget2 = renderTarget.clone();\n        this.renderTarget2.texture.name = 'EffectComposer.rt2';\n        this.writeBuffer = this.renderTarget1;\n        this.readBuffer = this.renderTarget2;\n        this.renderToScreen = true;\n        this.passes = [];\n        if (CopyShader === undefined) {\n            console.error('THREE.EffectComposer relies on CopyShader');\n        }\n        if (ShaderPass === undefined) {\n            console.error('THREE.EffectComposer relies on ShaderPass');\n        }\n        this.copyPass = new ShaderPass(CopyShader);\n        this.clock = new THREE.Clock();\n    };\n    Object.assign(EffectComposer.prototype, {\n        swapBuffers: function () {\n            var tmp = this.readBuffer;\n            this.readBuffer = this.writeBuffer;\n            this.writeBuffer = tmp;\n        },\n        addPass: function (pass) {\n            this.passes.push(pass);\n            pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n        },\n        insertPass: function (pass, index) {\n            this.passes.splice(index, 0, pass);\n        },\n        isLastEnabledPass: function (passIndex) {\n            for (var i = passIndex + 1; i < this.passes.length; i++) {\n                if (this.passes[i].enabled) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        render: function (deltaTime) {\n            if (deltaTime === undefined) {\n                deltaTime = this.clock.getDelta();\n            }\n            var currentRenderTarget = this.renderer.getRenderTarget();\n            var maskActive = false;\n            var pass, i, il = this.passes.length;\n            for (i = 0; i < il; i++) {\n                pass = this.passes[i];\n                if (pass.enabled === false)\n                    continue;\n                pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n                pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n                if (pass.needsSwap) {\n                    if (maskActive) {\n                        var context = this.renderer.getContext();\n                        var stencil = this.renderer.state.buffers.stencil;\n                        stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n                        this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n                        stencil.setFunc(context.EQUAL, 1, 4294967295);\n                    }\n                    this.swapBuffers();\n                }\n                if (MaskPass !== undefined) {\n                    if (pass instanceof MaskPass) {\n                        maskActive = true;\n                    } else if (pass instanceof ClearMaskPass) {\n                        maskActive = false;\n                    }\n                }\n            }\n            this.renderer.setRenderTarget(currentRenderTarget);\n        },\n        reset: function (renderTarget) {\n            if (renderTarget === undefined) {\n                var size = this.renderer.getSize(new THREE.Vector2());\n                this._pixelRatio = this.renderer.getPixelRatio();\n                this._width = size.width;\n                this._height = size.height;\n                renderTarget = this.renderTarget1.clone();\n                renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n            }\n            this.renderTarget1.dispose();\n            this.renderTarget2.dispose();\n            this.renderTarget1 = renderTarget;\n            this.renderTarget2 = renderTarget.clone();\n            this.writeBuffer = this.renderTarget1;\n            this.readBuffer = this.renderTarget2;\n        },\n        setSize: function (width, height) {\n            this._width = width;\n            this._height = height;\n            var effectiveWidth = this._width * this._pixelRatio;\n            var effectiveHeight = this._height * this._pixelRatio;\n            this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n            this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n            for (var i = 0; i < this.passes.length; i++) {\n                this.passes[i].setSize(effectiveWidth, effectiveHeight);\n            }\n        },\n        setPixelRatio: function (pixelRatio) {\n            this._pixelRatio = pixelRatio;\n            this.setSize(this._width, this._height);\n        }\n    });\n\n    return  EffectComposer;\n});\ndefine('skylark-threejs-ex/postprocessing/RenderPass',['./Pass'], function (Pass) {\n    'use strict';\n    var RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = overrideMaterial;\n        this.clearColor = clearColor;\n        this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n        this.clear = true;\n        this.clearDepth = false;\n        this.needsSwap = false;\n    };\n    RenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: RenderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            var oldClearColor, oldClearAlpha, oldOverrideMaterial;\n            if (this.overrideMaterial !== undefined) {\n                oldOverrideMaterial = this.scene.overrideMaterial;\n                this.scene.overrideMaterial = this.overrideMaterial;\n            }\n            if (this.clearColor) {\n                oldClearColor = renderer.getClearColor().getHex();\n                oldClearAlpha = renderer.getClearAlpha();\n                renderer.setClearColor(this.clearColor, this.clearAlpha);\n            }\n            if (this.clearDepth) {\n                renderer.clearDepth();\n            }\n            renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n            if (this.clear)\n                renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n            renderer.render(this.scene, this.camera);\n            if (this.clearColor) {\n                renderer.setClearColor(oldClearColor, oldClearAlpha);\n            }\n            if (this.overrideMaterial !== undefined) {\n                this.scene.overrideMaterial = oldOverrideMaterial;\n            }\n            renderer.autoClear = oldAutoClear;\n        }\n    });\n    return RenderPass;\n});\ndefine('skylark-threejs-ex/curves/NURBSUtils',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var NURBSUtils = {\n        findSpan: function (p, u, U) {\n            var n = U.length - p - 1;\n            if (u >= U[n]) {\n                return n - 1;\n            }\n            if (u <= U[p]) {\n                return p;\n            }\n            var low = p;\n            var high = n;\n            var mid = Math.floor((low + high) / 2);\n            while (u < U[mid] || u >= U[mid + 1]) {\n                if (u < U[mid]) {\n                    high = mid;\n                } else {\n                    low = mid;\n                }\n                mid = Math.floor((low + high) / 2);\n            }\n            return mid;\n        },\n        calcBasisFunctions: function (span, u, p, U) {\n            var N = [];\n            var left = [];\n            var right = [];\n            N[0] = 1;\n            for (var j = 1; j <= p; ++j) {\n                left[j] = u - U[span + 1 - j];\n                right[j] = U[span + j] - u;\n                var saved = 0;\n                for (var r = 0; r < j; ++r) {\n                    var rv = right[r + 1];\n                    var lv = left[j - r];\n                    var temp = N[r] / (rv + lv);\n                    N[r] = saved + rv * temp;\n                    saved = lv * temp;\n                }\n                N[j] = saved;\n            }\n            return N;\n        },\n        calcBSplinePoint: function (p, U, P, u) {\n            var span = this.findSpan(p, u, U);\n            var N = this.calcBasisFunctions(span, u, p, U);\n            var C = new THREE.Vector4(0, 0, 0, 0);\n            for (var j = 0; j <= p; ++j) {\n                var point = P[span - p + j];\n                var Nj = N[j];\n                var wNj = point.w * Nj;\n                C.x += point.x * wNj;\n                C.y += point.y * wNj;\n                C.z += point.z * wNj;\n                C.w += point.w * Nj;\n            }\n            return C;\n        },\n        calcBasisFunctionDerivatives: function (span, u, p, n, U) {\n            var zeroArr = [];\n            for (var i = 0; i <= p; ++i)\n                zeroArr[i] = 0;\n            var ders = [];\n            for (var i = 0; i <= n; ++i)\n                ders[i] = zeroArr.slice(0);\n            var ndu = [];\n            for (var i = 0; i <= p; ++i)\n                ndu[i] = zeroArr.slice(0);\n            ndu[0][0] = 1;\n            var left = zeroArr.slice(0);\n            var right = zeroArr.slice(0);\n            for (var j = 1; j <= p; ++j) {\n                left[j] = u - U[span + 1 - j];\n                right[j] = U[span + j] - u;\n                var saved = 0;\n                for (var r = 0; r < j; ++r) {\n                    var rv = right[r + 1];\n                    var lv = left[j - r];\n                    ndu[j][r] = rv + lv;\n                    var temp = ndu[r][j - 1] / ndu[j][r];\n                    ndu[r][j] = saved + rv * temp;\n                    saved = lv * temp;\n                }\n                ndu[j][j] = saved;\n            }\n            for (var j = 0; j <= p; ++j) {\n                ders[0][j] = ndu[j][p];\n            }\n            for (var r = 0; r <= p; ++r) {\n                var s1 = 0;\n                var s2 = 1;\n                var a = [];\n                for (var i = 0; i <= p; ++i) {\n                    a[i] = zeroArr.slice(0);\n                }\n                a[0][0] = 1;\n                for (var k = 1; k <= n; ++k) {\n                    var d = 0;\n                    var rk = r - k;\n                    var pk = p - k;\n                    if (r >= k) {\n                        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n                        d = a[s2][0] * ndu[rk][pk];\n                    }\n                    var j1 = rk >= -1 ? 1 : -rk;\n                    var j2 = r - 1 <= pk ? k - 1 : p - r;\n                    for (var j = j1; j <= j2; ++j) {\n                        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n                        d += a[s2][j] * ndu[rk + j][pk];\n                    }\n                    if (r <= pk) {\n                        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n                        d += a[s2][k] * ndu[r][pk];\n                    }\n                    ders[k][r] = d;\n                    var j = s1;\n                    s1 = s2;\n                    s2 = j;\n                }\n            }\n            var r = p;\n            for (var k = 1; k <= n; ++k) {\n                for (var j = 0; j <= p; ++j) {\n                    ders[k][j] *= r;\n                }\n                r *= p - k;\n            }\n            return ders;\n        },\n        calcBSplineDerivatives: function (p, U, P, u, nd) {\n            var du = nd < p ? nd : p;\n            var CK = [];\n            var span = this.findSpan(p, u, U);\n            var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n            var Pw = [];\n            for (var i = 0; i < P.length; ++i) {\n                var point = P[i].clone();\n                var w = point.w;\n                point.x *= w;\n                point.y *= w;\n                point.z *= w;\n                Pw[i] = point;\n            }\n            for (var k = 0; k <= du; ++k) {\n                var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n                for (var j = 1; j <= p; ++j) {\n                    point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n                }\n                CK[k] = point;\n            }\n            for (var k = du + 1; k <= nd + 1; ++k) {\n                CK[k] = new THREE.Vector4(0, 0, 0);\n            }\n            return CK;\n        },\n        calcKoverI: function (k, i) {\n            var nom = 1;\n            for (var j = 2; j <= k; ++j) {\n                nom *= j;\n            }\n            var denom = 1;\n            for (var j = 2; j <= i; ++j) {\n                denom *= j;\n            }\n            for (var j = 2; j <= k - i; ++j) {\n                denom *= j;\n            }\n            return nom / denom;\n        },\n        calcRationalCurveDerivatives: function (Pders) {\n            var nd = Pders.length;\n            var Aders = [];\n            var wders = [];\n            for (var i = 0; i < nd; ++i) {\n                var point = Pders[i];\n                Aders[i] = new THREE.Vector3(point.x, point.y, point.z);\n                wders[i] = point.w;\n            }\n            var CK = [];\n            for (var k = 0; k < nd; ++k) {\n                var v = Aders[k].clone();\n                for (var i = 1; i <= k; ++i) {\n                    v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n                }\n                CK[k] = v.divideScalar(wders[0]);\n            }\n            return CK;\n        },\n        calcNURBSDerivatives: function (p, U, P, u, nd) {\n            var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n            return this.calcRationalCurveDerivatives(Pders);\n        },\n        calcSurfacePoint: function (p, q, U, V, P, u, v, target) {\n            var uspan = this.findSpan(p, u, U);\n            var vspan = this.findSpan(q, v, V);\n            var Nu = this.calcBasisFunctions(uspan, u, p, U);\n            var Nv = this.calcBasisFunctions(vspan, v, q, V);\n            var temp = [];\n            for (var l = 0; l <= q; ++l) {\n                temp[l] = new THREE.Vector4(0, 0, 0, 0);\n                for (var k = 0; k <= p; ++k) {\n                    var point = P[uspan - p + k][vspan - q + l].clone();\n                    var w = point.w;\n                    point.x *= w;\n                    point.y *= w;\n                    point.z *= w;\n                    temp[l].add(point.multiplyScalar(Nu[k]));\n                }\n            }\n            var Sw = new THREE.Vector4(0, 0, 0, 0);\n            for (var l = 0; l <= q; ++l) {\n                Sw.add(temp[l].multiplyScalar(Nv[l]));\n            }\n            Sw.divideScalar(Sw.w);\n            target.set(Sw.x, Sw.y, Sw.z);\n        }\n    };\n    \n    return NURBSUtils;\n});\ndefine('skylark-threejs-ex/curves/NURBSCurve',[\n    \"skylark-threejs\",\n    './NURBSUtils'\n], function (THREE, NURBSUtils) {\n    'use strict';\n    var NURBSCurve = function (degree, knots, controlPoints, startKnot, endKnot) {\n        THREE.Curve.call(this);\n        this.degree = degree;\n        this.knots = knots;\n        this.controlPoints = [];\n        this.startKnot = startKnot || 0;\n        this.endKnot = endKnot || this.knots.length - 1;\n        for (var i = 0; i < controlPoints.length; ++i) {\n            var point = controlPoints[i];\n            this.controlPoints[i] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n        }\n    };\n    NURBSCurve.prototype = Object.create(THREE.Curve.prototype);\n    NURBSCurve.prototype.constructor = NURBSCurve;\n    NURBSCurve.prototype.getPoint = function (t) {\n        var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);\n        var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n        if (hpoint.w != 1) {\n            hpoint.divideScalar(hpoint.w);\n        }\n        return new THREE.Vector3(hpoint.x, hpoint.y, hpoint.z);\n    };\n    NURBSCurve.prototype.getTangent = function (t) {\n        var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n        var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n        var tangent = ders[1].clone();\n        tangent.normalize();\n        return tangent;\n    };\n    \n    return NURBSCurve;\n});\ndefine('skylark-threejs-ex/curves/NURBSSurface',[\n    \"skylark-threejs\",\n    './NURBSUtils'\n], function (THREE, NURBSUtils) {\n    'use strict';\n    var NURBSSurface = function (degree1, degree2, knots1, knots2, controlPoints) {\n        this.degree1 = degree1;\n        this.degree2 = degree2;\n        this.knots1 = knots1;\n        this.knots2 = knots2;\n        this.controlPoints = [];\n        var len1 = knots1.length - degree1 - 1;\n        var len2 = knots2.length - degree2 - 1;\n        for (var i = 0; i < len1; ++i) {\n            this.controlPoints[i] = [];\n            for (var j = 0; j < len2; ++j) {\n                var point = controlPoints[i][j];\n                this.controlPoints[i][j] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n            }\n        }\n    };\n    NURBSSurface.prototype = {\n        constructor: NURBSSurface,\n        getPoint: function (t1, t2, target) {\n            var u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);\n            var v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);\n            NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n        }\n    };\n    return NURBSSurface;\n});\ndefine('skylark-threejs-ex/objects/Lensflare',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Lensflare = function () {\n        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({\n            opacity: 0,\n            transparent: true\n        }));\n        this.type = 'Lensflare';\n        this.frustumCulled = false;\n        this.renderOrder = Infinity;\n        var positionScreen = new THREE.Vector3();\n        var positionView = new THREE.Vector3();\n        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        tempMap.minFilter = THREE.NearestFilter;\n        tempMap.magFilter = THREE.NearestFilter;\n        tempMap.wrapS = THREE.ClampToEdgeWrapping;\n        tempMap.wrapT = THREE.ClampToEdgeWrapping;\n        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        occlusionMap.minFilter = THREE.NearestFilter;\n        occlusionMap.magFilter = THREE.NearestFilter;\n        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;\n        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;\n        var geometry = Lensflare.Geometry;\n        var material1a = new THREE.RawShaderMaterial({\n            uniforms: {\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'void main() {',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'void main() {',\n                '\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\n                '}'\n            ].join('\\n'),\n            depthTest: true,\n            depthWrite: false,\n            transparent: false\n        });\n        var material1b = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: tempMap },\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'attribute vec2 uv;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tvUV = uv;',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'uniform sampler2D map;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tgl_FragColor = texture2D( map, vUV );',\n                '}'\n            ].join('\\n'),\n            depthTest: false,\n            depthWrite: false,\n            transparent: false\n        });\n        var mesh1 = new THREE.Mesh(geometry, material1a);\n        var elements = [];\n        var shader = LensflareElement.Shader;\n        var material2 = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: null },\n                'occlusionMap': { value: occlusionMap },\n                'color': { value: new THREE.Color(16777215) },\n                'scale': { value: new THREE.Vector2() },\n                'screenPosition': { value: new THREE.Vector3() }\n            },\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false\n        });\n        var mesh2 = new THREE.Mesh(geometry, material2);\n        this.addElement = function (element) {\n            elements.push(element);\n        };\n        var scale = new THREE.Vector2();\n        var screenPositionPixels = new THREE.Vector2();\n        var validArea = new THREE.Box2();\n        var viewport = new THREE.Vector4();\n        this.onBeforeRender = function (renderer, scene, camera) {\n            renderer.getCurrentViewport(viewport);\n            var invAspect = viewport.w / viewport.z;\n            var halfViewportWidth = viewport.z / 2;\n            var halfViewportHeight = viewport.w / 2;\n            var size = 16 / viewport.w;\n            scale.set(size * invAspect, size);\n            validArea.min.set(viewport.x, viewport.y);\n            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n            positionView.setFromMatrixPosition(this.matrixWorld);\n            positionView.applyMatrix4(camera.matrixWorldInverse);\n            if (positionView.z > 0)\n                return;\n            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n            if (validArea.containsPoint(screenPositionPixels)) {\n                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n                var uniforms = material1a.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\n                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n                var uniforms = material1b.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\n                var vecX = -positionScreen.x * 2;\n                var vecY = -positionScreen.y * 2;\n                for (var i = 0, l = elements.length; i < l; i++) {\n                    var element = elements[i];\n                    var uniforms = material2.uniforms;\n                    uniforms['color'].value.copy(element.color);\n                    uniforms['map'].value = element.texture;\n                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n                    var size = element.size / viewport.w;\n                    var invAspect = viewport.w / viewport.z;\n                    uniforms['scale'].value.set(size * invAspect, size);\n                    material2.uniformsNeedUpdate = true;\n                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n                }\n            }\n        };\n        this.dispose = function () {\n            material1a.dispose();\n            material1b.dispose();\n            material2.dispose();\n            tempMap.dispose();\n            occlusionMap.dispose();\n            for (var i = 0, l = elements.length; i < l; i++) {\n                elements[i].texture.dispose();\n            }\n        };\n    };\n    Lensflare.prototype = Object.create(THREE.Mesh.prototype);\n    Lensflare.prototype.constructor = Lensflare;\n    Lensflare.prototype.isLensflare = true;\n    return Lensflare;\n});\ndefine('skylark-threejs-ex/objects/Reflector',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Reflector = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Reflector';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var shader = options.shader || Reflector.ReflectorShader;\n        var recursion = options.recursion !== undefined ? options.recursion : 0;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var reflectorPlane = new THREE.Plane();\n        var normal = new THREE.Vector3();\n        var reflectorWorldPosition = new THREE.Vector3();\n        var cameraWorldPosition = new THREE.Vector3();\n        var rotationMatrix = new THREE.Matrix4();\n        var lookAtPosition = new THREE.Vector3(0, 0, -1);\n        var clipPlane = new THREE.Vector4();\n        var view = new THREE.Vector3();\n        var target = new THREE.Vector3();\n        var q = new THREE.Vector4();\n        var textureMatrix = new THREE.Matrix4();\n        var virtualCamera = new THREE.PerspectiveCamera();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false,\n            encoding: encoding\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        var material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            fragmentShader: shader.fragmentShader,\n            vertexShader: shader.vertexShader\n        });\n        material.uniforms['tDiffuse'].value = renderTarget.texture;\n        material.uniforms['color'].value = color;\n        material.uniforms['textureMatrix'].value = textureMatrix;\n        this.material = material;\n        this.onBeforeRender = function (renderer, scene, camera) {\n            if ('recursion' in camera.userData) {\n                if (camera.userData.recursion === recursion)\n                    return;\n                camera.userData.recursion++;\n            }\n            reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n            rotationMatrix.extractRotation(scope.matrixWorld);\n            normal.set(0, 0, 1);\n            normal.applyMatrix4(rotationMatrix);\n            view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n            if (view.dot(normal) > 0)\n                return;\n            view.reflect(normal).negate();\n            view.add(reflectorWorldPosition);\n            rotationMatrix.extractRotation(camera.matrixWorld);\n            lookAtPosition.set(0, 0, -1);\n            lookAtPosition.applyMatrix4(rotationMatrix);\n            lookAtPosition.add(cameraWorldPosition);\n            target.subVectors(reflectorWorldPosition, lookAtPosition);\n            target.reflect(normal).negate();\n            target.add(reflectorWorldPosition);\n            virtualCamera.position.copy(view);\n            virtualCamera.up.set(0, 1, 0);\n            virtualCamera.up.applyMatrix4(rotationMatrix);\n            virtualCamera.up.reflect(normal);\n            virtualCamera.lookAt(target);\n            virtualCamera.far = camera.far;\n            virtualCamera.updateMatrixWorld();\n            virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n            virtualCamera.userData.recursion = 0;\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(virtualCamera.projectionMatrix);\n            textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n            reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n            reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n            clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n            var projectionMatrix = virtualCamera.projectionMatrix;\n            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n            q.z = -1;\n            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n            clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n            projectionMatrix.elements[2] = clipPlane.x;\n            projectionMatrix.elements[6] = clipPlane.y;\n            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n            projectionMatrix.elements[14] = clipPlane.w;\n            scope.visible = false;\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, virtualCamera);\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n            scope.visible = true;\n        };\n        this.getRenderTarget = function () {\n            return renderTarget;\n        };\n    };\n    Reflector.prototype = Object.create(THREE.Mesh.prototype);\n    Reflector.prototype.constructor = Reflector;\n    Reflector.ReflectorShader = {\n        uniforms: {\n            'color': { value: null },\n            'tDiffuse': { value: null },\n            'textureMatrix': { value: null }\n        },\n        vertexShader: [\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vUv;',\n            'void main() {',\n            '\\tvUv = textureMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec4 vUv;',\n            'float blendOverlay( float base, float blend ) {',\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n            '}',\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n            '}',\n            'void main() {',\n            '\\tvec4 base = texture2DProj( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n\n    return Reflector;\n});\ndefine('skylark-threejs-ex/objects/Refractor',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Refractor = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Refractor';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var shader = options.shader || Refractor.RefractorShader;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var virtualCamera = new THREE.PerspectiveCamera();\n        virtualCamera.matrixAutoUpdate = false;\n        virtualCamera.userData.refractor = true;\n        var refractorPlane = new THREE.Plane();\n        var textureMatrix = new THREE.Matrix4();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false,\n            encoding: encoding\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        this.material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: true\n        });\n        this.material.uniforms['color'].value = color;\n        this.material.uniforms['tDiffuse'].value = renderTarget.texture;\n        this.material.uniforms['textureMatrix'].value = textureMatrix;\n        var visible = function () {\n            var refractorWorldPosition = new THREE.Vector3();\n            var cameraWorldPosition = new THREE.Vector3();\n            var rotationMatrix = new THREE.Matrix4();\n            var view = new THREE.Vector3();\n            var normal = new THREE.Vector3();\n            return function visible(camera) {\n                refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n                cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n                view.subVectors(refractorWorldPosition, cameraWorldPosition);\n                rotationMatrix.extractRotation(scope.matrixWorld);\n                normal.set(0, 0, 1);\n                normal.applyMatrix4(rotationMatrix);\n                return view.dot(normal) < 0;\n            };\n        }();\n        var updateRefractorPlane = function () {\n            var normal = new THREE.Vector3();\n            var position = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            var scale = new THREE.Vector3();\n            return function updateRefractorPlane() {\n                scope.matrixWorld.decompose(position, quaternion, scale);\n                normal.set(0, 0, 1).applyQuaternion(quaternion).normalize();\n                normal.negate();\n                refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\n            };\n        }();\n        var updateVirtualCamera = function () {\n            var clipPlane = new THREE.Plane();\n            var clipVector = new THREE.Vector4();\n            var q = new THREE.Vector4();\n            return function updateVirtualCamera(camera) {\n                virtualCamera.matrixWorld.copy(camera.matrixWorld);\n                virtualCamera.matrixWorldInverse.getInverse(virtualCamera.matrixWorld);\n                virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n                virtualCamera.far = camera.far;\n                clipPlane.copy(refractorPlane);\n                clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n                clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);\n                var projectionMatrix = virtualCamera.projectionMatrix;\n                q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n                q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n                q.z = -1;\n                q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n                clipVector.multiplyScalar(2 / clipVector.dot(q));\n                projectionMatrix.elements[2] = clipVector.x;\n                projectionMatrix.elements[6] = clipVector.y;\n                projectionMatrix.elements[10] = clipVector.z + 1 - clipBias;\n                projectionMatrix.elements[14] = clipVector.w;\n            };\n        }();\n        function updateTextureMatrix(camera) {\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(camera.projectionMatrix);\n            textureMatrix.multiply(camera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n        }\n        function render(renderer, scene, camera) {\n            scope.visible = false;\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, virtualCamera);\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n            scope.visible = true;\n        }\n        this.onBeforeRender = function (renderer, scene, camera) {\n            if (camera.userData.refractor === true)\n                return;\n            if (!visible(camera) === true)\n                return;\n            updateRefractorPlane();\n            updateTextureMatrix(camera);\n            updateVirtualCamera(camera);\n            render(renderer, scene, camera);\n        };\n        this.getRenderTarget = function () {\n            return renderTarget;\n        };\n    };\n    Refractor.prototype = Object.create(THREE.Mesh.prototype);\n    Refractor.prototype.constructor = Refractor;\n    Refractor.RefractorShader = {\n        uniforms: {\n            'color': { value: null },\n            'tDiffuse': { value: null },\n            'textureMatrix': { value: null }\n        },\n        vertexShader: [\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vUv;',\n            'void main() {',\n            '\\tvUv = textureMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec4 vUv;',\n            'float blendOverlay( float base, float blend ) {',\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n            '}',\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n            '}',\n            'void main() {',\n            '\\tvec4 base = texture2DProj( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return Refractor;\n});\ndefine('skylark-threejs-ex/loaders/TTFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TTFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.reversed = false;\n    };\n    TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TTFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer) {\n            function convert(font, reversed) {\n                var round = Math.round;\n                var glyphs = {};\n                var scale = 100000 / ((font.unitsPerEm || 2048) * 72);\n                var glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n                var unicodes = Object.keys(glyphIndexMap);\n                for (var i = 0; i < unicodes.length; i++) {\n                    var unicode = unicodes[i];\n                    var glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\n                    if (unicode !== undefined) {\n                        var token = {\n                            ha: round(glyph.advanceWidth * scale),\n                            x_min: round(glyph.xMin * scale),\n                            x_max: round(glyph.xMax * scale),\n                            o: ''\n                        };\n                        if (reversed) {\n                            glyph.path.commands = reverseCommands(glyph.path.commands);\n                        }\n                        glyph.path.commands.forEach(function (command) {\n                            if (command.type.toLowerCase() === 'c') {\n                                command.type = 'b';\n                            }\n                            token.o += command.type.toLowerCase() + ' ';\n                            if (command.x !== undefined && command.y !== undefined) {\n                                token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';\n                            }\n                            if (command.x1 !== undefined && command.y1 !== undefined) {\n                                token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';\n                            }\n                            if (command.x2 !== undefined && command.y2 !== undefined) {\n                                token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';\n                            }\n                        });\n                        glyphs[String.fromCodePoint(glyph.unicode)] = token;\n                    }\n                }\n                return {\n                    glyphs: glyphs,\n                    familyName: font.getEnglishName('fullName'),\n                    ascender: round(font.ascender * scale),\n                    descender: round(font.descender * scale),\n                    underlinePosition: font.tables.post.underlinePosition,\n                    underlineThickness: font.tables.post.underlineThickness,\n                    boundingBox: {\n                        xMin: font.tables.head.xMin,\n                        xMax: font.tables.head.xMax,\n                        yMin: font.tables.head.yMin,\n                        yMax: font.tables.head.yMax\n                    },\n                    resolution: 1000,\n                    original_font_information: font.tables.name\n                };\n            }\n            function reverseCommands(commands) {\n                var paths = [];\n                var path;\n                commands.forEach(function (c) {\n                    if (c.type.toLowerCase() === 'm') {\n                        path = [c];\n                        paths.push(path);\n                    } else if (c.type.toLowerCase() !== 'z') {\n                        path.push(c);\n                    }\n                });\n                var reversed = [];\n                paths.forEach(function (p) {\n                    var result = {\n                        type: 'm',\n                        x: p[p.length - 1].x,\n                        y: p[p.length - 1].y\n                    };\n                    reversed.push(result);\n                    for (var i = p.length - 1; i > 0; i--) {\n                        var command = p[i];\n                        var result = { type: command.type };\n                        if (command.x2 !== undefined && command.y2 !== undefined) {\n                            result.x1 = command.x2;\n                            result.y1 = command.y2;\n                            result.x2 = command.x1;\n                            result.y2 = command.y1;\n                        } else if (command.x1 !== undefined && command.y1 !== undefined) {\n                            result.x1 = command.x1;\n                            result.y1 = command.y1;\n                        }\n                        result.x = p[i - 1].x;\n                        result.y = p[i - 1].y;\n                        reversed.push(result);\n                    }\n                });\n                return reversed;\n            }\n            if (typeof opentype === 'undefined') {\n                console.warn(\"THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader.\");\n                return null;\n            }\n            return convert(opentype.parse(arraybuffer), this.reversed);\n        }\n    });\n    return TTFLoader;\n});\ndefine('skylark-threejs-ex/loaders/3MFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var ThreeMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.availableExtensions = [];\n    };\n    ThreeMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ThreeMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var scope = this;\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            function loadDocument(data) {\n                var zip = null;\n                var file = null;\n                var relsName;\n                var modelRelsName;\n                var modelPartNames = [];\n                var printTicketPartNames = [];\n                var texturesPartNames = [];\n                var otherPartNames = [];\n                var rels;\n                var modelRels;\n                var modelParts = {};\n                var printTicketParts = {};\n                var texturesParts = {};\n                var otherParts = {};\n                try {\n                    zip = new JSZip(data);\n                } catch (e) {\n                    if (e instanceof ReferenceError) {\n                        console.error('THREE.3MFLoader: jszip missing and file is compressed.');\n                        return null;\n                    }\n                }\n                for (file in zip.files) {\n                    if (file.match(/\\_rels\\/.rels$/)) {\n                        relsName = file;\n                    } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n                        modelRelsName = file;\n                    } else if (file.match(/^3D\\/.*\\.model$/)) {\n                        modelPartNames.push(file);\n                    } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n                        printTicketPartNames.push(file);\n                    } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n                        texturesPartNames.push(file);\n                    } else if (file.match(/^3D\\/Other\\/.*/)) {\n                        otherPartNames.push(file);\n                    }\n                }\n                var relsView = new Uint8Array(zip.file(relsName).asArrayBuffer());\n                var relsFileText = THREE.LoaderUtils.decodeText(relsView);\n                rels = parseRelsXml(relsFileText);\n                if (modelRelsName) {\n                    var relsView = new Uint8Array(zip.file(modelRelsName).asArrayBuffer());\n                    var relsFileText = THREE.LoaderUtils.decodeText(relsView);\n                    modelRels = parseRelsXml(relsFileText);\n                }\n                for (var i = 0; i < modelPartNames.length; i++) {\n                    var modelPart = modelPartNames[i];\n                    var view = new Uint8Array(zip.file(modelPart).asArrayBuffer());\n                    var fileText = THREE.LoaderUtils.decodeText(view);\n                    var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                    if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n                        console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n                    }\n                    var modelNode = xmlData.querySelector('model');\n                    var extensions = {};\n                    for (var i = 0; i < modelNode.attributes.length; i++) {\n                        var attr = modelNode.attributes[i];\n                        if (attr.name.match(/^xmlns:(.+)$/)) {\n                            extensions[attr.value] = RegExp.$1;\n                        }\n                    }\n                    var modelData = parseModelNode(modelNode);\n                    modelData['xml'] = modelNode;\n                    if (0 < Object.keys(extensions).length) {\n                        modelData['extensions'] = extensions;\n                    }\n                    modelParts[modelPart] = modelData;\n                }\n                for (var i = 0; i < texturesPartNames.length; i++) {\n                    var texturesPartName = texturesPartNames[i];\n                    texturesParts[texturesPartName] = zip.file(texturesPartName).asArrayBuffer();\n                }\n                return {\n                    rels: rels,\n                    modelRels: modelRels,\n                    model: modelParts,\n                    printTicket: printTicketParts,\n                    texture: texturesParts,\n                    other: otherParts\n                };\n            }\n            function parseRelsXml(relsFileText) {\n                var relationships = [];\n                var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n                var relsNodes = relsXmlData.querySelectorAll('Relationship');\n                for (var i = 0; i < relsNodes.length; i++) {\n                    var relsNode = relsNodes[i];\n                    var relationship = {\n                        target: relsNode.getAttribute('Target'),\n                        id: relsNode.getAttribute('Id'),\n                        type: relsNode.getAttribute('Type')\n                    };\n                    relationships.push(relationship);\n                }\n                return relationships;\n            }\n            function parseMetadataNodes(metadataNodes) {\n                var metadataData = {};\n                for (var i = 0; i < metadataNodes.length; i++) {\n                    var metadataNode = metadataNodes[i];\n                    var name = metadataNode.getAttribute('name');\n                    var validNames = [\n                        'Title',\n                        'Designer',\n                        'Description',\n                        'Copyright',\n                        'LicenseTerms',\n                        'Rating',\n                        'CreationDate',\n                        'ModificationDate'\n                    ];\n                    if (0 <= validNames.indexOf(name)) {\n                        metadataData[name] = metadataNode.textContent;\n                    }\n                }\n                return metadataData;\n            }\n            function parseBasematerialsNode(basematerialsNode) {\n                var basematerialsData = {\n                    id: basematerialsNode.getAttribute('id'),\n                    basematerials: []\n                };\n                var basematerialNodes = basematerialsNode.querySelectorAll('base');\n                for (var i = 0; i < basematerialNodes.length; i++) {\n                    var basematerialNode = basematerialNodes[i];\n                    var basematerialData = parseBasematerialNode(basematerialNode);\n                    basematerialData.index = i;\n                    basematerialsData.basematerials.push(basematerialData);\n                }\n                return basematerialsData;\n            }\n            function parseTexture2DNode(texture2DNode) {\n                var texture2dData = {\n                    id: texture2DNode.getAttribute('id'),\n                    path: texture2DNode.getAttribute('path'),\n                    contenttype: texture2DNode.getAttribute('contenttype'),\n                    tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n                    tilestylev: texture2DNode.getAttribute('tilestylev'),\n                    filter: texture2DNode.getAttribute('filter')\n                };\n                return texture2dData;\n            }\n            function parseTextures2DGroupNode(texture2DGroupNode) {\n                var texture2DGroupData = {\n                    id: texture2DGroupNode.getAttribute('id'),\n                    texid: texture2DGroupNode.getAttribute('texid'),\n                    displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n                };\n                var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n                var uvs = [];\n                for (var i = 0; i < tex2coordNodes.length; i++) {\n                    var tex2coordNode = tex2coordNodes[i];\n                    var u = tex2coordNode.getAttribute('u');\n                    var v = tex2coordNode.getAttribute('v');\n                    uvs.push(parseFloat(u), parseFloat(v));\n                }\n                texture2DGroupData['uvs'] = new Float32Array(uvs);\n                return texture2DGroupData;\n            }\n            function parseColorGroupNode(colorGroupNode) {\n                var colorGroupData = {\n                    id: colorGroupNode.getAttribute('id'),\n                    displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n                };\n                var colorNodes = colorGroupNode.querySelectorAll('color');\n                var colors = [];\n                var colorObject = new THREE.Color();\n                for (var i = 0; i < colorNodes.length; i++) {\n                    var colorNode = colorNodes[i];\n                    var color = colorNode.getAttribute('color');\n                    colorObject.setStyle(color.substring(0, 7));\n                    colorObject.convertSRGBToLinear();\n                    colors.push(colorObject.r, colorObject.g, colorObject.b);\n                }\n                colorGroupData['colors'] = new Float32Array(colors);\n                return colorGroupData;\n            }\n            function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n                var metallicDisplaypropertiesData = { id: metallicDisplaypropetiesNode.getAttribute('id') };\n                var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n                var metallicData = [];\n                for (var i = 0; i < metallicNodes.length; i++) {\n                    var metallicNode = metallicNodes[i];\n                    metallicData.push({\n                        name: metallicNode.getAttribute('name'),\n                        metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n                        roughness: parseFloat(metallicNode.getAttribute('roughness'))\n                    });\n                }\n                metallicDisplaypropertiesData.data = metallicData;\n                return metallicDisplaypropertiesData;\n            }\n            function parseBasematerialNode(basematerialNode) {\n                var basematerialData = {};\n                basematerialData['name'] = basematerialNode.getAttribute('name');\n                basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor');\n                basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n                return basematerialData;\n            }\n            function parseMeshNode(meshNode) {\n                var meshData = {};\n                var vertices = [];\n                var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n                for (var i = 0; i < vertexNodes.length; i++) {\n                    var vertexNode = vertexNodes[i];\n                    var x = vertexNode.getAttribute('x');\n                    var y = vertexNode.getAttribute('y');\n                    var z = vertexNode.getAttribute('z');\n                    vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n                }\n                meshData['vertices'] = new Float32Array(vertices);\n                var triangleProperties = [];\n                var triangles = [];\n                var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n                for (var i = 0; i < triangleNodes.length; i++) {\n                    var triangleNode = triangleNodes[i];\n                    var v1 = triangleNode.getAttribute('v1');\n                    var v2 = triangleNode.getAttribute('v2');\n                    var v3 = triangleNode.getAttribute('v3');\n                    var p1 = triangleNode.getAttribute('p1');\n                    var p2 = triangleNode.getAttribute('p2');\n                    var p3 = triangleNode.getAttribute('p3');\n                    var pid = triangleNode.getAttribute('pid');\n                    var triangleProperty = {};\n                    triangleProperty['v1'] = parseInt(v1, 10);\n                    triangleProperty['v2'] = parseInt(v2, 10);\n                    triangleProperty['v3'] = parseInt(v3, 10);\n                    triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);\n                    if (p1) {\n                        triangleProperty['p1'] = parseInt(p1, 10);\n                    }\n                    if (p2) {\n                        triangleProperty['p2'] = parseInt(p2, 10);\n                    }\n                    if (p3) {\n                        triangleProperty['p3'] = parseInt(p3, 10);\n                    }\n                    if (pid) {\n                        triangleProperty['pid'] = pid;\n                    }\n                    if (0 < Object.keys(triangleProperty).length) {\n                        triangleProperties.push(triangleProperty);\n                    }\n                }\n                meshData['triangleProperties'] = triangleProperties;\n                meshData['triangles'] = new Uint32Array(triangles);\n                return meshData;\n            }\n            function parseComponentsNode(componentsNode) {\n                var components = [];\n                var componentNodes = componentsNode.querySelectorAll('component');\n                for (var i = 0; i < componentNodes.length; i++) {\n                    var componentNode = componentNodes[i];\n                    var componentData = parseComponentNode(componentNode);\n                    components.push(componentData);\n                }\n                return components;\n            }\n            function parseComponentNode(componentNode) {\n                var componentData = {};\n                componentData['objectId'] = componentNode.getAttribute('objectid');\n                var transform = componentNode.getAttribute('transform');\n                if (transform) {\n                    componentData['transform'] = parseTransform(transform);\n                }\n                return componentData;\n            }\n            function parseTransform(transform) {\n                var t = [];\n                transform.split(' ').forEach(function (s) {\n                    t.push(parseFloat(s));\n                });\n                var matrix = new THREE.Matrix4();\n                matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n                return matrix;\n            }\n            function parseObjectNode(objectNode) {\n                var objectData = { type: objectNode.getAttribute('type') };\n                var id = objectNode.getAttribute('id');\n                if (id) {\n                    objectData['id'] = id;\n                }\n                var pid = objectNode.getAttribute('pid');\n                if (pid) {\n                    objectData['pid'] = pid;\n                }\n                var pindex = objectNode.getAttribute('pindex');\n                if (pindex) {\n                    objectData['pindex'] = pindex;\n                }\n                var thumbnail = objectNode.getAttribute('thumbnail');\n                if (thumbnail) {\n                    objectData['thumbnail'] = thumbnail;\n                }\n                var partnumber = objectNode.getAttribute('partnumber');\n                if (partnumber) {\n                    objectData['partnumber'] = partnumber;\n                }\n                var name = objectNode.getAttribute('name');\n                if (name) {\n                    objectData['name'] = name;\n                }\n                var meshNode = objectNode.querySelector('mesh');\n                if (meshNode) {\n                    objectData['mesh'] = parseMeshNode(meshNode);\n                }\n                var componentsNode = objectNode.querySelector('components');\n                if (componentsNode) {\n                    objectData['components'] = parseComponentsNode(componentsNode);\n                }\n                return objectData;\n            }\n            function parseResourcesNode(resourcesNode) {\n                var resourcesData = {};\n                resourcesData['basematerials'] = {};\n                var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n                for (var i = 0; i < basematerialsNodes.length; i++) {\n                    var basematerialsNode = basematerialsNodes[i];\n                    var basematerialsData = parseBasematerialsNode(basematerialsNode);\n                    resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n                }\n                resourcesData['texture2d'] = {};\n                var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n                for (var i = 0; i < textures2DNodes.length; i++) {\n                    var textures2DNode = textures2DNodes[i];\n                    var texture2DData = parseTexture2DNode(textures2DNode);\n                    resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n                }\n                resourcesData['colorgroup'] = {};\n                var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n                for (var i = 0; i < colorGroupNodes.length; i++) {\n                    var colorGroupNode = colorGroupNodes[i];\n                    var colorGroupData = parseColorGroupNode(colorGroupNode);\n                    resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n                }\n                resourcesData['pbmetallicdisplayproperties'] = {};\n                var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n                for (var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n                    var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n                    var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n                    resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n                }\n                resourcesData['texture2dgroup'] = {};\n                var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n                for (var i = 0; i < textures2DGroupNodes.length; i++) {\n                    var textures2DGroupNode = textures2DGroupNodes[i];\n                    var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n                    resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n                }\n                resourcesData['object'] = {};\n                var objectNodes = resourcesNode.querySelectorAll('object');\n                for (var i = 0; i < objectNodes.length; i++) {\n                    var objectNode = objectNodes[i];\n                    var objectData = parseObjectNode(objectNode);\n                    resourcesData['object'][objectData['id']] = objectData;\n                }\n                return resourcesData;\n            }\n            function parseBuildNode(buildNode) {\n                var buildData = [];\n                var itemNodes = buildNode.querySelectorAll('item');\n                for (var i = 0; i < itemNodes.length; i++) {\n                    var itemNode = itemNodes[i];\n                    var buildItem = { objectId: itemNode.getAttribute('objectid') };\n                    var transform = itemNode.getAttribute('transform');\n                    if (transform) {\n                        buildItem['transform'] = parseTransform(transform);\n                    }\n                    buildData.push(buildItem);\n                }\n                return buildData;\n            }\n            function parseModelNode(modelNode) {\n                var modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' };\n                var metadataNodes = modelNode.querySelectorAll('metadata');\n                if (metadataNodes) {\n                    modelData['metadata'] = parseMetadataNodes(metadataNodes);\n                }\n                var resourcesNode = modelNode.querySelector('resources');\n                if (resourcesNode) {\n                    modelData['resources'] = parseResourcesNode(resourcesNode);\n                }\n                var buildNode = modelNode.querySelector('build');\n                if (buildNode) {\n                    modelData['build'] = parseBuildNode(buildNode);\n                }\n                return modelData;\n            }\n            function buildTexture(texture2dgroup, objects, modelData, textureData) {\n                var texid = texture2dgroup.texid;\n                var texture2ds = modelData.resources.texture2d;\n                var texture2d = texture2ds[texid];\n                if (texture2d) {\n                    var data = textureData[texture2d.path];\n                    var type = texture2d.contenttype;\n                    var blob = new Blob([data], { type: type });\n                    var sourceURI = URL.createObjectURL(blob);\n                    var texture = textureLoader.load(sourceURI, function () {\n                        URL.revokeObjectURL(sourceURI);\n                    });\n                    texture.encoding = THREE.sRGBEncoding;\n                    switch (texture2d.tilestyleu) {\n                    case 'wrap':\n                        texture.wrapS = THREE.RepeatWrapping;\n                        break;\n                    case 'mirror':\n                        texture.wrapS = THREE.MirroredRepeatWrapping;\n                        break;\n                    case 'none':\n                    case 'clamp':\n                        texture.wrapS = THREE.ClampToEdgeWrapping;\n                        break;\n                    default:\n                        texture.wrapS = THREE.RepeatWrapping;\n                    }\n                    switch (texture2d.tilestylev) {\n                    case 'wrap':\n                        texture.wrapT = THREE.RepeatWrapping;\n                        break;\n                    case 'mirror':\n                        texture.wrapT = THREE.MirroredRepeatWrapping;\n                        break;\n                    case 'none':\n                    case 'clamp':\n                        texture.wrapT = THREE.ClampToEdgeWrapping;\n                        break;\n                    default:\n                        texture.wrapT = THREE.RepeatWrapping;\n                    }\n                    switch (texture2d.filter) {\n                    case 'auto':\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\n                        break;\n                    case 'linear':\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearFilter;\n                        break;\n                    case 'nearest':\n                        texture.magFilter = THREE.NearestFilter;\n                        texture.minFilter = THREE.NearestFilter;\n                        break;\n                    default:\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\n                    }\n                    return texture;\n                } else {\n                    return null;\n                }\n            }\n            function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n                var objectPindex = objectData.pindex;\n                var materialMap = {};\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n                    if (materialMap[pindex] === undefined)\n                        materialMap[pindex] = [];\n                    materialMap[pindex].push(triangleProperty);\n                }\n                var keys = Object.keys(materialMap);\n                var meshes = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var materialIndex = keys[i];\n                    var trianglePropertiesProps = materialMap[materialIndex];\n                    var basematerialData = basematerials.basematerials[materialIndex];\n                    var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);\n                    var geometry = new THREE.BufferGeometry();\n                    var positionData = [];\n                    var vertices = meshData.vertices;\n                    for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n                        var triangleProperty = trianglePropertiesProps[j];\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                    var mesh = new THREE.Mesh(geometry, material);\n                    meshes.push(mesh);\n                }\n                return meshes;\n            }\n            function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n                var geometry = new THREE.BufferGeometry();\n                var positionData = [];\n                var uvData = [];\n                var vertices = meshData.vertices;\n                var uvs = texture2dgroup.uvs;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvData, 2));\n                var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n                var material = new THREE.MeshPhongMaterial({\n                    map: texture,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData) {\n                var geometry = new THREE.BufferGeometry();\n                var positionData = [];\n                var colorData = [];\n                var vertices = meshData.vertices;\n                var colors = colorgroup.colors;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var v1 = triangleProperty.v1;\n                    var v2 = triangleProperty.v2;\n                    var v3 = triangleProperty.v3;\n                    positionData.push(vertices[v1 * 3 + 0]);\n                    positionData.push(vertices[v1 * 3 + 1]);\n                    positionData.push(vertices[v1 * 3 + 2]);\n                    positionData.push(vertices[v2 * 3 + 0]);\n                    positionData.push(vertices[v2 * 3 + 1]);\n                    positionData.push(vertices[v2 * 3 + 2]);\n                    positionData.push(vertices[v3 * 3 + 0]);\n                    positionData.push(vertices[v3 * 3 + 1]);\n                    positionData.push(vertices[v3 * 3 + 2]);\n                    var p1 = triangleProperty.p1;\n                    var p2 = triangleProperty.p2;\n                    var p3 = triangleProperty.p3;\n                    colorData.push(colors[p1 * 3 + 0]);\n                    colorData.push(colors[p1 * 3 + 1]);\n                    colorData.push(colors[p1 * 3 + 2]);\n                    colorData.push(colors[(p2 || p1) * 3 + 0]);\n                    colorData.push(colors[(p2 || p1) * 3 + 1]);\n                    colorData.push(colors[(p2 || p1) * 3 + 2]);\n                    colorData.push(colors[(p3 || p1) * 3 + 0]);\n                    colorData.push(colors[(p3 || p1) * 3 + 1]);\n                    colorData.push(colors[(p3 || p1) * 3 + 2]);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorData, 3));\n                var material = new THREE.MeshPhongMaterial({\n                    vertexColors: true,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildDefaultMesh(meshData) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(new THREE.BufferAttribute(meshData['triangles'], 1));\n                geometry.setAttribute('position', new THREE.BufferAttribute(meshData['vertices'], 3));\n                var material = new THREE.MeshPhongMaterial({\n                    color: 11184895,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n                var keys = Object.keys(resourceMap);\n                var meshes = [];\n                for (var i = 0, il = keys.length; i < il; i++) {\n                    var resourceId = keys[i];\n                    var triangleProperties = resourceMap[resourceId];\n                    var resourceType = getResourceType(resourceId, modelData);\n                    switch (resourceType) {\n                    case 'material':\n                        var basematerials = modelData.resources.basematerials[resourceId];\n                        var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n                        for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                            meshes.push(newMeshes[j]);\n                        }\n                        break;\n                    case 'texture':\n                        var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n                        meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n                        break;\n                    case 'vertexColors':\n                        var colorgroup = modelData.resources.colorgroup[resourceId];\n                        meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData));\n                        break;\n                    case 'default':\n                        meshes.push(buildDefaultMesh(meshData));\n                        break;\n                    default:\n                        console.error('THREE.3MFLoader: Unsupported resource type.');\n                    }\n                }\n                return meshes;\n            }\n            function getResourceType(pid, modelData) {\n                if (modelData.resources.texture2dgroup[pid] !== undefined) {\n                    return 'texture';\n                } else if (modelData.resources.basematerials[pid] !== undefined) {\n                    return 'material';\n                } else if (modelData.resources.colorgroup[pid] !== undefined) {\n                    return 'vertexColors';\n                } else if (pid === 'default') {\n                    return 'default';\n                } else {\n                    return undefined;\n                }\n            }\n            function analyzeObject(modelData, meshData, objectData) {\n                var resourceMap = {};\n                var triangleProperties = meshData['triangleProperties'];\n                var objectPid = objectData.pid;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n                    if (pid === undefined)\n                        pid = 'default';\n                    if (resourceMap[pid] === undefined)\n                        resourceMap[pid] = [];\n                    resourceMap[pid].push(triangleProperty);\n                }\n                return resourceMap;\n            }\n            function buildGroup(meshData, objects, modelData, textureData, objectData) {\n                var group = new THREE.Group();\n                var resourceMap = analyzeObject(modelData, meshData, objectData);\n                var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n                for (var i = 0, l = meshes.length; i < l; i++) {\n                    group.add(meshes[i]);\n                }\n                return group;\n            }\n            function applyExtensions(extensions, meshData, modelXml) {\n                if (!extensions) {\n                    return;\n                }\n                var availableExtensions = [];\n                var keys = Object.keys(extensions);\n                for (var i = 0; i < keys.length; i++) {\n                    var ns = keys[i];\n                    for (var j = 0; j < scope.availableExtensions.length; j++) {\n                        var extension = scope.availableExtensions[j];\n                        if (extension.ns === ns) {\n                            availableExtensions.push(extension);\n                        }\n                    }\n                }\n                for (var i = 0; i < availableExtensions.length; i++) {\n                    var extension = availableExtensions[i];\n                    extension.apply(modelXml, extensions[extension['ns']], meshData);\n                }\n            }\n            function getBuild(data, objects, modelData, textureData, objectData, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data, objects, modelData, textureData, objectData);\n                return data.build;\n            }\n            function buildBasematerial(materialData, objects, modelData) {\n                var material;\n                var displaypropertiesid = materialData.displaypropertiesid;\n                var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n                if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n                    var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n                    var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n                    material = new THREE.MeshStandardMaterial({\n                        flatShading: true,\n                        roughness: metallicData.roughness,\n                        metalness: metallicData.metallicness\n                    });\n                } else {\n                    material = new THREE.MeshPhongMaterial({ flatShading: true });\n                }\n                material.name = materialData.name;\n                var displaycolor = materialData.displaycolor;\n                var color = displaycolor.substring(0, 7);\n                material.color.setStyle(color);\n                material.color.convertSRGBToLinear();\n                if (displaycolor.length === 9) {\n                    material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n                }\n                return material;\n            }\n            function buildComposite(compositeData, objects, modelData, textureData) {\n                var composite = new THREE.Group();\n                for (var j = 0; j < compositeData.length; j++) {\n                    var component = compositeData[j];\n                    var build = objects[component.objectId];\n                    if (build === undefined) {\n                        buildObject(component.objectId, objects, modelData, textureData);\n                        build = objects[component.objectId];\n                    }\n                    var object3D = build.clone();\n                    var transform = component.transform;\n                    if (transform) {\n                        object3D.applyMatrix4(transform);\n                    }\n                    composite.add(object3D);\n                }\n                return composite;\n            }\n            function buildObject(objectId, objects, modelData, textureData) {\n                var objectData = modelData['resources']['object'][objectId];\n                if (objectData['mesh']) {\n                    var meshData = objectData['mesh'];\n                    var extensions = modelData['extensions'];\n                    var modelXml = modelData['xml'];\n                    applyExtensions(extensions, meshData, modelXml);\n                    objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n                } else {\n                    var compositeData = objectData['components'];\n                    objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n                }\n            }\n            function buildObjects(data3mf) {\n                var modelsData = data3mf.model;\n                var modelRels = data3mf.modelRels;\n                var objects = {};\n                var modelsKeys = Object.keys(modelsData);\n                var textureData = {};\n                if (modelRels) {\n                    for (var i = 0, l = modelRels.length; i < l; i++) {\n                        var modelRel = modelRels[i];\n                        var textureKey = modelRel.target.substring(1);\n                        if (data3mf.texture[textureKey]) {\n                            textureData[modelRel.target] = data3mf.texture[textureKey];\n                        }\n                    }\n                }\n                for (var i = 0; i < modelsKeys.length; i++) {\n                    var modelsKey = modelsKeys[i];\n                    var modelData = modelsData[modelsKey];\n                    var objectIds = Object.keys(modelData['resources']['object']);\n                    for (var j = 0; j < objectIds.length; j++) {\n                        var objectId = objectIds[j];\n                        buildObject(objectId, objects, modelData, textureData);\n                    }\n                }\n                return objects;\n            }\n            function build(objects, data3mf) {\n                var group = new THREE.Group();\n                var relationship = data3mf['rels'][0];\n                var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n                for (var i = 0; i < buildData.length; i++) {\n                    var buildItem = buildData[i];\n                    var object3D = objects[buildItem['objectId']];\n                    var transform = buildItem['transform'];\n                    if (transform) {\n                        object3D.applyMatrix4(transform);\n                    }\n                    group.add(object3D);\n                }\n                return group;\n            }\n            var data3mf = loadDocument(data);\n            var objects = buildObjects(data3mf);\n            return build(objects, data3mf);\n        },\n        addExtension: function (extension) {\n            this.availableExtensions.push(extension);\n        }\n    });\n    return ThreeMFLoader;\n});\ndefine('skylark-threejs-ex/loaders/AMFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function loadDocument(data) {\n                var view = new DataView(data);\n                var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n                if (magic === 'PK') {\n                    var zip = null;\n                    var file = null;\n                    console.log('THREE.AMFLoader: Loading Zip');\n                    try {\n                        zip = new JSZip(data);\n                    } catch (e) {\n                        if (e instanceof ReferenceError) {\n                            console.log('THREE.AMFLoader: jszip missing and file is compressed.');\n                            return null;\n                        }\n                    }\n                    for (file in zip.files) {\n                        if (file.toLowerCase().substr(-4) === '.amf') {\n                            break;\n                        }\n                    }\n                    console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n                    view = new DataView(zip.file(file).asArrayBuffer());\n                }\n                var fileText = THREE.LoaderUtils.decodeText(view);\n                var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n                    console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n                    return null;\n                }\n                return xmlData;\n            }\n            function loadDocumentScale(node) {\n                var scale = 1;\n                var unit = 'millimeter';\n                if (node.documentElement.attributes.unit !== undefined) {\n                    unit = node.documentElement.attributes.unit.value.toLowerCase();\n                }\n                var scaleUnits = {\n                    millimeter: 1,\n                    inch: 25.4,\n                    feet: 304.8,\n                    meter: 1000,\n                    micron: 0.001\n                };\n                if (scaleUnits[unit] !== undefined) {\n                    scale = scaleUnits[unit];\n                }\n                console.log('THREE.AMFLoader: Unit scale: ' + scale);\n                return scale;\n            }\n            function loadMaterials(node) {\n                var matName = 'AMF Material';\n                var matId = node.attributes.id.textContent;\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                var loadedMaterial = null;\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matChildEl = node.childNodes[i];\n                    if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n                        if (matChildEl.attributes.type.value === 'name') {\n                            matName = matChildEl.textContent;\n                        }\n                    } else if (matChildEl.nodeName === 'color') {\n                        color = loadColor(matChildEl);\n                    }\n                }\n                loadedMaterial = new THREE.MeshPhongMaterial({\n                    flatShading: true,\n                    color: new THREE.Color(color.r, color.g, color.b),\n                    name: matName\n                });\n                if (color.a !== 1) {\n                    loadedMaterial.transparent = true;\n                    loadedMaterial.opacity = color.a;\n                }\n                return {\n                    id: matId,\n                    material: loadedMaterial\n                };\n            }\n            function loadColor(node) {\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matColor = node.childNodes[i];\n                    if (matColor.nodeName === 'r') {\n                        color.r = matColor.textContent;\n                    } else if (matColor.nodeName === 'g') {\n                        color.g = matColor.textContent;\n                    } else if (matColor.nodeName === 'b') {\n                        color.b = matColor.textContent;\n                    } else if (matColor.nodeName === 'a') {\n                        color.a = matColor.textContent;\n                    }\n                }\n                return color;\n            }\n            function loadMeshVolume(node) {\n                var volume = {\n                    name: '',\n                    triangles: [],\n                    materialid: null\n                };\n                var currVolumeNode = node.firstElementChild;\n                if (node.attributes.materialid !== undefined) {\n                    volume.materialId = node.attributes.materialid.nodeValue;\n                }\n                while (currVolumeNode) {\n                    if (currVolumeNode.nodeName === 'metadata') {\n                        if (currVolumeNode.attributes.type !== undefined) {\n                            if (currVolumeNode.attributes.type.value === 'name') {\n                                volume.name = currVolumeNode.textContent;\n                            }\n                        }\n                    } else if (currVolumeNode.nodeName === 'triangle') {\n                        var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n                        var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n                        var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n                        volume.triangles.push(v1, v2, v3);\n                    }\n                    currVolumeNode = currVolumeNode.nextElementSibling;\n                }\n                return volume;\n            }\n            function loadMeshVertices(node) {\n                var vertArray = [];\n                var normalArray = [];\n                var currVerticesNode = node.firstElementChild;\n                while (currVerticesNode) {\n                    if (currVerticesNode.nodeName === 'vertex') {\n                        var vNode = currVerticesNode.firstElementChild;\n                        while (vNode) {\n                            if (vNode.nodeName === 'coordinates') {\n                                var x = vNode.getElementsByTagName('x')[0].textContent;\n                                var y = vNode.getElementsByTagName('y')[0].textContent;\n                                var z = vNode.getElementsByTagName('z')[0].textContent;\n                                vertArray.push(x, y, z);\n                            } else if (vNode.nodeName === 'normal') {\n                                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                                normalArray.push(nx, ny, nz);\n                            }\n                            vNode = vNode.nextElementSibling;\n                        }\n                    }\n                    currVerticesNode = currVerticesNode.nextElementSibling;\n                }\n                return {\n                    'vertices': vertArray,\n                    'normals': normalArray\n                };\n            }\n            function loadObject(node) {\n                var objId = node.attributes.id.textContent;\n                var loadedObject = {\n                    name: 'amfobject',\n                    meshes: []\n                };\n                var currColor = null;\n                var currObjNode = node.firstElementChild;\n                while (currObjNode) {\n                    if (currObjNode.nodeName === 'metadata') {\n                        if (currObjNode.attributes.type !== undefined) {\n                            if (currObjNode.attributes.type.value === 'name') {\n                                loadedObject.name = currObjNode.textContent;\n                            }\n                        }\n                    } else if (currObjNode.nodeName === 'color') {\n                        currColor = loadColor(currObjNode);\n                    } else if (currObjNode.nodeName === 'mesh') {\n                        var currMeshNode = currObjNode.firstElementChild;\n                        var mesh = {\n                            vertices: [],\n                            normals: [],\n                            volumes: [],\n                            color: currColor\n                        };\n                        while (currMeshNode) {\n                            if (currMeshNode.nodeName === 'vertices') {\n                                var loadedVertices = loadMeshVertices(currMeshNode);\n                                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n                            } else if (currMeshNode.nodeName === 'volume') {\n                                mesh.volumes.push(loadMeshVolume(currMeshNode));\n                            }\n                            currMeshNode = currMeshNode.nextElementSibling;\n                        }\n                        loadedObject.meshes.push(mesh);\n                    }\n                    currObjNode = currObjNode.nextElementSibling;\n                }\n                return {\n                    'id': objId,\n                    'obj': loadedObject\n                };\n            }\n            var xmlData = loadDocument(data);\n            var amfName = '';\n            var amfAuthor = '';\n            var amfScale = loadDocumentScale(xmlData);\n            var amfMaterials = {};\n            var amfObjects = {};\n            var childNodes = xmlData.documentElement.childNodes;\n            var i, j;\n            for (i = 0; i < childNodes.length; i++) {\n                var child = childNodes[i];\n                if (child.nodeName === 'metadata') {\n                    if (child.attributes.type !== undefined) {\n                        if (child.attributes.type.value === 'name') {\n                            amfName = child.textContent;\n                        } else if (child.attributes.type.value === 'author') {\n                            amfAuthor = child.textContent;\n                        }\n                    }\n                } else if (child.nodeName === 'material') {\n                    var loadedMaterial = loadMaterials(child);\n                    amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n                } else if (child.nodeName === 'object') {\n                    var loadedObject = loadObject(child);\n                    amfObjects[loadedObject.id] = loadedObject.obj;\n                }\n            }\n            var sceneObject = new THREE.Group();\n            var defaultMaterial = new THREE.MeshPhongMaterial({\n                color: 11184895,\n                flatShading: true\n            });\n            sceneObject.name = amfName;\n            sceneObject.userData.author = amfAuthor;\n            sceneObject.userData.loader = 'AMF';\n            for (var id in amfObjects) {\n                var part = amfObjects[id];\n                var meshes = part.meshes;\n                var newObject = new THREE.Group();\n                newObject.name = part.name || '';\n                for (i = 0; i < meshes.length; i++) {\n                    var objDefaultMaterial = defaultMaterial;\n                    var mesh = meshes[i];\n                    var vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);\n                    var normals = null;\n                    if (mesh.normals.length) {\n                        normals = new THREE.Float32BufferAttribute(mesh.normals, 3);\n                    }\n                    if (mesh.color) {\n                        var color = mesh.color;\n                        objDefaultMaterial = defaultMaterial.clone();\n                        objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);\n                        if (color.a !== 1) {\n                            objDefaultMaterial.transparent = true;\n                            objDefaultMaterial.opacity = color.a;\n                        }\n                    }\n                    var volumes = mesh.volumes;\n                    for (j = 0; j < volumes.length; j++) {\n                        var volume = volumes[j];\n                        var newGeometry = new THREE.BufferGeometry();\n                        var material = objDefaultMaterial;\n                        newGeometry.setIndex(volume.triangles);\n                        newGeometry.setAttribute('position', vertices.clone());\n                        if (normals) {\n                            newGeometry.setAttribute('normal', normals.clone());\n                        }\n                        if (amfMaterials[volume.materialId] !== undefined) {\n                            material = amfMaterials[volume.materialId];\n                        }\n                        newGeometry.scale(amfScale, amfScale, amfScale);\n                        newObject.add(new THREE.Mesh(newGeometry, material.clone()));\n                    }\n                }\n                sceneObject.add(newObject);\n            }\n            return sceneObject;\n        }\n    });\n\n    return AMFLoader;\n});\ndefine('skylark-threejs-ex/loaders/AssimpLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AssimpLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AssimpLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AssimpLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer, path));\n            }, onProgress, onError);\n        },\n        parse: function (buffer, path) {\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var Virtulous = {};\n            Virtulous.KeyFrame = function (time, matrix) {\n                this.time = time;\n                this.matrix = matrix.clone();\n                this.position = new THREE.Vector3();\n                this.quaternion = new THREE.Quaternion();\n                this.scale = new THREE.Vector3(1, 1, 1);\n                this.matrix.decompose(this.position, this.quaternion, this.scale);\n                this.clone = function () {\n                    var n = new Virtulous.KeyFrame(this.time, this.matrix);\n                    return n;\n                };\n                this.lerp = function (nextKey, time) {\n                    time -= this.time;\n                    var dist = nextKey.time - this.time;\n                    var l = time / dist;\n                    var l2 = 1 - l;\n                    var keypos = this.position;\n                    var keyrot = this.quaternion;\n                    var key2pos = nextKey.position;\n                    var key2rot = nextKey.quaternion;\n                    Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n                    Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n                    Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n                    Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n                    Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n                    return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n                };\n            };\n            Virtulous.KeyFrame.tempAniPos = new THREE.Vector3();\n            Virtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();\n            Virtulous.KeyFrame.tempAniScale = new THREE.Vector3(1, 1, 1);\n            Virtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();\n            Virtulous.KeyFrameTrack = function () {\n                this.keys = [];\n                this.target = null;\n                this.time = 0;\n                this.length = 0;\n                this._accelTable = {};\n                this.fps = 20;\n                this.addKey = function (key) {\n                    this.keys.push(key);\n                };\n                this.init = function () {\n                    this.sortKeys();\n                    if (this.keys.length > 0)\n                        this.length = this.keys[this.keys.length - 1].time;\n                    else\n                        this.length = 0;\n                    if (!this.fps)\n                        return;\n                    for (var j = 0; j < this.length * this.fps; j++) {\n                        for (var i = 0; i < this.keys.length; i++) {\n                            if (this.keys[i].time == j) {\n                                this._accelTable[j] = i;\n                                break;\n                            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n                                this._accelTable[j] = i;\n                                break;\n                            }\n                        }\n                    }\n                };\n                this.parseFromThree = function (data) {\n                    var fps = data.fps;\n                    this.target = data.node;\n                    var track = data.hierarchy[0].keys;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n                    }\n                    this.init();\n                };\n                this.parseFromCollada = function (data) {\n                    var track = data.keys;\n                    var fps = this.fps;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n                    }\n                    this.init();\n                };\n                this.sortKeys = function () {\n                    this.keys.sort(this.keySortFunc);\n                };\n                this.keySortFunc = function (a, b) {\n                    return a.time - b.time;\n                };\n                this.clone = function () {\n                    var t = new Virtulous.KeyFrameTrack();\n                    t.target = this.target;\n                    t.time = this.time;\n                    t.length = this.length;\n                    for (var i = 0; i < this.keys.length; i++) {\n                        t.addKey(this.keys[i].clone());\n                    }\n                    t.init();\n                    return t;\n                };\n                this.reTarget = function (root, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    this.target = compareitor(root, this.target);\n                };\n                this.keySearchAccel = function (time) {\n                    time *= this.fps;\n                    time = Math.floor(time);\n                    return this._accelTable[time] || 0;\n                };\n                this.setTime = function (time) {\n                    time = Math.abs(time);\n                    if (this.length)\n                        time = time % this.length + 0.05;\n                    var key0 = null;\n                    var key1 = null;\n                    for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {\n                        if (this.keys[i].time == time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i];\n                            break;\n                        } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i + 1];\n                            break;\n                        } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[0].clone();\n                            key1.time += this.length + 0.05;\n                            break;\n                        }\n                    }\n                    if (key0 && key1 && key0 !== key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.lerp(key1, time));\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                    if (key0 && key1 && key0 == key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.matrix);\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                };\n            };\n            Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n                function find(node, name) {\n                    if (node.name == name)\n                        return node;\n                    for (var i = 0; i < node.children.length; i++) {\n                        var r = find(node.children[i], name);\n                        if (r)\n                            return r;\n                    }\n                    return null;\n                }\n                return find(root, target.name);\n            };\n            Virtulous.Animation = function () {\n                this.tracks = [];\n                this.length = 0;\n                this.addTrack = function (track) {\n                    this.tracks.push(track);\n                    this.length = Math.max(track.length, this.length);\n                };\n                this.setTime = function (time) {\n                    this.time = time;\n                    for (var i = 0; i < this.tracks.length; i++)\n                        this.tracks[i].setTime(time);\n                };\n                this.clone = function (target, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    var n = new Virtulous.Animation();\n                    n.target = target;\n                    for (var i = 0; i < this.tracks.length; i++) {\n                        var track = this.tracks[i].clone();\n                        track.reTarget(target, compareitor);\n                        n.addTrack(track);\n                    }\n                    return n;\n                };\n            };\n            var ASSBIN_CHUNK_AICAMERA = 4660;\n            var ASSBIN_CHUNK_AILIGHT = 4661;\n            var ASSBIN_CHUNK_AITEXTURE = 4662;\n            var ASSBIN_CHUNK_AIMESH = 4663;\n            var ASSBIN_CHUNK_AINODEANIM = 4664;\n            var ASSBIN_CHUNK_AISCENE = 4665;\n            var ASSBIN_CHUNK_AIBONE = 4666;\n            var ASSBIN_CHUNK_AIANIMATION = 4667;\n            var ASSBIN_CHUNK_AINODE = 4668;\n            var ASSBIN_CHUNK_AIMATERIAL = 4669;\n            var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n            var ASSBIN_MESH_HAS_POSITIONS = 1;\n            var ASSBIN_MESH_HAS_NORMALS = 2;\n            var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n            var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n            var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n            var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n            var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n            var aiLightSource_DIRECTIONAL = 1;\n            var aiLightSource_SPOT = 3;\n            var aiTextureType_DIFFUSE = 1;\n            var aiTextureType_NORMALS = 6;\n            var aiTextureType_OPACITY = 8;\n            var aiTextureType_LIGHTMAP = 10;\n            var BONESPERVERT = 4;\n            function ASSBIN_MESH_HAS_TEXCOORD(n) {\n                return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n            }\n            function ASSBIN_MESH_HAS_COLOR(n) {\n                return ASSBIN_MESH_HAS_COLOR_BASE << n;\n            }\n            function markBones(scene) {\n                for (var i in scene.mMeshes) {\n                    var mesh = scene.mMeshes[i];\n                    for (var k in mesh.mBones) {\n                        var boneNode = scene.findNode(mesh.mBones[k].mName);\n                        if (boneNode)\n                            boneNode.isBone = true;\n                    }\n                }\n            }\n            function cloneTreeToBones(root, scene) {\n                var rootBone = new THREE.Bone();\n                rootBone.matrix.copy(root.matrix);\n                rootBone.matrixWorld.copy(root.matrixWorld);\n                rootBone.position.copy(root.position);\n                rootBone.quaternion.copy(root.quaternion);\n                rootBone.scale.copy(root.scale);\n                scene.nodeCount++;\n                rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();\n                if (!scene.nodeToBoneMap[root.name])\n                    scene.nodeToBoneMap[root.name] = [];\n                scene.nodeToBoneMap[root.name].push(rootBone);\n                for (var i in root.children) {\n                    var child = cloneTreeToBones(root.children[i], scene);\n                    rootBone.add(child);\n                }\n                return rootBone;\n            }\n            function sortWeights(indexes, weights) {\n                var pairs = [];\n                for (var i = 0; i < indexes.length; i++) {\n                    pairs.push({\n                        i: indexes[i],\n                        w: weights[i]\n                    });\n                }\n                pairs.sort(function (a, b) {\n                    return b.w - a.w;\n                });\n                while (pairs.length < 4) {\n                    pairs.push({\n                        i: 0,\n                        w: 0\n                    });\n                }\n                if (pairs.length > 4)\n                    pairs.length = 4;\n                var sum = 0;\n                for (var i = 0; i < 4; i++) {\n                    sum += pairs[i].w * pairs[i].w;\n                }\n                sum = Math.sqrt(sum);\n                for (var i = 0; i < 4; i++) {\n                    pairs[i].w = pairs[i].w / sum;\n                    indexes[i] = pairs[i].i;\n                    weights[i] = pairs[i].w;\n                }\n            }\n            function findMatchingBone(root, name) {\n                if (root.name.indexOf('bone_' + name) == 0)\n                    return root;\n                for (var i in root.children) {\n                    var ret = findMatchingBone(root.children[i], name);\n                    if (ret)\n                        return ret;\n                }\n                return undefined;\n            }\n            function aiMesh() {\n                this.mPrimitiveTypes = 0;\n                this.mNumVertices = 0;\n                this.mNumFaces = 0;\n                this.mNumBones = 0;\n                this.mMaterialIndex = 0;\n                this.mVertices = [];\n                this.mNormals = [];\n                this.mTangents = [];\n                this.mBitangents = [];\n                this.mColors = [[]];\n                this.mTextureCoords = [[]];\n                this.mFaces = [];\n                this.mBones = [];\n                this.hookupSkeletons = function (scene) {\n                    if (this.mBones.length == 0)\n                        return;\n                    var allBones = [];\n                    var offsetMatrix = [];\n                    var skeletonRoot = scene.findNode(this.mBones[0].mName);\n                    while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n                        skeletonRoot = skeletonRoot.mParent;\n                    }\n                    var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                    var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                    this.threeNode.add(threeSkeletonRootBone);\n                    for (var i = 0; i < this.mBones.length; i++) {\n                        var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                        if (bone) {\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        } else {\n                            var skeletonRoot = scene.findNode(this.mBones[i].mName);\n                            if (!skeletonRoot)\n                                return;\n                            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                            this.threeNode.add(threeSkeletonRootBone);\n                            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        }\n                    }\n                    var skeleton = new THREE.Skeleton(allBones, offsetMatrix);\n                    this.threeNode.bind(skeleton, new THREE.Matrix4());\n                    this.threeNode.material.skinning = true;\n                };\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var geometry = new THREE.BufferGeometry();\n                    var mat;\n                    if (scene.mMaterials[this.mMaterialIndex])\n                        mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);\n                    else\n                        mat = new THREE.MeshLambertMaterial();\n                    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(this.mVertexBuffer, 3));\n                    if (this.mNormalBuffer && this.mNormalBuffer.length > 0)\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(this.mNormalBuffer, 3));\n                    if (this.mColorBuffer && this.mColorBuffer.length > 0)\n                        geometry.setAttribute('color', new THREE.BufferAttribute(this.mColorBuffer, 4));\n                    if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0)\n                        geometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n                    if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0)\n                        geometry.setAttribute('uv1', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n                    if (this.mTangentBuffer && this.mTangentBuffer.length > 0)\n                        geometry.setAttribute('tangents', new THREE.BufferAttribute(this.mTangentBuffer, 3));\n                    if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0)\n                        geometry.setAttribute('bitangents', new THREE.BufferAttribute(this.mBitangentBuffer, 3));\n                    if (this.mBones.length > 0) {\n                        var weights = [];\n                        var bones = [];\n                        for (var i = 0; i < this.mBones.length; i++) {\n                            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {\n                                var weight = this.mBones[i].mWeights[j];\n                                if (weight) {\n                                    if (!weights[weight.mVertexId])\n                                        weights[weight.mVertexId] = [];\n                                    if (!bones[weight.mVertexId])\n                                        bones[weight.mVertexId] = [];\n                                    weights[weight.mVertexId].push(weight.mWeight);\n                                    bones[weight.mVertexId].push(parseInt(i));\n                                }\n                            }\n                        }\n                        for (var i in bones) {\n                            sortWeights(bones[i], weights[i]);\n                        }\n                        var _weights = [];\n                        var _bones = [];\n                        for (var i = 0; i < weights.length; i++) {\n                            for (var j = 0; j < 4; j++) {\n                                if (weights[i] && bones[i]) {\n                                    _weights.push(weights[i][j]);\n                                    _bones.push(bones[i][j]);\n                                } else {\n                                    _weights.push(0);\n                                    _bones.push(0);\n                                }\n                            }\n                        }\n                        geometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n                        geometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n                    }\n                    var mesh;\n                    if (this.mBones.length == 0)\n                        mesh = new THREE.Mesh(geometry, mat);\n                    if (this.mBones.length > 0) {\n                        mesh = new THREE.SkinnedMesh(geometry, mat);\n                        mesh.normalizeSkinWeights();\n                    }\n                    this.threeNode = mesh;\n                    return mesh;\n                };\n            }\n            function aiFace() {\n                this.mNumIndices = 0;\n                this.mIndices = [];\n            }\n            function aiVector3D() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.toTHREE = function () {\n                    return new THREE.Vector3(this.x, this.y, this.z);\n                };\n            }\n            function aiColor3D() {\n                this.r = 0;\n                this.g = 0;\n                this.b = 0;\n                this.a = 0;\n                this.toTHREE = function () {\n                    return new THREE.Color(this.r, this.g, this.b);\n                };\n            }\n            function aiQuaternion() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.w = 0;\n                this.toTHREE = function () {\n                    return new THREE.Quaternion(this.x, this.y, this.z, this.w);\n                };\n            }\n            function aiVertexWeight() {\n                this.mVertexId = 0;\n                this.mWeight = 0;\n            }\n            function aiString() {\n                this.data = [];\n                this.toString = function () {\n                    var str = '';\n                    this.data.forEach(function (i) {\n                        str += String.fromCharCode(i);\n                    });\n                    return str.replace(/[^\\x20-\\x7E]+/g, '');\n                };\n            }\n            function aiVectorKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiQuatKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiNode() {\n                this.mName = '';\n                this.mTransformation = [];\n                this.mNumChildren = 0;\n                this.mNumMeshes = 0;\n                this.mMeshes = [];\n                this.mChildren = [];\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var o = new THREE.Object3D();\n                    o.name = this.mName;\n                    o.matrix = this.mTransformation.toTHREE();\n                    for (var i = 0; i < this.mChildren.length; i++) {\n                        o.add(this.mChildren[i].toTHREE(scene));\n                    }\n                    for (var i = 0; i < this.mMeshes.length; i++) {\n                        o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n                    }\n                    this.threeNode = o;\n                    o.matrix.decompose(o.position, o.quaternion, o.scale);\n                    return o;\n                };\n            }\n            function aiBone() {\n                this.mName = '';\n                this.mNumWeights = 0;\n                this.mOffsetMatrix = 0;\n            }\n            function aiMaterialProperty() {\n                this.mKey = '';\n                this.mSemantic = 0;\n                this.mIndex = 0;\n                this.mData = [];\n                this.mDataLength = 0;\n                this.mType = 0;\n                this.dataAsColor = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    var g = reader.getFloat32(4, true);\n                    var b = reader.getFloat32(8, true);\n                    return new THREE.Color(r, g, b);\n                };\n                this.dataAsFloat = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return r;\n                };\n                this.dataAsBool = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return !!r;\n                };\n                this.dataAsString = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    return s.toString();\n                };\n                this.dataAsMap = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    var path = s.toString();\n                    path = path.replace(/\\\\/g, '/');\n                    if (path.indexOf('/') != -1) {\n                        path = path.substr(path.lastIndexOf('/') + 1);\n                    }\n                    return textureLoader.load(path);\n                };\n            }\n            var namePropMapping = {\n                '?mat.name': 'name',\n                '$mat.shadingm': 'shading',\n                '$mat.twosided': 'twoSided',\n                '$mat.wireframe': 'wireframe',\n                '$clr.ambient': 'ambient',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'specular',\n                '$clr.emissive': 'emissive',\n                '$clr.transparent': 'transparent',\n                '$clr.reflective': 'reflect',\n                '$mat.shininess': 'shininess',\n                '$mat.reflectivity': 'reflectivity',\n                '$mat.refracti': 'refraction',\n                '$tex.file': 'map'\n            };\n            var nameTypeMapping = {\n                '?mat.name': 'string',\n                '$mat.shadingm': 'bool',\n                '$mat.twosided': 'bool',\n                '$mat.wireframe': 'bool',\n                '$clr.ambient': 'color',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'color',\n                '$clr.emissive': 'color',\n                '$clr.transparent': 'color',\n                '$clr.reflective': 'color',\n                '$mat.shininess': 'float',\n                '$mat.reflectivity': 'float',\n                '$mat.refracti': 'float',\n                '$tex.file': 'map'\n            };\n            function aiMaterial() {\n                this.mNumAllocated = 0;\n                this.mNumProperties = 0;\n                this.mProperties = [];\n                this.toTHREE = function () {\n                    var mat = new THREE.MeshPhongMaterial();\n                    for (var i = 0; i < this.mProperties.length; i++) {\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'float')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'color')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'bool')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'string')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {\n                            var prop = this.mProperties[i];\n                            if (prop.mSemantic == aiTextureType_DIFFUSE)\n                                mat.map = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_NORMALS)\n                                mat.normalMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_LIGHTMAP)\n                                mat.lightMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_OPACITY)\n                                mat.alphaMap = this.mProperties[i].dataAsMap();\n                        }\n                    }\n                    mat.ambient.r = 0.53;\n                    mat.ambient.g = 0.53;\n                    mat.ambient.b = 0.53;\n                    mat.color.r = 1;\n                    mat.color.g = 1;\n                    mat.color.b = 1;\n                    return mat;\n                };\n            }\n            function veclerp(v1, v2, l) {\n                var v = new THREE.Vector3();\n                var lm1 = 1 - l;\n                v.x = v1.x * l + v2.x * lm1;\n                v.y = v1.y * l + v2.y * lm1;\n                v.z = v1.z * l + v2.z * lm1;\n                return v;\n            }\n            function quatlerp(q1, q2, l) {\n                return q1.clone().slerp(q2, 1 - l);\n            }\n            function sampleTrack(keys, time, lne, lerp) {\n                if (keys.length == 1)\n                    return keys[0].mValue.toTHREE();\n                var dist = Infinity;\n                var key = null;\n                var nextKey = null;\n                for (var i = 0; i < keys.length; i++) {\n                    var timeDist = Math.abs(keys[i].mTime - time);\n                    if (timeDist < dist && keys[i].mTime <= time) {\n                        dist = timeDist;\n                        key = keys[i];\n                        nextKey = keys[i + 1];\n                    }\n                }\n                if (!key) {\n                    return null;\n                } else if (nextKey) {\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                } else {\n                    nextKey = keys[0].clone();\n                    nextKey.mTime += lne;\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                }\n            }\n            function aiNodeAnim() {\n                this.mNodeName = '';\n                this.mNumPositionKeys = 0;\n                this.mNumRotationKeys = 0;\n                this.mNumScalingKeys = 0;\n                this.mPositionKeys = [];\n                this.mRotationKeys = [];\n                this.mScalingKeys = [];\n                this.mPreState = '';\n                this.mPostState = '';\n                this.init = function (tps) {\n                    if (!tps)\n                        tps = 1;\n                    function t(t) {\n                        t.mTime /= tps;\n                    }\n                    this.mPositionKeys.forEach(t);\n                    this.mRotationKeys.forEach(t);\n                    this.mScalingKeys.forEach(t);\n                };\n                this.sortKeys = function () {\n                    function comp(a, b) {\n                        return a.mTime - b.mTime;\n                    }\n                    this.mPositionKeys.sort(comp);\n                    this.mRotationKeys.sort(comp);\n                    this.mScalingKeys.sort(comp);\n                };\n                this.getLength = function () {\n                    return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n                        return a.mTime;\n                    })));\n                };\n                this.toTHREE = function (o) {\n                    this.sortKeys();\n                    var length = this.getLength();\n                    var track = new Virtulous.KeyFrameTrack();\n                    for (var i = 0; i < length; i += 0.05) {\n                        var matrix = new THREE.Matrix4();\n                        var time = i;\n                        var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n                        var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n                        var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n                        matrix.compose(pos, rotation, scale);\n                        var key = new Virtulous.KeyFrame(time, matrix);\n                        track.addKey(key);\n                    }\n                    track.target = o.findNode(this.mNodeName).toTHREE();\n                    var tracks = [track];\n                    if (o.nodeToBoneMap[this.mNodeName]) {\n                        for (var i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n                            var t2 = track.clone();\n                            t2.target = o.nodeToBoneMap[this.mNodeName][i];\n                            tracks.push(t2);\n                        }\n                    }\n                    return tracks;\n                };\n            }\n            function aiAnimation() {\n                this.mName = '';\n                this.mDuration = 0;\n                this.mTicksPerSecond = 0;\n                this.mNumChannels = 0;\n                this.mChannels = [];\n                this.toTHREE = function (root) {\n                    var animationHandle = new Virtulous.Animation();\n                    for (var i in this.mChannels) {\n                        this.mChannels[i].init(this.mTicksPerSecond);\n                        var tracks = this.mChannels[i].toTHREE(root);\n                        for (var j in tracks) {\n                            tracks[j].init();\n                            animationHandle.addTrack(tracks[j]);\n                        }\n                    }\n                    animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n                        return e.length;\n                    }));\n                    return animationHandle;\n                };\n            }\n            function aiTexture() {\n                this.mWidth = 0;\n                this.mHeight = 0;\n                this.texAchFormatHint = [];\n                this.pcData = [];\n            }\n            function aiLight() {\n                this.mName = '';\n                this.mType = 0;\n                this.mAttenuationConstant = 0;\n                this.mAttenuationLinear = 0;\n                this.mAttenuationQuadratic = 0;\n                this.mAngleInnerCone = 0;\n                this.mAngleOuterCone = 0;\n                this.mColorDiffuse = null;\n                this.mColorSpecular = null;\n                this.mColorAmbient = null;\n            }\n            function aiCamera() {\n                this.mName = '';\n                this.mPosition = null;\n                this.mLookAt = null;\n                this.mUp = null;\n                this.mHorizontalFOV = 0;\n                this.mClipPlaneNear = 0;\n                this.mClipPlaneFar = 0;\n                this.mAspect = 0;\n            }\n            function aiScene() {\n                this.versionMajor = 0;\n                this.versionMinor = 0;\n                this.versionRevision = 0;\n                this.compileFlags = 0;\n                this.mFlags = 0;\n                this.mNumMeshes = 0;\n                this.mNumMaterials = 0;\n                this.mNumAnimations = 0;\n                this.mNumTextures = 0;\n                this.mNumLights = 0;\n                this.mNumCameras = 0;\n                this.mRootNode = null;\n                this.mMeshes = [];\n                this.mMaterials = [];\n                this.mAnimations = [];\n                this.mLights = [];\n                this.mCameras = [];\n                this.nodeToBoneMap = {};\n                this.findNode = function (name, root) {\n                    if (!root) {\n                        root = this.mRootNode;\n                    }\n                    if (root.mName == name) {\n                        return root;\n                    }\n                    for (var i = 0; i < root.mChildren.length; i++) {\n                        var ret = this.findNode(name, root.mChildren[i]);\n                        if (ret)\n                            return ret;\n                    }\n                    return null;\n                };\n                this.toTHREE = function () {\n                    this.nodeCount = 0;\n                    markBones(this);\n                    var o = this.mRootNode.toTHREE(this);\n                    for (var i in this.mMeshes)\n                        this.mMeshes[i].hookupSkeletons(this);\n                    if (this.mAnimations.length > 0) {\n                        var a = this.mAnimations[0].toTHREE(this);\n                    }\n                    return {\n                        object: o,\n                        animation: a\n                    };\n                };\n            }\n            function aiMatrix4() {\n                this.elements = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                this.toTHREE = function () {\n                    var m = new THREE.Matrix4();\n                    for (var i = 0; i < 4; ++i) {\n                        for (var i2 = 0; i2 < 4; ++i2) {\n                            m.elements[i * 4 + i2] = this.elements[i2][i];\n                        }\n                    }\n                    return m;\n                };\n            }\n            var littleEndian = true;\n            function readFloat(dataview) {\n                var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_double(dataview) {\n                var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n                dataview.readOffset += 8;\n                return val;\n            }\n            function Read_uint8_t(dataview) {\n                var val = dataview.getUint8(dataview.readOffset);\n                dataview.readOffset += 1;\n                return val;\n            }\n            function Read_uint16_t(dataview) {\n                var val = dataview.getUint16(dataview.readOffset, littleEndian);\n                dataview.readOffset += 2;\n                return val;\n            }\n            function Read_unsigned_int(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_uint32_t(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_aiVector3D(stream) {\n                var v = new aiVector3D();\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiColor3D(stream) {\n                var c = new aiColor3D();\n                c.r = readFloat(stream);\n                c.g = readFloat(stream);\n                c.b = readFloat(stream);\n                return c;\n            }\n            function Read_aiQuaternion(stream) {\n                var v = new aiQuaternion();\n                v.w = readFloat(stream);\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiString(stream) {\n                var s = new aiString();\n                var stringlengthbytes = Read_unsigned_int(stream);\n                stream.ReadBytes(s.data, 1, stringlengthbytes);\n                return s.toString();\n            }\n            function Read_aiVertexWeight(stream) {\n                var w = new aiVertexWeight();\n                w.mVertexId = Read_unsigned_int(stream);\n                w.mWeight = readFloat(stream);\n                return w;\n            }\n            function Read_aiMatrix4x4(stream) {\n                var m = new aiMatrix4();\n                for (var i = 0; i < 4; ++i) {\n                    for (var i2 = 0; i2 < 4; ++i2) {\n                        m.elements[i][i2] = readFloat(stream);\n                    }\n                }\n                return m;\n            }\n            function Read_aiVectorKey(stream) {\n                var v = new aiVectorKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiVector3D(stream);\n                return v;\n            }\n            function Read_aiQuatKey(stream) {\n                var v = new aiQuatKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiQuaternion(stream);\n                return v;\n            }\n            function ReadArray_aiVertexWeight(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVertexWeight(stream);\n            }\n            function ReadArray_aiVectorKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVectorKey(stream);\n            }\n            function ReadArray_aiQuatKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiQuatKey(stream);\n            }\n            function ReadBounds(stream, T, n) {\n                return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n            }\n            function ai_assert(bool) {\n                if (!bool)\n                    throw 'asset failed';\n            }\n            function ReadBinaryNode(stream, parent, depth) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n                Read_uint32_t(stream);\n                var node = new aiNode();\n                node.mParent = parent;\n                node.mDepth = depth;\n                node.mName = Read_aiString(stream);\n                node.mTransformation = Read_aiMatrix4x4(stream);\n                node.mNumChildren = Read_unsigned_int(stream);\n                node.mNumMeshes = Read_unsigned_int(stream);\n                if (node.mNumMeshes) {\n                    node.mMeshes = [];\n                    for (var i = 0; i < node.mNumMeshes; ++i) {\n                        node.mMeshes[i] = Read_unsigned_int(stream);\n                    }\n                }\n                if (node.mNumChildren) {\n                    node.mChildren = [];\n                    for (var i = 0; i < node.mNumChildren; ++i) {\n                        var node2 = ReadBinaryNode(stream, node, depth++);\n                        node.mChildren[i] = node2;\n                    }\n                }\n                return node;\n            }\n            function ReadBinaryBone(stream, b) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n                Read_uint32_t(stream);\n                b.mName = Read_aiString(stream);\n                b.mNumWeights = Read_unsigned_int(stream);\n                b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n                if (shortened) {\n                    ReadBounds(stream, b.mWeights, b.mNumWeights);\n                } else {\n                    b.mWeights = [];\n                    ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n                }\n                return b;\n            }\n            function ReadBinaryMesh(stream, mesh) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n                Read_uint32_t(stream);\n                mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n                mesh.mNumVertices = Read_unsigned_int(stream);\n                mesh.mNumFaces = Read_unsigned_int(stream);\n                mesh.mNumBones = Read_unsigned_int(stream);\n                mesh.mMaterialIndex = Read_unsigned_int(stream);\n                mesh.mNumUVComponents = [];\n                var c = Read_unsigned_int(stream);\n                if (c & ASSBIN_MESH_HAS_POSITIONS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n                    } else {\n                        mesh.mVertices = [];\n                        mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_NORMALS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n                    } else {\n                        mesh.mNormals = [];\n                        mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n                        ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n                    } else {\n                        mesh.mTangents = [];\n                        mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                        mesh.mBitangents = [];\n                        mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_COLOR(n)))\n                        break;\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mColors[n] = [];\n                        mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n                        stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n                    }\n                }\n                mesh.mTexCoordsBuffers = [];\n                for (var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))\n                        break;\n                    mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mTextureCoords[n] = [];\n                        mesh.mTexCoordsBuffers[n] = [];\n                        for (var uv = 0; uv < mesh.mNumVertices; uv++) {\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            readFloat(stream);\n                        }\n                    }\n                }\n                if (shortened) {\n                    Read_unsigned_int(stream);\n                } else {\n                    mesh.mFaces = [];\n                    mesh.mIndexArray = [];\n                    for (var i = 0; i < mesh.mNumFaces; ++i) {\n                        var f = mesh.mFaces[i] = new aiFace();\n                        f.mNumIndices = Read_uint16_t(stream);\n                        f.mIndices = [];\n                        for (var a = 0; a < f.mNumIndices; ++a) {\n                            if (mesh.mNumVertices < 1 << 16) {\n                                f.mIndices[a] = Read_uint16_t(stream);\n                            } else {\n                                f.mIndices[a] = Read_unsigned_int(stream);\n                            }\n                        }\n                        if (f.mNumIndices === 3) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                        } else if (f.mNumIndices === 4) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[3]);\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                        } else {\n                            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n                        }\n                    }\n                }\n                if (mesh.mNumBones) {\n                    mesh.mBones = [];\n                    for (var a = 0; a < mesh.mNumBones; ++a) {\n                        mesh.mBones[a] = new aiBone();\n                        ReadBinaryBone(stream, mesh.mBones[a]);\n                    }\n                }\n            }\n            function ReadBinaryMaterialProperty(stream, prop) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n                Read_uint32_t(stream);\n                prop.mKey = Read_aiString(stream);\n                prop.mSemantic = Read_unsigned_int(stream);\n                prop.mIndex = Read_unsigned_int(stream);\n                prop.mDataLength = Read_unsigned_int(stream);\n                prop.mType = Read_unsigned_int(stream);\n                prop.mData = [];\n                stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n            }\n            function ReadBinaryMaterial(stream, mat) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n                Read_uint32_t(stream);\n                mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n                if (mat.mNumProperties) {\n                    if (mat.mProperties) {\n                        delete mat.mProperties;\n                    }\n                    mat.mProperties = [];\n                    for (var i = 0; i < mat.mNumProperties; ++i) {\n                        mat.mProperties[i] = new aiMaterialProperty();\n                        ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n                    }\n                }\n            }\n            function ReadBinaryNodeAnim(stream, nd) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n                Read_uint32_t(stream);\n                nd.mNodeName = Read_aiString(stream);\n                nd.mNumPositionKeys = Read_unsigned_int(stream);\n                nd.mNumRotationKeys = Read_unsigned_int(stream);\n                nd.mNumScalingKeys = Read_unsigned_int(stream);\n                nd.mPreState = Read_unsigned_int(stream);\n                nd.mPostState = Read_unsigned_int(stream);\n                if (nd.mNumPositionKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    } else {\n                        nd.mPositionKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    }\n                }\n                if (nd.mNumRotationKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    } else {\n                        nd.mRotationKeys = [];\n                        ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    }\n                }\n                if (nd.mNumScalingKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    } else {\n                        nd.mScalingKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    }\n                }\n            }\n            function ReadBinaryAnim(stream, anim) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n                Read_uint32_t(stream);\n                anim.mName = Read_aiString(stream);\n                anim.mDuration = Read_double(stream);\n                anim.mTicksPerSecond = Read_double(stream);\n                anim.mNumChannels = Read_unsigned_int(stream);\n                if (anim.mNumChannels) {\n                    anim.mChannels = [];\n                    for (var a = 0; a < anim.mNumChannels; ++a) {\n                        anim.mChannels[a] = new aiNodeAnim();\n                        ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n                    }\n                }\n            }\n            function ReadBinaryTexture(stream, tex) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n                Read_uint32_t(stream);\n                tex.mWidth = Read_unsigned_int(stream);\n                tex.mHeight = Read_unsigned_int(stream);\n                stream.ReadBytes(tex.achFormatHint, 1, 4);\n                if (!shortened) {\n                    if (!tex.mHeight) {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n                    } else {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n                    }\n                }\n            }\n            function ReadBinaryLight(stream, l) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n                Read_uint32_t(stream);\n                l.mName = Read_aiString(stream);\n                l.mType = Read_unsigned_int(stream);\n                if (l.mType != aiLightSource_DIRECTIONAL) {\n                    l.mAttenuationConstant = readFloat(stream);\n                    l.mAttenuationLinear = readFloat(stream);\n                    l.mAttenuationQuadratic = readFloat(stream);\n                }\n                l.mColorDiffuse = Read_aiColor3D(stream);\n                l.mColorSpecular = Read_aiColor3D(stream);\n                l.mColorAmbient = Read_aiColor3D(stream);\n                if (l.mType == aiLightSource_SPOT) {\n                    l.mAngleInnerCone = readFloat(stream);\n                    l.mAngleOuterCone = readFloat(stream);\n                }\n            }\n            function ReadBinaryCamera(stream, cam) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n                Read_uint32_t(stream);\n                cam.mName = Read_aiString(stream);\n                cam.mPosition = Read_aiVector3D(stream);\n                cam.mLookAt = Read_aiVector3D(stream);\n                cam.mUp = Read_aiVector3D(stream);\n                cam.mHorizontalFOV = readFloat(stream);\n                cam.mClipPlaneNear = readFloat(stream);\n                cam.mClipPlaneFar = readFloat(stream);\n                cam.mAspect = readFloat(stream);\n            }\n            function ReadBinaryScene(stream, scene) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n                Read_uint32_t(stream);\n                scene.mFlags = Read_unsigned_int(stream);\n                scene.mNumMeshes = Read_unsigned_int(stream);\n                scene.mNumMaterials = Read_unsigned_int(stream);\n                scene.mNumAnimations = Read_unsigned_int(stream);\n                scene.mNumTextures = Read_unsigned_int(stream);\n                scene.mNumLights = Read_unsigned_int(stream);\n                scene.mNumCameras = Read_unsigned_int(stream);\n                scene.mRootNode = new aiNode();\n                scene.mRootNode = ReadBinaryNode(stream, null, 0);\n                if (scene.mNumMeshes) {\n                    scene.mMeshes = [];\n                    for (var i = 0; i < scene.mNumMeshes; ++i) {\n                        scene.mMeshes[i] = new aiMesh();\n                        ReadBinaryMesh(stream, scene.mMeshes[i]);\n                    }\n                }\n                if (scene.mNumMaterials) {\n                    scene.mMaterials = [];\n                    for (var i = 0; i < scene.mNumMaterials; ++i) {\n                        scene.mMaterials[i] = new aiMaterial();\n                        ReadBinaryMaterial(stream, scene.mMaterials[i]);\n                    }\n                }\n                if (scene.mNumAnimations) {\n                    scene.mAnimations = [];\n                    for (var i = 0; i < scene.mNumAnimations; ++i) {\n                        scene.mAnimations[i] = new aiAnimation();\n                        ReadBinaryAnim(stream, scene.mAnimations[i]);\n                    }\n                }\n                if (scene.mNumTextures) {\n                    scene.mTextures = [];\n                    for (var i = 0; i < scene.mNumTextures; ++i) {\n                        scene.mTextures[i] = new aiTexture();\n                        ReadBinaryTexture(stream, scene.mTextures[i]);\n                    }\n                }\n                if (scene.mNumLights) {\n                    scene.mLights = [];\n                    for (var i = 0; i < scene.mNumLights; ++i) {\n                        scene.mLights[i] = new aiLight();\n                        ReadBinaryLight(stream, scene.mLights[i]);\n                    }\n                }\n                if (scene.mNumCameras) {\n                    scene.mCameras = [];\n                    for (var i = 0; i < scene.mNumCameras; ++i) {\n                        scene.mCameras[i] = new aiCamera();\n                        ReadBinaryCamera(stream, scene.mCameras[i]);\n                    }\n                }\n            }\n            var aiOrigin_CUR = 0;\n            var aiOrigin_BEG = 1;\n            function extendStream(stream) {\n                stream.readOffset = 0;\n                stream.Seek = function (off, ori) {\n                    if (ori == aiOrigin_CUR) {\n                        stream.readOffset += off;\n                    }\n                    if (ori == aiOrigin_BEG) {\n                        stream.readOffset = off;\n                    }\n                };\n                stream.ReadBytes = function (buff, size, n) {\n                    var bytes = size * n;\n                    for (var i = 0; i < bytes; i++)\n                        buff[i] = Read_uint8_t(this);\n                };\n                stream.subArray32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Float32Array(newbuff);\n                };\n                stream.subArrayUint16 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint16Array(newbuff);\n                };\n                stream.subArrayUint8 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint8Array(newbuff);\n                };\n                stream.subArrayUint32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint32Array(newbuff);\n                };\n            }\n            var shortened, compressed;\n            function InternReadFile(pFiledata) {\n                var pScene = new aiScene();\n                var stream = new DataView(pFiledata);\n                extendStream(stream);\n                stream.Seek(44, aiOrigin_CUR);\n                pScene.versionMajor = Read_unsigned_int(stream);\n                pScene.versionMinor = Read_unsigned_int(stream);\n                pScene.versionRevision = Read_unsigned_int(stream);\n                pScene.compileFlags = Read_unsigned_int(stream);\n                shortened = Read_uint16_t(stream) > 0;\n                compressed = Read_uint16_t(stream) > 0;\n                if (shortened)\n                    throw 'Shortened binaries are not supported!';\n                stream.Seek(256, aiOrigin_CUR);\n                stream.Seek(128, aiOrigin_CUR);\n                stream.Seek(64, aiOrigin_CUR);\n                if (compressed) {\n                    var uncompressedSize = Read_uint32_t(stream);\n                    var compressedSize = stream.FileSize() - stream.Tell();\n                    var compressedData = [];\n                    stream.Read(compressedData, 1, compressedSize);\n                    var uncompressedData = [];\n                    uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n                    var buff = new ArrayBuffer(uncompressedData);\n                    ReadBinaryScene(buff, pScene);\n                } else {\n                    ReadBinaryScene(stream, pScene);\n                }\n                return pScene.toTHREE();\n            }\n            return InternReadFile(buffer);\n        }\n    });\n    return AssimpLoader;\n});\ndefine('skylark-threejs-ex/loaders/TGALoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TGALoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    TGALoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TGALoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var texture = new THREE.Texture();\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setResponseType('arraybuffer');\n            loader.setPath(this.path);\n            loader.load(url, function (buffer) {\n                texture.image = scope.parse(buffer);\n                texture.needsUpdate = true;\n                if (onLoad !== undefined) {\n                    onLoad(texture);\n                }\n            }, onProgress, onError);\n            return texture;\n        },\n        parse: function (buffer) {\n            function tgaCheckHeader(header) {\n                switch (header.image_type) {\n                case TGA_TYPE_INDEXED:\n                case TGA_TYPE_RLE_INDEXED:\n                    if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n                    }\n                    break;\n                case TGA_TYPE_RGB:\n                case TGA_TYPE_GREY:\n                case TGA_TYPE_RLE_RGB:\n                case TGA_TYPE_RLE_GREY:\n                    if (header.colormap_type) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n                    }\n                    break;\n                case TGA_TYPE_NO_DATA:\n                    console.error('THREE.TGALoader: No data.');\n                default:\n                    console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n                }\n                if (header.width <= 0 || header.height <= 0) {\n                    console.error('THREE.TGALoader: Invalid image size.');\n                }\n                if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n                    console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n                }\n            }\n            function tgaParse(use_rle, use_pal, header, offset, data) {\n                var pixel_data, pixel_size, pixel_total, palettes;\n                pixel_size = header.pixel_size >> 3;\n                pixel_total = header.width * header.height * pixel_size;\n                if (use_pal) {\n                    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n                }\n                if (use_rle) {\n                    pixel_data = new Uint8Array(pixel_total);\n                    var c, count, i;\n                    var shift = 0;\n                    var pixels = new Uint8Array(pixel_size);\n                    while (shift < pixel_total) {\n                        c = data[offset++];\n                        count = (c & 127) + 1;\n                        if (c & 128) {\n                            for (i = 0; i < pixel_size; ++i) {\n                                pixels[i] = data[offset++];\n                            }\n                            for (i = 0; i < count; ++i) {\n                                pixel_data.set(pixels, shift + i * pixel_size);\n                            }\n                            shift += pixel_size * count;\n                        } else {\n                            count *= pixel_size;\n                            for (i = 0; i < count; ++i) {\n                                pixel_data[shift + i] = data[offset++];\n                            }\n                            shift += count;\n                        }\n                    }\n                } else {\n                    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n                }\n                return {\n                    pixel_data: pixel_data,\n                    palettes: palettes\n                };\n            }\n            function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n                var colormap = palettes;\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n                        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n                        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        color = image[i + 0] + (image[i + 1] << 8);\n                        imageData[(x + width * y) * 4 + 0] = (color & 31744) >> 7;\n                        imageData[(x + width * y) * 4 + 1] = (color & 992) >> 2;\n                        imageData[(x + width * y) * 4 + 2] = (color & 31) >> 3;\n                        imageData[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 3) {\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 4) {\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 3];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 0] = color;\n                        imageData[(x + width * y) * 4 + 1] = color;\n                        imageData[(x + width * y) * 4 + 2] = color;\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        imageData[(x + width * y) * 4 + 0] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 1];\n                    }\n                }\n                return imageData;\n            }\n            function getTgaRGBA(data, width, height, image, palette) {\n                var x_start, y_start, x_step, y_step, x_end, y_end;\n                switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n                default:\n                case TGA_ORIGIN_UL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                case TGA_ORIGIN_UR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                }\n                if (use_grey) {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 16:\n                        tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                } else {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n                        break;\n                    case 16:\n                        tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 24:\n                        tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 32:\n                        tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                }\n                return data;\n            }\n            var TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;\n            if (buffer.length < 19)\n                console.error('THREE.TGALoader: Not enough data to contain header.');\n            var content = new Uint8Array(buffer), offset = 0, header = {\n                    id_length: content[offset++],\n                    colormap_type: content[offset++],\n                    image_type: content[offset++],\n                    colormap_index: content[offset++] | content[offset++] << 8,\n                    colormap_length: content[offset++] | content[offset++] << 8,\n                    colormap_size: content[offset++],\n                    origin: [\n                        content[offset++] | content[offset++] << 8,\n                        content[offset++] | content[offset++] << 8\n                    ],\n                    width: content[offset++] | content[offset++] << 8,\n                    height: content[offset++] | content[offset++] << 8,\n                    pixel_size: content[offset++],\n                    flags: content[offset++]\n                };\n            tgaCheckHeader(header);\n            if (header.id_length + offset > buffer.length) {\n                console.error('THREE.TGALoader: No data.');\n            }\n            offset += header.id_length;\n            var use_rle = false, use_pal = false, use_grey = false;\n            switch (header.image_type) {\n            case TGA_TYPE_RLE_INDEXED:\n                use_rle = true;\n                use_pal = true;\n                break;\n            case TGA_TYPE_INDEXED:\n                use_pal = true;\n                break;\n            case TGA_TYPE_RLE_RGB:\n                use_rle = true;\n                break;\n            case TGA_TYPE_RGB:\n                break;\n            case TGA_TYPE_RLE_GREY:\n                use_rle = true;\n                use_grey = true;\n                break;\n            case TGA_TYPE_GREY:\n                use_grey = true;\n                break;\n            }\n            var useOffscreen = typeof OffscreenCanvas !== 'undefined';\n            var canvas = useOffscreen ? new OffscreenCanvas(header.width, header.height) : document.createElement('canvas');\n            canvas.width = header.width;\n            canvas.height = header.height;\n            var context = canvas.getContext('2d');\n            var imageData = context.createImageData(header.width, header.height);\n            var result = tgaParse(use_rle, use_pal, header, offset, content);\n            var rgbaData = getTgaRGBA(imageData.data, header.width, header.height, result.pixel_data, result.palettes);\n            context.putImageData(imageData, 0, 0);\n            return useOffscreen ? canvas.transferToImageBitmap() : canvas;\n        }\n    });\n    return  TGALoader;\n});\ndefine('skylark-threejs-ex/loaders/ColladaLoader',[\n    \"skylark-threejs\",\n    '../loaders/TGALoader'\n], function (THREE, TGALoader) {\n    'use strict';\n    var ColladaLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    ColladaLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ColladaLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        options: {\n            set convertUpAxis(value) {\n                console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n            }\n        },\n        parse: function (text, path) {\n            function getElementsByTagName(xml, name) {\n                var array = [];\n                var childNodes = xml.childNodes;\n                for (var i = 0, l = childNodes.length; i < l; i++) {\n                    var child = childNodes[i];\n                    if (child.nodeName === name) {\n                        array.push(child);\n                    }\n                }\n                return array;\n            }\n            function parseStrings(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parts[i];\n                }\n                return array;\n            }\n            function parseFloats(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseFloat(parts[i]);\n                }\n                return array;\n            }\n            function parseInts(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseInt(parts[i]);\n                }\n                return array;\n            }\n            function parseId(text) {\n                return text.substring(1);\n            }\n            function generateId() {\n                return 'three_default_' + count++;\n            }\n            function isEmpty(object) {\n                return Object.keys(object).length === 0;\n            }\n            function parseAsset(xml) {\n                return {\n                    unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n                    upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n                };\n            }\n            function parseAssetUnit(xml) {\n                if (xml !== undefined && xml.hasAttribute('meter') === true) {\n                    return parseFloat(xml.getAttribute('meter'));\n                } else {\n                    return 1;\n                }\n            }\n            function parseAssetUpAxis(xml) {\n                return xml !== undefined ? xml.textContent : 'Y_UP';\n            }\n            function parseLibrary(xml, libraryName, nodeName, parser) {\n                var library = getElementsByTagName(xml, libraryName)[0];\n                if (library !== undefined) {\n                    var elements = getElementsByTagName(library, nodeName);\n                    for (var i = 0; i < elements.length; i++) {\n                        parser(elements[i]);\n                    }\n                }\n            }\n            function buildLibrary(data, builder) {\n                for (var name in data) {\n                    var object = data[name];\n                    object.build = builder(data[name]);\n                }\n            }\n            function getBuild(data, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data);\n                return data.build;\n            }\n            function parseAnimation(xml) {\n                var data = {\n                    sources: {},\n                    samplers: {},\n                    channels: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id;\n                    switch (child.nodeName) {\n                    case 'source':\n                        id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'sampler':\n                        id = child.getAttribute('id');\n                        data.samplers[id] = parseAnimationSampler(child);\n                        break;\n                    case 'channel':\n                        id = child.getAttribute('target');\n                        data.channels[id] = parseAnimationChannel(child);\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.animations[xml.getAttribute('id')] = data;\n            }\n            function parseAnimationSampler(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseAnimationChannel(xml) {\n                var data = {};\n                var target = xml.getAttribute('target');\n                var parts = target.split('/');\n                var id = parts.shift();\n                var sid = parts.shift();\n                var arraySyntax = sid.indexOf('(') !== -1;\n                var memberSyntax = sid.indexOf('.') !== -1;\n                if (memberSyntax) {\n                    parts = sid.split('.');\n                    sid = parts.shift();\n                    data.member = parts.shift();\n                } else if (arraySyntax) {\n                    var indices = sid.split('(');\n                    sid = indices.shift();\n                    for (var i = 0; i < indices.length; i++) {\n                        indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n                    }\n                    data.indices = indices;\n                }\n                data.id = id;\n                data.sid = sid;\n                data.arraySyntax = arraySyntax;\n                data.memberSyntax = memberSyntax;\n                data.sampler = parseId(xml.getAttribute('source'));\n                return data;\n            }\n            function buildAnimation(data) {\n                var tracks = [];\n                var channels = data.channels;\n                var samplers = data.samplers;\n                var sources = data.sources;\n                for (var target in channels) {\n                    if (channels.hasOwnProperty(target)) {\n                        var channel = channels[target];\n                        var sampler = samplers[channel.sampler];\n                        var inputId = sampler.inputs.INPUT;\n                        var outputId = sampler.inputs.OUTPUT;\n                        var inputSource = sources[inputId];\n                        var outputSource = sources[outputId];\n                        var animation = buildAnimationChannel(channel, inputSource, outputSource);\n                        createKeyframeTracks(animation, tracks);\n                    }\n                }\n                return tracks;\n            }\n            function getAnimation(id) {\n                return getBuild(library.animations[id], buildAnimation);\n            }\n            function buildAnimationChannel(channel, inputSource, outputSource) {\n                var node = library.nodes[channel.id];\n                var object3D = getNode(node.id);\n                var transform = node.transforms[channel.sid];\n                var defaultMatrix = node.matrix.clone().transpose();\n                var time, stride;\n                var i, il, j, jl;\n                var data = {};\n                switch (transform) {\n                case 'matrix':\n                    for (i = 0, il = inputSource.array.length; i < il; i++) {\n                        time = inputSource.array[i];\n                        stride = i * outputSource.stride;\n                        if (data[time] === undefined)\n                            data[time] = {};\n                        if (channel.arraySyntax === true) {\n                            var value = outputSource.array[stride];\n                            var index = channel.indices[0] + 4 * channel.indices[1];\n                            data[time][index] = value;\n                        } else {\n                            for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                                data[time][j] = outputSource.array[stride + j];\n                            }\n                        }\n                    }\n                    break;\n                case 'translate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'rotate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'scale':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                }\n                var keyframes = prepareAnimationData(data, defaultMatrix);\n                var animation = {\n                    name: object3D.uuid,\n                    keyframes: keyframes\n                };\n                return animation;\n            }\n            function prepareAnimationData(data, defaultMatrix) {\n                var keyframes = [];\n                for (var time in data) {\n                    keyframes.push({\n                        time: parseFloat(time),\n                        value: data[time]\n                    });\n                }\n                keyframes.sort(ascending);\n                for (var i = 0; i < 16; i++) {\n                    transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n                }\n                return keyframes;\n                function ascending(a, b) {\n                    return a.time - b.time;\n                }\n            }\n            var position = new THREE.Vector3();\n            var scale = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            function createKeyframeTracks(animation, tracks) {\n                var keyframes = animation.keyframes;\n                var name = animation.name;\n                var times = [];\n                var positionData = [];\n                var quaternionData = [];\n                var scaleData = [];\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    var time = keyframe.time;\n                    var value = keyframe.value;\n                    matrix.fromArray(value).transpose();\n                    matrix.decompose(position, quaternion, scale);\n                    times.push(time);\n                    positionData.push(position.x, position.y, position.z);\n                    quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n                    scaleData.push(scale.x, scale.y, scale.z);\n                }\n                if (positionData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));\n                if (quaternionData.length > 0)\n                    tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n                if (scaleData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));\n                return tracks;\n            }\n            function transformAnimationData(keyframes, property, defaultValue) {\n                var keyframe;\n                var empty = true;\n                var i, l;\n                for (i = 0, l = keyframes.length; i < l; i++) {\n                    keyframe = keyframes[i];\n                    if (keyframe.value[property] === undefined) {\n                        keyframe.value[property] = null;\n                    } else {\n                        empty = false;\n                    }\n                }\n                if (empty === true) {\n                    for (i = 0, l = keyframes.length; i < l; i++) {\n                        keyframe = keyframes[i];\n                        keyframe.value[property] = defaultValue;\n                    }\n                } else {\n                    createMissingKeyframes(keyframes, property);\n                }\n            }\n            function createMissingKeyframes(keyframes, property) {\n                var prev, next;\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] === null) {\n                        prev = getPrev(keyframes, i, property);\n                        next = getNext(keyframes, i, property);\n                        if (prev === null) {\n                            keyframe.value[property] = next.value[property];\n                            continue;\n                        }\n                        if (next === null) {\n                            keyframe.value[property] = prev.value[property];\n                            continue;\n                        }\n                        interpolate(keyframe, prev, next, property);\n                    }\n                }\n            }\n            function getPrev(keyframes, i, property) {\n                while (i >= 0) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i--;\n                }\n                return null;\n            }\n            function getNext(keyframes, i, property) {\n                while (i < keyframes.length) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i++;\n                }\n                return null;\n            }\n            function interpolate(key, prev, next, property) {\n                if (next.time - prev.time === 0) {\n                    key.value[property] = prev.value[property];\n                    return;\n                }\n                key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n            }\n            function parseAnimationClip(xml) {\n                var data = {\n                    name: xml.getAttribute('id') || 'default',\n                    start: parseFloat(xml.getAttribute('start') || 0),\n                    end: parseFloat(xml.getAttribute('end') || 0),\n                    animations: []\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_animation':\n                        data.animations.push(parseId(child.getAttribute('url')));\n                        break;\n                    }\n                }\n                library.clips[xml.getAttribute('id')] = data;\n            }\n            function buildAnimationClip(data) {\n                var tracks = [];\n                var name = data.name;\n                var duration = data.end - data.start || -1;\n                var animations = data.animations;\n                for (var i = 0, il = animations.length; i < il; i++) {\n                    var animationTracks = getAnimation(animations[i]);\n                    for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n                        tracks.push(animationTracks[j]);\n                    }\n                }\n                return new THREE.AnimationClip(name, duration, tracks);\n            }\n            function getAnimationClip(id) {\n                return getBuild(library.clips[id], buildAnimationClip);\n            }\n            function parseController(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'skin':\n                        data.id = parseId(child.getAttribute('source'));\n                        data.skin = parseSkin(child);\n                        break;\n                    case 'morph':\n                        data.id = parseId(child.getAttribute('source'));\n                        console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n                        break;\n                    }\n                }\n                library.controllers[xml.getAttribute('id')] = data;\n            }\n            function parseSkin(xml) {\n                var data = { sources: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_shape_matrix':\n                        data.bindShapeMatrix = parseFloats(child.textContent);\n                        break;\n                    case 'source':\n                        var id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'joints':\n                        data.joints = parseJoints(child);\n                        break;\n                    case 'vertex_weights':\n                        data.vertexWeights = parseVertexWeights(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseJoints(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseVertexWeights(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        var offset = parseInt(child.getAttribute('offset'));\n                        data.inputs[semantic] = {\n                            id: id,\n                            offset: offset\n                        };\n                        break;\n                    case 'vcount':\n                        data.vcount = parseInts(child.textContent);\n                        break;\n                    case 'v':\n                        data.v = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildController(data) {\n                var build = { id: data.id };\n                var geometry = library.geometries[build.id];\n                if (data.skin !== undefined) {\n                    build.skin = buildSkin(data.skin);\n                    geometry.sources.skinIndices = build.skin.indices;\n                    geometry.sources.skinWeights = build.skin.weights;\n                }\n                return build;\n            }\n            function buildSkin(data) {\n                var BONE_LIMIT = 4;\n                var build = {\n                    joints: [],\n                    indices: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    },\n                    weights: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    }\n                };\n                var sources = data.sources;\n                var vertexWeights = data.vertexWeights;\n                var vcount = vertexWeights.vcount;\n                var v = vertexWeights.v;\n                var jointOffset = vertexWeights.inputs.JOINT.offset;\n                var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n                var jointSource = data.sources[data.joints.inputs.JOINT];\n                var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n                var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n                var stride = 0;\n                var i, j, l;\n                for (i = 0, l = vcount.length; i < l; i++) {\n                    var jointCount = vcount[i];\n                    var vertexSkinData = [];\n                    for (j = 0; j < jointCount; j++) {\n                        var skinIndex = v[stride + jointOffset];\n                        var weightId = v[stride + weightOffset];\n                        var skinWeight = weights[weightId];\n                        vertexSkinData.push({\n                            index: skinIndex,\n                            weight: skinWeight\n                        });\n                        stride += 2;\n                    }\n                    vertexSkinData.sort(descending);\n                    for (j = 0; j < BONE_LIMIT; j++) {\n                        var d = vertexSkinData[j];\n                        if (d !== undefined) {\n                            build.indices.array.push(d.index);\n                            build.weights.array.push(d.weight);\n                        } else {\n                            build.indices.array.push(0);\n                            build.weights.array.push(0);\n                        }\n                    }\n                }\n                if (data.bindShapeMatrix) {\n                    build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();\n                } else {\n                    build.bindMatrix = new THREE.Matrix4().identity();\n                }\n                for (i = 0, l = jointSource.array.length; i < l; i++) {\n                    var name = jointSource.array[i];\n                    var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n                    build.joints.push({\n                        name: name,\n                        boneInverse: boneInverse\n                    });\n                }\n                return build;\n                function descending(a, b) {\n                    return b.weight - a.weight;\n                }\n            }\n            function getController(id) {\n                return getBuild(library.controllers[id], buildController);\n            }\n            function parseImage(xml) {\n                var data = { init_from: getElementsByTagName(xml, 'init_from')[0].textContent };\n                library.images[xml.getAttribute('id')] = data;\n            }\n            function buildImage(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data.init_from;\n            }\n            function getImage(id) {\n                var data = library.images[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildImage);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n                return null;\n            }\n            function parseEffect(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'profile_COMMON':\n                        data.profile = parseEffectProfileCOMMON(child);\n                        break;\n                    }\n                }\n                library.effects[xml.getAttribute('id')] = data;\n            }\n            function parseEffectProfileCOMMON(xml) {\n                var data = {\n                    surfaces: {},\n                    samplers: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'newparam':\n                        parseEffectNewparam(child, data);\n                        break;\n                    case 'technique':\n                        data.technique = parseEffectTechnique(child);\n                        break;\n                    case 'extra':\n                        data.extra = parseEffectExtra(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectNewparam(xml, data) {\n                var sid = xml.getAttribute('sid');\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'surface':\n                        data.surfaces[sid] = parseEffectSurface(child);\n                        break;\n                    case 'sampler2D':\n                        data.samplers[sid] = parseEffectSampler(child);\n                        break;\n                    }\n                }\n            }\n            function parseEffectSurface(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'init_from':\n                        data.init_from = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectSampler(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.source = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'constant':\n                    case 'lambert':\n                    case 'blinn':\n                    case 'phong':\n                        data.type = child.nodeName;\n                        data.parameters = parseEffectParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'emission':\n                    case 'diffuse':\n                    case 'specular':\n                    case 'bump':\n                    case 'ambient':\n                    case 'shininess':\n                    case 'transparency':\n                        data[child.nodeName] = parseEffectParameter(child);\n                        break;\n                    case 'transparent':\n                        data[child.nodeName] = {\n                            opaque: child.getAttribute('opaque'),\n                            data: parseEffectParameter(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameter(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        data[child.nodeName] = parseFloats(child.textContent);\n                        break;\n                    case 'float':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'texture':\n                        data[child.nodeName] = {\n                            id: child.getAttribute('texture'),\n                            extra: parseEffectParameterTexture(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTexture(xml) {\n                var data = { technique: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'extra':\n                        parseEffectParameterTextureExtra(child, data);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTextureExtra(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        parseEffectParameterTextureExtraTechnique(child, data);\n                        break;\n                    }\n                }\n            }\n            function parseEffectParameterTextureExtraTechnique(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'repeatU':\n                    case 'repeatV':\n                    case 'offsetU':\n                    case 'offsetV':\n                        data.technique[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'wrapU':\n                    case 'wrapV':\n                        if (child.textContent.toUpperCase() === 'TRUE') {\n                            data.technique[child.nodeName] = 1;\n                        } else if (child.textContent.toUpperCase() === 'FALSE') {\n                            data.technique[child.nodeName] = 0;\n                        } else {\n                            data.technique[child.nodeName] = parseInt(child.textContent);\n                        }\n                        break;\n                    }\n                }\n            }\n            function parseEffectExtra(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        data.technique = parseEffectExtraTechnique(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectExtraTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'double_sided':\n                        data[child.nodeName] = parseInt(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildEffect(data) {\n                return data;\n            }\n            function getEffect(id) {\n                return getBuild(library.effects[id], buildEffect);\n            }\n            function parseMaterial(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_effect':\n                        data.url = parseId(child.getAttribute('url'));\n                        break;\n                    }\n                }\n                library.materials[xml.getAttribute('id')] = data;\n            }\n            function getTextureLoader(image) {\n                var loader;\n                var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2);\n                extension = extension.toLowerCase();\n                switch (extension) {\n                case 'tga':\n                    loader = tgaLoader;\n                    break;\n                default:\n                    loader = textureLoader;\n                }\n                return loader;\n            }\n            function buildMaterial(data) {\n                var effect = getEffect(data.url);\n                var technique = effect.profile.technique;\n                var extra = effect.profile.extra;\n                var material;\n                switch (technique.type) {\n                case 'phong':\n                case 'blinn':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    material = new THREE.MeshBasicMaterial();\n                    break;\n                }\n                material.name = data.name || '';\n                function getTexture(textureObject) {\n                    var sampler = effect.profile.samplers[textureObject.id];\n                    var image = null;\n                    if (sampler !== undefined) {\n                        var surface = effect.profile.surfaces[sampler.source];\n                        image = getImage(surface.init_from);\n                    } else {\n                        console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n                        image = getImage(textureObject.id);\n                    }\n                    if (image !== null) {\n                        var loader = getTextureLoader(image);\n                        if (loader !== undefined) {\n                            var texture = loader.load(image);\n                            var extra = textureObject.extra;\n                            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n                                var technique = extra.technique;\n                                texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n                                texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n                            } else {\n                                texture.wrapS = THREE.RepeatWrapping;\n                                texture.wrapT = THREE.RepeatWrapping;\n                            }\n                            return texture;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n                            return null;\n                        }\n                    } else {\n                        console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n                        return null;\n                    }\n                }\n                var parameters = technique.parameters;\n                for (var key in parameters) {\n                    var parameter = parameters[key];\n                    switch (key) {\n                    case 'diffuse':\n                        if (parameter.color)\n                            material.color.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.map = getTexture(parameter.texture);\n                        break;\n                    case 'specular':\n                        if (parameter.color && material.specular)\n                            material.specular.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.specularMap = getTexture(parameter.texture);\n                        break;\n                    case 'bump':\n                        if (parameter.texture)\n                            material.normalMap = getTexture(parameter.texture);\n                        break;\n                    case 'ambient':\n                        if (parameter.texture)\n                            material.lightMap = getTexture(parameter.texture);\n                        break;\n                    case 'shininess':\n                        if (parameter.float && material.shininess)\n                            material.shininess = parameter.float;\n                        break;\n                    case 'emission':\n                        if (parameter.color && material.emissive)\n                            material.emissive.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.emissiveMap = getTexture(parameter.texture);\n                        break;\n                    }\n                }\n                var transparent = parameters['transparent'];\n                var transparency = parameters['transparency'];\n                if (transparency === undefined && transparent) {\n                    transparency = { float: 1 };\n                }\n                if (transparent === undefined && transparency) {\n                    transparent = {\n                        opaque: 'A_ONE',\n                        data: {\n                            color: [\n                                1,\n                                1,\n                                1,\n                                1\n                            ]\n                        }\n                    };\n                }\n                if (transparent && transparency) {\n                    if (transparent.data.texture) {\n                        material.transparent = true;\n                    } else {\n                        var color = transparent.data.color;\n                        switch (transparent.opaque) {\n                        case 'A_ONE':\n                            material.opacity = color[3] * transparency.float;\n                            break;\n                        case 'RGB_ZERO':\n                            material.opacity = 1 - color[0] * transparency.float;\n                            break;\n                        case 'A_ZERO':\n                            material.opacity = 1 - color[3] * transparency.float;\n                            break;\n                        case 'RGB_ONE':\n                            material.opacity = color[0] * transparency.float;\n                            break;\n                        default:\n                            console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n                        }\n                        if (material.opacity < 1)\n                            material.transparent = true;\n                    }\n                }\n                if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n                    material.side = THREE.DoubleSide;\n                }\n                return material;\n            }\n            function getMaterial(id) {\n                return getBuild(library.materials[id], buildMaterial);\n            }\n            function parseCamera(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'optics':\n                        data.optics = parseCameraOptics(child);\n                        break;\n                    }\n                }\n                library.cameras[xml.getAttribute('id')] = data;\n            }\n            function parseCameraOptics(xml) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        return parseCameraTechnique(child);\n                    }\n                }\n                return {};\n            }\n            function parseCameraTechnique(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'perspective':\n                    case 'orthographic':\n                        data.technique = child.nodeName;\n                        data.parameters = parseCameraParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseCameraParameters(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'xfov':\n                    case 'yfov':\n                    case 'xmag':\n                    case 'ymag':\n                    case 'znear':\n                    case 'zfar':\n                    case 'aspect_ratio':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildCamera(data) {\n                var camera;\n                switch (data.optics.technique) {\n                case 'perspective':\n                    camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                case 'orthographic':\n                    var ymag = data.optics.parameters.ymag;\n                    var xmag = data.optics.parameters.xmag;\n                    var aspectRatio = data.optics.parameters.aspect_ratio;\n                    xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n                    ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n                    xmag *= 0.5;\n                    ymag *= 0.5;\n                    camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                default:\n                    camera = new THREE.PerspectiveCamera();\n                    break;\n                }\n                camera.name = data.name || '';\n                return camera;\n            }\n            function getCamera(id) {\n                var data = library.cameras[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildCamera);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n                return null;\n            }\n            function parseLight(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        data = parseLightTechnique(child);\n                        break;\n                    }\n                }\n                library.lights[xml.getAttribute('id')] = data;\n            }\n            function parseLightTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'directional':\n                    case 'point':\n                    case 'spot':\n                    case 'ambient':\n                        data.technique = child.nodeName;\n                        data.parameters = parseLightParameters(child);\n                    }\n                }\n                return data;\n            }\n            function parseLightParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        var array = parseFloats(child.textContent);\n                        data.color = new THREE.Color().fromArray(array);\n                        break;\n                    case 'falloff_angle':\n                        data.falloffAngle = parseFloat(child.textContent);\n                        break;\n                    case 'quadratic_attenuation':\n                        var f = parseFloat(child.textContent);\n                        data.distance = f ? Math.sqrt(1 / f) : 0;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildLight(data) {\n                var light;\n                switch (data.technique) {\n                case 'directional':\n                    light = new THREE.DirectionalLight();\n                    break;\n                case 'point':\n                    light = new THREE.PointLight();\n                    break;\n                case 'spot':\n                    light = new THREE.SpotLight();\n                    break;\n                case 'ambient':\n                    light = new THREE.AmbientLight();\n                    break;\n                }\n                if (data.parameters.color)\n                    light.color.copy(data.parameters.color);\n                if (data.parameters.distance)\n                    light.distance = data.parameters.distance;\n                return light;\n            }\n            function getLight(id) {\n                var data = library.lights[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildLight);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n                return null;\n            }\n            function parseGeometry(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    sources: {},\n                    vertices: {},\n                    primitives: []\n                };\n                var mesh = getElementsByTagName(xml, 'mesh')[0];\n                if (mesh === undefined)\n                    return;\n                for (var i = 0; i < mesh.childNodes.length; i++) {\n                    var child = mesh.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id = child.getAttribute('id');\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'vertices':\n                        data.vertices = parseGeometryVertices(child);\n                        break;\n                    case 'polygons':\n                        console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n                        break;\n                    case 'lines':\n                    case 'linestrips':\n                    case 'polylist':\n                    case 'triangles':\n                        data.primitives.push(parseGeometryPrimitive(child));\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.geometries[xml.getAttribute('id')] = data;\n            }\n            function parseSource(xml) {\n                var data = {\n                    array: [],\n                    stride: 3\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'float_array':\n                        data.array = parseFloats(child.textContent);\n                        break;\n                    case 'Name_array':\n                        data.array = parseStrings(child.textContent);\n                        break;\n                    case 'technique_common':\n                        var accessor = getElementsByTagName(child, 'accessor')[0];\n                        if (accessor !== undefined) {\n                            data.stride = parseInt(accessor.getAttribute('stride'));\n                        }\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseGeometryVertices(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n                }\n                return data;\n            }\n            function parseGeometryPrimitive(xml) {\n                var primitive = {\n                    type: xml.nodeName,\n                    material: xml.getAttribute('material'),\n                    count: parseInt(xml.getAttribute('count')),\n                    inputs: {},\n                    stride: 0,\n                    hasUV: false\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        var offset = parseInt(child.getAttribute('offset'));\n                        var set = parseInt(child.getAttribute('set'));\n                        var inputname = set > 0 ? semantic + set : semantic;\n                        primitive.inputs[inputname] = {\n                            id: id,\n                            offset: offset\n                        };\n                        primitive.stride = Math.max(primitive.stride, offset + 1);\n                        if (semantic === 'TEXCOORD')\n                            primitive.hasUV = true;\n                        break;\n                    case 'vcount':\n                        primitive.vcount = parseInts(child.textContent);\n                        break;\n                    case 'p':\n                        primitive.p = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return primitive;\n            }\n            function groupPrimitives(primitives) {\n                var build = {};\n                for (var i = 0; i < primitives.length; i++) {\n                    var primitive = primitives[i];\n                    if (build[primitive.type] === undefined)\n                        build[primitive.type] = [];\n                    build[primitive.type].push(primitive);\n                }\n                return build;\n            }\n            function checkUVCoordinates(primitives) {\n                var count = 0;\n                for (var i = 0, l = primitives.length; i < l; i++) {\n                    var primitive = primitives[i];\n                    if (primitive.hasUV === true) {\n                        count++;\n                    }\n                }\n                if (count > 0 && count < primitives.length) {\n                    primitives.uvsNeedsFix = true;\n                }\n            }\n            function buildGeometry(data) {\n                var build = {};\n                var sources = data.sources;\n                var vertices = data.vertices;\n                var primitives = data.primitives;\n                if (primitives.length === 0)\n                    return {};\n                var groupedPrimitives = groupPrimitives(primitives);\n                for (var type in groupedPrimitives) {\n                    var primitiveType = groupedPrimitives[type];\n                    checkUVCoordinates(primitiveType);\n                    build[type] = buildGeometryType(primitiveType, sources, vertices);\n                }\n                return build;\n            }\n            function buildGeometryType(primitives, sources, vertices) {\n                var build = {};\n                var position = {\n                    array: [],\n                    stride: 0\n                };\n                var normal = {\n                    array: [],\n                    stride: 0\n                };\n                var uv = {\n                    array: [],\n                    stride: 0\n                };\n                var uv2 = {\n                    array: [],\n                    stride: 0\n                };\n                var color = {\n                    array: [],\n                    stride: 0\n                };\n                var skinIndex = {\n                    array: [],\n                    stride: 4\n                };\n                var skinWeight = {\n                    array: [],\n                    stride: 4\n                };\n                var geometry = new THREE.BufferGeometry();\n                var materialKeys = [];\n                var start = 0;\n                for (var p = 0; p < primitives.length; p++) {\n                    var primitive = primitives[p];\n                    var inputs = primitive.inputs;\n                    var count = 0;\n                    switch (primitive.type) {\n                    case 'lines':\n                    case 'linestrips':\n                        count = primitive.count * 2;\n                        break;\n                    case 'triangles':\n                        count = primitive.count * 3;\n                        break;\n                    case 'polylist':\n                        for (var g = 0; g < primitive.count; g++) {\n                            var vc = primitive.vcount[g];\n                            switch (vc) {\n                            case 3:\n                                count += 3;\n                                break;\n                            case 4:\n                                count += 6;\n                                break;\n                            default:\n                                count += (vc - 2) * 3;\n                                break;\n                            }\n                        }\n                        break;\n                    default:\n                        console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n                    }\n                    geometry.addGroup(start, count, p);\n                    start += count;\n                    if (primitive.material) {\n                        materialKeys.push(primitive.material);\n                    }\n                    for (var name in inputs) {\n                        var input = inputs[name];\n                        switch (name) {\n                        case 'VERTEX':\n                            for (var key in vertices) {\n                                var id = vertices[key];\n                                switch (key) {\n                                case 'POSITION':\n                                    var prevLength = position.array.length;\n                                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                                    position.stride = sources[id].stride;\n                                    if (sources.skinWeights && sources.skinIndices) {\n                                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                                    }\n                                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                                        var count = (position.array.length - prevLength) / position.stride;\n                                        for (var i = 0; i < count; i++) {\n                                            uv.array.push(0, 0);\n                                        }\n                                    }\n                                    break;\n                                case 'NORMAL':\n                                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                                    normal.stride = sources[id].stride;\n                                    break;\n                                case 'COLOR':\n                                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                                    color.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD1':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                default:\n                                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                                }\n                            }\n                            break;\n                        case 'NORMAL':\n                            buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n                            normal.stride = sources[input.id].stride;\n                            break;\n                        case 'COLOR':\n                            buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n                            color.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n                            uv.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD1':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n                            uv2.stride = sources[input.id].stride;\n                            break;\n                        }\n                    }\n                }\n                if (position.array.length > 0)\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));\n                if (normal.array.length > 0)\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));\n                if (color.array.length > 0)\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));\n                if (uv.array.length > 0)\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));\n                if (uv2.array.length > 0)\n                    geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));\n                if (skinIndex.array.length > 0)\n                    geometry.setAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n                if (skinWeight.array.length > 0)\n                    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n                build.data = geometry;\n                build.type = primitives[0].type;\n                build.materialKeys = materialKeys;\n                return build;\n            }\n            function buildGeometryData(primitive, source, offset, array) {\n                var indices = primitive.p;\n                var stride = primitive.stride;\n                var vcount = primitive.vcount;\n                function pushVector(i) {\n                    var index = indices[i + offset] * sourceStride;\n                    var length = index + sourceStride;\n                    for (; index < length; index++) {\n                        array.push(sourceArray[index]);\n                    }\n                }\n                var sourceArray = source.array;\n                var sourceStride = source.stride;\n                if (primitive.vcount !== undefined) {\n                    var index = 0;\n                    for (var i = 0, l = vcount.length; i < l; i++) {\n                        var count = vcount[i];\n                        if (count === 4) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            var d = index + stride * 3;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(d);\n                            pushVector(b);\n                            pushVector(c);\n                            pushVector(d);\n                        } else if (count === 3) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(c);\n                        } else if (count > 4) {\n                            for (var k = 1, kl = count - 2; k <= kl; k++) {\n                                var a = index + stride * 0;\n                                var b = index + stride * k;\n                                var c = index + stride * (k + 1);\n                                pushVector(a);\n                                pushVector(b);\n                                pushVector(c);\n                            }\n                        }\n                        index += stride * count;\n                    }\n                } else {\n                    for (var i = 0, l = indices.length; i < l; i += stride) {\n                        pushVector(i);\n                    }\n                }\n            }\n            function getGeometry(id) {\n                return getBuild(library.geometries[id], buildGeometry);\n            }\n            function parseKinematicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    joints: {},\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parseKinematicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n                library.kinematicsModels[xml.getAttribute('id')] = data;\n            }\n            function buildKinematicsModel(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsModel(id) {\n                return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n            }\n            function parseKinematicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'joint':\n                        data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n                        break;\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsJoint(xml) {\n                var data;\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'prismatic':\n                    case 'revolute':\n                        data = parseKinematicsJointParameter(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsJointParameter(xml, data) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    axis: new THREE.Vector3(),\n                    limits: {\n                        min: 0,\n                        max: 0\n                    },\n                    type: xml.nodeName,\n                    static: false,\n                    zeroPosition: 0,\n                    middlePosition: 0\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var array = parseFloats(child.textContent);\n                        data.axis.fromArray(array);\n                        break;\n                    case 'limits':\n                        var max = child.getElementsByTagName('max')[0];\n                        var min = child.getElementsByTagName('min')[0];\n                        data.limits.max = parseFloat(max.textContent);\n                        data.limits.min = parseFloat(min.textContent);\n                        break;\n                    }\n                }\n                if (data.limits.min >= data.limits.max) {\n                    data.static = true;\n                }\n                data.middlePosition = (data.limits.min + data.limits.max) / 2;\n                return data;\n            }\n            function parseKinematicsLink(xml) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    attachments: [],\n                    transforms: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'attachment_full':\n                        data.attachments.push(parseKinematicsAttachment(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsAttachment(xml) {\n                var data = {\n                    joint: xml.getAttribute('joint').split('/').pop(),\n                    transforms: [],\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsTransform(xml) {\n                var data = { type: xml.nodeName };\n                var array = parseFloats(xml.textContent);\n                switch (data.type) {\n                case 'matrix':\n                    data.obj = new THREE.Matrix4();\n                    data.obj.fromArray(array).transpose();\n                    break;\n                case 'translate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    break;\n                case 'rotate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    data.angle = THREE.MathUtils.degToRad(array[3]);\n                    break;\n                }\n                return data;\n            }\n            function parsePhysicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    rigidBodies: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'rigid_body':\n                        data.rigidBodies[child.getAttribute('name')] = {};\n                        parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n                        break;\n                    }\n                }\n                library.physicsModels[xml.getAttribute('id')] = data;\n            }\n            function parsePhysicsRigidBody(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parsePhysicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n            }\n            function parsePhysicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'inertia':\n                        data.inertia = parseFloats(child.textContent);\n                        break;\n                    case 'mass':\n                        data.mass = parseFloats(child.textContent)[0];\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsScene(xml) {\n                var data = { bindJointAxis: [] };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_joint_axis':\n                        data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n                        break;\n                    }\n                }\n                library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n            }\n            function parseKinematicsBindJointAxis(xml) {\n                var data = { target: xml.getAttribute('target').split('/').pop() };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var param = child.getElementsByTagName('param')[0];\n                        data.axis = param.textContent;\n                        var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n                        data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildKinematicsScene(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsScene(id) {\n                return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n            }\n            function setupKinematics() {\n                var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n                var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n                var visualSceneId = Object.keys(library.visualScenes)[0];\n                if (kinematicsModelId === undefined || kinematicsSceneId === undefined)\n                    return;\n                var kinematicsModel = getKinematicsModel(kinematicsModelId);\n                var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n                var visualScene = getVisualScene(visualSceneId);\n                var bindJointAxis = kinematicsScene.bindJointAxis;\n                var jointMap = {};\n                for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n                    var axis = bindJointAxis[i];\n                    var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n                    if (targetElement) {\n                        var parentVisualElement = targetElement.parentElement;\n                        connect(axis.jointIndex, parentVisualElement);\n                    }\n                }\n                function connect(jointIndex, visualElement) {\n                    var visualElementName = visualElement.getAttribute('name');\n                    var joint = kinematicsModel.joints[jointIndex];\n                    visualScene.traverse(function (object) {\n                        if (object.name === visualElementName) {\n                            jointMap[jointIndex] = {\n                                object: object,\n                                transforms: buildTransformList(visualElement),\n                                joint: joint,\n                                position: joint.zeroPosition\n                            };\n                        }\n                    });\n                }\n                var m0 = new THREE.Matrix4();\n                kinematics = {\n                    joints: kinematicsModel && kinematicsModel.joints,\n                    getJointValue: function (jointIndex) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            return jointData.position;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n                        }\n                    },\n                    setJointValue: function (jointIndex, value) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            var joint = jointData.joint;\n                            if (value > joint.limits.max || value < joint.limits.min) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n                            } else if (joint.static) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n                            } else {\n                                var object = jointData.object;\n                                var axis = joint.axis;\n                                var transforms = jointData.transforms;\n                                matrix.identity();\n                                for (var i = 0; i < transforms.length; i++) {\n                                    var transform = transforms[i];\n                                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                                        switch (joint.type) {\n                                        case 'revolute':\n                                            matrix.multiply(m0.makeRotationAxis(axis, THREE.MathUtils.degToRad(value)));\n                                            break;\n                                        case 'prismatic':\n                                            matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                                            break;\n                                        default:\n                                            console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                                            break;\n                                        }\n                                    } else {\n                                        switch (transform.type) {\n                                        case 'matrix':\n                                            matrix.multiply(transform.obj);\n                                            break;\n                                        case 'translate':\n                                            matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                                            break;\n                                        case 'scale':\n                                            matrix.scale(transform.obj);\n                                            break;\n                                        case 'rotate':\n                                            matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                                            break;\n                                        }\n                                    }\n                                }\n                                object.matrix.copy(matrix);\n                                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                                jointMap[jointIndex].position = value;\n                            }\n                        } else {\n                            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n                        }\n                    }\n                };\n            }\n            function buildTransformList(node) {\n                var transforms = [];\n                var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        var matrix = new THREE.Matrix4().fromArray(array).transpose();\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: matrix\n                        });\n                        break;\n                    case 'translate':\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector\n                        });\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector,\n                            angle: angle\n                        });\n                        break;\n                    }\n                }\n                return transforms;\n            }\n            function prepareNodes(xml) {\n                var elements = xml.getElementsByTagName('node');\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i];\n                    if (element.hasAttribute('id') === false) {\n                        element.setAttribute('id', generateId());\n                    }\n                }\n            }\n            var matrix = new THREE.Matrix4();\n            var vector = new THREE.Vector3();\n            function parseNode(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    type: xml.getAttribute('type'),\n                    id: xml.getAttribute('id'),\n                    sid: xml.getAttribute('sid'),\n                    matrix: new THREE.Matrix4(),\n                    nodes: [],\n                    instanceCameras: [],\n                    instanceControllers: [],\n                    instanceLights: [],\n                    instanceGeometries: [],\n                    instanceNodes: [],\n                    transforms: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'node':\n                        data.nodes.push(child.getAttribute('id'));\n                        parseNode(child);\n                        break;\n                    case 'instance_camera':\n                        data.instanceCameras.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_controller':\n                        data.instanceControllers.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_light':\n                        data.instanceLights.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_geometry':\n                        data.instanceGeometries.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_node':\n                        data.instanceNodes.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.multiply(matrix.fromArray(array).transpose());\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'translate':\n                        var array = parseFloats(child.textContent);\n                        vector.fromArray(array);\n                        data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.scale(vector.fromArray(array));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'extra':\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                if (hasNode(data.id)) {\n                    console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n                } else {\n                    library.nodes[data.id] = data;\n                }\n                return data;\n            }\n            function parseNodeInstance(xml) {\n                var data = {\n                    id: parseId(xml.getAttribute('url')),\n                    materials: {},\n                    skeletons: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'bind_material':\n                        var instances = child.getElementsByTagName('instance_material');\n                        for (var j = 0; j < instances.length; j++) {\n                            var instance = instances[j];\n                            var symbol = instance.getAttribute('symbol');\n                            var target = instance.getAttribute('target');\n                            data.materials[symbol] = parseId(target);\n                        }\n                        break;\n                    case 'skeleton':\n                        data.skeletons.push(parseId(child.textContent));\n                        break;\n                    default:\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildSkeleton(skeletons, joints) {\n                var boneData = [];\n                var sortedBoneData = [];\n                var i, j, data;\n                for (i = 0; i < skeletons.length; i++) {\n                    var skeleton = skeletons[i];\n                    var root;\n                    if (hasNode(skeleton)) {\n                        root = getNode(skeleton);\n                        buildBoneHierarchy(root, joints, boneData);\n                    } else if (hasVisualScene(skeleton)) {\n                        var visualScene = library.visualScenes[skeleton];\n                        var children = visualScene.children;\n                        for (var j = 0; j < children.length; j++) {\n                            var child = children[j];\n                            if (child.type === 'JOINT') {\n                                var root = getNode(child.id);\n                                buildBoneHierarchy(root, joints, boneData);\n                            }\n                        }\n                    } else {\n                        console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n                    }\n                }\n                for (i = 0; i < joints.length; i++) {\n                    for (j = 0; j < boneData.length; j++) {\n                        data = boneData[j];\n                        if (data.bone.name === joints[i].name) {\n                            sortedBoneData[i] = data;\n                            data.processed = true;\n                            break;\n                        }\n                    }\n                }\n                for (i = 0; i < boneData.length; i++) {\n                    data = boneData[i];\n                    if (data.processed === false) {\n                        sortedBoneData.push(data);\n                        data.processed = true;\n                    }\n                }\n                var bones = [];\n                var boneInverses = [];\n                for (i = 0; i < sortedBoneData.length; i++) {\n                    data = sortedBoneData[i];\n                    bones.push(data.bone);\n                    boneInverses.push(data.boneInverse);\n                }\n                return new THREE.Skeleton(bones, boneInverses);\n            }\n            function buildBoneHierarchy(root, joints, boneData) {\n                root.traverse(function (object) {\n                    if (object.isBone === true) {\n                        var boneInverse;\n                        for (var i = 0; i < joints.length; i++) {\n                            var joint = joints[i];\n                            if (joint.name === object.name) {\n                                boneInverse = joint.boneInverse;\n                                break;\n                            }\n                        }\n                        if (boneInverse === undefined) {\n                            boneInverse = new THREE.Matrix4();\n                        }\n                        boneData.push({\n                            bone: object,\n                            boneInverse: boneInverse,\n                            processed: false\n                        });\n                    }\n                });\n            }\n            function buildNode(data) {\n                var objects = [];\n                var matrix = data.matrix;\n                var nodes = data.nodes;\n                var type = data.type;\n                var instanceCameras = data.instanceCameras;\n                var instanceControllers = data.instanceControllers;\n                var instanceLights = data.instanceLights;\n                var instanceGeometries = data.instanceGeometries;\n                var instanceNodes = data.instanceNodes;\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                    objects.push(getNode(nodes[i]));\n                }\n                for (var i = 0, l = instanceCameras.length; i < l; i++) {\n                    var instanceCamera = getCamera(instanceCameras[i]);\n                    if (instanceCamera !== null) {\n                        objects.push(instanceCamera.clone());\n                    }\n                }\n                for (var i = 0, l = instanceControllers.length; i < l; i++) {\n                    var instance = instanceControllers[i];\n                    var controller = getController(instance.id);\n                    var geometries = getGeometry(controller.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    var skeletons = instance.skeletons;\n                    var joints = controller.skin.joints;\n                    var skeleton = buildSkeleton(skeletons, joints);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        var object = newObjects[j];\n                        if (object.isSkinnedMesh) {\n                            object.bind(skeleton, controller.skin.bindMatrix);\n                            object.normalizeSkinWeights();\n                        }\n                        objects.push(object);\n                    }\n                }\n                for (var i = 0, l = instanceLights.length; i < l; i++) {\n                    var instanceLight = getLight(instanceLights[i]);\n                    if (instanceLight !== null) {\n                        objects.push(instanceLight.clone());\n                    }\n                }\n                for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n                    var instance = instanceGeometries[i];\n                    var geometries = getGeometry(instance.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        objects.push(newObjects[j]);\n                    }\n                }\n                for (var i = 0, l = instanceNodes.length; i < l; i++) {\n                    objects.push(getNode(instanceNodes[i]).clone());\n                }\n                var object;\n                if (nodes.length === 0 && objects.length === 1) {\n                    object = objects[0];\n                } else {\n                    object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();\n                    for (var i = 0; i < objects.length; i++) {\n                        object.add(objects[i]);\n                    }\n                }\n                if (object.name === '') {\n                    object.name = type === 'JOINT' ? data.sid : data.name;\n                }\n                object.matrix.copy(matrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                return object;\n            }\n            var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });\n            function resolveMaterialBinding(keys, instanceMaterials) {\n                var materials = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var id = instanceMaterials[keys[i]];\n                    if (id === undefined) {\n                        console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n                        materials.push(fallbackMaterial);\n                    } else {\n                        materials.push(getMaterial(id));\n                    }\n                }\n                return materials;\n            }\n            function buildObjects(geometries, instanceMaterials) {\n                var objects = [];\n                for (var type in geometries) {\n                    var geometry = geometries[type];\n                    var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);\n                    if (materials.length === 0) {\n                        if (type === 'lines' || type === 'linestrips') {\n                            materials.push(new THREE.LineBasicMaterial());\n                        } else {\n                            materials.push(new THREE.MeshPhongMaterial());\n                        }\n                    }\n                    var skinning = geometry.data.attributes.skinIndex !== undefined;\n                    if (skinning) {\n                        for (var i = 0, l = materials.length; i < l; i++) {\n                            materials[i].skinning = true;\n                        }\n                    }\n                    var material = materials.length === 1 ? materials[0] : materials;\n                    var object;\n                    switch (type) {\n                    case 'lines':\n                        object = new THREE.LineSegments(geometry.data, material);\n                        break;\n                    case 'linestrips':\n                        object = new THREE.Line(geometry.data, material);\n                        break;\n                    case 'triangles':\n                    case 'polylist':\n                        if (skinning) {\n                            object = new THREE.SkinnedMesh(geometry.data, material);\n                        } else {\n                            object = new THREE.Mesh(geometry.data, material);\n                        }\n                        break;\n                    }\n                    objects.push(object);\n                }\n                return objects;\n            }\n            function hasNode(id) {\n                return library.nodes[id] !== undefined;\n            }\n            function getNode(id) {\n                return getBuild(library.nodes[id], buildNode);\n            }\n            function parseVisualScene(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    children: []\n                };\n                prepareNodes(xml);\n                var elements = getElementsByTagName(xml, 'node');\n                for (var i = 0; i < elements.length; i++) {\n                    data.children.push(parseNode(elements[i]));\n                }\n                library.visualScenes[xml.getAttribute('id')] = data;\n            }\n            function buildVisualScene(data) {\n                var group = new THREE.Group();\n                group.name = data.name;\n                var children = data.children;\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n                    group.add(getNode(child.id));\n                }\n                return group;\n            }\n            function hasVisualScene(id) {\n                return library.visualScenes[id] !== undefined;\n            }\n            function getVisualScene(id) {\n                return getBuild(library.visualScenes[id], buildVisualScene);\n            }\n            function parseScene(xml) {\n                var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n                return getVisualScene(parseId(instance.getAttribute('url')));\n            }\n            function setupAnimations() {\n                var clips = library.clips;\n                if (isEmpty(clips) === true) {\n                    if (isEmpty(library.animations) === false) {\n                        var tracks = [];\n                        for (var id in library.animations) {\n                            var animationTracks = getAnimation(id);\n                            for (var i = 0, l = animationTracks.length; i < l; i++) {\n                                tracks.push(animationTracks[i]);\n                            }\n                        }\n                        animations.push(new THREE.AnimationClip('default', -1, tracks));\n                    }\n                } else {\n                    for (var id in clips) {\n                        animations.push(getAnimationClip(id));\n                    }\n                }\n            }\n            function parserErrorToText(parserError) {\n                var result = '';\n                var stack = [parserError];\n                while (stack.length) {\n                    var node = stack.shift();\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        result += node.textContent;\n                    } else {\n                        result += '\\n';\n                        stack.push.apply(stack, node.childNodes);\n                    }\n                }\n                return result.trim();\n            }\n            if (text.length === 0) {\n                return { scene: new THREE.Scene() };\n            }\n            var xml = new DOMParser().parseFromString(text, 'application/xml');\n            var collada = getElementsByTagName(xml, 'COLLADA')[0];\n            var parserError = xml.getElementsByTagName('parsererror')[0];\n            if (parserError !== undefined) {\n                var errorElement = getElementsByTagName(parserError, 'div')[0];\n                var errorText;\n                if (errorElement) {\n                    errorText = errorElement.textContent;\n                } else {\n                    errorText = parserErrorToText(parserError);\n                }\n                console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n                return null;\n            }\n            var version = collada.getAttribute('version');\n            console.log('THREE.ColladaLoader: File version', version);\n            var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var tgaLoader;\n            if (TGALoader) {\n                tgaLoader = new TGALoader(this.manager);\n                tgaLoader.setPath(this.resourcePath || path);\n            }\n            var animations = [];\n            var kinematics = {};\n            var count = 0;\n            var library = {\n                animations: {},\n                clips: {},\n                controllers: {},\n                images: {},\n                effects: {},\n                materials: {},\n                cameras: {},\n                lights: {},\n                geometries: {},\n                nodes: {},\n                visualScenes: {},\n                kinematicsModels: {},\n                physicsModels: {},\n                kinematicsScenes: {}\n            };\n            parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n            parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n            parseLibrary(collada, 'library_controllers', 'controller', parseController);\n            parseLibrary(collada, 'library_images', 'image', parseImage);\n            parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n            parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n            parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n            parseLibrary(collada, 'library_lights', 'light', parseLight);\n            parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n            parseLibrary(collada, 'library_nodes', 'node', parseNode);\n            parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n            parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n            parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n            parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n            buildLibrary(library.animations, buildAnimation);\n            buildLibrary(library.clips, buildAnimationClip);\n            buildLibrary(library.controllers, buildController);\n            buildLibrary(library.images, buildImage);\n            buildLibrary(library.effects, buildEffect);\n            buildLibrary(library.materials, buildMaterial);\n            buildLibrary(library.cameras, buildCamera);\n            buildLibrary(library.lights, buildLight);\n            buildLibrary(library.geometries, buildGeometry);\n            buildLibrary(library.visualScenes, buildVisualScene);\n            setupAnimations();\n            setupKinematics();\n            var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n            if (asset.upAxis === 'Z_UP') {\n                scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            }\n            scene.scale.multiplyScalar(asset.unit);\n            return {\n                animations: animations,\n                kinematics: kinematics,\n                library: library,\n                scene: scene\n            };\n        }\n    });\n    return ColladaLoader;\n});\ndefine('skylark-threejs-ex/loaders/DRACOLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DRACOLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.decoderPath = '';\n        this.decoderConfig = {};\n        this.decoderBinary = null;\n        this.decoderPending = null;\n        this.workerLimit = 4;\n        this.workerPool = [];\n        this.workerNextTaskID = 1;\n        this.workerSourceURL = '';\n        this.defaultAttributeIDs = {\n            position: 'POSITION',\n            normal: 'NORMAL',\n            color: 'COLOR',\n            uv: 'TEX_COORD'\n        };\n        this.defaultAttributeTypes = {\n            position: 'Float32Array',\n            normal: 'Float32Array',\n            color: 'Float32Array',\n            uv: 'Float32Array'\n        };\n    };\n    DRACOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: DRACOLoader,\n        setDecoderPath: function (path) {\n            this.decoderPath = path;\n            return this;\n        },\n        setDecoderConfig: function (config) {\n            this.decoderConfig = config;\n            return this;\n        },\n        setWorkerLimit: function (workerLimit) {\n            this.workerLimit = workerLimit;\n            return this;\n        },\n        setVerbosity: function () {\n            console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n        },\n        setDrawMode: function () {\n            console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n        },\n        setSkipDequantization: function () {\n            console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n        },\n        load: function (url, onLoad, onProgress, onError) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            if (this.crossOrigin === 'use-credentials') {\n                loader.setWithCredentials(true);\n            }\n            loader.load(url, buffer => {\n                var taskConfig = {\n                    attributeIDs: this.defaultAttributeIDs,\n                    attributeTypes: this.defaultAttributeTypes,\n                    useUniqueIDs: false\n                };\n                this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n            }, onProgress, onError);\n        },\n        decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {\n            var taskConfig = {\n                attributeIDs: attributeIDs || this.defaultAttributeIDs,\n                attributeTypes: attributeTypes || this.defaultAttributeTypes,\n                useUniqueIDs: !!attributeIDs\n            };\n            this.decodeGeometry(buffer, taskConfig).then(callback);\n        },\n        decodeGeometry: function (buffer, taskConfig) {\n            for (var attribute in taskConfig.attributeTypes) {\n                var type = taskConfig.attributeTypes[attribute];\n                if (type.BYTES_PER_ELEMENT !== undefined) {\n                    taskConfig.attributeTypes[attribute] = type.name;\n                }\n            }\n            var taskKey = JSON.stringify(taskConfig);\n            if (DRACOLoader.taskCache.has(buffer)) {\n                var cachedTask = DRACOLoader.taskCache.get(buffer);\n                if (cachedTask.key === taskKey) {\n                    return cachedTask.promise;\n                } else if (buffer.byteLength === 0) {\n                    throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n                }\n            }\n            var worker;\n            var taskID = this.workerNextTaskID++;\n            var taskCost = buffer.byteLength;\n            var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n                worker = _worker;\n                return new Promise((resolve, reject) => {\n                    worker._callbacks[taskID] = {\n                        resolve,\n                        reject\n                    };\n                    worker.postMessage({\n                        type: 'decode',\n                        id: taskID,\n                        taskConfig,\n                        buffer\n                    }, [buffer]);\n                });\n            }).then(message => this._createGeometry(message.geometry));\n            geometryPending.finally(() => {\n                if (worker && taskID) {\n                    this._releaseTask(worker, taskID);\n                }\n            });\n            DRACOLoader.taskCache.set(buffer, {\n                key: taskKey,\n                promise: geometryPending\n            });\n            return geometryPending;\n        },\n        _createGeometry: function (geometryData) {\n            var geometry = new THREE.BufferGeometry();\n            if (geometryData.index) {\n                geometry.setIndex(new THREE.BufferAttribute(geometryData.index.array, 1));\n            }\n            for (var i = 0; i < geometryData.attributes.length; i++) {\n                var attribute = geometryData.attributes[i];\n                var name = attribute.name;\n                var array = attribute.array;\n                var itemSize = attribute.itemSize;\n                geometry.setAttribute(name, new THREE.BufferAttribute(array, itemSize));\n            }\n            return geometry;\n        },\n        _loadLibrary: function (url, responseType) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.decoderPath);\n            loader.setResponseType(responseType);\n            return new Promise((resolve, reject) => {\n                loader.load(url, resolve, undefined, reject);\n            });\n        },\n        preload: function () {\n            this._initDecoder();\n            return this;\n        },\n        _initDecoder: function () {\n            if (this.decoderPending)\n                return this.decoderPending;\n            var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n            var librariesPending = [];\n            if (useJS) {\n                librariesPending.push(this._loadLibrary('draco_decoder', 'text'));\n            } else {\n                librariesPending.push(this._loadLibrary('draco_wasm_wrapper', 'text'));\n                librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n            }\n            this.decoderPending = Promise.all(librariesPending).then(libraries => {\n                var jsContent = libraries[0];\n                if (!useJS) {\n                    this.decoderConfig.wasmBinary = libraries[1];\n                }\n                var fn = DRACOLoader.DRACOWorker.toString();\n                var body = [\n                    '/* draco decoder */',\n                    jsContent,\n                    '',\n                    '/* worker */',\n                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n                ].join('\\n');\n                this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n            });\n            return this.decoderPending;\n        },\n        _getWorker: function (taskID, taskCost) {\n            return this._initDecoder().then(() => {\n                if (this.workerPool.length < this.workerLimit) {\n                    var worker = new Worker(this.workerSourceURL);\n                    worker._callbacks = {};\n                    worker._taskCosts = {};\n                    worker._taskLoad = 0;\n                    worker.postMessage({\n                        type: 'init',\n                        decoderConfig: this.decoderConfig\n                    });\n                    worker.onmessage = function (e) {\n                        var message = e.data;\n                        switch (message.type) {\n                        case 'decode':\n                            worker._callbacks[message.id].resolve(message);\n                            break;\n                        case 'error':\n                            worker._callbacks[message.id].reject(message);\n                            break;\n                        default:\n                            console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n                        }\n                    };\n                    this.workerPool.push(worker);\n                } else {\n                    this.workerPool.sort(function (a, b) {\n                        return a._taskLoad > b._taskLoad ? -1 : 1;\n                    });\n                }\n                var worker = this.workerPool[this.workerPool.length - 1];\n                worker._taskCosts[taskID] = taskCost;\n                worker._taskLoad += taskCost;\n                return worker;\n            });\n        },\n        _releaseTask: function (worker, taskID) {\n            worker._taskLoad -= worker._taskCosts[taskID];\n            delete worker._callbacks[taskID];\n            delete worker._taskCosts[taskID];\n        },\n        debug: function () {\n            console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n        },\n        dispose: function () {\n            for (var i = 0; i < this.workerPool.length; ++i) {\n                this.workerPool[i].terminate();\n            }\n            this.workerPool.length = 0;\n            return this;\n        }\n    });\n    DRACOLoader.DRACOWorker = function () {\n        var decoderConfig;\n        var decoderPending;\n        onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n            case 'init':\n                decoderConfig = message.decoderConfig;\n                decoderPending = new Promise(function (resolve) {\n                    decoderConfig.onModuleLoaded = function (draco) {\n                        resolve({ draco: draco });\n                    };\n                    DracoDecoderModule(decoderConfig);\n                });\n                break;\n            case 'decode':\n                var buffer = message.buffer;\n                var taskConfig = message.taskConfig;\n                decoderPending.then(module => {\n                    var draco = module.draco;\n                    var decoder = new draco.Decoder();\n                    var decoderBuffer = new draco.DecoderBuffer();\n                    decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n                    try {\n                        var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n                        var buffers = geometry.attributes.map(attr => attr.array.buffer);\n                        if (geometry.index)\n                            buffers.push(geometry.index.array.buffer);\n                        self.postMessage({\n                            type: 'decode',\n                            id: message.id,\n                            geometry\n                        }, buffers);\n                    } catch (error) {\n                        console.error(error);\n                        self.postMessage({\n                            type: 'error',\n                            id: message.id,\n                            error: error.message\n                        });\n                    } finally {\n                        draco.destroy(decoderBuffer);\n                        draco.destroy(decoder);\n                    }\n                });\n                break;\n            }\n        };\n        function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n            var attributeIDs = taskConfig.attributeIDs;\n            var attributeTypes = taskConfig.attributeTypes;\n            var dracoGeometry;\n            var decodingStatus;\n            var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n            if (geometryType === draco.TRIANGULAR_MESH) {\n                dracoGeometry = new draco.Mesh();\n                decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n            } else if (geometryType === draco.POINT_CLOUD) {\n                dracoGeometry = new draco.PointCloud();\n                decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n            } else {\n                throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n            }\n            if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n                throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n            }\n            var geometry = {\n                index: null,\n                attributes: []\n            };\n            for (var attributeName in attributeIDs) {\n                var attributeType = self[attributeTypes[attributeName]];\n                var attribute;\n                var attributeID;\n                if (taskConfig.useUniqueIDs) {\n                    attributeID = attributeIDs[attributeName];\n                    attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n                } else {\n                    attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n                    if (attributeID === -1)\n                        continue;\n                    attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n                }\n                geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n            }\n            if (geometryType === draco.TRIANGULAR_MESH) {\n                var numFaces = dracoGeometry.num_faces();\n                var numIndices = numFaces * 3;\n                var index = new Uint32Array(numIndices);\n                var indexArray = new draco.DracoInt32Array();\n                for (var i = 0; i < numFaces; ++i) {\n                    decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);\n                    for (var j = 0; j < 3; ++j) {\n                        index[i * 3 + j] = indexArray.GetValue(j);\n                    }\n                }\n                geometry.index = {\n                    array: index,\n                    itemSize: 1\n                };\n                draco.destroy(indexArray);\n            }\n            draco.destroy(dracoGeometry);\n            return geometry;\n        }\n        function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n            var numComponents = attribute.num_components();\n            var numPoints = dracoGeometry.num_points();\n            var numValues = numPoints * numComponents;\n            var dracoArray;\n            var array;\n            switch (attributeType) {\n            case Float32Array:\n                dracoArray = new draco.DracoFloat32Array();\n                decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Float32Array(numValues);\n                break;\n            case Int8Array:\n                dracoArray = new draco.DracoInt8Array();\n                decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int8Array(numValues);\n                break;\n            case Int16Array:\n                dracoArray = new draco.DracoInt16Array();\n                decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int16Array(numValues);\n                break;\n            case Int32Array:\n                dracoArray = new draco.DracoInt32Array();\n                decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int32Array(numValues);\n                break;\n            case Uint8Array:\n                dracoArray = new draco.DracoUInt8Array();\n                decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint8Array(numValues);\n                break;\n            case Uint16Array:\n                dracoArray = new draco.DracoUInt16Array();\n                decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint16Array(numValues);\n                break;\n            case Uint32Array:\n                dracoArray = new draco.DracoUInt32Array();\n                decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint32Array(numValues);\n                break;\n            default:\n                throw new Error('THREE.DRACOLoader: Unexpected attribute type.');\n            }\n            for (var i = 0; i < numValues; i++) {\n                array[i] = dracoArray.GetValue(i);\n            }\n            draco.destroy(dracoArray);\n            return {\n                name: attributeName,\n                array: array,\n                itemSize: numComponents\n            };\n        }\n    };\n    DRACOLoader.taskCache = new WeakMap();\n    DRACOLoader.setDecoderPath = function () {\n        console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.setDecoderConfig = function () {\n        console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.releaseDecoderModule = function () {\n        console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.getDecoderModule = function () {\n        console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n    };\n    return DRACOLoader;\n});\ndefine('skylark-zlib/zlib',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark) {\r\n\treturn skylark.attach(\"intg.Zlib\",{\r\n\t\tCompressionMethod : {\r\n\t\t  DEFLATE: 8,\r\n\t\t  RESERVED: 15\r\n\r\n\t\t}\r\n\t})\r\n});\r\n\ndefine('skylark-zlib/Inflate',[\r\n  \"./zlib\"\r\n],function(Zlib) {\r\n  /**\r\n   * @constructor\r\n   * @param {!(Uint8Array|Array)} input deflated buffer.\r\n   * @param {Object=} opt_params option parameters.\r\n   *\r\n   * opt_params は以下のプロパティを指定する事ができます。\r\n   *   - index: input buffer の deflate コンテナの開始位置.\r\n   *   - blockSize: バッファのブロックサイズ.\r\n   *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.\r\n   *   - bufferType: Inflate.BufferType の値によってバッファの管理方法を指定する.\r\n   *       Inflate.BufferType は RawInflate.BufferType のエイリアス.\r\n   */\r\n  var Inflate = function(input, opt_params) {\r\n    /** @type {number} */\r\n    var bufferSize;\r\n    /** @type {Inflate.BufferType} */\r\n    var bufferType;\r\n    /** @type {number} */\r\n    var cmf;\r\n    /** @type {number} */\r\n    var flg;\r\n\r\n    /** @type {!(Uint8Array|Array)} */\r\n    this.input = input;\r\n    /** @type {number} */\r\n    this.ip = 0;\r\n    /** @type {RawInflate} */\r\n    this.rawinflate;\r\n    /** @type {(boolean|undefined)} verify flag. */\r\n    this.verify;\r\n\r\n    // option parameters\r\n    if (opt_params || !(opt_params = {})) {\r\n      if (opt_params['index']) {\r\n        this.ip = opt_params['index'];\r\n      }\r\n      if (opt_params['verify']) {\r\n        this.verify = opt_params['verify'];\r\n      }\r\n    }\r\n\r\n    // Compression Method and Flags\r\n    cmf = input[this.ip++];\r\n    flg = input[this.ip++];\r\n\r\n    // compression method\r\n    switch (cmf & 0x0f) {\r\n      case Zlib.CompressionMethod.DEFLATE:\r\n        this.method = Zlib.CompressionMethod.DEFLATE;\r\n        break;\r\n      default:\r\n        throw new Error('unsupported compression method');\r\n    }\r\n\r\n    // fcheck\r\n    if (((cmf << 8) + flg) % 31 !== 0) {\r\n      throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\r\n    }\r\n\r\n    // fdict (not supported)\r\n    if (flg & 0x20) {\r\n      throw new Error('fdict flag is not supported');\r\n    }\r\n\r\n    // RawInflate\r\n    this.rawinflate = new RawInflate(input, {\r\n      'index': this.ip,\r\n      'bufferSize': opt_params['bufferSize'],\r\n      'bufferType': opt_params['bufferType'],\r\n      'resize': opt_params['resize']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  Inflate.BufferType = RawInflate.BufferType;\r\n\r\n  /**\r\n   * decompress.\r\n   * @return {!(Uint8Array|Array)} inflated buffer.\r\n   */\r\n  Inflate.prototype.decompress = function() {\r\n    /** @type {!(Array|Uint8Array)} input buffer. */\r\n    var input = this.input;\r\n    /** @type {!(Uint8Array|Array)} inflated buffer. */\r\n    var buffer;\r\n    /** @type {number} adler-32 checksum */\r\n    var adler32;\r\n\r\n    buffer = this.rawinflate.decompress();\r\n    this.ip = this.rawinflate.ip;\r\n\r\n    // verify adler-32\r\n    if (this.verify) {\r\n      adler32 = (\r\n        input[this.ip++] << 24 | input[this.ip++] << 16 |\r\n        input[this.ip++] << 8 | input[this.ip++]\r\n      ) >>> 0;\r\n\r\n      if (adler32 !== Adler32(buffer)) {\r\n        throw new Error('invalid adler-32 checksum');\r\n      }\r\n    }\r\n\r\n    return buffer;\r\n  };\r\n\r\n  return Zlib.Inflate = Inflate;\r\n});\r\n\ndefine('skylark-threejs-ex/loaders/FBXLoader',[\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate',\n    '../curves/NURBSCurve'\n], function (\n    THREE, \n    Inflate, \n    NURBSCurve\n) {\n    'use strict';\n    var FBXLoader = function () {\n        var fbxTree;\n        var connections;\n        var sceneGraph;\n        function FBXLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: FBXLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var self = this;\n                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(self.path);\n                loader.setResponseType('arraybuffer');\n                loader.load(url, function (buffer) {\n                    try {\n                        onLoad(self.parse(buffer, path));\n                    } catch (error) {\n                        setTimeout(function () {\n                            if (onError)\n                                onError(error);\n                            self.manager.itemError(url);\n                        }, 0);\n                    }\n                }, onProgress, onError);\n            },\n            parse: function (FBXBuffer, path) {\n                if (isFbxFormatBinary(FBXBuffer)) {\n                    fbxTree = new BinaryParser().parse(FBXBuffer);\n                } else {\n                    var FBXText = convertArrayBufferToString(FBXBuffer);\n                    if (!isFbxFormatASCII(FBXText)) {\n                        throw new Error('THREE.FBXLoader: Unknown format.');\n                    }\n                    if (getFbxVersion(FBXText) < 7000) {\n                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n                    }\n                    fbxTree = new TextParser().parse(FBXText);\n                }\n                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n            }\n        });\n        function FBXTreeParser(textureLoader, manager) {\n            this.textureLoader = textureLoader;\n            this.manager = manager;\n        }\n        FBXTreeParser.prototype = {\n            constructor: FBXTreeParser,\n            parse: function () {\n                connections = this.parseConnections();\n                var images = this.parseImages();\n                var textures = this.parseTextures(images);\n                var materials = this.parseMaterials(textures);\n                var deformers = this.parseDeformers();\n                var geometryMap = new GeometryParser().parse(deformers);\n                this.parseScene(deformers, geometryMap, materials);\n                return sceneGraph;\n            },\n            parseConnections: function () {\n                var connectionMap = new Map();\n                if ('Connections' in fbxTree) {\n                    var rawConnections = fbxTree.Connections.connections;\n                    rawConnections.forEach(function (rawConnection) {\n                        var fromID = rawConnection[0];\n                        var toID = rawConnection[1];\n                        var relationship = rawConnection[2];\n                        if (!connectionMap.has(fromID)) {\n                            connectionMap.set(fromID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var parentRelationship = {\n                            ID: toID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(fromID).parents.push(parentRelationship);\n                        if (!connectionMap.has(toID)) {\n                            connectionMap.set(toID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var childRelationship = {\n                            ID: fromID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(toID).children.push(childRelationship);\n                    });\n                }\n                return connectionMap;\n            },\n            parseImages: function () {\n                var images = {};\n                var blobs = {};\n                if ('Video' in fbxTree.Objects) {\n                    var videoNodes = fbxTree.Objects.Video;\n                    for (var nodeID in videoNodes) {\n                        var videoNode = videoNodes[nodeID];\n                        var id = parseInt(nodeID);\n                        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n                        if ('Content' in videoNode) {\n                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n                            if (arrayBufferContent || base64Content) {\n                                var image = this.parseImage(videoNodes[nodeID]);\n                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n                            }\n                        }\n                    }\n                }\n                for (var id in images) {\n                    var filename = images[id];\n                    if (blobs[filename] !== undefined)\n                        images[id] = blobs[filename];\n                    else\n                        images[id] = images[id].split('\\\\').pop();\n                }\n                return images;\n            },\n            parseImage: function (videoNode) {\n                var content = videoNode.Content;\n                var fileName = videoNode.RelativeFilename || videoNode.Filename;\n                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n                var type;\n                switch (extension) {\n                case 'bmp':\n                    type = 'image/bmp';\n                    break;\n                case 'jpg':\n                case 'jpeg':\n                    type = 'image/jpeg';\n                    break;\n                case 'png':\n                    type = 'image/png';\n                    break;\n                case 'tif':\n                    type = 'image/tiff';\n                    break;\n                case 'tga':\n                    if (this.manager.getHandler('.tga') === null) {\n                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n                    }\n                    type = 'image/tga';\n                    break;\n                default:\n                    console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n                    return;\n                }\n                if (typeof content === 'string') {\n                    return 'data:' + type + ';base64,' + content;\n                } else {\n                    var array = new Uint8Array(content);\n                    return window.URL.createObjectURL(new Blob([array], { type: type }));\n                }\n            },\n            parseTextures: function (images) {\n                var textureMap = new Map();\n                if ('Texture' in fbxTree.Objects) {\n                    var textureNodes = fbxTree.Objects.undefined;\n                    for (var nodeID in textureNodes) {\n                        var texture = this.parseTexture(textureNodes[nodeID], images);\n                        textureMap.set(parseInt(nodeID), texture);\n                    }\n                }\n                return textureMap;\n            },\n            parseTexture: function (textureNode, images) {\n                var texture = this.loadTexture(textureNode, images);\n                texture.ID = textureNode.id;\n                texture.name = textureNode.attrName;\n                var wrapModeU = textureNode.WrapModeU;\n                var wrapModeV = textureNode.WrapModeV;\n                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                if ('Scaling' in textureNode) {\n                    var values = textureNode.Scaling.value;\n                    texture.repeat.x = values[0];\n                    texture.repeat.y = values[1];\n                }\n                return texture;\n            },\n            loadTexture: function (textureNode, images) {\n                var fileName;\n                var currentPath = this.textureLoader.path;\n                var children = connections.get(textureNode.id).children;\n                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n                    fileName = images[children[0].ID];\n                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n                        this.textureLoader.setPath(undefined);\n                    }\n                }\n                var texture;\n                var extension = textureNode.FileName.slice(-3).toLowerCase();\n                if (extension === 'tga') {\n                    var loader = this.manager.getHandler('.tga');\n                    if (loader === null) {\n                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n                        texture = new THREE.Texture();\n                    } else {\n                        texture = loader.load(fileName);\n                    }\n                } else if (extension === 'psd') {\n                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n                    texture = new THREE.Texture();\n                } else {\n                    texture = this.textureLoader.load(fileName);\n                }\n                this.textureLoader.setPath(currentPath);\n                return texture;\n            },\n            parseMaterials: function (textureMap) {\n                var materialMap = new Map();\n                if ('Material' in fbxTree.Objects) {\n                    var materialNodes = fbxTree.Objects.Material;\n                    for (var nodeID in materialNodes) {\n                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n                        if (material !== null)\n                            materialMap.set(parseInt(nodeID), material);\n                    }\n                }\n                return materialMap;\n            },\n            parseMaterial: function (materialNode, textureMap) {\n                var ID = materialNode.id;\n                var name = materialNode.attrName;\n                var type = materialNode.ShadingModel;\n                if (typeof type === 'object') {\n                    type = type.value;\n                }\n                if (!connections.has(ID))\n                    return null;\n                var parameters = this.parseParameters(materialNode, textureMap, ID);\n                var material;\n                switch (type.toLowerCase()) {\n                case 'phong':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                }\n                material.setValues(parameters);\n                material.name = name;\n                return material;\n            },\n            parseParameters: function (materialNode, textureMap, ID) {\n                var parameters = {};\n                if (materialNode.BumpFactor) {\n                    parameters.bumpScale = materialNode.BumpFactor.value;\n                }\n                if (materialNode.Diffuse) {\n                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n                }\n                if (materialNode.DisplacementFactor) {\n                    parameters.displacementScale = materialNode.DisplacementFactor.value;\n                }\n                if (materialNode.Emissive) {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n                }\n                if (materialNode.EmissiveFactor) {\n                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n                }\n                if (materialNode.Opacity) {\n                    parameters.opacity = parseFloat(materialNode.Opacity.value);\n                }\n                if (parameters.opacity < 1) {\n                    parameters.transparent = true;\n                }\n                if (materialNode.ReflectionFactor) {\n                    parameters.reflectivity = materialNode.ReflectionFactor.value;\n                }\n                if (materialNode.Shininess) {\n                    parameters.shininess = materialNode.Shininess.value;\n                }\n                if (materialNode.Specular) {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n                }\n                var self = this;\n                connections.get(ID).children.forEach(function (child) {\n                    var type = child.relationship;\n                    switch (type) {\n                    case 'Bump':\n                        parameters.bumpMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'Maya|TEX_ao_map':\n                        parameters.aoMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'DiffuseColor':\n                    case 'Maya|TEX_color_map':\n                        parameters.map = self.getTexture(textureMap, child.ID);\n                        parameters.map.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'DisplacementColor':\n                        parameters.displacementMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'EmissiveColor':\n                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'NormalMap':\n                    case 'Maya|TEX_normal_map':\n                        parameters.normalMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'ReflectionColor':\n                        parameters.envMap = self.getTexture(textureMap, child.ID);\n                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n                        parameters.envMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'SpecularColor':\n                        parameters.specularMap = self.getTexture(textureMap, child.ID);\n                        parameters.specularMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'TransparentColor':\n                        parameters.alphaMap = self.getTexture(textureMap, child.ID);\n                        parameters.transparent = true;\n                        break;\n                    case 'AmbientColor':\n                    case 'ShininessExponent':\n                    case 'SpecularFactor':\n                    case 'VectorDisplacementColor':\n                    default:\n                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n                        break;\n                    }\n                });\n                return parameters;\n            },\n            getTexture: function (textureMap, id) {\n                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n                    id = connections.get(id).children[0].ID;\n                }\n                return textureMap.get(id);\n            },\n            parseDeformers: function () {\n                var skeletons = {};\n                var morphTargets = {};\n                if ('Deformer' in fbxTree.Objects) {\n                    var DeformerNodes = fbxTree.Objects.Deformer;\n                    for (var nodeID in DeformerNodes) {\n                        var deformerNode = DeformerNodes[nodeID];\n                        var relationships = connections.get(parseInt(nodeID));\n                        if (deformerNode.attrType === 'Skin') {\n                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n                            skeleton.ID = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n                            skeleton.geometryID = relationships.parents[0].ID;\n                            skeletons[nodeID] = skeleton;\n                        } else if (deformerNode.attrType === 'BlendShape') {\n                            var morphTarget = { id: nodeID };\n                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n                            morphTarget.id = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n                            morphTargets[nodeID] = morphTarget;\n                        }\n                    }\n                }\n                return {\n                    skeletons: skeletons,\n                    morphTargets: morphTargets\n                };\n            },\n            parseSkeleton: function (relationships, deformerNodes) {\n                var rawBones = [];\n                relationships.children.forEach(function (child) {\n                    var boneNode = deformerNodes[child.ID];\n                    if (boneNode.attrType !== 'Cluster')\n                        return;\n                    var rawBone = {\n                        ID: child.ID,\n                        indices: [],\n                        weights: [],\n                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)\n                    };\n                    if ('Indexes' in boneNode) {\n                        rawBone.indices = boneNode.Indexes.a;\n                        rawBone.weights = boneNode.Weights.a;\n                    }\n                    rawBones.push(rawBone);\n                });\n                return {\n                    rawBones: rawBones,\n                    bones: []\n                };\n            },\n            parseMorphTargets: function (relationships, deformerNodes) {\n                var rawMorphTargets = [];\n                for (var i = 0; i < relationships.children.length; i++) {\n                    var child = relationships.children[i];\n                    var morphTargetNode = deformerNodes[child.ID];\n                    var rawMorphTarget = {\n                        name: morphTargetNode.attrName,\n                        initialWeight: morphTargetNode.DeformPercent,\n                        id: morphTargetNode.id,\n                        fullWeights: morphTargetNode.FullWeights.a\n                    };\n                    if (morphTargetNode.attrType !== 'BlendShapeChannel')\n                        return;\n                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n                        return child.relationship === undefined;\n                    })[0].ID;\n                    rawMorphTargets.push(rawMorphTarget);\n                }\n                return rawMorphTargets;\n            },\n            parseScene: function (deformers, geometryMap, materialMap) {\n                sceneGraph = new THREE.Group();\n                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n                var modelNodes = fbxTree.Objects.Model;\n                var self = this;\n                modelMap.forEach(function (model) {\n                    var modelNode = modelNodes[model.ID];\n                    self.setLookAtProperties(model, modelNode);\n                    var parentConnections = connections.get(model.ID).parents;\n                    parentConnections.forEach(function (connection) {\n                        var parent = modelMap.get(connection.ID);\n                        if (parent !== undefined)\n                            parent.add(model);\n                    });\n                    if (model.parent === null) {\n                        sceneGraph.add(model);\n                    }\n                });\n                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n                this.createAmbientLight();\n                this.setupMorphMaterials();\n                sceneGraph.traverse(function (node) {\n                    if (node.userData.transformData) {\n                        if (node.parent)\n                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n                        var transform = generateTransform(node.userData.transformData);\n                        node.applyMatrix4(transform);\n                    }\n                });\n                var animations = new AnimationParser().parse();\n                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n                    sceneGraph.children[0].animations = animations;\n                    sceneGraph = sceneGraph.children[0];\n                }\n                sceneGraph.animations = animations;\n            },\n            parseModels: function (skeletons, geometryMap, materialMap) {\n                var modelMap = new Map();\n                var modelNodes = fbxTree.Objects.Model;\n                for (var nodeID in modelNodes) {\n                    var id = parseInt(nodeID);\n                    var node = modelNodes[nodeID];\n                    var relationships = connections.get(id);\n                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n                    if (!model) {\n                        switch (node.attrType) {\n                        case 'Camera':\n                            model = this.createCamera(relationships);\n                            break;\n                        case 'Light':\n                            model = this.createLight(relationships);\n                            break;\n                        case 'Mesh':\n                            model = this.createMesh(relationships, geometryMap, materialMap);\n                            break;\n                        case 'NurbsCurve':\n                            model = this.createCurve(relationships, geometryMap);\n                            break;\n                        case 'LimbNode':\n                        case 'Root':\n                            model = new THREE.Bone();\n                            break;\n                        case 'Null':\n                        default:\n                            model = new THREE.Group();\n                            break;\n                        }\n                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\n                        model.ID = id;\n                    }\n                    this.getTransformData(model, node);\n                    modelMap.set(id, model);\n                }\n                return modelMap;\n            },\n            buildSkeleton: function (relationships, skeletons, id, name) {\n                var bone = null;\n                relationships.parents.forEach(function (parent) {\n                    for (var ID in skeletons) {\n                        var skeleton = skeletons[ID];\n                        skeleton.rawBones.forEach(function (rawBone, i) {\n                            if (rawBone.ID === parent.ID) {\n                                var subBone = bone;\n                                bone = new THREE.Bone();\n                                bone.matrixWorld.copy(rawBone.transformLink);\n                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\n                                bone.ID = id;\n                                skeleton.bones[i] = bone;\n                                if (subBone !== null) {\n                                    bone.add(subBone);\n                                }\n                            }\n                        });\n                    }\n                });\n                return bone;\n            },\n            createCamera: function (relationships) {\n                var model;\n                var cameraAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        cameraAttribute = attr;\n                    }\n                });\n                if (cameraAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type = 0;\n                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n                        type = 1;\n                    }\n                    var nearClippingPlane = 1;\n                    if (cameraAttribute.NearPlane !== undefined) {\n                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n                    }\n                    var farClippingPlane = 1000;\n                    if (cameraAttribute.FarPlane !== undefined) {\n                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n                    }\n                    var width = window.innerWidth;\n                    var height = window.innerHeight;\n                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n                        width = cameraAttribute.AspectWidth.value;\n                        height = cameraAttribute.AspectHeight.value;\n                    }\n                    var aspect = width / height;\n                    var fov = 45;\n                    if (cameraAttribute.FieldOfView !== undefined) {\n                        fov = cameraAttribute.FieldOfView.value;\n                    }\n                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n                        if (focalLength !== null)\n                            model.setFocalLength(focalLength);\n                        break;\n                    case 1:\n                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n                        model = new THREE.Object3D();\n                        break;\n                    }\n                }\n                return model;\n            },\n            createLight: function (relationships) {\n                var model;\n                var lightAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        lightAttribute = attr;\n                    }\n                });\n                if (lightAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type;\n                    if (lightAttribute.LightType === undefined) {\n                        type = 0;\n                    } else {\n                        type = lightAttribute.LightType.value;\n                    }\n                    var color = 16777215;\n                    if (lightAttribute.undefined !== undefined) {\n                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);\n                    }\n                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n                        intensity = 0;\n                    }\n                    var distance = 0;\n                    if (lightAttribute.FarAttenuationEnd !== undefined) {\n                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n                            distance = 0;\n                        } else {\n                            distance = lightAttribute.FarAttenuationEnd.value;\n                        }\n                    }\n                    var decay = 1;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PointLight(color, intensity, distance, decay);\n                        break;\n                    case 1:\n                        model = new THREE.DirectionalLight(color, intensity);\n                        break;\n                    case 2:\n                        var angle = Math.PI / 3;\n                        if (lightAttribute.InnerAngle !== undefined) {\n                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\n                        }\n                        var penumbra = 0;\n                        if (lightAttribute.OuterAngle !== undefined) {\n                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\n                            penumbra = Math.max(penumbra, 1);\n                        }\n                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n                        model = new THREE.PointLight(color, intensity);\n                        break;\n                    }\n                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n                        model.castShadow = true;\n                    }\n                }\n                return model;\n            },\n            createMesh: function (relationships, geometryMap, materialMap) {\n                var model;\n                var geometry = null;\n                var material = null;\n                var materials = [];\n                relationships.children.forEach(function (child) {\n                    if (geometryMap.has(child.ID)) {\n                        geometry = geometryMap.get(child.ID);\n                    }\n                    if (materialMap.has(child.ID)) {\n                        materials.push(materialMap.get(child.ID));\n                    }\n                });\n                if (materials.length > 1) {\n                    material = materials;\n                } else if (materials.length > 0) {\n                    material = materials[0];\n                } else {\n                    material = new THREE.MeshPhongMaterial({ color: 13421772 });\n                    materials.push(material);\n                }\n                if ('color' in geometry.attributes) {\n                    materials.forEach(function (material) {\n                        material.vertexColors = true;\n                    });\n                }\n                if (geometry.FBX_Deformer) {\n                    materials.forEach(function (material) {\n                        material.skinning = true;\n                    });\n                    model = new THREE.SkinnedMesh(geometry, material);\n                    model.normalizeSkinWeights();\n                } else {\n                    model = new THREE.Mesh(geometry, material);\n                }\n                return model;\n            },\n            createCurve: function (relationships, geometryMap) {\n                var geometry = relationships.children.reduce(function (geo, child) {\n                    if (geometryMap.has(child.ID))\n                        geo = geometryMap.get(child.ID);\n                    return geo;\n                }, null);\n                var material = new THREE.LineBasicMaterial({\n                    color: 3342591,\n                    linewidth: 1\n                });\n                return new THREE.Line(geometry, material);\n            },\n            getTransformData: function (model, modelNode) {\n                var transformData = {};\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                else\n                    transformData.eulerOrder = 'ZYX';\n                if ('Lcl_Translation' in modelNode)\n                    transformData.translation = modelNode.Lcl_Translation.value;\n                if ('PreRotation' in modelNode)\n                    transformData.preRotation = modelNode.PreRotation.value;\n                if ('Lcl_Rotation' in modelNode)\n                    transformData.rotation = modelNode.Lcl_Rotation.value;\n                if ('PostRotation' in modelNode)\n                    transformData.postRotation = modelNode.PostRotation.value;\n                if ('Lcl_Scaling' in modelNode)\n                    transformData.scale = modelNode.Lcl_Scaling.value;\n                if ('ScalingOffset' in modelNode)\n                    transformData.scalingOffset = modelNode.ScalingOffset.value;\n                if ('ScalingPivot' in modelNode)\n                    transformData.scalingPivot = modelNode.ScalingPivot.value;\n                if ('RotationOffset' in modelNode)\n                    transformData.rotationOffset = modelNode.RotationOffset.value;\n                if ('RotationPivot' in modelNode)\n                    transformData.rotationPivot = modelNode.RotationPivot.value;\n                model.userData.transformData = transformData;\n            },\n            setLookAtProperties: function (model, modelNode) {\n                if ('LookAtProperty' in modelNode) {\n                    var children = connections.get(model.ID).children;\n                    children.forEach(function (child) {\n                        if (child.relationship === 'LookAtProperty') {\n                            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n                            if ('Lcl_Translation' in lookAtTarget) {\n                                var pos = lookAtTarget.Lcl_Translation.value;\n                                if (model.target !== undefined) {\n                                    model.target.position.fromArray(pos);\n                                    sceneGraph.add(model.target);\n                                } else {\n                                    model.lookAt(new THREE.Vector3().fromArray(pos));\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            bindSkeleton: function (skeletons, geometryMap, modelMap) {\n                var bindMatrices = this.parsePoseNodes();\n                for (var ID in skeletons) {\n                    var skeleton = skeletons[ID];\n                    var parents = connections.get(parseInt(skeleton.ID)).parents;\n                    parents.forEach(function (parent) {\n                        if (geometryMap.has(parent.ID)) {\n                            var geoID = parent.ID;\n                            var geoRelationships = connections.get(geoID);\n                            geoRelationships.parents.forEach(function (geoConnParent) {\n                                if (modelMap.has(geoConnParent.ID)) {\n                                    var model = modelMap.get(geoConnParent.ID);\n                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            parsePoseNodes: function () {\n                var bindMatrices = {};\n                if ('Pose' in fbxTree.Objects) {\n                    var BindPoseNode = fbxTree.Objects.Pose;\n                    for (var nodeID in BindPoseNode) {\n                        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n                            var poseNodes = BindPoseNode[nodeID].PoseNode;\n                            if (Array.isArray(poseNodes)) {\n                                poseNodes.forEach(function (poseNode) {\n                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n                                });\n                            } else {\n                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n                            }\n                        }\n                    }\n                }\n                return bindMatrices;\n            },\n            createAmbientLight: function () {\n                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n                    var r = ambientColor[0];\n                    var g = ambientColor[1];\n                    var b = ambientColor[2];\n                    if (r !== 0 || g !== 0 || b !== 0) {\n                        var color = new THREE.Color(r, g, b);\n                        sceneGraph.add(new THREE.AmbientLight(color, 1));\n                    }\n                }\n            },\n            setupMorphMaterials: function () {\n                var self = this;\n                sceneGraph.traverse(function (child) {\n                    if (child.isMesh) {\n                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n                            if (Array.isArray(child.material)) {\n                                child.material.forEach(function (material, i) {\n                                    self.setupMorphMaterial(child, material, i);\n                                });\n                            } else {\n                                self.setupMorphMaterial(child, child.material);\n                            }\n                        }\n                    }\n                });\n            },\n            setupMorphMaterial: function (child, material, index) {\n                var uuid = child.uuid;\n                var matUuid = material.uuid;\n                var sharedMat = false;\n                sceneGraph.traverse(function (node) {\n                    if (node.isMesh) {\n                        if (Array.isArray(node.material)) {\n                            node.material.forEach(function (mat) {\n                                if (mat.uuid === matUuid && node.uuid !== uuid)\n                                    sharedMat = true;\n                            });\n                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)\n                            sharedMat = true;\n                    }\n                });\n                if (sharedMat === true) {\n                    var clonedMat = material.clone();\n                    clonedMat.morphTargets = true;\n                    if (index === undefined)\n                        child.material = clonedMat;\n                    else\n                        child.material[index] = clonedMat;\n                } else\n                    material.morphTargets = true;\n            }\n        };\n        function GeometryParser() {\n        }\n        GeometryParser.prototype = {\n            constructor: GeometryParser,\n            parse: function (deformers) {\n                var geometryMap = new Map();\n                if ('Geometry' in fbxTree.Objects) {\n                    var geoNodes = fbxTree.Objects.Geometry;\n                    for (var nodeID in geoNodes) {\n                        var relationships = connections.get(parseInt(nodeID));\n                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n                        geometryMap.set(parseInt(nodeID), geo);\n                    }\n                }\n                return geometryMap;\n            },\n            parseGeometry: function (relationships, geoNode, deformers) {\n                switch (geoNode.attrType) {\n                case 'Mesh':\n                    return this.parseMeshGeometry(relationships, geoNode, deformers);\n                    break;\n                case 'NurbsCurve':\n                    return this.parseNurbsGeometry(geoNode);\n                    break;\n                }\n            },\n            parseMeshGeometry: function (relationships, geoNode, deformers) {\n                var skeletons = deformers.skeletons;\n                var morphTargets = [];\n                var modelNodes = relationships.parents.map(function (parent) {\n                    return fbxTree.Objects.Model[parent.ID];\n                });\n                if (modelNodes.length === 0)\n                    return;\n                var skeleton = relationships.children.reduce(function (skeleton, child) {\n                    if (skeletons[child.ID] !== undefined)\n                        skeleton = skeletons[child.ID];\n                    return skeleton;\n                }, null);\n                relationships.children.forEach(function (child) {\n                    if (deformers.morphTargets[child.ID] !== undefined) {\n                        morphTargets.push(deformers.morphTargets[child.ID]);\n                    }\n                });\n                var modelNode = modelNodes[0];\n                var transformData = {};\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('GeometricTranslation' in modelNode)\n                    transformData.translation = modelNode.GeometricTranslation.value;\n                if ('GeometricRotation' in modelNode)\n                    transformData.rotation = modelNode.GeometricRotation.value;\n                if ('GeometricScaling' in modelNode)\n                    transformData.scale = modelNode.GeometricScaling.value;\n                var transform = generateTransform(transformData);\n                return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n            },\n            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n                var geo = new THREE.BufferGeometry();\n                if (geoNode.attrName)\n                    geo.name = geoNode.attrName;\n                var geoInfo = this.parseGeoNode(geoNode, skeleton);\n                var buffers = this.genBuffers(geoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n                positionAttribute.applyMatrix4(preTransform);\n                geo.setAttribute('position', positionAttribute);\n                if (buffers.colors.length > 0) {\n                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n                }\n                if (skeleton) {\n                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));\n                    geo.FBX_Deformer = skeleton;\n                }\n                if (buffers.normal.length > 0) {\n                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n                    normalAttribute.applyNormalMatrix(normalMatrix);\n                    geo.setAttribute('normal', normalAttribute);\n                }\n                buffers.uvs.forEach(function (uvBuffer, i) {\n                    var name = 'uv' + (i + 1).toString();\n                    if (i === 0) {\n                        name = 'uv';\n                    }\n                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n                });\n                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                    var prevMaterialIndex = buffers.materialIndex[0];\n                    var startIndex = 0;\n                    buffers.materialIndex.forEach(function (currentIndex, i) {\n                        if (currentIndex !== prevMaterialIndex) {\n                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n                            prevMaterialIndex = currentIndex;\n                            startIndex = i;\n                        }\n                    });\n                    if (geo.groups.length > 0) {\n                        var lastGroup = geo.groups[geo.groups.length - 1];\n                        var lastIndex = lastGroup.start + lastGroup.count;\n                        if (lastIndex !== buffers.materialIndex.length) {\n                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n                        }\n                    }\n                    if (geo.groups.length === 0) {\n                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n                    }\n                }\n                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n                return geo;\n            },\n            parseGeoNode: function (geoNode, skeleton) {\n                var geoInfo = {};\n                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n                if (geoNode.LayerElementColor) {\n                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n                }\n                if (geoNode.LayerElementMaterial) {\n                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n                }\n                if (geoNode.LayerElementNormal) {\n                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n                }\n                if (geoNode.LayerElementUV) {\n                    geoInfo.uv = [];\n                    var i = 0;\n                    while (geoNode.LayerElementUV[i]) {\n                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n                        i++;\n                    }\n                }\n                geoInfo.weightTable = {};\n                if (skeleton !== null) {\n                    geoInfo.skeleton = skeleton;\n                    skeleton.rawBones.forEach(function (rawBone, i) {\n                        rawBone.indices.forEach(function (index, j) {\n                            if (geoInfo.weightTable[index] === undefined)\n                                geoInfo.weightTable[index] = [];\n                            geoInfo.weightTable[index].push({\n                                id: i,\n                                weight: rawBone.weights[j]\n                            });\n                        });\n                    });\n                }\n                return geoInfo;\n            },\n            genBuffers: function (geoInfo) {\n                var buffers = {\n                    vertex: [],\n                    normal: [],\n                    colors: [],\n                    uvs: [],\n                    materialIndex: [],\n                    vertexWeights: [],\n                    weightsIndices: []\n                };\n                var polygonIndex = 0;\n                var faceLength = 0;\n                var displayedWeightsWarning = false;\n                var facePositionIndexes = [];\n                var faceNormals = [];\n                var faceColors = [];\n                var faceUVs = [];\n                var faceWeights = [];\n                var faceWeightIndices = [];\n                var self = this;\n                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n                    var endOfFace = false;\n                    if (vertexIndex < 0) {\n                        vertexIndex = vertexIndex ^ -1;\n                        endOfFace = true;\n                    }\n                    var weightIndices = [];\n                    var weights = [];\n                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n                    if (geoInfo.color) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n                        faceColors.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.skeleton) {\n                        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n                                weights.push(wt.weight);\n                                weightIndices.push(wt.id);\n                            });\n                        }\n                        if (weights.length > 4) {\n                            if (!displayedWeightsWarning) {\n                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n                                displayedWeightsWarning = true;\n                            }\n                            var wIndex = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            var Weight = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            weights.forEach(function (weight, weightIndex) {\n                                var currentWeight = weight;\n                                var currentIndex = weightIndices[weightIndex];\n                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                                    if (currentWeight > comparedWeight) {\n                                        comparedWeightArray[comparedWeightIndex] = currentWeight;\n                                        currentWeight = comparedWeight;\n                                        var tmp = wIndex[comparedWeightIndex];\n                                        wIndex[comparedWeightIndex] = currentIndex;\n                                        currentIndex = tmp;\n                                    }\n                                });\n                            });\n                            weightIndices = wIndex;\n                            weights = Weight;\n                        }\n                        while (weights.length < 4) {\n                            weights.push(0);\n                            weightIndices.push(0);\n                        }\n                        for (var i = 0; i < 4; ++i) {\n                            faceWeights.push(weights[i]);\n                            faceWeightIndices.push(weightIndices[i]);\n                        }\n                    }\n                    if (geoInfo.normal) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n                        faceNormals.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, i) {\n                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n                            if (faceUVs[i] === undefined) {\n                                faceUVs[i] = [];\n                            }\n                            faceUVs[i].push(data[0]);\n                            faceUVs[i].push(data[1]);\n                        });\n                    }\n                    faceLength++;\n                    if (endOfFace) {\n                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n                        polygonIndex++;\n                        faceLength = 0;\n                        facePositionIndexes = [];\n                        faceNormals = [];\n                        faceColors = [];\n                        faceUVs = [];\n                        faceWeights = [];\n                        faceWeightIndices = [];\n                    }\n                });\n                return buffers;\n            },\n            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n                for (var i = 2; i < faceLength; i++) {\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n                    if (geoInfo.skeleton) {\n                        buffers.vertexWeights.push(faceWeights[0]);\n                        buffers.vertexWeights.push(faceWeights[1]);\n                        buffers.vertexWeights.push(faceWeights[2]);\n                        buffers.vertexWeights.push(faceWeights[3]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n                        buffers.vertexWeights.push(faceWeights[i * 4]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[0]);\n                        buffers.weightsIndices.push(faceWeightIndices[1]);\n                        buffers.weightsIndices.push(faceWeightIndices[2]);\n                        buffers.weightsIndices.push(faceWeightIndices[3]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n                    }\n                    if (geoInfo.color) {\n                        buffers.colors.push(faceColors[0]);\n                        buffers.colors.push(faceColors[1]);\n                        buffers.colors.push(faceColors[2]);\n                        buffers.colors.push(faceColors[(i - 1) * 3]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n                        buffers.colors.push(faceColors[i * 3]);\n                        buffers.colors.push(faceColors[i * 3 + 1]);\n                        buffers.colors.push(faceColors[i * 3 + 2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                    }\n                    if (geoInfo.normal) {\n                        buffers.normal.push(faceNormals[0]);\n                        buffers.normal.push(faceNormals[1]);\n                        buffers.normal.push(faceNormals[2]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n                        buffers.normal.push(faceNormals[i * 3]);\n                        buffers.normal.push(faceNormals[i * 3 + 1]);\n                        buffers.normal.push(faceNormals[i * 3 + 2]);\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, j) {\n                            if (buffers.uvs[j] === undefined)\n                                buffers.uvs[j] = [];\n                            buffers.uvs[j].push(faceUVs[j][0]);\n                            buffers.uvs[j].push(faceUVs[j][1]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n                        });\n                    }\n                }\n            },\n            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n                if (morphTargets.length === 0)\n                    return;\n                parentGeo.morphTargetsRelative = true;\n                parentGeo.morphAttributes.position = [];\n                var self = this;\n                morphTargets.forEach(function (morphTarget) {\n                    morphTarget.rawTargets.forEach(function (rawTarget) {\n                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n                        if (morphGeoNode !== undefined) {\n                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n                        }\n                    });\n                });\n            },\n            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n                var length = parentGeo.attributes.position.count * 3;\n                var morphPositions = new Float32Array(length);\n                for (var i = 0; i < indices.length; i++) {\n                    var morphIndex = indices[i] * 3;\n                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n                }\n                var morphGeoInfo = {\n                    vertexIndices: vertexIndices,\n                    vertexPositions: morphPositions\n                };\n                var morphBuffers = this.genBuffers(morphGeoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n                positionAttribute.name = name || morphGeoNode.attrName;\n                positionAttribute.applyMatrix4(preTransform);\n                parentGeo.morphAttributes.position.push(positionAttribute);\n            },\n            parseNormals: function (NormalNode) {\n                var mappingType = NormalNode.MappingInformationType;\n                var referenceType = NormalNode.ReferenceInformationType;\n                var buffer = NormalNode.Normals.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    if ('NormalIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalIndex.a;\n                    } else if ('NormalsIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalsIndex.a;\n                    }\n                }\n                return {\n                    dataSize: 3,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseUVs: function (UVNode) {\n                var mappingType = UVNode.MappingInformationType;\n                var referenceType = UVNode.ReferenceInformationType;\n                var buffer = UVNode.UV.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = UVNode.UVIndex.a;\n                }\n                return {\n                    dataSize: 2,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseVertexColors: function (ColorNode) {\n                var mappingType = ColorNode.MappingInformationType;\n                var referenceType = ColorNode.ReferenceInformationType;\n                var buffer = ColorNode.Colors.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = ColorNode.ColorIndex.a;\n                }\n                return {\n                    dataSize: 4,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseMaterialIndices: function (MaterialNode) {\n                var mappingType = MaterialNode.MappingInformationType;\n                var referenceType = MaterialNode.ReferenceInformationType;\n                if (mappingType === 'NoMappingInformation') {\n                    return {\n                        dataSize: 1,\n                        buffer: [0],\n                        indices: [0],\n                        mappingType: 'AllSame',\n                        referenceType: referenceType\n                    };\n                }\n                var materialIndexBuffer = MaterialNode.Materials.a;\n                var materialIndices = [];\n                for (var i = 0; i < materialIndexBuffer.length; ++i) {\n                    materialIndices.push(i);\n                }\n                return {\n                    dataSize: 1,\n                    buffer: materialIndexBuffer,\n                    indices: materialIndices,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseNurbsGeometry: function (geoNode) {\n                if (c.NURBSCurve === undefined) {\n                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n                    return new THREE.BufferGeometry();\n                }\n                var order = parseInt(geoNode.Order);\n                if (isNaN(order)) {\n                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n                    return new THREE.BufferGeometry();\n                }\n                var degree = order - 1;\n                var knots = geoNode.KnotVector.a;\n                var controlPoints = [];\n                var pointsValues = geoNode.Points.a;\n                for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n                }\n                var startKnot, endKnot;\n                if (geoNode.Form === 'Closed') {\n                    controlPoints.push(controlPoints[0]);\n                } else if (geoNode.Form === 'Periodic') {\n                    startKnot = degree;\n                    endKnot = knots.length - 1 - startKnot;\n                    for (var i = 0; i < degree; ++i) {\n                        controlPoints.push(controlPoints[i]);\n                    }\n                }\n                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n                var vertices = curve.getPoints(controlPoints.length * 7);\n                var positions = new Float32Array(vertices.length * 3);\n                vertices.forEach(function (vertex, i) {\n                    vertex.toArray(positions, i * 3);\n                });\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n                return geometry;\n            }\n        };\n        function AnimationParser() {\n        }\n        AnimationParser.prototype = {\n            constructor: AnimationParser,\n            parse: function () {\n                var animationClips = [];\n                var rawClips = this.parseClips();\n                if (rawClips !== undefined) {\n                    for (var key in rawClips) {\n                        var rawClip = rawClips[key];\n                        var clip = this.addClip(rawClip);\n                        animationClips.push(clip);\n                    }\n                }\n                return animationClips;\n            },\n            parseClips: function () {\n                if (fbxTree.Objects.AnimationCurve === undefined)\n                    return undefined;\n                var curveNodesMap = this.parseAnimationCurveNodes();\n                this.parseAnimationCurves(curveNodesMap);\n                var layersMap = this.parseAnimationLayers(curveNodesMap);\n                var rawClips = this.parseAnimStacks(layersMap);\n                return rawClips;\n            },\n            parseAnimationCurveNodes: function () {\n                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n                var curveNodesMap = new Map();\n                for (var nodeID in rawCurveNodes) {\n                    var rawCurveNode = rawCurveNodes[nodeID];\n                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n                        var curveNode = {\n                            id: rawCurveNode.id,\n                            attr: rawCurveNode.attrName,\n                            curves: {}\n                        };\n                        curveNodesMap.set(curveNode.id, curveNode);\n                    }\n                }\n                return curveNodesMap;\n            },\n            parseAnimationCurves: function (curveNodesMap) {\n                var rawCurves = fbxTree.Objects.AnimationCurve;\n                for (var nodeID in rawCurves) {\n                    var animationCurve = {\n                        id: rawCurves[nodeID].id,\n                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n                        values: rawCurves[nodeID].KeyValueFloat.a\n                    };\n                    var relationships = connections.get(animationCurve.id);\n                    if (relationships !== undefined) {\n                        var animationCurveID = relationships.parents[0].ID;\n                        var animationCurveRelationship = relationships.parents[0].relationship;\n                        if (animationCurveRelationship.match(/X/)) {\n                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Y/)) {\n                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Z/)) {\n                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n                        }\n                    }\n                }\n            },\n            parseAnimationLayers: function (curveNodesMap) {\n                var rawLayers = fbxTree.Objects.AnimationLayer;\n                var layersMap = new Map();\n                for (var nodeID in rawLayers) {\n                    var layerCurveNodes = [];\n                    var connection = connections.get(parseInt(nodeID));\n                    if (connection !== undefined) {\n                        var children = connection.children;\n                        children.forEach(function (child, i) {\n                            if (curveNodesMap.has(child.ID)) {\n                                var curveNode = curveNodesMap.get(child.ID);\n                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        if (modelID !== undefined) {\n                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                                            var node = {\n                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                                ID: rawModel.id,\n                                                initialPosition: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialRotation: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialScale: [\n                                                    1,\n                                                    1,\n                                                    1\n                                                ]\n                                            };\n                                            sceneGraph.traverse(function (child) {\n                                                if (child.ID === rawModel.id) {\n                                                    node.transform = child.matrix;\n                                                    if (child.userData.transformData)\n                                                        node.eulerOrder = child.userData.transformData.eulerOrder;\n                                                }\n                                            });\n                                            if (!node.transform)\n                                                node.transform = new THREE.Matrix4();\n                                            if ('PreRotation' in rawModel)\n                                                node.preRotation = rawModel.PreRotation.value;\n                                            if ('PostRotation' in rawModel)\n                                                node.postRotation = rawModel.PostRotation.value;\n                                            layerCurveNodes[i] = node;\n                                        }\n                                    }\n                                    if (layerCurveNodes[i])\n                                        layerCurveNodes[i][curveNode.attr] = curveNode;\n                                } else if (curveNode.curves.morph !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        var morpherID = connections.get(deformerID).parents[0].ID;\n                                        var geoID = connections.get(morpherID).parents[0].ID;\n                                        var modelID = connections.get(geoID).parents[0].ID;\n                                        var rawModel = fbxTree.Objects.Model[modelID];\n                                        var node = {\n                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                                        };\n                                        layerCurveNodes[i] = node;\n                                    }\n                                    layerCurveNodes[i][curveNode.attr] = curveNode;\n                                }\n                            }\n                        });\n                        layersMap.set(parseInt(nodeID), layerCurveNodes);\n                    }\n                }\n                return layersMap;\n            },\n            parseAnimStacks: function (layersMap) {\n                var rawStacks = fbxTree.Objects.AnimationStack;\n                var rawClips = {};\n                for (var nodeID in rawStacks) {\n                    var children = connections.get(parseInt(nodeID)).children;\n                    if (children.length > 1) {\n                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n                    }\n                    var layer = layersMap.get(children[0].ID);\n                    rawClips[nodeID] = {\n                        name: rawStacks[nodeID].attrName,\n                        layer: layer\n                    };\n                }\n                return rawClips;\n            },\n            addClip: function (rawClip) {\n                var tracks = [];\n                var self = this;\n                rawClip.layer.forEach(function (rawTracks) {\n                    tracks = tracks.concat(self.generateTracks(rawTracks));\n                });\n                return new THREE.AnimationClip(rawClip.name, -1, tracks);\n            },\n            generateTracks: function (rawTracks) {\n                var tracks = [];\n                var initialPosition = new THREE.Vector3();\n                var initialRotation = new THREE.Quaternion();\n                var initialScale = new THREE.Vector3();\n                if (rawTracks.transform)\n                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n                initialPosition = initialPosition.toArray();\n                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n                initialScale = initialScale.toArray();\n                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n                    if (positionTrack !== undefined)\n                        tracks.push(positionTrack);\n                }\n                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n                    if (rotationTrack !== undefined)\n                        tracks.push(rotationTrack);\n                }\n                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n                    if (scaleTrack !== undefined)\n                        tracks.push(scaleTrack);\n                }\n                if (rawTracks.DeformPercent !== undefined) {\n                    var morphTrack = this.generateMorphTrack(rawTracks);\n                    if (morphTrack !== undefined)\n                        tracks.push(morphTrack);\n                }\n                return tracks;\n            },\n            generateVectorTrack: function (modelName, curves, initialValue, type) {\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n            },\n            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n                if (curves.x !== undefined) {\n                    this.interpolateRotations(curves.x);\n                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.y !== undefined) {\n                    this.interpolateRotations(curves.y);\n                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.z !== undefined) {\n                    this.interpolateRotations(curves.z);\n                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\n                }\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                if (preRotation !== undefined) {\n                    preRotation = preRotation.map(THREE.MathUtils.degToRad);\n                    preRotation.push(eulerOrder);\n                    preRotation = new THREE.Euler().fromArray(preRotation);\n                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);\n                }\n                if (postRotation !== undefined) {\n                    postRotation = postRotation.map(THREE.MathUtils.degToRad);\n                    postRotation.push(eulerOrder);\n                    postRotation = new THREE.Euler().fromArray(postRotation);\n                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();\n                }\n                var quaternion = new THREE.Quaternion();\n                var euler = new THREE.Euler();\n                var quaternionValues = [];\n                for (var i = 0; i < values.length; i += 3) {\n                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n                    quaternion.setFromEuler(euler);\n                    if (preRotation !== undefined)\n                        quaternion.premultiply(preRotation);\n                    if (postRotation !== undefined)\n                        quaternion.multiply(postRotation);\n                    quaternion.toArray(quaternionValues, i / 3 * 4);\n                }\n                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n            },\n            generateMorphTrack: function (rawTracks) {\n                var curves = rawTracks.DeformPercent.curves.morph;\n                var values = curves.values.map(function (val) {\n                    return val / 100;\n                });\n                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n            },\n            getTimesForAllAxes: function (curves) {\n                var times = [];\n                if (curves.x !== undefined)\n                    times = times.concat(curves.x.times);\n                if (curves.y !== undefined)\n                    times = times.concat(curves.y.times);\n                if (curves.z !== undefined)\n                    times = times.concat(curves.z.times);\n                times = times.sort(function (a, b) {\n                    return a - b;\n                }).filter(function (elem, index, array) {\n                    return array.indexOf(elem) == index;\n                });\n                return times;\n            },\n            getKeyframeTrackValues: function (times, curves, initialValue) {\n                var prevValue = initialValue;\n                var values = [];\n                var xIndex = -1;\n                var yIndex = -1;\n                var zIndex = -1;\n                times.forEach(function (time) {\n                    if (curves.x)\n                        xIndex = curves.x.times.indexOf(time);\n                    if (curves.y)\n                        yIndex = curves.y.times.indexOf(time);\n                    if (curves.z)\n                        zIndex = curves.z.times.indexOf(time);\n                    if (xIndex !== -1) {\n                        var xValue = curves.x.values[xIndex];\n                        values.push(xValue);\n                        prevValue[0] = xValue;\n                    } else {\n                        values.push(prevValue[0]);\n                    }\n                    if (yIndex !== -1) {\n                        var yValue = curves.y.values[yIndex];\n                        values.push(yValue);\n                        prevValue[1] = yValue;\n                    } else {\n                        values.push(prevValue[1]);\n                    }\n                    if (zIndex !== -1) {\n                        var zValue = curves.z.values[zIndex];\n                        values.push(zValue);\n                        prevValue[2] = zValue;\n                    } else {\n                        values.push(prevValue[2]);\n                    }\n                });\n                return values;\n            },\n            interpolateRotations: function (curve) {\n                for (var i = 1; i < curve.values.length; i++) {\n                    var initialValue = curve.values[i - 1];\n                    var valuesSpan = curve.values[i] - initialValue;\n                    var absoluteSpan = Math.abs(valuesSpan);\n                    if (absoluteSpan >= 180) {\n                        var numSubIntervals = absoluteSpan / 180;\n                        var step = valuesSpan / numSubIntervals;\n                        var nextValue = initialValue + step;\n                        var initialTime = curve.times[i - 1];\n                        var timeSpan = curve.times[i] - initialTime;\n                        var interval = timeSpan / numSubIntervals;\n                        var nextTime = initialTime + interval;\n                        var interpolatedTimes = [];\n                        var interpolatedValues = [];\n                        while (nextTime < curve.times[i]) {\n                            interpolatedTimes.push(nextTime);\n                            nextTime += interval;\n                            interpolatedValues.push(nextValue);\n                            nextValue += step;\n                        }\n                        curve.times = inject(curve.times, i, interpolatedTimes);\n                        curve.values = inject(curve.values, i, interpolatedValues);\n                    }\n                }\n            }\n        };\n        function TextParser() {\n        }\n        TextParser.prototype = {\n            constructor: TextParser,\n            getPrevNode: function () {\n                return this.nodeStack[this.currentIndent - 2];\n            },\n            getCurrentNode: function () {\n                return this.nodeStack[this.currentIndent - 1];\n            },\n            getCurrentProp: function () {\n                return this.currentProp;\n            },\n            pushStack: function (node) {\n                this.nodeStack.push(node);\n                this.currentIndent += 1;\n            },\n            popStack: function () {\n                this.nodeStack.pop();\n                this.currentIndent -= 1;\n            },\n            setCurrentProp: function (val, name) {\n                this.currentProp = val;\n                this.currentPropName = name;\n            },\n            parse: function (text) {\n                this.currentIndent = 0;\n                this.allNodes = new FBXTree();\n                this.nodeStack = [];\n                this.currentProp = [];\n                this.currentPropName = '';\n                var self = this;\n                var split = text.split(/[\\r\\n]+/);\n                split.forEach(function (line, i) {\n                    var matchComment = line.match(/^[\\s\\t]*;/);\n                    var matchEmpty = line.match(/^[\\s\\t]*$/);\n                    if (matchComment || matchEmpty)\n                        return;\n                    var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n                    var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n                    var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n                    if (matchBeginning) {\n                        self.parseNodeBegin(line, matchBeginning);\n                    } else if (matchProperty) {\n                        self.parseNodeProperty(line, matchProperty, split[++i]);\n                    } else if (matchEnd) {\n                        self.popStack();\n                    } else if (line.match(/^[^\\s\\t}]/)) {\n                        self.parseNodePropertyContinued(line);\n                    }\n                });\n                return this.allNodes;\n            },\n            parseNodeBegin: function (line, property) {\n                var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n                var nodeAttrs = property[2].split(',').map(function (attr) {\n                    return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n                });\n                var node = { name: nodeName };\n                var attrs = this.parseNodeAttr(nodeAttrs);\n                var currentNode = this.getCurrentNode();\n                if (this.currentIndent === 0) {\n                    this.allNodes.add(nodeName, node);\n                } else {\n                    if (nodeName in currentNode) {\n                        if (nodeName === 'PoseNode') {\n                            currentNode.PoseNode.push(node);\n                        } else if (currentNode[nodeName].id !== undefined) {\n                            currentNode[nodeName] = {};\n                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n                        }\n                        if (attrs.id !== '')\n                            currentNode[nodeName][attrs.id] = node;\n                    } else if (typeof attrs.id === 'number') {\n                        currentNode[nodeName] = {};\n                        currentNode[nodeName][attrs.id] = node;\n                    } else if (nodeName !== 'Properties70') {\n                        if (nodeName === 'PoseNode')\n                            currentNode[nodeName] = [node];\n                        else\n                            currentNode[nodeName] = node;\n                    }\n                }\n                if (typeof attrs.id === 'number')\n                    node.id = attrs.id;\n                if (attrs.name !== '')\n                    node.attrName = attrs.name;\n                if (attrs.type !== '')\n                    node.attrType = attrs.type;\n                this.pushStack(node);\n            },\n            parseNodeAttr: function (attrs) {\n                var id = attrs[0];\n                if (attrs[0] !== '') {\n                    id = parseInt(attrs[0]);\n                    if (isNaN(id)) {\n                        id = attrs[0];\n                    }\n                }\n                var name = '', type = '';\n                if (attrs.length > 1) {\n                    name = attrs[1].replace(/^(\\w+)::/, '');\n                    type = attrs[2];\n                }\n                return {\n                    id: id,\n                    name: name,\n                    type: type\n                };\n            },\n            parseNodeProperty: function (line, property, contentLine) {\n                var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n                var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n                if (propName === 'Content' && propValue === ',') {\n                    propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n                }\n                var currentNode = this.getCurrentNode();\n                var parentName = currentNode.name;\n                if (parentName === 'Properties70') {\n                    this.parseNodeSpecialProperty(line, propName, propValue);\n                    return;\n                }\n                if (propName === 'C') {\n                    var connProps = propValue.split(',').slice(1);\n                    var from = parseInt(connProps[0]);\n                    var to = parseInt(connProps[1]);\n                    var rest = propValue.split(',').slice(3);\n                    rest = rest.map(function (elem) {\n                        return elem.trim().replace(/^\"/, '');\n                    });\n                    propName = 'connections';\n                    propValue = [\n                        from,\n                        to\n                    ];\n                    append(propValue, rest);\n                    if (currentNode[propName] === undefined) {\n                        currentNode[propName] = [];\n                    }\n                }\n                if (propName === 'Node')\n                    currentNode.id = propValue;\n                if (propName in currentNode && Array.isArray(currentNode[propName])) {\n                    currentNode[propName].push(propValue);\n                } else {\n                    if (propName !== 'a')\n                        currentNode[propName] = propValue;\n                    else\n                        currentNode.a = propValue;\n                }\n                this.setCurrentProp(currentNode, propName);\n                if (propName === 'a' && propValue.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(propValue);\n                }\n            },\n            parseNodePropertyContinued: function (line) {\n                var currentNode = this.getCurrentNode();\n                currentNode.a += line;\n                if (line.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(currentNode.a);\n                }\n            },\n            parseNodeSpecialProperty: function (line, propName, propValue) {\n                var props = propValue.split('\",').map(function (prop) {\n                    return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n                });\n                var innerPropName = props[0];\n                var innerPropType1 = props[1];\n                var innerPropType2 = props[2];\n                var innerPropFlag = props[3];\n                var innerPropValue = props[4];\n                switch (innerPropType1) {\n                case 'int':\n                case 'enum':\n                case 'bool':\n                case 'ULongLong':\n                case 'double':\n                case 'Number':\n                case 'FieldOfView':\n                    innerPropValue = parseFloat(innerPropValue);\n                    break;\n                case 'Color':\n                case 'ColorRGB':\n                case 'Vector3D':\n                case 'Lcl_Translation':\n                case 'Lcl_Rotation':\n                case 'Lcl_Scaling':\n                    innerPropValue = parseNumberArray(innerPropValue);\n                    break;\n                }\n                this.getPrevNode()[innerPropName] = {\n                    'type': innerPropType1,\n                    'type2': innerPropType2,\n                    'flag': innerPropFlag,\n                    'value': innerPropValue\n                };\n                this.setCurrentProp(this.getPrevNode(), innerPropName);\n            }\n        };\n        function BinaryParser() {\n        }\n        BinaryParser.prototype = {\n            constructor: BinaryParser,\n            parse: function (buffer) {\n                var reader = new BinaryReader(buffer);\n                reader.skip(23);\n                var version = reader.getUint32();\n                console.log('THREE.FBXLoader: FBX binary version: ' + version);\n                var allNodes = new FBXTree();\n                while (!this.endOfContent(reader)) {\n                    var node = this.parseNode(reader, version);\n                    if (node !== null)\n                        allNodes.add(node.name, node);\n                }\n                return allNodes;\n            },\n            endOfContent: function (reader) {\n                if (reader.size() % 16 === 0) {\n                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n                } else {\n                    return reader.getOffset() + 160 + 16 >= reader.size();\n                }\n            },\n            parseNode: function (reader, version) {\n                var node = {};\n                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var nameLen = reader.getUint8();\n                var name = reader.getString(nameLen);\n                if (endOffset === 0)\n                    return null;\n                var propertyList = [];\n                for (var i = 0; i < numProperties; i++) {\n                    propertyList.push(this.parseProperty(reader));\n                }\n                var id = propertyList.length > 0 ? propertyList[0] : '';\n                var attrName = propertyList.length > 1 ? propertyList[1] : '';\n                var attrType = propertyList.length > 2 ? propertyList[2] : '';\n                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n                while (endOffset > reader.getOffset()) {\n                    var subNode = this.parseNode(reader, version);\n                    if (subNode !== null)\n                        this.parseSubNode(name, node, subNode);\n                }\n                node.propertyList = propertyList;\n                if (typeof id === 'number')\n                    node.id = id;\n                if (attrName !== '')\n                    node.attrName = attrName;\n                if (attrType !== '')\n                    node.attrType = attrType;\n                if (name !== '')\n                    node.name = name;\n                return node;\n            },\n            parseSubNode: function (name, node, subNode) {\n                if (subNode.singleProperty === true) {\n                    var value = subNode.propertyList[0];\n                    if (Array.isArray(value)) {\n                        node[subNode.name] = subNode;\n                        subNode.a = value;\n                    } else {\n                        node[subNode.name] = value;\n                    }\n                } else if (name === 'Connections' && subNode.name === 'C') {\n                    var array = [];\n                    subNode.propertyList.forEach(function (property, i) {\n                        if (i !== 0)\n                            array.push(property);\n                    });\n                    if (node.connections === undefined) {\n                        node.connections = [];\n                    }\n                    node.connections.push(array);\n                } else if (subNode.name === 'Properties70') {\n                    var keys = Object.keys(subNode);\n                    keys.forEach(function (key) {\n                        node[key] = subNode[key];\n                    });\n                } else if (name === 'Properties70' && subNode.name === 'P') {\n                    var innerPropName = subNode.propertyList[0];\n                    var innerPropType1 = subNode.propertyList[1];\n                    var innerPropType2 = subNode.propertyList[2];\n                    var innerPropFlag = subNode.propertyList[3];\n                    var innerPropValue;\n                    if (innerPropName.indexOf('Lcl ') === 0)\n                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1.indexOf('Lcl ') === 0)\n                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n                        innerPropValue = [\n                            subNode.propertyList[4],\n                            subNode.propertyList[5],\n                            subNode.propertyList[6]\n                        ];\n                    } else {\n                        innerPropValue = subNode.propertyList[4];\n                    }\n                    node[innerPropName] = {\n                        'type': innerPropType1,\n                        'type2': innerPropType2,\n                        'flag': innerPropFlag,\n                        'value': innerPropValue\n                    };\n                } else if (node[subNode.name] === undefined) {\n                    if (typeof subNode.id === 'number') {\n                        node[subNode.name] = {};\n                        node[subNode.name][subNode.id] = subNode;\n                    } else {\n                        node[subNode.name] = subNode;\n                    }\n                } else {\n                    if (subNode.name === 'PoseNode') {\n                        if (!Array.isArray(node[subNode.name])) {\n                            node[subNode.name] = [node[subNode.name]];\n                        }\n                        node[subNode.name].push(subNode);\n                    } else if (node[subNode.name][subNode.id] === undefined) {\n                        node[subNode.name][subNode.id] = subNode;\n                    }\n                }\n            },\n            parseProperty: function (reader) {\n                var type = reader.getString(1);\n                switch (type) {\n                case 'C':\n                    return reader.getBoolean();\n                case 'D':\n                    return reader.getFloat64();\n                case 'F':\n                    return reader.getFloat32();\n                case 'I':\n                    return reader.getInt32();\n                case 'L':\n                    return reader.getInt64();\n                case 'R':\n                    var length = reader.getUint32();\n                    return reader.getArrayBuffer(length);\n                case 'S':\n                    var length = reader.getUint32();\n                    return reader.getString(length);\n                case 'Y':\n                    return reader.getInt16();\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'f':\n                case 'i':\n                case 'l':\n                    var arrayLength = reader.getUint32();\n                    var encoding = reader.getUint32();\n                    var compressedLength = reader.getUint32();\n                    if (encoding === 0) {\n                        switch (type) {\n                        case 'b':\n                        case 'c':\n                            return reader.getBooleanArray(arrayLength);\n                        case 'd':\n                            return reader.getFloat64Array(arrayLength);\n                        case 'f':\n                            return reader.getFloat32Array(arrayLength);\n                        case 'i':\n                            return reader.getInt32Array(arrayLength);\n                        case 'l':\n                            return reader.getInt64Array(arrayLength);\n                        }\n                    }\n                    //if (typeof b.Zlib === 'undefined') {\n                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');\n                    //}\n                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n                    var reader2 = new BinaryReader(inflate.decompress().buffer);\n                    switch (type) {\n                    case 'b':\n                    case 'c':\n                        return reader2.getBooleanArray(arrayLength);\n                    case 'd':\n                        return reader2.getFloat64Array(arrayLength);\n                    case 'f':\n                        return reader2.getFloat32Array(arrayLength);\n                    case 'i':\n                        return reader2.getInt32Array(arrayLength);\n                    case 'l':\n                        return reader2.getInt64Array(arrayLength);\n                    }\n                default:\n                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n                }\n            }\n        };\n        function BinaryReader(buffer, littleEndian) {\n            this.dv = new DataView(buffer);\n            this.offset = 0;\n            this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n        }\n        BinaryReader.prototype = {\n            constructor: BinaryReader,\n            getOffset: function () {\n                return this.offset;\n            },\n            size: function () {\n                return this.dv.buffer.byteLength;\n            },\n            skip: function (length) {\n                this.offset += length;\n            },\n            getBoolean: function () {\n                return (this.getUint8() & 1) === 1;\n            },\n            getBooleanArray: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getBoolean());\n                }\n                return a;\n            },\n            getUint8: function () {\n                var value = this.dv.getUint8(this.offset);\n                this.offset += 1;\n                return value;\n            },\n            getInt16: function () {\n                var value = this.dv.getInt16(this.offset, this.littleEndian);\n                this.offset += 2;\n                return value;\n            },\n            getInt32: function () {\n                var value = this.dv.getInt32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt32());\n                }\n                return a;\n            },\n            getUint32: function () {\n                var value = this.dv.getUint32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                if (high & 2147483648) {\n                    high = ~high & 4294967295;\n                    low = ~low & 4294967295;\n                    if (low === 4294967295)\n                        high = high + 1 & 4294967295;\n                    low = low + 1 & 4294967295;\n                    return -(high * 4294967296 + low);\n                }\n                return high * 4294967296 + low;\n            },\n            getInt64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt64());\n                }\n                return a;\n            },\n            getUint64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                return high * 4294967296 + low;\n            },\n            getFloat32: function () {\n                var value = this.dv.getFloat32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getFloat32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat32());\n                }\n                return a;\n            },\n            getFloat64: function () {\n                var value = this.dv.getFloat64(this.offset, this.littleEndian);\n                this.offset += 8;\n                return value;\n            },\n            getFloat64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat64());\n                }\n                return a;\n            },\n            getArrayBuffer: function (size) {\n                var value = this.dv.buffer.slice(this.offset, this.offset + size);\n                this.offset += size;\n                return value;\n            },\n            getString: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a[i] = this.getUint8();\n                }\n                var nullByte = a.indexOf(0);\n                if (nullByte >= 0)\n                    a = a.slice(0, nullByte);\n                return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n            }\n        };\n        function FBXTree() {\n        }\n        FBXTree.prototype = {\n            constructor: FBXTree,\n            add: function (key, val) {\n                this[key] = val;\n            }\n        };\n        function isFbxFormatBinary(buffer) {\n            var CORRECT = 'Kaydara FBX Binary  \\0';\n            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n        }\n        function isFbxFormatASCII(text) {\n            var CORRECT = [\n                'K',\n                'a',\n                'y',\n                'd',\n                'a',\n                'r',\n                'a',\n                '\\\\',\n                'F',\n                'B',\n                'X',\n                '\\\\',\n                'B',\n                'i',\n                'n',\n                'a',\n                'r',\n                'y',\n                '\\\\',\n                '\\\\'\n            ];\n            var cursor = 0;\n            function read(offset) {\n                var result = text[offset - 1];\n                text = text.slice(cursor + offset);\n                cursor++;\n                return result;\n            }\n            for (var i = 0; i < CORRECT.length; ++i) {\n                var num = read(1);\n                if (num === CORRECT[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function getFbxVersion(text) {\n            var versionRegExp = /FBXVersion: (\\d+)/;\n            var match = text.match(versionRegExp);\n            if (match) {\n                var version = parseInt(match[1]);\n                return version;\n            }\n            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n        }\n        function convertFBXTimeToSeconds(time) {\n            return time / 46186158000;\n        }\n        var dataArray = [];\n        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n            var index;\n            switch (infoObject.mappingType) {\n            case 'ByPolygonVertex':\n                index = polygonVertexIndex;\n                break;\n            case 'ByPolygon':\n                index = polygonIndex;\n                break;\n            case 'ByVertice':\n                index = vertexIndex;\n                break;\n            case 'AllSame':\n                index = infoObject.indices[0];\n                break;\n            default:\n                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n            }\n            if (infoObject.referenceType === 'IndexToDirect')\n                index = infoObject.indices[index];\n            var from = index * infoObject.dataSize;\n            var to = from + infoObject.dataSize;\n            return slice(dataArray, infoObject.buffer, from, to);\n        }\n        var tempEuler = new THREE.Euler();\n        var tempVec = new THREE.Vector3();\n        function generateTransform(transformData) {\n            var lTranslationM = new THREE.Matrix4();\n            var lPreRotationM = new THREE.Matrix4();\n            var lRotationM = new THREE.Matrix4();\n            var lPostRotationM = new THREE.Matrix4();\n            var lScalingM = new THREE.Matrix4();\n            var lScalingPivotM = new THREE.Matrix4();\n            var lScalingOffsetM = new THREE.Matrix4();\n            var lRotationOffsetM = new THREE.Matrix4();\n            var lRotationPivotM = new THREE.Matrix4();\n            var lParentGX = new THREE.Matrix4();\n            var lGlobalT = new THREE.Matrix4();\n            var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n            if (transformData.translation)\n                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n            if (transformData.preRotation) {\n                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.rotation) {\n                var array = transformData.rotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.postRotation) {\n                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.scale)\n                lScalingM.scale(tempVec.fromArray(transformData.scale));\n            if (transformData.scalingOffset)\n                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n            if (transformData.scalingPivot)\n                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n            if (transformData.rotationOffset)\n                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n            if (transformData.rotationPivot)\n                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n            if (transformData.parentMatrixWorld)\n                lParentGX = transformData.parentMatrixWorld;\n            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\n            var lParentGRM = new THREE.Matrix4();\n            lParentGX.extractRotation(lParentGRM);\n            var lParentTM = new THREE.Matrix4();\n            var lLSM;\n            var lParentGSM;\n            var lParentGRSM;\n            lParentTM.copyPosition(lParentGX);\n            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\n            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\n            lLSM = lScalingM;\n            var lGlobalRS;\n            if (inheritType === 0) {\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n            } else if (inheritType === 1) {\n                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n            } else {\n                var lParentLSM = new THREE.Matrix4().copy(lScalingM);\n                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n            }\n            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));\n            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\n            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);\n            lGlobalT.copyPosition(lGlobalTranslation);\n            lTransform = lGlobalT.multiply(lGlobalRS);\n            return lTransform;\n        }\n        function getEulerOrder(order) {\n            order = order || 0;\n            var enums = [\n                'ZYX',\n                'YZX',\n                'XZY',\n                'ZXY',\n                'YXZ',\n                'XYZ'\n            ];\n            if (order === 6) {\n                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n                return enums[0];\n            }\n            return enums[order];\n        }\n        function parseNumberArray(value) {\n            var array = value.split(',').map(function (val) {\n                return parseFloat(val);\n            });\n            return array;\n        }\n        function convertArrayBufferToString(buffer, from, to) {\n            if (from === undefined)\n                from = 0;\n            if (to === undefined)\n                to = buffer.byteLength;\n            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n        }\n        function append(a, b) {\n            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n                a[j] = b[i];\n            }\n        }\n        function slice(a, b, from, to) {\n            for (var i = from, j = 0; i < to; i++, j++) {\n                a[j] = b[i];\n            }\n            return a;\n        }\n        function inject(a1, index, a2) {\n            return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n        }\n        return FBXLoader;\n    }();\n    return FBXLoader;\n});\ndefine('skylark-threejs-ex/loaders/GCodeLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GCodeLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.splitLayer = false;\n    };\n    GCodeLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: GCodeLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var self = this;\n            var loader = new THREE.FileLoader(self.manager);\n            loader.setPath(self.path);\n            loader.load(url, function (text) {\n                onLoad(self.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var state = {\n                x: 0,\n                y: 0,\n                z: 0,\n                e: 0,\n                f: 0,\n                extruding: false,\n                relative: false\n            };\n            var layers = [];\n            var currentLayer = undefined;\n            var pathMaterial = new THREE.LineBasicMaterial({ color: 16711680 });\n            pathMaterial.name = 'path';\n            var extrudingMaterial = new THREE.LineBasicMaterial({ color: 65280 });\n            extrudingMaterial.name = 'extruded';\n            function newLayer(line) {\n                currentLayer = {\n                    vertex: [],\n                    pathVertex: [],\n                    z: line.z\n                };\n                layers.push(currentLayer);\n            }\n            function addSegment(p1, p2) {\n                if (currentLayer === undefined) {\n                    newLayer(p1);\n                }\n                if (line.extruding) {\n                    currentLayer.vertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.vertex.push(p2.x, p2.y, p2.z);\n                } else {\n                    currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n                }\n            }\n            function delta(v1, v2) {\n                return state.relative ? v2 : v2 - v1;\n            }\n            function absolute(v1, v2) {\n                return state.relative ? v1 + v2 : v2;\n            }\n            var lines = data.replace(/;.+/g, '').split('\\n');\n            for (var i = 0; i < lines.length; i++) {\n                var tokens = lines[i].split(' ');\n                var cmd = tokens[0].toUpperCase();\n                var args = {};\n                tokens.splice(1).forEach(function (token) {\n                    if (token[0] !== undefined) {\n                        var key = token[0].toLowerCase();\n                        var value = parseFloat(token.substring(1));\n                        args[key] = value;\n                    }\n                });\n                if (cmd === 'G0' || cmd === 'G1') {\n                    var line = {\n                        x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n                        y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n                        z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n                        e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n                        f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n                    };\n                    if (delta(state.e, line.e) > 0) {\n                        line.extruding = delta(state.e, line.e) > 0;\n                        if (currentLayer == undefined || line.z != currentLayer.z) {\n                            newLayer(line);\n                        }\n                    }\n                    addSegment(state, line);\n                    state = line;\n                } else if (cmd === 'G2' || cmd === 'G3') {\n                } else if (cmd === 'G90') {\n                    state.relative = false;\n                } else if (cmd === 'G91') {\n                    state.relative = true;\n                } else if (cmd === 'G92') {\n                    var line = state;\n                    line.x = args.x !== undefined ? args.x : line.x;\n                    line.y = args.y !== undefined ? args.y : line.y;\n                    line.z = args.z !== undefined ? args.z : line.z;\n                    line.e = args.e !== undefined ? args.e : line.e;\n                    state = line;\n                } else {\n                }\n            }\n            function addObject(vertex, extruding) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertex, 3));\n                var segments = new THREE.LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n                segments.name = 'layer' + i;\n                object.add(segments);\n            }\n            var object = new THREE.Group();\n            object.name = 'gcode';\n            if (this.splitLayer) {\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    addObject(layer.vertex, true);\n                    addObject(layer.pathVertex, false);\n                }\n            } else {\n                var vertex = [], pathVertex = [];\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    vertex = vertex.concat(layer.vertex);\n                    pathVertex = pathVertex.concat(layer.pathVertex);\n                }\n                addObject(vertex, true);\n                addObject(pathVertex, false);\n            }\n            object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            return object;\n        }\n    });\n    return GCodeLoader;\n});\ndefine('skylark-threejs-ex/loaders/GLTFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GLTFLoader = function () {\n        function GLTFLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.dracoLoader = null;\n            this.ddsLoader = null;\n        }\n        GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: GLTFLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var resourcePath;\n                if (this.resourcePath !== '') {\n                    resourcePath = this.resourcePath;\n                } else if (this.path !== '') {\n                    resourcePath = this.path;\n                } else {\n                    resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n                }\n                scope.manager.itemStart(url);\n                var _onError = function (e) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        console.error(e);\n                    }\n                    scope.manager.itemError(url);\n                    scope.manager.itemEnd(url);\n                };\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(this.path);\n                loader.setResponseType('arraybuffer');\n                if (scope.crossOrigin === 'use-credentials') {\n                    loader.setWithCredentials(true);\n                }\n                loader.load(url, function (data) {\n                    try {\n                        scope.parse(data, resourcePath, function (gltf) {\n                            onLoad(gltf);\n                            scope.manager.itemEnd(url);\n                        }, _onError);\n                    } catch (e) {\n                        _onError(e);\n                    }\n                }, onProgress, _onError);\n            },\n            setDRACOLoader: function (dracoLoader) {\n                this.dracoLoader = dracoLoader;\n                return this;\n            },\n            setDDSLoader: function (ddsLoader) {\n                this.ddsLoader = ddsLoader;\n                return this;\n            },\n            parse: function (data, path, onLoad, onError) {\n                var content;\n                var extensions = {};\n                if (typeof data === 'string') {\n                    content = data;\n                } else {\n                    var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n                    if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n                        try {\n                            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n                        } catch (error) {\n                            if (onError)\n                                onError(error);\n                            return;\n                        }\n                        content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n                    } else {\n                        content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                    }\n                }\n                var json = JSON.parse(content);\n                if (json.asset === undefined || json.asset.version[0] < 2) {\n                    if (onError)\n                        onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));\n                    return;\n                }\n                if (json.extensionsUsed) {\n                    for (var i = 0; i < json.extensionsUsed.length; ++i) {\n                        var extensionName = json.extensionsUsed[i];\n                        var extensionsRequired = json.extensionsRequired || [];\n                        switch (extensionName) {\n                        case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n                            extensions[extensionName] = new GLTFLightsExtension(json);\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:\n                            extensions[extensionName] = new GLTFMaterialsClearcoatExtension();\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_UNLIT:\n                            extensions[extensionName] = new GLTFMaterialsUnlitExtension();\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n                            extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n                            break;\n                        case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n                            extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);\n                            break;\n                        case EXTENSIONS.MSFT_TEXTURE_DDS:\n                            extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);\n                            break;\n                        case EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n                            extensions[extensionName] = new GLTFTextureTransformExtension();\n                            break;\n                        case EXTENSIONS.KHR_MESH_QUANTIZATION:\n                            extensions[extensionName] = new GLTFMeshQuantizationExtension();\n                            break;\n                        default:\n                            if (extensionsRequired.indexOf(extensionName) >= 0) {\n                                console.warn('THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".');\n                            }\n                        }\n                    }\n                }\n                var parser = new GLTFParser(json, extensions, {\n                    path: path || this.resourcePath || '',\n                    crossOrigin: this.crossOrigin,\n                    manager: this.manager\n                });\n                parser.parse(onLoad, onError);\n            }\n        });\n        function GLTFRegistry() {\n            var objects = {};\n            return {\n                get: function (key) {\n                    return objects[key];\n                },\n                add: function (key, object) {\n                    objects[key] = object;\n                },\n                remove: function (key) {\n                    delete objects[key];\n                },\n                removeAll: function () {\n                    objects = {};\n                }\n            };\n        }\n        var EXTENSIONS = {\n            KHR_BINARY_GLTF: 'KHR_binary_glTF',\n            KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n            KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n            KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n            KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n            KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n            KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n            MSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n        };\n        function GLTFTextureDDSExtension(ddsLoader) {\n            if (!ddsLoader) {\n                throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader');\n            }\n            this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n            this.ddsLoader = ddsLoader;\n        }\n        function GLTFLightsExtension(json) {\n            this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n            var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};\n            this.lightDefs = extension.lights || [];\n        }\n        GLTFLightsExtension.prototype.loadLight = function (lightIndex) {\n            var lightDef = this.lightDefs[lightIndex];\n            var lightNode;\n            var color = new THREE.Color(16777215);\n            if (lightDef.color !== undefined)\n                color.fromArray(lightDef.color);\n            var range = lightDef.range !== undefined ? lightDef.range : 0;\n            switch (lightDef.type) {\n            case 'directional':\n                lightNode = new THREE.DirectionalLight(color);\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            case 'point':\n                lightNode = new THREE.PointLight(color);\n                lightNode.distance = range;\n                break;\n            case 'spot':\n                lightNode = new THREE.SpotLight(color);\n                lightNode.distance = range;\n                lightDef.spot = lightDef.spot || {};\n                lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n                lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4;\n                lightNode.angle = lightDef.spot.outerConeAngle;\n                lightNode.penumbra = 1 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            default:\n                throw new Error('THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".');\n            }\n            lightNode.position.set(0, 0, 0);\n            lightNode.decay = 2;\n            if (lightDef.intensity !== undefined)\n                lightNode.intensity = lightDef.intensity;\n            lightNode.name = lightDef.name || 'light_' + lightIndex;\n            return Promise.resolve(lightNode);\n        };\n        function GLTFMaterialsUnlitExtension() {\n            this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n        }\n        GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n            return THREE.MeshBasicMaterial;\n        };\n        GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n            var pending = [];\n            materialParams.color = new THREE.Color(1, 1, 1);\n            materialParams.opacity = 1;\n            var metallicRoughness = materialDef.pbrMetallicRoughness;\n            if (metallicRoughness) {\n                if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                    var array = metallicRoughness.baseColorFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (metallicRoughness.baseColorTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n                }\n            }\n            return Promise.all(pending);\n        };\n        function GLTFMaterialsClearcoatExtension() {\n            this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n        }\n        GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {\n            return THREE.MeshPhysicalMaterial;\n        };\n        GLTFMaterialsClearcoatExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n            var pending = [];\n            var extension = materialDef.extensions[this.name];\n            if (extension.clearcoatFactor !== undefined) {\n                materialParams.clearcoat = extension.clearcoatFactor;\n            }\n            if (extension.clearcoatTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatMap', extension.clearcoatTexture));\n            }\n            if (extension.clearcoatRoughnessFactor !== undefined) {\n                materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n            }\n            if (extension.clearcoatRoughnessTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture));\n            }\n            if (extension.clearcoatNormalTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture));\n                if (extension.clearcoatNormalTexture.scale !== undefined) {\n                    var scale = extension.clearcoatNormalTexture.scale;\n                    materialParams.clearcoatNormalScale = new THREE.Vector2(scale, scale);\n                }\n            }\n            return Promise.all(pending);\n        };\n        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n        var BINARY_EXTENSION_HEADER_LENGTH = 12;\n        var BINARY_EXTENSION_CHUNK_TYPES = {\n            JSON: 1313821514,\n            BIN: 5130562\n        };\n        function GLTFBinaryExtension(data) {\n            this.name = EXTENSIONS.KHR_BINARY_GLTF;\n            this.content = null;\n            this.body = null;\n            var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n            this.header = {\n                magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n                version: headerView.getUint32(4, true),\n                length: headerView.getUint32(8, true)\n            };\n            if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {\n                throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');\n            } else if (this.header.version < 2) {\n                throw new Error('THREE.GLTFLoader: Legacy binary file detected.');\n            }\n            var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n            var chunkIndex = 0;\n            while (chunkIndex < chunkView.byteLength) {\n                var chunkLength = chunkView.getUint32(chunkIndex, true);\n                chunkIndex += 4;\n                var chunkType = chunkView.getUint32(chunkIndex, true);\n                chunkIndex += 4;\n                if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n                    var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);\n                    this.content = THREE.LoaderUtils.decodeText(contentArray);\n                } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n                    this.body = data.slice(byteOffset, byteOffset + chunkLength);\n                }\n                chunkIndex += chunkLength;\n            }\n            if (this.content === null) {\n                throw new Error('THREE.GLTFLoader: JSON content not found.');\n            }\n        }\n        function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n            if (!dracoLoader) {\n                throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');\n            }\n            this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n            this.json = json;\n            this.dracoLoader = dracoLoader;\n            this.dracoLoader.preload();\n        }\n        GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {\n            var json = this.json;\n            var dracoLoader = this.dracoLoader;\n            var bufferViewIndex = primitive.extensions[this.name].bufferView;\n            var gltfAttributeMap = primitive.extensions[this.name].attributes;\n            var threeAttributeMap = {};\n            var attributeNormalizedMap = {};\n            var attributeTypeMap = {};\n            for (var attributeName in gltfAttributeMap) {\n                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n                threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];\n            }\n            for (attributeName in primitive.attributes) {\n                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n                if (gltfAttributeMap[attributeName] !== undefined) {\n                    var accessorDef = json.accessors[primitive.attributes[attributeName]];\n                    var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                    attributeTypeMap[threeAttributeName] = componentType;\n                    attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;\n                }\n            }\n            return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {\n                return new Promise(function (resolve) {\n                    dracoLoader.decodeDracoFile(bufferView, function (geometry) {\n                        for (var attributeName in geometry.attributes) {\n                            var attribute = geometry.attributes[attributeName];\n                            var normalized = attributeNormalizedMap[attributeName];\n                            if (normalized !== undefined)\n                                attribute.normalized = normalized;\n                        }\n                        resolve(geometry);\n                    }, threeAttributeMap, attributeTypeMap);\n                });\n            });\n        };\n        function GLTFTextureTransformExtension() {\n            this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n        }\n        GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {\n            texture = texture.clone();\n            if (transform.offset !== undefined) {\n                texture.offset.fromArray(transform.offset);\n            }\n            if (transform.rotation !== undefined) {\n                texture.rotation = transform.rotation;\n            }\n            if (transform.scale !== undefined) {\n                texture.repeat.fromArray(transform.scale);\n            }\n            if (transform.texCoord !== undefined) {\n                console.warn('THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.');\n            }\n            texture.needsUpdate = true;\n            return texture;\n        };\n        function GLTFMeshStandardSGMaterial(params) {\n            THREE.MeshStandardMaterial.call(this);\n            this.isGLTFSpecularGlossinessMaterial = true;\n            var specularMapParsFragmentChunk = [\n                '#ifdef USE_SPECULARMAP',\n                '\\tuniform sampler2D specularMap;',\n                '#endif'\n            ].join('\\n');\n            var glossinessMapParsFragmentChunk = [\n                '#ifdef USE_GLOSSINESSMAP',\n                '\\tuniform sampler2D glossinessMap;',\n                '#endif'\n            ].join('\\n');\n            var specularMapFragmentChunk = [\n                'vec3 specularFactor = specular;',\n                '#ifdef USE_SPECULARMAP',\n                '\\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n                '\\ttexelSpecular = sRGBToLinear( texelSpecular );',\n                '\\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n                '\\tspecularFactor *= texelSpecular.rgb;',\n                '#endif'\n            ].join('\\n');\n            var glossinessMapFragmentChunk = [\n                'float glossinessFactor = glossiness;',\n                '#ifdef USE_GLOSSINESSMAP',\n                '\\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n                '\\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n                '\\tglossinessFactor *= texelGlossiness.a;',\n                '#endif'\n            ].join('\\n');\n            var lightPhysicalFragmentChunk = [\n                'PhysicalMaterial material;',\n                'material.diffuseColor = diffuseColor.rgb;',\n                'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n                'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n                'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',\n                'material.specularRoughness += geometryRoughness;',\n                'material.specularRoughness = min( material.specularRoughness, 1.0 );',\n                'material.specularColor = specularFactor.rgb;'\n            ].join('\\n');\n            var uniforms = {\n                specular: { value: new THREE.Color().setHex(16777215) },\n                glossiness: { value: 1 },\n                specularMap: { value: null },\n                glossinessMap: { value: null }\n            };\n            this._extraUniforms = uniforms;\n            this.onBeforeCompile = function (shader) {\n                for (var uniformName in uniforms) {\n                    shader.uniforms[uniformName] = uniforms[uniformName];\n                }\n                shader.fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;');\n                shader.fragmentShader = shader.fragmentShader.replace('uniform float metalness;', 'uniform float glossiness;');\n                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_fragment>', specularMapFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\n            };\n            Object.defineProperties(this, {\n                specular: {\n                    get: function () {\n                        return uniforms.specular.value;\n                    },\n                    set: function (v) {\n                        uniforms.specular.value = v;\n                    }\n                },\n                specularMap: {\n                    get: function () {\n                        return uniforms.specularMap.value;\n                    },\n                    set: function (v) {\n                        uniforms.specularMap.value = v;\n                    }\n                },\n                glossiness: {\n                    get: function () {\n                        return uniforms.glossiness.value;\n                    },\n                    set: function (v) {\n                        uniforms.glossiness.value = v;\n                    }\n                },\n                glossinessMap: {\n                    get: function () {\n                        return uniforms.glossinessMap.value;\n                    },\n                    set: function (v) {\n                        uniforms.glossinessMap.value = v;\n                        if (v) {\n                            this.defines.USE_GLOSSINESSMAP = '';\n                            this.defines.USE_ROUGHNESSMAP = '';\n                        } else {\n                            delete this.defines.USE_ROUGHNESSMAP;\n                            delete this.defines.USE_GLOSSINESSMAP;\n                        }\n                    }\n                }\n            });\n            delete this.metalness;\n            delete this.roughness;\n            delete this.metalnessMap;\n            delete this.roughnessMap;\n            this.setValues(params);\n        }\n        GLTFMeshStandardSGMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);\n        GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;\n        GLTFMeshStandardSGMaterial.prototype.copy = function (source) {\n            THREE.MeshStandardMaterial.prototype.copy.call(this, source);\n            this.specularMap = source.specularMap;\n            this.specular.copy(source.specular);\n            this.glossinessMap = source.glossinessMap;\n            this.glossiness = source.glossiness;\n            delete this.metalness;\n            delete this.roughness;\n            delete this.metalnessMap;\n            delete this.roughnessMap;\n            return this;\n        };\n        function GLTFMaterialsPbrSpecularGlossinessExtension() {\n            return {\n                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n                specularGlossinessParams: [\n                    'color',\n                    'map',\n                    'lightMap',\n                    'lightMapIntensity',\n                    'aoMap',\n                    'aoMapIntensity',\n                    'emissive',\n                    'emissiveIntensity',\n                    'emissiveMap',\n                    'bumpMap',\n                    'bumpScale',\n                    'normalMap',\n                    'normalMapType',\n                    'displacementMap',\n                    'displacementScale',\n                    'displacementBias',\n                    'specularMap',\n                    'specular',\n                    'glossinessMap',\n                    'glossiness',\n                    'alphaMap',\n                    'envMap',\n                    'envMapIntensity',\n                    'refractionRatio'\n                ],\n                getMaterialType: function () {\n                    return GLTFMeshStandardSGMaterial;\n                },\n                extendParams: function (materialParams, materialDef, parser) {\n                    var pbrSpecularGlossiness = materialDef.extensions[this.name];\n                    materialParams.color = new THREE.Color(1, 1, 1);\n                    materialParams.opacity = 1;\n                    var pending = [];\n                    if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n                        var array = pbrSpecularGlossiness.diffuseFactor;\n                        materialParams.color.fromArray(array);\n                        materialParams.opacity = array[3];\n                    }\n                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\n                        pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));\n                    }\n                    materialParams.emissive = new THREE.Color(0, 0, 0);\n                    materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1;\n                    materialParams.specular = new THREE.Color(1, 1, 1);\n                    if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {\n                        materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n                    }\n                    if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n                        var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n                        pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));\n                        pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));\n                    }\n                    return Promise.all(pending);\n                },\n                createMaterial: function (materialParams) {\n                    var material = new GLTFMeshStandardSGMaterial(materialParams);\n                    material.fog = true;\n                    material.color = materialParams.color;\n                    material.map = materialParams.map === undefined ? null : materialParams.map;\n                    material.lightMap = null;\n                    material.lightMapIntensity = 1;\n                    material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;\n                    material.aoMapIntensity = 1;\n                    material.emissive = materialParams.emissive;\n                    material.emissiveIntensity = 1;\n                    material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;\n                    material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;\n                    material.bumpScale = 1;\n                    material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;\n                    material.normalMapType = THREE.TangentSpaceNormalMap;\n                    if (materialParams.normalScale)\n                        material.normalScale = materialParams.normalScale;\n                    material.displacementMap = null;\n                    material.displacementScale = 1;\n                    material.displacementBias = 0;\n                    material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;\n                    material.specular = materialParams.specular;\n                    material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;\n                    material.glossiness = materialParams.glossiness;\n                    material.alphaMap = null;\n                    material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;\n                    material.envMapIntensity = 1;\n                    material.refractionRatio = 0.98;\n                    return material;\n                }\n            };\n        }\n        function GLTFMeshQuantizationExtension() {\n            this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n        }\n        function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n            THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n        }\n        GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);\n        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n        GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {\n            var result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;\n            for (var i = 0; i !== valueSize; i++) {\n                result[i] = values[offset + i];\n            }\n            return result;\n        };\n        GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n        GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n        GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {\n            var result = this.resultBuffer;\n            var values = this.sampleValues;\n            var stride = this.valueSize;\n            var stride2 = stride * 2;\n            var stride3 = stride * 3;\n            var td = t1 - t0;\n            var p = (t - t0) / td;\n            var pp = p * p;\n            var ppp = pp * p;\n            var offset1 = i1 * stride3;\n            var offset0 = offset1 - stride3;\n            var s2 = -2 * ppp + 3 * pp;\n            var s3 = ppp - pp;\n            var s0 = 1 - s2;\n            var s1 = s3 - pp + p;\n            for (var i = 0; i !== stride; i++) {\n                var p0 = values[offset0 + i + stride];\n                var m0 = values[offset0 + i + stride2] * td;\n                var p1 = values[offset1 + i + stride];\n                var m1 = values[offset1 + i] * td;\n                result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n            }\n            return result;\n        };\n        var WEBGL_CONSTANTS = {\n            FLOAT: 5126,\n            FLOAT_MAT3: 35675,\n            FLOAT_MAT4: 35676,\n            FLOAT_VEC2: 35664,\n            FLOAT_VEC3: 35665,\n            FLOAT_VEC4: 35666,\n            LINEAR: 9729,\n            REPEAT: 10497,\n            SAMPLER_2D: 35678,\n            POINTS: 0,\n            LINES: 1,\n            LINE_LOOP: 2,\n            LINE_STRIP: 3,\n            TRIANGLES: 4,\n            TRIANGLE_STRIP: 5,\n            TRIANGLE_FAN: 6,\n            UNSIGNED_BYTE: 5121,\n            UNSIGNED_SHORT: 5123\n        };\n        var WEBGL_COMPONENT_TYPES = {\n            5120: Int8Array,\n            5121: Uint8Array,\n            5122: Int16Array,\n            5123: Uint16Array,\n            5125: Uint32Array,\n            5126: Float32Array\n        };\n        var WEBGL_FILTERS = {\n            9728: THREE.NearestFilter,\n            9729: THREE.LinearFilter,\n            9984: THREE.NearestMipmapNearestFilter,\n            9985: THREE.LinearMipmapNearestFilter,\n            9986: THREE.NearestMipmapLinearFilter,\n            9987: THREE.LinearMipmapLinearFilter\n        };\n        var WEBGL_WRAPPINGS = {\n            33071: THREE.ClampToEdgeWrapping,\n            33648: THREE.MirroredRepeatWrapping,\n            10497: THREE.RepeatWrapping\n        };\n        var WEBGL_TYPE_SIZES = {\n            'SCALAR': 1,\n            'VEC2': 2,\n            'VEC3': 3,\n            'VEC4': 4,\n            'MAT2': 4,\n            'MAT3': 9,\n            'MAT4': 16\n        };\n        var ATTRIBUTES = {\n            POSITION: 'position',\n            NORMAL: 'normal',\n            TANGENT: 'tangent',\n            TEXCOORD_0: 'uv',\n            TEXCOORD_1: 'uv2',\n            COLOR_0: 'color',\n            WEIGHTS_0: 'skinWeight',\n            JOINTS_0: 'skinIndex'\n        };\n        var PATH_PROPERTIES = {\n            scale: 'scale',\n            translation: 'position',\n            rotation: 'quaternion',\n            weights: 'morphTargetInfluences'\n        };\n        var INTERPOLATION = {\n            CUBICSPLINE: undefined,\n            LINEAR: THREE.InterpolateLinear,\n            STEP: THREE.InterpolateDiscrete\n        };\n        var ALPHA_MODES = {\n            OPAQUE: 'OPAQUE',\n            MASK: 'MASK',\n            BLEND: 'BLEND'\n        };\n        var MIME_TYPE_FORMATS = {\n            'image/png': THREE.RGBAFormat,\n            'image/jpeg': THREE.RGBFormat\n        };\n        function resolveURL(url, path) {\n            if (typeof url !== 'string' || url === '')\n                return '';\n            if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n                path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n            }\n            if (/^(https?:)?\\/\\//i.test(url))\n                return url;\n            if (/^data:.*,.*$/i.test(url))\n                return url;\n            if (/^blob:.*$/i.test(url))\n                return url;\n            return path + url;\n        }\n        function createDefaultMaterial(cache) {\n            if (cache['DefaultMaterial'] === undefined) {\n                cache['DefaultMaterial'] = new THREE.MeshStandardMaterial({\n                    color: 16777215,\n                    emissive: 0,\n                    metalness: 1,\n                    roughness: 1,\n                    transparent: false,\n                    depthTest: true,\n                    side: THREE.FrontSide\n                });\n            }\n            return cache['DefaultMaterial'];\n        }\n        function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n            for (var name in objectDef.extensions) {\n                if (knownExtensions[name] === undefined) {\n                    object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n                    object.userData.gltfExtensions[name] = objectDef.extensions[name];\n                }\n            }\n        }\n        function assignExtrasToUserData(object, gltfDef) {\n            if (gltfDef.extras !== undefined) {\n                if (typeof gltfDef.extras === 'object') {\n                    Object.assign(object.userData, gltfDef.extras);\n                } else {\n                    console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);\n                }\n            }\n        }\n        function addMorphTargets(geometry, targets, parser) {\n            var hasMorphPosition = false;\n            var hasMorphNormal = false;\n            for (var i = 0, il = targets.length; i < il; i++) {\n                var target = targets[i];\n                if (target.POSITION !== undefined)\n                    hasMorphPosition = true;\n                if (target.NORMAL !== undefined)\n                    hasMorphNormal = true;\n                if (hasMorphPosition && hasMorphNormal)\n                    break;\n            }\n            if (!hasMorphPosition && !hasMorphNormal)\n                return Promise.resolve(geometry);\n            var pendingPositionAccessors = [];\n            var pendingNormalAccessors = [];\n            for (var i = 0, il = targets.length; i < il; i++) {\n                var target = targets[i];\n                if (hasMorphPosition) {\n                    var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;\n                    pendingPositionAccessors.push(pendingAccessor);\n                }\n                if (hasMorphNormal) {\n                    var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;\n                    pendingNormalAccessors.push(pendingAccessor);\n                }\n            }\n            return Promise.all([\n                Promise.all(pendingPositionAccessors),\n                Promise.all(pendingNormalAccessors)\n            ]).then(function (accessors) {\n                var morphPositions = accessors[0];\n                var morphNormals = accessors[1];\n                if (hasMorphPosition)\n                    geometry.morphAttributes.position = morphPositions;\n                if (hasMorphNormal)\n                    geometry.morphAttributes.normal = morphNormals;\n                geometry.morphTargetsRelative = true;\n                return geometry;\n            });\n        }\n        function updateMorphTargets(mesh, meshDef) {\n            mesh.updateMorphTargets();\n            if (meshDef.weights !== undefined) {\n                for (var i = 0, il = meshDef.weights.length; i < il; i++) {\n                    mesh.morphTargetInfluences[i] = meshDef.weights[i];\n                }\n            }\n            if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n                var targetNames = meshDef.extras.targetNames;\n                if (mesh.morphTargetInfluences.length === targetNames.length) {\n                    mesh.morphTargetDictionary = {};\n                    for (var i = 0, il = targetNames.length; i < il; i++) {\n                        mesh.morphTargetDictionary[targetNames[i]] = i;\n                    }\n                } else {\n                    console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');\n                }\n            }\n        }\n        function createPrimitiveKey(primitiveDef) {\n            var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];\n            var geometryKey;\n            if (dracoExtension) {\n                geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);\n            } else {\n                geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;\n            }\n            return geometryKey;\n        }\n        function createAttributesKey(attributes) {\n            var attributesKey = '';\n            var keys = Object.keys(attributes).sort();\n            for (var i = 0, il = keys.length; i < il; i++) {\n                attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';\n            }\n            return attributesKey;\n        }\n        function GLTFParser(json, extensions, options) {\n            this.json = json || {};\n            this.extensions = extensions || {};\n            this.options = options || {};\n            this.cache = new GLTFRegistry();\n            this.primitiveCache = {};\n            this.textureLoader = new THREE.TextureLoader(this.options.manager);\n            this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n            this.fileLoader = new THREE.FileLoader(this.options.manager);\n            this.fileLoader.setResponseType('arraybuffer');\n            if (this.options.crossOrigin === 'use-credentials') {\n                this.fileLoader.setWithCredentials(true);\n            }\n        }\n        GLTFParser.prototype.parse = function (onLoad, onError) {\n            var parser = this;\n            var json = this.json;\n            var extensions = this.extensions;\n            this.cache.removeAll();\n            this.markDefs();\n            Promise.all([\n                this.getDependencies('scene'),\n                this.getDependencies('animation'),\n                this.getDependencies('camera')\n            ]).then(function (dependencies) {\n                var result = {\n                    scene: dependencies[0][json.scene || 0],\n                    scenes: dependencies[0],\n                    animations: dependencies[1],\n                    cameras: dependencies[2],\n                    asset: json.asset,\n                    parser: parser,\n                    userData: {}\n                };\n                addUnknownExtensionsToUserData(extensions, result, json);\n                assignExtrasToUserData(result, json);\n                onLoad(result);\n            }).catch(onError);\n        };\n        GLTFParser.prototype.markDefs = function () {\n            var nodeDefs = this.json.nodes || [];\n            var skinDefs = this.json.skins || [];\n            var meshDefs = this.json.meshes || [];\n            var meshReferences = {};\n            var meshUses = {};\n            for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {\n                var joints = skinDefs[skinIndex].joints;\n                for (var i = 0, il = joints.length; i < il; i++) {\n                    nodeDefs[joints[i]].isBone = true;\n                }\n            }\n            for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {\n                var nodeDef = nodeDefs[nodeIndex];\n                if (nodeDef.mesh !== undefined) {\n                    if (meshReferences[nodeDef.mesh] === undefined) {\n                        meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n                    }\n                    meshReferences[nodeDef.mesh]++;\n                    if (nodeDef.skin !== undefined) {\n                        meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n                    }\n                }\n            }\n            this.json.meshReferences = meshReferences;\n            this.json.meshUses = meshUses;\n        };\n        GLTFParser.prototype.getDependency = function (type, index) {\n            var cacheKey = type + ':' + index;\n            var dependency = this.cache.get(cacheKey);\n            if (!dependency) {\n                switch (type) {\n                case 'scene':\n                    dependency = this.loadScene(index);\n                    break;\n                case 'node':\n                    dependency = this.loadNode(index);\n                    break;\n                case 'mesh':\n                    dependency = this.loadMesh(index);\n                    break;\n                case 'accessor':\n                    dependency = this.loadAccessor(index);\n                    break;\n                case 'bufferView':\n                    dependency = this.loadBufferView(index);\n                    break;\n                case 'buffer':\n                    dependency = this.loadBuffer(index);\n                    break;\n                case 'material':\n                    dependency = this.loadMaterial(index);\n                    break;\n                case 'texture':\n                    dependency = this.loadTexture(index);\n                    break;\n                case 'skin':\n                    dependency = this.loadSkin(index);\n                    break;\n                case 'animation':\n                    dependency = this.loadAnimation(index);\n                    break;\n                case 'camera':\n                    dependency = this.loadCamera(index);\n                    break;\n                case 'light':\n                    dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);\n                    break;\n                default:\n                    throw new Error('Unknown type: ' + type);\n                }\n                this.cache.add(cacheKey, dependency);\n            }\n            return dependency;\n        };\n        GLTFParser.prototype.getDependencies = function (type) {\n            var dependencies = this.cache.get(type);\n            if (!dependencies) {\n                var parser = this;\n                var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];\n                dependencies = Promise.all(defs.map(function (def, index) {\n                    return parser.getDependency(type, index);\n                }));\n                this.cache.add(type, dependencies);\n            }\n            return dependencies;\n        };\n        GLTFParser.prototype.loadBuffer = function (bufferIndex) {\n            var bufferDef = this.json.buffers[bufferIndex];\n            var loader = this.fileLoader;\n            if (bufferDef.type && bufferDef.type !== 'arraybuffer') {\n                throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');\n            }\n            if (bufferDef.uri === undefined && bufferIndex === 0) {\n                return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n            }\n            var options = this.options;\n            return new Promise(function (resolve, reject) {\n                loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {\n                    reject(new Error('THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'));\n                });\n            });\n        };\n        GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {\n            var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n            return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {\n                var byteLength = bufferViewDef.byteLength || 0;\n                var byteOffset = bufferViewDef.byteOffset || 0;\n                return buffer.slice(byteOffset, byteOffset + byteLength);\n            });\n        };\n        GLTFParser.prototype.loadAccessor = function (accessorIndex) {\n            var parser = this;\n            var json = this.json;\n            var accessorDef = this.json.accessors[accessorIndex];\n            if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {\n                return Promise.resolve(null);\n            }\n            var pendingBufferViews = [];\n            if (accessorDef.bufferView !== undefined) {\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));\n            } else {\n                pendingBufferViews.push(null);\n            }\n            if (accessorDef.sparse !== undefined) {\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));\n            }\n            return Promise.all(pendingBufferViews).then(function (bufferViews) {\n                var bufferView = bufferViews[0];\n                var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n                var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n                var itemBytes = elementBytes * itemSize;\n                var byteOffset = accessorDef.byteOffset || 0;\n                var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;\n                var normalized = accessorDef.normalized === true;\n                var array, bufferAttribute;\n                if (byteStride && byteStride !== itemBytes) {\n                    var ibSlice = Math.floor(byteOffset / byteStride);\n                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n                    var ib = parser.cache.get(ibCacheKey);\n                    if (!ib) {\n                        array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);\n                        ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n                        parser.cache.add(ibCacheKey, ib);\n                    }\n                    bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);\n                } else {\n                    if (bufferView === null) {\n                        array = new TypedArray(accessorDef.count * itemSize);\n                    } else {\n                        array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);\n                    }\n                    bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);\n                }\n                if (accessorDef.sparse !== undefined) {\n                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n                    var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);\n                    var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);\n                    if (bufferView !== null) {\n                        bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\n                    }\n                    for (var i = 0, il = sparseIndices.length; i < il; i++) {\n                        var index = sparseIndices[i];\n                        bufferAttribute.setX(index, sparseValues[i * itemSize]);\n                        if (itemSize >= 2)\n                            bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n                        if (itemSize >= 3)\n                            bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n                        if (itemSize >= 4)\n                            bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n                        if (itemSize >= 5)\n                            throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');\n                    }\n                }\n                return bufferAttribute;\n            });\n        };\n        GLTFParser.prototype.loadTexture = function (textureIndex) {\n            var parser = this;\n            var json = this.json;\n            var options = this.options;\n            var textureLoader = this.textureLoader;\n            var URL = self.URL || self.webkitURL;\n            var textureDef = json.textures[textureIndex];\n            var textureExtensions = textureDef.extensions || {};\n            var source;\n            if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {\n                source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n            } else {\n                source = json.images[textureDef.source];\n            }\n            var sourceURI = source.uri;\n            var isObjectURL = false;\n            if (source.bufferView !== undefined) {\n                sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {\n                    isObjectURL = true;\n                    var blob = new Blob([bufferView], { type: source.mimeType });\n                    sourceURI = URL.createObjectURL(blob);\n                    return sourceURI;\n                });\n            }\n            return Promise.resolve(sourceURI).then(function (sourceURI) {\n                var loader = options.manager.getHandler(sourceURI);\n                if (!loader) {\n                    loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;\n                }\n                return new Promise(function (resolve, reject) {\n                    loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);\n                });\n            }).then(function (texture) {\n                if (isObjectURL === true) {\n                    URL.revokeObjectURL(sourceURI);\n                }\n                texture.flipY = false;\n                if (textureDef.name)\n                    texture.name = textureDef.name;\n                if (source.mimeType in MIME_TYPE_FORMATS) {\n                    texture.format = MIME_TYPE_FORMATS[source.mimeType];\n                }\n                var samplers = json.samplers || {};\n                var sampler = samplers[textureDef.sampler] || {};\n                texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n                texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;\n                texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n                texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n                return texture;\n            });\n        };\n        GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {\n            var parser = this;\n            return this.getDependency('texture', mapDef.index).then(function (texture) {\n                if (!texture.isCompressedTexture) {\n                    switch (mapName) {\n                    case 'aoMap':\n                    case 'emissiveMap':\n                    case 'metalnessMap':\n                    case 'normalMap':\n                    case 'roughnessMap':\n                        texture.format = THREE.RGBFormat;\n                        break;\n                    }\n                }\n                if (mapDef.texCoord !== undefined && mapDef.texCoord != 0 && !(mapName === 'aoMap' && mapDef.texCoord == 1)) {\n                    console.warn('THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.');\n                }\n                if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {\n                    var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\n                    if (transform) {\n                        texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);\n                    }\n                }\n                materialParams[mapName] = texture;\n            });\n        };\n        GLTFParser.prototype.assignFinalMaterial = function (mesh) {\n            var geometry = mesh.geometry;\n            var material = mesh.material;\n            var useVertexTangents = geometry.attributes.tangent !== undefined;\n            var useVertexColors = geometry.attributes.color !== undefined;\n            var useFlatShading = geometry.attributes.normal === undefined;\n            var useSkinning = mesh.isSkinnedMesh === true;\n            var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;\n            var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n            if (mesh.isPoints) {\n                var cacheKey = 'PointsMaterial:' + material.uuid;\n                var pointsMaterial = this.cache.get(cacheKey);\n                if (!pointsMaterial) {\n                    pointsMaterial = new THREE.PointsMaterial();\n                    THREE.Material.prototype.copy.call(pointsMaterial, material);\n                    pointsMaterial.color.copy(material.color);\n                    pointsMaterial.map = material.map;\n                    pointsMaterial.sizeAttenuation = false;\n                    this.cache.add(cacheKey, pointsMaterial);\n                }\n                material = pointsMaterial;\n            } else if (mesh.isLine) {\n                var cacheKey = 'LineBasicMaterial:' + material.uuid;\n                var lineMaterial = this.cache.get(cacheKey);\n                if (!lineMaterial) {\n                    lineMaterial = new THREE.LineBasicMaterial();\n                    THREE.Material.prototype.copy.call(lineMaterial, material);\n                    lineMaterial.color.copy(material.color);\n                    this.cache.add(cacheKey, lineMaterial);\n                }\n                material = lineMaterial;\n            }\n            if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {\n                var cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n                if (material.isGLTFSpecularGlossinessMaterial)\n                    cacheKey += 'specular-glossiness:';\n                if (useSkinning)\n                    cacheKey += 'skinning:';\n                if (useVertexTangents)\n                    cacheKey += 'vertex-tangents:';\n                if (useVertexColors)\n                    cacheKey += 'vertex-colors:';\n                if (useFlatShading)\n                    cacheKey += 'flat-shading:';\n                if (useMorphTargets)\n                    cacheKey += 'morph-targets:';\n                if (useMorphNormals)\n                    cacheKey += 'morph-normals:';\n                var cachedMaterial = this.cache.get(cacheKey);\n                if (!cachedMaterial) {\n                    cachedMaterial = material.clone();\n                    if (useSkinning)\n                        cachedMaterial.skinning = true;\n                    if (useVertexTangents)\n                        cachedMaterial.vertexTangents = true;\n                    if (useVertexColors)\n                        cachedMaterial.vertexColors = true;\n                    if (useFlatShading)\n                        cachedMaterial.flatShading = true;\n                    if (useMorphTargets)\n                        cachedMaterial.morphTargets = true;\n                    if (useMorphNormals)\n                        cachedMaterial.morphNormals = true;\n                    this.cache.add(cacheKey, cachedMaterial);\n                }\n                material = cachedMaterial;\n            }\n            if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {\n                geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));\n            }\n            if (material.normalScale && !useVertexTangents) {\n                material.normalScale.y = -material.normalScale.y;\n            }\n            if (material.clearcoatNormalScale && !useVertexTangents) {\n                material.clearcoatNormalScale.y = -material.clearcoatNormalScale.y;\n            }\n            mesh.material = material;\n        };\n        GLTFParser.prototype.loadMaterial = function (materialIndex) {\n            var parser = this;\n            var json = this.json;\n            var extensions = this.extensions;\n            var materialDef = json.materials[materialIndex];\n            var materialType;\n            var materialParams = {};\n            var materialExtensions = materialDef.extensions || {};\n            var pending = [];\n            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n                var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n                materialType = sgExtension.getMaterialType();\n                pending.push(sgExtension.extendParams(materialParams, materialDef, parser));\n            } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n                var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n                materialType = kmuExtension.getMaterialType();\n                pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));\n            } else {\n                materialType = THREE.MeshStandardMaterial;\n                var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n                materialParams.color = new THREE.Color(1, 1, 1);\n                materialParams.opacity = 1;\n                if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                    var array = metallicRoughness.baseColorFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (metallicRoughness.baseColorTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n                }\n                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1;\n                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1;\n                if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));\n                    pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));\n                }\n            }\n            if (materialDef.doubleSided === true) {\n                materialParams.side = THREE.DoubleSide;\n            }\n            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n            if (alphaMode === ALPHA_MODES.BLEND) {\n                materialParams.transparent = true;\n                materialParams.depthWrite = false;\n            } else {\n                materialParams.transparent = false;\n                if (alphaMode === ALPHA_MODES.MASK) {\n                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n                }\n            }\n            if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));\n                materialParams.normalScale = new THREE.Vector2(1, 1);\n                if (materialDef.normalTexture.scale !== undefined) {\n                    materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);\n                }\n            }\n            if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));\n                if (materialDef.occlusionTexture.strength !== undefined) {\n                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n                }\n            }\n            if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);\n            }\n            if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));\n            }\n            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {\n                var clearcoatExtension = extensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT];\n                materialType = clearcoatExtension.getMaterialType();\n                pending.push(clearcoatExtension.extendParams(materialParams, { extensions: materialExtensions }, parser));\n            }\n            return Promise.all(pending).then(function () {\n                var material;\n                if (materialType === GLTFMeshStandardSGMaterial) {\n                    material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);\n                } else {\n                    material = new materialType(materialParams);\n                }\n                if (materialDef.name)\n                    material.name = materialDef.name;\n                if (material.map)\n                    material.map.encoding = THREE.sRGBEncoding;\n                if (material.emissiveMap)\n                    material.emissiveMap.encoding = THREE.sRGBEncoding;\n                assignExtrasToUserData(material, materialDef);\n                if (materialDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, material, materialDef);\n                return material;\n            });\n        };\n        function computeBounds(geometry, primitiveDef, parser) {\n            var attributes = primitiveDef.attributes;\n            var box = new THREE.Box3();\n            if (attributes.POSITION !== undefined) {\n                var accessor = parser.json.accessors[attributes.POSITION];\n                var min = accessor.min;\n                var max = accessor.max;\n                if (min !== undefined && max !== undefined) {\n                    box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));\n                } else {\n                    console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                    return;\n                }\n            } else {\n                return;\n            }\n            var targets = primitiveDef.targets;\n            if (targets !== undefined) {\n                var maxDisplacement = new THREE.Vector3();\n                var vector = new THREE.Vector3();\n                for (var i = 0, il = targets.length; i < il; i++) {\n                    var target = targets[i];\n                    if (target.POSITION !== undefined) {\n                        var accessor = parser.json.accessors[target.POSITION];\n                        var min = accessor.min;\n                        var max = accessor.max;\n                        if (min !== undefined && max !== undefined) {\n                            vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));\n                            vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));\n                            vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));\n                            maxDisplacement.max(vector);\n                        } else {\n                            console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                        }\n                    }\n                }\n                box.expandByVector(maxDisplacement);\n            }\n            geometry.boundingBox = box;\n            var sphere = new THREE.Sphere();\n            box.getCenter(sphere.center);\n            sphere.radius = box.min.distanceTo(box.max) / 2;\n            geometry.boundingSphere = sphere;\n        }\n        function addPrimitiveAttributes(geometry, primitiveDef, parser) {\n            var attributes = primitiveDef.attributes;\n            var pending = [];\n            function assignAttributeAccessor(accessorIndex, attributeName) {\n                return parser.getDependency('accessor', accessorIndex).then(function (accessor) {\n                    geometry.setAttribute(attributeName, accessor);\n                });\n            }\n            for (var gltfAttributeName in attributes) {\n                var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();\n                if (threeAttributeName in geometry.attributes)\n                    continue;\n                pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));\n            }\n            if (primitiveDef.indices !== undefined && !geometry.index) {\n                var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {\n                    geometry.setIndex(accessor);\n                });\n                pending.push(accessor);\n            }\n            assignExtrasToUserData(geometry, primitiveDef);\n            computeBounds(geometry, primitiveDef, parser);\n            return Promise.all(pending).then(function () {\n                return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;\n            });\n        }\n        function toTrianglesDrawMode(geometry, drawMode) {\n            var index = geometry.getIndex();\n            if (index === null) {\n                var indices = [];\n                var position = geometry.getAttribute('position');\n                if (position !== undefined) {\n                    for (var i = 0; i < position.count; i++) {\n                        indices.push(i);\n                    }\n                    geometry.setIndex(indices);\n                    index = geometry.getIndex();\n                } else {\n                    console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n                    return geometry;\n                }\n            }\n            var numberOfTriangles = index.count - 2;\n            var newIndices = [];\n            if (drawMode === THREE.TriangleFanDrawMode) {\n                for (var i = 1; i <= numberOfTriangles; i++) {\n                    newIndices.push(index.getX(0));\n                    newIndices.push(index.getX(i));\n                    newIndices.push(index.getX(i + 1));\n                }\n            } else {\n                for (var i = 0; i < numberOfTriangles; i++) {\n                    if (i % 2 === 0) {\n                        newIndices.push(index.getX(i));\n                        newIndices.push(index.getX(i + 1));\n                        newIndices.push(index.getX(i + 2));\n                    } else {\n                        newIndices.push(index.getX(i + 2));\n                        newIndices.push(index.getX(i + 1));\n                        newIndices.push(index.getX(i));\n                    }\n                }\n            }\n            if (newIndices.length / 3 !== numberOfTriangles) {\n                console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n            }\n            var newGeometry = geometry.clone();\n            newGeometry.setIndex(newIndices);\n            return newGeometry;\n        }\n        GLTFParser.prototype.loadGeometries = function (primitives) {\n            var parser = this;\n            var extensions = this.extensions;\n            var cache = this.primitiveCache;\n            function createDracoPrimitive(primitive) {\n                return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {\n                    return addPrimitiveAttributes(geometry, primitive, parser);\n                });\n            }\n            var pending = [];\n            for (var i = 0, il = primitives.length; i < il; i++) {\n                var primitive = primitives[i];\n                var cacheKey = createPrimitiveKey(primitive);\n                var cached = cache[cacheKey];\n                if (cached) {\n                    pending.push(cached.promise);\n                } else {\n                    var geometryPromise;\n                    if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {\n                        geometryPromise = createDracoPrimitive(primitive);\n                    } else {\n                        geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);\n                    }\n                    cache[cacheKey] = {\n                        primitive: primitive,\n                        promise: geometryPromise\n                    };\n                    pending.push(geometryPromise);\n                }\n            }\n            return Promise.all(pending);\n        };\n        GLTFParser.prototype.loadMesh = function (meshIndex) {\n            var parser = this;\n            var json = this.json;\n            var meshDef = json.meshes[meshIndex];\n            var primitives = meshDef.primitives;\n            var pending = [];\n            for (var i = 0, il = primitives.length; i < il; i++) {\n                var material = primitives[i].material === undefined ? createDefaultMaterial(this.cache) : this.getDependency('material', primitives[i].material);\n                pending.push(material);\n            }\n            pending.push(parser.loadGeometries(primitives));\n            return Promise.all(pending).then(function (results) {\n                var materials = results.slice(0, results.length - 1);\n                var geometries = results[results.length - 1];\n                var meshes = [];\n                for (var i = 0, il = geometries.length; i < il; i++) {\n                    var geometry = geometries[i];\n                    var primitive = primitives[i];\n                    var mesh;\n                    var material = materials[i];\n                    if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {\n                        mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);\n                        if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {\n                            mesh.normalizeSkinWeights();\n                        }\n                        if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {\n                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleStripDrawMode);\n                        } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {\n                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleFanDrawMode);\n                        }\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n                        mesh = new THREE.LineSegments(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {\n                        mesh = new THREE.Line(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {\n                        mesh = new THREE.LineLoop(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {\n                        mesh = new THREE.Points(geometry, material);\n                    } else {\n                        throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);\n                    }\n                    if (Object.keys(mesh.geometry.morphAttributes).length > 0) {\n                        updateMorphTargets(mesh, meshDef);\n                    }\n                    mesh.name = meshDef.name || 'mesh_' + meshIndex;\n                    if (geometries.length > 1)\n                        mesh.name += '_' + i;\n                    assignExtrasToUserData(mesh, meshDef);\n                    parser.assignFinalMaterial(mesh);\n                    meshes.push(mesh);\n                }\n                if (meshes.length === 1) {\n                    return meshes[0];\n                }\n                var group = new THREE.Group();\n                for (var i = 0, il = meshes.length; i < il; i++) {\n                    group.add(meshes[i]);\n                }\n                return group;\n            });\n        };\n        GLTFParser.prototype.loadCamera = function (cameraIndex) {\n            var camera;\n            var cameraDef = this.json.cameras[cameraIndex];\n            var params = cameraDef[cameraDef.type];\n            if (!params) {\n                console.warn('THREE.GLTFLoader: Missing camera parameters.');\n                return;\n            }\n            if (cameraDef.type === 'perspective') {\n                camera = new THREE.PerspectiveCamera(THREE.MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2000000);\n            } else if (cameraDef.type === 'orthographic') {\n                camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);\n            }\n            if (cameraDef.name)\n                camera.name = cameraDef.name;\n            assignExtrasToUserData(camera, cameraDef);\n            return Promise.resolve(camera);\n        };\n        GLTFParser.prototype.loadSkin = function (skinIndex) {\n            var skinDef = this.json.skins[skinIndex];\n            var skinEntry = { joints: skinDef.joints };\n            if (skinDef.inverseBindMatrices === undefined) {\n                return Promise.resolve(skinEntry);\n            }\n            return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {\n                skinEntry.inverseBindMatrices = accessor;\n                return skinEntry;\n            });\n        };\n        GLTFParser.prototype.loadAnimation = function (animationIndex) {\n            var json = this.json;\n            var animationDef = json.animations[animationIndex];\n            var pendingNodes = [];\n            var pendingInputAccessors = [];\n            var pendingOutputAccessors = [];\n            var pendingSamplers = [];\n            var pendingTargets = [];\n            for (var i = 0, il = animationDef.channels.length; i < il; i++) {\n                var channel = animationDef.channels[i];\n                var sampler = animationDef.samplers[channel.sampler];\n                var target = channel.target;\n                var name = target.node !== undefined ? target.node : target.id;\n                var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;\n                var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;\n                pendingNodes.push(this.getDependency('node', name));\n                pendingInputAccessors.push(this.getDependency('accessor', input));\n                pendingOutputAccessors.push(this.getDependency('accessor', output));\n                pendingSamplers.push(sampler);\n                pendingTargets.push(target);\n            }\n            return Promise.all([\n                Promise.all(pendingNodes),\n                Promise.all(pendingInputAccessors),\n                Promise.all(pendingOutputAccessors),\n                Promise.all(pendingSamplers),\n                Promise.all(pendingTargets)\n            ]).then(function (dependencies) {\n                var nodes = dependencies[0];\n                var inputAccessors = dependencies[1];\n                var outputAccessors = dependencies[2];\n                var samplers = dependencies[3];\n                var targets = dependencies[4];\n                var tracks = [];\n                for (var i = 0, il = nodes.length; i < il; i++) {\n                    var node = nodes[i];\n                    var inputAccessor = inputAccessors[i];\n                    var outputAccessor = outputAccessors[i];\n                    var sampler = samplers[i];\n                    var target = targets[i];\n                    if (node === undefined)\n                        continue;\n                    node.updateMatrix();\n                    node.matrixAutoUpdate = true;\n                    var TypedKeyframeTrack;\n                    switch (PATH_PROPERTIES[target.path]) {\n                    case PATH_PROPERTIES.weights:\n                        TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.rotation:\n                        TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.position:\n                    case PATH_PROPERTIES.scale:\n                    default:\n                        TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n                        break;\n                    }\n                    var targetName = node.name ? node.name : node.uuid;\n                    var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;\n                    var targetNames = [];\n                    if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {\n                        node.traverse(function (object) {\n                            if (object.isMesh === true && object.morphTargetInfluences) {\n                                targetNames.push(object.name ? object.name : object.uuid);\n                            }\n                        });\n                    } else {\n                        targetNames.push(targetName);\n                    }\n                    var outputArray = outputAccessor.array;\n                    if (outputAccessor.normalized) {\n                        var scale;\n                        if (outputArray.constructor === Int8Array) {\n                            scale = 1 / 127;\n                        } else if (outputArray.constructor === Uint8Array) {\n                            scale = 1 / 255;\n                        } else if (outputArray.constructor == Int16Array) {\n                            scale = 1 / 32767;\n                        } else if (outputArray.constructor === Uint16Array) {\n                            scale = 1 / 65535;\n                        } else {\n                            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');\n                        }\n                        var scaled = new Float32Array(outputArray.length);\n                        for (var j = 0, jl = outputArray.length; j < jl; j++) {\n                            scaled[j] = outputArray[j] * scale;\n                        }\n                        outputArray = scaled;\n                    }\n                    for (var j = 0, jl = targetNames.length; j < jl; j++) {\n                        var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);\n                        if (sampler.interpolation === 'CUBICSPLINE') {\n                            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {\n                                return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);\n                            };\n                            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n                        }\n                        tracks.push(track);\n                    }\n                }\n                var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n                return new THREE.AnimationClip(name, undefined, tracks);\n            });\n        };\n        GLTFParser.prototype.loadNode = function (nodeIndex) {\n            var json = this.json;\n            var extensions = this.extensions;\n            var parser = this;\n            var meshReferences = json.meshReferences;\n            var meshUses = json.meshUses;\n            var nodeDef = json.nodes[nodeIndex];\n            return function () {\n                var pending = [];\n                if (nodeDef.mesh !== undefined) {\n                    pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {\n                        var node;\n                        if (meshReferences[nodeDef.mesh] > 1) {\n                            var instanceNum = meshUses[nodeDef.mesh]++;\n                            node = mesh.clone();\n                            node.name += '_instance_' + instanceNum;\n                        } else {\n                            node = mesh;\n                        }\n                        if (nodeDef.weights !== undefined) {\n                            node.traverse(function (o) {\n                                if (!o.isMesh)\n                                    return;\n                                for (var i = 0, il = nodeDef.weights.length; i < il; i++) {\n                                    o.morphTargetInfluences[i] = nodeDef.weights[i];\n                                }\n                            });\n                        }\n                        return node;\n                    }));\n                }\n                if (nodeDef.camera !== undefined) {\n                    pending.push(parser.getDependency('camera', nodeDef.camera));\n                }\n                if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {\n                    pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\n                }\n                return Promise.all(pending);\n            }().then(function (objects) {\n                var node;\n                if (nodeDef.isBone === true) {\n                    node = new THREE.Bone();\n                } else if (objects.length > 1) {\n                    node = new THREE.Group();\n                } else if (objects.length === 1) {\n                    node = objects[0];\n                } else {\n                    node = new THREE.Object3D();\n                }\n                if (node !== objects[0]) {\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        node.add(objects[i]);\n                    }\n                }\n                if (nodeDef.name) {\n                    node.userData.name = nodeDef.name;\n                    node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n                }\n                assignExtrasToUserData(node, nodeDef);\n                if (nodeDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, node, nodeDef);\n                if (nodeDef.matrix !== undefined) {\n                    var matrix = new THREE.Matrix4();\n                    matrix.fromArray(nodeDef.matrix);\n                    node.applyMatrix4(matrix);\n                } else {\n                    if (nodeDef.translation !== undefined) {\n                        node.position.fromArray(nodeDef.translation);\n                    }\n                    if (nodeDef.rotation !== undefined) {\n                        node.quaternion.fromArray(nodeDef.rotation);\n                    }\n                    if (nodeDef.scale !== undefined) {\n                        node.scale.fromArray(nodeDef.scale);\n                    }\n                }\n                return node;\n            });\n        };\n        GLTFParser.prototype.loadScene = function () {\n            function buildNodeHierachy(nodeId, parentObject, json, parser) {\n                var nodeDef = json.nodes[nodeId];\n                return parser.getDependency('node', nodeId).then(function (node) {\n                    if (nodeDef.skin === undefined)\n                        return node;\n                    var skinEntry;\n                    return parser.getDependency('skin', nodeDef.skin).then(function (skin) {\n                        skinEntry = skin;\n                        var pendingJoints = [];\n                        for (var i = 0, il = skinEntry.joints.length; i < il; i++) {\n                            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));\n                        }\n                        return Promise.all(pendingJoints);\n                    }).then(function (jointNodes) {\n                        node.traverse(function (mesh) {\n                            if (!mesh.isMesh)\n                                return;\n                            var bones = [];\n                            var boneInverses = [];\n                            for (var j = 0, jl = jointNodes.length; j < jl; j++) {\n                                var jointNode = jointNodes[j];\n                                if (jointNode) {\n                                    bones.push(jointNode);\n                                    var mat = new THREE.Matrix4();\n                                    if (skinEntry.inverseBindMatrices !== undefined) {\n                                        mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n                                    }\n                                    boneInverses.push(mat);\n                                } else {\n                                    console.warn('THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[j]);\n                                }\n                            }\n                            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n                        });\n                        return node;\n                    });\n                }).then(function (node) {\n                    parentObject.add(node);\n                    var pending = [];\n                    if (nodeDef.children) {\n                        var children = nodeDef.children;\n                        for (var i = 0, il = children.length; i < il; i++) {\n                            var child = children[i];\n                            pending.push(buildNodeHierachy(child, node, json, parser));\n                        }\n                    }\n                    return Promise.all(pending);\n                });\n            }\n            return function loadScene(sceneIndex) {\n                var json = this.json;\n                var extensions = this.extensions;\n                var sceneDef = this.json.scenes[sceneIndex];\n                var parser = this;\n                var scene = new THREE.Group();\n                if (sceneDef.name)\n                    scene.name = sceneDef.name;\n                assignExtrasToUserData(scene, sceneDef);\n                if (sceneDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n                var nodeIds = sceneDef.nodes || [];\n                var pending = [];\n                for (var i = 0, il = nodeIds.length; i < il; i++) {\n                    pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));\n                }\n                return Promise.all(pending).then(function () {\n                    return scene;\n                });\n            };\n        }();\n        return GLTFLoader;\n    }();\n    return GLTFLoader ;\n});\ndefine('skylark-threejs-ex/loaders/MTLLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var MTLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: MTLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        setMaterialOptions: function (value) {\n            this.materialOptions = value;\n            return this;\n        },\n        parse: function (text, path) {\n            var lines = text.split('\\n');\n            var info = {};\n            var delimiter_pattern = /\\s+/;\n            var materialsInfo = {};\n            for (var i = 0; i < lines.length; i++) {\n                var line = lines[i];\n                line = line.trim();\n                if (line.length === 0 || line.charAt(0) === '#') {\n                    continue;\n                }\n                var pos = line.indexOf(' ');\n                var key = pos >= 0 ? line.substring(0, pos) : line;\n                key = key.toLowerCase();\n                var value = pos >= 0 ? line.substring(pos + 1) : '';\n                value = value.trim();\n                if (key === 'newmtl') {\n                    info = { name: value };\n                    materialsInfo[value] = info;\n                } else {\n                    if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n                        var ss = value.split(delimiter_pattern, 3);\n                        info[key] = [\n                            parseFloat(ss[0]),\n                            parseFloat(ss[1]),\n                            parseFloat(ss[2])\n                        ];\n                    } else {\n                        info[key] = value;\n                    }\n                }\n            }\n            var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n            materialCreator.setCrossOrigin(this.crossOrigin);\n            materialCreator.setManager(this.manager);\n            materialCreator.setMaterials(materialsInfo);\n            return materialCreator;\n        }\n    });\n    MTLLoader.MaterialCreator = function (baseUrl, options) {\n        this.baseUrl = baseUrl || '';\n        this.options = options;\n        this.materialsInfo = {};\n        this.materials = {};\n        this.materialsArray = [];\n        this.nameLookup = {};\n        this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n        this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n    };\n    MTLLoader.MaterialCreator.prototype = {\n        constructor: MTLLoader.MaterialCreator,\n        crossOrigin: 'anonymous',\n        setCrossOrigin: function (value) {\n            this.crossOrigin = value;\n            return this;\n        },\n        setManager: function (value) {\n            this.manager = value;\n        },\n        setMaterials: function (materialsInfo) {\n            this.materialsInfo = this.convert(materialsInfo);\n            this.materials = {};\n            this.materialsArray = [];\n            this.nameLookup = {};\n        },\n        convert: function (materialsInfo) {\n            if (!this.options)\n                return materialsInfo;\n            var converted = {};\n            for (var mn in materialsInfo) {\n                var mat = materialsInfo[mn];\n                var covmat = {};\n                converted[mn] = covmat;\n                for (var prop in mat) {\n                    var save = true;\n                    var value = mat[prop];\n                    var lprop = prop.toLowerCase();\n                    switch (lprop) {\n                    case 'kd':\n                    case 'ka':\n                    case 'ks':\n                        if (this.options && this.options.normalizeRGB) {\n                            value = [\n                                value[0] / 255,\n                                value[1] / 255,\n                                value[2] / 255\n                            ];\n                        }\n                        if (this.options && this.options.ignoreZeroRGBs) {\n                            if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                                save = false;\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                    }\n                    if (save) {\n                        covmat[lprop] = value;\n                    }\n                }\n            }\n            return converted;\n        },\n        preload: function () {\n            for (var mn in this.materialsInfo) {\n                this.create(mn);\n            }\n        },\n        getIndex: function (materialName) {\n            return this.nameLookup[materialName];\n        },\n        getAsArray: function () {\n            var index = 0;\n            for (var mn in this.materialsInfo) {\n                this.materialsArray[index] = this.create(mn);\n                this.nameLookup[mn] = index;\n                index++;\n            }\n            return this.materialsArray;\n        },\n        create: function (materialName) {\n            if (this.materials[materialName] === undefined) {\n                this.createMaterial_(materialName);\n            }\n            return this.materials[materialName];\n        },\n        createMaterial_: function (materialName) {\n            var scope = this;\n            var mat = this.materialsInfo[materialName];\n            var params = {\n                name: materialName,\n                side: this.side\n            };\n            function resolveURL(baseUrl, url) {\n                if (typeof url !== 'string' || url === '')\n                    return '';\n                if (/^https?:\\/\\//i.test(url))\n                    return url;\n                return baseUrl + url;\n            }\n            function setMapForType(mapType, value) {\n                if (params[mapType])\n                    return;\n                var texParams = scope.getTextureParams(value, params);\n                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n                map.repeat.copy(texParams.scale);\n                map.offset.copy(texParams.offset);\n                map.wrapS = scope.wrap;\n                map.wrapT = scope.wrap;\n                params[mapType] = map;\n            }\n            for (var prop in mat) {\n                var value = mat[prop];\n                var n;\n                if (value === '')\n                    continue;\n                switch (prop.toLowerCase()) {\n                case 'kd':\n                    params.color = new THREE.Color().fromArray(value);\n                    break;\n                case 'ks':\n                    params.specular = new THREE.Color().fromArray(value);\n                    break;\n                case 'ke':\n                    params.emissive = new THREE.Color().fromArray(value);\n                    break;\n                case 'map_kd':\n                    setMapForType('map', value);\n                    break;\n                case 'map_ks':\n                    setMapForType('specularMap', value);\n                    break;\n                case 'map_ke':\n                    setMapForType('emissiveMap', value);\n                    break;\n                case 'norm':\n                    setMapForType('normalMap', value);\n                    break;\n                case 'map_bump':\n                case 'bump':\n                    setMapForType('bumpMap', value);\n                    break;\n                case 'map_d':\n                    setMapForType('alphaMap', value);\n                    params.transparent = true;\n                    break;\n                case 'ns':\n                    params.shininess = parseFloat(value);\n                    break;\n                case 'd':\n                    n = parseFloat(value);\n                    if (n < 1) {\n                        params.opacity = n;\n                        params.transparent = true;\n                    }\n                    break;\n                case 'tr':\n                    n = parseFloat(value);\n                    if (this.options && this.options.invertTrProperty)\n                        n = 1 - n;\n                    if (n > 0) {\n                        params.opacity = 1 - n;\n                        params.transparent = true;\n                    }\n                    break;\n                default:\n                    break;\n                }\n            }\n            this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n            return this.materials[materialName];\n        },\n        getTextureParams: function (value, matParams) {\n            var texParams = {\n                scale: new THREE.Vector2(1, 1),\n                offset: new THREE.Vector2(0, 0)\n            };\n            var items = value.split(/\\s+/);\n            var pos;\n            pos = items.indexOf('-bm');\n            if (pos >= 0) {\n                matParams.bumpScale = parseFloat(items[pos + 1]);\n                items.splice(pos, 2);\n            }\n            pos = items.indexOf('-s');\n            if (pos >= 0) {\n                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            pos = items.indexOf('-o');\n            if (pos >= 0) {\n                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            texParams.url = items.join(' ').trim();\n            return texParams;\n        },\n        loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n            var texture;\n            var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n            var loader = manager.getHandler(url);\n            if (loader === null) {\n                loader = new THREE.TextureLoader(manager);\n            }\n            if (loader.setCrossOrigin)\n                loader.setCrossOrigin(this.crossOrigin);\n            texture = loader.load(url, onLoad, onProgress, onError);\n            if (mapping !== undefined)\n                texture.mapping = mapping;\n            return texture;\n        }\n    };\n    return MTLLoader ;\n});\ndefine('skylark-threejs-ex/loaders/OBJLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var OBJLoader = function () {\n        var object_pattern = /^[og]\\s*(.+)?/;\n        var material_library_pattern = /^mtllib /;\n        var material_use_pattern = /^usemtl /;\n        var map_use_pattern = /^usemap /;\n        function ParserState() {\n            var state = {\n                objects: [],\n                object: {},\n                vertices: [],\n                normals: [],\n                colors: [],\n                uvs: [],\n                materials: {},\n                materialLibraries: [],\n                startObject: function (name, fromDeclaration) {\n                    if (this.object && this.object.fromDeclaration === false) {\n                        this.object.name = name;\n                        this.object.fromDeclaration = fromDeclaration !== false;\n                        return;\n                    }\n                    var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n                    if (this.object && typeof this.object._finalize === 'function') {\n                        this.object._finalize(true);\n                    }\n                    this.object = {\n                        name: name || '',\n                        fromDeclaration: fromDeclaration !== false,\n                        geometry: {\n                            vertices: [],\n                            normals: [],\n                            colors: [],\n                            uvs: []\n                        },\n                        materials: [],\n                        smooth: true,\n                        startMaterial: function (name, libraries) {\n                            var previous = this._finalize(false);\n                            if (previous && (previous.inherited || previous.groupCount <= 0)) {\n                                this.materials.splice(previous.index, 1);\n                            }\n                            var material = {\n                                index: this.materials.length,\n                                name: name || '',\n                                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n                                smooth: previous !== undefined ? previous.smooth : this.smooth,\n                                groupStart: previous !== undefined ? previous.groupEnd : 0,\n                                groupEnd: -1,\n                                groupCount: -1,\n                                inherited: false,\n                                clone: function (index) {\n                                    var cloned = {\n                                        index: typeof index === 'number' ? index : this.index,\n                                        name: this.name,\n                                        mtllib: this.mtllib,\n                                        smooth: this.smooth,\n                                        groupStart: 0,\n                                        groupEnd: -1,\n                                        groupCount: -1,\n                                        inherited: false\n                                    };\n                                    cloned.clone = this.clone.bind(cloned);\n                                    return cloned;\n                                }\n                            };\n                            this.materials.push(material);\n                            return material;\n                        },\n                        currentMaterial: function () {\n                            if (this.materials.length > 0) {\n                                return this.materials[this.materials.length - 1];\n                            }\n                            return undefined;\n                        },\n                        _finalize: function (end) {\n                            var lastMultiMaterial = this.currentMaterial();\n                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n                                lastMultiMaterial.inherited = false;\n                            }\n                            if (end && this.materials.length > 1) {\n                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {\n                                    if (this.materials[mi].groupCount <= 0) {\n                                        this.materials.splice(mi, 1);\n                                    }\n                                }\n                            }\n                            if (end && this.materials.length === 0) {\n                                this.materials.push({\n                                    name: '',\n                                    smooth: this.smooth\n                                });\n                            }\n                            return lastMultiMaterial;\n                        }\n                    };\n                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n                        var declared = previousMaterial.clone(0);\n                        declared.inherited = true;\n                        this.object.materials.push(declared);\n                    }\n                    this.objects.push(this.object);\n                },\n                finalize: function () {\n                    if (this.object && typeof this.object._finalize === 'function') {\n                        this.object._finalize(true);\n                    }\n                },\n                parseVertexIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\n                },\n                parseNormalIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\n                },\n                parseUVIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 2) * 2;\n                },\n                addVertex: function (a, b, c) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addVertexPoint: function (a) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                },\n                addVertexLine: function (a) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                },\n                addNormal: function (a, b, c) {\n                    var src = this.normals;\n                    var dst = this.object.geometry.normals;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addColor: function (a, b, c) {\n                    var src = this.colors;\n                    var dst = this.object.geometry.colors;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addUV: function (a, b, c) {\n                    var src = this.uvs;\n                    var dst = this.object.geometry.uvs;\n                    dst.push(src[a + 0], src[a + 1]);\n                    dst.push(src[b + 0], src[b + 1]);\n                    dst.push(src[c + 0], src[c + 1]);\n                },\n                addUVLine: function (a) {\n                    var src = this.uvs;\n                    var dst = this.object.geometry.uvs;\n                    dst.push(src[a + 0], src[a + 1]);\n                },\n                addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n                    var vLen = this.vertices.length;\n                    var ia = this.parseVertexIndex(a, vLen);\n                    var ib = this.parseVertexIndex(b, vLen);\n                    var ic = this.parseVertexIndex(c, vLen);\n                    this.addVertex(ia, ib, ic);\n                    if (this.colors.length > 0) {\n                        this.addColor(ia, ib, ic);\n                    }\n                    if (ua !== undefined && ua !== '') {\n                        var uvLen = this.uvs.length;\n                        ia = this.parseUVIndex(ua, uvLen);\n                        ib = this.parseUVIndex(ub, uvLen);\n                        ic = this.parseUVIndex(uc, uvLen);\n                        this.addUV(ia, ib, ic);\n                    }\n                    if (na !== undefined && na !== '') {\n                        var nLen = this.normals.length;\n                        ia = this.parseNormalIndex(na, nLen);\n                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\n                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\n                        this.addNormal(ia, ib, ic);\n                    }\n                },\n                addPointGeometry: function (vertices) {\n                    this.object.geometry.type = 'Points';\n                    var vLen = this.vertices.length;\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\n                        this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\n                    }\n                },\n                addLineGeometry: function (vertices, uvs) {\n                    this.object.geometry.type = 'Line';\n                    var vLen = this.vertices.length;\n                    var uvLen = this.uvs.length;\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\n                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n                    }\n                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\n                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n                    }\n                }\n            };\n            state.startObject('', false);\n            return state;\n        }\n        function OBJLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.materials = null;\n        }\n        OBJLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: OBJLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(this.path);\n                loader.load(url, function (text) {\n                    onLoad(scope.parse(text));\n                }, onProgress, onError);\n            },\n            setMaterials: function (materials) {\n                this.materials = materials;\n                return this;\n            },\n            parse: function (text) {\n                var state = new ParserState();\n                if (text.indexOf('\\r\\n') !== -1) {\n                    text = text.replace(/\\r\\n/g, '\\n');\n                }\n                if (text.indexOf('\\\\\\n') !== -1) {\n                    text = text.replace(/\\\\\\n/g, '');\n                }\n                var lines = text.split('\\n');\n                var line = '', lineFirstChar = '';\n                var lineLength = 0;\n                var result = [];\n                var trimLeft = typeof ''.trimLeft === 'function';\n                for (var i = 0, l = lines.length; i < l; i++) {\n                    line = lines[i];\n                    line = trimLeft ? line.trimLeft() : line.trim();\n                    lineLength = line.length;\n                    if (lineLength === 0)\n                        continue;\n                    lineFirstChar = line.charAt(0);\n                    if (lineFirstChar === '#')\n                        continue;\n                    if (lineFirstChar === 'v') {\n                        var data = line.split(/\\s+/);\n                        switch (data[0]) {\n                        case 'v':\n                            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n                            if (data.length >= 7) {\n                                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n                            }\n                            break;\n                        case 'vn':\n                            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n                            break;\n                        case 'vt':\n                            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n                            break;\n                        }\n                    } else if (lineFirstChar === 'f') {\n                        var lineData = line.substr(1).trim();\n                        var vertexData = lineData.split(/\\s+/);\n                        var faceVertices = [];\n                        for (var j = 0, jl = vertexData.length; j < jl; j++) {\n                            var vertex = vertexData[j];\n                            if (vertex.length > 0) {\n                                var vertexParts = vertex.split('/');\n                                faceVertices.push(vertexParts);\n                            }\n                        }\n                        var v1 = faceVertices[0];\n                        for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n                            var v2 = faceVertices[j];\n                            var v3 = faceVertices[j + 1];\n                            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n                        }\n                    } else if (lineFirstChar === 'l') {\n                        var lineParts = line.substring(1).trim().split(' ');\n                        var lineVertices = [], lineUVs = [];\n                        if (line.indexOf('/') === -1) {\n                            lineVertices = lineParts;\n                        } else {\n                            for (var li = 0, llen = lineParts.length; li < llen; li++) {\n                                var parts = lineParts[li].split('/');\n                                if (parts[0] !== '')\n                                    lineVertices.push(parts[0]);\n                                if (parts[1] !== '')\n                                    lineUVs.push(parts[1]);\n                            }\n                        }\n                        state.addLineGeometry(lineVertices, lineUVs);\n                    } else if (lineFirstChar === 'p') {\n                        var lineData = line.substr(1).trim();\n                        var pointData = lineData.split(' ');\n                        state.addPointGeometry(pointData);\n                    } else if ((result = object_pattern.exec(line)) !== null) {\n                        var name = (' ' + result[0].substr(1).trim()).substr(1);\n                        state.startObject(name);\n                    } else if (material_use_pattern.test(line)) {\n                        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n                    } else if (material_library_pattern.test(line)) {\n                        state.materialLibraries.push(line.substring(7).trim());\n                    } else if (map_use_pattern.test(line)) {\n                        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n                    } else if (lineFirstChar === 's') {\n                        result = line.split(' ');\n                        if (result.length > 1) {\n                            var value = result[1].trim().toLowerCase();\n                            state.object.smooth = value !== '0' && value !== 'off';\n                        } else {\n                            state.object.smooth = true;\n                        }\n                        var material = state.object.currentMaterial();\n                        if (material)\n                            material.smooth = state.object.smooth;\n                    } else {\n                        if (line === '\\0')\n                            continue;\n                        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n                    }\n                }\n                state.finalize();\n                var container = new THREE.Group();\n                container.materialLibraries = [].concat(state.materialLibraries);\n                for (var i = 0, l = state.objects.length; i < l; i++) {\n                    var object = state.objects[i];\n                    var geometry = object.geometry;\n                    var materials = object.materials;\n                    var isLine = geometry.type === 'Line';\n                    var isPoints = geometry.type === 'Points';\n                    var hasVertexColors = false;\n                    if (geometry.vertices.length === 0)\n                        continue;\n                    var buffergeometry = new THREE.BufferGeometry();\n                    buffergeometry.setAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));\n                    if (geometry.normals.length > 0) {\n                        buffergeometry.setAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));\n                    } else {\n                        buffergeometry.computeVertexNormals();\n                    }\n                    if (geometry.colors.length > 0) {\n                        hasVertexColors = true;\n                        buffergeometry.setAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));\n                    }\n                    if (geometry.uvs.length > 0) {\n                        buffergeometry.setAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));\n                    }\n                    var createdMaterials = [];\n                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n                        var sourceMaterial = materials[mi];\n                        var materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n                        var material = state.materials[materialHash];\n                        if (this.materials !== null) {\n                            material = this.materials.create(sourceMaterial.name);\n                            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\n                                var materialLine = new THREE.LineBasicMaterial();\n                                THREE.Material.prototype.copy.call(materialLine, material);\n                                materialLine.color.copy(material.color);\n                                material = materialLine;\n                            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {\n                                var materialPoints = new THREE.PointsMaterial({\n                                    size: 10,\n                                    sizeAttenuation: false\n                                });\n                                THREE.Material.prototype.copy.call(materialPoints, material);\n                                materialPoints.color.copy(material.color);\n                                materialPoints.map = material.map;\n                                material = materialPoints;\n                            }\n                        }\n                        if (material === undefined) {\n                            if (isLine) {\n                                material = new THREE.LineBasicMaterial();\n                            } else if (isPoints) {\n                                material = new THREE.PointsMaterial({\n                                    size: 1,\n                                    sizeAttenuation: false\n                                });\n                            } else {\n                                material = new THREE.MeshPhongMaterial();\n                            }\n                            material.name = sourceMaterial.name;\n                            material.flatShading = sourceMaterial.smooth ? false : true;\n                            material.vertexColors = hasVertexColors;\n                            state.materials[materialHash] = material;\n                        }\n                        createdMaterials.push(material);\n                    }\n                    var mesh;\n                    if (createdMaterials.length > 1) {\n                        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n                            var sourceMaterial = materials[mi];\n                            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n                        }\n                        if (isLine) {\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\n                        } else if (isPoints) {\n                            mesh = new THREE.Points(buffergeometry, createdMaterials);\n                        } else {\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\n                        }\n                    } else {\n                        if (isLine) {\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\n                        } else if (isPoints) {\n                            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\n                        } else {\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\n                        }\n                    }\n                    mesh.name = object.name;\n                    container.add(mesh);\n                }\n                return container;\n            }\n        });\n        return OBJLoader;\n    }();\n    return OBJLoader;\n});\ndefine('skylark-threejs-ex/loaders/PCDLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PCDLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.littleEndian = true;\n    };\n    PCDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PCDLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                try {\n                    onLoad(scope.parse(data, url));\n                } catch (e) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        throw e;\n                    }\n                }\n            }, onProgress, onError);\n        },\n        parse: function (data, url) {\n            function decompressLZF(inData, outLength) {\n                var inLength = inData.length;\n                var outData = new Uint8Array(outLength);\n                var inPtr = 0;\n                var outPtr = 0;\n                var ctrl;\n                var len;\n                var ref;\n                do {\n                    ctrl = inData[inPtr++];\n                    if (ctrl < 1 << 5) {\n                        ctrl++;\n                        if (outPtr + ctrl > outLength)\n                            throw new Error('Output buffer is not large enough');\n                        if (inPtr + ctrl > inLength)\n                            throw new Error('Invalid compressed data');\n                        do {\n                            outData[outPtr++] = inData[inPtr++];\n                        } while (--ctrl);\n                    } else {\n                        len = ctrl >> 5;\n                        ref = outPtr - ((ctrl & 31) << 8) - 1;\n                        if (inPtr >= inLength)\n                            throw new Error('Invalid compressed data');\n                        if (len === 7) {\n                            len += inData[inPtr++];\n                            if (inPtr >= inLength)\n                                throw new Error('Invalid compressed data');\n                        }\n                        ref -= inData[inPtr++];\n                        if (outPtr + len + 2 > outLength)\n                            throw new Error('Output buffer is not large enough');\n                        if (ref < 0)\n                            throw new Error('Invalid compressed data');\n                        if (ref >= outPtr)\n                            throw new Error('Invalid compressed data');\n                        do {\n                            outData[outPtr++] = outData[ref++];\n                        } while (--len + 2);\n                    }\n                } while (inPtr < inLength);\n                return outData;\n            }\n            function parseHeader(data) {\n                var PCDheader = {};\n                var result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n                var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n                PCDheader.data = result2[1];\n                PCDheader.headerLen = result2[0].length + result1;\n                PCDheader.str = data.substr(0, PCDheader.headerLen);\n                PCDheader.str = PCDheader.str.replace(/\\#.*/gi, '');\n                PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n                PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n                PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n                PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n                PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n                PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n                PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n                PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n                PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str);\n                if (PCDheader.version !== null)\n                    PCDheader.version = parseFloat(PCDheader.version[1]);\n                if (PCDheader.fields !== null)\n                    PCDheader.fields = PCDheader.fields[1].split(' ');\n                if (PCDheader.type !== null)\n                    PCDheader.type = PCDheader.type[1].split(' ');\n                if (PCDheader.width !== null)\n                    PCDheader.width = parseInt(PCDheader.width[1]);\n                if (PCDheader.height !== null)\n                    PCDheader.height = parseInt(PCDheader.height[1]);\n                if (PCDheader.viewpoint !== null)\n                    PCDheader.viewpoint = PCDheader.viewpoint[1];\n                if (PCDheader.points !== null)\n                    PCDheader.points = parseInt(PCDheader.points[1], 10);\n                if (PCDheader.points === null)\n                    PCDheader.points = PCDheader.width * PCDheader.height;\n                if (PCDheader.size !== null) {\n                    PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n                        return parseInt(x, 10);\n                    });\n                }\n                if (PCDheader.count !== null) {\n                    PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n                        return parseInt(x, 10);\n                    });\n                } else {\n                    PCDheader.count = [];\n                    for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n                        PCDheader.count.push(1);\n                    }\n                }\n                PCDheader.offset = {};\n                var sizeSum = 0;\n                for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n                    if (PCDheader.data === 'ascii') {\n                        PCDheader.offset[PCDheader.fields[i]] = i;\n                    } else {\n                        PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n                        sizeSum += PCDheader.size[i];\n                    }\n                }\n                PCDheader.rowSize = sizeSum;\n                return PCDheader;\n            }\n            var textData = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n            var PCDheader = parseHeader(textData);\n            var position = [];\n            var normal = [];\n            var color = [];\n            if (PCDheader.data === 'ascii') {\n                var offset = PCDheader.offset;\n                var pcdData = textData.substr(PCDheader.headerLen);\n                var lines = pcdData.split('\\n');\n                for (var i = 0, l = lines.length; i < l; i++) {\n                    if (lines[i] === '')\n                        continue;\n                    var line = lines[i].split(' ');\n                    if (offset.x !== undefined) {\n                        position.push(parseFloat(line[offset.x]));\n                        position.push(parseFloat(line[offset.y]));\n                        position.push(parseFloat(line[offset.z]));\n                    }\n                    if (offset.rgb !== undefined) {\n                        var rgb = parseFloat(line[offset.rgb]);\n                        var r = rgb >> 16 & 255;\n                        var g = rgb >> 8 & 255;\n                        var b = rgb >> 0 & 255;\n                        color.push(r / 255, g / 255, b / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(parseFloat(line[offset.normal_x]));\n                        normal.push(parseFloat(line[offset.normal_y]));\n                        normal.push(parseFloat(line[offset.normal_z]));\n                    }\n                }\n            }\n            if (PCDheader.data === 'binary_compressed') {\n                var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n                var compressedSize = sizes[0];\n                var decompressedSize = sizes[1];\n                var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n                var dataview = new DataView(decompressed.buffer);\n                var offset = PCDheader.offset;\n                for (var i = 0; i < PCDheader.points; i++) {\n                    if (offset.x !== undefined) {\n                        position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n                        position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n                        position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n                    }\n                    if (offset.rgb !== undefined) {\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n                    }\n                }\n            }\n            if (PCDheader.data === 'binary') {\n                var dataview = new DataView(data, PCDheader.headerLen);\n                var offset = PCDheader.offset;\n                for (var i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n                    if (offset.x !== undefined) {\n                        position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n                        position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n                        position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n                    }\n                    if (offset.rgb !== undefined) {\n                        color.push(dataview.getUint8(row + offset.rgb + 2) / 255);\n                        color.push(dataview.getUint8(row + offset.rgb + 1) / 255);\n                        color.push(dataview.getUint8(row + offset.rgb + 0) / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n                        normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n                        normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n                    }\n                }\n            }\n            var geometry = new THREE.BufferGeometry();\n            if (position.length > 0)\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            if (normal.length > 0)\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal, 3));\n            if (color.length > 0)\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\n            geometry.computeBoundingSphere();\n            var material = new THREE.PointsMaterial({ size: 0.005 });\n            if (color.length > 0) {\n                material.vertexColors = true;\n            } else {\n                material.color.setHex(Math.random() * 16777215);\n            }\n            var mesh = new THREE.Points(geometry, material);\n            var name = url.split('').reverse().join('');\n            name = /([^\\/]*)/.exec(name);\n            name = name[1].split('').reverse().join('');\n            mesh.name = name;\n            return mesh;\n        }\n    });\n    return PCDLoader;\n});\ndefine('skylark-threejs-ex/loaders/PLYLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PLYLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.propertyNameMapping = {};\n    };\n    PLYLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PLYLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        setPropertyNameMapping: function (mapping) {\n            this.propertyNameMapping = mapping;\n        },\n        parse: function (data) {\n            function parseHeader(data) {\n                var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n                var headerText = '';\n                var headerLength = 0;\n                var result = patternHeader.exec(data);\n                if (result !== null) {\n                    headerText = result[1];\n                    headerLength = result[0].length;\n                }\n                var header = {\n                    comments: [],\n                    elements: [],\n                    headerLength: headerLength\n                };\n                var lines = headerText.split('\\n');\n                var currentElement;\n                var lineType, lineValues;\n                function make_ply_element_property(propertValues, propertyNameMapping) {\n                    var property = { type: propertValues[0] };\n                    if (property.type === 'list') {\n                        property.name = propertValues[3];\n                        property.countType = propertValues[1];\n                        property.itemType = propertValues[2];\n                    } else {\n                        property.name = propertValues[1];\n                    }\n                    if (property.name in propertyNameMapping) {\n                        property.name = propertyNameMapping[property.name];\n                    }\n                    return property;\n                }\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '')\n                        continue;\n                    lineValues = line.split(/\\s+/);\n                    lineType = lineValues.shift();\n                    line = lineValues.join(' ');\n                    switch (lineType) {\n                    case 'format':\n                        header.format = lineValues[0];\n                        header.version = lineValues[1];\n                        break;\n                    case 'comment':\n                        header.comments.push(line);\n                        break;\n                    case 'element':\n                        if (currentElement !== undefined) {\n                            header.elements.push(currentElement);\n                        }\n                        currentElement = {};\n                        currentElement.name = lineValues[0];\n                        currentElement.count = parseInt(lineValues[1]);\n                        currentElement.properties = [];\n                        break;\n                    case 'property':\n                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n                        break;\n                    default:\n                        console.log('unhandled', lineType, lineValues);\n                    }\n                }\n                if (currentElement !== undefined) {\n                    header.elements.push(currentElement);\n                }\n                return header;\n            }\n            function parseASCIINumber(n, type) {\n                switch (type) {\n                case 'char':\n                case 'uchar':\n                case 'short':\n                case 'ushort':\n                case 'int':\n                case 'uint':\n                case 'int8':\n                case 'uint8':\n                case 'int16':\n                case 'uint16':\n                case 'int32':\n                case 'uint32':\n                    return parseInt(n);\n                case 'float':\n                case 'double':\n                case 'float32':\n                case 'float64':\n                    return parseFloat(n);\n                }\n            }\n            function parseASCIIElement(properties, line) {\n                var values = line.split(/\\s+/);\n                var element = {};\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        var n = parseASCIINumber(values.shift(), properties[i].countType);\n                        for (var j = 0; j < n; j++) {\n                            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n                    }\n                }\n                return element;\n            }\n            function parseASCII(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var result;\n                var patternBody = /end_header\\s([\\s\\S]*)$/;\n                var body = '';\n                if ((result = patternBody.exec(data)) !== null) {\n                    body = result[1];\n                }\n                var lines = body.split('\\n');\n                var currentElement = 0;\n                var currentElementCount = 0;\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '') {\n                        continue;\n                    }\n                    if (currentElementCount >= header.elements[currentElement].count) {\n                        currentElement++;\n                        currentElementCount = 0;\n                    }\n                    var element = parseASCIIElement(header.elements[currentElement].properties, line);\n                    handleElement(buffer, header.elements[currentElement].name, element);\n                    currentElementCount++;\n                }\n                return postProcess(buffer);\n            }\n            function postProcess(buffer) {\n                var geometry = new THREE.BufferGeometry();\n                if (buffer.indices.length > 0) {\n                    geometry.setIndex(buffer.indices);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3));\n                if (buffer.normals.length > 0) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3));\n                }\n                if (buffer.uvs.length > 0) {\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2));\n                }\n                if (buffer.colors.length > 0) {\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3));\n                }\n                if (buffer.faceVertexUvs.length > 0) {\n                    geometry = geometry.toNonIndexed();\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2));\n                }\n                geometry.computeBoundingSphere();\n                return geometry;\n            }\n            function handleElement(buffer, elementName, element) {\n                if (elementName === 'vertex') {\n                    buffer.vertices.push(element.x, element.y, element.z);\n                    if ('nx' in element && 'ny' in element && 'nz' in element) {\n                        buffer.normals.push(element.nx, element.ny, element.nz);\n                    }\n                    if ('s' in element && 't' in element) {\n                        buffer.uvs.push(element.s, element.t);\n                    }\n                    if ('red' in element && 'green' in element && 'blue' in element) {\n                        buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n                    }\n                } else if (elementName === 'face') {\n                    var vertex_indices = element.vertex_indices || element.vertex_index;\n                    var texcoord = element.texcoord;\n                    if (vertex_indices.length === 3) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n                        if (texcoord && texcoord.length === 6) {\n                            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n                            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n                            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n                        }\n                    } else if (vertex_indices.length === 4) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n                        buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n                    }\n                }\n            }\n            function binaryRead(dataview, at, type, little_endian) {\n                switch (type) {\n                case 'int8':\n                case 'char':\n                    return [\n                        dataview.getInt8(at),\n                        1\n                    ];\n                case 'uint8':\n                case 'uchar':\n                    return [\n                        dataview.getUint8(at),\n                        1\n                    ];\n                case 'int16':\n                case 'short':\n                    return [\n                        dataview.getInt16(at, little_endian),\n                        2\n                    ];\n                case 'uint16':\n                case 'ushort':\n                    return [\n                        dataview.getUint16(at, little_endian),\n                        2\n                    ];\n                case 'int32':\n                case 'int':\n                    return [\n                        dataview.getInt32(at, little_endian),\n                        4\n                    ];\n                case 'uint32':\n                case 'uint':\n                    return [\n                        dataview.getUint32(at, little_endian),\n                        4\n                    ];\n                case 'float32':\n                case 'float':\n                    return [\n                        dataview.getFloat32(at, little_endian),\n                        4\n                    ];\n                case 'float64':\n                case 'double':\n                    return [\n                        dataview.getFloat64(at, little_endian),\n                        8\n                    ];\n                }\n            }\n            function binaryReadElement(dataview, at, properties, little_endian) {\n                var element = {};\n                var result, read = 0;\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n                        var n = result[0];\n                        read += result[1];\n                        for (var j = 0; j < n; j++) {\n                            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n                            list.push(result[0]);\n                            read += result[1];\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n                        element[properties[i].name] = result[0];\n                        read += result[1];\n                    }\n                }\n                return [\n                    element,\n                    read\n                ];\n            }\n            function parseBinary(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var little_endian = header.format === 'binary_little_endian';\n                var body = new DataView(data, header.headerLength);\n                var result, loc = 0;\n                for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n                    for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n                        result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n                        loc += result[1];\n                        var element = result[0];\n                        handleElement(buffer, header.elements[currentElement].name, element);\n                    }\n                }\n                return postProcess(buffer);\n            }\n            var geometry;\n            var scope = this;\n            if (data instanceof ArrayBuffer) {\n                var text = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                var header = parseHeader(text);\n                geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n            } else {\n                geometry = parseASCII(data, parseHeader(data));\n            }\n            return geometry;\n        }\n    });\n    return PLYLoader;\n});\ndefine('skylark-threejs-ex/loaders/PRWMLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PRWMLoader = function () {\n        var bigEndianPlatform = null;\n        function isBigEndianPlatform() {\n            if (bigEndianPlatform === null) {\n                var buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);\n                uint8Array[0] = 170;\n                uint8Array[1] = 187;\n                bigEndianPlatform = uint16Array[0] === 43707;\n            }\n            return bigEndianPlatform;\n        }\n        var InvertedEncodingTypes = [\n            null,\n            Float32Array,\n            null,\n            Int8Array,\n            Int16Array,\n            null,\n            Int32Array,\n            Uint8Array,\n            Uint16Array,\n            null,\n            Uint32Array\n        ];\n        var getMethods = {\n            Uint16Array: 'getUint16',\n            Uint32Array: 'getUint32',\n            Int16Array: 'getInt16',\n            Int32Array: 'getInt32',\n            Float32Array: 'getFloat32',\n            Float64Array: 'getFloat64'\n        };\n        function copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n            var bytesPerElement = viewType.BYTES_PER_ELEMENT, result;\n            if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n                result = new viewType(sourceArrayBuffer, position, length);\n            } else {\n                var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian, i = 0;\n                result = new viewType(length);\n                for (; i < length; i++) {\n                    result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n                }\n            }\n            return result;\n        }\n        function decodePrwm(buffer) {\n            var array = new Uint8Array(buffer), version = array[0], flags = array[1], indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31, valuesNumber = 0, indicesNumber = 0;\n            if (bigEndian) {\n                valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n                indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n            } else {\n                valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n                indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n            }\n            if (version === 0) {\n                throw new Error('PRWM decoder: Invalid format version: 0');\n            } else if (version !== 1) {\n                throw new Error('PRWM decoder: Unsupported format version: ' + version);\n            }\n            if (!indexedGeometry) {\n                if (indicesType !== 0) {\n                    throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');\n                } else if (indicesNumber !== 0) {\n                    throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');\n                }\n            }\n            var pos = 8;\n            var attributes = {}, attributeName, char, attributeType, cardinality, encodingType, arrayType, values, indices, i;\n            for (i = 0; i < attributesNumber; i++) {\n                attributeName = '';\n                while (pos < array.length) {\n                    char = array[pos];\n                    pos++;\n                    if (char === 0) {\n                        break;\n                    } else {\n                        attributeName += String.fromCharCode(char);\n                    }\n                }\n                flags = array[pos];\n                attributeType = flags >> 7 & 1;\n                cardinality = (flags >> 4 & 3) + 1;\n                encodingType = flags & 15;\n                arrayType = InvertedEncodingTypes[encodingType];\n                pos++;\n                pos = Math.ceil(pos / 4) * 4;\n                values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n                pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n                attributes[attributeName] = {\n                    type: attributeType,\n                    cardinality: cardinality,\n                    values: values\n                };\n            }\n            pos = Math.ceil(pos / 4) * 4;\n            indices = null;\n            if (indexedGeometry) {\n                indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n            }\n            return {\n                version: version,\n                attributes: attributes,\n                indices: indices\n            };\n        }\n        function PRWMLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        PRWMLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: PRWMLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(scope.path);\n                loader.setResponseType('arraybuffer');\n                url = url.replace(/\\*/g, isBigEndianPlatform() ? 'be' : 'le');\n                loader.load(url, function (arrayBuffer) {\n                    onLoad(scope.parse(arrayBuffer));\n                }, onProgress, onError);\n            },\n            parse: function (arrayBuffer) {\n                var data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new THREE.BufferGeometry(), attribute, i;\n                for (i = 0; i < attributesKey.length; i++) {\n                    attribute = data.attributes[attributesKey[i]];\n                    bufferGeometry.setAttribute(attributesKey[i], new THREE.BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n                }\n                if (data.indices !== null) {\n                    bufferGeometry.setIndex(new THREE.BufferAttribute(data.indices, 1));\n                }\n                return bufferGeometry;\n            }\n        });\n        PRWMLoader.isBigEndianPlatform = function () {\n            return isBigEndianPlatform();\n        };\n        return PRWMLoader;\n    }();\n    return PRWMLoader;\n});\ndefine('skylark-threejs-ex/loaders/STLLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var STLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    STLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: STLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                try {\n                    onLoad(scope.parse(text));\n                } catch (exception) {\n                    if (onError) {\n                        onError(exception);\n                    }\n                }\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function isBinary(data) {\n                var expect, face_size, n_faces, reader;\n                reader = new DataView(data);\n                face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                n_faces = reader.getUint32(80, true);\n                expect = 80 + 32 / 8 + n_faces * face_size;\n                if (expect === reader.byteLength) {\n                    return true;\n                }\n                var solid = [\n                    115,\n                    111,\n                    108,\n                    105,\n                    100\n                ];\n                for (var off = 0; off < 5; off++) {\n                    if (matchDataViewAt(solid, reader, off))\n                        return false;\n                }\n                return true;\n            }\n            function matchDataViewAt(query, reader, offset) {\n                for (var i = 0, il = query.length; i < il; i++) {\n                    if (query[i] !== reader.getUint8(offset + i, false))\n                        return false;\n                }\n                return true;\n            }\n            function parseBinary(data) {\n                var reader = new DataView(data);\n                var faces = reader.getUint32(80, true);\n                var r, g, b, hasColors = false, colors;\n                var defaultR, defaultG, defaultB, alpha;\n                for (var index = 0; index < 80 - 10; index++) {\n                    if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n                        hasColors = true;\n                        colors = new Float32Array(faces * 3 * 3);\n                        defaultR = reader.getUint8(index + 6) / 255;\n                        defaultG = reader.getUint8(index + 7) / 255;\n                        defaultB = reader.getUint8(index + 8) / 255;\n                        alpha = reader.getUint8(index + 9) / 255;\n                    }\n                }\n                var dataOffset = 84;\n                var faceLength = 12 * 4 + 2;\n                var geometry = new THREE.BufferGeometry();\n                var vertices = new Float32Array(faces * 3 * 3);\n                var normals = new Float32Array(faces * 3 * 3);\n                for (var face = 0; face < faces; face++) {\n                    var start = dataOffset + face * faceLength;\n                    var normalX = reader.getFloat32(start, true);\n                    var normalY = reader.getFloat32(start + 4, true);\n                    var normalZ = reader.getFloat32(start + 8, true);\n                    if (hasColors) {\n                        var packedColor = reader.getUint16(start + 48, true);\n                        if ((packedColor & 32768) === 0) {\n                            r = (packedColor & 31) / 31;\n                            g = (packedColor >> 5 & 31) / 31;\n                            b = (packedColor >> 10 & 31) / 31;\n                        } else {\n                            r = defaultR;\n                            g = defaultG;\n                            b = defaultB;\n                        }\n                    }\n                    for (var i = 1; i <= 3; i++) {\n                        var vertexstart = start + i * 12;\n                        var componentIdx = face * 3 * 3 + (i - 1) * 3;\n                        vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n                        vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n                        vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n                        normals[componentIdx] = normalX;\n                        normals[componentIdx + 1] = normalY;\n                        normals[componentIdx + 2] = normalZ;\n                        if (hasColors) {\n                            colors[componentIdx] = r;\n                            colors[componentIdx + 1] = g;\n                            colors[componentIdx + 2] = b;\n                        }\n                    }\n                }\n                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n                geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                if (hasColors) {\n                    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n                    geometry.hasColors = true;\n                    geometry.alpha = alpha;\n                }\n                return geometry;\n            }\n            function parseASCII(data) {\n                var geometry = new THREE.BufferGeometry();\n                var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n                var patternFace = /facet([\\s\\S]*?)endfacet/g;\n                var faceCounter = 0;\n                var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n                var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n                var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n                var vertices = [];\n                var normals = [];\n                var normal = new THREE.Vector3();\n                var result;\n                var groupCount = 0;\n                var startVertex = 0;\n                var endVertex = 0;\n                while ((result = patternSolid.exec(data)) !== null) {\n                    startVertex = endVertex;\n                    var solid = result[0];\n                    while ((result = patternFace.exec(solid)) !== null) {\n                        var vertexCountPerFace = 0;\n                        var normalCountPerFace = 0;\n                        var text = result[0];\n                        while ((result = patternNormal.exec(text)) !== null) {\n                            normal.x = parseFloat(result[1]);\n                            normal.y = parseFloat(result[2]);\n                            normal.z = parseFloat(result[3]);\n                            normalCountPerFace++;\n                        }\n                        while ((result = patternVertex.exec(text)) !== null) {\n                            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n                            normals.push(normal.x, normal.y, normal.z);\n                            vertexCountPerFace++;\n                            endVertex++;\n                        }\n                        if (normalCountPerFace !== 1) {\n                            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n                        }\n                        if (vertexCountPerFace !== 3) {\n                            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n                        }\n                        faceCounter++;\n                    }\n                    var start = startVertex;\n                    var count = endVertex - startVertex;\n                    geometry.addGroup(start, count, groupCount);\n                    groupCount++;\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                return geometry;\n            }\n            function ensureString(buffer) {\n                if (typeof buffer !== 'string') {\n                    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer));\n                }\n                return buffer;\n            }\n            function ensureBinary(buffer) {\n                if (typeof buffer === 'string') {\n                    var array_buffer = new Uint8Array(buffer.length);\n                    for (var i = 0; i < buffer.length; i++) {\n                        array_buffer[i] = buffer.charCodeAt(i) & 255;\n                    }\n                    return array_buffer.buffer || array_buffer;\n                } else {\n                    return buffer;\n                }\n            }\n            var binData = ensureBinary(data);\n            return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n        }\n    });\n    return STLLoader;\n});\ndefine('skylark-threejs-ex/loaders/SVGLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SVGLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.defaultDPI = 90;\n        this.defaultUnit = 'px';\n    };\n    SVGLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: SVGLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (text) {\n            var scope = this;\n            function parseNode(node, style) {\n                if (node.nodeType !== 1)\n                    return;\n                var transform = getNodeTransform(node);\n                var path = null;\n                switch (node.nodeName) {\n                case 'svg':\n                    break;\n                case 'g':\n                    style = parseStyle(node, style);\n                    break;\n                case 'path':\n                    style = parseStyle(node, style);\n                    if (node.hasAttribute('d'))\n                        path = parsePathNode(node);\n                    break;\n                case 'rect':\n                    style = parseStyle(node, style);\n                    path = parseRectNode(node);\n                    break;\n                case 'polygon':\n                    style = parseStyle(node, style);\n                    path = parsePolygonNode(node);\n                    break;\n                case 'polyline':\n                    style = parseStyle(node, style);\n                    path = parsePolylineNode(node);\n                    break;\n                case 'circle':\n                    style = parseStyle(node, style);\n                    path = parseCircleNode(node);\n                    break;\n                case 'ellipse':\n                    style = parseStyle(node, style);\n                    path = parseEllipseNode(node);\n                    break;\n                case 'line':\n                    style = parseStyle(node, style);\n                    path = parseLineNode(node);\n                    break;\n                default:\n                    console.log(node);\n                }\n                if (path) {\n                    if (style.fill !== undefined && style.fill !== 'none') {\n                        path.color.setStyle(style.fill);\n                    }\n                    transformPath(path, currentTransform);\n                    paths.push(path);\n                    path.userData = {\n                        node: node,\n                        style: style\n                    };\n                }\n                var nodes = node.childNodes;\n                for (var i = 0; i < nodes.length; i++) {\n                    parseNode(nodes[i], style);\n                }\n                if (transform) {\n                    transformStack.pop();\n                    if (transformStack.length > 0) {\n                        currentTransform.copy(transformStack[transformStack.length - 1]);\n                    } else {\n                        currentTransform.identity();\n                    }\n                }\n            }\n            function parsePathNode(node) {\n                var path = new THREE.ShapePath();\n                var point = new THREE.Vector2();\n                var control = new THREE.Vector2();\n                var firstPoint = new THREE.Vector2();\n                var isFirstPoint = true;\n                var doSetFirstPoint = false;\n                var d = node.getAttribute('d');\n                var commands = d.match(/[a-df-z][^a-df-z]*/ig);\n                for (var i = 0, l = commands.length; i < l; i++) {\n                    var command = commands[i];\n                    var type = command.charAt(0);\n                    var data = command.substr(1).trim();\n                    if (isFirstPoint === true) {\n                        doSetFirstPoint = true;\n                        isFirstPoint = false;\n                    }\n                    switch (type) {\n                    case 'M':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            if (j === 0) {\n                                path.moveTo(point.x, point.y);\n                            } else {\n                                path.lineTo(point.x, point.y);\n                            }\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'H':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.x = numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'V':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.y = numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'L':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'C':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {\n                            path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n                            control.x = numbers[j + 2];\n                            control.y = numbers[j + 3];\n                            point.x = numbers[j + 4];\n                            point.y = numbers[j + 5];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'S':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n                            control.x = numbers[j + 0];\n                            control.y = numbers[j + 1];\n                            point.x = numbers[j + 2];\n                            point.y = numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'Q':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n                            control.x = numbers[j + 0];\n                            control.y = numbers[j + 1];\n                            point.x = numbers[j + 2];\n                            point.y = numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'T':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            var rx = getReflection(point.x, control.x);\n                            var ry = getReflection(point.y, control.y);\n                            path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n                            control.x = rx;\n                            control.y = ry;\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'A':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {\n                            var start = point.clone();\n                            point.x = numbers[j + 5];\n                            point.y = numbers[j + 6];\n                            control.x = point.x;\n                            control.y = point.y;\n                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'm':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x += numbers[j + 0];\n                            point.y += numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            if (j === 0) {\n                                path.moveTo(point.x, point.y);\n                            } else {\n                                path.lineTo(point.x, point.y);\n                            }\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'h':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.x += numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'v':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.y += numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'l':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x += numbers[j + 0];\n                            point.y += numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'c':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {\n                            path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n                            control.x = point.x + numbers[j + 2];\n                            control.y = point.y + numbers[j + 3];\n                            point.x += numbers[j + 4];\n                            point.y += numbers[j + 5];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 's':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n                            control.x = point.x + numbers[j + 0];\n                            control.y = point.y + numbers[j + 1];\n                            point.x += numbers[j + 2];\n                            point.y += numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'q':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n                            control.x = point.x + numbers[j + 0];\n                            control.y = point.y + numbers[j + 1];\n                            point.x += numbers[j + 2];\n                            point.y += numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 't':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            var rx = getReflection(point.x, control.x);\n                            var ry = getReflection(point.y, control.y);\n                            path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n                            control.x = rx;\n                            control.y = ry;\n                            point.x = point.x + numbers[j + 0];\n                            point.y = point.y + numbers[j + 1];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'a':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {\n                            var start = point.clone();\n                            point.x += numbers[j + 5];\n                            point.y += numbers[j + 6];\n                            control.x = point.x;\n                            control.y = point.y;\n                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'Z':\n                    case 'z':\n                        path.currentPath.autoClose = true;\n                        if (path.currentPath.curves.length > 0) {\n                            point.copy(firstPoint);\n                            path.currentPath.currentPoint.copy(point);\n                            isFirstPoint = true;\n                        }\n                        break;\n                    default:\n                        console.warn(command);\n                    }\n                    doSetFirstPoint = false;\n                }\n                return path;\n            }\n            function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n                x_axis_rotation = x_axis_rotation * Math.PI / 180;\n                rx = Math.abs(rx);\n                ry = Math.abs(ry);\n                var dx2 = (start.x - end.x) / 2;\n                var dy2 = (start.y - end.y) / 2;\n                var x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n                var y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n                var rxs = rx * rx;\n                var rys = ry * ry;\n                var x1ps = x1p * x1p;\n                var y1ps = y1p * y1p;\n                var cr = x1ps / rxs + y1ps / rys;\n                if (cr > 1) {\n                    var s = Math.sqrt(cr);\n                    rx = s * rx;\n                    ry = s * ry;\n                    rxs = rx * rx;\n                    rys = ry * ry;\n                }\n                var dq = rxs * y1ps + rys * x1ps;\n                var pq = (rxs * rys - dq) / dq;\n                var q = Math.sqrt(Math.max(0, pq));\n                if (large_arc_flag === sweep_flag)\n                    q = -q;\n                var cxp = q * rx * y1p / ry;\n                var cyp = -q * ry * x1p / rx;\n                var cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n                var cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n                var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n                var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n                path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n            }\n            function svgAngle(ux, uy, vx, vy) {\n                var dot = ux * vx + uy * vy;\n                var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n                var ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n                if (ux * vy - uy * vx < 0)\n                    ang = -ang;\n                return ang;\n            }\n            function parseRectNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('x') || 0);\n                var y = parseFloatWithUnits(node.getAttribute('y') || 0);\n                var rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n                var ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n                var w = parseFloatWithUnits(node.getAttribute('width'));\n                var h = parseFloatWithUnits(node.getAttribute('height'));\n                var path = new THREE.ShapePath();\n                path.moveTo(x + 2 * rx, y);\n                path.lineTo(x + w - 2 * rx, y);\n                if (rx !== 0 || ry !== 0)\n                    path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);\n                path.lineTo(x + w, y + h - 2 * ry);\n                if (rx !== 0 || ry !== 0)\n                    path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);\n                path.lineTo(x + 2 * rx, y + h);\n                if (rx !== 0 || ry !== 0) {\n                    path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);\n                }\n                path.lineTo(x, y + 2 * ry);\n                if (rx !== 0 || ry !== 0) {\n                    path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);\n                }\n                return path;\n            }\n            function parsePolygonNode(node) {\n                function iterator(match, a, b) {\n                    var x = parseFloatWithUnits(a);\n                    var y = parseFloatWithUnits(b);\n                    if (index === 0) {\n                        path.moveTo(x, y);\n                    } else {\n                        path.lineTo(x, y);\n                    }\n                    index++;\n                }\n                var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n                var path = new THREE.ShapePath();\n                var index = 0;\n                node.getAttribute('points').replace(regex, iterator);\n                path.currentPath.autoClose = true;\n                return path;\n            }\n            function parsePolylineNode(node) {\n                function iterator(match, a, b) {\n                    var x = parseFloatWithUnits(a);\n                    var y = parseFloatWithUnits(b);\n                    if (index === 0) {\n                        path.moveTo(x, y);\n                    } else {\n                        path.lineTo(x, y);\n                    }\n                    index++;\n                }\n                var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n                var path = new THREE.ShapePath();\n                var index = 0;\n                node.getAttribute('points').replace(regex, iterator);\n                path.currentPath.autoClose = false;\n                return path;\n            }\n            function parseCircleNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('cx'));\n                var y = parseFloatWithUnits(node.getAttribute('cy'));\n                var r = parseFloatWithUnits(node.getAttribute('r'));\n                var subpath = new THREE.Path();\n                subpath.absarc(x, y, r, 0, Math.PI * 2);\n                var path = new THREE.ShapePath();\n                path.subPaths.push(subpath);\n                return path;\n            }\n            function parseEllipseNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('cx'));\n                var y = parseFloatWithUnits(node.getAttribute('cy'));\n                var rx = parseFloatWithUnits(node.getAttribute('rx'));\n                var ry = parseFloatWithUnits(node.getAttribute('ry'));\n                var subpath = new THREE.Path();\n                subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n                var path = new THREE.ShapePath();\n                path.subPaths.push(subpath);\n                return path;\n            }\n            function parseLineNode(node) {\n                var x1 = parseFloatWithUnits(node.getAttribute('x1'));\n                var y1 = parseFloatWithUnits(node.getAttribute('y1'));\n                var x2 = parseFloatWithUnits(node.getAttribute('x2'));\n                var y2 = parseFloatWithUnits(node.getAttribute('y2'));\n                var path = new THREE.ShapePath();\n                path.moveTo(x1, y1);\n                path.lineTo(x2, y2);\n                path.currentPath.autoClose = false;\n                return path;\n            }\n            function parseStyle(node, style) {\n                style = Object.assign({}, style);\n                function addStyle(svgName, jsName, adjustFunction) {\n                    if (adjustFunction === undefined)\n                        adjustFunction = function copy(v) {\n                            return v;\n                        };\n                    if (node.hasAttribute(svgName))\n                        style[jsName] = adjustFunction(node.getAttribute(svgName));\n                    if (node.style && node.style[svgName] !== '')\n                        style[jsName] = adjustFunction(node.style[svgName]);\n                }\n                function clamp(v) {\n                    return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n                }\n                function positive(v) {\n                    return Math.max(0, parseFloatWithUnits(v));\n                }\n                addStyle('fill', 'fill');\n                addStyle('fill-opacity', 'fillOpacity', clamp);\n                addStyle('stroke', 'stroke');\n                addStyle('stroke-opacity', 'strokeOpacity', clamp);\n                addStyle('stroke-width', 'strokeWidth', positive);\n                addStyle('stroke-linejoin', 'strokeLineJoin');\n                addStyle('stroke-linecap', 'strokeLineCap');\n                addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n                return style;\n            }\n            function getReflection(a, b) {\n                return a - (b - a);\n            }\n            function parseFloats(string) {\n                var array = string.split(/[\\s,]+|(?=\\s?[+\\-])/);\n                for (var i = 0; i < array.length; i++) {\n                    var number = array[i];\n                    if (number.indexOf('.') !== number.lastIndexOf('.')) {\n                        var split = number.split('.');\n                        for (var s = 2; s < split.length; s++) {\n                            array.splice(i + s - 1, 0, '0.' + split[s]);\n                        }\n                    }\n                    array[i] = parseFloatWithUnits(number);\n                }\n                return array;\n            }\n            var units = [\n                'mm',\n                'cm',\n                'in',\n                'pt',\n                'pc',\n                'px'\n            ];\n            var unitConversion = {\n                'mm': {\n                    'mm': 1,\n                    'cm': 0.1,\n                    'in': 1 / 25.4,\n                    'pt': 72 / 25.4,\n                    'pc': 6 / 25.4,\n                    'px': -1\n                },\n                'cm': {\n                    'mm': 10,\n                    'cm': 1,\n                    'in': 1 / 2.54,\n                    'pt': 72 / 2.54,\n                    'pc': 6 / 2.54,\n                    'px': -1\n                },\n                'in': {\n                    'mm': 25.4,\n                    'cm': 2.54,\n                    'in': 1,\n                    'pt': 72,\n                    'pc': 6,\n                    'px': -1\n                },\n                'pt': {\n                    'mm': 25.4 / 72,\n                    'cm': 2.54 / 72,\n                    'in': 1 / 72,\n                    'pt': 1,\n                    'pc': 6 / 72,\n                    'px': -1\n                },\n                'pc': {\n                    'mm': 25.4 / 6,\n                    'cm': 2.54 / 6,\n                    'in': 1 / 6,\n                    'pt': 72 / 6,\n                    'pc': 1,\n                    'px': -1\n                },\n                'px': { 'px': 1 }\n            };\n            function parseFloatWithUnits(string) {\n                var theUnit = 'px';\n                if (typeof string === 'string' || string instanceof String) {\n                    for (var i = 0, n = units.length; i < n; i++) {\n                        var u = units[i];\n                        if (string.endsWith(u)) {\n                            theUnit = u;\n                            string = string.substring(0, string.length - u.length);\n                            break;\n                        }\n                    }\n                }\n                var scale = undefined;\n                if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n                    scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n                } else {\n                    scale = unitConversion[theUnit][scope.defaultUnit];\n                    if (scale < 0) {\n                        scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n                    }\n                }\n                return scale * parseFloat(string);\n            }\n            function getNodeTransform(node) {\n                if (!node.hasAttribute('transform')) {\n                    return null;\n                }\n                var transform = parseNodeTransform(node);\n                if (transformStack.length > 0) {\n                    transform.premultiply(transformStack[transformStack.length - 1]);\n                }\n                currentTransform.copy(transform);\n                transformStack.push(transform);\n                return transform;\n            }\n            function parseNodeTransform(node) {\n                var transform = new THREE.Matrix3();\n                var currentTransform = tempTransform0;\n                var transformsTexts = node.getAttribute('transform').split(')');\n                for (var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n                    var transformText = transformsTexts[tIndex].trim();\n                    if (transformText === '')\n                        continue;\n                    var openParPos = transformText.indexOf('(');\n                    var closeParPos = transformText.length;\n                    if (openParPos > 0 && openParPos < closeParPos) {\n                        var transformType = transformText.substr(0, openParPos);\n                        var array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n                        currentTransform.identity();\n                        switch (transformType) {\n                        case 'translate':\n                            if (array.length >= 1) {\n                                var tx = array[0];\n                                var ty = tx;\n                                if (array.length >= 2) {\n                                    ty = array[1];\n                                }\n                                currentTransform.translate(tx, ty);\n                            }\n                            break;\n                        case 'rotate':\n                            if (array.length >= 1) {\n                                var angle = 0;\n                                var cx = 0;\n                                var cy = 0;\n                                angle = -array[0] * Math.PI / 180;\n                                if (array.length >= 3) {\n                                    cx = array[1];\n                                    cy = array[2];\n                                }\n                                tempTransform1.identity().translate(-cx, -cy);\n                                tempTransform2.identity().rotate(angle);\n                                tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                                tempTransform1.identity().translate(cx, cy);\n                                currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                            }\n                            break;\n                        case 'scale':\n                            if (array.length >= 1) {\n                                var scaleX = array[0];\n                                var scaleY = scaleX;\n                                if (array.length >= 2) {\n                                    scaleY = array[1];\n                                }\n                                currentTransform.scale(scaleX, scaleY);\n                            }\n                            break;\n                        case 'skewX':\n                            if (array.length === 1) {\n                                currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                            }\n                            break;\n                        case 'skewY':\n                            if (array.length === 1) {\n                                currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                            }\n                            break;\n                        case 'matrix':\n                            if (array.length === 6) {\n                                currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                            }\n                            break;\n                        }\n                    }\n                    transform.premultiply(currentTransform);\n                }\n                return transform;\n            }\n            function transformPath(path, m) {\n                function transfVec2(v2) {\n                    tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n                    v2.set(tempV3.x, tempV3.y);\n                }\n                var isRotated = isTransformRotated(m);\n                var subPaths = path.subPaths;\n                for (var i = 0, n = subPaths.length; i < n; i++) {\n                    var subPath = subPaths[i];\n                    var curves = subPath.curves;\n                    for (var j = 0; j < curves.length; j++) {\n                        var curve = curves[j];\n                        if (curve.isLineCurve) {\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                        } else if (curve.isCubicBezierCurve) {\n                            transfVec2(curve.v0);\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                            transfVec2(curve.v3);\n                        } else if (curve.isQuadraticBezierCurve) {\n                            transfVec2(curve.v0);\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                        } else if (curve.isEllipseCurve) {\n                            if (isRotated) {\n                                console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n                            }\n                            tempV2.set(curve.aX, curve.aY);\n                            transfVec2(tempV2);\n                            curve.aX = tempV2.x;\n                            curve.aY = tempV2.y;\n                            curve.xRadius *= getTransformScaleX(m);\n                            curve.yRadius *= getTransformScaleY(m);\n                        }\n                    }\n                }\n            }\n            function isTransformRotated(m) {\n                return m.elements[1] !== 0 || m.elements[3] !== 0;\n            }\n            function getTransformScaleX(m) {\n                var te = m.elements;\n                return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n            }\n            function getTransformScaleY(m) {\n                var te = m.elements;\n                return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n            }\n            var paths = [];\n            var transformStack = [];\n            var tempTransform0 = new THREE.Matrix3();\n            var tempTransform1 = new THREE.Matrix3();\n            var tempTransform2 = new THREE.Matrix3();\n            var tempTransform3 = new THREE.Matrix3();\n            var tempV2 = new THREE.Vector2();\n            var tempV3 = new THREE.Vector3();\n            var currentTransform = new THREE.Matrix3();\n            var xml = new DOMParser().parseFromString(text, 'image/svg+xml');\n            parseNode(xml.documentElement, {\n                fill: '#000',\n                fillOpacity: 1,\n                strokeOpacity: 1,\n                strokeWidth: 1,\n                strokeLineJoin: 'miter',\n                strokeLineCap: 'butt',\n                strokeMiterLimit: 4\n            });\n            var data = {\n                paths: paths,\n                xml: xml.documentElement\n            };\n            return data;\n        }\n    });\n    SVGLoader.getStrokeStyle = function (width, color, lineJoin, lineCap, miterLimit) {\n        width = width !== undefined ? width : 1;\n        color = color !== undefined ? color : '#000';\n        lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n        lineCap = lineCap !== undefined ? lineCap : 'butt';\n        miterLimit = miterLimit !== undefined ? miterLimit : 4;\n        return {\n            strokeColor: color,\n            strokeWidth: width,\n            strokeLineJoin: lineJoin,\n            strokeLineCap: lineCap,\n            strokeMiterLimit: miterLimit\n        };\n    };\n    SVGLoader.pointsToStroke = function (points, style, arcDivisions, minDistance) {\n        var vertices = [];\n        var normals = [];\n        var uvs = [];\n        if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n            return null;\n        }\n        var geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n        geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n        return geometry;\n    };\n    SVGLoader.pointsToStrokeWithBuffers = function () {\n        var tempV2_1 = new THREE.Vector2();\n        var tempV2_2 = new THREE.Vector2();\n        var tempV2_3 = new THREE.Vector2();\n        var tempV2_4 = new THREE.Vector2();\n        var tempV2_5 = new THREE.Vector2();\n        var tempV2_6 = new THREE.Vector2();\n        var tempV2_7 = new THREE.Vector2();\n        var lastPointL = new THREE.Vector2();\n        var lastPointR = new THREE.Vector2();\n        var point0L = new THREE.Vector2();\n        var point0R = new THREE.Vector2();\n        var currentPointL = new THREE.Vector2();\n        var currentPointR = new THREE.Vector2();\n        var nextPointL = new THREE.Vector2();\n        var nextPointR = new THREE.Vector2();\n        var innerPoint = new THREE.Vector2();\n        var outerPoint = new THREE.Vector2();\n        return function (points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n            arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n            minDistance = minDistance !== undefined ? minDistance : 0.001;\n            vertexOffset = vertexOffset !== undefined ? vertexOffset : 0;\n            points = removeDuplicatedPoints(points);\n            var numPoints = points.length;\n            if (numPoints < 2)\n                return 0;\n            var isClosed = points[0].equals(points[numPoints - 1]);\n            var currentPoint;\n            var previousPoint = points[0];\n            var nextPoint;\n            var strokeWidth2 = style.strokeWidth / 2;\n            var deltaU = 1 / (numPoints - 1);\n            var u0 = 0;\n            var innerSideModified;\n            var joinIsOnLeftSide;\n            var isMiter;\n            var initialJoinIsOnLeftSide = false;\n            var numVertices = 0;\n            var currentCoordinate = vertexOffset * 3;\n            var currentCoordinateUV = vertexOffset * 2;\n            getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n            lastPointL.copy(points[0]).sub(tempV2_1);\n            lastPointR.copy(points[0]).add(tempV2_1);\n            point0L.copy(lastPointL);\n            point0R.copy(lastPointR);\n            for (var iPoint = 1; iPoint < numPoints; iPoint++) {\n                currentPoint = points[iPoint];\n                if (iPoint === numPoints - 1) {\n                    if (isClosed) {\n                        nextPoint = points[1];\n                    } else\n                        nextPoint = undefined;\n                } else {\n                    nextPoint = points[iPoint + 1];\n                }\n                var normal1 = tempV2_1;\n                getNormal(previousPoint, currentPoint, normal1);\n                tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n                currentPointL.copy(currentPoint).sub(tempV2_3);\n                currentPointR.copy(currentPoint).add(tempV2_3);\n                var u1 = u0 + deltaU;\n                innerSideModified = false;\n                if (nextPoint !== undefined) {\n                    getNormal(currentPoint, nextPoint, tempV2_2);\n                    tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n                    nextPointL.copy(currentPoint).sub(tempV2_3);\n                    nextPointR.copy(currentPoint).add(tempV2_3);\n                    joinIsOnLeftSide = true;\n                    tempV2_3.subVectors(nextPoint, previousPoint);\n                    if (normal1.dot(tempV2_3) < 0) {\n                        joinIsOnLeftSide = false;\n                    }\n                    if (iPoint === 1)\n                        initialJoinIsOnLeftSide = joinIsOnLeftSide;\n                    tempV2_3.subVectors(nextPoint, currentPoint);\n                    tempV2_3.normalize();\n                    var dot = Math.abs(normal1.dot(tempV2_3));\n                    if (dot !== 0) {\n                        var miterSide = strokeWidth2 / dot;\n                        tempV2_3.multiplyScalar(-miterSide);\n                        tempV2_4.subVectors(currentPoint, previousPoint);\n                        tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n                        innerPoint.copy(tempV2_5).negate();\n                        var miterLength2 = tempV2_5.length();\n                        var segmentLengthPrev = tempV2_4.length();\n                        tempV2_4.divideScalar(segmentLengthPrev);\n                        tempV2_6.subVectors(nextPoint, currentPoint);\n                        var segmentLengthNext = tempV2_6.length();\n                        tempV2_6.divideScalar(segmentLengthNext);\n                        if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n                            innerSideModified = true;\n                        }\n                        outerPoint.copy(tempV2_5).add(currentPoint);\n                        innerPoint.add(currentPoint);\n                        isMiter = false;\n                        if (innerSideModified) {\n                            if (joinIsOnLeftSide) {\n                                nextPointR.copy(innerPoint);\n                                currentPointR.copy(innerPoint);\n                            } else {\n                                nextPointL.copy(innerPoint);\n                                currentPointL.copy(innerPoint);\n                            }\n                        } else {\n                            makeSegmentTriangles();\n                        }\n                        switch (style.strokeLineJoin) {\n                        case 'bevel':\n                            makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                            break;\n                        case 'round':\n                            createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                            if (joinIsOnLeftSide) {\n                                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n                            } else {\n                                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n                            }\n                            break;\n                        case 'miter':\n                        case 'miter-clip':\n                        default:\n                            var miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n                            if (miterFraction < 1) {\n                                if (style.strokeLineJoin !== 'miter-clip') {\n                                    makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                                    break;\n                                } else {\n                                    createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                                    if (joinIsOnLeftSide) {\n                                        tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                                        tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                                        addVertex(currentPointL, u1, 0);\n                                        addVertex(tempV2_6, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_6, u1, 0);\n                                        addVertex(tempV2_7, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_7, u1, 0);\n                                        addVertex(nextPointL, u1, 0);\n                                    } else {\n                                        tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                                        tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                                        addVertex(currentPointR, u1, 1);\n                                        addVertex(tempV2_6, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_6, u1, 1);\n                                        addVertex(tempV2_7, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_7, u1, 1);\n                                        addVertex(nextPointR, u1, 1);\n                                    }\n                                }\n                            } else {\n                                if (innerSideModified) {\n                                    if (joinIsOnLeftSide) {\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(innerPoint, u1, 1);\n                                    } else {\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(innerPoint, u1, 0);\n                                        addVertex(outerPoint, u1, 1);\n                                    }\n                                    if (joinIsOnLeftSide) {\n                                        nextPointL.copy(outerPoint);\n                                    } else {\n                                        nextPointR.copy(outerPoint);\n                                    }\n                                } else {\n                                    if (joinIsOnLeftSide) {\n                                        addVertex(currentPointL, u1, 0);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(nextPointL, u1, 0);\n                                    } else {\n                                        addVertex(currentPointR, u1, 1);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(nextPointR, u1, 1);\n                                    }\n                                }\n                                isMiter = true;\n                            }\n                            break;\n                        }\n                    } else {\n                        makeSegmentTriangles();\n                    }\n                } else {\n                    makeSegmentTriangles();\n                }\n                if (!isClosed && iPoint === numPoints - 1) {\n                    addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n                }\n                u0 = u1;\n                previousPoint = currentPoint;\n                lastPointL.copy(nextPointL);\n                lastPointR.copy(nextPointR);\n            }\n            if (!isClosed) {\n                addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n            } else if (innerSideModified && vertices) {\n                var lastOuter = outerPoint;\n                var lastInner = innerPoint;\n                if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n                    lastOuter = innerPoint;\n                    lastInner = outerPoint;\n                }\n                if (joinIsOnLeftSide) {\n                    if (isMiter || initialJoinIsOnLeftSide) {\n                        lastInner.toArray(vertices, 0 * 3);\n                        lastInner.toArray(vertices, 3 * 3);\n                        if (isMiter) {\n                            lastOuter.toArray(vertices, 1 * 3);\n                        }\n                    }\n                } else {\n                    if (isMiter || !initialJoinIsOnLeftSide) {\n                        lastInner.toArray(vertices, 1 * 3);\n                        lastInner.toArray(vertices, 3 * 3);\n                        if (isMiter) {\n                            lastOuter.toArray(vertices, 0 * 3);\n                        }\n                    }\n                }\n            }\n            return numVertices;\n            function getNormal(p1, p2, result) {\n                result.subVectors(p2, p1);\n                return result.set(-result.y, result.x).normalize();\n            }\n            function addVertex(position, u, v) {\n                if (vertices) {\n                    vertices[currentCoordinate] = position.x;\n                    vertices[currentCoordinate + 1] = position.y;\n                    vertices[currentCoordinate + 2] = 0;\n                    if (normals) {\n                        normals[currentCoordinate] = 0;\n                        normals[currentCoordinate + 1] = 0;\n                        normals[currentCoordinate + 2] = 1;\n                    }\n                    currentCoordinate += 3;\n                    if (uvs) {\n                        uvs[currentCoordinateUV] = u;\n                        uvs[currentCoordinateUV + 1] = v;\n                        currentCoordinateUV += 2;\n                    }\n                }\n                numVertices += 3;\n            }\n            function makeCircularSector(center, p1, p2, u, v) {\n                tempV2_1.copy(p1).sub(center).normalize();\n                tempV2_2.copy(p2).sub(center).normalize();\n                var angle = Math.PI;\n                var dot = tempV2_1.dot(tempV2_2);\n                if (Math.abs(dot) < 1)\n                    angle = Math.abs(Math.acos(dot));\n                angle /= arcDivisions;\n                tempV2_3.copy(p1);\n                for (var i = 0, il = arcDivisions - 1; i < il; i++) {\n                    tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n                    addVertex(tempV2_3, u, v);\n                    addVertex(tempV2_4, u, v);\n                    addVertex(center, u, 0.5);\n                    tempV2_3.copy(tempV2_4);\n                }\n                addVertex(tempV2_4, u, v);\n                addVertex(p2, u, v);\n                addVertex(center, u, 0.5);\n            }\n            function makeSegmentTriangles() {\n                addVertex(lastPointR, u0, 1);\n                addVertex(lastPointL, u0, 0);\n                addVertex(currentPointL, u1, 0);\n                addVertex(lastPointR, u0, 1);\n                addVertex(currentPointL, u1, 1);\n                addVertex(currentPointR, u1, 0);\n            }\n            function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n                if (innerSideModified) {\n                    if (joinIsOnLeftSide) {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPointL, u, 0);\n                        addVertex(nextPointL, u, 0);\n                        addVertex(innerPoint, u, 0.5);\n                    } else {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(currentPointR, u, 1);\n                        addVertex(nextPointR, u, 0);\n                        addVertex(innerPoint, u, 0.5);\n                    }\n                } else {\n                    if (joinIsOnLeftSide) {\n                        addVertex(currentPointL, u, 0);\n                        addVertex(nextPointL, u, 0);\n                        addVertex(currentPoint, u, 0.5);\n                    } else {\n                        addVertex(currentPointR, u, 1);\n                        addVertex(nextPointR, u, 0);\n                        addVertex(currentPoint, u, 0.5);\n                    }\n                }\n            }\n            function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n                if (innerSideModified) {\n                    if (joinIsOnLeftSide) {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPointL, u0, 0);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(nextPointL, u0, 0);\n                        addVertex(innerPoint, u1, 1);\n                    } else {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(currentPointR, u0, 1);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(nextPointR, u0, 1);\n                    }\n                }\n            }\n            function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n                switch (style.strokeLineCap) {\n                case 'round':\n                    if (start) {\n                        makeCircularSector(center, p2, p1, u, 0.5);\n                    } else {\n                        makeCircularSector(center, p1, p2, u, 0.5);\n                    }\n                    break;\n                case 'square':\n                    if (start) {\n                        tempV2_1.subVectors(p1, center);\n                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n                        if (joinIsOnLeftSide) {\n                            tempV2_3.toArray(vertices, 1 * 3);\n                            tempV2_4.toArray(vertices, 0 * 3);\n                            tempV2_4.toArray(vertices, 3 * 3);\n                        } else {\n                            tempV2_3.toArray(vertices, 1 * 3);\n                            tempV2_3.toArray(vertices, 3 * 3);\n                            tempV2_4.toArray(vertices, 0 * 3);\n                        }\n                    } else {\n                        tempV2_1.subVectors(p2, center);\n                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n                        var vl = vertices.length;\n                        if (joinIsOnLeftSide) {\n                            tempV2_3.toArray(vertices, vl - 1 * 3);\n                            tempV2_4.toArray(vertices, vl - 2 * 3);\n                            tempV2_4.toArray(vertices, vl - 4 * 3);\n                        } else {\n                            tempV2_3.toArray(vertices, vl - 2 * 3);\n                            tempV2_4.toArray(vertices, vl - 1 * 3);\n                            tempV2_4.toArray(vertices, vl - 4 * 3);\n                        }\n                    }\n                    break;\n                case 'butt':\n                default:\n                    break;\n                }\n            }\n            function removeDuplicatedPoints(points) {\n                var dupPoints = false;\n                for (var i = 1, n = points.length - 1; i < n; i++) {\n                    if (points[i].distanceTo(points[i + 1]) < minDistance) {\n                        dupPoints = true;\n                        break;\n                    }\n                }\n                if (!dupPoints)\n                    return points;\n                var newPoints = [];\n                newPoints.push(points[0]);\n                for (var i = 1, n = points.length - 1; i < n; i++) {\n                    if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n                        newPoints.push(points[i]);\n                    }\n                }\n                newPoints.push(points[points.length - 1]);\n                return newPoints;\n            }\n        };\n    }();\n    return SVGLoader;\n});\ndefine('skylark-threejs-ex/loaders/TDSLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TDSLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.debug = false;\n        this.group = null;\n        this.position = 0;\n        this.materials = [];\n        this.meshes = [];\n    };\n    TDSLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TDSLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                onLoad(scope.parse(data, path));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer, path) {\n            this.group = new THREE.Group();\n            this.position = 0;\n            this.materials = [];\n            this.meshes = [];\n            this.readFile(arraybuffer, path);\n            for (var i = 0; i < this.meshes.length; i++) {\n                this.group.add(this.meshes[i]);\n            }\n            return this.group;\n        },\n        readFile: function (arraybuffer, path) {\n            var data = new DataView(arraybuffer);\n            var chunk = this.readChunk(data);\n            if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n                var next = this.nextChunk(data, chunk);\n                while (next !== 0) {\n                    if (next === M3D_VERSION) {\n                        var version = this.readDWord(data);\n                        this.debugMessage('3DS file version: ' + version);\n                    } else if (next === MDATA) {\n                        this.resetPosition(data);\n                        this.readMeshData(data, path);\n                    } else {\n                        this.debugMessage('Unknown main chunk: ' + next.toString(16));\n                    }\n                    next = this.nextChunk(data, chunk);\n                }\n            }\n            this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n        },\n        readMeshData: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === MESH_VERSION) {\n                    var version = +this.readDWord(data);\n                    this.debugMessage('Mesh Version: ' + version);\n                } else if (next === MASTER_SCALE) {\n                    var scale = this.readFloat(data);\n                    this.debugMessage('Master scale: ' + scale);\n                    this.group.scale.set(scale, scale, scale);\n                } else if (next === NAMED_OBJECT) {\n                    this.debugMessage('Named Object');\n                    this.resetPosition(data);\n                    this.readNamedObject(data);\n                } else if (next === MAT_ENTRY) {\n                    this.debugMessage('Material');\n                    this.resetPosition(data);\n                    this.readMaterialEntry(data, path);\n                } else {\n                    this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n        },\n        readNamedObject: function (data) {\n            var chunk = this.readChunk(data);\n            var name = this.readString(data, 64);\n            chunk.cur = this.position;\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === N_TRI_OBJECT) {\n                    this.resetPosition(data);\n                    var mesh = this.readMesh(data);\n                    mesh.name = name;\n                    this.meshes.push(mesh);\n                } else {\n                    this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMaterialEntry: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var material = new THREE.MeshPhongMaterial();\n            while (next !== 0) {\n                if (next === MAT_NAME) {\n                    material.name = this.readString(data, 64);\n                    this.debugMessage('   Name: ' + material.name);\n                } else if (next === MAT_WIRE) {\n                    this.debugMessage('   Wireframe');\n                    material.wireframe = true;\n                } else if (next === MAT_WIRE_SIZE) {\n                    var value = this.readByte(data);\n                    material.wireframeLinewidth = value;\n                    this.debugMessage('   Wireframe Thickness: ' + value);\n                } else if (next === MAT_TWO_SIDE) {\n                    material.side = THREE.DoubleSide;\n                    this.debugMessage('   DoubleSided');\n                } else if (next === MAT_ADDITIVE) {\n                    this.debugMessage('   Additive Blending');\n                    material.blending = THREE.AdditiveBlending;\n                } else if (next === MAT_DIFFUSE) {\n                    this.debugMessage('   Diffuse Color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SPECULAR) {\n                    this.debugMessage('   Specular Color');\n                    material.specular = this.readColor(data);\n                } else if (next === MAT_AMBIENT) {\n                    this.debugMessage('   Ambient color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SHININESS) {\n                    var shininess = this.readWord(data);\n                    material.shininess = shininess;\n                    this.debugMessage('   Shininess : ' + shininess);\n                } else if (next === MAT_TRANSPARENCY) {\n                    var opacity = this.readWord(data);\n                    material.opacity = opacity * 0.01;\n                    this.debugMessage('  Opacity : ' + opacity);\n                    material.transparent = opacity < 100 ? true : false;\n                } else if (next === MAT_TEXMAP) {\n                    this.debugMessage('   ColorMap');\n                    this.resetPosition(data);\n                    material.map = this.readMap(data, path);\n                } else if (next === MAT_BUMPMAP) {\n                    this.debugMessage('   BumpMap');\n                    this.resetPosition(data);\n                    material.bumpMap = this.readMap(data, path);\n                } else if (next === MAT_OPACMAP) {\n                    this.debugMessage('   OpacityMap');\n                    this.resetPosition(data);\n                    material.alphaMap = this.readMap(data, path);\n                } else if (next === MAT_SPECMAP) {\n                    this.debugMessage('   SpecularMap');\n                    this.resetPosition(data);\n                    material.specularMap = this.readMap(data, path);\n                } else {\n                    this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            this.materials[material.name] = material;\n        },\n        readMesh: function (data) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var geometry = new THREE.BufferGeometry();\n            var uvs = [];\n            var material = new THREE.MeshPhongMaterial();\n            var mesh = new THREE.Mesh(geometry, material);\n            mesh.name = 'mesh';\n            while (next !== 0) {\n                if (next === POINT_ARRAY) {\n                    var points = this.readWord(data);\n                    this.debugMessage('   Vertex: ' + points);\n                    var vertices = [];\n                    for (var i = 0; i < points; i++) {\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                } else if (next === FACE_ARRAY) {\n                    this.resetPosition(data);\n                    this.readFaceArray(data, mesh);\n                } else if (next === TEX_VERTS) {\n                    var texels = this.readWord(data);\n                    this.debugMessage('   UV: ' + texels);\n                    var uvs = [];\n                    for (var i = 0; i < texels; i++) {\n                        uvs.push(this.readFloat(data));\n                        uvs.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                } else if (next === MESH_MATRIX) {\n                    this.debugMessage('   Tranformation Matrix (TODO)');\n                    var values = [];\n                    for (var i = 0; i < 12; i++) {\n                        values[i] = this.readFloat(data);\n                    }\n                    var matrix = new THREE.Matrix4();\n                    matrix.elements[0] = values[0];\n                    matrix.elements[1] = values[6];\n                    matrix.elements[2] = values[3];\n                    matrix.elements[3] = values[9];\n                    matrix.elements[4] = values[2];\n                    matrix.elements[5] = values[8];\n                    matrix.elements[6] = values[5];\n                    matrix.elements[7] = values[11];\n                    matrix.elements[8] = values[1];\n                    matrix.elements[9] = values[7];\n                    matrix.elements[10] = values[4];\n                    matrix.elements[11] = values[10];\n                    matrix.elements[12] = 0;\n                    matrix.elements[13] = 0;\n                    matrix.elements[14] = 0;\n                    matrix.elements[15] = 1;\n                    matrix.transpose();\n                    var inverse = new THREE.Matrix4();\n                    inverse.getInverse(matrix);\n                    geometry.applyMatrix4(inverse);\n                    matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n                } else {\n                    this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            geometry.computeVertexNormals();\n            return mesh;\n        },\n        readFaceArray: function (data, mesh) {\n            var chunk = this.readChunk(data);\n            var faces = this.readWord(data);\n            this.debugMessage('   Faces: ' + faces);\n            var index = [];\n            for (var i = 0; i < faces; ++i) {\n                index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n                this.readWord(data);\n            }\n            mesh.geometry.setIndex(index);\n            while (this.position < chunk.end) {\n                var chunk = this.readChunk(data);\n                if (chunk.id === MSH_MAT_GROUP) {\n                    this.debugMessage('      Material Group');\n                    this.resetPosition(data);\n                    var group = this.readMaterialGroup(data);\n                    var material = this.materials[group.name];\n                    if (material !== undefined) {\n                        mesh.material = material;\n                        if (material.name === '') {\n                            material.name = mesh.name;\n                        }\n                    }\n                } else {\n                    this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));\n                }\n                this.endChunk(chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMap: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var texture = {};\n            var loader = new THREE.TextureLoader(this.manager);\n            loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            while (next !== 0) {\n                if (next === MAT_MAPNAME) {\n                    var name = this.readString(data, 128);\n                    texture = loader.load(name);\n                    this.debugMessage('      File: ' + path + name);\n                } else if (next === MAT_MAP_UOFFSET) {\n                    texture.offset.x = this.readFloat(data);\n                    this.debugMessage('      OffsetX: ' + texture.offset.x);\n                } else if (next === MAT_MAP_VOFFSET) {\n                    texture.offset.y = this.readFloat(data);\n                    this.debugMessage('      OffsetY: ' + texture.offset.y);\n                } else if (next === MAT_MAP_USCALE) {\n                    texture.repeat.x = this.readFloat(data);\n                    this.debugMessage('      RepeatX: ' + texture.repeat.x);\n                } else if (next === MAT_MAP_VSCALE) {\n                    texture.repeat.y = this.readFloat(data);\n                    this.debugMessage('      RepeatY: ' + texture.repeat.y);\n                } else {\n                    this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            return texture;\n        },\n        readMaterialGroup: function (data) {\n            this.readChunk(data);\n            var name = this.readString(data, 64);\n            var numFaces = this.readWord(data);\n            this.debugMessage('         Name: ' + name);\n            this.debugMessage('         Faces: ' + numFaces);\n            var index = [];\n            for (var i = 0; i < numFaces; ++i) {\n                index.push(this.readWord(data));\n            }\n            return {\n                name: name,\n                index: index\n            };\n        },\n        readColor: function (data) {\n            var chunk = this.readChunk(data);\n            var color = new THREE.Color();\n            if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n                var r = this.readByte(data);\n                var g = this.readByte(data);\n                var b = this.readByte(data);\n                color.setRGB(r / 255, g / 255, b / 255);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n                var r = this.readFloat(data);\n                var g = this.readFloat(data);\n                var b = this.readFloat(data);\n                color.setRGB(r, g, b);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else {\n                this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n            }\n            this.endChunk(chunk);\n            return color;\n        },\n        readChunk: function (data) {\n            var chunk = {};\n            chunk.cur = this.position;\n            chunk.id = this.readWord(data);\n            chunk.size = this.readDWord(data);\n            chunk.end = chunk.cur + chunk.size;\n            chunk.cur += 6;\n            return chunk;\n        },\n        endChunk: function (chunk) {\n            this.position = chunk.end;\n        },\n        nextChunk: function (data, chunk) {\n            if (chunk.cur >= chunk.end) {\n                return 0;\n            }\n            this.position = chunk.cur;\n            try {\n                var next = this.readChunk(data);\n                chunk.cur += next.size;\n                return next.id;\n            } catch (e) {\n                this.debugMessage('Unable to read chunk at ' + this.position);\n                return 0;\n            }\n        },\n        resetPosition: function () {\n            this.position -= 6;\n        },\n        readByte: function (data) {\n            var v = data.getUint8(this.position, true);\n            this.position += 1;\n            return v;\n        },\n        readFloat: function (data) {\n            try {\n                var v = data.getFloat32(this.position, true);\n                this.position += 4;\n                return v;\n            } catch (e) {\n                this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n            }\n        },\n        readInt: function (data) {\n            var v = data.getInt32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readShort: function (data) {\n            var v = data.getInt16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readDWord: function (data) {\n            var v = data.getUint32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readWord: function (data) {\n            var v = data.getUint16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readString: function (data, maxLength) {\n            var s = '';\n            for (var i = 0; i < maxLength; i++) {\n                var c = this.readByte(data);\n                if (!c) {\n                    break;\n                }\n                s += String.fromCharCode(c);\n            }\n            return s;\n        },\n        debugMessage: function (message) {\n            if (this.debug) {\n                console.log(message);\n            }\n        }\n    });\n    var M3DMAGIC = 19789;\n    var MLIBMAGIC = 15786;\n    var CMAGIC = 49725;\n    var M3D_VERSION = 2;\n    var COLOR_F = 16;\n    var COLOR_24 = 17;\n    var LIN_COLOR_24 = 18;\n    var LIN_COLOR_F = 19;\n    var MDATA = 15677;\n    var MESH_VERSION = 15678;\n    var MASTER_SCALE = 256;\n    var MAT_ENTRY = 45055;\n    var MAT_NAME = 40960;\n    var MAT_AMBIENT = 40976;\n    var MAT_DIFFUSE = 40992;\n    var MAT_SPECULAR = 41008;\n    var MAT_SHININESS = 41024;\n    var MAT_TRANSPARENCY = 41040;\n    var MAT_TWO_SIDE = 41089;\n    var MAT_ADDITIVE = 41091;\n    var MAT_WIRE = 41093;\n    var MAT_WIRE_SIZE = 41095;\n    var MAT_TEXMAP = 41472;\n    var MAT_OPACMAP = 41488;\n    var MAT_BUMPMAP = 41520;\n    var MAT_SPECMAP = 41476;\n    var MAT_MAPNAME = 41728;\n    var MAT_MAP_USCALE = 41812;\n    var MAT_MAP_VSCALE = 41814;\n    var MAT_MAP_UOFFSET = 41816;\n    var MAT_MAP_VOFFSET = 41818;\n    var NAMED_OBJECT = 16384;\n    var N_TRI_OBJECT = 16640;\n    var POINT_ARRAY = 16656;\n    var FACE_ARRAY = 16672;\n    var MSH_MAT_GROUP = 16688;\n    var TEX_VERTS = 16704;\n    var MESH_MATRIX = 16736;\n\n    return TDSLoader;\n});\ndefine('skylark-threejs-ex/loaders/VTKLoader',[\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate'\n], function (\n    THREE, \n    Inflate\n) {\n    'use strict';\n    var VTKLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    VTKLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: VTKLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function parseASCII(data) {\n                var indices = [];\n                var positions = [];\n                var colors = [];\n                var normals = [];\n                var result;\n                var patWord = /^[^\\d.\\s-]+/;\n                var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n                var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n                var patPOINTS = /^POINTS /;\n                var patPOLYGONS = /^POLYGONS /;\n                var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n                var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n                var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n                var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n                var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n                var inPointsSection = false;\n                var inPolygonsSection = false;\n                var inTriangleStripSection = false;\n                var inPointDataSection = false;\n                var inCellDataSection = false;\n                var inColorSection = false;\n                var inNormalsSection = false;\n                var lines = data.split('\\n');\n                for (var i in lines) {\n                    var line = lines[i].trim();\n                    if (line.indexOf('DATASET') === 0) {\n                        var dataset = line.split(' ')[1];\n                        if (dataset !== 'POLYDATA')\n                            throw new Error('Unsupported DATASET type: ' + dataset);\n                    } else if (inPointsSection) {\n                        while ((result = pat3Floats.exec(line)) !== null) {\n                            if (patWord.exec(line) !== null)\n                                break;\n                            var x = parseFloat(result[1]);\n                            var y = parseFloat(result[2]);\n                            var z = parseFloat(result[3]);\n                            positions.push(x, y, z);\n                        }\n                    } else if (inPolygonsSection) {\n                        if ((result = patConnectivity.exec(line)) !== null) {\n                            var numVertices = parseInt(result[1]);\n                            var inds = result[2].split(/\\s+/);\n                            if (numVertices >= 3) {\n                                var i0 = parseInt(inds[0]);\n                                var i1, i2;\n                                var k = 1;\n                                for (var j = 0; j < numVertices - 2; ++j) {\n                                    i1 = parseInt(inds[k]);\n                                    i2 = parseInt(inds[k + 1]);\n                                    indices.push(i0, i1, i2);\n                                    k++;\n                                }\n                            }\n                        }\n                    } else if (inTriangleStripSection) {\n                        if ((result = patConnectivity.exec(line)) !== null) {\n                            var numVertices = parseInt(result[1]);\n                            var inds = result[2].split(/\\s+/);\n                            if (numVertices >= 3) {\n                                var i0, i1, i2;\n                                for (var j = 0; j < numVertices - 2; j++) {\n                                    if (j % 2 === 1) {\n                                        i0 = parseInt(inds[j]);\n                                        i1 = parseInt(inds[j + 2]);\n                                        i2 = parseInt(inds[j + 1]);\n                                        indices.push(i0, i1, i2);\n                                    } else {\n                                        i0 = parseInt(inds[j]);\n                                        i1 = parseInt(inds[j + 1]);\n                                        i2 = parseInt(inds[j + 2]);\n                                        indices.push(i0, i1, i2);\n                                    }\n                                }\n                            }\n                        }\n                    } else if (inPointDataSection || inCellDataSection) {\n                        if (inColorSection) {\n                            while ((result = pat3Floats.exec(line)) !== null) {\n                                if (patWord.exec(line) !== null)\n                                    break;\n                                var r = parseFloat(result[1]);\n                                var g = parseFloat(result[2]);\n                                var b = parseFloat(result[3]);\n                                colors.push(r, g, b);\n                            }\n                        } else if (inNormalsSection) {\n                            while ((result = pat3Floats.exec(line)) !== null) {\n                                if (patWord.exec(line) !== null)\n                                    break;\n                                var nx = parseFloat(result[1]);\n                                var ny = parseFloat(result[2]);\n                                var nz = parseFloat(result[3]);\n                                normals.push(nx, ny, nz);\n                            }\n                        }\n                    }\n                    if (patPOLYGONS.exec(line) !== null) {\n                        inPolygonsSection = true;\n                        inPointsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patPOINTS.exec(line) !== null) {\n                        inPolygonsSection = false;\n                        inPointsSection = true;\n                        inTriangleStripSection = false;\n                    } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n                        inPolygonsSection = false;\n                        inPointsSection = false;\n                        inTriangleStripSection = true;\n                    } else if (patPOINT_DATA.exec(line) !== null) {\n                        inPointDataSection = true;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patCELL_DATA.exec(line) !== null) {\n                        inCellDataSection = true;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patCOLOR_SCALARS.exec(line) !== null) {\n                        inColorSection = true;\n                        inNormalsSection = false;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patNORMALS.exec(line) !== null) {\n                        inNormalsSection = true;\n                        inColorSection = false;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    }\n                }\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(indices);\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n                if (normals.length === positions.length) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                }\n                if (colors.length !== indices.length) {\n                    if (colors.length === positions.length) {\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n                    }\n                } else {\n                    geometry = geometry.toNonIndexed();\n                    var numTriangles = geometry.attributes.position.count / 3;\n                    if (colors.length === numTriangles * 3) {\n                        var newColors = [];\n                        for (var i = 0; i < numTriangles; i++) {\n                            var r = colors[3 * i + 0];\n                            var g = colors[3 * i + 1];\n                            var b = colors[3 * i + 2];\n                            newColors.push(r, g, b);\n                            newColors.push(r, g, b);\n                            newColors.push(r, g, b);\n                        }\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));\n                    }\n                }\n                return geometry;\n            }\n            function parseBinary(data) {\n                var count, pointIndex, i, numberOfPoints, s;\n                var buffer = new Uint8Array(data);\n                var dataView = new DataView(data);\n                var points = [];\n                var normals = [];\n                var indices = [];\n                var vtk = [];\n                var index = 0;\n                function findString(buffer, start) {\n                    var index = start;\n                    var c = buffer[index];\n                    var s = [];\n                    while (c !== 10) {\n                        s.push(String.fromCharCode(c));\n                        index++;\n                        c = buffer[index];\n                    }\n                    return {\n                        start: start,\n                        end: index,\n                        next: index + 1,\n                        parsedString: s.join('')\n                    };\n                }\n                var state, line;\n                while (true) {\n                    state = findString(buffer, index);\n                    line = state.parsedString;\n                    if (line.indexOf('DATASET') === 0) {\n                        var dataset = line.split(' ')[1];\n                        if (dataset !== 'POLYDATA')\n                            throw new Error('Unsupported DATASET type: ' + dataset);\n                    } else if (line.indexOf('POINTS') === 0) {\n                        vtk.push(line);\n                        numberOfPoints = parseInt(line.split(' ')[1], 10);\n                        count = numberOfPoints * 4 * 3;\n                        points = new Float32Array(numberOfPoints * 3);\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfPoints; i++) {\n                            points[3 * i] = dataView.getFloat32(pointIndex, false);\n                            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n                            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n                            pointIndex = pointIndex + 12;\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n                        var numberOfStrips = parseInt(line.split(' ')[1], 10);\n                        var size = parseInt(line.split(' ')[2], 10);\n                        count = size * 4;\n                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                        var indicesIndex = 0;\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfStrips; i++) {\n                            var indexCount = dataView.getInt32(pointIndex, false);\n                            var strip = [];\n                            pointIndex += 4;\n                            for (s = 0; s < indexCount; s++) {\n                                strip.push(dataView.getInt32(pointIndex, false));\n                                pointIndex += 4;\n                            }\n                            for (var j = 0; j < indexCount - 2; j++) {\n                                if (j % 2) {\n                                    indices[indicesIndex++] = strip[j];\n                                    indices[indicesIndex++] = strip[j + 2];\n                                    indices[indicesIndex++] = strip[j + 1];\n                                } else {\n                                    indices[indicesIndex++] = strip[j];\n                                    indices[indicesIndex++] = strip[j + 1];\n                                    indices[indicesIndex++] = strip[j + 2];\n                                }\n                            }\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('POLYGONS') === 0) {\n                        var numberOfStrips = parseInt(line.split(' ')[1], 10);\n                        var size = parseInt(line.split(' ')[2], 10);\n                        count = size * 4;\n                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                        var indicesIndex = 0;\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfStrips; i++) {\n                            var indexCount = dataView.getInt32(pointIndex, false);\n                            var strip = [];\n                            pointIndex += 4;\n                            for (s = 0; s < indexCount; s++) {\n                                strip.push(dataView.getInt32(pointIndex, false));\n                                pointIndex += 4;\n                            }\n                            for (var j = 1; j < indexCount - 1; j++) {\n                                indices[indicesIndex++] = strip[0];\n                                indices[indicesIndex++] = strip[j];\n                                indices[indicesIndex++] = strip[j + 1];\n                            }\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('POINT_DATA') === 0) {\n                        numberOfPoints = parseInt(line.split(' ')[1], 10);\n                        state = findString(buffer, state.next);\n                        count = numberOfPoints * 4 * 3;\n                        normals = new Float32Array(numberOfPoints * 3);\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfPoints; i++) {\n                            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n                            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n                            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n                            pointIndex += 12;\n                        }\n                        state.next = state.next + count;\n                    }\n                    index = state.next;\n                    if (index >= buffer.byteLength) {\n                        break;\n                    }\n                }\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n                geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));\n                if (normals.length === points.length) {\n                    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                }\n                return geometry;\n            }\n            function Float32Concat(first, second) {\n                var firstLength = first.length, result = new Float32Array(firstLength + second.length);\n                result.set(first);\n                result.set(second, firstLength);\n                return result;\n            }\n            function Int32Concat(first, second) {\n                var firstLength = first.length, result = new Int32Array(firstLength + second.length);\n                result.set(first);\n                result.set(second, firstLength);\n                return result;\n            }\n            function parseXML(stringFile) {\n                function xmlToJson(xml) {\n                    var obj = {};\n                    if (xml.nodeType === 1) {\n                        if (xml.attributes) {\n                            if (xml.attributes.length > 0) {\n                                obj['attributes'] = {};\n                                for (var j = 0; j < xml.attributes.length; j++) {\n                                    var attribute = xml.attributes.item(j);\n                                    obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();\n                                }\n                            }\n                        }\n                    } else if (xml.nodeType === 3) {\n                        obj = xml.nodeValue.trim();\n                    }\n                    if (xml.hasChildNodes()) {\n                        for (var i = 0; i < xml.childNodes.length; i++) {\n                            var item = xml.childNodes.item(i);\n                            var nodeName = item.nodeName;\n                            if (typeof obj[nodeName] === 'undefined') {\n                                var tmp = xmlToJson(item);\n                                if (tmp !== '')\n                                    obj[nodeName] = tmp;\n                            } else {\n                                if (typeof obj[nodeName].push === 'undefined') {\n                                    var old = obj[nodeName];\n                                    obj[nodeName] = [old];\n                                }\n                                var tmp = xmlToJson(item);\n                                if (tmp !== '')\n                                    obj[nodeName].push(tmp);\n                            }\n                        }\n                    }\n                    return obj;\n                }\n                function Base64toByteArray(b64) {\n                    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n                    var i;\n                    var lookup = [];\n                    var revLookup = [];\n                    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n                    var len = code.length;\n                    for (i = 0; i < len; i++) {\n                        lookup[i] = code[i];\n                    }\n                    for (i = 0; i < len; ++i) {\n                        revLookup[code.charCodeAt(i)] = i;\n                    }\n                    revLookup['-'.charCodeAt(0)] = 62;\n                    revLookup['_'.charCodeAt(0)] = 63;\n                    var j, l, tmp, placeHolders, arr;\n                    var len = b64.length;\n                    if (len % 4 > 0) {\n                        throw new Error('Invalid string. Length must be a multiple of 4');\n                    }\n                    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n                    arr = new Arr(len * 3 / 4 - placeHolders);\n                    l = placeHolders > 0 ? len - 4 : len;\n                    var L = 0;\n                    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n                        arr[L++] = (tmp & 16711680) >> 16;\n                        arr[L++] = (tmp & 65280) >> 8;\n                        arr[L++] = tmp & 255;\n                    }\n                    if (placeHolders === 2) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n                        arr[L++] = tmp & 255;\n                    } else if (placeHolders === 1) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n                        arr[L++] = tmp >> 8 & 255;\n                        arr[L++] = tmp & 255;\n                    }\n                    return arr;\n                }\n                function parseDataArray(ele, compressed) {\n                    var numBytes = 0;\n                    if (json.attributes.header_type === 'UInt64') {\n                        numBytes = 8;\n                    } else if (json.attributes.header_type === 'UInt32') {\n                        numBytes = 4;\n                    }\n                    if (ele.attributes.format === 'binary' && compressed) {\n                        var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n                        if (ele.attributes.type === 'Float32') {\n                            var txt = new Float32Array();\n                        } else if (ele.attributes.type === 'Int64') {\n                            var txt = new Int32Array();\n                        }\n                        rawData = ele['#text'];\n                        byteData = Base64toByteArray(rawData);\n                        blocks = byteData[0];\n                        for (var i = 1; i < numBytes - 1; i++) {\n                            blocks = blocks | byteData[i] << i * numBytes;\n                        }\n                        headerSize = (blocks + 3) * numBytes;\n                        padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n                        headerSize = headerSize + padding;\n                        dataOffsets = [];\n                        currentOffset = headerSize;\n                        dataOffsets.push(currentOffset);\n                        cSizeStart = 3 * numBytes;\n                        for (var i = 0; i < blocks; i++) {\n                            var currentBlockSize = byteData[i * numBytes + cSizeStart];\n                            for (var j = 1; j < numBytes - 1; j++) {\n                                currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;\n                            }\n                            currentOffset = currentOffset + currentBlockSize;\n                            dataOffsets.push(currentOffset);\n                        }\n                        for (var i = 0; i < dataOffsets.length - 1; i++) {\n                            var inflate = new Inflate(byteData.slice(dataOffsets[i], dataOffsets[i + 1]), {\n                                resize: true,\n                                verify: true\n                            });\n                            content = inflate.decompress();\n                            content = content.buffer;\n                            if (ele.attributes.type === 'Float32') {\n                                content = new Float32Array(content);\n                                txt = Float32Concat(txt, content);\n                            } else if (ele.attributes.type === 'Int64') {\n                                content = new Int32Array(content);\n                                txt = Int32Concat(txt, content);\n                            }\n                        }\n                        delete ele['#text'];\n                        if (ele.attributes.type === 'Int64') {\n                            if (ele.attributes.format === 'binary') {\n                                txt = txt.filter(function (el, idx) {\n                                    if (idx % 2 !== 1)\n                                        return true;\n                                });\n                            }\n                        }\n                    } else {\n                        if (ele.attributes.format === 'binary' && !compressed) {\n                            var content = Base64toByteArray(ele['#text']);\n                            content = content.slice(numBytes).buffer;\n                        } else {\n                            if (ele['#text']) {\n                                var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                                    if (el !== '')\n                                        return el;\n                                });\n                            } else {\n                                var content = new Int32Array(0).buffer;\n                            }\n                        }\n                        delete ele['#text'];\n                        if (ele.attributes.type === 'Float32') {\n                            var txt = new Float32Array(content);\n                        } else if (ele.attributes.type === 'Int32') {\n                            var txt = new Int32Array(content);\n                        } else if (ele.attributes.type === 'Int64') {\n                            var txt = new Int32Array(content);\n                            if (ele.attributes.format === 'binary') {\n                                txt = txt.filter(function (el, idx) {\n                                    if (idx % 2 !== 1)\n                                        return true;\n                                });\n                            }\n                        }\n                    }\n                    return txt;\n                }\n                var dom = null;\n                if (window.DOMParser) {\n                    try {\n                        dom = new DOMParser().parseFromString(stringFile, 'text/xml');\n                    } catch (e) {\n                        dom = null;\n                    }\n                } else if (window.ActiveXObject) {\n                    try {\n                        dom = new ActiveXObject('Microsoft.XMLDOM');\n                        dom.async = false;\n                        if (!dom.loadXML()) {\n                            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n                        }\n                    } catch (e) {\n                        dom = null;\n                    }\n                } else {\n                    throw new Error('Cannot parse xml string!');\n                }\n                var doc = dom.documentElement;\n                var json = xmlToJson(doc);\n                var points = [];\n                var normals = [];\n                var indices = [];\n                if (json.PolyData) {\n                    var piece = json.PolyData.Piece;\n                    var compressed = json.attributes.hasOwnProperty('compressor');\n                    var sections = [\n                        'PointData',\n                        'Points',\n                        'Strips',\n                        'Polys'\n                    ];\n                    var sectionIndex = 0, numberOfSections = sections.length;\n                    while (sectionIndex < numberOfSections) {\n                        var section = piece[sections[sectionIndex]];\n                        if (section && section.DataArray) {\n                            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n                                var arr = section.DataArray;\n                            } else {\n                                var arr = [section.DataArray];\n                            }\n                            var dataArrayIndex = 0, numberOfDataArrays = arr.length;\n                            while (dataArrayIndex < numberOfDataArrays) {\n                                if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                                    arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n                                }\n                                dataArrayIndex++;\n                            }\n                            switch (sections[sectionIndex]) {\n                            case 'PointData':\n                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                                var normalsName = section.attributes.Normals;\n                                if (numberOfPoints > 0) {\n                                    for (var i = 0, len = arr.length; i < len; i++) {\n                                        if (normalsName === arr[i].attributes.Name) {\n                                            var components = arr[i].attributes.NumberOfComponents;\n                                            normals = new Float32Array(numberOfPoints * components);\n                                            normals.set(arr[i].text, 0);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 'Points':\n                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                                if (numberOfPoints > 0) {\n                                    var components = section.DataArray.attributes.NumberOfComponents;\n                                    points = new Float32Array(numberOfPoints * components);\n                                    points.set(section.DataArray.text, 0);\n                                }\n                                break;\n                            case 'Strips':\n                                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                                if (numberOfStrips > 0) {\n                                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                                    var offset = new Int32Array(section.DataArray[1].text.length);\n                                    connectivity.set(section.DataArray[0].text, 0);\n                                    offset.set(section.DataArray[1].text, 0);\n                                    var size = numberOfStrips + connectivity.length;\n                                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                                    var indicesIndex = 0;\n                                    for (var i = 0, len = numberOfStrips; i < len; i++) {\n                                        var strip = [];\n                                        for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                                            strip.push(connectivity[s]);\n                                            if (i > 0)\n                                                len0 = offset[i - 1];\n                                        }\n                                        for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                                            if (j % 2) {\n                                                indices[indicesIndex++] = strip[j];\n                                                indices[indicesIndex++] = strip[j + 2];\n                                                indices[indicesIndex++] = strip[j + 1];\n                                            } else {\n                                                indices[indicesIndex++] = strip[j];\n                                                indices[indicesIndex++] = strip[j + 1];\n                                                indices[indicesIndex++] = strip[j + 2];\n                                            }\n                                            if (i > 0)\n                                                len0 = offset[i - 1];\n                                        }\n                                    }\n                                }\n                                break;\n                            case 'Polys':\n                                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                                if (numberOfPolys > 0) {\n                                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                                    var offset = new Int32Array(section.DataArray[1].text.length);\n                                    connectivity.set(section.DataArray[0].text, 0);\n                                    offset.set(section.DataArray[1].text, 0);\n                                    var size = numberOfPolys + connectivity.length;\n                                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                                    var indicesIndex = 0, connectivityIndex = 0;\n                                    var i = 0, len = numberOfPolys, len0 = 0;\n                                    while (i < len) {\n                                        var poly = [];\n                                        var s = 0, len1 = offset[i];\n                                        while (s < len1 - len0) {\n                                            poly.push(connectivity[connectivityIndex++]);\n                                            s++;\n                                        }\n                                        var j = 1;\n                                        while (j < len1 - len0 - 1) {\n                                            indices[indicesIndex++] = poly[0];\n                                            indices[indicesIndex++] = poly[j];\n                                            indices[indicesIndex++] = poly[j + 1];\n                                            j++;\n                                        }\n                                        i++;\n                                        len0 = offset[i - 1];\n                                    }\n                                }\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n                        sectionIndex++;\n                    }\n                    var geometry = new THREE.BufferGeometry();\n                    geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));\n                    if (normals.length === points.length) {\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                    }\n                    return geometry;\n                } else {\n                    throw new Error('Unsupported DATASET type');\n                }\n            }\n            function getStringFile(data) {\n                var stringFile = '';\n                var charArray = new Uint8Array(data);\n                var i = 0;\n                var len = charArray.length;\n                while (len--) {\n                    stringFile += String.fromCharCode(charArray[i++]);\n                }\n                return stringFile;\n            }\n            var meta = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\\n');\n            if (meta[0].indexOf('xml') !== -1) {\n                return parseXML(getStringFile(data));\n            } else if (meta[2].includes('ASCII')) {\n                return parseASCII(getStringFile(data));\n            } else {\n                return parseBinary(data);\n            }\n        }\n    });\n\n    return VTKLoader;\n});\ndefine('skylark-threejs-ex/loaders/XLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var XLoader = function () {\n        var classCallCheck = function (instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n            }\n        };\n        var createClass = function () {\n            function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if ('value' in descriptor)\n                        descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            return function (Constructor, protoProps, staticProps) {\n                if (protoProps)\n                    defineProperties(Constructor.prototype, protoProps);\n                if (staticProps)\n                    defineProperties(Constructor, staticProps);\n                return Constructor;\n            };\n        }();\n        var XboneInf = function XboneInf() {\n            classCallCheck(this, XboneInf);\n            this.boneName = '';\n            this.BoneIndex = 0;\n            this.Indeces = [];\n            this.Weights = [];\n            this.initMatrix = null;\n            this.OffsetMatrix = null;\n        };\n        var XAnimationInfo = function XAnimationInfo() {\n            classCallCheck(this, XAnimationInfo);\n            this.animeName = '';\n            this.boneName = '';\n            this.targetBone = null;\n            this.keyType = 4;\n            this.frameStartLv = 0;\n            this.keyFrames = [];\n            this.InverseMx = null;\n        };\n        var XAnimationObj = function () {\n            function XAnimationObj(_flags) {\n                classCallCheck(this, XAnimationObj);\n                this.fps = 30;\n                this.name = 'xanimation';\n                this.length = 0;\n                this.hierarchy = [];\n                this.putFlags = _flags;\n                if (this.putFlags.putPos === undefined) {\n                    this.putFlags.putPos = true;\n                }\n                if (this.putFlags.putRot === undefined) {\n                    this.putFlags.putRot = true;\n                }\n                if (this.putFlags.putScl === undefined) {\n                    this.putFlags.putScl = true;\n                }\n            }\n            createClass(XAnimationObj, [\n                {\n                    key: 'make',\n                    value: function make(XAnimationInfoArray) {\n                        for (var i = 0; i < XAnimationInfoArray.length; i++) {\n                            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n                        }\n                        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n                    }\n                },\n                {\n                    key: 'clone',\n                    value: function clone() {\n                        return Object.assign({}, this);\n                    }\n                },\n                {\n                    key: 'makeBonekeys',\n                    value: function makeBonekeys(XAnimationInfo) {\n                        var refObj = {};\n                        refObj.name = XAnimationInfo.boneName;\n                        refObj.parent = '';\n                        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n                        refObj.copy = function () {\n                            return Object.assign({}, this);\n                        };\n                        return refObj;\n                    }\n                },\n                {\n                    key: 'keyFrameRefactor',\n                    value: function keyFrameRefactor(XAnimationInfo) {\n                        var keys = [];\n                        for (var i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n                            var keyframe = {};\n                            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n                            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n                                keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n                            }\n                            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n                                keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n                            }\n                            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n                                keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n                            }\n                            if (XAnimationInfo.keyFrames[i].matrix) {\n                                keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n                                if (this.putFlags.putPos) {\n                                    keyframe.pos = new THREE.Vector3().setFromMatrixPosition(keyframe.matrix);\n                                }\n                                if (this.putFlags.putRot) {\n                                    keyframe.rot = new THREE.Quaternion().setFromRotationMatrix(keyframe.matrix);\n                                }\n                                if (this.putFlags.putScl) {\n                                    keyframe.scl = new THREE.Vector3().setFromMatrixScale(keyframe.matrix);\n                                }\n                            }\n                            keys.push(keyframe);\n                        }\n                        return keys;\n                    }\n                }\n            ]);\n            return XAnimationObj;\n        }();\n        var XKeyFrameInfo = function XKeyFrameInfo() {\n            classCallCheck(this, XKeyFrameInfo);\n            this.index = 0;\n            this.Frame = 0;\n            this.time = 0;\n            this.matrix = null;\n        };\n        var XLoader = function () {\n            function XLoader(manager) {\n                THREE.Loader.call(this, manager);\n                classCallCheck(this, XLoader);\n                this.debug = false;\n                this.texloader = new THREE.TextureLoader(this.manager);\n                this.url = '';\n                this._putMatLength = 0;\n                this._nowMat = null;\n                this._nowFrameName = '';\n                this.frameHierarchie = [];\n                this.Hierarchies = {};\n                this.HieStack = [];\n                this._currentObject = {};\n                this._currentFrame = {};\n                this._data = null;\n                this.onLoad = null;\n                this.IsUvYReverse = true;\n                this.Meshes = [];\n                this.animations = [];\n                this.animTicksPerSecond = 30;\n                this._currentGeo = null;\n                this._currentAnime = null;\n                this._currentAnimeFrames = null;\n            }\n            createClass(XLoader, [\n                {\n                    key: '_setArgOption',\n                    value: function _setArgOption(_arg) {\n                        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        if (!_arg) {\n                            return;\n                        }\n                        for (var i = _start; i < _arg.length; i++) {\n                            switch (i) {\n                            case 0:\n                                this.url = _arg[i];\n                                break;\n                            case 1:\n                                this.options = _arg[i];\n                                break;\n                            }\n                        }\n                        if (this.options === undefined) {\n                            this.options = {};\n                        }\n                    }\n                },\n                {\n                    key: 'load',\n                    value: function load(_arg, onLoad, onProgress, onError) {\n                        var _this = this;\n                        this._setArgOption(_arg);\n                        var loader = new THREE.FileLoader(this.manager);\n                        loader.setPath(this.path);\n                        loader.setResponseType('arraybuffer');\n                        loader.load(this.url, function (response) {\n                            _this.parse(response, onLoad);\n                        }, onProgress, onError);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_isBinary',\n                    value: function _isBinary(binData) {\n                        var reader = new DataView(binData);\n                        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                        var n_faces = reader.getUint32(80, true);\n                        var expect = 80 + 32 / 8 + n_faces * face_size;\n                        if (expect === reader.byteLength) {\n                            return true;\n                        }\n                        var fileLength = reader.byteLength;\n                        for (var index = 0; index < fileLength; index++) {\n                            if (reader.getUint8(index, false) > 127) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: '_ensureBinary',\n                    value: function _ensureBinary(buf) {\n                        if (typeof buf === 'string') {\n                            var array_buffer = new Uint8Array(buf.length);\n                            for (var i = 0; i < buf.length; i++) {\n                                array_buffer[i] = buf.charCodeAt(i) & 255;\n                            }\n                            return array_buffer.buffer || array_buffer;\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: '_ensureString',\n                    value: function _ensureString(buf) {\n                        if (typeof buf !== 'string') {\n                            return THREE.LoaderUtils.decodeText(new Uint8Array(buf));\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: 'parse',\n                    value: function _parse(data, onLoad) {\n                        var binData = this._ensureBinary(data);\n                        this._data = this._ensureString(data);\n                        this.onLoad = onLoad;\n                        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n                    }\n                },\n                {\n                    key: '_parseBinary',\n                    value: function _parseBinary(data) {\n                        return this._parseASCII(THREE.LoaderUtils.decodeText(new Uint8Array(data)));\n                    }\n                },\n                {\n                    key: '_parseASCII',\n                    value: function _parseASCII() {\n                        var path;\n                        if (this.resourcePath !== '') {\n                            path = this.resourcePath;\n                        } else if (this.path !== '') {\n                            path = this.path;\n                        } else {\n                            path = THREE.LoaderUtils.extractUrlBase(this.url);\n                        }\n                        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n                        var endRead = 16;\n                        this.Hierarchies.children = [];\n                        this._hierarchieParse(this.Hierarchies, endRead);\n                        this._changeRoot();\n                        this._currentObject = this.Hierarchies.children.shift();\n                        this._mainloop();\n                    }\n                },\n                {\n                    key: '_hierarchieParse',\n                    value: function _hierarchieParse(_parent, _end) {\n                        var endRead = _end;\n                        while (true) {\n                            var find1 = this._data.indexOf('{', endRead) + 1;\n                            var findEnd = this._data.indexOf('}', endRead);\n                            var findNext = this._data.indexOf('{', find1) + 1;\n                            if (find1 > 0 && findEnd > find1) {\n                                var _currentObject = {};\n                                _currentObject.children = [];\n                                var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n                                var word = nameData.split(/ /g);\n                                if (word.length > 0) {\n                                    _currentObject.type = word[0];\n                                    if (word.length >= 2) {\n                                        _currentObject.name = word[1];\n                                    } else {\n                                        _currentObject.name = word[0] + this.Hierarchies.children.length;\n                                    }\n                                } else {\n                                    _currentObject.name = nameData;\n                                    _currentObject.type = '';\n                                }\n                                if (_currentObject.type === 'Animation') {\n                                    _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n                                    var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n                                    endRead = refs.end;\n                                    _currentObject.children = refs.parent.children;\n                                } else {\n                                    var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n                                    _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n                                    if (findNext <= 0 || findEnd < findNext) {\n                                        endRead = findEnd + 1;\n                                    } else {\n                                        var nextStart = Math.max(DataEnder + 1, find1);\n                                        var _refs = this._hierarchieParse(_currentObject, nextStart);\n                                        endRead = _refs.end;\n                                        _currentObject.children = _refs.parent.children;\n                                    }\n                                }\n                                _currentObject.parent = _parent;\n                                if (_currentObject.type != 'template') {\n                                    _parent.children.push(_currentObject);\n                                }\n                            } else {\n                                endRead = find1 === -1 ? this._data.length : findEnd + 1;\n                                break;\n                            }\n                        }\n                        return {\n                            parent: _parent,\n                            end: endRead\n                        };\n                    }\n                },\n                {\n                    key: '_mainloop',\n                    value: function _mainloop() {\n                        var _this2 = this;\n                        this._mainProc();\n                        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n                            setTimeout(function () {\n                                _this2._mainloop();\n                            }, 1);\n                        } else {\n                            setTimeout(function () {\n                                _this2.onLoad({\n                                    models: _this2.Meshes,\n                                    animations: _this2.animations\n                                });\n                            }, 1);\n                        }\n                    }\n                },\n                {\n                    key: '_mainProc',\n                    value: function _mainProc() {\n                        var breakFlag = false;\n                        while (true) {\n                            if (!this._currentObject.worked) {\n                                switch (this._currentObject.type) {\n                                case 'template':\n                                    break;\n                                case 'AnimTicksPerSecond':\n                                    this.animTicksPerSecond = parseInt(this._currentObject.data);\n                                    break;\n                                case 'Frame':\n                                    this._setFrame();\n                                    break;\n                                case 'FrameTransformMatrix':\n                                    this._setFrameTransformMatrix();\n                                    break;\n                                case 'Mesh':\n                                    this._changeRoot();\n                                    this._currentGeo = {};\n                                    this._currentGeo.name = this._currentObject.name.trim();\n                                    this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                                    this._currentGeo.VertexSetedBoneCount = [];\n                                    this._currentGeo.GeometryData = {\n                                        vertices: [],\n                                        normals: [],\n                                        uvs: [],\n                                        skinIndices: [],\n                                        skinWeights: [],\n                                        indices: [],\n                                        materialIndices: []\n                                    };\n                                    this._currentGeo.Materials = [];\n                                    this._currentGeo.normalVectors = [];\n                                    this._currentGeo.BoneInfs = [];\n                                    this._currentGeo.baseFrame = this._currentFrame;\n                                    this._makeBoneFrom_CurrentFrame();\n                                    this._readVertexDatas();\n                                    breakFlag = true;\n                                    break;\n                                case 'MeshNormals':\n                                    this._readVertexDatas();\n                                    break;\n                                case 'MeshTextureCoords':\n                                    this._setMeshTextureCoords();\n                                    break;\n                                case 'VertexDuplicationIndices':\n                                    break;\n                                case 'MeshMaterialList':\n                                    this._setMeshMaterialList();\n                                    break;\n                                case 'Material':\n                                    this._setMaterial();\n                                    break;\n                                case 'SkinWeights':\n                                    this._setSkinWeights();\n                                    break;\n                                case 'AnimationSet':\n                                    this._changeRoot();\n                                    this._currentAnime = {};\n                                    this._currentAnime.name = this._currentObject.name.trim();\n                                    this._currentAnime.AnimeFrames = [];\n                                    break;\n                                case 'Animation':\n                                    if (this._currentAnimeFrames) {\n                                        this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                    }\n                                    this._currentAnimeFrames = new XAnimationInfo();\n                                    this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                                    break;\n                                case 'AnimationKey':\n                                    this._readAnimationKey();\n                                    breakFlag = true;\n                                    break;\n                                }\n                                this._currentObject.worked = true;\n                            }\n                            if (this._currentObject.children.length > 0) {\n                                this._currentObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + this._currentObject.name);\n                                }\n                                if (breakFlag)\n                                    break;\n                            } else {\n                                if (this._currentObject.worked) {\n                                    if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                                        this._changeRoot();\n                                    }\n                                }\n                                if (this._currentObject.parent) {\n                                    this._currentObject = this._currentObject.parent;\n                                } else {\n                                    breakFlag = true;\n                                }\n                                if (breakFlag)\n                                    break;\n                            }\n                        }\n                        return;\n                    }\n                },\n                {\n                    key: '_changeRoot',\n                    value: function _changeRoot() {\n                        if (this._currentGeo != null && this._currentGeo.name) {\n                            this._makeOutputGeometry();\n                        }\n                        this._currentGeo = {};\n                        if (this._currentAnime != null && this._currentAnime.name) {\n                            if (this._currentAnimeFrames) {\n                                this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                this._currentAnimeFrames = null;\n                            }\n                            this._makeOutputAnimation();\n                        }\n                        this._currentAnime = {};\n                    }\n                },\n                {\n                    key: '_getParentName',\n                    value: function _getParentName(_obj) {\n                        if (_obj.parent) {\n                            if (_obj.parent.name) {\n                                return _obj.parent.name;\n                            } else {\n                                return this._getParentName(_obj.parent);\n                            }\n                        } else {\n                            return '';\n                        }\n                    }\n                },\n                {\n                    key: '_setFrame',\n                    value: function _setFrame() {\n                        this._nowFrameName = this._currentObject.name.trim();\n                        this._currentFrame = {};\n                        this._currentFrame.name = this._nowFrameName;\n                        this._currentFrame.children = [];\n                        if (this._currentObject.parent && this._currentObject.parent.name) {\n                            this._currentFrame.parentName = this._currentObject.parent.name;\n                        }\n                        this.frameHierarchie.push(this._nowFrameName);\n                        this.HieStack[this._nowFrameName] = this._currentFrame;\n                    }\n                },\n                {\n                    key: '_setFrameTransformMatrix',\n                    value: function _setFrameTransformMatrix() {\n                        this._currentFrame.FrameTransformMatrix = new THREE.Matrix4();\n                        var data = this._currentObject.data.split(',');\n                        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n                        this._makeBoneFrom_CurrentFrame();\n                    }\n                },\n                {\n                    key: '_makeBoneFrom_CurrentFrame',\n                    value: function _makeBoneFrom_CurrentFrame() {\n                        if (!this._currentFrame.FrameTransformMatrix) {\n                            return;\n                        }\n                        var b = new THREE.Bone();\n                        b.name = this._currentFrame.name;\n                        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n                        b.matrixWorld = b.matrix;\n                        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n                        this._currentFrame.putBone = b;\n                        if (this._currentFrame.parentName) {\n                            for (var frame in this.HieStack) {\n                                if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                                    this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readVertexDatas',\n                    value: function _readVertexDatas() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        var maxLength = 0;\n                        while (true) {\n                            var changeMode = false;\n                            if (mode_local === 0) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local = 1;\n                                maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n                                if (maxLength <= 0) {\n                                    maxLength = this._currentObject.data.length;\n                                }\n                            } else {\n                                var find = 0;\n                                switch (mode) {\n                                case 0:\n                                    find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    break;\n                                case 1:\n                                    find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                                    break;\n                                }\n                                if (find === 0 || find > maxLength) {\n                                    find = maxLength;\n                                    mode_local = 0;\n                                    changeMode = true;\n                                }\n                                switch (this._currentObject.type) {\n                                case 'Mesh':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    case 1:\n                                        this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                case 'MeshNormals':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                }\n                                endRead = find + 1;\n                                if (changeMode) {\n                                    mode++;\n                                }\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readInt1',\n                    value: function _readInt1(start) {\n                        var find = this._currentObject.data.indexOf(';', start);\n                        return {\n                            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n                            endRead: find + 1\n                        };\n                    }\n                },\n                {\n                    key: '_readVertex1',\n                    value: function _readVertex1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n                        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n                        this._currentGeo.VertexSetedBoneCount.push(0);\n                    }\n                },\n                {\n                    key: '_readFace1',\n                    value: function _readFace1(line) {\n                        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n                        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n                    }\n                },\n                {\n                    key: '_readNormalVector1',\n                    value: function _readNormalVector1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                    }\n                },\n                {\n                    key: '_buildGeometry',\n                    value: function _buildGeometry() {\n                        var bufferGeometry = new THREE.BufferGeometry();\n                        var position = [];\n                        var normals = [];\n                        var uvs = [];\n                        var skinIndices = [];\n                        var skinWeights = [];\n                        var data = this._currentGeo.GeometryData;\n                        for (var i = 0, l = data.indices.length; i < l; i++) {\n                            var stride2 = data.indices[i] * 2;\n                            var stride3 = data.indices[i] * 3;\n                            var stride4 = data.indices[i] * 4;\n                            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n                            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n                            skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n                            skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n                            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n                        }\n                        bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n                        bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                        bufferGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                        bufferGeometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));\n                        bufferGeometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));\n                        this._computeGroups(bufferGeometry, data.materialIndices);\n                        return bufferGeometry;\n                    }\n                },\n                {\n                    key: '_computeGroups',\n                    value: function _computeGroups(bufferGeometry, materialIndices) {\n                        var group;\n                        var groups = [];\n                        var materialIndex = undefined;\n                        for (var i = 0; i < materialIndices.length; i++) {\n                            var currentMaterialIndex = materialIndices[i];\n                            if (currentMaterialIndex !== materialIndex) {\n                                materialIndex = currentMaterialIndex;\n                                if (group !== undefined) {\n                                    group.count = i * 3 - group.start;\n                                    groups.push(group);\n                                }\n                                group = {\n                                    start: i * 3,\n                                    materialIndex: materialIndex\n                                };\n                            }\n                        }\n                        if (group !== undefined) {\n                            group.count = i * 3 - group.start;\n                            groups.push(group);\n                        }\n                        bufferGeometry.groups = groups;\n                    }\n                },\n                {\n                    key: '_setMeshTextureCoords',\n                    value: function _setMeshTextureCoords() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            switch (mode) {\n                            case 0:\n                                if (mode_local === 0) {\n                                    var refO = this._readInt1(0);\n                                    endRead = refO.endRead;\n                                    mode_local = 1;\n                                } else {\n                                    var find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    if (find === 0) {\n                                        find = this._currentObject.data.length;\n                                        mode = 2;\n                                        mode_local = 0;\n                                    }\n                                    var line = this._currentObject.data.substr(endRead, find - endRead);\n                                    var data = this._readLine(line.trim()).split(';');\n                                    if (this.IsUvYReverse) {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                                    } else {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                                    }\n                                    endRead = find + 1;\n                                }\n                                break;\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMeshMaterialList',\n                    value: function _setMeshMaterialList() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            if (mode_local < 2) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local++;\n                            } else {\n                                var find = this._currentObject.data.indexOf(';', endRead);\n                                if (find === -1) {\n                                    find = this._currentObject.data.length;\n                                    mode = 3;\n                                    mode_local = 0;\n                                }\n                                var line = this._currentObject.data.substr(endRead, find - endRead);\n                                var data = this._readLine(line.trim()).split(',');\n                                for (var i = 0; i < data.length; i++) {\n                                    this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n                                }\n                                endRead = this._currentObject.data.length;\n                            }\n                            if (endRead >= this._currentObject.data.length || mode >= 3) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMaterial',\n                    value: function _setMaterial() {\n                        var _nowMat = new THREE.MeshPhongMaterial({ color: Math.random() * 16777215 });\n                        _nowMat.side = THREE.FrontSide;\n                        _nowMat.name = this._currentObject.name;\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';;', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(';');\n                        _nowMat.color.r = parseFloat(data[0]);\n                        _nowMat.color.g = parseFloat(data[1]);\n                        _nowMat.color.b = parseFloat(data[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        _nowMat.shininess = parseFloat(this._readLine(line));\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(';');\n                        _nowMat.specular.r = parseFloat(data2[0]);\n                        _nowMat.specular.g = parseFloat(data2[1]);\n                        _nowMat.specular.b = parseFloat(data2[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        if (find === -1) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(';');\n                        _nowMat.emissive.r = parseFloat(data3[0]);\n                        _nowMat.emissive.g = parseFloat(data3[1]);\n                        _nowMat.emissive.b = parseFloat(data3[2]);\n                        var localObject = null;\n                        while (true) {\n                            if (this._currentObject.children.length > 0) {\n                                localObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + localObject.name);\n                                }\n                                var fileName = localObject.data.substr(1, localObject.data.length - 2);\n                                switch (localObject.type) {\n                                case 'TextureFilename':\n                                    _nowMat.map = this.texloader.load(fileName);\n                                    break;\n                                case 'BumpMapFilename':\n                                    _nowMat.bumpMap = this.texloader.load(fileName);\n                                    _nowMat.bumpScale = 0.05;\n                                    break;\n                                case 'NormalMapFilename':\n                                    _nowMat.normalMap = this.texloader.load(fileName);\n                                    _nowMat.normalScale = new THREE.Vector2(2, 2);\n                                    break;\n                                case 'EmissiveMapFilename':\n                                    _nowMat.emissiveMap = this.texloader.load(fileName);\n                                    break;\n                                case 'LightMapFilename':\n                                    _nowMat.lightMap = this.texloader.load(fileName);\n                                    break;\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        this._currentGeo.Materials.push(_nowMat);\n                    }\n                },\n                {\n                    key: '_setSkinWeights',\n                    value: function _setSkinWeights() {\n                        var boneInf = new XboneInf();\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        boneInf.boneName = line.substr(1, line.length - 2);\n                        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(',');\n                        for (var i = 0; i < data.length; i++) {\n                            boneInf.Indeces.push(parseInt(data[i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(',');\n                        for (var _i = 0; _i < data2.length; _i++) {\n                            boneInf.Weights.push(parseFloat(data2[_i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        if (find <= 0) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(',');\n                        boneInf.OffsetMatrix = new THREE.Matrix4();\n                        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n                        this._currentGeo.BoneInfs.push(boneInf);\n                    }\n                },\n                {\n                    key: '_makePutBoneList',\n                    value: function _makePutBoneList(_RootName, _bones) {\n                        var putting = false;\n                        for (var frame in this.HieStack) {\n                            if (this.HieStack[frame].name === _RootName || putting) {\n                                putting = true;\n                                var b = new THREE.Bone();\n                                b.name = this.HieStack[frame].name;\n                                b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n                                b.matrixWorld = b.matrix;\n                                b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n                                b.pos = new THREE.Vector3().setFromMatrixPosition(FrameTransformMatrix).toArray();\n                                b.rotq = new THREE.Quaternion().setFromRotationMatrix(FrameTransformMatrix).toArray();\n                                b.scl = new THREE.Vector3().setFromMatrixScale(FrameTransformMatrix).toArray();\n                                if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                                    for (var i = 0; i < _bones.length; i++) {\n                                        if (this.HieStack[frame].parentName === _bones[i].name) {\n                                            _bones[i].add(b);\n                                            b.parent = i;\n                                            break;\n                                        }\n                                    }\n                                }\n                                _bones.push(b);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputGeometry',\n                    value: function _makeOutputGeometry() {\n                        var mesh = null;\n                        if (this._currentGeo.BoneInfs.length > 0) {\n                            var putBones = [];\n                            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n                            for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n                                var boneIndex = 0;\n                                for (var bb = 0; bb < putBones.length; bb++) {\n                                    if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                                        boneIndex = bb;\n                                        putBones[bb].OffsetMatrix = new THREE.Matrix4();\n                                        putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                                        break;\n                                    }\n                                }\n                                for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                                    var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n                                    var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n                                    var stride = nowVertexID * 4;\n                                    switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                                    case 0:\n                                        this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                                        break;\n                                    case 1:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                                        break;\n                                    case 2:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                                        break;\n                                    case 3:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                                        break;\n                                    }\n                                    this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n                                    if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                                        console.log('warn! over 4 bone weight! :' + nowVertexID);\n                                    }\n                                }\n                            }\n                            for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n                                this._currentGeo.Materials[sk].skinning = true;\n                            }\n                            var offsetList = [];\n                            for (var _bi = 0; _bi < putBones.length; _bi++) {\n                                if (putBones[_bi].OffsetMatrix) {\n                                    offsetList.push(putBones[_bi].OffsetMatrix);\n                                } else {\n                                    offsetList.push(new THREE.Matrix4());\n                                }\n                            }\n                            var bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                            this._initSkeleton(mesh, putBones, offsetList);\n                        } else {\n                            var _bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                        }\n                        mesh.name = this._currentGeo.name;\n                        var worldBaseMx = new THREE.Matrix4();\n                        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n                        if (currentMxFrame && currentMxFrame.parent) {\n                            while (true) {\n                                currentMxFrame = currentMxFrame.parent;\n                                if (currentMxFrame) {\n                                    worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n                                } else {\n                                    break;\n                                }\n                            }\n                            mesh.applyMatrix4(worldBaseMx);\n                        }\n                        this.Meshes.push(mesh);\n                    }\n                },\n                {\n                    key: '_initSkeleton',\n                    value: function _initSkeleton(mesh, boneList, boneInverses) {\n                        var bones = [], bone, gbone;\n                        var i, il;\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            bone = new THREE.Bone();\n                            bones.push(bone);\n                            bone.name = gbone.name;\n                            bone.position.fromArray(gbone.pos);\n                            bone.quaternion.fromArray(gbone.rotq);\n                            if (gbone.scl !== undefined)\n                                bone.scale.fromArray(gbone.scl);\n                        }\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n                                bones[gbone.parent].add(bones[i]);\n                            } else {\n                                mesh.add(bones[i]);\n                            }\n                        }\n                        mesh.updateMatrixWorld(true);\n                        var skeleton = new THREE.Skeleton(bones, boneInverses);\n                        mesh.bind(skeleton, mesh.matrixWorld);\n                    }\n                },\n                {\n                    key: '_readAnimationKey',\n                    value: function _readAnimationKey() {\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        var nowKeyType = parseInt(this._readLine(line));\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        line = this._currentObject.data.substr(endRead);\n                        var data = this._readLine(line.trim()).split(';;,');\n                        for (var i = 0; i < data.length; i++) {\n                            var data2 = data[i].split(';');\n                            var keyInfo = new XKeyFrameInfo();\n                            keyInfo.type = nowKeyType;\n                            keyInfo.Frame = parseInt(data2[0]);\n                            keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n                            keyInfo.time = keyInfo.Frame;\n                            if (nowKeyType != 4) {\n                                var frameFound = false;\n                                for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                                    if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                                        keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                                        frameFound = true;\n                                        break;\n                                    }\n                                }\n                                var frameValue = data2[2].split(',');\n                                switch (nowKeyType) {\n                                case 0:\n                                    keyInfo.rot = new THREE.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                                    break;\n                                case 1:\n                                    keyInfo.scl = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                case 2:\n                                    keyInfo.pos = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                }\n                                if (!frameFound) {\n                                    this._currentAnimeFrames.keyFrames.push(keyInfo);\n                                }\n                            } else {\n                                keyInfo.matrix = new THREE.Matrix4();\n                                this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n                                this._currentAnimeFrames.keyFrames.push(keyInfo);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputAnimation',\n                    value: function _makeOutputAnimation() {\n                        var animationObj = new XAnimationObj(this.options);\n                        animationObj.fps = this.animTicksPerSecond;\n                        animationObj.name = this._currentAnime.name;\n                        animationObj.make(this._currentAnime.AnimeFrames);\n                        this.animations.push(animationObj);\n                    }\n                },\n                {\n                    key: 'assignAnimation',\n                    value: function assignAnimation(_model, _animation) {\n                        var model = _model;\n                        var animation = _animation;\n                        if (!model) {\n                            model = this.Meshes[0];\n                        }\n                        if (!animation) {\n                            animation = this.animations[0];\n                        }\n                        if (!model || !animation) {\n                            return null;\n                        }\n                        var put = {};\n                        put.fps = animation.fps;\n                        put.name = animation.name;\n                        put.length = animation.length;\n                        put.hierarchy = [];\n                        for (var b = 0; b < model.skeleton.bones.length; b++) {\n                            var findAnimation = false;\n                            for (var i = 0; i < animation.hierarchy.length; i++) {\n                                if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n                                    findAnimation = true;\n                                    var c_key = animation.hierarchy[i].copy();\n                                    c_key.parent = -1;\n                                    if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                                        for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                                            if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                                                c_key.parent = bb;\n                                                c_key.parentName = model.skeleton.bones[b].parent.name;\n                                            }\n                                        }\n                                    }\n                                    put.hierarchy.push(c_key);\n                                    break;\n                                }\n                            }\n                            if (!findAnimation) {\n                                var _c_key = animation.hierarchy[0].copy();\n                                _c_key.name = model.skeleton.bones[b].name;\n                                _c_key.parent = -1;\n                                for (var k = 0; k < _c_key.keys.length; k++) {\n                                    if (_c_key.keys[k].pos) {\n                                        _c_key.keys[k].pos.set(0, 0, 0);\n                                    }\n                                    if (_c_key.keys[k].scl) {\n                                        _c_key.keys[k].scl.set(1, 1, 1);\n                                    }\n                                    if (_c_key.keys[k].rot) {\n                                        _c_key.keys[k].rot.set(0, 0, 0, 1);\n                                    }\n                                }\n                                put.hierarchy.push(_c_key);\n                            }\n                        }\n                        if (!model.geometry.animations) {\n                            model.geometry.animations = [];\n                        }\n                        model.geometry.animations.push(THREE.AnimationClip.parseAnimation(put, model.skeleton.bones));\n                        if (!model.animationMixer) {\n                            model.animationMixer = new THREE.AnimationMixer(model);\n                        }\n                        return put;\n                    }\n                },\n                {\n                    key: '_ParseMatrixData',\n                    value: function _ParseMatrixData(targetMatrix, data) {\n                        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n                    }\n                }\n            ]);\n            return XLoader;\n        }();\n        return XLoader;\n    }();\n\n    return XLoader;\n});\ndefine('skylark-threejs-ex/loaders/DDSLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DDSLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    DDSLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: DDSLoader,\n        parse: function (buffer, loadMipmaps) {\n            var dds = {\n                mipmaps: [],\n                width: 0,\n                height: 0,\n                format: null,\n                mipmapCount: 1\n            };\n            var DDS_MAGIC = 542327876;\n            var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;\n            var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;\n            var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;\n            var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;\n            function fourCCToInt32(value) {\n                return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n            }\n            function int32ToFourCC(value) {\n                return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n            }\n            function loadARGBMip(buffer, dataOffset, width, height) {\n                var dataLength = width * height * 4;\n                var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n                var byteArray = new Uint8Array(dataLength);\n                var dst = 0;\n                var src = 0;\n                for (var y = 0; y < height; y++) {\n                    for (var x = 0; x < width; x++) {\n                        var b = srcBuffer[src];\n                        src++;\n                        var g = srcBuffer[src];\n                        src++;\n                        var r = srcBuffer[src];\n                        src++;\n                        var a = srcBuffer[src];\n                        src++;\n                        byteArray[dst] = r;\n                        dst++;\n                        byteArray[dst] = g;\n                        dst++;\n                        byteArray[dst] = b;\n                        dst++;\n                        byteArray[dst] = a;\n                        dst++;\n                    }\n                }\n                return byteArray;\n            }\n            var FOURCC_DXT1 = fourCCToInt32('DXT1');\n            var FOURCC_DXT3 = fourCCToInt32('DXT3');\n            var FOURCC_DXT5 = fourCCToInt32('DXT5');\n            var FOURCC_ETC1 = fourCCToInt32('ETC1');\n            var headerLengthInt = 31;\n            var off_magic = 0;\n            var off_size = 1;\n            var off_flags = 2;\n            var off_height = 3;\n            var off_width = 4;\n            var off_mipmapCount = 7;\n            var off_pfFlags = 20;\n            var off_pfFourCC = 21;\n            var off_RGBBitCount = 22;\n            var off_RBitMask = 23;\n            var off_GBitMask = 24;\n            var off_BBitMask = 25;\n            var off_ABitMask = 26;\n            var off_caps = 27;\n            var off_caps2 = 28;\n            var off_caps3 = 29;\n            var off_caps4 = 30;\n            var header = new Int32Array(buffer, 0, headerLengthInt);\n            if (header[off_magic] !== DDS_MAGIC) {\n                console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n                return dds;\n            }\n            if (!header[off_pfFlags] & DDPF_FOURCC) {\n                console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n                return dds;\n            }\n            var blockBytes;\n            var fourCC = header[off_pfFourCC];\n            var isRGBAUncompressed = false;\n            switch (fourCC) {\n            case FOURCC_DXT1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_S3TC_DXT1_Format;\n                break;\n            case FOURCC_DXT3:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT3_Format;\n                break;\n            case FOURCC_DXT5:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT5_Format;\n                break;\n            case FOURCC_ETC1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_ETC1_Format;\n                break;\n            default:\n                if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n                    isRGBAUncompressed = true;\n                    blockBytes = 64;\n                    dds.format = THREE.RGBAFormat;\n                } else {\n                    console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n                    return dds;\n                }\n            }\n            dds.mipmapCount = 1;\n            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n            }\n            var caps2 = header[off_caps2];\n            dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n            if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n                console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n                return dds;\n            }\n            dds.width = header[off_width];\n            dds.height = header[off_height];\n            var dataOffset = header[off_size] + 4;\n            var faces = dds.isCubemap ? 6 : 1;\n            for (var face = 0; face < faces; face++) {\n                var width = dds.width;\n                var height = dds.height;\n                for (var i = 0; i < dds.mipmapCount; i++) {\n                    if (isRGBAUncompressed) {\n                        var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n                        var dataLength = byteArray.length;\n                    } else {\n                        var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n                        var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n                    }\n                    var mipmap = {\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    };\n                    dds.mipmaps.push(mipmap);\n                    dataOffset += dataLength;\n                    width = Math.max(width >> 1, 1);\n                    height = Math.max(height >> 1, 1);\n                }\n            }\n            return dds;\n        }\n    });\n    return DDSLoader;\n});\ndefine('skylark-threejs-ex/loaders/PVRLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PVRLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    PVRLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: PVRLoader,\n        parse: function (buffer, loadMipmaps) {\n            var headerLengthInt = 13;\n            var header = new Uint32Array(buffer, 0, headerLengthInt);\n            var pvrDatas = {\n                buffer: buffer,\n                header: header,\n                loadMipmaps: loadMipmaps\n            };\n            if (header[0] === 55727696) {\n                return PVRLoader._parseV3(pvrDatas);\n            } else if (header[11] === 559044176) {\n                return PVRLoader._parseV2(pvrDatas);\n            } else {\n                console.error('THREE.PVRLoader: Unknown PVR format.');\n            }\n        }\n    });\n    PVRLoader._parseV3 = function (pvrDatas) {\n        var header = pvrDatas.header;\n        var bpp, format;\n        var metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];\n        switch (pixelFormat) {\n        case 0:\n            bpp = 2;\n            format = THREE.RGB_PVRTC_2BPPV1_Format;\n            break;\n        case 1:\n            bpp = 2;\n            format = THREE.RGBA_PVRTC_2BPPV1_Format;\n            break;\n        case 2:\n            bpp = 4;\n            format = THREE.RGB_PVRTC_4BPPV1_Format;\n            break;\n        case 3:\n            bpp = 4;\n            format = THREE.RGBA_PVRTC_4BPPV1_Format;\n            break;\n        default:\n            console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n        }\n        pvrDatas.dataPtr = 52 + metaLen;\n        pvrDatas.bpp = bpp;\n        pvrDatas.format = format;\n        pvrDatas.width = width;\n        pvrDatas.height = height;\n        pvrDatas.numSurfaces = numFaces;\n        pvrDatas.numMipmaps = numMipmaps;\n        pvrDatas.isCubemap = numFaces === 6;\n        return PVRLoader._extract(pvrDatas);\n    };\n    PVRLoader._parseV2 = function (pvrDatas) {\n        var header = pvrDatas.header;\n        var headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];\n        var TYPE_MASK = 255;\n        var PVRTC_2 = 24, PVRTC_4 = 25;\n        var formatFlags = flags & TYPE_MASK;\n        var bpp, format;\n        var _hasAlpha = bitmaskAlpha > 0;\n        if (formatFlags === PVRTC_4) {\n            format = _hasAlpha ? THREE.RGBA_PVRTC_4BPPV1_Format : THREE.RGB_PVRTC_4BPPV1_Format;\n            bpp = 4;\n        } else if (formatFlags === PVRTC_2) {\n            format = _hasAlpha ? THREE.RGBA_PVRTC_2BPPV1_Format : THREE.RGB_PVRTC_2BPPV1_Format;\n            bpp = 2;\n        } else {\n            console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n        }\n        pvrDatas.dataPtr = headerLength;\n        pvrDatas.bpp = bpp;\n        pvrDatas.format = format;\n        pvrDatas.width = width;\n        pvrDatas.height = height;\n        pvrDatas.numSurfaces = numSurfs;\n        pvrDatas.numMipmaps = numMipmaps + 1;\n        pvrDatas.isCubemap = numSurfs === 6;\n        return PVRLoader._extract(pvrDatas);\n    };\n    PVRLoader._extract = function (pvrDatas) {\n        var pvr = {\n            mipmaps: [],\n            width: pvrDatas.width,\n            height: pvrDatas.height,\n            format: pvrDatas.format,\n            mipmapCount: pvrDatas.numMipmaps,\n            isCubemap: pvrDatas.isCubemap\n        };\n        var buffer = pvrDatas.buffer;\n        var dataOffset = pvrDatas.dataPtr, bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;\n        if (bpp === 2) {\n            blockWidth = 8;\n            blockHeight = 4;\n        } else {\n            blockWidth = 4;\n            blockHeight = 4;\n        }\n        blockSize = blockWidth * blockHeight * bpp / 8;\n        pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n        var mipLevel = 0;\n        while (mipLevel < pvrDatas.numMipmaps) {\n            var sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;\n            widthBlocks = sWidth / blockWidth;\n            heightBlocks = sHeight / blockHeight;\n            if (widthBlocks < 2)\n                widthBlocks = 2;\n            if (heightBlocks < 2)\n                heightBlocks = 2;\n            dataSize = widthBlocks * heightBlocks * blockSize;\n            for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n                var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n                var mipmap = {\n                    data: byteArray,\n                    width: sWidth,\n                    height: sHeight\n                };\n                pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n                dataOffset += dataSize;\n            }\n            mipLevel++;\n        }\n        return pvr;\n    };\n    return PVRLoader;\n});\ndefine('skylark-threejs-ex/loaders/KTXLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var KTXLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    KTXLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: KTXLoader,\n        parse: function (buffer, loadMipmaps) {\n            var ktx = new KhronosTextureContainer(buffer, 1);\n            return {\n                mipmaps: ktx.mipmaps(loadMipmaps),\n                width: ktx.pixelWidth,\n                height: ktx.pixelHeight,\n                format: ktx.glInternalFormat,\n                isCubemap: ktx.numberOfFaces === 6,\n                mipmapCount: ktx.numberOfMipmapLevels\n            };\n        }\n    });\n    var KhronosTextureContainer = function () {\n        function KhronosTextureContainer(arrayBuffer, facesExpected) {\n            this.arrayBuffer = arrayBuffer;\n            var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n            if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n                console.error('texture missing KTX identifier');\n                return;\n            }\n            var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n            var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n            var endianness = headerDataView.getUint32(0, true);\n            var littleEndian = endianness === 67305985;\n            this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n            this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n            this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n            this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n            this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n            this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n            this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n            this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n            this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n            this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n            this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n            this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n            if (this.glType !== 0) {\n                console.warn('only compressed formats currently supported');\n                return;\n            } else {\n                this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n            }\n            if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n                console.warn('only 2D textures currently supported');\n                return;\n            }\n            if (this.numberOfArrayElements !== 0) {\n                console.warn('texture arrays not currently supported');\n                return;\n            }\n            if (this.numberOfFaces !== facesExpected) {\n                console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n                return;\n            }\n            this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n        }\n        KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n            var mipmaps = [];\n            var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n            var width = this.pixelWidth;\n            var height = this.pixelHeight;\n            var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n            for (var level = 0; level < mipmapCount; level++) {\n                var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n                dataOffset += 4;\n                for (var face = 0; face < this.numberOfFaces; face++) {\n                    var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n                    mipmaps.push({\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    });\n                    dataOffset += imageSize;\n                    dataOffset += 3 - (imageSize + 3) % 4;\n                }\n                width = Math.max(1, width * 0.5);\n                height = Math.max(1, height * 0.5);\n            }\n            return mipmaps;\n        };\n        KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4;\n        KhronosTextureContainer.COMPRESSED_2D = 0;\n        KhronosTextureContainer.COMPRESSED_3D = 1;\n        KhronosTextureContainer.TEX_2D = 2;\n        KhronosTextureContainer.TEX_3D = 3;\n        return KhronosTextureContainer;\n    }();\n    return KTXLoader;\n});\ndefine('skylark-threejs-ex/modifiers/SimplifyModifier',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SimplifyModifier = function () {\n    };\n    (function () {\n        var cb = new THREE.Vector3(), ab = new THREE.Vector3();\n        function pushIfUnique(array, object) {\n            if (array.indexOf(object) === -1)\n                array.push(object);\n        }\n        function removeFromArray(array, object) {\n            var k = array.indexOf(object);\n            if (k > -1)\n                array.splice(k, 1);\n        }\n        function computeEdgeCollapseCost(u, v) {\n            var edgelength = v.position.distanceTo(u.position);\n            var curvature = 0;\n            var sideFaces = [];\n            var i, il = u.faces.length, face, sideFace;\n            for (i = 0; i < il; i++) {\n                face = u.faces[i];\n                if (face.hasVertex(v)) {\n                    sideFaces.push(face);\n                }\n            }\n            for (i = 0; i < il; i++) {\n                var minCurvature = 1;\n                face = u.faces[i];\n                for (var j = 0; j < sideFaces.length; j++) {\n                    sideFace = sideFaces[j];\n                    var dotProd = face.normal.dot(sideFace.normal);\n                    minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n                }\n                curvature = Math.max(curvature, minCurvature);\n            }\n            var borders = 0;\n            if (sideFaces.length < 2) {\n                curvature = 1;\n            }\n            var amt = edgelength * curvature + borders;\n            return amt;\n        }\n        function computeEdgeCostAtVertex(v) {\n            if (v.neighbors.length === 0) {\n                v.collapseNeighbor = null;\n                v.collapseCost = -0.01;\n                return;\n            }\n            v.collapseCost = 100000;\n            v.collapseNeighbor = null;\n            for (var i = 0; i < v.neighbors.length; i++) {\n                var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n                if (!v.collapseNeighbor) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.collapseCost = collapseCost;\n                    v.minCost = collapseCost;\n                    v.totalCost = 0;\n                    v.costCount = 0;\n                }\n                v.costCount++;\n                v.totalCost += collapseCost;\n                if (collapseCost < v.minCost) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.minCost = collapseCost;\n                }\n            }\n            v.collapseCost = v.totalCost / v.costCount;\n        }\n        function removeVertex(v, vertices) {\n            console.assert(v.faces.length === 0);\n            while (v.neighbors.length) {\n                var n = v.neighbors.pop();\n                removeFromArray(n.neighbors, v);\n            }\n            removeFromArray(vertices, v);\n        }\n        function removeFace(f, faces) {\n            removeFromArray(faces, f);\n            if (f.v1)\n                removeFromArray(f.v1.faces, f);\n            if (f.v2)\n                removeFromArray(f.v2.faces, f);\n            if (f.v3)\n                removeFromArray(f.v3.faces, f);\n            var vs = [\n                f.v1,\n                f.v2,\n                f.v3\n            ];\n            var v1, v2;\n            for (var i = 0; i < 3; i++) {\n                v1 = vs[i];\n                v2 = vs[(i + 1) % 3];\n                if (!v1 || !v2)\n                    continue;\n                v1.removeIfNonNeighbor(v2);\n                v2.removeIfNonNeighbor(v1);\n            }\n        }\n        function collapse(vertices, faces, u, v) {\n            if (!v) {\n                removeVertex(u, vertices);\n                return;\n            }\n            var i;\n            var tmpVertices = [];\n            for (i = 0; i < u.neighbors.length; i++) {\n                tmpVertices.push(u.neighbors[i]);\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                if (u.faces[i].hasVertex(v)) {\n                    removeFace(u.faces[i], faces);\n                }\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                u.faces[i].replaceVertex(u, v);\n            }\n            removeVertex(u, vertices);\n            for (i = 0; i < tmpVertices.length; i++) {\n                computeEdgeCostAtVertex(tmpVertices[i]);\n            }\n        }\n        function minimumCostEdge(vertices) {\n            var least = vertices[0];\n            for (var i = 0; i < vertices.length; i++) {\n                if (vertices[i].collapseCost < least.collapseCost) {\n                    least = vertices[i];\n                }\n            }\n            return least;\n        }\n        function Triangle(v1, v2, v3, a, b, c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n            this.v1 = v1;\n            this.v2 = v2;\n            this.v3 = v3;\n            this.normal = new THREE.Vector3();\n            this.computeNormal();\n            v1.faces.push(this);\n            v1.addUniqueNeighbor(v2);\n            v1.addUniqueNeighbor(v3);\n            v2.faces.push(this);\n            v2.addUniqueNeighbor(v1);\n            v2.addUniqueNeighbor(v3);\n            v3.faces.push(this);\n            v3.addUniqueNeighbor(v1);\n            v3.addUniqueNeighbor(v2);\n        }\n        Triangle.prototype.computeNormal = function () {\n            var vA = this.v1.position;\n            var vB = this.v2.position;\n            var vC = this.v3.position;\n            cb.subVectors(vC, vB);\n            ab.subVectors(vA, vB);\n            cb.cross(ab).normalize();\n            this.normal.copy(cb);\n        };\n        Triangle.prototype.hasVertex = function (v) {\n            return v === this.v1 || v === this.v2 || v === this.v3;\n        };\n        Triangle.prototype.replaceVertex = function (oldv, newv) {\n            if (oldv === this.v1)\n                this.v1 = newv;\n            else if (oldv === this.v2)\n                this.v2 = newv;\n            else if (oldv === this.v3)\n                this.v3 = newv;\n            removeFromArray(oldv.faces, this);\n            newv.faces.push(this);\n            oldv.removeIfNonNeighbor(this.v1);\n            this.v1.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v2);\n            this.v2.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v3);\n            this.v3.removeIfNonNeighbor(oldv);\n            this.v1.addUniqueNeighbor(this.v2);\n            this.v1.addUniqueNeighbor(this.v3);\n            this.v2.addUniqueNeighbor(this.v1);\n            this.v2.addUniqueNeighbor(this.v3);\n            this.v3.addUniqueNeighbor(this.v1);\n            this.v3.addUniqueNeighbor(this.v2);\n            this.computeNormal();\n        };\n        function Vertex(v, id) {\n            this.position = v;\n            this.id = id;\n            this.faces = [];\n            this.neighbors = [];\n            this.collapseCost = 0;\n            this.collapseNeighbor = null;\n        }\n        Vertex.prototype.addUniqueNeighbor = function (vertex) {\n            pushIfUnique(this.neighbors, vertex);\n        };\n        Vertex.prototype.removeIfNonNeighbor = function (n) {\n            var neighbors = this.neighbors;\n            var faces = this.faces;\n            var offset = neighbors.indexOf(n);\n            if (offset === -1)\n                return;\n            for (var i = 0; i < faces.length; i++) {\n                if (faces[i].hasVertex(n))\n                    return;\n            }\n            neighbors.splice(offset, 1);\n        };\n        SimplifyModifier.prototype.modify = function (geometry, count) {\n            if (geometry.isBufferGeometry) {\n                geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n            }\n            geometry.mergeVertices();\n            var oldVertices = geometry.vertices;\n            var oldFaces = geometry.faces;\n            var vertices = [];\n            var faces = [];\n            var i, il;\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                var vertex = new Vertex(oldVertices[i], i);\n                vertices.push(vertex);\n            }\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                var face = oldFaces[i];\n                var a = face.a;\n                var b = face.b;\n                var c = face.c;\n                var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n                faces.push(triangle);\n            }\n            for (i = 0, il = vertices.length; i < il; i++) {\n                computeEdgeCostAtVertex(vertices[i]);\n            }\n            var nextVertex;\n            var z = count;\n            while (z--) {\n                nextVertex = minimumCostEdge(vertices);\n                if (!nextVertex) {\n                    console.log('THREE.SimplifyModifier: No next vertex');\n                    break;\n                }\n                collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n            }\n            var simplifiedGeometry = new THREE.BufferGeometry();\n            var position = [];\n            var index = [];\n            for (i = 0; i < vertices.length; i++) {\n                var vertex = vertices[i].position;\n                position.push(vertex.x, vertex.y, vertex.z);\n            }\n            for (i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                var a = vertices.indexOf(face.v1);\n                var b = vertices.indexOf(face.v2);\n                var c = vertices.indexOf(face.v3);\n                index.push(a, b, c);\n            }\n            simplifiedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            simplifiedGeometry.setIndex(index);\n            return simplifiedGeometry;\n        };\n    }());\n    return SimplifyModifier;\n});\ndefine('skylark-threejs-ex/modifiers/SubdivisionModifier',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SubdivisionModifier = function (subdivisions) {\n        this.subdivisions = subdivisions === undefined ? 1 : subdivisions;\n    };\n    SubdivisionModifier.prototype.modify = function (geometry) {\n        if (geometry.isBufferGeometry) {\n            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n        } else {\n            geometry = geometry.clone();\n        }\n        geometry.mergeVertices();\n        var repeats = this.subdivisions;\n        while (repeats-- > 0) {\n            this.smooth(geometry);\n        }\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n        return geometry;\n    };\n    (function () {\n        var ABC = [\n            'a',\n            'b',\n            'c'\n        ];\n        function getEdge(a, b, map) {\n            var vertexIndexA = Math.min(a, b);\n            var vertexIndexB = Math.max(a, b);\n            var key = vertexIndexA + '_' + vertexIndexB;\n            return map[key];\n        }\n        function processEdge(a, b, vertices, map, face, metaVertices) {\n            var vertexIndexA = Math.min(a, b);\n            var vertexIndexB = Math.max(a, b);\n            var key = vertexIndexA + '_' + vertexIndexB;\n            var edge;\n            if (key in map) {\n                edge = map[key];\n            } else {\n                var vertexA = vertices[vertexIndexA];\n                var vertexB = vertices[vertexIndexB];\n                edge = {\n                    a: vertexA,\n                    b: vertexB,\n                    newEdge: null,\n                    faces: []\n                };\n                map[key] = edge;\n            }\n            edge.faces.push(face);\n            metaVertices[a].edges.push(edge);\n            metaVertices[b].edges.push(edge);\n        }\n        function generateLookups(vertices, faces, metaVertices, edges) {\n            var i, il, face;\n            for (i = 0, il = vertices.length; i < il; i++) {\n                metaVertices[i] = { edges: [] };\n            }\n            for (i = 0, il = faces.length; i < il; i++) {\n                face = faces[i];\n                processEdge(face.a, face.b, vertices, edges, face, metaVertices);\n                processEdge(face.b, face.c, vertices, edges, face, metaVertices);\n                processEdge(face.c, face.a, vertices, edges, face, metaVertices);\n            }\n        }\n        function newFace(newFaces, a, b, c, materialIndex) {\n            newFaces.push(new THREE.Face3(a, b, c, undefined, undefined, materialIndex));\n        }\n        function midpoint(a, b) {\n            return Math.abs(b - a) / 2 + Math.min(a, b);\n        }\n        function newUv(newUvs, a, b, c) {\n            newUvs.push([\n                THREE.clone(),\n                b.clone(),\n                c.clone()\n            ]);\n        }\n        SubdivisionModifier.prototype.smooth = function (geometry) {\n            var tmp = new THREE.Vector3();\n            var oldVertices, oldFaces, oldUvs;\n            var newVertices, newFaces, newUVs = [];\n            var n, i, il, j, k;\n            var metaVertices, sourceEdges;\n            var sourceEdges, newEdgeVertices, newSourceVertices;\n            oldVertices = geometry.vertices;\n            oldFaces = geometry.faces;\n            oldUvs = geometry.faceVertexUvs;\n            var hasUvs = oldUvs[0] !== undefined && oldUvs[0].length > 0;\n            if (hasUvs) {\n                for (var j = 0; j < oldUvs.length; j++) {\n                    newUVs.push([]);\n                }\n            }\n            metaVertices = new Array(oldVertices.length);\n            sourceEdges = {};\n            generateLookups(oldVertices, oldFaces, metaVertices, sourceEdges);\n            newEdgeVertices = [];\n            var other, currentEdge, newEdge, face;\n            var edgeVertexWeight, adjacentVertexWeight, connectedFaces;\n            for (i in sourceEdges) {\n                currentEdge = sourceEdges[i];\n                newEdge = new THREE.Vector3();\n                edgeVertexWeight = 3 / 8;\n                adjacentVertexWeight = 1 / 8;\n                connectedFaces = currentEdge.faces.length;\n                if (connectedFaces != 2) {\n                    edgeVertexWeight = 0.5;\n                    adjacentVertexWeight = 0;\n                    if (connectedFaces != 1) {\n                    }\n                }\n                newEdge.addVectors(currentEdge.a, currentEdge.b).multiplyScalar(edgeVertexWeight);\n                tmp.set(0, 0, 0);\n                for (j = 0; j < connectedFaces; j++) {\n                    face = currentEdge.faces[j];\n                    for (k = 0; k < 3; k++) {\n                        other = oldVertices[face[ABC[k]]];\n                        if (other !== currentEdge.a && other !== currentEdge.b)\n                            break;\n                    }\n                    tmp.add(other);\n                }\n                tmp.multiplyScalar(adjacentVertexWeight);\n                newEdge.add(tmp);\n                currentEdge.newEdge = newEdgeVertices.length;\n                newEdgeVertices.push(newEdge);\n            }\n            var beta, sourceVertexWeight, connectingVertexWeight;\n            var connectingEdge, connectingEdges, oldVertex, newSourceVertex;\n            newSourceVertices = [];\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                oldVertex = oldVertices[i];\n                connectingEdges = metaVertices[i].edges;\n                n = connectingEdges.length;\n                if (n == 3) {\n                    beta = 3 / 16;\n                } else if (n > 3) {\n                    beta = 3 / (8 * n);\n                }\n                sourceVertexWeight = 1 - n * beta;\n                connectingVertexWeight = beta;\n                if (n <= 2) {\n                    if (n == 2) {\n                        sourceVertexWeight = 3 / 4;\n                        connectingVertexWeight = 1 / 8;\n                    } else if (n == 1) {\n                    } else if (n == 0) {\n                    }\n                }\n                newSourceVertex = oldVertex.clone().multiplyScalar(sourceVertexWeight);\n                tmp.set(0, 0, 0);\n                for (j = 0; j < n; j++) {\n                    connectingEdge = connectingEdges[j];\n                    other = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;\n                    tmp.add(other);\n                }\n                tmp.multiplyScalar(connectingVertexWeight);\n                newSourceVertex.add(tmp);\n                newSourceVertices.push(newSourceVertex);\n            }\n            newVertices = newSourceVertices.concat(newEdgeVertices);\n            var sl = newSourceVertices.length, edge1, edge2, edge3;\n            newFaces = [];\n            var uv, x0, x1, x2;\n            var x3 = new THREE.Vector2();\n            var x4 = new THREE.Vector2();\n            var x5 = new THREE.Vector2();\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                face = oldFaces[i];\n                edge1 = getEdge(face.a, face.b, sourceEdges).newEdge + sl;\n                edge2 = getEdge(face.b, face.c, sourceEdges).newEdge + sl;\n                edge3 = getEdge(face.c, face.a, sourceEdges).newEdge + sl;\n                newFace(newFaces, edge1, edge2, edge3, face.materialIndex);\n                newFace(newFaces, face.a, edge1, edge3, face.materialIndex);\n                newFace(newFaces, face.b, edge2, edge1, face.materialIndex);\n                newFace(newFaces, face.c, edge3, edge2, face.materialIndex);\n                if (hasUvs) {\n                    for (var j = 0; j < oldUvs.length; j++) {\n                        uv = oldUvs[j][i];\n                        x0 = uv[0];\n                        x1 = uv[1];\n                        x2 = uv[2];\n                        x3.set(midpoint(x0.x, x1.x), midpoint(x0.y, x1.y));\n                        x4.set(midpoint(x1.x, x2.x), midpoint(x1.y, x2.y));\n                        x5.set(midpoint(x0.x, x2.x), midpoint(x0.y, x2.y));\n                        newUv(newUVs[j], x3, x4, x5);\n                        newUv(newUVs[j], x0, x3, x5);\n                        newUv(newUVs[j], x1, x4, x3);\n                        newUv(newUVs[j], x2, x5, x4);\n                    }\n                }\n            }\n            geometry.vertices = newVertices;\n            geometry.faces = newFaces;\n            if (hasUvs)\n                geometry.faceVertexUvs = newUVs;\n        };\n    }());\n    return SubdivisionModifier;\n});\ndefine('skylark-threejs-ex/exporters/DRACOExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DRACOExporter = function () {\n    };\n    DRACOExporter.prototype = {\n        constructor: DRACOExporter,\n        parse: function (geometry, options) {\n            if (DracoEncoderModule === undefined) {\n                throw new Error('THREE.DRACOExporter: required the draco_decoder to work.');\n            }\n            if (options === undefined) {\n                options = {\n                    decodeSpeed: 5,\n                    encodeSpeed: 5,\n                    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n                    quantization: [\n                        16,\n                        8,\n                        8,\n                        8,\n                        8\n                    ],\n                    exportUvs: true,\n                    exportNormals: true,\n                    exportColor: false\n                };\n            }\n            var dracoEncoder = DracoEncoderModule();\n            var encoder = new dracoEncoder.Encoder();\n            var builder = new dracoEncoder.MeshBuilder();\n            var mesh = new dracoEncoder.Mesh();\n            if (geometry.isGeometry === true) {\n                var bufferGeometry = new THREE.BufferGeometry();\n                bufferGeometry.fromGeometry(geometry);\n                geometry = bufferGeometry;\n            }\n            if (geometry.isBufferGeometry !== true) {\n                throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or BufferGeometry instance.');\n            }\n            var vertices = geometry.getAttribute('position');\n            builder.AddFloatAttributeToMesh(mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n            var faces = geometry.getIndex();\n            if (faces !== null) {\n                builder.AddFacesToMesh(mesh, faces.count, faces.array);\n            } else {\n                var faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n                for (var i = 0; i < faces.length; i++) {\n                    faces[i] = i;\n                }\n                builder.AddFacesToMesh(mesh, vertices.count, faces);\n            }\n            if (options.exportNormals === true) {\n                var normals = geometry.getAttribute('normal');\n                if (normals !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n                }\n            }\n            if (options.exportUvs === true) {\n                var uvs = geometry.getAttribute('uv');\n                if (uvs !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n                }\n            }\n            if (options.exportColor === true) {\n                var colors = geometry.getAttribute('color');\n                if (colors !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n                }\n            }\n            var encodedData = new dracoEncoder.DracoInt8Array();\n            encoder.SetSpeedOptions(options.encodeSpeed || 5, options.decodeSpeed || 5);\n            if (options.encoderMethod !== undefined) {\n                encoder.SetEncodingMethod(options.encoderMethod);\n            }\n            if (options.quantization !== undefined) {\n                for (var i = 0; i < 5; i++) {\n                    if (options.quantization[i] !== undefined) {\n                        encoder.SetAttributeQuantization(i, options.quantization[i]);\n                    }\n                }\n            }\n            var length = encoder.EncodeMeshToDracoBuffer(mesh, encodedData);\n            dracoEncoder.destroy(mesh);\n            if (length === 0) {\n                throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n            }\n            var outputData = new Int8Array(new ArrayBuffer(length));\n            for (var i = 0; i < length; i++) {\n                outputData[i] = encodedData.GetValue(i);\n            }\n            dracoEncoder.destroy(encodedData);\n            dracoEncoder.destroy(encoder);\n            dracoEncoder.destroy(builder);\n            return outputData;\n        }\n    };\n    DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;\n    DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;\n    DRACOExporter.POINT_CLOUD = 0;\n    DRACOExporter.TRIANGULAR_MESH = 1;\n    DRACOExporter.INVALID = -1;\n    DRACOExporter.POSITION = 0;\n    DRACOExporter.NORMAL = 1;\n    DRACOExporter.COLOR = 2;\n    DRACOExporter.TEX_COORD = 3;\n    DRACOExporter.GENERIC = 4;\n\n    return DRACOExporter;\n});\ndefine('skylark-threejs-ex/exporters/OBJExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var OBJExporter = function () {\n    };\n    OBJExporter.prototype = {\n        constructor: OBJExporter,\n        parse: function (object) {\n            var output = '';\n            var indexVertex = 0;\n            var indexVertexUvs = 0;\n            var indexNormals = 0;\n            var vertex = new THREE.Vector3();\n            var normal = new THREE.Vector3();\n            var uv = new THREE.Vector2();\n            var i, j, k, l, m, face = [];\n            var parseMesh = function (mesh) {\n                var nbVertex = 0;\n                var nbNormals = 0;\n                var nbVertexUvs = 0;\n                var geometry = mesh.geometry;\n                var normalMatrixWorld = new THREE.Matrix3();\n                if (geometry instanceof THREE.Geometry) {\n                    geometry = new THREE.BufferGeometry().setFromObject(mesh);\n                }\n                if (geometry instanceof THREE.BufferGeometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var indices = geometry.getIndex();\n                    output += 'o ' + mesh.name + '\\n';\n                    if (mesh.material && mesh.material.name) {\n                        output += 'usemtl ' + mesh.material.name + '\\n';\n                    }\n                    if (vertices !== undefined) {\n                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n                            vertex.x = vertices.getX(i);\n                            vertex.y = vertices.getY(i);\n                            vertex.z = vertices.getZ(i);\n                            vertex.applyMatrix4(mesh.matrixWorld);\n                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n                        }\n                    }\n                    if (uvs !== undefined) {\n                        for (i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n                            uv.x = uvs.getX(i);\n                            uv.y = uvs.getY(i);\n                            output += 'vt ' + uv.x + ' ' + uv.y + '\\n';\n                        }\n                    }\n                    if (normals !== undefined) {\n                        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                        for (i = 0, l = normals.count; i < l; i++, nbNormals++) {\n                            normal.x = normals.getX(i);\n                            normal.y = normals.getY(i);\n                            normal.z = normals.getZ(i);\n                            normal.applyMatrix3(normalMatrixWorld).normalize();\n                            output += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n                        }\n                    }\n                    if (indices !== null) {\n                        for (i = 0, l = indices.count; i < l; i += 3) {\n                            for (m = 0; m < 3; m++) {\n                                j = indices.getX(i + m) + 1;\n                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');\n                            }\n                            output += 'f ' + face.join(' ') + '\\n';\n                        }\n                    } else {\n                        for (i = 0, l = vertices.count; i < l; i += 3) {\n                            for (m = 0; m < 3; m++) {\n                                j = i + m + 1;\n                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');\n                            }\n                            output += 'f ' + face.join(' ') + '\\n';\n                        }\n                    }\n                } else {\n                    console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry);\n                }\n                indexVertex += nbVertex;\n                indexVertexUvs += nbVertexUvs;\n                indexNormals += nbNormals;\n            };\n            var parseLine = function (line) {\n                var nbVertex = 0;\n                var geometry = line.geometry;\n                var type = line.type;\n                if (geometry instanceof THREE.Geometry) {\n                    geometry = new THREE.BufferGeometry().setFromObject(line);\n                }\n                if (geometry instanceof THREE.BufferGeometry) {\n                    var vertices = geometry.getAttribute('position');\n                    output += 'o ' + line.name + '\\n';\n                    if (vertices !== undefined) {\n                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n                            vertex.x = vertices.getX(i);\n                            vertex.y = vertices.getY(i);\n                            vertex.z = vertices.getZ(i);\n                            vertex.applyMatrix4(line.matrixWorld);\n                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n                        }\n                    }\n                    if (type === 'Line') {\n                        output += 'l ';\n                        for (j = 1, l = vertices.count; j <= l; j++) {\n                            output += indexVertex + j + ' ';\n                        }\n                        output += '\\n';\n                    }\n                    if (type === 'LineSegments') {\n                        for (j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n                            output += 'l ' + (indexVertex + j) + ' ' + (indexVertex + k) + '\\n';\n                        }\n                    }\n                } else {\n                    console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry);\n                }\n                indexVertex += nbVertex;\n            };\n            object.traverse(function (child) {\n                if (child instanceof THREE.Mesh) {\n                    parseMesh(child);\n                }\n                if (child instanceof THREE.Line) {\n                    parseLine(child);\n                }\n            });\n            return output;\n        }\n    };\n\n    return OBJExporter;\n});\ndefine('skylark-threejs-ex/exporters/STLExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var STLExporter = function () {\n    };\n    STLExporter.prototype = {\n        constructor: STLExporter,\n        parse: function () {\n            var vector = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            return function parse(scene, options) {\n                if (options === undefined)\n                    options = {};\n                var binary = options.binary !== undefined ? options.binary : false;\n                var objects = [];\n                var triangles = 0;\n                scene.traverse(function (object) {\n                    if (object.isMesh) {\n                        var geometry = object.geometry;\n                        if (geometry.isBufferGeometry) {\n                            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n                        }\n                        if (geometry.isGeometry) {\n                            triangles += geometry.faces.length;\n                            objects.push({\n                                geometry: geometry,\n                                matrixWorld: object.matrixWorld\n                            });\n                        }\n                    }\n                });\n                if (binary) {\n                    var offset = 80;\n                    var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n                    var arrayBuffer = new ArrayBuffer(bufferLength);\n                    var output = new DataView(arrayBuffer);\n                    output.setUint32(offset, triangles, true);\n                    offset += 4;\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output.setFloat32(offset, vector.x, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.y, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.z, true);\n                            offset += 4;\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output.setFloat32(offset, vector.x, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.y, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.z, true);\n                                offset += 4;\n                            }\n                            output.setUint16(offset, 0, true);\n                            offset += 2;\n                        }\n                    }\n                    return output;\n                } else {\n                    var output = '';\n                    output += 'solid exported\\n';\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output += '\\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            output += '\\t\\touter loop\\n';\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output += '\\t\\t\\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            }\n                            output += '\\t\\tendloop\\n';\n                            output += '\\tendfacet\\n';\n                        }\n                    }\n                    output += 'endsolid exported\\n';\n                    return output;\n                }\n            };\n        }()\n    };\n    return STLExporter;\n});\ndefine('skylark-threejs-ex/exporters/GLTFExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var WEBGL_CONSTANTS = {\n        POINTS: 0,\n        LINES: 1,\n        LINE_LOOP: 2,\n        LINE_STRIP: 3,\n        TRIANGLES: 4,\n        TRIANGLE_STRIP: 5,\n        TRIANGLE_FAN: 6,\n        UNSIGNED_BYTE: 5121,\n        UNSIGNED_SHORT: 5123,\n        FLOAT: 5126,\n        UNSIGNED_INT: 5125,\n        ARRAY_BUFFER: 34962,\n        ELEMENT_ARRAY_BUFFER: 34963,\n        NEAREST: 9728,\n        LINEAR: 9729,\n        NEAREST_MIPMAP_NEAREST: 9984,\n        LINEAR_MIPMAP_NEAREST: 9985,\n        NEAREST_MIPMAP_LINEAR: 9986,\n        LINEAR_MIPMAP_LINEAR: 9987,\n        CLAMP_TO_EDGE: 33071,\n        MIRRORED_REPEAT: 33648,\n        REPEAT: 10497\n    };\n    var THREE_TO_WEBGL = {};\n    THREE_TO_WEBGL[THREE.NearestFilter] = WEBGL_CONSTANTS.NEAREST;\n    THREE_TO_WEBGL[THREE.NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\n    THREE_TO_WEBGL[THREE.NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\n    THREE_TO_WEBGL[THREE.LinearFilter] = WEBGL_CONSTANTS.LINEAR;\n    THREE_TO_WEBGL[THREE.LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\n    THREE_TO_WEBGL[THREE.LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n    THREE_TO_WEBGL[THREE.ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\n    THREE_TO_WEBGL[THREE.RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\n    THREE_TO_WEBGL[THREE.MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n    var PATH_PROPERTIES = {\n        scale: 'scale',\n        position: 'translation',\n        quaternion: 'rotation',\n        morphTargetInfluences: 'weights'\n    };\n    var GLTFExporter = function () {\n    };\n    GLTFExporter.prototype = {\n        constructor: GLTFExporter,\n        parse: function (input, onDone, options) {\n            var DEFAULT_OPTIONS = {\n                binary: false,\n                trs: false,\n                onlyVisible: true,\n                truncateDrawRange: true,\n                embedImages: true,\n                maxTextureSize: Infinity,\n                animations: [],\n                forceIndices: false,\n                forcePowerOfTwoTextures: false,\n                includeCustomExtensions: false\n            };\n            options = Object.assign({}, DEFAULT_OPTIONS, options);\n            if (options.animations.length > 0) {\n                options.trs = true;\n            }\n            var outputJSON = {\n                asset: {\n                    version: '2.0',\n                    generator: 'GLTFExporter'\n                }\n            };\n            var byteOffset = 0;\n            var buffers = [];\n            var pending = [];\n            var nodeMap = new Map();\n            var skins = [];\n            var extensionsUsed = {};\n            var cachedData = {\n                meshes: new Map(),\n                attributes: new Map(),\n                attributesNormalized: new Map(),\n                materials: new Map(),\n                textures: new Map(),\n                images: new Map()\n            };\n            var cachedCanvas;\n            var uids = new Map();\n            var uid = 0;\n            function getUID(object) {\n                if (!uids.has(object))\n                    uids.set(object, uid++);\n                return uids.get(object);\n            }\n            function equalArray(array1, array2) {\n                return array1.length === array2.length && array1.every(function (element, index) {\n                    return element === array2[index];\n                });\n            }\n            function stringToArrayBuffer(text) {\n                if (window.TextEncoder !== undefined) {\n                    return new TextEncoder().encode(text).buffer;\n                }\n                var array = new Uint8Array(new ArrayBuffer(text.length));\n                for (var i = 0, il = text.length; i < il; i++) {\n                    var value = text.charCodeAt(i);\n                    array[i] = value > 255 ? 32 : value;\n                }\n                return array.buffer;\n            }\n            function getMinMax(attribute, start, count) {\n                var output = {\n                    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n                    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n                };\n                for (var i = start; i < start + count; i++) {\n                    for (var a = 0; a < attribute.itemSize; a++) {\n                        var value = attribute.array[i * attribute.itemSize + a];\n                        output.min[a] = Math.min(output.min[a], value);\n                        output.max[a] = Math.max(output.max[a], value);\n                    }\n                }\n                return output;\n            }\n            function isPowerOfTwo(image) {\n                return THREE.MathUtils.isPowerOfTwo(image.width) && THREE.MathUtils.isPowerOfTwo(image.height);\n            }\n            function isNormalizedNormalAttribute(normal) {\n                if (cachedData.attributesNormalized.has(normal)) {\n                    return false;\n                }\n                var v = new THREE.Vector3();\n                for (var i = 0, il = normal.count; i < il; i++) {\n                    if (Math.abs(v.fromArray(normal.array, i * 3).length() - 1) > 0.0005)\n                        return false;\n                }\n                return true;\n            }\n            function createNormalizedNormalAttribute(normal) {\n                if (cachedData.attributesNormalized.has(normal)) {\n                    return cachedData.attributesNormalized.get(normal);\n                }\n                var attribute = normal.clone();\n                var v = new THREE.Vector3();\n                for (var i = 0, il = attribute.count; i < il; i++) {\n                    v.fromArray(attribute.array, i * 3);\n                    if (v.x === 0 && v.y === 0 && v.z === 0) {\n                        v.setX(1);\n                    } else {\n                        v.normalize();\n                    }\n                    v.toArray(attribute.array, i * 3);\n                }\n                cachedData.attributesNormalized.set(normal, attribute);\n                return attribute;\n            }\n            function getPaddedBufferSize(bufferSize) {\n                return Math.ceil(bufferSize / 4) * 4;\n            }\n            function getPaddedArrayBuffer(arrayBuffer, paddingByte) {\n                paddingByte = paddingByte || 0;\n                var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n                if (paddedLength !== arrayBuffer.byteLength) {\n                    var array = new Uint8Array(paddedLength);\n                    array.set(new Uint8Array(arrayBuffer));\n                    if (paddingByte !== 0) {\n                        for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {\n                            array[i] = paddingByte;\n                        }\n                    }\n                    return array.buffer;\n                }\n                return arrayBuffer;\n            }\n            function serializeUserData(object, gltfProperty) {\n                if (Object.keys(object.userData).length === 0) {\n                    return;\n                }\n                try {\n                    var json = JSON.parse(JSON.stringify(object.userData));\n                    if (options.includeCustomExtensions && json.gltfExtensions) {\n                        if (gltfProperty.extensions === undefined) {\n                            gltfProperty.extensions = {};\n                        }\n                        for (var extensionName in json.gltfExtensions) {\n                            gltfProperty.extensions[extensionName] = json.gltfExtensions[extensionName];\n                            extensionsUsed[extensionName] = true;\n                        }\n                        delete json.gltfExtensions;\n                    }\n                    if (Object.keys(json).length > 0) {\n                        gltfProperty.extras = json;\n                    }\n                } catch (error) {\n                    console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n                }\n            }\n            function applyTextureTransform(mapDef, texture) {\n                var didTransform = false;\n                var transformDef = {};\n                if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n                    transformDef.offset = texture.offset.toArray();\n                    didTransform = true;\n                }\n                if (texture.rotation !== 0) {\n                    transformDef.rotation = texture.rotation;\n                    didTransform = true;\n                }\n                if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n                    transformDef.scale = texture.repeat.toArray();\n                    didTransform = true;\n                }\n                if (didTransform) {\n                    mapDef.extensions = mapDef.extensions || {};\n                    mapDef.extensions['KHR_texture_transform'] = transformDef;\n                    extensionsUsed['KHR_texture_transform'] = true;\n                }\n            }\n            function processBuffer(buffer) {\n                if (!outputJSON.buffers) {\n                    outputJSON.buffers = [{ byteLength: 0 }];\n                }\n                buffers.push(buffer);\n                return 0;\n            }\n            function processBufferView(attribute, componentType, start, count, target) {\n                if (!outputJSON.bufferViews) {\n                    outputJSON.bufferViews = [];\n                }\n                var componentSize;\n                if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n                    componentSize = 1;\n                } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n                    componentSize = 2;\n                } else {\n                    componentSize = 4;\n                }\n                var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n                var dataView = new DataView(new ArrayBuffer(byteLength));\n                var offset = 0;\n                for (var i = start; i < start + count; i++) {\n                    for (var a = 0; a < attribute.itemSize; a++) {\n                        var value = attribute.array[i * attribute.itemSize + a];\n                        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n                            dataView.setFloat32(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n                            dataView.setUint32(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n                            dataView.setUint16(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n                            dataView.setUint8(offset, value);\n                        }\n                        offset += componentSize;\n                    }\n                }\n                var gltfBufferView = {\n                    buffer: processBuffer(dataView.buffer),\n                    byteOffset: byteOffset,\n                    byteLength: byteLength\n                };\n                if (target !== undefined)\n                    gltfBufferView.target = target;\n                if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n                    gltfBufferView.byteStride = attribute.itemSize * componentSize;\n                }\n                byteOffset += byteLength;\n                outputJSON.bufferViews.push(gltfBufferView);\n                var output = {\n                    id: outputJSON.bufferViews.length - 1,\n                    byteLength: 0\n                };\n                return output;\n            }\n            function processBufferViewImage(blob) {\n                if (!outputJSON.bufferViews) {\n                    outputJSON.bufferViews = [];\n                }\n                return new Promise(function (resolve) {\n                    var reader = new window.FileReader();\n                    reader.readAsArrayBuffer(blob);\n                    reader.onloadend = function () {\n                        var buffer = getPaddedArrayBuffer(reader.result);\n                        var bufferView = {\n                            buffer: processBuffer(buffer),\n                            byteOffset: byteOffset,\n                            byteLength: buffer.byteLength\n                        };\n                        byteOffset += buffer.byteLength;\n                        outputJSON.bufferViews.push(bufferView);\n                        resolve(outputJSON.bufferViews.length - 1);\n                    };\n                });\n            }\n            function processAccessor(attribute, geometry, start, count) {\n                var types = {\n                    1: 'SCALAR',\n                    2: 'VEC2',\n                    3: 'VEC3',\n                    4: 'VEC4',\n                    16: 'MAT4'\n                };\n                var componentType;\n                if (attribute.array.constructor === Float32Array) {\n                    componentType = WEBGL_CONSTANTS.FLOAT;\n                } else if (attribute.array.constructor === Uint32Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n                } else if (attribute.array.constructor === Uint16Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n                } else if (attribute.array.constructor === Uint8Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n                } else {\n                    throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n                }\n                if (start === undefined)\n                    start = 0;\n                if (count === undefined)\n                    count = attribute.count;\n                if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n                    var end = start + count;\n                    var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n                    start = Math.max(start, geometry.drawRange.start);\n                    count = Math.min(end, end2) - start;\n                    if (count < 0)\n                        count = 0;\n                }\n                if (count === 0) {\n                    return null;\n                }\n                var minMax = getMinMax(attribute, start, count);\n                var bufferViewTarget;\n                if (geometry !== undefined) {\n                    bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n                }\n                var bufferView = processBufferView(attribute, componentType, start, count, bufferViewTarget);\n                var gltfAccessor = {\n                    bufferView: bufferView.id,\n                    byteOffset: bufferView.byteOffset,\n                    componentType: componentType,\n                    count: count,\n                    max: minMax.max,\n                    min: minMax.min,\n                    type: types[attribute.itemSize]\n                };\n                if (!outputJSON.accessors) {\n                    outputJSON.accessors = [];\n                }\n                outputJSON.accessors.push(gltfAccessor);\n                return outputJSON.accessors.length - 1;\n            }\n            function processImage(image, format, flipY) {\n                if (!cachedData.images.has(image)) {\n                    cachedData.images.set(image, {});\n                }\n                var cachedImages = cachedData.images.get(image);\n                var mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';\n                var key = mimeType + ':flipY/' + flipY.toString();\n                if (cachedImages[key] !== undefined) {\n                    return cachedImages[key];\n                }\n                if (!outputJSON.images) {\n                    outputJSON.images = [];\n                }\n                var gltfImage = { mimeType: mimeType };\n                if (options.embedImages) {\n                    var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');\n                    canvas.width = Math.min(image.width, options.maxTextureSize);\n                    canvas.height = Math.min(image.height, options.maxTextureSize);\n                    if (options.forcePowerOfTwoTextures && !isPowerOfTwo(canvas)) {\n                        console.warn('GLTFExporter: Resized non-power-of-two image.', image);\n                        canvas.width = THREE.MathUtils.floorPowerOfTwo(canvas.width);\n                        canvas.height = THREE.MathUtils.floorPowerOfTwo(canvas.height);\n                    }\n                    var ctx = canvas.getContext('2d');\n                    if (flipY === true) {\n                        ctx.translate(0, canvas.height);\n                        ctx.scale(1, -1);\n                    }\n                    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n                    if (options.binary === true) {\n                        pending.push(new Promise(function (resolve) {\n                            canvas.toBlob(function (blob) {\n                                processBufferViewImage(blob).then(function (bufferViewIndex) {\n                                    gltfImage.bufferView = bufferViewIndex;\n                                    resolve();\n                                });\n                            }, mimeType);\n                        }));\n                    } else {\n                        gltfImage.uri = canvas.toDataURL(mimeType);\n                    }\n                } else {\n                    gltfImage.uri = image.src;\n                }\n                outputJSON.images.push(gltfImage);\n                var index = outputJSON.images.length - 1;\n                cachedImages[key] = index;\n                return index;\n            }\n            function processSampler(map) {\n                if (!outputJSON.samplers) {\n                    outputJSON.samplers = [];\n                }\n                var gltfSampler = {\n                    magFilter: THREE_TO_WEBGL[map.magFilter],\n                    minFilter: THREE_TO_WEBGL[map.minFilter],\n                    wrapS: THREE_TO_WEBGL[map.wrapS],\n                    wrapT: THREE_TO_WEBGL[map.wrapT]\n                };\n                outputJSON.samplers.push(gltfSampler);\n                return outputJSON.samplers.length - 1;\n            }\n            function processTexture(map) {\n                if (cachedData.textures.has(map)) {\n                    return cachedData.textures.get(map);\n                }\n                if (!outputJSON.textures) {\n                    outputJSON.textures = [];\n                }\n                var gltfTexture = {\n                    sampler: processSampler(map),\n                    source: processImage(map.image, map.format, map.flipY)\n                };\n                if (map.name) {\n                    gltfTexture.name = map.name;\n                }\n                outputJSON.textures.push(gltfTexture);\n                var index = outputJSON.textures.length - 1;\n                cachedData.textures.set(map, index);\n                return index;\n            }\n            function processMaterial(material) {\n                if (cachedData.materials.has(material)) {\n                    return cachedData.materials.get(material);\n                }\n                if (material.isShaderMaterial) {\n                    console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n                    return null;\n                }\n                if (!outputJSON.materials) {\n                    outputJSON.materials = [];\n                }\n                var gltfMaterial = { pbrMetallicRoughness: {} };\n                if (material.isMeshBasicMaterial) {\n                    gltfMaterial.extensions = { KHR_materials_unlit: {} };\n                    extensionsUsed['KHR_materials_unlit'] = true;\n                } else if (material.isGLTFSpecularGlossinessMaterial) {\n                    gltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\n                    extensionsUsed['KHR_materials_pbrSpecularGlossiness'] = true;\n                } else if (!material.isMeshStandardMaterial) {\n                    console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n                }\n                var color = material.color.toArray().concat([material.opacity]);\n                if (!equalArray(color, [\n                        1,\n                        1,\n                        1,\n                        1\n                    ])) {\n                    gltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n                }\n                if (material.isMeshStandardMaterial) {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n                } else if (material.isMeshBasicMaterial) {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n                } else {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n                }\n                if (material.isGLTFSpecularGlossinessMaterial) {\n                    if (gltfMaterial.pbrMetallicRoughness.baseColorFactor) {\n                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n                    }\n                    var specularFactor = [\n                        1,\n                        1,\n                        1\n                    ];\n                    material.specular.toArray(specularFactor, 0);\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n                }\n                if (material.metalnessMap || material.roughnessMap) {\n                    if (material.metalnessMap === material.roughnessMap) {\n                        var metalRoughMapDef = { index: processTexture(material.metalnessMap) };\n                        applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n                        gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n                    } else {\n                        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n                    }\n                }\n                if (material.map) {\n                    var baseColorMapDef = { index: processTexture(material.map) };\n                    applyTextureTransform(baseColorMapDef, material.map);\n                    if (material.isGLTFSpecularGlossinessMaterial) {\n                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n                    }\n                    gltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n                }\n                if (material.isGLTFSpecularGlossinessMaterial && material.specularMap) {\n                    var specularMapDef = { index: processTexture(material.specularMap) };\n                    applyTextureTransform(specularMapDef, material.specularMap);\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n                }\n                if (material.emissive) {\n                    var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();\n                    if (!equalArray(emissive, [\n                            0,\n                            0,\n                            0\n                        ])) {\n                        gltfMaterial.emissiveFactor = emissive;\n                    }\n                    if (material.emissiveMap) {\n                        var emissiveMapDef = { index: processTexture(material.emissiveMap) };\n                        applyTextureTransform(emissiveMapDef, material.emissiveMap);\n                        gltfMaterial.emissiveTexture = emissiveMapDef;\n                    }\n                }\n                if (material.normalMap) {\n                    var normalMapDef = { index: processTexture(material.normalMap) };\n                    if (material.normalScale && material.normalScale.x !== -1) {\n                        if (material.normalScale.x !== material.normalScale.y) {\n                            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');\n                        }\n                        normalMapDef.scale = material.normalScale.x;\n                    }\n                    applyTextureTransform(normalMapDef, material.normalMap);\n                    gltfMaterial.normalTexture = normalMapDef;\n                }\n                if (material.aoMap) {\n                    var occlusionMapDef = {\n                        index: processTexture(material.aoMap),\n                        texCoord: 1\n                    };\n                    if (material.aoMapIntensity !== 1) {\n                        occlusionMapDef.strength = material.aoMapIntensity;\n                    }\n                    applyTextureTransform(occlusionMapDef, material.aoMap);\n                    gltfMaterial.occlusionTexture = occlusionMapDef;\n                }\n                if (material.transparent) {\n                    gltfMaterial.alphaMode = 'BLEND';\n                } else {\n                    if (material.alphaTest > 0) {\n                        gltfMaterial.alphaMode = 'MASK';\n                        gltfMaterial.alphaCutoff = material.alphaTest;\n                    }\n                }\n                if (material.side === THREE.DoubleSide) {\n                    gltfMaterial.doubleSided = true;\n                }\n                if (material.name !== '') {\n                    gltfMaterial.name = material.name;\n                }\n                serializeUserData(material, gltfMaterial);\n                outputJSON.materials.push(gltfMaterial);\n                var index = outputJSON.materials.length - 1;\n                cachedData.materials.set(material, index);\n                return index;\n            }\n            function processMesh(mesh) {\n                var meshCacheKeyParts = [mesh.geometry.uuid];\n                if (Array.isArray(mesh.material)) {\n                    for (var i = 0, l = mesh.material.length; i < l; i++) {\n                        meshCacheKeyParts.push(mesh.material[i].uuid);\n                    }\n                } else {\n                    meshCacheKeyParts.push(mesh.material.uuid);\n                }\n                var meshCacheKey = meshCacheKeyParts.join(':');\n                if (cachedData.meshes.has(meshCacheKey)) {\n                    return cachedData.meshes.get(meshCacheKey);\n                }\n                var geometry = mesh.geometry;\n                var mode;\n                if (mesh.isLineSegments) {\n                    mode = WEBGL_CONSTANTS.LINES;\n                } else if (mesh.isLineLoop) {\n                    mode = WEBGL_CONSTANTS.LINE_LOOP;\n                } else if (mesh.isLine) {\n                    mode = WEBGL_CONSTANTS.LINE_STRIP;\n                } else if (mesh.isPoints) {\n                    mode = WEBGL_CONSTANTS.POINTS;\n                } else {\n                    mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n                }\n                if (!geometry.isBufferGeometry) {\n                    console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.');\n                    geometry = new THREE.BufferGeometry().setFromObject(mesh);\n                }\n                var gltfMesh = {};\n                var attributes = {};\n                var primitives = [];\n                var targets = [];\n                var nameConversion = {\n                    uv: 'TEXCOORD_0',\n                    uv2: 'TEXCOORD_1',\n                    color: 'COLOR_0',\n                    skinWeight: 'WEIGHTS_0',\n                    skinIndex: 'JOINTS_0'\n                };\n                var originalNormal = geometry.getAttribute('normal');\n                if (originalNormal !== undefined && !isNormalizedNormalAttribute(originalNormal)) {\n                    console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n                    geometry.setAttribute('normal', createNormalizedNormalAttribute(originalNormal));\n                }\n                var modifiedAttribute = null;\n                for (var attributeName in geometry.attributes) {\n                    if (attributeName.substr(0, 5) === 'morph')\n                        continue;\n                    var attribute = geometry.attributes[attributeName];\n                    attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n                    var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n                    if (!validVertexAttributes.test(attributeName)) {\n                        attributeName = '_' + attributeName;\n                    }\n                    if (cachedData.attributes.has(getUID(attribute))) {\n                        attributes[attributeName] = cachedData.attributes.get(getUID(attribute));\n                        continue;\n                    }\n                    modifiedAttribute = null;\n                    var array = attribute.array;\n                    if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n                        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n                        modifiedAttribute = new THREE.BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n                    }\n                    var accessor = processAccessor(modifiedAttribute || attribute, geometry);\n                    if (accessor !== null) {\n                        attributes[attributeName] = accessor;\n                        cachedData.attributes.set(getUID(attribute), accessor);\n                    }\n                }\n                if (originalNormal !== undefined)\n                    geometry.setAttribute('normal', originalNormal);\n                if (Object.keys(attributes).length === 0) {\n                    return null;\n                }\n                if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n                    var weights = [];\n                    var targetNames = [];\n                    var reverseDictionary = {};\n                    if (mesh.morphTargetDictionary !== undefined) {\n                        for (var key in mesh.morphTargetDictionary) {\n                            reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n                        }\n                    }\n                    for (var i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n                        var target = {};\n                        var warned = false;\n                        for (var attributeName in geometry.morphAttributes) {\n                            if (attributeName !== 'position' && attributeName !== 'normal') {\n                                if (!warned) {\n                                    console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n                                    warned = true;\n                                }\n                                continue;\n                            }\n                            var attribute = geometry.morphAttributes[attributeName][i];\n                            var gltfAttributeName = attributeName.toUpperCase();\n                            var baseAttribute = geometry.attributes[attributeName];\n                            if (cachedData.attributes.has(getUID(attribute))) {\n                                target[gltfAttributeName] = cachedData.attributes.get(getUID(attribute));\n                                continue;\n                            }\n                            var relativeAttribute = attribute.clone();\n                            if (!geometry.morphTargetsRelative) {\n                                for (var j = 0, jl = attribute.count; j < jl; j++) {\n                                    relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n                                }\n                            }\n                            target[gltfAttributeName] = processAccessor(relativeAttribute, geometry);\n                            cachedData.attributes.set(getUID(baseAttribute), target[gltfAttributeName]);\n                        }\n                        targets.push(target);\n                        weights.push(mesh.morphTargetInfluences[i]);\n                        if (mesh.morphTargetDictionary !== undefined)\n                            targetNames.push(reverseDictionary[i]);\n                    }\n                    gltfMesh.weights = weights;\n                    if (targetNames.length > 0) {\n                        gltfMesh.extras = {};\n                        gltfMesh.extras.targetNames = targetNames;\n                    }\n                }\n                var forceIndices = options.forceIndices;\n                var isMultiMaterial = Array.isArray(mesh.material);\n                if (isMultiMaterial && geometry.groups.length === 0)\n                    return null;\n                if (!forceIndices && geometry.index === null && isMultiMaterial) {\n                    console.warn('THREE.GLTFExporter: Creating index for non-indexed multi-material mesh.');\n                    forceIndices = true;\n                }\n                var didForceIndices = false;\n                if (geometry.index === null && forceIndices) {\n                    var indices = [];\n                    for (var i = 0, il = geometry.attributes.position.count; i < il; i++) {\n                        indices[i] = i;\n                    }\n                    geometry.setIndex(indices);\n                    didForceIndices = true;\n                }\n                var materials = isMultiMaterial ? mesh.material : [mesh.material];\n                var groups = isMultiMaterial ? geometry.groups : [{\n                        materialIndex: 0,\n                        start: undefined,\n                        count: undefined\n                    }];\n                for (var i = 0, il = groups.length; i < il; i++) {\n                    var primitive = {\n                        mode: mode,\n                        attributes: attributes\n                    };\n                    serializeUserData(geometry, primitive);\n                    if (targets.length > 0)\n                        primitive.targets = targets;\n                    if (geometry.index !== null) {\n                        var cacheKey = getUID(geometry.index);\n                        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n                            cacheKey += ':' + groups[i].start + ':' + groups[i].count;\n                        }\n                        if (cachedData.attributes.has(cacheKey)) {\n                            primitive.indices = cachedData.attributes.get(cacheKey);\n                        } else {\n                            primitive.indices = processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n                            cachedData.attributes.set(cacheKey, primitive.indices);\n                        }\n                        if (primitive.indices === null)\n                            delete primitive.indices;\n                    }\n                    var material = processMaterial(materials[groups[i].materialIndex]);\n                    if (material !== null) {\n                        primitive.material = material;\n                    }\n                    primitives.push(primitive);\n                }\n                if (didForceIndices) {\n                    geometry.setIndex(null);\n                }\n                gltfMesh.primitives = primitives;\n                if (!outputJSON.meshes) {\n                    outputJSON.meshes = [];\n                }\n                outputJSON.meshes.push(gltfMesh);\n                var index = outputJSON.meshes.length - 1;\n                cachedData.meshes.set(meshCacheKey, index);\n                return index;\n            }\n            function processCamera(camera) {\n                if (!outputJSON.cameras) {\n                    outputJSON.cameras = [];\n                }\n                var isOrtho = camera.isOrthographicCamera;\n                var gltfCamera = { type: isOrtho ? 'orthographic' : 'perspective' };\n                if (isOrtho) {\n                    gltfCamera.orthographic = {\n                        xmag: camera.right * 2,\n                        ymag: camera.top * 2,\n                        zfar: camera.far <= 0 ? 0.001 : camera.far,\n                        znear: camera.near < 0 ? 0 : camera.near\n                    };\n                } else {\n                    gltfCamera.perspective = {\n                        aspectRatio: camera.aspect,\n                        yfov: THREE.MathUtils.degToRad(camera.fov),\n                        zfar: camera.far <= 0 ? 0.001 : camera.far,\n                        znear: camera.near < 0 ? 0 : camera.near\n                    };\n                }\n                if (camera.name !== '') {\n                    gltfCamera.name = camera.type;\n                }\n                outputJSON.cameras.push(gltfCamera);\n                return outputJSON.cameras.length - 1;\n            }\n            function processAnimation(clip, root) {\n                if (!outputJSON.animations) {\n                    outputJSON.animations = [];\n                }\n                clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n                var tracks = clip.tracks;\n                var channels = [];\n                var samplers = [];\n                for (var i = 0; i < tracks.length; ++i) {\n                    var track = tracks[i];\n                    var trackBinding = THREE.PropertyBinding.parseTrackName(track.name);\n                    var trackNode = THREE.PropertyBinding.findNode(root, trackBinding.nodeName);\n                    var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n                    if (trackBinding.objectName === 'bones') {\n                        if (trackNode.isSkinnedMesh === true) {\n                            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n                        } else {\n                            trackNode = undefined;\n                        }\n                    }\n                    if (!trackNode || !trackProperty) {\n                        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n                        return null;\n                    }\n                    var inputItemSize = 1;\n                    var outputItemSize = track.values.length / track.times.length;\n                    if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n                        outputItemSize /= trackNode.morphTargetInfluences.length;\n                    }\n                    var interpolation;\n                    if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n                        interpolation = 'CUBICSPLINE';\n                        outputItemSize /= 3;\n                    } else if (track.getInterpolation() === THREE.InterpolateDiscrete) {\n                        interpolation = 'STEP';\n                    } else {\n                        interpolation = 'LINEAR';\n                    }\n                    samplers.push({\n                        input: processAccessor(new THREE.BufferAttribute(track.times, inputItemSize)),\n                        output: processAccessor(new THREE.BufferAttribute(track.values, outputItemSize)),\n                        interpolation: interpolation\n                    });\n                    channels.push({\n                        sampler: samplers.length - 1,\n                        target: {\n                            node: nodeMap.get(trackNode),\n                            path: trackProperty\n                        }\n                    });\n                }\n                outputJSON.animations.push({\n                    name: clip.name || 'clip_' + outputJSON.animations.length,\n                    samplers: samplers,\n                    channels: channels\n                });\n                return outputJSON.animations.length - 1;\n            }\n            function processSkin(object) {\n                var node = outputJSON.nodes[nodeMap.get(object)];\n                var skeleton = object.skeleton;\n                if (skeleton === undefined)\n                    return null;\n                var rootJoint = object.skeleton.bones[0];\n                if (rootJoint === undefined)\n                    return null;\n                var joints = [];\n                var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n                for (var i = 0; i < skeleton.bones.length; ++i) {\n                    joints.push(nodeMap.get(skeleton.bones[i]));\n                    skeleton.boneInverses[i].toArray(inverseBindMatrices, i * 16);\n                }\n                if (outputJSON.skins === undefined) {\n                    outputJSON.skins = [];\n                }\n                outputJSON.skins.push({\n                    inverseBindMatrices: processAccessor(new THREE.BufferAttribute(inverseBindMatrices, 16)),\n                    joints: joints,\n                    skeleton: nodeMap.get(rootJoint)\n                });\n                var skinIndex = node.skin = outputJSON.skins.length - 1;\n                return skinIndex;\n            }\n            function processLight(light) {\n                var lightDef = {};\n                if (light.name)\n                    lightDef.name = light.name;\n                lightDef.color = light.color.toArray();\n                lightDef.intensity = light.intensity;\n                if (light.isDirectionalLight) {\n                    lightDef.type = 'directional';\n                } else if (light.isPointLight) {\n                    lightDef.type = 'point';\n                    if (light.distance > 0)\n                        lightDef.range = light.distance;\n                } else if (light.isSpotLight) {\n                    lightDef.type = 'spot';\n                    if (light.distance > 0)\n                        lightDef.range = light.distance;\n                    lightDef.spot = {};\n                    lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n                    lightDef.spot.outerConeAngle = light.angle;\n                }\n                if (light.decay !== undefined && light.decay !== 2) {\n                    console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n                }\n                if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n                    console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n                }\n                var lights = outputJSON.extensions['KHR_lights_punctual'].lights;\n                lights.push(lightDef);\n                return lights.length - 1;\n            }\n            function processNode(object) {\n                if (!outputJSON.nodes) {\n                    outputJSON.nodes = [];\n                }\n                var gltfNode = {};\n                if (options.trs) {\n                    var rotation = object.quaternion.toArray();\n                    var position = object.position.toArray();\n                    var scale = object.scale.toArray();\n                    if (!equalArray(rotation, [\n                            0,\n                            0,\n                            0,\n                            1\n                        ])) {\n                        gltfNode.rotation = rotation;\n                    }\n                    if (!equalArray(position, [\n                            0,\n                            0,\n                            0\n                        ])) {\n                        gltfNode.translation = position;\n                    }\n                    if (!equalArray(scale, [\n                            1,\n                            1,\n                            1\n                        ])) {\n                        gltfNode.scale = scale;\n                    }\n                } else {\n                    if (object.matrixAutoUpdate) {\n                        object.updateMatrix();\n                    }\n                    if (!equalArray(object.matrix.elements, [\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1\n                        ])) {\n                        gltfNode.matrix = object.matrix.elements;\n                    }\n                }\n                if (object.name !== '') {\n                    gltfNode.name = String(object.name);\n                }\n                serializeUserData(object, gltfNode);\n                if (object.isMesh || object.isLine || object.isPoints) {\n                    var mesh = processMesh(object);\n                    if (mesh !== null) {\n                        gltfNode.mesh = mesh;\n                    }\n                } else if (object.isCamera) {\n                    gltfNode.camera = processCamera(object);\n                } else if (object.isDirectionalLight || object.isPointLight || object.isSpotLight) {\n                    if (!extensionsUsed['KHR_lights_punctual']) {\n                        outputJSON.extensions = outputJSON.extensions || {};\n                        outputJSON.extensions['KHR_lights_punctual'] = { lights: [] };\n                        extensionsUsed['KHR_lights_punctual'] = true;\n                    }\n                    gltfNode.extensions = gltfNode.extensions || {};\n                    gltfNode.extensions['KHR_lights_punctual'] = { light: processLight(object) };\n                } else if (object.isLight) {\n                    console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object);\n                    return null;\n                }\n                if (object.isSkinnedMesh) {\n                    skins.push(object);\n                }\n                if (object.children.length > 0) {\n                    var children = [];\n                    for (var i = 0, l = object.children.length; i < l; i++) {\n                        var child = object.children[i];\n                        if (child.visible || options.onlyVisible === false) {\n                            var node = processNode(child);\n                            if (node !== null) {\n                                children.push(node);\n                            }\n                        }\n                    }\n                    if (children.length > 0) {\n                        gltfNode.children = children;\n                    }\n                }\n                outputJSON.nodes.push(gltfNode);\n                var nodeIndex = outputJSON.nodes.length - 1;\n                nodeMap.set(object, nodeIndex);\n                return nodeIndex;\n            }\n            function processScene(scene) {\n                if (!outputJSON.scenes) {\n                    outputJSON.scenes = [];\n                    outputJSON.scene = 0;\n                }\n                var gltfScene = {};\n                if (scene.name !== '') {\n                    gltfScene.name = scene.name;\n                }\n                outputJSON.scenes.push(gltfScene);\n                var nodes = [];\n                for (var i = 0, l = scene.children.length; i < l; i++) {\n                    var child = scene.children[i];\n                    if (child.visible || options.onlyVisible === false) {\n                        var node = processNode(child);\n                        if (node !== null) {\n                            nodes.push(node);\n                        }\n                    }\n                }\n                if (nodes.length > 0) {\n                    gltfScene.nodes = nodes;\n                }\n                serializeUserData(scene, gltfScene);\n            }\n            function processObjects(objects) {\n                var scene = new THREE.Scene();\n                scene.name = 'AuxScene';\n                for (var i = 0; i < objects.length; i++) {\n                    scene.children.push(objects[i]);\n                }\n                processScene(scene);\n            }\n            function processInput(input) {\n                input = input instanceof Array ? input : [input];\n                var objectsWithoutScene = [];\n                for (var i = 0; i < input.length; i++) {\n                    if (input[i] instanceof THREE.Scene) {\n                        processScene(input[i]);\n                    } else {\n                        objectsWithoutScene.push(input[i]);\n                    }\n                }\n                if (objectsWithoutScene.length > 0) {\n                    processObjects(objectsWithoutScene);\n                }\n                for (var i = 0; i < skins.length; ++i) {\n                    processSkin(skins[i]);\n                }\n                for (var i = 0; i < options.animations.length; ++i) {\n                    processAnimation(options.animations[i], input[0]);\n                }\n            }\n            processInput(input);\n            Promise.all(pending).then(function () {\n                var blob = new Blob(buffers, { type: 'application/octet-stream' });\n                var extensionsUsedList = Object.keys(extensionsUsed);\n                if (extensionsUsedList.length > 0)\n                    outputJSON.extensionsUsed = extensionsUsedList;\n                if (outputJSON.buffers && outputJSON.buffers.length > 0)\n                    outputJSON.buffers[0].byteLength = blob.size;\n                if (options.binary === true) {\n                    var GLB_HEADER_BYTES = 12;\n                    var GLB_HEADER_MAGIC = 1179937895;\n                    var GLB_VERSION = 2;\n                    var GLB_CHUNK_PREFIX_BYTES = 8;\n                    var GLB_CHUNK_TYPE_JSON = 1313821514;\n                    var GLB_CHUNK_TYPE_BIN = 5130562;\n                    var reader = new window.FileReader();\n                    reader.readAsArrayBuffer(blob);\n                    reader.onloadend = function () {\n                        var binaryChunk = getPaddedArrayBuffer(reader.result);\n                        var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n                        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n                        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n                        var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)), 32);\n                        var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n                        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n                        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n                        var header = new ArrayBuffer(GLB_HEADER_BYTES);\n                        var headerView = new DataView(header);\n                        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n                        headerView.setUint32(4, GLB_VERSION, true);\n                        var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n                        headerView.setUint32(8, totalByteLength, true);\n                        var glbBlob = new Blob([\n                            header,\n                            jsonChunkPrefix,\n                            jsonChunk,\n                            binaryChunkPrefix,\n                            binaryChunk\n                        ], { type: 'application/octet-stream' });\n                        var glbReader = new window.FileReader();\n                        glbReader.readAsArrayBuffer(glbBlob);\n                        glbReader.onloadend = function () {\n                            onDone(glbReader.result);\n                        };\n                    };\n                } else {\n                    if (outputJSON.buffers && outputJSON.buffers.length > 0) {\n                        var reader = new window.FileReader();\n                        reader.readAsDataURL(blob);\n                        reader.onloadend = function () {\n                            var base64data = reader.result;\n                            outputJSON.buffers[0].uri = base64data;\n                            onDone(outputJSON);\n                        };\n                    } else {\n                        onDone(outputJSON);\n                    }\n                }\n            });\n        }\n    };\n    GLTFExporter.Utils = {\n        insertKeyframe: function (track, time) {\n            var tolerance = 0.001;\n            var valueSize = track.getValueSize();\n            var times = new track.TimeBufferType(track.times.length + 1);\n            var values = new track.ValueBufferType(track.values.length + valueSize);\n            var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n            var index;\n            if (track.times.length === 0) {\n                times[0] = time;\n                for (var i = 0; i < valueSize; i++) {\n                    values[i] = 0;\n                }\n                index = 0;\n            } else if (time < track.times[0]) {\n                if (Math.abs(track.times[0] - time) < tolerance)\n                    return 0;\n                times[0] = time;\n                times.set(track.times, 1);\n                values.set(interpolant.evaluate(time), 0);\n                values.set(track.values, valueSize);\n                index = 0;\n            } else if (time > track.times[track.times.length - 1]) {\n                if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n                    return track.times.length - 1;\n                }\n                times[times.length - 1] = time;\n                times.set(track.times, 0);\n                values.set(track.values, 0);\n                values.set(interpolant.evaluate(time), track.values.length);\n                index = times.length - 1;\n            } else {\n                for (var i = 0; i < track.times.length; i++) {\n                    if (Math.abs(track.times[i] - time) < tolerance)\n                        return i;\n                    if (track.times[i] < time && track.times[i + 1] > time) {\n                        times.set(track.times.slice(0, i + 1), 0);\n                        times[i + 1] = time;\n                        times.set(track.times.slice(i + 1), i + 2);\n                        values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n                        values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n                        values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n                        index = i + 1;\n                        break;\n                    }\n                }\n            }\n            track.times = times;\n            track.values = values;\n            return index;\n        },\n        mergeMorphTargetTracks: function (clip, root) {\n            var tracks = [];\n            var mergedTracks = {};\n            var sourceTracks = clip.tracks;\n            for (var i = 0; i < sourceTracks.length; ++i) {\n                var sourceTrack = sourceTracks[i];\n                var sourceTrackBinding = THREE.PropertyBinding.parseTrackName(sourceTrack.name);\n                var sourceTrackNode = THREE.PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n                if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n                    tracks.push(sourceTrack);\n                    continue;\n                }\n                if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n                    if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n                        throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n                    }\n                    console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n                    sourceTrack = sourceTrack.clone();\n                    sourceTrack.setInterpolation(THREE.InterpolateLinear);\n                }\n                var targetCount = sourceTrackNode.morphTargetInfluences.length;\n                var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n                if (targetIndex === undefined) {\n                    throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n                }\n                var mergedTrack;\n                if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n                    mergedTrack = sourceTrack.clone();\n                    var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n                    for (var j = 0; j < mergedTrack.times.length; j++) {\n                        values[j * targetCount + targetIndex] = mergedTrack.values[j];\n                    }\n                    mergedTrack.name = '.morphTargetInfluences';\n                    mergedTrack.values = values;\n                    mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n                    tracks.push(mergedTrack);\n                    continue;\n                }\n                var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n                mergedTrack = mergedTracks[sourceTrackNode.uuid];\n                for (var j = 0; j < mergedTrack.times.length; j++) {\n                    mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n                }\n                for (var j = 0; j < sourceTrack.times.length; j++) {\n                    var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n                    mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n                }\n            }\n            clip.tracks = tracks;\n            return clip;\n        }\n    };\n    return GLTFExporter;\n});\ndefine('skylark-threejs-ex/exporters/ColladaExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var ColladaExporter = function () {\n    };\n    ColladaExporter.prototype = {\n        constructor: ColladaExporter,\n        parse: function (object, onDone, options) {\n            options = options || {};\n            options = Object.assign({\n                version: '1.4.1',\n                author: null,\n                textureDirectory: ''\n            }, options);\n            if (options.textureDirectory !== '') {\n                options.textureDirectory = `${ options.textureDirectory }/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n            }\n            var version = options.version;\n            if (version !== '1.4.1' && version !== '1.5.0') {\n                console.warn(`ColladaExporter : Version ${ version } not supported for export. Only 1.4.1 and 1.5.0.`);\n                return null;\n            }\n            function format(urdf) {\n                var IS_END_TAG = /^<\\//;\n                var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n                var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n                var pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n                var tagnum = 0;\n                return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(tag => {\n                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n                        tagnum--;\n                    }\n                    var res = `${ pad('  ', tagnum) }${ tag }`;\n                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n                        tagnum++;\n                    }\n                    return res;\n                }).join('\\n');\n            }\n            function base64ToBuffer(str) {\n                var b = atob(str);\n                var buf = new Uint8Array(b.length);\n                for (var i = 0, l = buf.length; i < l; i++) {\n                    buf[i] = b.charCodeAt(i);\n                }\n                return buf;\n            }\n            var canvas, ctx;\n            function imageToData(image, ext) {\n                canvas = canvas || document.createElement('canvas');\n                ctx = ctx || canvas.getContext('2d');\n                canvas.width = image.naturalWidth;\n                canvas.height = image.naturalHeight;\n                ctx.drawImage(image, 0, 0);\n                var base64data = canvas.toDataURL(`image/${ ext }`, 1).replace(/^data:image\\/(png|jpg);base64,/, '');\n                return base64ToBuffer(base64data);\n            }\n            var getFuncs = [\n                'getX',\n                'getY',\n                'getZ',\n                'getW'\n            ];\n            function attrBufferToArray(attr) {\n                if (attr.isInterleavedBufferAttribute) {\n                    var arr = new attr.array.constructor(attr.count * attr.itemSize);\n                    var size = attr.itemSize;\n                    for (var i = 0, l = attr.count; i < l; i++) {\n                        for (var j = 0; j < size; j++) {\n                            arr[i * size + j] = attr[getFuncs[j]](i);\n                        }\n                    }\n                    return arr;\n                } else {\n                    return attr.array;\n                }\n            }\n            function subArray(arr, st, ct) {\n                if (Array.isArray(arr))\n                    return arr.slice(st, st + ct);\n                else\n                    return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n            }\n            function getAttribute(attr, name, params, type) {\n                var array = attrBufferToArray(attr);\n                var res = `<source id=\"${ name }\">` + `<float_array id=\"${ name }-array\" count=\"${ array.length }\">` + array.join(' ') + '</float_array>' + '<technique_common>' + `<accessor source=\"#${ name }-array\" count=\"${ Math.floor(array.length / attr.itemSize) }\" stride=\"${ attr.itemSize }\">` + params.map(n => `<param name=\"${ n }\" type=\"${ type }\" />`).join('') + '</accessor>' + '</technique_common>' + '</source>';\n                return res;\n            }\n            var transMat;\n            function getTransform(o) {\n                o.updateMatrix();\n                transMat = transMat || new THREE.Matrix4();\n                transMat.copy(o.matrix);\n                transMat.transpose();\n                return `<matrix>${ transMat.toArray().join(' ') }</matrix>`;\n            }\n            function processGeometry(g) {\n                var info = geometryInfo.get(g);\n                if (!info) {\n                    var bufferGeometry = g;\n                    if (bufferGeometry instanceof THREE.Geometry) {\n                        bufferGeometry = new THREE.BufferGeometry().fromGeometry(bufferGeometry);\n                    }\n                    var meshid = `Mesh${ libraryGeometries.length + 1 }`;\n                    var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n                    var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n                            start: 0,\n                            count: indexCount,\n                            materialIndex: 0\n                        }];\n                    var gname = g.name ? ` name=\"${ g.name }\"` : '';\n                    var gnode = `<geometry id=\"${ meshid }\"${ gname }><mesh>`;\n                    var posName = `${ meshid }-position`;\n                    var vertName = `${ meshid }-vertices`;\n                    gnode += getAttribute(bufferGeometry.attributes.position, posName, [\n                        'X',\n                        'Y',\n                        'Z'\n                    ], 'float');\n                    gnode += `<vertices id=\"${ vertName }\"><input semantic=\"POSITION\" source=\"#${ posName }\" /></vertices>`;\n                    var triangleInputs = `<input semantic=\"VERTEX\" source=\"#${ vertName }\" offset=\"0\" />`;\n                    if ('normal' in bufferGeometry.attributes) {\n                        var normName = `${ meshid }-normal`;\n                        gnode += getAttribute(bufferGeometry.attributes.normal, normName, [\n                            'X',\n                            'Y',\n                            'Z'\n                        ], 'float');\n                        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${ normName }\" offset=\"0\" />`;\n                    }\n                    if ('uv' in bufferGeometry.attributes) {\n                        var uvName = `${ meshid }-texcoord`;\n                        gnode += getAttribute(bufferGeometry.attributes.uv, uvName, [\n                            'S',\n                            'T'\n                        ], 'float');\n                        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${ uvName }\" offset=\"0\" set=\"0\" />`;\n                    }\n                    if ('color' in bufferGeometry.attributes) {\n                        var colName = `${ meshid }-color`;\n                        gnode += getAttribute(bufferGeometry.attributes.color, colName, [\n                            'X',\n                            'Y',\n                            'Z'\n                        ], 'uint8');\n                        triangleInputs += `<input semantic=\"COLOR\" source=\"#${ colName }\" offset=\"0\" />`;\n                    }\n                    var indexArray = null;\n                    if (bufferGeometry.index) {\n                        indexArray = attrBufferToArray(bufferGeometry.index);\n                    } else {\n                        indexArray = new Array(indexCount);\n                        for (var i = 0, l = indexArray.length; i < l; i++)\n                            indexArray[i] = i;\n                    }\n                    for (var i = 0, l = groups.length; i < l; i++) {\n                        var group = groups[i];\n                        var subarr = subArray(indexArray, group.start, group.count);\n                        var polycount = subarr.length / 3;\n                        gnode += `<triangles material=\"MESH_MATERIAL_${ group.materialIndex }\" count=\"${ polycount }\">`;\n                        gnode += triangleInputs;\n                        gnode += `<p>${ subarr.join(' ') }</p>`;\n                        gnode += '</triangles>';\n                    }\n                    gnode += `</mesh></geometry>`;\n                    libraryGeometries.push(gnode);\n                    info = {\n                        meshid: meshid,\n                        bufferGeometry: bufferGeometry\n                    };\n                    geometryInfo.set(g, info);\n                }\n                return info;\n            }\n            function processTexture(tex) {\n                var texid = imageMap.get(tex);\n                if (texid == null) {\n                    texid = `image-${ libraryImages.length + 1 }`;\n                    var ext = 'png';\n                    var name = tex.name || texid;\n                    var imageNode = `<image id=\"${ texid }\" name=\"${ name }\">`;\n                    if (version === '1.5.0') {\n                        imageNode += `<init_from><ref>${ options.textureDirectory }${ name }.${ ext }</ref></init_from>`;\n                    } else {\n                        imageNode += `<init_from>${ options.textureDirectory }${ name }.${ ext }</init_from>`;\n                    }\n                    imageNode += '</image>';\n                    libraryImages.push(imageNode);\n                    imageMap.set(tex, texid);\n                    textures.push({\n                        directory: options.textureDirectory,\n                        name,\n                        ext,\n                        data: imageToData(tex.image, ext),\n                        original: tex\n                    });\n                }\n                return texid;\n            }\n            function processMaterial(m) {\n                var matid = materialMap.get(m);\n                if (matid == null) {\n                    matid = `Mat${ libraryEffects.length + 1 }`;\n                    var type = 'phong';\n                    if (m instanceof THREE.MeshLambertMaterial) {\n                        type = 'lambert';\n                    } else if (m instanceof THREE.MeshBasicMaterial) {\n                        type = 'constant';\n                        if (m.map !== null) {\n                            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n                        }\n                    }\n                    var emissive = m.emissive ? m.emissive : new THREE.Color(0, 0, 0);\n                    var diffuse = m.color ? m.color : new THREE.Color(0, 0, 0);\n                    var specular = m.specular ? m.specular : new THREE.Color(1, 1, 1);\n                    var shininess = m.shininess || 0;\n                    var reflectivity = m.reflectivity || 0;\n                    var transparencyNode = '';\n                    if (m.transparent === true) {\n                        transparencyNode += `<transparent>` + (m.map ? `<texture texture=\"diffuse-sampler\"></texture>` : '<float>1</float>') + '</transparent>';\n                        if (m.opacity < 1) {\n                            transparencyNode += `<transparency><float>${ m.opacity }</float></transparency>`;\n                        }\n                    }\n                    var techniqueNode = `<technique sid=\"common\"><${ type }>` + '<emission>' + (m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${ emissive.r } ${ emissive.g } ${ emissive.b } 1</color>`) + '</emission>' + (type !== 'constant' ? '<diffuse>' + (m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color>`) + '</diffuse>' : '') + (type !== 'constant' ? '<bump>' + (m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : '') + '</bump>' : '') + (type === 'phong' ? `<specular><color sid=\"specular\">${ specular.r } ${ specular.g } ${ specular.b } 1</color></specular>` + '<shininess>' + (m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${ shininess }</float>`) + '</shininess>' : '') + `<reflective><color>${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color></reflective>` + `<reflectivity><float>${ reflectivity }</float></reflectivity>` + transparencyNode + `</${ type }></technique>`;\n                    var effectnode = `<effect id=\"${ matid }-effect\">` + '<profile_COMMON>' + (m.map ? '<newparam sid=\"diffuse-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.map) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>' : '') + (m.specularMap ? '<newparam sid=\"specular-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.specularMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>' : '') + (m.emissiveMap ? '<newparam sid=\"emissive-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.emissiveMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>' : '') + (m.normalMap ? '<newparam sid=\"bump-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.normalMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>' : '') + techniqueNode + (m.side === THREE.DoubleSide ? `<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>` : '') + '</profile_COMMON>' + '</effect>';\n                    var materialName = m.name ? ` name=\"${ m.name }\"` : '';\n                    var materialNode = `<material id=\"${ matid }\"${ materialName }><instance_effect url=\"#${ matid }-effect\" /></material>`;\n                    libraryMaterials.push(materialNode);\n                    libraryEffects.push(effectnode);\n                    materialMap.set(m, matid);\n                }\n                return matid;\n            }\n            function processObject(o) {\n                var node = `<node name=\"${ o.name }\">`;\n                node += getTransform(o);\n                if (o instanceof THREE.Mesh && o.geometry != null) {\n                    var geomInfo = processGeometry(o.geometry);\n                    var meshid = geomInfo.meshid;\n                    var geometry = geomInfo.bufferGeometry;\n                    var matids = null;\n                    var matidsArray = [];\n                    var mat = o.material || new THREE.MeshBasicMaterial();\n                    var materials = Array.isArray(mat) ? mat : [mat];\n                    if (geometry.groups.length > materials.length) {\n                        matidsArray = new Array(geometry.groups.length);\n                    } else {\n                        matidsArray = new Array(materials.length);\n                    }\n                    matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));\n                    node += `<instance_geometry url=\"#${ meshid }\">` + (matids != null ? '<bind_material><technique_common>' + matids.map((id, i) => `<instance_material symbol=\"MESH_MATERIAL_${ i }\" target=\"#${ id }\" >` + '<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" />' + '</instance_material>').join('') + '</technique_common></bind_material>' : '') + '</instance_geometry>';\n                }\n                o.children.forEach(c => node += processObject(c));\n                node += '</node>';\n                return node;\n            }\n            var geometryInfo = new WeakMap();\n            var materialMap = new WeakMap();\n            var imageMap = new WeakMap();\n            var textures = [];\n            var libraryImages = [];\n            var libraryGeometries = [];\n            var libraryEffects = [];\n            var libraryMaterials = [];\n            var libraryVisualScenes = processObject(object);\n            var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n            var dae = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>' + `<COLLADA xmlns=\"${ specLink }\" version=\"${ version }\">` + '<asset>' + ('<contributor>' + '<authoring_tool>three.js Collada Exporter</authoring_tool>' + (options.author !== null ? `<author>${ options.author }</author>` : '') + '</contributor>' + `<created>${ new Date().toISOString() }</created>` + `<modified>${ new Date().toISOString() }</modified>` + '<up_axis>Y_UP</up_axis>') + '</asset>';\n            dae += `<library_images>${ libraryImages.join('') }</library_images>`;\n            dae += `<library_effects>${ libraryEffects.join('') }</library_effects>`;\n            dae += `<library_materials>${ libraryMaterials.join('') }</library_materials>`;\n            dae += `<library_geometries>${ libraryGeometries.join('') }</library_geometries>`;\n            dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${ libraryVisualScenes }</visual_scene></library_visual_scenes>`;\n            dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n            dae += '</COLLADA>';\n            var res = {\n                data: format(dae),\n                textures\n            };\n            if (typeof onDone === 'function') {\n                requestAnimationFrame(() => onDone(res));\n            }\n            return res;\n        }\n    };\n    return ColladaExporter;\n});\ndefine('skylark-threejs-ex/exporters/PLYExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PLYExporter = function () {\n    };\n    PLYExporter.prototype = {\n        constructor: PLYExporter,\n        parse: function (object, onDone, options) {\n            if (onDone && typeof onDone === 'object') {\n                console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n                options = onDone;\n                onDone = undefined;\n            }\n            function traverseMeshes(cb) {\n                object.traverse(function (child) {\n                    if (child.isMesh === true) {\n                        var mesh = child;\n                        var geometry = mesh.geometry;\n                        if (geometry.isGeometry === true) {\n                            geometry = geomToBufferGeom.get(geometry);\n                        }\n                        if (geometry.isBufferGeometry === true) {\n                            if (geometry.getAttribute('position') !== undefined) {\n                                cb(mesh, geometry);\n                            }\n                        }\n                    }\n                });\n            }\n            var defaultOptions = {\n                binary: false,\n                excludeAttributes: [],\n                littleEndian: false\n            };\n            options = Object.assign(defaultOptions, options);\n            var excludeAttributes = options.excludeAttributes;\n            var geomToBufferGeom = new WeakMap();\n            var includeNormals = false;\n            var includeColors = false;\n            var includeUVs = false;\n            var vertexCount = 0;\n            var faceCount = 0;\n            object.traverse(function (child) {\n                if (child.isMesh === true) {\n                    var mesh = child;\n                    var geometry = mesh.geometry;\n                    if (geometry.isGeometry === true) {\n                        var bufferGeometry = geomToBufferGeom.get(geometry) || new THREE.BufferGeometry().setFromObject(mesh);\n                        geomToBufferGeom.set(geometry, bufferGeometry);\n                        geometry = bufferGeometry;\n                    }\n                    if (geometry.isBufferGeometry === true) {\n                        var vertices = geometry.getAttribute('position');\n                        var normals = geometry.getAttribute('normal');\n                        var uvs = geometry.getAttribute('uv');\n                        var colors = geometry.getAttribute('color');\n                        var indices = geometry.getIndex();\n                        if (vertices === undefined) {\n                            return;\n                        }\n                        vertexCount += vertices.count;\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n                        if (normals !== undefined)\n                            includeNormals = true;\n                        if (uvs !== undefined)\n                            includeUVs = true;\n                        if (colors !== undefined)\n                            includeColors = true;\n                    }\n                }\n            });\n            var includeIndices = excludeAttributes.indexOf('index') === -1;\n            includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;\n            includeColors = includeColors && excludeAttributes.indexOf('color') === -1;\n            includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;\n            if (includeIndices && faceCount !== Math.floor(faceCount)) {\n                console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n                return null;\n            }\n            var indexByteCount = 4;\n            var header = 'ply\\n' + `format ${ options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii' } 1.0\\n` + `element vertex ${ vertexCount }\\n` + 'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n            if (includeNormals === true) {\n                header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n            }\n            if (includeUVs === true) {\n                header += 'property float s\\n' + 'property float t\\n';\n            }\n            if (includeColors === true) {\n                header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n            }\n            if (includeIndices === true) {\n                header += `element face ${ faceCount }\\n` + `property list uchar int vertex_index\\n`;\n            }\n            header += 'end_header\\n';\n            var vertex = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            var result = null;\n            if (options.binary === true) {\n                var headerBin = new TextEncoder().encode(header);\n                var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\n                var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n                var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n                new Uint8Array(output.buffer).set(headerBin, 0);\n                var vOffset = headerBin.length;\n                var fOffset = headerBin.length + vertexListLength;\n                var writtenVertices = 0;\n                traverseMeshes(function (mesh, geometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var colors = geometry.getAttribute('color');\n                    var indices = geometry.getIndex();\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                    for (var i = 0, l = vertices.count; i < l; i++) {\n                        vertex.x = vertices.getX(i);\n                        vertex.y = vertices.getY(i);\n                        vertex.z = vertices.getZ(i);\n                        vertex.applyMatrix4(mesh.matrixWorld);\n                        output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                        vOffset += 4;\n                        output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                        vOffset += 4;\n                        output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                        vOffset += 4;\n                        if (includeNormals === true) {\n                            if (normals != null) {\n                                vertex.x = normals.getX(i);\n                                vertex.y = normals.getY(i);\n                                vertex.z = normals.getZ(i);\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                                output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                                vOffset += 4;\n                            } else {\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                            }\n                        }\n                        if (includeUVs === true) {\n                            if (uvs != null) {\n                                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n                                vOffset += 4;\n                            } else if (includeUVs !== false) {\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                            }\n                        }\n                        if (includeColors === true) {\n                            if (colors != null) {\n                                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n                                vOffset += 1;\n                                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n                                vOffset += 1;\n                                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n                                vOffset += 1;\n                            } else {\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                            }\n                        }\n                    }\n                    if (includeIndices === true) {\n                        if (indices !== null) {\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\n                                output.setUint8(fOffset, 3);\n                                fOffset += 1;\n                                output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                            }\n                        } else {\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\n                                output.setUint8(fOffset, 3);\n                                fOffset += 1;\n                                output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n                                fOffset += indexByteCount;\n                            }\n                        }\n                    }\n                    writtenVertices += vertices.count;\n                });\n                result = output.buffer;\n            } else {\n                var writtenVertices = 0;\n                var vertexList = '';\n                var faceList = '';\n                traverseMeshes(function (mesh, geometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var colors = geometry.getAttribute('color');\n                    var indices = geometry.getIndex();\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                    for (var i = 0, l = vertices.count; i < l; i++) {\n                        vertex.x = vertices.getX(i);\n                        vertex.y = vertices.getY(i);\n                        vertex.z = vertices.getZ(i);\n                        vertex.applyMatrix4(mesh.matrixWorld);\n                        var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n                        if (includeNormals === true) {\n                            if (normals != null) {\n                                vertex.x = normals.getX(i);\n                                vertex.y = normals.getY(i);\n                                vertex.z = normals.getZ(i);\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n                            } else {\n                                line += ' 0 0 0';\n                            }\n                        }\n                        if (includeUVs === true) {\n                            if (uvs != null) {\n                                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n                            } else if (includeUVs !== false) {\n                                line += ' 0 0';\n                            }\n                        }\n                        if (includeColors === true) {\n                            if (colors != null) {\n                                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n                            } else {\n                                line += ' 255 255 255';\n                            }\n                        }\n                        vertexList += line + '\\n';\n                    }\n                    if (includeIndices === true) {\n                        if (indices !== null) {\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\n                                faceList += `3 ${ indices.getX(i + 0) + writtenVertices }`;\n                                faceList += ` ${ indices.getX(i + 1) + writtenVertices }`;\n                                faceList += ` ${ indices.getX(i + 2) + writtenVertices }\\n`;\n                            }\n                        } else {\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\n                                faceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\\n`;\n                            }\n                        }\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n                    }\n                    writtenVertices += vertices.count;\n                });\n                result = `${ header }${ vertexList }${ includeIndices ? `${ faceList }\\n` : '\\n' }`;\n            }\n            if (typeof onDone === 'function')\n                requestAnimationFrame(() => onDone(result));\n            return result;\n        }\n    };\n    \n    return PLYExporter;\n});\ndefine('skylark-threejs-ex/main',[\r\n\t\"skylark-threejs\",\r\n\r\n\t\"./shaders/CopyShader\",\r\n\t\"./shaders/BokehShader\",\r\n\t\"./shaders/SAOShader\",\r\n\t\"./shaders/DepthLimitedBlurShader\",\r\n\t\"./shaders/UnpackDepthRGBAShader\",\r\n\t\"./shaders/ConvolutionShader\",\r\n\t\"./shaders/LuminosityHighPassShader\",\r\n\t\"./shaders/FXAAShader\",\r\n\t\"./shaders/SSAOShader\",\r\n\t\"./shaders/FilmShader\",\r\n\t\"./shaders/DotScreenShader\",\r\n\t\"./shaders/LuminosityShader\",\r\n\t\"./shaders/SobelOperatorShader\",\r\n\t\"./shaders/ColorifyShader\",\r\n\t\"./shaders/ToneMapShader\",\r\n\t\"./shaders/TechnicolorShader\",\r\n\t\"./shaders/HueSaturationShader\",\r\n\r\n\t\"./postprocessing/EffectComposer\",\r\n\t\"./postprocessing/RenderPass\",\r\n\t\"./postprocessing/ShaderPass\",\r\n\t\"./postprocessing/MaskPass\",\r\n\r\n\t\"./curves/NURBSCurve\",\r\n\t\"./curves/NURBSSurface\",\r\n\t\"./curves/NURBSUtils\",\r\n\r\n\t\"./objects/Lensflare\",\r\n\t\"./objects/Reflector\",\r\n\t\"./objects/Refractor\",\r\n\r\n\t\"./loaders/TTFLoader\",\r\n//\t\"./loaders/LoaderSupport\",\r\n\t\"./loaders/3MFLoader\",\r\n\t\"./loaders/AMFLoader\",\r\n//\t\"./loaders/AssimpJSONLoader\",\r\n\t\"./loaders/AssimpLoader\",\r\n//\t\"./loaders/AWDLoader\",\r\n//\t\"./loaders/BabylonLoader\",\r\n\t\"./loaders/ColladaLoader\",\r\n\t\"./loaders/DRACOLoader\",\r\n\t\"./loaders/FBXLoader\",\r\n\t\"./loaders/GCodeLoader\",\r\n\t\"./loaders/GLTFLoader\",\r\n\t\"./loaders/MTLLoader\",\r\n\t\"./loaders/OBJLoader\",\r\n//\t\"./loaders/OBJLoader2\",\r\n\t\"./loaders/PCDLoader\",\r\n\t\"./loaders/PLYLoader\",\r\n\t\"./loaders/PRWMLoader\",\r\n\t\"./loaders/STLLoader\",\r\n\t\"./loaders/SVGLoader\",\r\n\t\"./loaders/TDSLoader\",\r\n//\t\"./loaders/VRMLLoader\",\r\n\t\"./loaders/VTKLoader\",\r\n\t\"./loaders/XLoader\",\r\n\t\"./loaders/DDSLoader\",\r\n\t\"./loaders/PVRLoader\",\r\n\t\"./loaders/TGALoader\",\r\n\t\"./loaders/KTXLoader\",\r\n\r\n\t\"./modifiers/SimplifyModifier\",\r\n\t\"./modifiers/SubdivisionModifier\",\r\n\r\n\t\"./exporters/DRACOExporter\",\r\n\t\"./exporters/OBJExporter\",\r\n\t\"./exporters/STLExporter\",\r\n\t\"./exporters/GLTFExporter\",\r\n\t\"./exporters/ColladaExporter\",\r\n\t\"./exporters/PLYExporter\"\r\n\r\n],function(THREE){\r\n\treturn THREE;\r\n});\ndefine('skylark-threejs-ex', ['skylark-threejs-ex/main'], function (main) { return main; });\n\n"]}