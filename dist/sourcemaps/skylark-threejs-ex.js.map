{"version":3,"sources":["skylark-threejs-ex.js"],"names":["define","CopyShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader","BokehShader","defines","DEPTH_PACKING","PERSPECTIVE_CAMERA","tColor","tDepth","focus","aspect","aperture","maxblur","nearClip","farClip","THREE","SAOShader","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","tNormal","size","Vector2","cameraNear","cameraFar","cameraProjectionMatrix","Matrix4","cameraInverseProjectionMatrix","scale","intensity","bias","minResolution","kernelRadius","randomSeed","DepthLimitedBlurShader","KERNEL_RADIUS","sampleUvOffsets","sampleWeights","depthCutoff","BlurShaderUtils","createSampleWeights","stdDev","gaussian","x","Math","exp","sqrt","PI","weights","i","push","createSampleOffsets","uvIncrement","offsets","clone","multiplyScalar","configure","material","needsUpdate","UnpackDepthRGBAShader","ConvolutionShader","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","uImageIncrement","cKernel","buildKernel","sigma","gauss","values","sum","halfWidth","kernelSize","ceil","Array","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","FXAAShader","resolution","SSAOShader","KERNEL_SIZE","tNoise","kernel","minDistance","maxDistance","SSAODepthShader","SSAOBlurShader","FilmShader","time","nIntensity","sIntensity","sCount","grayscale","DotScreenShader","tSize","center","angle","LuminosityShader","SobelOperatorShader","ColorifyShader","color","ToneMapShader","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","TechnicolorShader","HueSaturationShader","hue","saturation","Pass","this","enabled","needsSwap","clear","renderToScreen","camera","geometry","FullScreenQuad","Object","assign","prototype","setSize","render","console","error","OrthographicCamera","PlaneBufferGeometry","_mesh","Mesh","defineProperty","get","set","dispose","renderer","ShaderPass","shader","textureID","call","undefined","ShaderMaterial","UniformsUtils","fsQuad","create","constructor","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","inverse","writeValue","clearValue","context","getContext","state","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","insertPass","index","splice","isLastEnabledPass","passIndex","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","ClearMaskPass","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","autoClear","getClearColor","getHex","getClearAlpha","setClearColor","NURBSUtils","findSpan","p","u","U","n","low","high","mid","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","Vector4","point","Nj","wNj","w","y","z","calcBasisFunctionDerivatives","zeroArr","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","Vector3","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","NURBSCurve","degree","knots","controlPoints","startKnot","endKnot","Curve","getPoint","t","hpoint","getTangent","tangent","normalize","NURBSSurface","degree1","degree2","knots1","knots2","len1","len2","t1","t2","Lensflare","Geometry","MeshBasicMaterial","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","DataTexture","Uint8Array","RGBFormat","NearestFilter","wrapS","ClampToEdgeWrapping","wrapT","occlusionMap","material1a","RawShaderMaterial","screenPosition","depthTest","depthWrite","material1b","map","mesh1","elements","LensflareElement","Shader","material2","blending","AdditiveBlending","mesh2","addElement","element","screenPositionPixels","validArea","Box2","viewport","onBeforeRender","getCurrentViewport","invAspect","halfViewportWidth","halfViewportHeight","min","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","distance","uniformsNeedUpdate","isLensflare","Reflector","options","scope","textureWidth","textureHeight","clipBias","ReflectorShader","recursion","encoding","LinearEncoding","reflectorPlane","Plane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","textureMatrix","virtualCamera","PerspectiveCamera","MathUtils","isPowerOfTwo","generateMipmaps","userData","extractRotation","subVectors","dot","reflect","negate","position","up","lookAt","far","updateMatrixWorld","multiply","setFromNormalAndCoplanarPoint","constant","sign","visible","currentXrEnabled","xr","currentShadowAutoUpdate","shadowMap","autoUpdate","Refractor","RefractorShader","matrixAutoUpdate","refractor","refractorPlane","refractorWorldPosition","clipVector","updateRefractorPlane","quaternion","Quaternion","decompose","applyQuaternion","updateVirtualCamera","getInverse","updateTextureMatrix","TTFLoader","manager","Loader","reversed","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","path","setResponseType","buffer","parse","arraybuffer","reverseCommands","commands","paths","forEach","c","toLowerCase","result","command","x2","y2","x1","y1","opentype","warn","font","round","glyphs","unitsPerEm","glyphIndexMap","cmap","unicodes","keys","unicode","glyph","token","ha","advanceWidth","x_min","xMin","x_max","xMax","o","String","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","boundingBox","head","yMin","yMax","original_font_information","convert","ThreeMFLoader","availableExtensions","data","textureLoader","TextureLoader","parseRelsXml","relsFileText","relationships","relsXmlData","DOMParser","parseFromString","relsNodes","querySelectorAll","relsNode","relationship","getAttribute","id","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","setStyle","substring","convertSRGBToLinear","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseComponentNode","componentNode","componentData","transform","parseTransform","split","s","matrix","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertices","vertexNodes","vertexNode","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","triangleProperty","parseInt","Uint32Array","parseMeshNode","componentsNode","components","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","unit","metadataNodes","metadataData","metadataNode","indexOf","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","sRGBEncoding","RepeatWrapping","MirroredRepeatWrapping","LinearMipmapLinearFilter","buildBasematerialsMeshes","objectPindex","materialMap","meshes","materialIndex","trianglePropertiesProps","getBuild","buildBasematerial","BufferGeometry","positionData","jl","setAttribute","Float32BufferAttribute","mesh","buildTexturedMesh","uvData","MeshPhongMaterial","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","BufferAttribute","getResourceType","buildGroup","group","Group","resourceMap","objectPid","analyzeObject","resourceId","resourceType","newMeshes","buildMeshes","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","MeshStandardMaterial","metalness","displaycolor","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","extensions","modelXml","ns","extension","apply","applyExtensions","data3mf","relsName","modelRelsName","rels","modelRels","zip","file","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelParts","texturesParts","JSZip","e","ReferenceError","files","match","relsView","asArrayBuffer","LoaderUtils","decodeText","modelPart","fileText","xmlData","documentElement","nodeName","attributes","attr","RegExp","$1","texturesPartName","model","printTicket","other","loadDocument","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","buildObjects","addExtension","AMFLoader","text","loadMaterials","node","matName","matId","loadedMaterial","childNodes","matChildEl","loadColor","matColor","loadMeshVolume","volume","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","getElementsByTagName","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","nx","ny","nz","normals","loadObject","objId","loadedObject","currColor","currObjNode","currMeshNode","volumes","loadedVertices","concat","obj","DataView","fromCharCode","getUint8","log","substr","amfName","amfAuthor","amfScale","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","child","sceneObject","defaultMaterial","author","part","newObject","objDefaultMaterial","newGeometry","AssimpJSONLoader","DefaultLoadingManager","crossOrigin","extractUrlBase","json","JSON","metadata","__metadata__","version","setResourcePath","resourcePath","setCrossOrigin","parseList","handler","face","indices","texturecoords","faces","addAttribute","computeBoundingSphere","materials","properties","property","key","semantic","keyname","fromArray","specular","emissive","shininess","parseObject","idx","Object3D","transformation","transpose","materialindex","children","rootnode","AssimpLoader","Virtulous","KeyFrame","lerp","nextKey","dist","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","tempAniQuat","slerp","tempAniMatrix","compose","tempAniScale","KeyFrameTrack","_accelTable","fps","addKey","init","sortKeys","parseFromThree","track","hierarchy","targets","parseFromCollada","sort","keySortFunc","reTarget","root","compareitor","TrackTargetNodeNameCompare","keySearchAccel","setTime","abs","key0","key1","matrixWorldNeedsUpdate","find","Animation","tracks","addTrack","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","cloneTreeToBones","rootBone","Bone","nodeCount","toString","nodeToBoneMap","sortWeights","indexes","pairs","findMatchingBone","ret","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","mBones","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","findNode","mName","mParent","isBone","threeSkeletonRoot","toTHREE","threeSkeletonRootBone","threeNode","bone","tbone","mOffsetMatrix","skeleton","Skeleton","bind","skinning","mat","mMaterials","MeshLambertMaterial","mIndexArray","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","mTangentBuffer","mBitangentBuffer","bones","mWeights","weight","mVertexId","mWeight","_weights","_bones","SkinnedMesh","normalizeSkinWeights","aiFace","mNumIndices","mIndices","aiString","str","replace","aiNode","mTransformation","mNumChildren","mNumMeshes","mMeshes","mChildren","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","array","reader","getFloat32","dataAsFloat","dataAsBool","dataAsString","dataAsMap","lastIndexOf","namePropMapping","?mat.name","$mat.shadingm","$mat.twosided","$mat.wireframe","$clr.ambient","$clr.diffuse","$clr.specular","$clr.emissive","$clr.transparent","$clr.reflective","$mat.shininess","$mat.reflectivity","$mat.refracti","$tex.file","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","prop","normalMap","lightMap","alphaMap","ambient","veclerp","lm1","quatlerp","q1","q2","sampleTrack","lne","mValue","timeDist","mTime","dT","T","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","comp","getLength","pos","rotation","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","littleEndian","readFloat","dataview","val","readOffset","Read_double","getFloat64","Read_uint8_t","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","m","i2","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVectorKey","ReadBounds","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryBone","chunkID","shortened","ReadArray_aiVertexWeight","ReadBinaryMesh","mNumUVComponents","subArray32","uv","f","Error","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","ReadArray_aiQuatKey","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","ReadBinaryNode","parent","mDepth","node2","mAnimations","mTextures","mLights","mCameras","compressed","aiOrigin_BEG","pFiledata","pScene","versionMajor","versionMinor","versionRevision","compileFlags","boneNode","markBones","object","animation","off","ori","buff","bytes","start","end","newbuff","subArrayUint16","Uint16Array","subArrayUint8","subArrayUint32","extendStream","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","ArrayBuffer","InternReadFile","AWDLoader","Block","namespace","flags","AWDProperties","fallback","hasOwnProperty","trunk","materialFactory","_url","_baseDir","_data","_ptr","_version","_streaming","_optimized_for_accuracy","_compression","_bodylen","_blocks","_accuracyMatrix","_accuracyGeo","_accuracyProps","blen","byteLength","_parseHeader","parseNextBlock","assetData","block","blockId","readU32","readU8","len","parseMeshData","parseContainer","parseMeshInstance","parseMaterial","parseTexture","parseSkeleton","parseMeshPoseAnimation","parseVertexAnimationSet","parseSkeletonPose","parseSkeletonAnimation","parseAnimatorSet","awdmagic","readU16","_geoNrType","_matrixNrType","_propsNrType","ctr","par_id","mtx","parseMatrix4","readUTF","parseProperties","1","2","3","4","extra","parseUserAttributes","geometries","meshLen","data_id","mat_id","num_materials","getBlock","sm","matLen","maxLen","props","num_methods","11","12","13","setHex","tex_addr","alphaThreshold","repeat","asset","data_len","readUTFBytes","loadTexture","Texture","ImageLoader","image","num_joints","joints_parsed","joint","ibp","skinMatrix","pose","has_transform","mtx_data","frame_dur","pose_addr","clip","num_frames","frames_parsed","duration","poseBlockAdress","skeletonFrames","animSetBlockAdress","targetAnimationSet","targetMeshLength","meshAdresses","Boolean","thisAnimator","targetMeshes","animationSet","animator","geom","num_subs","subs_parsed","sm_len","sm_end","attrib","str_type","str_len","str_end","readF32","poseOnly","num_submeshes","subMeshParsed","num_Streams","streamsParsed","streamtypes","geoAdress","morphTargets","looping","stitchFinalFrame","expected","list_len","list_end","parseAttrValue","elem_len","read_func","readI8","readI16","readI32","readF64","list","num_read","num_elems","getInt8","getInt16","getInt32","out","c1","c2","c3","BabylonLoader","parseGeometry","positions","subMeshes","subMesh","addGroup","indexStart","indexCount","diffuse","specularPower","alpha","multiMaterials","parseMaterials","Scene","cameras","fov","minZ","maxZ","lights","light","PointLight","DirectionalLight","SpotLight","HemisphereLight","groundColor","rotationQuaternion","scaling","parentId","parseObjects","TGALoader","TGA_TYPE_NO_DATA","TGA_TYPE_INDEXED","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_INDEXED","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_BL","TGA_ORIGIN_BR","TGA_ORIGIN_UL","TGA_ORIGIN_UR","content","offset","header","id_length","colormap_type","image_type","colormap_index","colormap_length","colormap_size","origin","pixel_size","tgaCheckHeader","use_rle","use_pal","use_grey","useOffscreen","OffscreenCanvas","canvas","document","createElement","imageData","createImageData","pixel_data","pixel_total","palettes","subarray","count","shift","pixels","tgaParse","palette","x_start","y_start","x_step","y_step","x_end","y_end","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","colormap","tgaGetImageData8bits","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","getTgaRGBA","putImageData","transferToImageBitmap","ColladaLoader","convertUpAxis","xml","parseStrings","parts","trim","parseFloats","parseInts","parseId","isEmpty","parseLibrary","libraryName","parser","library","buildLibrary","parseAnimationSampler","inputs","nodeType","parseAnimationChannel","sid","arraySyntax","memberSyntax","member","sampler","buildAnimation","channels","samplers","sources","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","buildAnimationChannel","createKeyframeTracks","getAnimation","animations","stride","nodes","getNode","transforms","defaultMatrix","keyframes","transformAnimationData","prepareAnimationData","uuid","times","quaternionData","scaleData","keyframe","VectorKeyframeTrack","QuaternionKeyframeTrack","defaultValue","empty","prev","next","getPrev","getNext","interpolate","createMissingKeyframes","buildAnimationClip","animationTracks","AnimationClip","getAnimationClip","clips","parseSkin","bindShapeMatrix","parseSource","joints","parseJoints","vertexWeights","parseVertexWeights","vcount","buildController","skin","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","descending","bindMatrix","identity","boneInverse","buildSkin","skinIndices","skinWeights","buildImage","init_from","getImage","images","parseEffectProfileCOMMON","surfaces","parseEffectNewparam","technique","parseEffectTechnique","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","buildMaterial","effect","effects","profile","getTexture","textureObject","surface","tgaLoader","getTextureLoader","wrapU","wrapV","offsetU","offsetV","repeatU","repeatV","parameter","specularMap","float","emissiveMap","transparency","double_sided","side","DoubleSide","getMaterial","parseCameraOptics","parseCameraTechnique","parseCameraParameters","buildCamera","optics","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLightTechnique","parseLightParameters","falloffAngle","buildLight","AmbientLight","getLight","accessor","parseGeometryVertices","parseGeometryPrimitive","primitive","hasUV","inputname","checkUVCoordinates","primitives","uvsNeedsFix","buildGeometry","groupedPrimitives","groupPrimitives","primitiveType","buildGeometryType","uv2","materialKeys","vc","input","prevLength","buildGeometryData","pushVector","sourceStride","sourceArray","kl","getGeometry","buildKinematicsModel","parseKinematicsTechniqueCommon","parseKinematicsJoint","links","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","pop","degToRad","parsePhysicsRigidBody","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsBindJointAxis","param","tmpJointIndex","jointIndex","buildKinematicsScene","vector","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","makeTranslation","makeRotationAxis","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","buildBoneHierarchy","visualScenes","visualScene","processed","boneInverses","traverse","instanceCamera","controller","controllers","newObjects","isSkinnedMesh","instanceLight","fallbackMaterial","resolveMaterialBinding","instanceMaterials","LineBasicMaterial","LineSegments","Line","buildVisualScene","getVisualScene","collada","parserError","errorText","errorElement","stack","Node","TEXT_NODE","parserErrorToText","hasAttribute","parseAssetUnit","upAxis","parseAssetUpAxis","parseAsset","kinematics","kinematicsModels","physicsModels","kinematicsScenes","prepareNodes","rigidBodies","bindJointAxis","setupAnimations","kinematicsModelId","kinematicsSceneId","visualSceneId","kinematicsModel","kinematicsScene","getKinematicsScene","jointMap","targetElement","parentVisualElement","parentElement","connect","visualElement","visualElementName","buildTransformList","m0","getJointValue","jointData","setJointValue","setupKinematics","parseScene","setFromEuler","Euler","DRACOLoader","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setDrawMode","setSkipDequantization","setWithCredentials","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","BYTES_PER_ELEMENT","worker","taskKey","stringify","taskCache","has","cachedTask","promise","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","message","_createGeometry","finally","_releaseTask","geometryData","itemSize","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","body","Worker","_taskCosts","_taskLoad","onmessage","debug","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numPoints","num_points","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","indexArray","GetFaceFromMesh","WeakMap","releaseDecoderModule","getDecoderModule","Inflate","FBXLoader","fbxTree","connections","sceneGraph","FBXTreeParser","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","dv","FBXTree","getFbxVersion","convertFBXTimeToSeconds","setTimeout","itemError","FBXBuffer","CORRECT","convertArrayBufferToString","FBXText","cursor","read","num","isFbxFormatASCII","parseConnections","parseImages","textures","parseTextures","deformers","parseDeformers","geometryMap","connectionMap","Map","rawConnections","Connections","rawConnection","fromID","toID","parents","parentRelationship","ID","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","RelativeFilename","Filename","arrayBufferContent","Content","base64Content","parseImage","filename","fileName","getHandler","window","textureMap","textureNodes","textureNode","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","Scaling","currentPath","FileName","materialNodes","Material","materialNode","ShadingModel","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","DiffuseColor","DisplacementFactor","displacementScale","Emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","Opacity","ReflectionFactor","reflectivity","Shininess","Specular","SpecularColor","bumpMap","aoMap","displacementMap","envMap","mapping","EquirectangularReflectionMapping","LayeredTexture","DeformerNodes","Deformer","deformerNode","attrType","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","rawBone","transformLink","TransformLink","Indexes","Weights","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","modelMap","parseModels","modelNodes","Model","setLookAtProperties","parentConnections","connection","bindSkeleton","createAmbientLight","setupMorphMaterials","transformData","parentMatrixWorld","generateTransform","isGroup","createCamera","createLight","createMesh","createCurve","PropertyBinding","sanitizeNodeName","getTransformData","subBone","cameraAttribute","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","innerWidth","innerHeight","AspectWidth","AspectHeight","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","Intensity","CastLightOnObject","FarAttenuationEnd","EnableFarAttenuation","InnerAngle","penumbra","OuterAngle","CastShadows","castShadow","FBX_Deformer","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","Lcl_Rotation","postRotation","PostRotation","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","BindPoseNode","Pose","poseNodes","PoseNode","isArray","poseNode","Matrix","GlobalSettings","ambientColor","AmbientColor","isMesh","morphAttributes","setupMorphMaterial","matUuid","sharedMat","clonedMat","geoNodes","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","genBuffers","positionAttribute","vertex","Uint16BufferAttribute","weightsIndices","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvBuffer","mappingType","prevMaterialIndex","startIndex","currentIndex","groups","lastGroup","lastIndex","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","parseUVs","weightTable","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","KnotVector","pointsValues","Points","Form","curve","getPoints","toArray","animationClips","rawClips","parseClips","rawClip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","rawTracks","generateTracks","setFromQuaternion","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","euler","quaternionValues","premultiply","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","valuesSpan","absoluteSpan","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","connProps","from","to","rest","append","parseNumberArray","parseNodeSpecialProperty","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","skip","endOfContent","getOffset","endOffset","getUint64","numProperties","nameLen","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getInt64","getArrayBuffer","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","inflate","reader2","decompress","nullByte","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","copyPosition","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2","GCodeLoader","splitLayer","extruding","relative","layers","currentLayer","pathMaterial","extrudingMaterial","newLayer","pathVertex","addSegment","delta","absolute","lines","tokens","cmd","args","addObject","segments","GLTFLoader","dracoLoader","ddsLoader","itemStart","_onError","itemEnd","gltf","setDRACOLoader","setDDSLoader","magic","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","headerView","BINARY_EXTENSION_HEADER_LENGTH","chunkView","chunkIndex","chunkLength","chunkType","BINARY_EXTENSION_CHUNK_TYPES","contentArray","BIN","byteOffset","extensionsUsed","extensionName","extensionsRequired","KHR_LIGHTS_PUNCTUAL","GLTFLightsExtension","KHR_MATERIALS_CLEARCOAT","GLTFMaterialsClearcoatExtension","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","GLTFMaterialsPbrSpecularGlossinessExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","MSFT_TEXTURE_DDS","GLTFTextureDDSExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","GLTFParser","lightDefs","loadLight","lightIndex","lightNode","lightDef","range","spot","innerConeAngle","outerConeAngle","decay","getMaterialType","extendParams","materialParams","materialDef","pending","metallicRoughness","pbrMetallicRoughness","baseColorFactor","baseColorTexture","assignTexture","MeshPhysicalMaterial","clearcoatFactor","clearcoat","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughness","clearcoatRoughnessTexture","clearcoatNormalTexture","clearcoatNormalScale","GLTFMeshStandardSGMaterial","params","isGLTFSpecularGlossinessMaterial","specularMapParsFragmentChunk","glossinessMapParsFragmentChunk","specularMapFragmentChunk","glossinessMapFragmentChunk","lightPhysicalFragmentChunk","glossiness","glossinessMap","_extraUniforms","onBeforeCompile","uniformName","defineProperties","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","metalnessMap","roughnessMap","specularGlossinessParams","pbrSpecularGlossiness","diffuseFactor","diffuseTexture","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossMapDef","createMaterial","fog","lightMapIntensity","aoMapIntensity","normalMapType","TangentSpaceNormalMap","normalScale","displacementBias","envMapIntensity","refractionRatio","GLTFCubicSplineInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","Interpolant","decodePrimitive","bufferViewIndex","bufferView","gltfAttributeMap","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","threeAttributeName","ATTRIBUTES","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","normalized","getDependency","extendTexture","texCoord","copySampleValue_","valueSize","beforeStart_","afterEnd_","interpolate_","i1","t0","stride2","stride3","td","pp","ppp","offset1","offset0","s3","s0","p0","m1","WEBGL_CONSTANTS","FLOAT","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","LINEAR","REPEAT","SAMPLER_2D","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","5120","5121","5122","5123","5125","5126","WEBGL_FILTERS","9728","9729","9984","NearestMipmapNearestFilter","9985","LinearMipmapNearestFilter","9986","NearestMipmapLinearFilter","9987","WEBGL_WRAPPINGS","33071","33648","10497","WEBGL_TYPE_SIZES","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","INTERPOLATION","CUBICSPLINE","InterpolateLinear","STEP","InterpolateDiscrete","ALPHA_MODES","OPAQUE","MASK","BLEND","MIME_TYPE_FORMATS","image/png","image/jpeg","resolveURL","test","createDefaultMaterial","cache","FrontSide","addUnknownExtensionsToUserData","knownExtensions","objectDef","gltfExtensions","assignExtrasToUserData","gltfDef","extras","updateMorphTargets","meshDef","morphTargetInfluences","targetNames","createPrimitiveKey","primitiveDef","dracoExtension","createAttributesKey","mode","attributesKey","remove","removeAll","primitiveCache","fileLoader","addPrimitiveAttributes","assignAttributeAccessor","accessorIndex","gltfAttributeName","box","Box3","maxDisplacement","setX","setY","setZ","expandByVector","sphere","Sphere","getCenter","radius","distanceTo","boundingSphere","computeBounds","hasMorphPosition","hasMorphNormal","pendingPositionAccessors","pendingNormalAccessors","pendingAccessor","morphNormals","toTrianglesDrawMode","drawMode","getIndex","numberOfTriangles","newIndices","TriangleFanDrawMode","getX","markDefs","getDependencies","dependencies","scenes","nodeDefs","skinDefs","skins","meshDefs","meshReferences","meshUses","skinLength","nodeIndex","nodeLength","nodeDef","cacheKey","dependency","loadScene","loadNode","loadMesh","loadAccessor","loadBufferView","loadBuffer","loadMaterial","loadSkin","loadAnimation","loadCamera","defs","def","bufferIndex","bufferDef","uri","bufferViewDef","bufferViews","sparse","pendingBufferViews","bufferAttribute","TypedArray","elementBytes","itemBytes","byteStride","ibSlice","ibCacheKey","ib","InterleavedBuffer","InterleavedBufferAttribute","itemSizeIndices","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","setW","textureIndex","webkitURL","textureDef","textureExtensions","isObjectURL","mimeType","flipY","mapName","mapDef","isCompressedTexture","assignFinalMaterial","useVertexTangents","useVertexColors","useFlatShading","useSkinning","useMorphTargets","useMorphNormals","isPoints","pointsMaterial","PointsMaterial","sizeAttenuation","isLine","lineMaterial","cachedMaterial","vertexTangents","materialType","materialExtensions","sgExtension","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","doubleSided","alphaMode","alphaTest","alphaCutoff","normalTexture","occlusionTexture","strength","emissiveFactor","emissiveTexture","clearcoatExtension","loadGeometries","createDracoPrimitive","geometryPromise","cached","meshIndex","results","TriangleStripDrawMode","LineLoop","cameraIndex","cameraDef","radToDeg","skinDef","skinEntry","inverseBindMatrices","animationIndex","animationDef","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","output","inputAccessors","outputAccessors","inputAccessor","outputAccessor","TypedKeyframeTrack","updateMatrix","targetName","interpolation","outputArray","scaled","createInterpolant","getValueSize","isInterpolantFactoryMethodGLTFCubicSpline","instanceNum","buildNodeHierachy","nodeId","parentObject","pendingJoints","jointNodes","jointNode","sceneIndex","sceneDef","nodeIds","MTLLoader","setMaterialOptions","materialOptions","info","delimiter_pattern","materialsInfo","ss","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","materialsArray","nameLookup","wrap","converted","mn","covmat","save","lprop","normalizeRGB","ignoreZeroRGBs","materialName","getAsArray","createMaterial_","setMapForType","mapType","texParams","getTextureParams","invertTrProperty","matParams","items","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","groupCount","mtllib","groupStart","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","src","dst","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","lineFirstChar","trimLeft","lineData","vertexData","faceVertices","vertexParts","lineParts","lineVertices","lineUVs","li","llen","pointData","exec","container","hasVertexColors","buffergeometry","computeVertexNormals","createdMaterials","miLen","sourceMaterial","materialHash","materialPoints","materialLine","OBJLoader2Parser","logging","callbacks","_onProgress","onAssetAvailable","payload","_onAssetAvailable","errorMessage","object3d","_onLoad","contentRef","legacyMode","materialPerSmoothingGroup","useOAsMesh","useIndices","disregardNormals","rawMesh","objectName","groupName","activeMtlName","mtllibName","faceType","subGroups","subGroupInUse","smoothingGroup","splitMaterials","real","counts","doubleIndicesCount","faceCount","mtlCount","smoothingGroupCount","inputObjectCount","outputObjectCount","globalCounts","lineByte","currentByte","totalBytes","_resetRawMesh","_pushSmoothingGroup","setMaterialPerSmoothingGroup","setUseOAsMesh","setUseIndices","setDisregardNormals","setCallbackOnAssetAvailable","Function","setCallbackOnProgress","setCallbackOnError","setCallbackOnLoad","setLogging","_configure","matKeys","matNames","printedConfig","execute","arrayBuffer","arrayBufferView","code","word","bufferPointer","slashesCount","_processLine","_finalizeParsing","timeEnd","executeLegacy","char","bufferLength","lineDesignation","reconstructString","stop","_checkFaceType","_buildFace","_processCompletedMesh","mtlName","_checkSubGroup","smoothingGroupInt","smoothCheck","indexMappingsCount","indexMappings","faceIndexV","faceIndexU","faceIndexN","updateSubGroupInUse","faceIndexVi","indexPointerV","indexPointerC","faceIndexUi","indexPointerU","faceIndexNi","indexPointerN","mappingName","indicesPointer","_createRawMeshReport","_finalizeRawMesh","meshOutputGroup","meshOutputGroupTemp","absoluteVertexCount","absoluteIndexMappingsCount","absoluteIndexCount","absoluteColorCount","absoluteNormalCount","absoluteUvCount","haveMesh","_buildMesh","progressBytesPercent","toFixed","meshOutputGroups","vertexFA","selectedMaterialIndex","materialGroup","materialOrg","materialNameOrg","indexUA","colorFA","normalFA","uvFA","haveVertexColors","materialNames","createMultiMaterial","materialIndexMapping","materialGroups","vertexFAOffset","indexUAOffset","colorFAOffset","normalFAOffset","uvFAOffset","materialGroupOffset","materialGroupLength","oodIndex","materialCloneInstructions","materialProperties","matCheck","materialIndexLine","createdReport","progress","numericalValue","meshName","multiMaterial","parserFinalReport","MeshReceiver","materialHandler","onMeshAlter","_setCallbacks","meshPayload","bufferGeometry","callbackOnMeshAlterResult","useOrgMesh","detail","isDisregardMesh","providesAlteredMeshes","progressMessage","meshNames","MaterialHandler","onLoadMaterials","createDefaultMaterials","overrideExisting","defaultVertexColorMaterial","VertexColors","defaultLineMaterial","defaultPointMaterial","runtimeMaterials","addMaterials","addPayloadMaterials","materialPayload","newMaterials","serializedMaterials","materialJson","MaterialLoader","existingMaterial","getMaterials","getMaterialsJSON","materialsJSON","toJSON","clearMaterials","OBJLoader2","instanceNo","baseObject3d","meshReceiver","OBJLOADER2_VERSION","setModelName","setBaseObject3d","setCallbackOnMeshAlter","setCallbackOnLoadMaterials","onFileLoadProgress","event","currentTarget","statusText","responseURL","urlFull","location","href","urlParts","numericalValueRef","lengthComputable","loaded","total","PCDLoader","textData","PCDheader","result1","search","result2","headerLen","fields","viewpoint","points","sizeSum","rowSize","parseHeader","pcdData","rgb","normal_x","normal_y","normal_z","sizes","decompressedSize","decompressed","inData","outLength","ctrl","ref","inLength","outData","inPtr","outPtr","decompressLZF","row","random","reverse","PLYLoader","propertyNameMapping","setPropertyNameMapping","headerText","headerLength","currentElement","lineType","lineValues","comments","make_ply_element_property","propertValues","countType","itemType","parseASCIINumber","parseASCIIElement","parseASCII","faceVertexUvs","currentElementCount","handleElement","postProcess","toNonIndexed","elementName","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","at","little_endian","binaryReadElement","loc","parseBinary","PRWMLoader","bigEndianPlatform","isBigEndianPlatform","uint8Array","uint16Array","InvertedEncodingTypes","getMethods","Float64Array","copyFromBuffer","sourceArrayBuffer","viewType","fromBigEndian","bytesPerElement","readView","getMethod","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","cardinality","arrayType","decodePrwm","STLLoader","exception","matchDataViewAt","query","binData","array_buffer","charCodeAt","ensureBinary","n_faces","solid","isBinary","defaultR","defaultG","defaultB","hasColors","normalX","normalY","normalZ","packedColor","vertexstart","componentIdx","patternSolid","patternFace","faceCounter","patternFloat","patternVertex","patternNormal","startVertex","endVertex","vertexCountPerFace","normalCountPerFace","ensureString","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","SVGLoader","defaultDPI","defaultUnit","parseArcCommand","rx","ry","x_axis_rotation","large_arc_flag","sweep_flag","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","dq","pq","cxp","cyp","cx","cy","theta","svgAngle","absellipse","ux","uy","vx","vy","ang","acos","parseStyle","style","addStyle","svgName","jsName","adjustFunction","clamp","parseFloatWithUnits","positive","getReflection","string","number","units","unitConversion","mm","cm","in","pt","pc","px","theUnit","endsWith","getNodeTransform","currentTransform","tempTransform0","transformsTexts","tIndex","transformText","openParPos","closeParPos","transformType","tx","ty","translate","tempTransform1","tempTransform2","rotate","tempTransform3","multiplyMatrices","scaleX","scaleY","tan","parseNodeTransform","transformStack","getTransformScaleX","te","getTransformScaleY","tempV2","tempV3","ShapePath","control","firstPoint","isFirstPoint","doSetFirstPoint","numbers","moveTo","lineTo","bezierCurveTo","quadraticCurveTo","autoClose","currentPoint","parsePathNode","h","parseRectNode","parsePolygonNode","parsePolylineNode","subpath","Path","absarc","subPaths","parseCircleNode","parseEllipseNode","parseLineNode","fill","transfVec2","applyMatrix3","isRotated","isTransformRotated","subPath","isLineCurve","isCubicBezierCurve","v0","isQuadraticBezierCurve","isEllipseCurve","aX","aY","xRadius","yRadius","transformPath","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","getStrokeStyle","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","pointsToStrokeWithBuffers","vertexOffset","dupPoints","newPoints","removeDuplicatedPoints","nextPoint","innerSideModified","joinIsOnLeftSide","isMiter","isClosed","equals","previousPoint","strokeWidth2","deltaU","u0","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","iPoint","normal1","u1","miterSide","setLength","miterLength2","segmentLengthPrev","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addCapGeometry","lastOuter","lastInner","rotateAround","addVectors","vl","TDSLoader","readFile","chunk","readChunk","MLIBMAGIC","CMAGIC","M3DMAGIC","nextChunk","M3D_VERSION","readDWord","debugMessage","MDATA","resetPosition","readMeshData","MESH_VERSION","MASTER_SCALE","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","readString","cur","N_TRI_OBJECT","readMesh","endChunk","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","readByte","wireframeLinewidth","MAT_TWO_SIDE","MAT_ADDITIVE","MAT_DIFFUSE","readColor","MAT_SPECULAR","MAT_AMBIENT","MAT_SHININESS","readWord","MAT_TRANSPARENCY","MAT_TEXMAP","readMap","MAT_BUMPMAP","MAT_OPACMAP","MAT_SPECMAP","POINT_ARRAY","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","MSH_MAT_GROUP","readMaterialGroup","MAT_MAPNAME","MAT_MAP_UOFFSET","MAT_MAP_VOFFSET","MAT_MAP_USCALE","MAT_MAP_VSCALE","COLOR_24","LIN_COLOR_24","setRGB","COLOR_F","LIN_COLOR_F","readInt","readShort","maxLength","chevrotain","VRMLLoader","VRMLLexer","lexer","Lexer","VRMLParser","tokenVocabulary","Parser","$","Version","LCurly","RCurly","LSquare","RSquare","Identifier","RouteIdentifier","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","DEF","USE","ROUTE","TO","NodeName","RULE","SUBRULE","AT_LEAST_ONE","MANY","route","CONSUME","OPTION","field","OR2","ALT","singleFieldValue","multiFieldValue","OR","use","CONSUME2","performSelfAnalysis","Face","nodeMap","buildNodeMap","fieldValues","identifier","isObject3D","isMaterial","fieldName","parseFieldChildren","setFromAxisAngle","buildGroupingNode","groundAngle","skyAngle","skyColor","skyGeometry","SphereBufferGeometry","skyMaterial","BackSide","paintFaces","toColorArray","sky","groundGeometry","groundMaterial","ground","buildBackgroundNode","_type","isMeshPhongMaterial","_solid","buildShapeNode","diffuseColor","emissiveColor","specularColor","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","useAlpha","textureType","getTextureType","parseHexColor","buildPixelTextureNode","buildTextureTransformNode","coord","colorIndex","coordIndex","normalIndex","texCoordIndex","ccw","creaseAngle","colorPerVertex","normalPerVertex","coordNode","normalNode","texCoordNode","colorAttribute","uvAttribute","triangulatedCoordIndex","triangulateFaceIndex","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","vertexNormals","vA","vB","vC","cb","ab","cross","nA","weightedNormal","nB","nC","computeNormalAttribute","triangulatedTexCoordIndex","buildIndexedFaceSetNode","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","buildIndexedLineSetNode","buildPointSetNode","BoxBufferGeometry","buildBoxNode","openEnded","ConeBufferGeometry","buildConeNode","CylinderBufferGeometry","buildCylinderNode","buildSphereNode","buildGeometricNode","hex","INTENSITY","owner","i3","triangulatedData","uvA","uvB","uvC","faceData","array2","index2","angleTo","angles","topDown","thresholds","startAngle","setFromSphericalCoords","thresholdIndexA","thresholdIndexB","fromBufferAttribute","thresholdA","thresholdB","colorA","colorB","setXYZ","tree","tokenData","createToken","pattern","longer_alt","Comment","SKIPPED","createTokens","visitor","BaseVRMLVisitor","VRMLToASTVisitor","validateVisitor","processField","ctx","visit","stringLiteral","numberLiteral","hexLiteral","trueLiteral","falseLiteral","vrml","routes","FROM","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","cstOutput","errors","generateVRMLTree","parseTree","inputText","tokenize","VTKLoader","Float32Concat","first","second","firstLength","Int32Concat","getStringFile","stringFile","charArray","meta","Base64toByteArray","b64","placeHolders","arr","Arr","lookup","revLookup","L","parseDataArray","ele","numBytes","header_type","rawData","byteData","blocks","cSizeStart","headerSize","dataOffsets","currentOffset","txt","currentBlockSize","resize","verify","el","dom","ActiveXObject","async","loadXML","parseError","reason","srcText","xmlToJson","item","hasChildNodes","old","PolyData","piece","Piece","sections","sectionIndex","numberOfSections","section","DataArray","dataArrayIndex","numberOfDataArrays","numberOfPoints","NumberOfPoints","normalsName","Name","NumberOfComponents","numberOfStrips","NumberOfStrips","connectivity","indicesIndex","strip","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","parseXML","includes","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","dataset","inds","i0","numTriangles","newColors","pointIndex","dataView","vtk","findString","parsedString","XLoader","classCallCheck","Constructor","TypeError","createClass","descriptor","enumerable","configurable","writable","protoProps","staticProps","XAnimationInfo","animeName","boneName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","XAnimationObj","_flags","putFlags","putPos","putRot","putScl","XAnimationInfoArray","makeBonekeys","refObj","keyFrameRefactor","rot","scl","setFromRotationMatrix","setFromMatrixScale","XKeyFrameInfo","Frame","texloader","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","IsUvYReverse","Meshes","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_arg","_start","arguments","_this","_setArgOption","response","readed","foundNewLine","expect","fileLength","buf","_ensureBinary","_ensureString","_isBinary","_parseBinary","_parseASCII","_hierarchieParse","_changeRoot","_mainloop","_parent","_end","endRead","find1","findEnd","findNext","nameData","_readLine","refs","DataEnder","nextStart","_refs","_this2","_mainProc","worked","models","breakFlag","_setFrame","_setFrameTransformMatrix","_getParentName","VertexSetedBoneCount","GeometryData","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","_makeOutputGeometry","_makeOutputAnimation","_obj","FrameTransformMatrix","_ParseMatrixData","putBone","frame","mode_local","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","refI","stride4","_computeGroups","currentMaterialIndex","data2","data3","localObject","boneInf","XboneInf","BoneIndex","Indeces","initMatrix","OffsetMatrix","_i","_RootName","putting","rotq","putBones","_makePutBoneList","bi","boneIndex","bb","nowVertexID","nowVal","sk","offsetList","_bi","_buildGeometry","_initSkeleton","_bufferGeometry","worldBaseMx","currentMxFrame","boneList","gbone","nowKeyType","keyInfo","frameFound","frameValue","animationObj","make","_model","_animation","put","findAnimation","c_key","_c_key","parseAnimation","animationMixer","AnimationMixer","targetMatrix","DDSLoader","CompressedTextureLoader","loadMipmaps","dds","mipmaps","mipmapCount","fourCCToInt32","loadARGBMip","dataOffset","dataLength","srcBuffer","byteArray","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","fourCC","isRGBAUncompressed","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","caps2","isCubemap","mipmap","PVRLoader","pvrDatas","_parseV3","_parseV2","bpp","metaLen","pixelFormat","numMipmaps","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","dataPtr","numSurfaces","_extract","bitmaskAlpha","numSurfs","formatFlags","_hasAlpha","pvr","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","mipLevel","sWidth","sHeight","surfIndex","KTXLoader","ktx","KhronosTextureContainer","pixelWidth","pixelHeight","glInternalFormat","numberOfFaces","numberOfMipmapLevels","facesExpected","headerDataView","endianness","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","loadType","COMPRESSED_2D","HEADER_LEN","level","imageSize","COMPRESSED_3D","TEX_2D","TEX_3D","SimplifyModifier","removeFromArray","computeEdgeCollapseCost","sideFace","edgelength","curvature","sideFaces","hasVertex","minCurvature","dotProd","amt","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","assert","removeFace","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","Triangle","computeNormal","addUniqueNeighbor","Vertex","oldv","newv","modify","isBufferGeometry","fromBufferGeometry","mergeVertices","nextVertex","oldVertices","oldFaces","triangle","simplifiedGeometry","SubdivisionModifier","subdivisions","repeats","computeFaceNormals","ABC","getEdge","vertexIndexA","vertexIndexB","processEdge","metaVertices","edge","vertexA","vertexB","newEdge","edges","newFace","newFaces","Face3","midpoint","newUv","newUvs","oldUvs","newVertices","sourceEdges","newEdgeVertices","newSourceVertices","newUVs","currentEdge","edgeVertexWeight","adjacentVertexWeight","connectedFaces","beta","sourceVertexWeight","connectingVertexWeight","connectingEdge","connectingEdges","oldVertex","newSourceVertex","hasUvs","generateLookups","edge1","edge2","edge3","x0","sl","x3","x4","x5","ColladaExporter","onDone","textureDirectory","imageToData","ext","naturalWidth","naturalHeight","drawImage","base64data","toDataURL","atob","base64ToBuffer","transMat","getFuncs","attrBufferToArray","isInterleavedBufferAttribute","subArray","st","ct","res","processTexture","imageMap","libraryImages","imageNode","directory","original","geometryInfo","libraryGeometries","libraryEffects","libraryMaterials","libraryVisualScenes","processObject","getTransform","geomInfo","fromGeometry","meshid","gname","gnode","posName","vertName","triangleInputs","normName","uvName","colName","subarr","polycount","processGeometry","matids","matidsArray","matid","transparencyNode","techniqueNode","effectnode","processMaterial","specLink","dae","Date","toISOString","urdf","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","tagnum","ch","tag","requestAnimationFrame","DRACOExporter","DracoEncoderModule","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","dracoEncoder","encoder","Encoder","MeshBuilder","isGeometry","AddFloatAttributeToMesh","AddFacesToMesh","TEX_COORD","COLOR","encodedData","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","outputData","MESH_SEQUENTIAL_ENCODING","INVALID","GENERIC","UNSIGNED_INT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","THREE_TO_WEBGL","GLTFExporter","DEFAULT_OPTIONS","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","forceIndices","forcePowerOfTwoTextures","includeCustomExtensions","cachedCanvas","outputJSON","generator","cachedData","attributesNormalized","uids","uid","getUID","equalArray","array1","every","getPaddedBufferSize","bufferSize","getPaddedArrayBuffer","paddingByte","paddedLength","serializeUserData","gltfProperty","applyTextureTransform","didTransform","transformDef","processBuffer","processAccessor","end2","drawRange","bufferViewTarget","minMax","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getMinMax","componentSize","setFloat32","setUint32","setUint16","setUint8","gltfBufferView","processBufferView","gltfAccessor","16","processImage","cachedImages","gltfImage","floorPowerOfTwo","toBlob","FileReader","readAsArrayBuffer","onloadend","processBufferViewImage","gltfTexture","gltfSampler","processSampler","isShaderMaterial","gltfMaterial","isMeshBasicMaterial","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","isMeshStandardMaterial","metalRoughMapDef","baseColorMapDef","specularMapDef","emissiveMapDef","normalMapDef","occlusionMapDef","processMesh","meshCacheKeyParts","meshCacheKey","isLineSegments","isLineLoop","setFromObject","gltfMesh","nameConversion","originalNormal","isNormalizedNormalAttribute","createNormalizedNormalAttribute","modifiedAttribute","reverseDictionary","warned","baseAttribute","relativeAttribute","getY","getZ","isMultiMaterial","didForceIndices","processAnimation","Utils","mergeMorphTargetTracks","trackBinding","parseTrackName","trackNode","trackProperty","propertyName","getBoneByName","objectIndex","outputItemSize","getInterpolation","processSkin","rootJoint","processNode","gltfNode","isCamera","isOrtho","isOrthographicCamera","gltfCamera","orthographic","top","near","perspective","processCamera","isDirectionalLight","isPointLight","isSpotLight","processLight","isLight","processScene","gltfScene","objectsWithoutScene","processObjects","processInput","extensionsUsedList","binaryChunk","binaryChunkPrefix","jsonChunk","TextEncoder","encode","stringToArrayBuffer","jsonChunkPrefix","totalByteLength","glbBlob","glbReader","readAsDataURL","insertKeyframe","TimeBufferType","ValueBufferType","interpolant","evaluate","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","mergedTrack","targetCount","targetIndex","sourceInterpolant","keyframeIndex","CharsetEncoder","DataViewEx","DataCreationHelper","s2u","s2uTablegetInt8Array","getUint8Array","getInt16Array","getUint16Array","getUint32Array","isUnsigned","getIndexArray","getChars","getSjisStringsAsUnicode","getUnicodeStrings","getTextBuffer","leftToRightVector3","leftToRightQuaternion","leftToRightEuler","leftToRightIndexOrder","leftToRightVector3Range","leftToRightEulerRange","r1","r2","tmp1","tmp2","parsePmd","leftToRight","pmd","coordinateSystem","comment","parseVertex","edgeFlag","vertexCount","parseVertices","parseFace","parseFaces","toonIndex","materialCount","parseBone","parentIndex","tailIndex","ikIndex","boneCount","parseBones","parseIk","effector","linkCount","iteration","maxAngle","link","ikCount","iks","parseIks","parseMorph","elementCount","morphCount","morphs","parseMorphs","parseMorphFrame","morphFrameCount","morphFrames","parseMorphFrames","parseBoneFrameName","boneFrameNameCount","boneFrameNames","parseBoneFrameNames","parseBoneFrame","frameIndex","boneFrameCount","boneFrames","parseBoneFrames","englishCompatibility","englishModelName","englishComment","parseEnglishBoneName","englishBoneNames","parseEnglishBoneNames","parseEnglishMorphName","englishMorphNames","parseEnglishMorphNames","parseEnglishBoneFrameName","englishBoneFrameNames","parseEnglishBoneFrameNames","parseToonTexture","toonTextures","parseToonTextures","parseRigidBody","groupIndex","groupTarget","shapeType","positionDamping","rotationDamping","restitution","friction","rigidBodyCount","parseRigidBodies","parseConstraint","rigidBodyIndex1","rigidBodyIndex2","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","springPosition","springRotation","constraintCount","constraints","parseConstraints","leftToRightModel","parsePmx","pmx","additionalUvNum","vertexIndexSize","textureIndexSize","materialIndexSize","boneIndexSize","morphIndexSize","rigidBodyIndexSize","auvs","indexSize","skinC","skinR0","skinR1","edgeRatio","textureCount","englishName","edgeColor","edgeSize","envTextureIndex","envFlag","toonFlag","transformationClass","connectIndex","offsetPosition","grant","isLocal","affectRotation","affectPosition","ratio","fixAxis","localXVector","localZVector","ik","angleLimitation","lowerLimitationAngle","upperLimitationAngle","panel","textureColor","sphereTextureColor","toonColor","parseFrame","frameCount","frames","parseFrames","parseVmd","vmd","parseMotion","frameNum","motionCount","motions","parseMotions","parseCamera","cameraCount","parseCameras","leftToRightVmd","parseVpd","vpd","throwError","parentFile","boneHeaderPattern","boneVectorPattern","boneQuaternionPattern","boneFooterPattern","leftToRightVpd","mergeVmds","vmds","helper","MMDParser","u2sTable","outputShiftJis","useOriginalBones","toStringsFromNumber","toStringsFromArray","bones2","poseSkin","getBindBones","quaternion2","bone2","originalMatrix","pArray","qArray","conjugate","table","unicodeToShiftjis","OBJExporter","indexVertex","indexVertexUvs","indexNormals","nbVertex","nbNormals","nbVertexUvs","normalMatrixWorld","parseMesh","parseLine","PLYExporter","traverseMeshes","geomToBufferGeom","excludeAttributes","includeNormals","includeColors","includeUVs","includeIndices","headerBin","vertexListLength","faceListLength","vOffset","fOffset","writtenVertices","vertexList","faceList","STLExporter","main"],"mappings":";;;;;;;g4BAAAA,EAAA,2CAAA,WACA,aACA,IAAAC,GACAC,UACAC,UAAAC,MAAA,MACAC,SAAAD,MAAA,IAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,yBACA,8BACA,oBACA,gBACA,6CACA,oCACA,KACAD,KAAA,OAEA,OAAAN,IAEAD,EAAA,4CAAA,WACA,aACA,IAAAS,GACAC,SACAC,cAAA,EACAC,mBAAA,GAEAV,UACAW,QAAAT,MAAA,MACAU,QAAAV,MAAA,MACAW,OAAAX,MAAA,GACAY,QAAAZ,MAAA,GACAa,UAAAb,MAAA,MACAc,SAAAd,MAAA,GACAe,UAAAf,MAAA,GACAgB,SAAAhB,MAAA,MAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,oBACA,oBACA,4BACA,4BACA,yBACA,0BACA,0BACA,yBACA,uBACA,wBACA,qBACA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IACA,2CACA,gCACA,gEACA,UACA,iEACA,WACA,IACA,gBACA,8CACA,+CACA,sCACA,2EAhFA,mCACA,mCACA,mCACA,4BACA,wCACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,+BACA,0BACA,KACAD,KAAA,OAEA,OAAAE,IAEAT,EAAA,wCACA,mBACA,SAAAqB,GACA,aACA,IAAAC,GACAZ,SACAa,YAAA,EACAC,UAAA,EACAC,eAAA,EACAC,gBAAA,EACAf,cAAA,EACAC,mBAAA,GAEAV,UACAY,QAAAV,MAAA,MACAD,UAAAC,MAAA,MACAuB,SAAAvB,MAAA,MACAwB,MAAAxB,MAAA,IAAAiB,EAAAQ,QAAA,IAAA,MACAC,YAAA1B,MAAA,GACA2B,WAAA3B,MAAA,KACA4B,wBAAA5B,MAAA,IAAAiB,EAAAY,SACAC,+BAAA9B,MAAA,IAAAiB,EAAAY,SACAE,OAAA/B,MAAA,GACAgC,WAAAhC,MAAA,IACAiC,MAAAjC,MAAA,IACAkC,eAAAlC,MAAA,GACAmC,cAAAnC,MAAA,KACAoC,YAAApC,MAAA,IAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,oBACA,oBACA,2BACA,8BACA,SACA,4BACA,0BACA,6BACA,SACA,4BACA,2BACA,uCACA,8CACA,uBACA,2BACA,sBACA,8BACA,+BACA,qBACA,4BACA,gBACA,qBACA,yDACA,6BACA,uCACA,UACA,wBACA,WACA,IACA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IACA,2CACA,gCACA,oEACA,UACA,qEACA,WACA,IACA,qGACA,uFACA,oFACA,4CACA,iEACA,IACA,mFACA,4BACA,0EACA,UACA,6EACA,WACA,IACA,iCACA,4CACA,6HACA,8DACA,8CACA,yEACA,oKACA,IACA,uCACA,4EACA,4DACA,kEACA,0DACA,iDACA,oEACA,sEACA,0EACA,kDACA,iEACA,8BACA,8BACA,2BACA,8CACA,yEACA,4BACA,2BACA,gDACA,+CACA,kBACA,QACA,mDACA,uFACA,gGACA,wBACA,MACA,oCACA,qDACA,IACA,gBACA,yCACA,6CACA,eACA,MACA,iDACA,0EACA,kEACA,2CACA,iDACA,KACAD,KAAA,OAEA,OAAAe,IAEAtB,EAAA,qDAAA,mBAAA,SAAAqB,GACA,aACA,IAAAoB,GACA/B,SACAgC,cAAA,EACA/B,cAAA,EACAC,mBAAA,GAEAV,UACAC,UAAAC,MAAA,MACAwB,MAAAxB,MAAA,IAAAiB,EAAAQ,QAAA,IAAA,MACAc,iBAAAvC,OAAA,IAAAiB,EAAAQ,QAAA,EAAA,KACAe,eAAAxC,OAAA,IACAU,QAAAV,MAAA,MACA0B,YAAA1B,MAAA,IACA2B,WAAA3B,MAAA,KACAyC,aAAAzC,MAAA,KAEAE,cACA,oBACA,qBACA,oBACA,yBACA,gBACA,cACA,2BACA,8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kEACA,wBACA,uCACA,+CACA,KACA,uEACA,KACA,wEACA,wEACA,cACA,uEACA,sEACA,0EACA,4EACA,6EACA,oEACA,wEACA,sEACA,KACA,0EACA,uEACA,wEACA,uEACA,2EACA,yEACA,wEACA,yEACA,kEACA,2EACA,0EACA,KACA,uFACA,GACA,oBACA,0BACA,iCACA,GACA,+BACA,GACA,iFACA,0BACA,SACA,kDACA,4DACA,yEACA,SACA,gCACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,6BACA,SACA,2CACA,sEACA,mEACA,8DACA,SACA,6EACA,2EACA,SACA,oDACA,wCACA,wCACA,iEACA,gDACA,SACA,iBACA,kBACA,SACA,mCACA,SACA,iFACA,0BACA,SACA,+CACA,6DACA,4EACA,yEACA,iCACA,SACA,iBACA,kBACA,SACA,gCACA,SACA,iFACA,uBACA,SACA,6CACA,6DACA,SACA,wDACA,yEACA,mEACA,SACA,6BACA,SACA,iFACA,iCACA,SACA,iCACA,SACA,gDACA,2CACA,SACA,gCACA,2CACA,aACA,+BACA,2CACA,aACA,gCACA,2CACA,aACA,qCACA,2CACA,aACA,SACA,iFACA,6BACA,SACA,oDACA,4DACA,SACA,6BACA,uCACA,aACA,gCACA,uCACA,aACA,+BACA,uCACA,aACA,iCACA,uCACA,aACA,SACA,GACA,GACA,iFACA,sDACA,iFACA,qEACA,iFACA,8BACA,SACA,oCACA,uEACA,uDACA,mEACA,SACA,iBACA,iFACA,2EACA,iFACA,8CACA,SACA,eACA,iFACA,8EACA,8DACA,gEACA,kEACA,6DACA,SACA,qCACA,SACA,GACA,GACA,iFACA,GACA,oDACA,GACA,iFACA,GACA,iFACA,4DACA,iFACA,kCACA,gCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,GACA,iFACA,yDACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,iFACA,sDACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,GACA,GACA,iFACA,GACA,8CACA,GACA,iFACA,2EACA,4BACA,kCACA,8BACA,8BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,6BACA,4CACA,gCACA,QACA,4BACA,mCACA,8BACA,gCACA,gCACA,gCACA,4BACA,8BACA,8BACA,8BACA,qCACA,SACA,iFACA,2BACA,kDACA,kEACA,SACA,iFACA,2BACA,mBACA,uBACA,uBACA,iDACA,6DACA,uDACA,wCACA,0EACA,YACA,2EACA,aACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,2BACA,2CACA,qDACA,oEACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,yBACA,8BACA,gCACA,gEACA,4EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,+DACA,wEACA,+DACA,wEACA,SACA,GACA,GACA,iFACA,2DACA,iFACA,gCACA,6DACA,QACA,6DACA,SACA,GACA,GACA,GACA,GACA,iFACA,GACA,kDACA,GACA,iFACA,qBACA,iFACA,8BACA,SACA,oFACA,gCACA,sBACA,SACA,sEACA,oFACA,qCACA,sCACA,oCACA,SACA,8BACA,4DACA,sCACA,iEACA,mBACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,oCACA,+CACA,wCACA,yCACA,sCACA,SACA,oCACA,+CACA,oEACA,mCACA,gCACA,gCACA,wCACA,yCACA,wCACA,yCACA,yCACA,SACA,oCACA,kDACA,+CACA,0CACA,2CACA,0CACA,2CACA,0CACA,SACA,oCACA,+DACA,+CACA,0CACA,2CACA,0CACA,2CACA,6CACA,SACA,oCACA,yDACA,gDACA,0DACA,oCACA,uCACA,8CACA,yEACA,6BACA,iCACA,mCACA,SACA,oCACA,iEACA,gDACA,2EACA,uCACA,+BACA,2BACA,gCACA,qCACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,iFACA,0CACA,2CACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,iEACA,yEACA,4DACA,uCACA,yBACA,qEACA,0CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,6DACA,yEACA,+EACA,+CACA,kEACA,qDACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,+EACA,sDACA,qCACA,+DACA,oDACA,0BACA,oDACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oDACA,yDACA,0EACA,2DACA,iDACA,wCACA,MACA,iFACA,uBACA,sBACA,sBACA,oCACA,kCACA,wDACA,4CACA,wCACA,oBACA,wCACA,qBACA,iBACA,wCACA,4DACA,iFACA,gBACA,4DACA,iFACA,iBACA,kCACA,qCACA,iBACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,YACA,oDACA,wCACA,oCACA,gBACA,oCACA,iBACA,mCACA,8GACA,8GACA,8GACA,8GACA,gBACA,wGACA,wGACA,wGACA,wGACA,iBACA,aACA,iFACA,2CACA,2CACA,4CACA,4CACA,2CACA,2CACA,+CACA,+CACA,sEACA,6CACA,oFACA,oDACA,iFACA,oBACA,kCACA,2BACA,gBACA,4BACA,iBACA,iFACA,oCACA,mCACA,+GACA,+GACA,+GACA,+GACA,gBACA,yGACA,yGACA,yGACA,yGACA,iBACA,YACA,uGACA,uGACA,aACA,iFACA,wCACA,wCACA,4CACA,8CACA,qDACA,qDACA,iFACA,4CACA,4CACA,uDACA,uDACA,iFACA,4CACA,4CACA,qEACA,qEACA,uDACA,uDACA,uDACA,uDACA,iFACA,sDACA,oDACA,gDACA,6DACA,iFACA,mCACA,mCACA,uDACA,0DACA,iFACA,2CACA,2CACA,wCACA,wCACA,yDACA,gEACA,0CACA,kEACA,iFACA,uBACA,uBACA,uBACA,wBACA,2DACA,2DACA,gDACA,gDACA,iFACA,uBACA,mDACA,mDACA,uBACA,mDACA,mDACA,kDACA,4DACA,6CACA,4DACA,iFACA,kCACA,qDACA,+CACA,6CACA,2CACA,iFACA,gCACA,gCACA,wDACA,wDACA,sDACA,sDACA,8CACA,sDACA,sDACA,iFACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,wCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,kEACA,kEACA,iDACA,kEACA,kEACA,iFACA,4CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,sEACA,sEACA,qDACA,sEACA,sEACA,iFACA,gDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,0EACA,0EACA,yDACA,0EACA,0EACA,iFACA,oDACA,uCACA,wFACA,wFACA,6EACA,6EACA,uEACA,uEACA,8EACA,8EACA,6DACA,8EACA,8EACA,iFACA,gCACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,yCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,mEACA,mEACA,iDACA,mEACA,mEACA,iFACA,6CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,uEACA,uEACA,qDACA,uEACA,uEACA,iFACA,iDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,2EACA,2EACA,yDACA,2EACA,2EACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,aACA,iFACA,4BACA,iCACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,iFACA,wCACA,wCACA,4CACA,4CACA,iFACA,4DACA,4CACA,4DACA,gDACA,iFACA,yCACA,uCACA,8DACA,6CACA,8DACA,uDACA,iFACA,gEACA,mEACA,8DACA,8DACA,8BACA,wCACA,YACA,+DACA,aACA,IACA,iFACA,SACA,GACA,gBACA,oCACA,WACA,iBACA,gBACA,gBACA,gBACA,kBACA,iBACA,iBACA,iBACA,YACA,aACA,cACA,WACA,WACA,WACA,gBACA,OACA,GACA,wDACA,iDACA,KACAD,KAAA,OAEA,OAAAiF,IAEAxF,EAAA,yCACA,mBACA,SAAAqB,GACA,aACA,IAAAqE,GACAhF,SACAE,mBAAA,EACA+E,YAAA,IAEAzF,UACAC,UAAAC,MAAA,MACAuB,SAAAvB,MAAA,MACAU,QAAAV,MAAA,MACAwF,QAAAxF,MAAA,MACAyF,QAAAzF,MAAA,MACA0B,YAAA1B,MAAA,MACA2B,WAAA3B,MAAA,MACAqF,YAAArF,MAAA,IAAAiB,EAAAQ,SACAG,wBAAA5B,MAAA,IAAAiB,EAAAY,SACAC,+BAAA9B,MAAA,IAAAiB,EAAAY,SACAM,cAAAnC,MAAA,GACA0F,aAAA1F,MAAA,MACA2F,aAAA3F,MAAA,MAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,8BACA,6BACA,4BACA,4BACA,sCACA,2BACA,4BACA,2BACA,uCACA,8CACA,8BACA,6BACA,6BACA,oBACA,qBACA,mDACA,kDACA,IACA,yDACA,gCACA,gEACA,kFACA,uEACA,UACA,iDACA,WACA,IACA,2CACA,gCACA,sEACA,UACA,uEACA,WACA,IACA,qGACA,uFACA,oFACA,4CACA,iEACA,IACA,uDACA,0EACA,IACA,gBACA,mCACA,qCACA,8DACA,4CACA,qEACA,6DACA,iFACA,mDACA,gEACA,0BACA,8CACA,sDACA,yEACA,+EACA,0CACA,0DACA,yDACA,4FACA,6CACA,0DACA,0BACA,QACA,MACA,qEACA,yDACA,KACAD,KAAA,OAEAyF,GACAtF,SAAAE,mBAAA,GACAV,UACAY,QAAAV,MAAA,MACA0B,YAAA1B,MAAA,MACA2B,WAAA3B,MAAA,OAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,4BACA,4BACA,2BACA,oBACA,qBACA,yDACA,gCACA,gEACA,kFACA,uEACA,UACA,iDACA,WACA,IACA,gBACA,yCACA,qDACA,KACAD,KAAA,OAEA0F,GACA/F,UACAC,UAAAC,MAAA,MACAqF,YAAArF,MAAA,IAAAiB,EAAAQ,UAEAvB,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,8BACA,2BACA,oBACA,gBACA,2CACA,wBACA,wCACA,0CACA,sEACA,yDACA,QACA,MACA,gEACA,KACAD,KAAA,OAEA,OACAmF,WAAAA,EACAM,gBAAAA,EACAC,eAAAA,KAGAjG,EAAA,2CAAA,WACA,aACA,IAAAkG,GACAhG,UACAC,UAAAC,MAAA,MACA+F,MAAA/F,MAAA,GACAgG,YAAAhG,MAAA,IACAiG,YAAAjG,MAAA,KACAkG,QAAAlG,MAAA,MACAmG,WAAAnG,MAAA,IAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,oBACA,sBACA,0BACA,4BACA,4BACA,wBACA,8BACA,oBACA,gBACA,sDACA,mCACA,0FACA,oEACA,2EACA,oGACA,sBACA,+EACA,MACA,uDACA,KACAD,KAAA,OAEA,OAAA2F,IAEAlG,EAAA,8CAAA,mBAAA,SAAAqB,GACA,aACA,IAAAmF,GACAtG,UACAC,UAAAC,MAAA,MACAqG,OAAArG,MAAA,IAAAiB,EAAAQ,QAAA,IAAA,MACA6E,QAAAtG,MAAA,IAAAiB,EAAAQ,QAAA,GAAA,KACA8E,OAAAvG,MAAA,MACA+B,OAAA/B,MAAA,IAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,uBACA,uBACA,uBACA,sBACA,8BACA,oBACA,oBACA,8CACA,qCACA,+EACA,sDACA,IACA,gBACA,6CACA,2DACA,8EACA,KACAD,KAAA,OAEA,OAAAiG,IAEAxG,EAAA,iDAAA,WACA,aACA,IAAA4G,GACA1G,UAAAC,UAAAC,MAAA,OACAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,oBACA,8BACA,oBACA,gBACA,6CACA,sDACA,6CACA,KACAD,KAAA,OAEA,OAAAqG,IAEA5G,EAAA,kDACA,mBACA,SAAAqB,GACA,aACA,IAAAwF,GACA3G,UACAC,UAAAC,MAAA,MACAqF,YAAArF,MAAA,IAAAiB,EAAAQ,UAEAvB,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,8BACA,2BACA,oBACA,gBACA,iEACA,0DACA,0DACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,yEACA,8EACA,gEACA,+DACA,8EACA,gEACA,+DACA,qEACA,yCACA,KACAD,KAAA,OAEA,OAAAsG,IAEA7G,EAAA,6CAAA,mBAAA,SAAAqB,GACA,aACA,IAAAyF,GACA5G,UACAC,UAAAC,MAAA,MACA2G,OAAA3G,MAAA,IAAAiB,EAAAiE,MAAA,YAEAhF,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,sBACA,8BACA,oBACA,gBACA,6CACA,6CACA,sCACA,+CACA,KACAD,KAAA,OAEA,OAAAuG,IAEA9G,EAAA,8CAAA,WACA,aACA,IAAAgH,GACA9G,UACAC,UAAAC,MAAA,MACA6G,kBAAA7G,MAAA,GACA8G,cAAA9G,MAAA,MACA+G,cAAA/G,MAAA,IACAgH,cAAAhH,MAAA,KACAiH,YAAAjH,MAAA,KAEAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,oBACA,8BACA,oBACA,4BACA,8BACA,8BACA,2BACA,oCACA,QACA,oCACA,SACA,gCACA,6BACA,iEACA,UACA,wCACA,WACA,2DACA,gFACA,qHACA,oCACA,IACA,gBACA,6CACA,0DACA,KACAD,KAAA,OAEA,OAAAyG,IAEAhH,EAAA,kDAAA,WACA,aACA,IAAAsH,GACApH,UAAAC,UAAAC,MAAA,OACAE,cACA,oBACA,gBACA,cACA,8EACA,KACAC,KAAA,MACAC,gBACA,8BACA,oBACA,gBA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","file":"../skylark-threejs-ex.js","sourcesContent":["define('skylark-threejs-ex/shaders/CopyShader',[],function () {\n    'use strict';\n    var CopyShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float opacity;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tgl_FragColor = opacity * texel;',\n            '}'\n        ].join('\\n')\n    };\n    return CopyShader;\n});\ndefine('skylark-threejs-ex/shaders/BokehShader',[],function () {\n    'use strict';\n    var BokehShader = {\n        defines: {\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tColor': { value: null },\n            'tDepth': { value: null },\n            'focus': { value: 1 },\n            'aspect': { value: 1 },\n            'aperture': { value: 0.025 },\n            'maxblur': { value: 1 },\n            'nearClip': { value: 1 },\n            'farClip': { value: 1000 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            'uniform sampler2D tColor;',\n            'uniform sampler2D tDepth;',\n            'uniform float maxblur;',\n            'uniform float aperture;',\n            'uniform float nearClip;',\n            'uniform float farClip;',\n            'uniform float focus;',\n            'uniform float aspect;',\n            '#include <packing>',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, nearClip, farClip );',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tvec2 aspectcorrect = vec2( 1.0, aspect );',\n            '\\tfloat viewZ = getViewZ( getDepth( vUv ) );',\n            '\\tfloat factor = ( focus + viewZ );',\n            '\\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );',\n            '\\tvec2 dofblur9 = dofblur * 0.9;',\n            '\\tvec2 dofblur7 = dofblur * 0.7;',\n            '\\tvec2 dofblur4 = dofblur * 0.4;',\n            '\\tvec4 col = vec4( 0.0 );',\n            '\\tcol += texture2D( tColor, vUv.xy );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );',\n            '\\tgl_FragColor = col / 41.0;',\n            '\\tgl_FragColor.a = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n    return BokehShader;\n});\ndefine('skylark-threejs-ex/shaders/SAOShader',[\n   \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SAOShader = {\n        defines: {\n            'NUM_SAMPLES': 7,\n            'NUM_RINGS': 4,\n            'NORMAL_TEXTURE': 0,\n            'DIFFUSE_TEXTURE': 0,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDepth': { value: null },\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'cameraNear': { value: 1 },\n            'cameraFar': { value: 100 },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'scale': { value: 1 },\n            'intensity': { value: 0.1 },\n            'bias': { value: 0.5 },\n            'minResolution': { value: 0 },\n            'kernelRadius': { value: 100 },\n            'randomSeed': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            '#if DIFFUSE_TEXTURE == 1',\n            'uniform sampler2D tDiffuse;',\n            '#endif',\n            'uniform sampler2D tDepth;',\n            '#if NORMAL_TEXTURE == 1',\n            'uniform sampler2D tNormal;',\n            '#endif',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float scale;',\n            'uniform float intensity;',\n            'uniform float bias;',\n            'uniform float kernelRadius;',\n            'uniform float minResolution;',\n            'uniform vec2 size;',\n            'uniform float randomSeed;',\n            '// RGBA depth',\n            '#include <packing>',\n            'vec4 getDefaultColor( const in vec2 screenPosition ) {',\n            '\\t#if DIFFUSE_TEXTURE == 1',\n            '\\treturn texture2D( tDiffuse, vUv );',\n            '\\t#else',\n            '\\treturn vec4( 1.0 );',\n            '\\t#endif',\n            '}',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',\n            '\\t#if NORMAL_TEXTURE == 1',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '\\t#else',\n            '\\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',\n            '\\t#endif',\n            '}',\n            'float scaleDividedByCameraFar;',\n            'float minResolutionMultipliedByCameraFar;',\n            'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',\n            '\\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',\n            '\\tfloat viewDistance = length( viewDelta );',\n            '\\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',\n            '\\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',\n            '}',\n            '// moving costly divides into consts',\n            'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',\n            'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',\n            'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',\n            '\\t// precompute some variables require in getOcclusion.',\n            '\\tscaleDividedByCameraFar = scale / cameraFar;',\n            '\\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',\n            '\\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',\n            '\\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',\n            '\\tfloat angle = rand( vUv + randomSeed ) * PI2;',\n            '\\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',\n            '\\tvec2 radiusStep = radius;',\n            '\\tfloat occlusionSum = 0.0;',\n            '\\tfloat weightSum = 0.0;',\n            '\\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',\n            '\\t\\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',\n            '\\t\\tradius += radiusStep;',\n            '\\t\\tangle += ANGLE_STEP;',\n            '\\t\\tfloat sampleDepth = getDepth( sampleUv );',\n            '\\t\\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\t\\tcontinue;',\n            '\\t\\t}',\n            '\\t\\tfloat sampleViewZ = getViewZ( sampleDepth );',\n            '\\t\\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',\n            '\\t\\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',\n            '\\t\\tweightSum += 1.0;',\n            '\\t}',\n            '\\tif( weightSum == 0.0 ) discard;',\n            '\\treturn occlusionSum * ( intensity / weightSum );',\n            '}',\n            'void main() {',\n            '\\tfloat centerDepth = getDepth( vUv );',\n            '\\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = getViewZ( centerDepth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',\n            '\\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',\n            '\\tgl_FragColor = getDefaultColor( vUv );',\n            '\\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',\n            '}'\n        ].join('\\n')\n    };\n    return SAOShader;\n});\ndefine('skylark-threejs-ex/shaders/DepthLimitedBlurShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var DepthLimitedBlurShader = {\n        defines: {\n            'KERNEL_RADIUS': 4,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'sampleUvOffsets': { value: [new THREE.Vector2(0, 0)] },\n            'sampleWeights': { value: [1] },\n            'tDepth': { value: null },\n            'cameraNear': { value: 10 },\n            'cameraFar': { value: 1000 },\n            'depthCutoff': { value: 10 }\n        },\n        vertexShader: [\n            '#include <common>',\n            'uniform vec2 size;',\n            'varying vec2 vUv;',\n            'varying vec2 vInvSize;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tvInvSize = 1.0 / size;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            '#include <packing>',\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tDepth;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform float depthCutoff;',\n            'uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];',\n            'uniform float sampleWeights[ KERNEL_RADIUS + 1 ];',\n            'varying vec2 vUv;',\n            'varying vec2 vInvSize;',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getDepth( vUv );',\n            '\\tif( depth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = -getViewZ( depth );',\n            '\\tbool rBreak = false, lBreak = false;',\n            '\\tfloat weightSum = sampleWeights[0];',\n            '\\tvec4 diffuseSum = texture2D( tDiffuse, vUv ) * weightSum;',\n            '\\tfor( int i = 1; i <= KERNEL_RADIUS; i ++ ) {',\n            '\\t\\tfloat sampleWeight = sampleWeights[i];',\n            '\\t\\tvec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;',\n            '\\t\\tvec2 sampleUv = vUv + sampleUvOffset;',\n            '\\t\\tfloat viewZ = -getViewZ( getDepth( sampleUv ) );',\n            '\\t\\tif( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;',\n            '\\t\\tif( ! rBreak ) {',\n            '\\t\\t\\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',\n            '\\t\\t\\tweightSum += sampleWeight;',\n            '\\t\\t}',\n            '\\t\\tsampleUv = vUv - sampleUvOffset;',\n            '\\t\\tviewZ = -getViewZ( getDepth( sampleUv ) );',\n            '\\t\\tif( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;',\n            '\\t\\tif( ! lBreak ) {',\n            '\\t\\t\\tdiffuseSum += texture2D( tDiffuse, sampleUv ) * sampleWeight;',\n            '\\t\\t\\tweightSum += sampleWeight;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tgl_FragColor = diffuseSum / weightSum;',\n            '}'\n        ].join('\\n')\n    };\n    var BlurShaderUtils = DepthLimitedBlurShader.BlurShaderUtils = {\n        createSampleWeights: function (kernelRadius, stdDev) {\n            var gaussian = function (x, stdDev) {\n                return Math.exp(-(x * x) / (2 * (stdDev * stdDev))) / (Math.sqrt(2 * Math.PI) * stdDev);\n            };\n            var weights = [];\n            for (var i = 0; i <= kernelRadius; i++) {\n                weights.push(gaussian(i, stdDev));\n            }\n            return weights;\n        },\n        createSampleOffsets: function (kernelRadius, uvIncrement) {\n            var offsets = [];\n            for (var i = 0; i <= kernelRadius; i++) {\n                offsets.push(uvIncrement.clone().multiplyScalar(i));\n            }\n            return offsets;\n        },\n        configure: function (material, kernelRadius, stdDev, uvIncrement) {\n            material.defines['KERNEL_RADIUS'] = kernelRadius;\n            material.uniforms['sampleUvOffsets'].value = BlurShaderUtils.createSampleOffsets(kernelRadius, uvIncrement);\n            material.uniforms['sampleWeights'].value = BlurShaderUtils.createSampleWeights(kernelRadius, stdDev);\n            material.needsUpdate = true;\n        }\n    };\n\n    return DepthLimitedBlurShader;\n    \n});\ndefine('skylark-threejs-ex/shaders/UnpackDepthRGBAShader',[],function () {\n    'use strict';\n    var UnpackDepthRGBAShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'opacity': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float opacity;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'void main() {',\n            '\\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );',\n            '\\tgl_FragColor = vec4( vec3( depth ), opacity );',\n            '}'\n        ].join('\\n')\n    };\n    return  UnpackDepthRGBAShader ;\n});\ndefine('skylark-threejs-ex/shaders/ConvolutionShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var ConvolutionShader = {\n        defines: {\n            'KERNEL_SIZE_FLOAT': '25.0',\n            'KERNEL_SIZE_INT': '25'\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'uImageIncrement': { value: new THREE.Vector2(0.001953125, 0) },\n            'cKernel': { value: [] }\n        },\n        vertexShader: [\n            'uniform vec2 uImageIncrement;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float cKernel[ KERNEL_SIZE_INT ];',\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 uImageIncrement;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 imageCoord = vUv;',\n            '\\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );',\n            '\\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {',\n            '\\t\\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];',\n            '\\t\\timageCoord += uImageIncrement;',\n            '\\t}',\n            '\\tgl_FragColor = sum;',\n            '}'\n        ].join('\\n'),\n        buildKernel: function (sigma) {\n            function gauss(x, sigma) {\n                return Math.exp(-(x * x) / (2 * sigma * sigma));\n            }\n            var i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil(sigma * 3) + 1;\n            if (kernelSize > kMaxKernelSize)\n                kernelSize = kMaxKernelSize;\n            halfWidth = (kernelSize - 1) * 0.5;\n            values = new Array(kernelSize);\n            sum = 0;\n            for (i = 0; i < kernelSize; ++i) {\n                values[i] = gauss(i - halfWidth, sigma);\n                sum += values[i];\n            }\n            for (i = 0; i < kernelSize; ++i)\n                values[i] /= sum;\n            return values;\n        }\n    };\n    return ConvolutionShader;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityHighPassShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var LuminosityHighPassShader = {\n        shaderID: 'luminosityHighPass',\n        uniforms: {\n            'tDiffuse': { value: null },\n            'luminosityThreshold': { value: 1 },\n            'smoothWidth': { value: 1 },\n            'defaultColor': { value: new THREE.Color(0) },\n            'defaultOpacity': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec3 defaultColor;',\n            'uniform float defaultOpacity;',\n            'uniform float luminosityThreshold;',\n            'uniform float smoothWidth;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\n            '\\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\n            '\\tgl_FragColor = mix( outputColor, texel, alpha );',\n            '}'\n        ].join('\\n')\n    };\n    return LuminosityHighPassShader;\n});\ndefine('skylark-threejs-ex/shaders/FXAAShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var FXAAShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new  THREE.Vector2(1 / 1024, 1 / 512) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'precision highp float;',\n            '',\n            'uniform sampler2D tDiffuse;',\n            '',\n            'uniform vec2 resolution;',\n            '',\n            'varying vec2 vUv;',\n            '',\n            '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)',\n            '',\n            '//----------------------------------------------------------------------------------',\n            '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag',\n            '// SDK Version: v3.00',\n            '// Email:       gameworks@nvidia.com',\n            '// Site:        http://developer.nvidia.com/',\n            '//',\n            '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.',\n            '//',\n            '// Redistribution and use in source and binary forms, with or without',\n            '// modification, are permitted provided that the following conditions',\n            '// are met:',\n            '//  * Redistributions of source code must retain the above copyright',\n            '//    notice, this list of conditions and the following disclaimer.',\n            '//  * Redistributions in binary form must reproduce the above copyright',\n            '//    notice, this list of conditions and the following disclaimer in the',\n            '//    documentation and/or other materials provided with the distribution.',\n            '//  * Neither the name of NVIDIA CORPORATION nor the names of its',\n            '//    contributors may be used to endorse or promote products derived',\n            '//    from this software without specific prior written permission.',\n            '//',\n            \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\n            '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',\n            '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',\n            '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR',\n            '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,',\n            '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,',\n            '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR',\n            '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY',\n            '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',\n            '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE',\n            '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',\n            '//',\n            '//----------------------------------------------------------------------------------',\n            '',\n            '#define FXAA_PC 1',\n            '#define FXAA_GLSL_100 1',\n            '#define FXAA_QUALITY_PRESET 12',\n            '',\n            '#define FXAA_GREEN_AS_LUMA 1',\n            '',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_PC_CONSOLE',\n            '    //',\n            '    // The console algorithm for PC is included',\n            '    // for developers targeting really low spec machines.',\n            '    // Likely better to just run FXAA_PC, and use a really low preset.',\n            '    //',\n            '    #define FXAA_PC_CONSOLE 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GLSL_120',\n            '    #define FXAA_GLSL_120 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GLSL_130',\n            '    #define FXAA_GLSL_130 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_3',\n            '    #define FXAA_HLSL_3 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_4',\n            '    #define FXAA_HLSL_4 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_HLSL_5',\n            '    #define FXAA_HLSL_5 0',\n            '#endif',\n            '/*==========================================================================*/',\n            '#ifndef FXAA_GREEN_AS_LUMA',\n            '    //',\n            '    // For those using non-linear color,',\n            '    // and either not able to get luma in alpha, or not wanting to,',\n            '    // this enables FXAA to run using green as a proxy for luma.',\n            '    // So with this enabled, no need to pack luma in alpha.',\n            '    //',\n            '    // This will turn off AA on anything which lacks some amount of green.',\n            '    // Pure red and blue or combination of only R and B, will get no AA.',\n            '    //',\n            '    // Might want to lower the settings for both,',\n            '    //    fxaaConsoleEdgeThresholdMin',\n            '    //    fxaaQualityEdgeThresholdMin',\n            '    // In order to insure AA does not get turned off on colors',\n            '    // which contain a minor amount of green.',\n            '    //',\n            '    // 1 = On.',\n            '    // 0 = Off.',\n            '    //',\n            '    #define FXAA_GREEN_AS_LUMA 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_EARLY_EXIT',\n            '    //',\n            \"    // Controls algorithm's early exit path.\",\n            '    // On PS3 turning this ON adds 2 cycles to the shader.',\n            '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',\n            '    // Turning this off on console will result in a more blurry image.',\n            '    // So this defaults to on.',\n            '    //',\n            '    // 1 = On.',\n            '    // 0 = Off.',\n            '    //',\n            '    #define FXAA_EARLY_EXIT 1',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_DISCARD',\n            '    //',\n            '    // Only valid for PC OpenGL currently.',\n            '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',\n            '    //',\n            \"    // 1 = Use discard on pixels which don't need AA.\",\n            '    //     For APIs which enable concurrent TEX+ROP from same surface.',\n            \"    // 0 = Return unchanged color on pixels which don't need AA.\",\n            '    //',\n            '    #define FXAA_DISCARD 0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_FAST_PIXEL_OFFSET',\n            '    //',\n            '    // Used for GLSL 120 only.',\n            '    //',\n            '    // 1 = GL API supports fast pixel offsets',\n            '    // 0 = do not use fast pixel offsets',\n            '    //',\n            '    #ifdef GL_EXT_gpu_shader4',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifdef GL_NV_gpu_shader5',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifdef GL_ARB_gpu_shader5',\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\n            '    #endif',\n            '    #ifndef FXAA_FAST_PIXEL_OFFSET',\n            '        #define FXAA_FAST_PIXEL_OFFSET 0',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#ifndef FXAA_GATHER4_ALPHA',\n            '    //',\n            '    // 1 = API supports gather4 on alpha channel.',\n            '    // 0 = API does not support gather4 on alpha channel.',\n            '    //',\n            '    #if (FXAA_HLSL_5 == 1)',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifdef GL_ARB_gpu_shader5',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifdef GL_NV_gpu_shader5',\n            '        #define FXAA_GATHER4_ALPHA 1',\n            '    #endif',\n            '    #ifndef FXAA_GATHER4_ALPHA',\n            '        #define FXAA_GATHER4_ALPHA 0',\n            '    #endif',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '                        FXAA QUALITY - TUNING KNOBS',\n            '------------------------------------------------------------------------------',\n            'NOTE the other tuning knobs are now in the shader function inputs!',\n            '============================================================================*/',\n            '#ifndef FXAA_QUALITY_PRESET',\n            '    //',\n            '    // Choose the quality preset.',\n            '    // This needs to be compiled into the shader as it effects code.',\n            '    // Best option to include multiple presets is to',\n            '    // in each shader define the preset, then include this file.',\n            '    //',\n            '    // OPTIONS',\n            '    // -----------------------------------------------------------------------',\n            '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',\n            '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',\n            '    // 39       - no dither, very expensive',\n            '    //',\n            '    // NOTES',\n            '    // -----------------------------------------------------------------------',\n            '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',\n            '    // 13 = about same speed as FXAA 3.9 and better than 12',\n            '    // 23 = closest to FXAA 3.9 visually and performance wise',\n            '    //  _ = the lowest digit is directly related to performance',\n            '    // _  = the highest digit is directly related to style',\n            '    //',\n            '    #define FXAA_QUALITY_PRESET 12',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                           FXAA QUALITY - PRESETS',\n            '',\n            '============================================================================*/',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - MEDIUM DITHER PRESETS',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 10)',\n            '    #define FXAA_QUALITY_PS 3',\n            '    #define FXAA_QUALITY_P0 1.5',\n            '    #define FXAA_QUALITY_P1 3.0',\n            '    #define FXAA_QUALITY_P2 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 11)',\n            '    #define FXAA_QUALITY_PS 4',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 3.0',\n            '    #define FXAA_QUALITY_P3 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 12)',\n            '    #define FXAA_QUALITY_PS 5',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 4.0',\n            '    #define FXAA_QUALITY_P4 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 13)',\n            '    #define FXAA_QUALITY_PS 6',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 4.0',\n            '    #define FXAA_QUALITY_P5 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 14)',\n            '    #define FXAA_QUALITY_PS 7',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 4.0',\n            '    #define FXAA_QUALITY_P6 12.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 15)',\n            '    #define FXAA_QUALITY_PS 8',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 4.0',\n            '    #define FXAA_QUALITY_P7 12.0',\n            '#endif',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - LOW DITHER PRESETS',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 20)',\n            '    #define FXAA_QUALITY_PS 3',\n            '    #define FXAA_QUALITY_P0 1.5',\n            '    #define FXAA_QUALITY_P1 2.0',\n            '    #define FXAA_QUALITY_P2 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 21)',\n            '    #define FXAA_QUALITY_PS 4',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 22)',\n            '    #define FXAA_QUALITY_PS 5',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 23)',\n            '    #define FXAA_QUALITY_PS 6',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 24)',\n            '    #define FXAA_QUALITY_PS 7',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 3.0',\n            '    #define FXAA_QUALITY_P6 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 25)',\n            '    #define FXAA_QUALITY_PS 8',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 4.0',\n            '    #define FXAA_QUALITY_P7 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 26)',\n            '    #define FXAA_QUALITY_PS 9',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 4.0',\n            '    #define FXAA_QUALITY_P8 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 27)',\n            '    #define FXAA_QUALITY_PS 10',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 4.0',\n            '    #define FXAA_QUALITY_P9 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 28)',\n            '    #define FXAA_QUALITY_PS 11',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 4.0',\n            '    #define FXAA_QUALITY_P10 8.0',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_QUALITY_PRESET == 29)',\n            '    #define FXAA_QUALITY_PS 12',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.5',\n            '    #define FXAA_QUALITY_P2 2.0',\n            '    #define FXAA_QUALITY_P3 2.0',\n            '    #define FXAA_QUALITY_P4 2.0',\n            '    #define FXAA_QUALITY_P5 2.0',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 2.0',\n            '    #define FXAA_QUALITY_P10 4.0',\n            '    #define FXAA_QUALITY_P11 8.0',\n            '#endif',\n            '',\n            '/*============================================================================',\n            '                     FXAA QUALITY - EXTREME QUALITY',\n            '============================================================================*/',\n            '#if (FXAA_QUALITY_PRESET == 39)',\n            '    #define FXAA_QUALITY_PS 12',\n            '    #define FXAA_QUALITY_P0 1.0',\n            '    #define FXAA_QUALITY_P1 1.0',\n            '    #define FXAA_QUALITY_P2 1.0',\n            '    #define FXAA_QUALITY_P3 1.0',\n            '    #define FXAA_QUALITY_P4 1.0',\n            '    #define FXAA_QUALITY_P5 1.5',\n            '    #define FXAA_QUALITY_P6 2.0',\n            '    #define FXAA_QUALITY_P7 2.0',\n            '    #define FXAA_QUALITY_P8 2.0',\n            '    #define FXAA_QUALITY_P9 2.0',\n            '    #define FXAA_QUALITY_P10 4.0',\n            '    #define FXAA_QUALITY_P11 8.0',\n            '#endif',\n            '',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                                API PORTING',\n            '',\n            '============================================================================*/',\n            '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',\n            '    #define FxaaBool bool',\n            '    #define FxaaDiscard discard',\n            '    #define FxaaFloat float',\n            '    #define FxaaFloat2 vec2',\n            '    #define FxaaFloat3 vec3',\n            '    #define FxaaFloat4 vec4',\n            '    #define FxaaHalf float',\n            '    #define FxaaHalf2 vec2',\n            '    #define FxaaHalf3 vec3',\n            '    #define FxaaHalf4 vec4',\n            '    #define FxaaInt2 ivec2',\n            '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',\n            '    #define FxaaTex sampler2D',\n            '#else',\n            '    #define FxaaBool bool',\n            '    #define FxaaDiscard clip(-1)',\n            '    #define FxaaFloat float',\n            '    #define FxaaFloat2 float2',\n            '    #define FxaaFloat3 float3',\n            '    #define FxaaFloat4 float4',\n            '    #define FxaaHalf half',\n            '    #define FxaaHalf2 half2',\n            '    #define FxaaHalf3 half3',\n            '    #define FxaaHalf4 half4',\n            '    #define FxaaSat(x) saturate(x)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_100 == 1)',\n            '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',\n            '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_120 == 1)',\n            '    // Requires,',\n            '    //  #version 120',\n            '    // And at least,',\n            '    //  #extension GL_EXT_gpu_shader4 : enable',\n            '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',\n            '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',\n            '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',\n            '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',\n            '    #else',\n            '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',\n            '    #endif',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_GLSL_130 == 1)',\n            '    // Requires \"#version 130\" or better',\n            '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\n            '    #endif',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_3 == 1)',\n            '    #define FxaaInt2 float2',\n            '    #define FxaaTex sampler2D',\n            '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',\n            '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_4 == 1)',\n            '    #define FxaaInt2 int2',\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n            '#endif',\n            '/*--------------------------------------------------------------------------*/',\n            '#if (FXAA_HLSL_5 == 1)',\n            '    #define FxaaInt2 int2',\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\n            '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',\n            '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',\n            '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',\n            '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',\n            '#endif',\n            '',\n            '',\n            '/*============================================================================',\n            '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',\n            '============================================================================*/',\n            '#if (FXAA_GREEN_AS_LUMA == 0)',\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',\n            '#else',\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',\n            '#endif',\n            '',\n            '',\n            '',\n            '',\n            '/*============================================================================',\n            '',\n            '                             FXAA3 QUALITY - PC',\n            '',\n            '============================================================================*/',\n            '#if (FXAA_PC == 1)',\n            '/*--------------------------------------------------------------------------*/',\n            'FxaaFloat4 FxaaPixelShader(',\n            '    //',\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\n            '    // {xy} = center of pixel',\n            '    FxaaFloat2 pos,',\n            '    //',\n            '    // Used only for FXAA Console, and not used on the 360 version.',\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\n            '    // {xy_} = upper left of pixel',\n            '    // {_zw} = lower right of pixel',\n            '    FxaaFloat4 fxaaConsolePosPos,',\n            '    //',\n            '    // Input color texture.',\n            '    // {rgb_} = color in linear or perceptual color space',\n            '    // if (FXAA_GREEN_AS_LUMA == 0)',\n            '    //     {__a} = luma in perceptual color space (not linear)',\n            '    FxaaTex tex,',\n            '    //',\n            '    // Only used on the optimized 360 version of FXAA Console.',\n            '    // For everything but 360, just use the same input here as for \"tex\".',\n            '    // For 360, same texture, just alias with a 2nd sampler.',\n            '    // This sampler needs to have an exponent bias of -1.',\n            '    FxaaTex fxaaConsole360TexExpBiasNegOne,',\n            '    //',\n            '    // Only used on the optimized 360 version of FXAA Console.',\n            '    // For everything but 360, just use the same input here as for \"tex\".',\n            '    // For 360, same texture, just alias with a 3nd sampler.',\n            '    // This sampler needs to have an exponent bias of -2.',\n            '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This must be from a constant/uniform.',\n            '    // {x_} = 1.0/screenWidthInPixels',\n            '    // {_y} = 1.0/screenHeightInPixels',\n            '    FxaaFloat2 fxaaQualityRcpFrame,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This must be from a constant/uniform.',\n            '    // This effects sub-pixel AA quality and inversely sharpness.',\n            '    //   Where N ranges between,',\n            '    //     N = 0.50 (default)',\n            '    //     N = 0.33 (sharper)',\n            '    // {x__} = -N/screenWidthInPixels',\n            '    // {_y_} = -N/screenHeightInPixels',\n            '    // {_z_} =  N/screenWidthInPixels',\n            '    // {__w} =  N/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // Not used on 360, but used on PS3 and PC.',\n            '    // This must be from a constant/uniform.',\n            '    // {x__} = -2.0/screenWidthInPixels',\n            '    // {_y_} = -2.0/screenHeightInPixels',\n            '    // {_z_} =  2.0/screenWidthInPixels',\n            '    // {__w} =  2.0/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',\n            '    // This must be from a constant/uniform.',\n            '    // {x__} =  8.0/screenWidthInPixels',\n            '    // {_y_} =  8.0/screenHeightInPixels',\n            '    // {_z_} = -4.0/screenWidthInPixels',\n            '    // {__w} = -4.0/screenHeightInPixels',\n            '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_SUBPIX define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Choose the amount of sub-pixel aliasing removal.',\n            '    // This can effect sharpness.',\n            '    //   1.00 - upper limit (softer)',\n            '    //   0.75 - default amount of filtering',\n            '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',\n            '    //   0.25 - almost off',\n            '    //   0.00 - completely off',\n            '    FxaaFloat fxaaQualitySubpix,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',\n            '    // It is here now to allow easier tuning.',\n            '    // The minimum amount of local contrast required to apply algorithm.',\n            '    //   0.333 - too little (faster)',\n            '    //   0.250 - low quality',\n            '    //   0.166 - default',\n            '    //   0.125 - high quality',\n            '    //   0.063 - overkill (slower)',\n            '    FxaaFloat fxaaQualityEdgeThreshold,',\n            '    //',\n            '    // Only used on FXAA Quality.',\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Trims the algorithm from processing darks.',\n            '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',\n            '    //   0.0625 - high quality (faster)',\n            '    //   0.0312 - visible limit (slower)',\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n            '    //   Likely want to set this to zero.',\n            '    //   As colors that are mostly not-green',\n            '    //   will appear very dark in the green channel!',\n            '    //   Tune by looking at mostly non-green content,',\n            '    //   then start at zero and increase until aliasing is a problem.',\n            '    FxaaFloat fxaaQualityEdgeThresholdMin,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',\n            '    // It is here now to allow easier tuning.',\n            '    // This does not effect PS3, as this needs to be compiled in.',\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',\n            '    //   Due to the PS3 being ALU bound,',\n            '    //   there are only three safe values here: 2 and 4 and 8.',\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n            '    // For all other platforms can be a non-power of two.',\n            '    //   8.0 is sharper (default!!!)',\n            '    //   4.0 is softer',\n            '    //   2.0 is really soft (good only for vector graphics inputs)',\n            '    FxaaFloat fxaaConsoleEdgeSharpness,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',\n            '    // It is here now to allow easier tuning.',\n            '    // This does not effect PS3, as this needs to be compiled in.',\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',\n            '    //   Due to the PS3 being ALU bound,',\n            '    //   there are only two safe values here: 1/4 and 1/8.',\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\n            '    // The console setting has a different mapping than the quality setting.',\n            '    // Other platforms can use other values.',\n            '    //   0.125 leaves less aliasing, but is softer (default!!!)',\n            '    //   0.25 leaves more aliasing, and is sharper',\n            '    FxaaFloat fxaaConsoleEdgeThreshold,',\n            '    //',\n            '    // Only used on FXAA Console.',\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',\n            '    // It is here now to allow easier tuning.',\n            '    // Trims the algorithm from processing darks.',\n            '    // The console setting has a different mapping than the quality setting.',\n            '    // This only applies when FXAA_EARLY_EXIT is 1.',\n            '    // This does not apply to PS3,',\n            '    // PS3 was simplified to avoid more shader instructions.',\n            '    //   0.06 - faster but more aliasing in darks',\n            '    //   0.05 - default',\n            '    //   0.04 - slower and less aliasing in darks',\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\n            '    //   Likely want to set this to zero.',\n            '    //   As colors that are mostly not-green',\n            '    //   will appear very dark in the green channel!',\n            '    //   Tune by looking at mostly non-green content,',\n            '    //   then start at zero and increase until aliasing is a problem.',\n            '    FxaaFloat fxaaConsoleEdgeThresholdMin,',\n            '    //',\n            '    // Extra constants for 360 FXAA Console only.',\n            '    // Use zeros or anything else for other platforms.',\n            '    // These must be in physical constant registers and NOT immediates.',\n            '    // Immediates will result in compiler un-optimizing.',\n            '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',\n            '    FxaaFloat4 fxaaConsole360ConstDir',\n            ') {',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posM;',\n            '    posM.x = pos.x;',\n            '    posM.y = pos.y;',\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\n            '        #if (FXAA_DISCARD == 0)',\n            '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n            '            #if (FXAA_GREEN_AS_LUMA == 0)',\n            '                #define lumaM rgbyM.w',\n            '            #else',\n            '                #define lumaM rgbyM.y',\n            '            #endif',\n            '        #endif',\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\n            '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',\n            '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',\n            '        #else',\n            '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',\n            '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',\n            '        #endif',\n            '        #if (FXAA_DISCARD == 1)',\n            '            #define lumaM luma4A.w',\n            '        #endif',\n            '        #define lumaE luma4A.z',\n            '        #define lumaS luma4A.x',\n            '        #define lumaSE luma4A.y',\n            '        #define lumaNW luma4B.w',\n            '        #define lumaN luma4B.z',\n            '        #define lumaW luma4B.x',\n            '    #else',\n            '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\n            '            #define lumaM rgbyM.w',\n            '        #else',\n            '            #define lumaM rgbyM.y',\n            '        #endif',\n            '        #if (FXAA_GLSL_100 == 1)',\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',\n            '        #else',\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',\n            '        #endif',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat maxSM = max(lumaS, lumaM);',\n            '    FxaaFloat minSM = min(lumaS, lumaM);',\n            '    FxaaFloat maxESM = max(lumaE, maxSM);',\n            '    FxaaFloat minESM = min(lumaE, minSM);',\n            '    FxaaFloat maxWN = max(lumaN, lumaW);',\n            '    FxaaFloat minWN = min(lumaN, lumaW);',\n            '    FxaaFloat rangeMax = max(maxWN, maxESM);',\n            '    FxaaFloat rangeMin = min(minWN, minESM);',\n            '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',\n            '    FxaaFloat range = rangeMax - rangeMin;',\n            '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',\n            '    FxaaBool earlyExit = range < rangeMaxClamped;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(earlyExit)',\n            '        #if (FXAA_DISCARD == 1)',\n            '            FxaaDiscard;',\n            '        #else',\n            '            return rgbyM;',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    #if (FXAA_GATHER4_ALPHA == 0)',\n            '        #if (FXAA_GLSL_100 == 1)',\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',\n            '        #else',\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n            '        #endif',\n            '    #else',\n            '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',\n            '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNS = lumaN + lumaS;',\n            '    FxaaFloat lumaWE = lumaW + lumaE;',\n            '    FxaaFloat subpixRcpRange = 1.0/range;',\n            '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',\n            '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\n            '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNESE = lumaNE + lumaSE;',\n            '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',\n            '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\n            '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',\n            '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',\n            '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\n            '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\n            '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\n            '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\n            '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',\n            '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',\n            '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',\n            '    FxaaBool horzSpan = edgeHorz >= edgeVert;',\n            '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(!horzSpan) lumaN = lumaW;',\n            '    if(!horzSpan) lumaS = lumaE;',\n            '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',\n            '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat gradientN = lumaN - lumaM;',\n            '    FxaaFloat gradientS = lumaS - lumaM;',\n            '    FxaaFloat lumaNN = lumaN + lumaM;',\n            '    FxaaFloat lumaSS = lumaS + lumaM;',\n            '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',\n            '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',\n            '    if(pairN) lengthSign = -lengthSign;',\n            '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posB;',\n            '    posB.x = posM.x;',\n            '    posB.y = posM.y;',\n            '    FxaaFloat2 offNP;',\n            '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',\n            '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',\n            '    if(!horzSpan) posB.x += lengthSign * 0.5;',\n            '    if( horzSpan) posB.y += lengthSign * 0.5;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat2 posN;',\n            '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\n            '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\n            '    FxaaFloat2 posP;',\n            '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\n            '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\n            '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',\n            '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',\n            '    FxaaFloat subpixE = subpixC * subpixC;',\n            '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(!pairN) lumaNN = lumaSS;',\n            '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',\n            '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',\n            '    FxaaFloat subpixF = subpixD * subpixE;',\n            '    FxaaBool lumaMLTZero = lumaMM < 0.0;',\n            '/*--------------------------------------------------------------------------*/',\n            '    lumaEndN -= lumaNN * 0.5;',\n            '    lumaEndP -= lumaNN * 0.5;',\n            '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',\n            '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',\n            '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\n            '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\n            '    FxaaBool doneNP = (!doneN) || (!doneP);',\n            '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\n            '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\n            '/*--------------------------------------------------------------------------*/',\n            '    if(doneNP) {',\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\n            '        doneNP = (!doneN) || (!doneP);',\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\n            '/*--------------------------------------------------------------------------*/',\n            '        #if (FXAA_QUALITY_PS > 3)',\n            '        if(doneNP) {',\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\n            '            doneNP = (!doneN) || (!doneP);',\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\n            '/*--------------------------------------------------------------------------*/',\n            '            #if (FXAA_QUALITY_PS > 4)',\n            '            if(doneNP) {',\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\n            '                doneNP = (!doneN) || (!doneP);',\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\n            '/*--------------------------------------------------------------------------*/',\n            '                #if (FXAA_QUALITY_PS > 5)',\n            '                if(doneNP) {',\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\n            '                    doneNP = (!doneN) || (!doneP);',\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    #if (FXAA_QUALITY_PS > 6)',\n            '                    if(doneNP) {',\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\n            '                        doneNP = (!doneN) || (!doneP);',\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\n            '/*--------------------------------------------------------------------------*/',\n            '                        #if (FXAA_QUALITY_PS > 7)',\n            '                        if(doneNP) {',\n            '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                            doneN = abs(lumaEndN) >= gradientScaled;',\n            '                            doneP = abs(lumaEndP) >= gradientScaled;',\n            '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\n            '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\n            '                            doneNP = (!doneN) || (!doneP);',\n            '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\n            '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\n            '/*--------------------------------------------------------------------------*/',\n            '    #if (FXAA_QUALITY_PS > 8)',\n            '    if(doneNP) {',\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\n            '        doneNP = (!doneN) || (!doneP);',\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\n            '/*--------------------------------------------------------------------------*/',\n            '        #if (FXAA_QUALITY_PS > 9)',\n            '        if(doneNP) {',\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\n            '            doneNP = (!doneN) || (!doneP);',\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\n            '/*--------------------------------------------------------------------------*/',\n            '            #if (FXAA_QUALITY_PS > 10)',\n            '            if(doneNP) {',\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\n            '                doneNP = (!doneN) || (!doneP);',\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\n            '/*--------------------------------------------------------------------------*/',\n            '                #if (FXAA_QUALITY_PS > 11)',\n            '                if(doneNP) {',\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\n            '                    doneNP = (!doneN) || (!doneP);',\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    #if (FXAA_QUALITY_PS > 12)',\n            '                    if(doneNP) {',\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\n            '                        doneNP = (!doneN) || (!doneP);',\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\n            '/*--------------------------------------------------------------------------*/',\n            '                    }',\n            '                    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                }',\n            '                #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '            }',\n            '            #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '        }',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    }',\n            '    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                        }',\n            '                        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                    }',\n            '                    #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '                }',\n            '                #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '            }',\n            '            #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '        }',\n            '        #endif',\n            '/*--------------------------------------------------------------------------*/',\n            '    }',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat dstN = posM.x - posN.x;',\n            '    FxaaFloat dstP = posP.x - posM.x;',\n            '    if(!horzSpan) dstN = posM.y - posN.y;',\n            '    if(!horzSpan) dstP = posP.y - posM.y;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\n            '    FxaaFloat spanLength = (dstP + dstN);',\n            '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\n            '    FxaaFloat spanLengthRcp = 1.0/spanLength;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaBool directionN = dstN < dstP;',\n            '    FxaaFloat dst = min(dstN, dstP);',\n            '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',\n            '    FxaaFloat subpixG = subpixF * subpixF;',\n            '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\n            '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',\n            '/*--------------------------------------------------------------------------*/',\n            '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\n            '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\n            '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\n            '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\n            '    #if (FXAA_DISCARD == 1)',\n            '        return FxaaTexTop(tex, posM);',\n            '    #else',\n            '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',\n            '    #endif',\n            '}',\n            '/*==========================================================================*/',\n            '#endif',\n            '',\n            'void main() {',\n            '  gl_FragColor = FxaaPixelShader(',\n            '    vUv,',\n            '    vec4(0.0),',\n            '    tDiffuse,',\n            '    tDiffuse,',\n            '    tDiffuse,',\n            '    resolution,',\n            '    vec4(0.0),',\n            '    vec4(0.0),',\n            '    vec4(0.0),',\n            '    0.75,',\n            '    0.166,',\n            '    0.0833,',\n            '    0.0,',\n            '    0.0,',\n            '    0.0,',\n            '    vec4(0.0)',\n            '  );',\n            '',\n            '  // TODO avoid querying texture twice for same texel',\n            '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',\n            '}'\n        ].join('\\n')\n    };\n    return FXAAShader;\n});\ndefine('skylark-threejs-ex/shaders/SSAOShader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SSAOShader = {\n        defines: {\n            'PERSPECTIVE_CAMERA': 1,\n            'KERNEL_SIZE': 32\n        },\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'tDepth': { value: null },\n            'tNoise': { value: null },\n            'kernel': { value: null },\n            'cameraNear': { value: null },\n            'cameraFar': { value: null },\n            'resolution': { value: new THREE.Vector2() },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'kernelRadius': { value: 8 },\n            'minDistance': { value: 0.005 },\n            'maxDistance': { value: 0.05 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tNormal;',\n            'uniform sampler2D tDepth;',\n            'uniform sampler2D tNoise;',\n            'uniform vec3 kernel[ KERNEL_SIZE ];',\n            'uniform vec2 resolution;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float kernelRadius;',\n            'uniform float minDistance;',\n            'uniform float maxDistance;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '}',\n            'float getLinearDepth( const in vec2 screenPosition ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec2 screenPosition ) {',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getDepth( vUv );',\n            '\\tfloat viewZ = getViewZ( depth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, depth, viewZ );',\n            '\\tvec3 viewNormal = getViewNormal( vUv );',\n            ' vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );',\n            '\\tvec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;',\n            '\\tvec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );',\n            '\\tvec3 bitangent = cross( viewNormal, tangent );',\n            '\\tmat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );',\n            ' float occlusion = 0.0;',\n            ' for ( int i = 0; i < KERNEL_SIZE; i ++ ) {',\n            '\\t\\tvec3 sampleVector = kernelMatrix * kernel[ i ];',\n            '\\t\\tvec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );',\n            '\\t\\tvec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );',\n            '\\t\\tsamplePointNDC /= samplePointNDC.w;',\n            '\\t\\tvec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;',\n            '\\t\\tfloat realDepth = getLinearDepth( samplePointUv );',\n            '\\t\\tfloat sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );',\n            '\\t\\tfloat delta = sampleDepth - realDepth;',\n            '\\t\\tif ( delta > minDistance && delta < maxDistance ) {',\n            '\\t\\t\\tocclusion += 1.0;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tocclusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );',\n            '\\tgl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    var SSAODepthShader = {\n        defines: { 'PERSPECTIVE_CAMERA': 1 },\n        uniforms: {\n            'tDepth': { value: null },\n            'cameraNear': { value: null },\n            'cameraFar': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDepth;',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'varying vec2 vUv;',\n            '#include <packing>',\n            'float getLinearDepth( const in vec2 screenPosition ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\n            '\\t#endif',\n            '}',\n            'void main() {',\n            '\\tfloat depth = getLinearDepth( vUv );',\n            '\\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    var SSAOBlurShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new THREE.Vector2() }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 resolution;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 texelSize = ( 1.0 / resolution );',\n            '\\tfloat result = 0.0;',\n            '\\tfor ( int i = - 2; i <= 2; i ++ ) {',\n            '\\t\\tfor ( int j = - 2; j <= 2; j ++ ) {',\n            '\\t\\t\\tvec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;',\n            '\\t\\t\\tresult += texture2D( tDiffuse, vUv + offset ).r;',\n            '\\t\\t}',\n            '\\t}',\n            '\\tgl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return {\n        SSAOShader,\n        SSAODepthShader,\n        SSAOBlurShader\n    };\n});\ndefine('skylark-threejs-ex/shaders/FilmShader',[],function () {\n    'use strict';\n    var FilmShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'time': { value: 0 },\n            'nIntensity': { value: 0.5 },\n            'sIntensity': { value: 0.05 },\n            'sCount': { value: 4096 },\n            'grayscale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform float time;',\n            'uniform bool grayscale;',\n            'uniform float nIntensity;',\n            'uniform float sIntensity;',\n            'uniform float sCount;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );',\n            '\\tfloat dx = rand( vUv + time );',\n            '\\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );',\n            '\\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );',\n            '\\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;',\n            '\\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );',\n            '\\tif( grayscale ) {',\n            '\\t\\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );',\n            '\\t}',\n            '\\tgl_FragColor =  vec4( cResult, cTextureScreen.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  FilmShader ;\n});\ndefine('skylark-threejs-ex/shaders/DotScreenShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var DotScreenShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tSize': { value: new THREE.Vector2(256, 256) },\n            'center': { value: new THREE.Vector2(0.5, 0.5) },\n            'angle': { value: 1.57 },\n            'scale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec2 center;',\n            'uniform float angle;',\n            'uniform float scale;',\n            'uniform vec2 tSize;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'float pattern() {',\n            '\\tfloat s = sin( angle ), c = cos( angle );',\n            '\\tvec2 tex = vUv * tSize - center;',\n            '\\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',\n            '\\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',\n            '}',\n            'void main() {',\n            '\\tvec4 color = texture2D( tDiffuse, vUv );',\n            '\\tfloat average = ( color.r + color.g + color.b ) / 3.0;',\n            '\\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  DotScreenShader ;\n});\ndefine('skylark-threejs-ex/shaders/LuminosityShader',[],function () {\n    'use strict';\n    var LuminosityShader = {\n        uniforms: { 'tDiffuse': { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tfloat l = linearToRelativeLuminance( texel.rgb );',\n            '\\tgl_FragColor = vec4( l, l, l, texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return  LuminosityShader ;\n});\ndefine('skylark-threejs-ex/shaders/SobelOperatorShader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SobelOperatorShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'resolution': { value: new THREE.Vector2() }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec2 resolution;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );',\n            '\\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );',\n            '\\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );',\n            '\\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;',\n            '\\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;',\n            '\\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;',\n            '\\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;',\n            '\\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;',\n            '\\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;',\n            '\\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;',\n            '\\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;',\n            '\\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;',\n            '\\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + ',\n            '\\t\\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + ',\n            '\\t\\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; ',\n            '\\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + ',\n            '\\t\\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + ',\n            '\\t\\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; ',\n            '\\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );',\n            '\\tgl_FragColor = vec4( vec3( G ), 1 );',\n            '}'\n        ].join('\\n')\n    };\n    return  SobelOperatorShader ;\n});\ndefine('skylark-threejs-ex/shaders/ColorifyShader',[\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var ColorifyShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'color': { value: new THREE.Color(16777215) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tgl_FragColor = vec4( v * color, texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return ColorifyShader;\n});\ndefine('skylark-threejs-ex/shaders/ToneMapShader',[],function () {\n    'use strict';\n    var ToneMapShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'averageLuminance': { value: 1 },\n            'luminanceMap': { value: null },\n            'maxLuminance': { value: 16 },\n            'minLuminance': { value: 0.01 },\n            'middleGrey': { value: 0.6 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'uniform float middleGrey;',\n            'uniform float minLuminance;',\n            'uniform float maxLuminance;',\n            '#ifdef ADAPTED_LUMINANCE',\n            '\\tuniform sampler2D luminanceMap;',\n            '#else',\n            '\\tuniform float averageLuminance;',\n            '#endif',\n            'vec3 ToneMap( vec3 vColor ) {',\n            '\\t#ifdef ADAPTED_LUMINANCE',\n            '\\t\\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;',\n            '\\t#else',\n            '\\t\\tfloat fLumAvg = averageLuminance;',\n            '\\t#endif',\n            '\\tfloat fLumPixel = linearToRelativeLuminance( vColor );',\n            '\\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );',\n            '\\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);',\n            '\\treturn fLumCompressed * vColor;',\n            '}',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );',\n            '}'\n        ].join('\\n')\n    };\n    return  ToneMapShader ;\n});\ndefine('skylark-threejs-ex/shaders/TechnicolorShader',[],function () {\n    'use strict';\n    var TechnicolorShader = {\n        uniforms: { 'tDiffuse': { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );',\n            '\\tvec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);',\n            '\\tgl_FragColor = newTex;',\n            '}'\n        ].join('\\n')\n    };\n    return  TechnicolorShader ;\n});\ndefine('skylark-threejs-ex/shaders/HueSaturationShader',[],function () {\n    'use strict';\n    var HueSaturationShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'hue': { value: 0 },\n            'saturation': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float hue;',\n            'uniform float saturation;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tgl_FragColor = texture2D( tDiffuse, vUv );',\n            '\\tfloat angle = hue * 3.14159265;',\n            '\\tfloat s = sin(angle), c = cos(angle);',\n            '\\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',\n            '\\tfloat len = length(gl_FragColor.rgb);',\n            '\\tgl_FragColor.rgb = vec3(',\n            '\\t\\tdot(gl_FragColor.rgb, weights.xyz),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.zxy),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.yzx)',\n            '\\t);',\n            '\\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',\n            '\\tif (saturation > 0.0) {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',\n            '\\t} else {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',\n            '\\t}',\n            '}'\n        ].join('\\n')\n    };\n    return  HueSaturationShader ;\n});\ndefine('skylark-threejs-ex/postprocessing/Pass',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    function Pass() {\n        this.enabled = true;\n        this.needsSwap = true;\n        this.clear = false;\n        this.renderToScreen = false;\n    }\n    Object.assign(Pass.prototype, {\n        setSize: function () {\n        },\n        render: function () {\n            console.error('THREE.Pass: .render() must be implemented in derived pass.');\n        }\n    });\n    Pass.FullScreenQuad = function () {\n        var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        var geometry = new THREE.PlaneBufferGeometry(2, 2);\n        var FullScreenQuad = function (material) {\n            this._mesh = new THREE.Mesh(geometry, material);\n        };\n        Object.defineProperty(FullScreenQuad.prototype, 'material', {\n            get: function () {\n                return this._mesh.material;\n            },\n            set: function (value) {\n                this._mesh.material = value;\n            }\n        });\n        Object.assign(FullScreenQuad.prototype, {\n            dispose: function () {\n                this._mesh.geometry.dispose();\n            },\n            render: function (renderer) {\n                renderer.render(this._mesh, camera);\n            }\n        });\n        return FullScreenQuad;\n    }();\n    return Pass;\n});\ndefine('skylark-threejs-ex/postprocessing/ShaderPass',[\n    \"skylark-threejs\",\n    './Pass'\n], function (\n    THREE, \n    Pass\n) {\n    'use strict';\n    var ShaderPass = function (shader, textureID) {\n        Pass.call(this);\n        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else if (shader) {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: Object.assign({}, shader.defines),\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: ShaderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            if (this.uniforms[this.textureID]) {\n                this.uniforms[this.textureID].value = readBuffer.texture;\n            }\n            this.fsQuad.material = this.material;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n                this.fsQuad.render(renderer);\n            }\n        }\n    });\n    return ShaderPass;\n});\ndefine('skylark-threejs-ex/postprocessing/MaskPass',[\n    './Pass'\n], function (Pass) {\n    'use strict';\n    var MaskPass = function (scene, camera) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.clear = true;\n        this.needsSwap = false;\n        this.inverse = false;\n    };\n    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: MaskPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var context = renderer.getContext();\n            var state = renderer.state;\n            state.buffers.color.setMask(false);\n            state.buffers.depth.setMask(false);\n            state.buffers.color.setLocked(true);\n            state.buffers.depth.setLocked(true);\n            var writeValue, clearValue;\n            if (this.inverse) {\n                writeValue = 0;\n                clearValue = 1;\n            } else {\n                writeValue = 1;\n                clearValue = 0;\n            }\n            state.buffers.stencil.setTest(true);\n            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);\n            state.buffers.stencil.setClear(clearValue);\n            state.buffers.stencil.setLocked(true);\n            renderer.setRenderTarget(readBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            state.buffers.color.setLocked(false);\n            state.buffers.depth.setLocked(false);\n            state.buffers.stencil.setLocked(false);\n            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);\n            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n            state.buffers.stencil.setLocked(true);\n        }\n    });\n    return  MaskPass;\n});\ndefine('skylark-threejs-ex/postprocessing/EffectComposer',[\n    \"skylark-threejs\",\n    '../shaders/CopyShader',\n    '../postprocessing/ShaderPass',\n    '../postprocessing/MaskPass'\n], function (\n    THREE, \n    CopyShader, \n    ShaderPass, \n    MaskPass\n) {\n    'use strict';\n    var EffectComposer = function (renderer, renderTarget) {\n        this.renderer = renderer;\n        if (renderTarget === undefined) {\n            var parameters = {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat,\n                stencilBuffer: false\n            };\n            var size = renderer.getSize(new THREE.Vector2());\n            this._pixelRatio = renderer.getPixelRatio();\n            this._width = size.width;\n            this._height = size.height;\n            renderTarget = new THREE.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n            renderTarget.texture.name = 'EffectComposer.rt1';\n        } else {\n            this._pixelRatio = 1;\n            this._width = renderTarget.width;\n            this._height = renderTarget.height;\n        }\n        this.renderTarget1 = renderTarget;\n        this.renderTarget2 = renderTarget.clone();\n        this.renderTarget2.texture.name = 'EffectComposer.rt2';\n        this.writeBuffer = this.renderTarget1;\n        this.readBuffer = this.renderTarget2;\n        this.renderToScreen = true;\n        this.passes = [];\n        if (CopyShader === undefined) {\n            console.error('THREE.EffectComposer relies on CopyShader');\n        }\n        if (ShaderPass === undefined) {\n            console.error('THREE.EffectComposer relies on ShaderPass');\n        }\n        this.copyPass = new ShaderPass(CopyShader);\n        this.clock = new THREE.Clock();\n    };\n    Object.assign(EffectComposer.prototype, {\n        swapBuffers: function () {\n            var tmp = this.readBuffer;\n            this.readBuffer = this.writeBuffer;\n            this.writeBuffer = tmp;\n        },\n        addPass: function (pass) {\n            this.passes.push(pass);\n            pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n        },\n        insertPass: function (pass, index) {\n            this.passes.splice(index, 0, pass);\n        },\n        isLastEnabledPass: function (passIndex) {\n            for (var i = passIndex + 1; i < this.passes.length; i++) {\n                if (this.passes[i].enabled) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        render: function (deltaTime) {\n            if (deltaTime === undefined) {\n                deltaTime = this.clock.getDelta();\n            }\n            var currentRenderTarget = this.renderer.getRenderTarget();\n            var maskActive = false;\n            var pass, i, il = this.passes.length;\n            for (i = 0; i < il; i++) {\n                pass = this.passes[i];\n                if (pass.enabled === false)\n                    continue;\n                pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n                pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n                if (pass.needsSwap) {\n                    if (maskActive) {\n                        var context = this.renderer.getContext();\n                        var stencil = this.renderer.state.buffers.stencil;\n                        stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n                        this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n                        stencil.setFunc(context.EQUAL, 1, 4294967295);\n                    }\n                    this.swapBuffers();\n                }\n                if (MaskPass !== undefined) {\n                    if (pass instanceof MaskPass) {\n                        maskActive = true;\n                    } else if (pass instanceof ClearMaskPass) {\n                        maskActive = false;\n                    }\n                }\n            }\n            this.renderer.setRenderTarget(currentRenderTarget);\n        },\n        reset: function (renderTarget) {\n            if (renderTarget === undefined) {\n                var size = this.renderer.getSize(new THREE.Vector2());\n                this._pixelRatio = this.renderer.getPixelRatio();\n                this._width = size.width;\n                this._height = size.height;\n                renderTarget = this.renderTarget1.clone();\n                renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n            }\n            this.renderTarget1.dispose();\n            this.renderTarget2.dispose();\n            this.renderTarget1 = renderTarget;\n            this.renderTarget2 = renderTarget.clone();\n            this.writeBuffer = this.renderTarget1;\n            this.readBuffer = this.renderTarget2;\n        },\n        setSize: function (width, height) {\n            this._width = width;\n            this._height = height;\n            var effectiveWidth = this._width * this._pixelRatio;\n            var effectiveHeight = this._height * this._pixelRatio;\n            this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n            this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n            for (var i = 0; i < this.passes.length; i++) {\n                this.passes[i].setSize(effectiveWidth, effectiveHeight);\n            }\n        },\n        setPixelRatio: function (pixelRatio) {\n            this._pixelRatio = pixelRatio;\n            this.setSize(this._width, this._height);\n        }\n    });\n\n    return  EffectComposer;\n});\ndefine('skylark-threejs-ex/postprocessing/RenderPass',['./Pass'], function (Pass) {\n    'use strict';\n    var RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = overrideMaterial;\n        this.clearColor = clearColor;\n        this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n        this.clear = true;\n        this.clearDepth = false;\n        this.needsSwap = false;\n    };\n    RenderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: RenderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            var oldClearColor, oldClearAlpha, oldOverrideMaterial;\n            if (this.overrideMaterial !== undefined) {\n                oldOverrideMaterial = this.scene.overrideMaterial;\n                this.scene.overrideMaterial = this.overrideMaterial;\n            }\n            if (this.clearColor) {\n                oldClearColor = renderer.getClearColor().getHex();\n                oldClearAlpha = renderer.getClearAlpha();\n                renderer.setClearColor(this.clearColor, this.clearAlpha);\n            }\n            if (this.clearDepth) {\n                renderer.clearDepth();\n            }\n            renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n            if (this.clear)\n                renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n            renderer.render(this.scene, this.camera);\n            if (this.clearColor) {\n                renderer.setClearColor(oldClearColor, oldClearAlpha);\n            }\n            if (this.overrideMaterial !== undefined) {\n                this.scene.overrideMaterial = oldOverrideMaterial;\n            }\n            renderer.autoClear = oldAutoClear;\n        }\n    });\n    return RenderPass;\n});\ndefine('skylark-threejs-ex/curves/NURBSUtils',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var NURBSUtils = {\n        findSpan: function (p, u, U) {\n            var n = U.length - p - 1;\n            if (u >= U[n]) {\n                return n - 1;\n            }\n            if (u <= U[p]) {\n                return p;\n            }\n            var low = p;\n            var high = n;\n            var mid = Math.floor((low + high) / 2);\n            while (u < U[mid] || u >= U[mid + 1]) {\n                if (u < U[mid]) {\n                    high = mid;\n                } else {\n                    low = mid;\n                }\n                mid = Math.floor((low + high) / 2);\n            }\n            return mid;\n        },\n        calcBasisFunctions: function (span, u, p, U) {\n            var N = [];\n            var left = [];\n            var right = [];\n            N[0] = 1;\n            for (var j = 1; j <= p; ++j) {\n                left[j] = u - U[span + 1 - j];\n                right[j] = U[span + j] - u;\n                var saved = 0;\n                for (var r = 0; r < j; ++r) {\n                    var rv = right[r + 1];\n                    var lv = left[j - r];\n                    var temp = N[r] / (rv + lv);\n                    N[r] = saved + rv * temp;\n                    saved = lv * temp;\n                }\n                N[j] = saved;\n            }\n            return N;\n        },\n        calcBSplinePoint: function (p, U, P, u) {\n            var span = this.findSpan(p, u, U);\n            var N = this.calcBasisFunctions(span, u, p, U);\n            var C = new THREE.Vector4(0, 0, 0, 0);\n            for (var j = 0; j <= p; ++j) {\n                var point = P[span - p + j];\n                var Nj = N[j];\n                var wNj = point.w * Nj;\n                C.x += point.x * wNj;\n                C.y += point.y * wNj;\n                C.z += point.z * wNj;\n                C.w += point.w * Nj;\n            }\n            return C;\n        },\n        calcBasisFunctionDerivatives: function (span, u, p, n, U) {\n            var zeroArr = [];\n            for (var i = 0; i <= p; ++i)\n                zeroArr[i] = 0;\n            var ders = [];\n            for (var i = 0; i <= n; ++i)\n                ders[i] = zeroArr.slice(0);\n            var ndu = [];\n            for (var i = 0; i <= p; ++i)\n                ndu[i] = zeroArr.slice(0);\n            ndu[0][0] = 1;\n            var left = zeroArr.slice(0);\n            var right = zeroArr.slice(0);\n            for (var j = 1; j <= p; ++j) {\n                left[j] = u - U[span + 1 - j];\n                right[j] = U[span + j] - u;\n                var saved = 0;\n                for (var r = 0; r < j; ++r) {\n                    var rv = right[r + 1];\n                    var lv = left[j - r];\n                    ndu[j][r] = rv + lv;\n                    var temp = ndu[r][j - 1] / ndu[j][r];\n                    ndu[r][j] = saved + rv * temp;\n                    saved = lv * temp;\n                }\n                ndu[j][j] = saved;\n            }\n            for (var j = 0; j <= p; ++j) {\n                ders[0][j] = ndu[j][p];\n            }\n            for (var r = 0; r <= p; ++r) {\n                var s1 = 0;\n                var s2 = 1;\n                var a = [];\n                for (var i = 0; i <= p; ++i) {\n                    a[i] = zeroArr.slice(0);\n                }\n                a[0][0] = 1;\n                for (var k = 1; k <= n; ++k) {\n                    var d = 0;\n                    var rk = r - k;\n                    var pk = p - k;\n                    if (r >= k) {\n                        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n                        d = a[s2][0] * ndu[rk][pk];\n                    }\n                    var j1 = rk >= -1 ? 1 : -rk;\n                    var j2 = r - 1 <= pk ? k - 1 : p - r;\n                    for (var j = j1; j <= j2; ++j) {\n                        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n                        d += a[s2][j] * ndu[rk + j][pk];\n                    }\n                    if (r <= pk) {\n                        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n                        d += a[s2][k] * ndu[r][pk];\n                    }\n                    ders[k][r] = d;\n                    var j = s1;\n                    s1 = s2;\n                    s2 = j;\n                }\n            }\n            var r = p;\n            for (var k = 1; k <= n; ++k) {\n                for (var j = 0; j <= p; ++j) {\n                    ders[k][j] *= r;\n                }\n                r *= p - k;\n            }\n            return ders;\n        },\n        calcBSplineDerivatives: function (p, U, P, u, nd) {\n            var du = nd < p ? nd : p;\n            var CK = [];\n            var span = this.findSpan(p, u, U);\n            var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\n            var Pw = [];\n            for (var i = 0; i < P.length; ++i) {\n                var point = P[i].clone();\n                var w = point.w;\n                point.x *= w;\n                point.y *= w;\n                point.z *= w;\n                Pw[i] = point;\n            }\n            for (var k = 0; k <= du; ++k) {\n                var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n                for (var j = 1; j <= p; ++j) {\n                    point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n                }\n                CK[k] = point;\n            }\n            for (var k = du + 1; k <= nd + 1; ++k) {\n                CK[k] = new THREE.Vector4(0, 0, 0);\n            }\n            return CK;\n        },\n        calcKoverI: function (k, i) {\n            var nom = 1;\n            for (var j = 2; j <= k; ++j) {\n                nom *= j;\n            }\n            var denom = 1;\n            for (var j = 2; j <= i; ++j) {\n                denom *= j;\n            }\n            for (var j = 2; j <= k - i; ++j) {\n                denom *= j;\n            }\n            return nom / denom;\n        },\n        calcRationalCurveDerivatives: function (Pders) {\n            var nd = Pders.length;\n            var Aders = [];\n            var wders = [];\n            for (var i = 0; i < nd; ++i) {\n                var point = Pders[i];\n                Aders[i] = new THREE.Vector3(point.x, point.y, point.z);\n                wders[i] = point.w;\n            }\n            var CK = [];\n            for (var k = 0; k < nd; ++k) {\n                var v = Aders[k].clone();\n                for (var i = 1; i <= k; ++i) {\n                    v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\n                }\n                CK[k] = v.divideScalar(wders[0]);\n            }\n            return CK;\n        },\n        calcNURBSDerivatives: function (p, U, P, u, nd) {\n            var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\n            return this.calcRationalCurveDerivatives(Pders);\n        },\n        calcSurfacePoint: function (p, q, U, V, P, u, v, target) {\n            var uspan = this.findSpan(p, u, U);\n            var vspan = this.findSpan(q, v, V);\n            var Nu = this.calcBasisFunctions(uspan, u, p, U);\n            var Nv = this.calcBasisFunctions(vspan, v, q, V);\n            var temp = [];\n            for (var l = 0; l <= q; ++l) {\n                temp[l] = new THREE.Vector4(0, 0, 0, 0);\n                for (var k = 0; k <= p; ++k) {\n                    var point = P[uspan - p + k][vspan - q + l].clone();\n                    var w = point.w;\n                    point.x *= w;\n                    point.y *= w;\n                    point.z *= w;\n                    temp[l].add(point.multiplyScalar(Nu[k]));\n                }\n            }\n            var Sw = new THREE.Vector4(0, 0, 0, 0);\n            for (var l = 0; l <= q; ++l) {\n                Sw.add(temp[l].multiplyScalar(Nv[l]));\n            }\n            Sw.divideScalar(Sw.w);\n            target.set(Sw.x, Sw.y, Sw.z);\n        }\n    };\n    \n    return NURBSUtils;\n});\ndefine('skylark-threejs-ex/curves/NURBSCurve',[\n    \"skylark-threejs\",\n    './NURBSUtils'\n], function (THREE, NURBSUtils) {\n    'use strict';\n    var NURBSCurve = function (degree, knots, controlPoints, startKnot, endKnot) {\n        THREE.Curve.call(this);\n        this.degree = degree;\n        this.knots = knots;\n        this.controlPoints = [];\n        this.startKnot = startKnot || 0;\n        this.endKnot = endKnot || this.knots.length - 1;\n        for (var i = 0; i < controlPoints.length; ++i) {\n            var point = controlPoints[i];\n            this.controlPoints[i] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n        }\n    };\n    NURBSCurve.prototype = Object.create(THREE.Curve.prototype);\n    NURBSCurve.prototype.constructor = NURBSCurve;\n    NURBSCurve.prototype.getPoint = function (t) {\n        var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);\n        var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n        if (hpoint.w != 1) {\n            hpoint.divideScalar(hpoint.w);\n        }\n        return new THREE.Vector3(hpoint.x, hpoint.y, hpoint.z);\n    };\n    NURBSCurve.prototype.getTangent = function (t) {\n        var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n        var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n        var tangent = ders[1].clone();\n        tangent.normalize();\n        return tangent;\n    };\n    \n    return NURBSCurve;\n});\ndefine('skylark-threejs-ex/curves/NURBSSurface',[\n    \"skylark-threejs\",\n    './NURBSUtils'\n], function (THREE, NURBSUtils) {\n    'use strict';\n    var NURBSSurface = function (degree1, degree2, knots1, knots2, controlPoints) {\n        this.degree1 = degree1;\n        this.degree2 = degree2;\n        this.knots1 = knots1;\n        this.knots2 = knots2;\n        this.controlPoints = [];\n        var len1 = knots1.length - degree1 - 1;\n        var len2 = knots2.length - degree2 - 1;\n        for (var i = 0; i < len1; ++i) {\n            this.controlPoints[i] = [];\n            for (var j = 0; j < len2; ++j) {\n                var point = controlPoints[i][j];\n                this.controlPoints[i][j] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n            }\n        }\n    };\n    NURBSSurface.prototype = {\n        constructor: NURBSSurface,\n        getPoint: function (t1, t2, target) {\n            var u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);\n            var v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);\n            NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n        }\n    };\n    return NURBSSurface;\n});\ndefine('skylark-threejs-ex/objects/Lensflare',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Lensflare = function () {\n        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({\n            opacity: 0,\n            transparent: true\n        }));\n        this.type = 'Lensflare';\n        this.frustumCulled = false;\n        this.renderOrder = Infinity;\n        var positionScreen = new THREE.Vector3();\n        var positionView = new THREE.Vector3();\n        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        tempMap.minFilter = THREE.NearestFilter;\n        tempMap.magFilter = THREE.NearestFilter;\n        tempMap.wrapS = THREE.ClampToEdgeWrapping;\n        tempMap.wrapT = THREE.ClampToEdgeWrapping;\n        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        occlusionMap.minFilter = THREE.NearestFilter;\n        occlusionMap.magFilter = THREE.NearestFilter;\n        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;\n        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;\n        var geometry = Lensflare.Geometry;\n        var material1a = new THREE.RawShaderMaterial({\n            uniforms: {\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'void main() {',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'void main() {',\n                '\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\n                '}'\n            ].join('\\n'),\n            depthTest: true,\n            depthWrite: false,\n            transparent: false\n        });\n        var material1b = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: tempMap },\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'attribute vec2 uv;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tvUV = uv;',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'uniform sampler2D map;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tgl_FragColor = texture2D( map, vUV );',\n                '}'\n            ].join('\\n'),\n            depthTest: false,\n            depthWrite: false,\n            transparent: false\n        });\n        var mesh1 = new THREE.Mesh(geometry, material1a);\n        var elements = [];\n        var shader = LensflareElement.Shader;\n        var material2 = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: null },\n                'occlusionMap': { value: occlusionMap },\n                'color': { value: new THREE.Color(16777215) },\n                'scale': { value: new THREE.Vector2() },\n                'screenPosition': { value: new THREE.Vector3() }\n            },\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false\n        });\n        var mesh2 = new THREE.Mesh(geometry, material2);\n        this.addElement = function (element) {\n            elements.push(element);\n        };\n        var scale = new THREE.Vector2();\n        var screenPositionPixels = new THREE.Vector2();\n        var validArea = new THREE.Box2();\n        var viewport = new THREE.Vector4();\n        this.onBeforeRender = function (renderer, scene, camera) {\n            renderer.getCurrentViewport(viewport);\n            var invAspect = viewport.w / viewport.z;\n            var halfViewportWidth = viewport.z / 2;\n            var halfViewportHeight = viewport.w / 2;\n            var size = 16 / viewport.w;\n            scale.set(size * invAspect, size);\n            validArea.min.set(viewport.x, viewport.y);\n            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n            positionView.setFromMatrixPosition(this.matrixWorld);\n            positionView.applyMatrix4(camera.matrixWorldInverse);\n            if (positionView.z > 0)\n                return;\n            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n            if (validArea.containsPoint(screenPositionPixels)) {\n                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n                var uniforms = material1a.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\n                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n                var uniforms = material1b.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\n                var vecX = -positionScreen.x * 2;\n                var vecY = -positionScreen.y * 2;\n                for (var i = 0, l = elements.length; i < l; i++) {\n                    var element = elements[i];\n                    var uniforms = material2.uniforms;\n                    uniforms['color'].value.copy(element.color);\n                    uniforms['map'].value = element.texture;\n                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n                    var size = element.size / viewport.w;\n                    var invAspect = viewport.w / viewport.z;\n                    uniforms['scale'].value.set(size * invAspect, size);\n                    material2.uniformsNeedUpdate = true;\n                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n                }\n            }\n        };\n        this.dispose = function () {\n            material1a.dispose();\n            material1b.dispose();\n            material2.dispose();\n            tempMap.dispose();\n            occlusionMap.dispose();\n            for (var i = 0, l = elements.length; i < l; i++) {\n                elements[i].texture.dispose();\n            }\n        };\n    };\n    Lensflare.prototype = Object.create(THREE.Mesh.prototype);\n    Lensflare.prototype.constructor = Lensflare;\n    Lensflare.prototype.isLensflare = true;\n    return Lensflare;\n});\ndefine('skylark-threejs-ex/objects/Reflector',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Reflector = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Reflector';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var shader = options.shader || Reflector.ReflectorShader;\n        var recursion = options.recursion !== undefined ? options.recursion : 0;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var reflectorPlane = new THREE.Plane();\n        var normal = new THREE.Vector3();\n        var reflectorWorldPosition = new THREE.Vector3();\n        var cameraWorldPosition = new THREE.Vector3();\n        var rotationMatrix = new THREE.Matrix4();\n        var lookAtPosition = new THREE.Vector3(0, 0, -1);\n        var clipPlane = new THREE.Vector4();\n        var view = new THREE.Vector3();\n        var target = new THREE.Vector3();\n        var q = new THREE.Vector4();\n        var textureMatrix = new THREE.Matrix4();\n        var virtualCamera = new THREE.PerspectiveCamera();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false,\n            encoding: encoding\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        var material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            fragmentShader: shader.fragmentShader,\n            vertexShader: shader.vertexShader\n        });\n        material.uniforms['tDiffuse'].value = renderTarget.texture;\n        material.uniforms['color'].value = color;\n        material.uniforms['textureMatrix'].value = textureMatrix;\n        this.material = material;\n        this.onBeforeRender = function (renderer, scene, camera) {\n            if ('recursion' in camera.userData) {\n                if (camera.userData.recursion === recursion)\n                    return;\n                camera.userData.recursion++;\n            }\n            reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n            rotationMatrix.extractRotation(scope.matrixWorld);\n            normal.set(0, 0, 1);\n            normal.applyMatrix4(rotationMatrix);\n            view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n            if (view.dot(normal) > 0)\n                return;\n            view.reflect(normal).negate();\n            view.add(reflectorWorldPosition);\n            rotationMatrix.extractRotation(camera.matrixWorld);\n            lookAtPosition.set(0, 0, -1);\n            lookAtPosition.applyMatrix4(rotationMatrix);\n            lookAtPosition.add(cameraWorldPosition);\n            target.subVectors(reflectorWorldPosition, lookAtPosition);\n            target.reflect(normal).negate();\n            target.add(reflectorWorldPosition);\n            virtualCamera.position.copy(view);\n            virtualCamera.up.set(0, 1, 0);\n            virtualCamera.up.applyMatrix4(rotationMatrix);\n            virtualCamera.up.reflect(normal);\n            virtualCamera.lookAt(target);\n            virtualCamera.far = camera.far;\n            virtualCamera.updateMatrixWorld();\n            virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n            virtualCamera.userData.recursion = 0;\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(virtualCamera.projectionMatrix);\n            textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n            reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n            reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n            clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n            var projectionMatrix = virtualCamera.projectionMatrix;\n            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n            q.z = -1;\n            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n            clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n            projectionMatrix.elements[2] = clipPlane.x;\n            projectionMatrix.elements[6] = clipPlane.y;\n            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n            projectionMatrix.elements[14] = clipPlane.w;\n            scope.visible = false;\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, virtualCamera);\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n            scope.visible = true;\n        };\n        this.getRenderTarget = function () {\n            return renderTarget;\n        };\n    };\n    Reflector.prototype = Object.create(THREE.Mesh.prototype);\n    Reflector.prototype.constructor = Reflector;\n    Reflector.ReflectorShader = {\n        uniforms: {\n            'color': { value: null },\n            'tDiffuse': { value: null },\n            'textureMatrix': { value: null }\n        },\n        vertexShader: [\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vUv;',\n            'void main() {',\n            '\\tvUv = textureMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec4 vUv;',\n            'float blendOverlay( float base, float blend ) {',\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n            '}',\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n            '}',\n            'void main() {',\n            '\\tvec4 base = texture2DProj( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n\n    return Reflector;\n});\ndefine('skylark-threejs-ex/objects/Refractor',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Refractor = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Refractor';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(8355711);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var shader = options.shader || Refractor.RefractorShader;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var virtualCamera = new THREE.PerspectiveCamera();\n        virtualCamera.matrixAutoUpdate = false;\n        virtualCamera.userData.refractor = true;\n        var refractorPlane = new THREE.Plane();\n        var textureMatrix = new THREE.Matrix4();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false,\n            encoding: encoding\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        this.material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: true\n        });\n        this.material.uniforms['color'].value = color;\n        this.material.uniforms['tDiffuse'].value = renderTarget.texture;\n        this.material.uniforms['textureMatrix'].value = textureMatrix;\n        var visible = function () {\n            var refractorWorldPosition = new THREE.Vector3();\n            var cameraWorldPosition = new THREE.Vector3();\n            var rotationMatrix = new THREE.Matrix4();\n            var view = new THREE.Vector3();\n            var normal = new THREE.Vector3();\n            return function visible(camera) {\n                refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n                cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n                view.subVectors(refractorWorldPosition, cameraWorldPosition);\n                rotationMatrix.extractRotation(scope.matrixWorld);\n                normal.set(0, 0, 1);\n                normal.applyMatrix4(rotationMatrix);\n                return view.dot(normal) < 0;\n            };\n        }();\n        var updateRefractorPlane = function () {\n            var normal = new THREE.Vector3();\n            var position = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            var scale = new THREE.Vector3();\n            return function updateRefractorPlane() {\n                scope.matrixWorld.decompose(position, quaternion, scale);\n                normal.set(0, 0, 1).applyQuaternion(quaternion).normalize();\n                normal.negate();\n                refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\n            };\n        }();\n        var updateVirtualCamera = function () {\n            var clipPlane = new THREE.Plane();\n            var clipVector = new THREE.Vector4();\n            var q = new THREE.Vector4();\n            return function updateVirtualCamera(camera) {\n                virtualCamera.matrixWorld.copy(camera.matrixWorld);\n                virtualCamera.matrixWorldInverse.getInverse(virtualCamera.matrixWorld);\n                virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n                virtualCamera.far = camera.far;\n                clipPlane.copy(refractorPlane);\n                clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n                clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant);\n                var projectionMatrix = virtualCamera.projectionMatrix;\n                q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n                q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n                q.z = -1;\n                q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n                clipVector.multiplyScalar(2 / clipVector.dot(q));\n                projectionMatrix.elements[2] = clipVector.x;\n                projectionMatrix.elements[6] = clipVector.y;\n                projectionMatrix.elements[10] = clipVector.z + 1 - clipBias;\n                projectionMatrix.elements[14] = clipVector.w;\n            };\n        }();\n        function updateTextureMatrix(camera) {\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(camera.projectionMatrix);\n            textureMatrix.multiply(camera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n        }\n        function render(renderer, scene, camera) {\n            scope.visible = false;\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, virtualCamera);\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n            scope.visible = true;\n        }\n        this.onBeforeRender = function (renderer, scene, camera) {\n            if (camera.userData.refractor === true)\n                return;\n            if (!visible(camera) === true)\n                return;\n            updateRefractorPlane();\n            updateTextureMatrix(camera);\n            updateVirtualCamera(camera);\n            render(renderer, scene, camera);\n        };\n        this.getRenderTarget = function () {\n            return renderTarget;\n        };\n    };\n    Refractor.prototype = Object.create(THREE.Mesh.prototype);\n    Refractor.prototype.constructor = Refractor;\n    Refractor.RefractorShader = {\n        uniforms: {\n            'color': { value: null },\n            'tDiffuse': { value: null },\n            'textureMatrix': { value: null }\n        },\n        vertexShader: [\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vUv;',\n            'void main() {',\n            '\\tvUv = textureMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec4 vUv;',\n            'float blendOverlay( float base, float blend ) {',\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n            '}',\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );',\n            '}',\n            'void main() {',\n            '\\tvec4 base = texture2DProj( tDiffuse, vUv );',\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return Refractor;\n});\ndefine('skylark-threejs-ex/loaders/TTFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TTFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.reversed = false;\n    };\n    TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TTFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer) {\n            function convert(font, reversed) {\n                var round = Math.round;\n                var glyphs = {};\n                var scale = 100000 / ((font.unitsPerEm || 2048) * 72);\n                var glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n                var unicodes = Object.keys(glyphIndexMap);\n                for (var i = 0; i < unicodes.length; i++) {\n                    var unicode = unicodes[i];\n                    var glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\n                    if (unicode !== undefined) {\n                        var token = {\n                            ha: round(glyph.advanceWidth * scale),\n                            x_min: round(glyph.xMin * scale),\n                            x_max: round(glyph.xMax * scale),\n                            o: ''\n                        };\n                        if (reversed) {\n                            glyph.path.commands = reverseCommands(glyph.path.commands);\n                        }\n                        glyph.path.commands.forEach(function (command) {\n                            if (command.type.toLowerCase() === 'c') {\n                                command.type = 'b';\n                            }\n                            token.o += command.type.toLowerCase() + ' ';\n                            if (command.x !== undefined && command.y !== undefined) {\n                                token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';\n                            }\n                            if (command.x1 !== undefined && command.y1 !== undefined) {\n                                token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';\n                            }\n                            if (command.x2 !== undefined && command.y2 !== undefined) {\n                                token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';\n                            }\n                        });\n                        glyphs[String.fromCodePoint(glyph.unicode)] = token;\n                    }\n                }\n                return {\n                    glyphs: glyphs,\n                    familyName: font.getEnglishName('fullName'),\n                    ascender: round(font.ascender * scale),\n                    descender: round(font.descender * scale),\n                    underlinePosition: font.tables.post.underlinePosition,\n                    underlineThickness: font.tables.post.underlineThickness,\n                    boundingBox: {\n                        xMin: font.tables.head.xMin,\n                        xMax: font.tables.head.xMax,\n                        yMin: font.tables.head.yMin,\n                        yMax: font.tables.head.yMax\n                    },\n                    resolution: 1000,\n                    original_font_information: font.tables.name\n                };\n            }\n            function reverseCommands(commands) {\n                var paths = [];\n                var path;\n                commands.forEach(function (c) {\n                    if (c.type.toLowerCase() === 'm') {\n                        path = [c];\n                        paths.push(path);\n                    } else if (c.type.toLowerCase() !== 'z') {\n                        path.push(c);\n                    }\n                });\n                var reversed = [];\n                paths.forEach(function (p) {\n                    var result = {\n                        type: 'm',\n                        x: p[p.length - 1].x,\n                        y: p[p.length - 1].y\n                    };\n                    reversed.push(result);\n                    for (var i = p.length - 1; i > 0; i--) {\n                        var command = p[i];\n                        var result = { type: command.type };\n                        if (command.x2 !== undefined && command.y2 !== undefined) {\n                            result.x1 = command.x2;\n                            result.y1 = command.y2;\n                            result.x2 = command.x1;\n                            result.y2 = command.y1;\n                        } else if (command.x1 !== undefined && command.y1 !== undefined) {\n                            result.x1 = command.x1;\n                            result.y1 = command.y1;\n                        }\n                        result.x = p[i - 1].x;\n                        result.y = p[i - 1].y;\n                        reversed.push(result);\n                    }\n                });\n                return reversed;\n            }\n            if (typeof opentype === 'undefined') {\n                console.warn(\"THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader.\");\n                return null;\n            }\n            return convert(opentype.parse(arraybuffer), this.reversed);\n        }\n    });\n    return TTFLoader;\n});\ndefine('skylark-threejs-ex/loaders/3MFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var ThreeMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.availableExtensions = [];\n    };\n    ThreeMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ThreeMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var scope = this;\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            function loadDocument(data) {\n                var zip = null;\n                var file = null;\n                var relsName;\n                var modelRelsName;\n                var modelPartNames = [];\n                var printTicketPartNames = [];\n                var texturesPartNames = [];\n                var otherPartNames = [];\n                var rels;\n                var modelRels;\n                var modelParts = {};\n                var printTicketParts = {};\n                var texturesParts = {};\n                var otherParts = {};\n                try {\n                    zip = new JSZip(data);\n                } catch (e) {\n                    if (e instanceof ReferenceError) {\n                        console.error('THREE.3MFLoader: jszip missing and file is compressed.');\n                        return null;\n                    }\n                }\n                for (file in zip.files) {\n                    if (file.match(/\\_rels\\/.rels$/)) {\n                        relsName = file;\n                    } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n                        modelRelsName = file;\n                    } else if (file.match(/^3D\\/.*\\.model$/)) {\n                        modelPartNames.push(file);\n                    } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n                        printTicketPartNames.push(file);\n                    } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n                        texturesPartNames.push(file);\n                    } else if (file.match(/^3D\\/Other\\/.*/)) {\n                        otherPartNames.push(file);\n                    }\n                }\n                var relsView = new Uint8Array(zip.file(relsName).asArrayBuffer());\n                var relsFileText = THREE.LoaderUtils.decodeText(relsView);\n                rels = parseRelsXml(relsFileText);\n                if (modelRelsName) {\n                    var relsView = new Uint8Array(zip.file(modelRelsName).asArrayBuffer());\n                    var relsFileText = THREE.LoaderUtils.decodeText(relsView);\n                    modelRels = parseRelsXml(relsFileText);\n                }\n                for (var i = 0; i < modelPartNames.length; i++) {\n                    var modelPart = modelPartNames[i];\n                    var view = new Uint8Array(zip.file(modelPart).asArrayBuffer());\n                    var fileText = THREE.LoaderUtils.decodeText(view);\n                    var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                    if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n                        console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n                    }\n                    var modelNode = xmlData.querySelector('model');\n                    var extensions = {};\n                    for (var i = 0; i < modelNode.attributes.length; i++) {\n                        var attr = modelNode.attributes[i];\n                        if (attr.name.match(/^xmlns:(.+)$/)) {\n                            extensions[attr.value] = RegExp.$1;\n                        }\n                    }\n                    var modelData = parseModelNode(modelNode);\n                    modelData['xml'] = modelNode;\n                    if (0 < Object.keys(extensions).length) {\n                        modelData['extensions'] = extensions;\n                    }\n                    modelParts[modelPart] = modelData;\n                }\n                for (var i = 0; i < texturesPartNames.length; i++) {\n                    var texturesPartName = texturesPartNames[i];\n                    texturesParts[texturesPartName] = zip.file(texturesPartName).asArrayBuffer();\n                }\n                return {\n                    rels: rels,\n                    modelRels: modelRels,\n                    model: modelParts,\n                    printTicket: printTicketParts,\n                    texture: texturesParts,\n                    other: otherParts\n                };\n            }\n            function parseRelsXml(relsFileText) {\n                var relationships = [];\n                var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n                var relsNodes = relsXmlData.querySelectorAll('Relationship');\n                for (var i = 0; i < relsNodes.length; i++) {\n                    var relsNode = relsNodes[i];\n                    var relationship = {\n                        target: relsNode.getAttribute('Target'),\n                        id: relsNode.getAttribute('Id'),\n                        type: relsNode.getAttribute('Type')\n                    };\n                    relationships.push(relationship);\n                }\n                return relationships;\n            }\n            function parseMetadataNodes(metadataNodes) {\n                var metadataData = {};\n                for (var i = 0; i < metadataNodes.length; i++) {\n                    var metadataNode = metadataNodes[i];\n                    var name = metadataNode.getAttribute('name');\n                    var validNames = [\n                        'Title',\n                        'Designer',\n                        'Description',\n                        'Copyright',\n                        'LicenseTerms',\n                        'Rating',\n                        'CreationDate',\n                        'ModificationDate'\n                    ];\n                    if (0 <= validNames.indexOf(name)) {\n                        metadataData[name] = metadataNode.textContent;\n                    }\n                }\n                return metadataData;\n            }\n            function parseBasematerialsNode(basematerialsNode) {\n                var basematerialsData = {\n                    id: basematerialsNode.getAttribute('id'),\n                    basematerials: []\n                };\n                var basematerialNodes = basematerialsNode.querySelectorAll('base');\n                for (var i = 0; i < basematerialNodes.length; i++) {\n                    var basematerialNode = basematerialNodes[i];\n                    var basematerialData = parseBasematerialNode(basematerialNode);\n                    basematerialData.index = i;\n                    basematerialsData.basematerials.push(basematerialData);\n                }\n                return basematerialsData;\n            }\n            function parseTexture2DNode(texture2DNode) {\n                var texture2dData = {\n                    id: texture2DNode.getAttribute('id'),\n                    path: texture2DNode.getAttribute('path'),\n                    contenttype: texture2DNode.getAttribute('contenttype'),\n                    tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n                    tilestylev: texture2DNode.getAttribute('tilestylev'),\n                    filter: texture2DNode.getAttribute('filter')\n                };\n                return texture2dData;\n            }\n            function parseTextures2DGroupNode(texture2DGroupNode) {\n                var texture2DGroupData = {\n                    id: texture2DGroupNode.getAttribute('id'),\n                    texid: texture2DGroupNode.getAttribute('texid'),\n                    displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n                };\n                var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n                var uvs = [];\n                for (var i = 0; i < tex2coordNodes.length; i++) {\n                    var tex2coordNode = tex2coordNodes[i];\n                    var u = tex2coordNode.getAttribute('u');\n                    var v = tex2coordNode.getAttribute('v');\n                    uvs.push(parseFloat(u), parseFloat(v));\n                }\n                texture2DGroupData['uvs'] = new Float32Array(uvs);\n                return texture2DGroupData;\n            }\n            function parseColorGroupNode(colorGroupNode) {\n                var colorGroupData = {\n                    id: colorGroupNode.getAttribute('id'),\n                    displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n                };\n                var colorNodes = colorGroupNode.querySelectorAll('color');\n                var colors = [];\n                var colorObject = new THREE.Color();\n                for (var i = 0; i < colorNodes.length; i++) {\n                    var colorNode = colorNodes[i];\n                    var color = colorNode.getAttribute('color');\n                    colorObject.setStyle(color.substring(0, 7));\n                    colorObject.convertSRGBToLinear();\n                    colors.push(colorObject.r, colorObject.g, colorObject.b);\n                }\n                colorGroupData['colors'] = new Float32Array(colors);\n                return colorGroupData;\n            }\n            function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n                var metallicDisplaypropertiesData = { id: metallicDisplaypropetiesNode.getAttribute('id') };\n                var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n                var metallicData = [];\n                for (var i = 0; i < metallicNodes.length; i++) {\n                    var metallicNode = metallicNodes[i];\n                    metallicData.push({\n                        name: metallicNode.getAttribute('name'),\n                        metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n                        roughness: parseFloat(metallicNode.getAttribute('roughness'))\n                    });\n                }\n                metallicDisplaypropertiesData.data = metallicData;\n                return metallicDisplaypropertiesData;\n            }\n            function parseBasematerialNode(basematerialNode) {\n                var basematerialData = {};\n                basematerialData['name'] = basematerialNode.getAttribute('name');\n                basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor');\n                basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n                return basematerialData;\n            }\n            function parseMeshNode(meshNode) {\n                var meshData = {};\n                var vertices = [];\n                var vertexNodes = meshNode.querySelectorAll('vertices vertex');\n                for (var i = 0; i < vertexNodes.length; i++) {\n                    var vertexNode = vertexNodes[i];\n                    var x = vertexNode.getAttribute('x');\n                    var y = vertexNode.getAttribute('y');\n                    var z = vertexNode.getAttribute('z');\n                    vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n                }\n                meshData['vertices'] = new Float32Array(vertices);\n                var triangleProperties = [];\n                var triangles = [];\n                var triangleNodes = meshNode.querySelectorAll('triangles triangle');\n                for (var i = 0; i < triangleNodes.length; i++) {\n                    var triangleNode = triangleNodes[i];\n                    var v1 = triangleNode.getAttribute('v1');\n                    var v2 = triangleNode.getAttribute('v2');\n                    var v3 = triangleNode.getAttribute('v3');\n                    var p1 = triangleNode.getAttribute('p1');\n                    var p2 = triangleNode.getAttribute('p2');\n                    var p3 = triangleNode.getAttribute('p3');\n                    var pid = triangleNode.getAttribute('pid');\n                    var triangleProperty = {};\n                    triangleProperty['v1'] = parseInt(v1, 10);\n                    triangleProperty['v2'] = parseInt(v2, 10);\n                    triangleProperty['v3'] = parseInt(v3, 10);\n                    triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);\n                    if (p1) {\n                        triangleProperty['p1'] = parseInt(p1, 10);\n                    }\n                    if (p2) {\n                        triangleProperty['p2'] = parseInt(p2, 10);\n                    }\n                    if (p3) {\n                        triangleProperty['p3'] = parseInt(p3, 10);\n                    }\n                    if (pid) {\n                        triangleProperty['pid'] = pid;\n                    }\n                    if (0 < Object.keys(triangleProperty).length) {\n                        triangleProperties.push(triangleProperty);\n                    }\n                }\n                meshData['triangleProperties'] = triangleProperties;\n                meshData['triangles'] = new Uint32Array(triangles);\n                return meshData;\n            }\n            function parseComponentsNode(componentsNode) {\n                var components = [];\n                var componentNodes = componentsNode.querySelectorAll('component');\n                for (var i = 0; i < componentNodes.length; i++) {\n                    var componentNode = componentNodes[i];\n                    var componentData = parseComponentNode(componentNode);\n                    components.push(componentData);\n                }\n                return components;\n            }\n            function parseComponentNode(componentNode) {\n                var componentData = {};\n                componentData['objectId'] = componentNode.getAttribute('objectid');\n                var transform = componentNode.getAttribute('transform');\n                if (transform) {\n                    componentData['transform'] = parseTransform(transform);\n                }\n                return componentData;\n            }\n            function parseTransform(transform) {\n                var t = [];\n                transform.split(' ').forEach(function (s) {\n                    t.push(parseFloat(s));\n                });\n                var matrix = new THREE.Matrix4();\n                matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n                return matrix;\n            }\n            function parseObjectNode(objectNode) {\n                var objectData = { type: objectNode.getAttribute('type') };\n                var id = objectNode.getAttribute('id');\n                if (id) {\n                    objectData['id'] = id;\n                }\n                var pid = objectNode.getAttribute('pid');\n                if (pid) {\n                    objectData['pid'] = pid;\n                }\n                var pindex = objectNode.getAttribute('pindex');\n                if (pindex) {\n                    objectData['pindex'] = pindex;\n                }\n                var thumbnail = objectNode.getAttribute('thumbnail');\n                if (thumbnail) {\n                    objectData['thumbnail'] = thumbnail;\n                }\n                var partnumber = objectNode.getAttribute('partnumber');\n                if (partnumber) {\n                    objectData['partnumber'] = partnumber;\n                }\n                var name = objectNode.getAttribute('name');\n                if (name) {\n                    objectData['name'] = name;\n                }\n                var meshNode = objectNode.querySelector('mesh');\n                if (meshNode) {\n                    objectData['mesh'] = parseMeshNode(meshNode);\n                }\n                var componentsNode = objectNode.querySelector('components');\n                if (componentsNode) {\n                    objectData['components'] = parseComponentsNode(componentsNode);\n                }\n                return objectData;\n            }\n            function parseResourcesNode(resourcesNode) {\n                var resourcesData = {};\n                resourcesData['basematerials'] = {};\n                var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n                for (var i = 0; i < basematerialsNodes.length; i++) {\n                    var basematerialsNode = basematerialsNodes[i];\n                    var basematerialsData = parseBasematerialsNode(basematerialsNode);\n                    resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n                }\n                resourcesData['texture2d'] = {};\n                var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n                for (var i = 0; i < textures2DNodes.length; i++) {\n                    var textures2DNode = textures2DNodes[i];\n                    var texture2DData = parseTexture2DNode(textures2DNode);\n                    resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n                }\n                resourcesData['colorgroup'] = {};\n                var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n                for (var i = 0; i < colorGroupNodes.length; i++) {\n                    var colorGroupNode = colorGroupNodes[i];\n                    var colorGroupData = parseColorGroupNode(colorGroupNode);\n                    resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n                }\n                resourcesData['pbmetallicdisplayproperties'] = {};\n                var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n                for (var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n                    var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n                    var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n                    resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n                }\n                resourcesData['texture2dgroup'] = {};\n                var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n                for (var i = 0; i < textures2DGroupNodes.length; i++) {\n                    var textures2DGroupNode = textures2DGroupNodes[i];\n                    var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n                    resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n                }\n                resourcesData['object'] = {};\n                var objectNodes = resourcesNode.querySelectorAll('object');\n                for (var i = 0; i < objectNodes.length; i++) {\n                    var objectNode = objectNodes[i];\n                    var objectData = parseObjectNode(objectNode);\n                    resourcesData['object'][objectData['id']] = objectData;\n                }\n                return resourcesData;\n            }\n            function parseBuildNode(buildNode) {\n                var buildData = [];\n                var itemNodes = buildNode.querySelectorAll('item');\n                for (var i = 0; i < itemNodes.length; i++) {\n                    var itemNode = itemNodes[i];\n                    var buildItem = { objectId: itemNode.getAttribute('objectid') };\n                    var transform = itemNode.getAttribute('transform');\n                    if (transform) {\n                        buildItem['transform'] = parseTransform(transform);\n                    }\n                    buildData.push(buildItem);\n                }\n                return buildData;\n            }\n            function parseModelNode(modelNode) {\n                var modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' };\n                var metadataNodes = modelNode.querySelectorAll('metadata');\n                if (metadataNodes) {\n                    modelData['metadata'] = parseMetadataNodes(metadataNodes);\n                }\n                var resourcesNode = modelNode.querySelector('resources');\n                if (resourcesNode) {\n                    modelData['resources'] = parseResourcesNode(resourcesNode);\n                }\n                var buildNode = modelNode.querySelector('build');\n                if (buildNode) {\n                    modelData['build'] = parseBuildNode(buildNode);\n                }\n                return modelData;\n            }\n            function buildTexture(texture2dgroup, objects, modelData, textureData) {\n                var texid = texture2dgroup.texid;\n                var texture2ds = modelData.resources.texture2d;\n                var texture2d = texture2ds[texid];\n                if (texture2d) {\n                    var data = textureData[texture2d.path];\n                    var type = texture2d.contenttype;\n                    var blob = new Blob([data], { type: type });\n                    var sourceURI = URL.createObjectURL(blob);\n                    var texture = textureLoader.load(sourceURI, function () {\n                        URL.revokeObjectURL(sourceURI);\n                    });\n                    texture.encoding = THREE.sRGBEncoding;\n                    switch (texture2d.tilestyleu) {\n                    case 'wrap':\n                        texture.wrapS = THREE.RepeatWrapping;\n                        break;\n                    case 'mirror':\n                        texture.wrapS = THREE.MirroredRepeatWrapping;\n                        break;\n                    case 'none':\n                    case 'clamp':\n                        texture.wrapS = THREE.ClampToEdgeWrapping;\n                        break;\n                    default:\n                        texture.wrapS = THREE.RepeatWrapping;\n                    }\n                    switch (texture2d.tilestylev) {\n                    case 'wrap':\n                        texture.wrapT = THREE.RepeatWrapping;\n                        break;\n                    case 'mirror':\n                        texture.wrapT = THREE.MirroredRepeatWrapping;\n                        break;\n                    case 'none':\n                    case 'clamp':\n                        texture.wrapT = THREE.ClampToEdgeWrapping;\n                        break;\n                    default:\n                        texture.wrapT = THREE.RepeatWrapping;\n                    }\n                    switch (texture2d.filter) {\n                    case 'auto':\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\n                        break;\n                    case 'linear':\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearFilter;\n                        break;\n                    case 'nearest':\n                        texture.magFilter = THREE.NearestFilter;\n                        texture.minFilter = THREE.NearestFilter;\n                        break;\n                    default:\n                        texture.magFilter = THREE.LinearFilter;\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\n                    }\n                    return texture;\n                } else {\n                    return null;\n                }\n            }\n            function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\n                var objectPindex = objectData.pindex;\n                var materialMap = {};\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n                    if (materialMap[pindex] === undefined)\n                        materialMap[pindex] = [];\n                    materialMap[pindex].push(triangleProperty);\n                }\n                var keys = Object.keys(materialMap);\n                var meshes = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var materialIndex = keys[i];\n                    var trianglePropertiesProps = materialMap[materialIndex];\n                    var basematerialData = basematerials.basematerials[materialIndex];\n                    var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);\n                    var geometry = new THREE.BufferGeometry();\n                    var positionData = [];\n                    var vertices = meshData.vertices;\n                    for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n                        var triangleProperty = trianglePropertiesProps[j];\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                    var mesh = new THREE.Mesh(geometry, material);\n                    meshes.push(mesh);\n                }\n                return meshes;\n            }\n            function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\n                var geometry = new THREE.BufferGeometry();\n                var positionData = [];\n                var uvData = [];\n                var vertices = meshData.vertices;\n                var uvs = texture2dgroup.uvs;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvData, 2));\n                var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n                var material = new THREE.MeshPhongMaterial({\n                    map: texture,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData) {\n                var geometry = new THREE.BufferGeometry();\n                var positionData = [];\n                var colorData = [];\n                var vertices = meshData.vertices;\n                var colors = colorgroup.colors;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var v1 = triangleProperty.v1;\n                    var v2 = triangleProperty.v2;\n                    var v3 = triangleProperty.v3;\n                    positionData.push(vertices[v1 * 3 + 0]);\n                    positionData.push(vertices[v1 * 3 + 1]);\n                    positionData.push(vertices[v1 * 3 + 2]);\n                    positionData.push(vertices[v2 * 3 + 0]);\n                    positionData.push(vertices[v2 * 3 + 1]);\n                    positionData.push(vertices[v2 * 3 + 2]);\n                    positionData.push(vertices[v3 * 3 + 0]);\n                    positionData.push(vertices[v3 * 3 + 1]);\n                    positionData.push(vertices[v3 * 3 + 2]);\n                    var p1 = triangleProperty.p1;\n                    var p2 = triangleProperty.p2;\n                    var p3 = triangleProperty.p3;\n                    colorData.push(colors[p1 * 3 + 0]);\n                    colorData.push(colors[p1 * 3 + 1]);\n                    colorData.push(colors[p1 * 3 + 2]);\n                    colorData.push(colors[(p2 || p1) * 3 + 0]);\n                    colorData.push(colors[(p2 || p1) * 3 + 1]);\n                    colorData.push(colors[(p2 || p1) * 3 + 2]);\n                    colorData.push(colors[(p3 || p1) * 3 + 0]);\n                    colorData.push(colors[(p3 || p1) * 3 + 1]);\n                    colorData.push(colors[(p3 || p1) * 3 + 2]);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorData, 3));\n                var material = new THREE.MeshPhongMaterial({\n                    vertexColors: true,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildDefaultMesh(meshData) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(new THREE.BufferAttribute(meshData['triangles'], 1));\n                geometry.setAttribute('position', new THREE.BufferAttribute(meshData['vertices'], 3));\n                var material = new THREE.MeshPhongMaterial({\n                    color: 11184895,\n                    flatShading: true\n                });\n                var mesh = new THREE.Mesh(geometry, material);\n                return mesh;\n            }\n            function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\n                var keys = Object.keys(resourceMap);\n                var meshes = [];\n                for (var i = 0, il = keys.length; i < il; i++) {\n                    var resourceId = keys[i];\n                    var triangleProperties = resourceMap[resourceId];\n                    var resourceType = getResourceType(resourceId, modelData);\n                    switch (resourceType) {\n                    case 'material':\n                        var basematerials = modelData.resources.basematerials[resourceId];\n                        var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\n                        for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                            meshes.push(newMeshes[j]);\n                        }\n                        break;\n                    case 'texture':\n                        var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n                        meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\n                        break;\n                    case 'vertexColors':\n                        var colorgroup = modelData.resources.colorgroup[resourceId];\n                        meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData));\n                        break;\n                    case 'default':\n                        meshes.push(buildDefaultMesh(meshData));\n                        break;\n                    default:\n                        console.error('THREE.3MFLoader: Unsupported resource type.');\n                    }\n                }\n                return meshes;\n            }\n            function getResourceType(pid, modelData) {\n                if (modelData.resources.texture2dgroup[pid] !== undefined) {\n                    return 'texture';\n                } else if (modelData.resources.basematerials[pid] !== undefined) {\n                    return 'material';\n                } else if (modelData.resources.colorgroup[pid] !== undefined) {\n                    return 'vertexColors';\n                } else if (pid === 'default') {\n                    return 'default';\n                } else {\n                    return undefined;\n                }\n            }\n            function analyzeObject(modelData, meshData, objectData) {\n                var resourceMap = {};\n                var triangleProperties = meshData['triangleProperties'];\n                var objectPid = objectData.pid;\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\n                    var triangleProperty = triangleProperties[i];\n                    var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n                    if (pid === undefined)\n                        pid = 'default';\n                    if (resourceMap[pid] === undefined)\n                        resourceMap[pid] = [];\n                    resourceMap[pid].push(triangleProperty);\n                }\n                return resourceMap;\n            }\n            function buildGroup(meshData, objects, modelData, textureData, objectData) {\n                var group = new THREE.Group();\n                var resourceMap = analyzeObject(modelData, meshData, objectData);\n                var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\n                for (var i = 0, l = meshes.length; i < l; i++) {\n                    group.add(meshes[i]);\n                }\n                return group;\n            }\n            function applyExtensions(extensions, meshData, modelXml) {\n                if (!extensions) {\n                    return;\n                }\n                var availableExtensions = [];\n                var keys = Object.keys(extensions);\n                for (var i = 0; i < keys.length; i++) {\n                    var ns = keys[i];\n                    for (var j = 0; j < scope.availableExtensions.length; j++) {\n                        var extension = scope.availableExtensions[j];\n                        if (extension.ns === ns) {\n                            availableExtensions.push(extension);\n                        }\n                    }\n                }\n                for (var i = 0; i < availableExtensions.length; i++) {\n                    var extension = availableExtensions[i];\n                    extension.apply(modelXml, extensions[extension['ns']], meshData);\n                }\n            }\n            function getBuild(data, objects, modelData, textureData, objectData, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data, objects, modelData, textureData, objectData);\n                return data.build;\n            }\n            function buildBasematerial(materialData, objects, modelData) {\n                var material;\n                var displaypropertiesid = materialData.displaypropertiesid;\n                var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n                if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n                    var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n                    var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n                    material = new THREE.MeshStandardMaterial({\n                        flatShading: true,\n                        roughness: metallicData.roughness,\n                        metalness: metallicData.metallicness\n                    });\n                } else {\n                    material = new THREE.MeshPhongMaterial({ flatShading: true });\n                }\n                material.name = materialData.name;\n                var displaycolor = materialData.displaycolor;\n                var color = displaycolor.substring(0, 7);\n                material.color.setStyle(color);\n                material.color.convertSRGBToLinear();\n                if (displaycolor.length === 9) {\n                    material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n                }\n                return material;\n            }\n            function buildComposite(compositeData, objects, modelData, textureData) {\n                var composite = new THREE.Group();\n                for (var j = 0; j < compositeData.length; j++) {\n                    var component = compositeData[j];\n                    var build = objects[component.objectId];\n                    if (build === undefined) {\n                        buildObject(component.objectId, objects, modelData, textureData);\n                        build = objects[component.objectId];\n                    }\n                    var object3D = build.clone();\n                    var transform = component.transform;\n                    if (transform) {\n                        object3D.applyMatrix4(transform);\n                    }\n                    composite.add(object3D);\n                }\n                return composite;\n            }\n            function buildObject(objectId, objects, modelData, textureData) {\n                var objectData = modelData['resources']['object'][objectId];\n                if (objectData['mesh']) {\n                    var meshData = objectData['mesh'];\n                    var extensions = modelData['extensions'];\n                    var modelXml = modelData['xml'];\n                    applyExtensions(extensions, meshData, modelXml);\n                    objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n                } else {\n                    var compositeData = objectData['components'];\n                    objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n                }\n            }\n            function buildObjects(data3mf) {\n                var modelsData = data3mf.model;\n                var modelRels = data3mf.modelRels;\n                var objects = {};\n                var modelsKeys = Object.keys(modelsData);\n                var textureData = {};\n                if (modelRels) {\n                    for (var i = 0, l = modelRels.length; i < l; i++) {\n                        var modelRel = modelRels[i];\n                        var textureKey = modelRel.target.substring(1);\n                        if (data3mf.texture[textureKey]) {\n                            textureData[modelRel.target] = data3mf.texture[textureKey];\n                        }\n                    }\n                }\n                for (var i = 0; i < modelsKeys.length; i++) {\n                    var modelsKey = modelsKeys[i];\n                    var modelData = modelsData[modelsKey];\n                    var objectIds = Object.keys(modelData['resources']['object']);\n                    for (var j = 0; j < objectIds.length; j++) {\n                        var objectId = objectIds[j];\n                        buildObject(objectId, objects, modelData, textureData);\n                    }\n                }\n                return objects;\n            }\n            function build(objects, data3mf) {\n                var group = new THREE.Group();\n                var relationship = data3mf['rels'][0];\n                var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n                for (var i = 0; i < buildData.length; i++) {\n                    var buildItem = buildData[i];\n                    var object3D = objects[buildItem['objectId']];\n                    var transform = buildItem['transform'];\n                    if (transform) {\n                        object3D.applyMatrix4(transform);\n                    }\n                    group.add(object3D);\n                }\n                return group;\n            }\n            var data3mf = loadDocument(data);\n            var objects = buildObjects(data3mf);\n            return build(objects, data3mf);\n        },\n        addExtension: function (extension) {\n            this.availableExtensions.push(extension);\n        }\n    });\n    return ThreeMFLoader;\n});\ndefine('skylark-threejs-ex/loaders/AMFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function loadDocument(data) {\n                var view = new DataView(data);\n                var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n                if (magic === 'PK') {\n                    var zip = null;\n                    var file = null;\n                    console.log('THREE.AMFLoader: Loading Zip');\n                    try {\n                        zip = new JSZip(data);\n                    } catch (e) {\n                        if (e instanceof ReferenceError) {\n                            console.log('THREE.AMFLoader: jszip missing and file is compressed.');\n                            return null;\n                        }\n                    }\n                    for (file in zip.files) {\n                        if (file.toLowerCase().substr(-4) === '.amf') {\n                            break;\n                        }\n                    }\n                    console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n                    view = new DataView(zip.file(file).asArrayBuffer());\n                }\n                var fileText = THREE.LoaderUtils.decodeText(view);\n                var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n                    console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n                    return null;\n                }\n                return xmlData;\n            }\n            function loadDocumentScale(node) {\n                var scale = 1;\n                var unit = 'millimeter';\n                if (node.documentElement.attributes.unit !== undefined) {\n                    unit = node.documentElement.attributes.unit.value.toLowerCase();\n                }\n                var scaleUnits = {\n                    millimeter: 1,\n                    inch: 25.4,\n                    feet: 304.8,\n                    meter: 1000,\n                    micron: 0.001\n                };\n                if (scaleUnits[unit] !== undefined) {\n                    scale = scaleUnits[unit];\n                }\n                console.log('THREE.AMFLoader: Unit scale: ' + scale);\n                return scale;\n            }\n            function loadMaterials(node) {\n                var matName = 'AMF Material';\n                var matId = node.attributes.id.textContent;\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                var loadedMaterial = null;\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matChildEl = node.childNodes[i];\n                    if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n                        if (matChildEl.attributes.type.value === 'name') {\n                            matName = matChildEl.textContent;\n                        }\n                    } else if (matChildEl.nodeName === 'color') {\n                        color = loadColor(matChildEl);\n                    }\n                }\n                loadedMaterial = new THREE.MeshPhongMaterial({\n                    flatShading: true,\n                    color: new THREE.Color(color.r, color.g, color.b),\n                    name: matName\n                });\n                if (color.a !== 1) {\n                    loadedMaterial.transparent = true;\n                    loadedMaterial.opacity = color.a;\n                }\n                return {\n                    id: matId,\n                    material: loadedMaterial\n                };\n            }\n            function loadColor(node) {\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matColor = node.childNodes[i];\n                    if (matColor.nodeName === 'r') {\n                        color.r = matColor.textContent;\n                    } else if (matColor.nodeName === 'g') {\n                        color.g = matColor.textContent;\n                    } else if (matColor.nodeName === 'b') {\n                        color.b = matColor.textContent;\n                    } else if (matColor.nodeName === 'a') {\n                        color.a = matColor.textContent;\n                    }\n                }\n                return color;\n            }\n            function loadMeshVolume(node) {\n                var volume = {\n                    name: '',\n                    triangles: [],\n                    materialid: null\n                };\n                var currVolumeNode = node.firstElementChild;\n                if (node.attributes.materialid !== undefined) {\n                    volume.materialId = node.attributes.materialid.nodeValue;\n                }\n                while (currVolumeNode) {\n                    if (currVolumeNode.nodeName === 'metadata') {\n                        if (currVolumeNode.attributes.type !== undefined) {\n                            if (currVolumeNode.attributes.type.value === 'name') {\n                                volume.name = currVolumeNode.textContent;\n                            }\n                        }\n                    } else if (currVolumeNode.nodeName === 'triangle') {\n                        var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n                        var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n                        var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n                        volume.triangles.push(v1, v2, v3);\n                    }\n                    currVolumeNode = currVolumeNode.nextElementSibling;\n                }\n                return volume;\n            }\n            function loadMeshVertices(node) {\n                var vertArray = [];\n                var normalArray = [];\n                var currVerticesNode = node.firstElementChild;\n                while (currVerticesNode) {\n                    if (currVerticesNode.nodeName === 'vertex') {\n                        var vNode = currVerticesNode.firstElementChild;\n                        while (vNode) {\n                            if (vNode.nodeName === 'coordinates') {\n                                var x = vNode.getElementsByTagName('x')[0].textContent;\n                                var y = vNode.getElementsByTagName('y')[0].textContent;\n                                var z = vNode.getElementsByTagName('z')[0].textContent;\n                                vertArray.push(x, y, z);\n                            } else if (vNode.nodeName === 'normal') {\n                                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                                normalArray.push(nx, ny, nz);\n                            }\n                            vNode = vNode.nextElementSibling;\n                        }\n                    }\n                    currVerticesNode = currVerticesNode.nextElementSibling;\n                }\n                return {\n                    'vertices': vertArray,\n                    'normals': normalArray\n                };\n            }\n            function loadObject(node) {\n                var objId = node.attributes.id.textContent;\n                var loadedObject = {\n                    name: 'amfobject',\n                    meshes: []\n                };\n                var currColor = null;\n                var currObjNode = node.firstElementChild;\n                while (currObjNode) {\n                    if (currObjNode.nodeName === 'metadata') {\n                        if (currObjNode.attributes.type !== undefined) {\n                            if (currObjNode.attributes.type.value === 'name') {\n                                loadedObject.name = currObjNode.textContent;\n                            }\n                        }\n                    } else if (currObjNode.nodeName === 'color') {\n                        currColor = loadColor(currObjNode);\n                    } else if (currObjNode.nodeName === 'mesh') {\n                        var currMeshNode = currObjNode.firstElementChild;\n                        var mesh = {\n                            vertices: [],\n                            normals: [],\n                            volumes: [],\n                            color: currColor\n                        };\n                        while (currMeshNode) {\n                            if (currMeshNode.nodeName === 'vertices') {\n                                var loadedVertices = loadMeshVertices(currMeshNode);\n                                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n                            } else if (currMeshNode.nodeName === 'volume') {\n                                mesh.volumes.push(loadMeshVolume(currMeshNode));\n                            }\n                            currMeshNode = currMeshNode.nextElementSibling;\n                        }\n                        loadedObject.meshes.push(mesh);\n                    }\n                    currObjNode = currObjNode.nextElementSibling;\n                }\n                return {\n                    'id': objId,\n                    'obj': loadedObject\n                };\n            }\n            var xmlData = loadDocument(data);\n            var amfName = '';\n            var amfAuthor = '';\n            var amfScale = loadDocumentScale(xmlData);\n            var amfMaterials = {};\n            var amfObjects = {};\n            var childNodes = xmlData.documentElement.childNodes;\n            var i, j;\n            for (i = 0; i < childNodes.length; i++) {\n                var child = childNodes[i];\n                if (child.nodeName === 'metadata') {\n                    if (child.attributes.type !== undefined) {\n                        if (child.attributes.type.value === 'name') {\n                            amfName = child.textContent;\n                        } else if (child.attributes.type.value === 'author') {\n                            amfAuthor = child.textContent;\n                        }\n                    }\n                } else if (child.nodeName === 'material') {\n                    var loadedMaterial = loadMaterials(child);\n                    amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n                } else if (child.nodeName === 'object') {\n                    var loadedObject = loadObject(child);\n                    amfObjects[loadedObject.id] = loadedObject.obj;\n                }\n            }\n            var sceneObject = new THREE.Group();\n            var defaultMaterial = new THREE.MeshPhongMaterial({\n                color: 11184895,\n                flatShading: true\n            });\n            sceneObject.name = amfName;\n            sceneObject.userData.author = amfAuthor;\n            sceneObject.userData.loader = 'AMF';\n            for (var id in amfObjects) {\n                var part = amfObjects[id];\n                var meshes = part.meshes;\n                var newObject = new THREE.Group();\n                newObject.name = part.name || '';\n                for (i = 0; i < meshes.length; i++) {\n                    var objDefaultMaterial = defaultMaterial;\n                    var mesh = meshes[i];\n                    var vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);\n                    var normals = null;\n                    if (mesh.normals.length) {\n                        normals = new THREE.Float32BufferAttribute(mesh.normals, 3);\n                    }\n                    if (mesh.color) {\n                        var color = mesh.color;\n                        objDefaultMaterial = defaultMaterial.clone();\n                        objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);\n                        if (color.a !== 1) {\n                            objDefaultMaterial.transparent = true;\n                            objDefaultMaterial.opacity = color.a;\n                        }\n                    }\n                    var volumes = mesh.volumes;\n                    for (j = 0; j < volumes.length; j++) {\n                        var volume = volumes[j];\n                        var newGeometry = new THREE.BufferGeometry();\n                        var material = objDefaultMaterial;\n                        newGeometry.setIndex(volume.triangles);\n                        newGeometry.setAttribute('position', vertices.clone());\n                        if (normals) {\n                            newGeometry.setAttribute('normal', normals.clone());\n                        }\n                        if (amfMaterials[volume.materialId] !== undefined) {\n                            material = amfMaterials[volume.materialId];\n                        }\n                        newGeometry.scale(amfScale, amfScale, amfScale);\n                        newObject.add(new THREE.Mesh(newGeometry, material.clone()));\n                    }\n                }\n                sceneObject.add(newObject);\n            }\n            return sceneObject;\n        }\n    });\n\n    return AMFLoader;\n});\ndefine('skylark-threejs-ex/loaders/AssimpJSONLoader',[\n\t\"skylark-threejs\"\n],function(THREE) {\n\t/**\n\t * @author Alexander Gessler / http://www.greentoken.de/\n\t * https://github.com/acgessler\n\t *\n\t * Loader for models imported with Open Asset Import Library (http://assimp.sf.net)\n\t * through assimp2json (https://github.com/acgessler/assimp2json).\n\t *\n\t * Supports any input format that assimp supports, including 3ds, obj, dae, blend,\n\t * fbx, x, ms3d, lwo (and many more).\n\t *\n\t * See webgl_loader_assimp2json example.\n\t */\n\n\tTHREE.AssimpJSONLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tTHREE.AssimpJSONLoader.prototype = {\n\n\t\tconstructor: THREE.AssimpJSONLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( scope.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.__metadata__;\n\n\t\t\t\t// check if __metadata__ meta header is present\n\t\t\t\t// this header is used to disambiguate between different JSON-based file formats\n\n\t\t\t\tif ( typeof metadata !== 'undefined' ) {\n\n\t\t\t\t\t// check if assimp2json at all\n\n\t\t\t\t\tif ( metadata.format !== 'assimp2json' ) {\n\n\t\t\t\t\t\tonError( 'THREE.AssimpJSONLoader: Not an assimp2json scene.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t// check major format version\n\n\t\t\t\t\t} else if ( metadata.version < 100 && metadata.version >= 200 ) {\n\n\t\t\t\t\t\tonError( 'THREE.AssimpJSONLoader: Unsupported assimp2json file format version.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tonLoad( scope.parse( json, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( value ) {\n\n\t\t\tthis.resourcePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( json, path ) {\n\n\t\t\tfunction parseList( json, handler ) {\n\n\t\t\t\tvar meshes = new Array( json.length );\n\n\t\t\t\tfor ( var i = 0; i < json.length; ++ i ) {\n\n\t\t\t\t\tmeshes[ i ] = handler.call( this, json[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn meshes;\n\n\t\t\t}\n\n\t\t\tfunction parseMesh( json ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar i, l, face;\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar vertices = json.vertices || [];\n\t\t\t\tvar normals = json.normals || [];\n\t\t\t\tvar uvs = json.texturecoords || [];\n\t\t\t\tvar colors = json.colors || [];\n\n\t\t\t\tuvs = uvs[ 0 ] || []; // only support for a single set of uvs\n\n\t\t\t\tfor ( i = 0, l = json.faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tface = json.faces[ i ];\n\t\t\t\t\tindices.push( face[ 0 ], face[ 1 ], face[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tgeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\n\t\t\t\tif ( normals.length > 0 ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs.length > 0 ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors.length > 0 ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction parseMaterial( json ) {\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial();\n\n\t\t\t\tfor ( var i in json.properties ) {\n\n\t\t\t\t\tvar property = json.properties[ i ];\n\t\t\t\t\tvar key = property.key;\n\t\t\t\t\tvar value = property.value;\n\n\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\tcase '$tex.file': {\n\n\t\t\t\t\t\t\tvar semantic = property.semantic;\n\n\t\t\t\t\t\t\t// prop.semantic gives the type of the texture\n\t\t\t\t\t\t\t// 1: diffuse\n\t\t\t\t\t\t\t// 2: specular map\n\t\t\t\t\t\t\t// 4: emissive map\n\t\t\t\t\t\t\t// 5: height map (bumps)\n\t\t\t\t\t\t\t// 6: normal map\n\t\t\t\t\t\t\t// more values (i.e. environment, etc) are known by assimp and may be relevant\n\n\t\t\t\t\t\t\tif ( semantic === 1 || semantic === 2 || semantic === 4 || semantic === 5 || semantic === 6 ) {\n\n\t\t\t\t\t\t\t\tvar keyname;\n\n\t\t\t\t\t\t\t\tswitch ( semantic ) {\n\n\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'map';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'specularMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'emissiveMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'bumpMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'normalMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar texture = textureLoader.load( value );\n\n\t\t\t\t\t\t\t\t// TODO: read texture settings from assimp.\n\t\t\t\t\t\t\t\t// Wrapping is the default, though.\n\n\t\t\t\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t\t\t\t\tmaterial[ keyname ] = texture;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '?mat.name':\n\t\t\t\t\t\t\tmaterial.name = value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$clr.diffuse':\n\t\t\t\t\t\t\tmaterial.color.fromArray( value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$clr.specular':\n\t\t\t\t\t\t\tmaterial.specular.fromArray( value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$clr.emissive':\n\t\t\t\t\t\t\tmaterial.emissive.fromArray( value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$mat.shininess':\n\t\t\t\t\t\t\tmaterial.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$mat.shadingm':\n\t\t\t\t\t\t\t// aiShadingMode_Flat\n\t\t\t\t\t\t\tmaterial.flatShading = ( value === 1 ) ? true : false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$mat.opacity':\n\t\t\t\t\t\t\tif ( value < 1 ) {\n\n\t\t\t\t\t\t\t\tmaterial.opacity = value;\n\t\t\t\t\t\t\t\tmaterial.transparent = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t\tfunction parseObject( json, node, meshes, materials ) {\n\n\t\t\t\tvar obj = new THREE.Object3D(),\ti, idx;\n\n\t\t\t\tobj.name = node.name || '';\n\t\t\t\tobj.matrix = new THREE.Matrix4().fromArray( node.transformation ).transpose();\n\t\t\t\tobj.matrix.decompose( obj.position, obj.quaternion, obj.scale );\n\n\t\t\t\tfor ( i = 0; node.meshes && i < node.meshes.length; i ++ ) {\n\n\t\t\t\t\tidx = node.meshes[ i ];\n\t\t\t\t\tobj.add( new THREE.Mesh( meshes[ idx ], materials[ json.meshes[ idx ].materialindex ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; node.children && i < node.children.length; i ++ ) {\n\n\t\t\t\t\tobj.add( parseObject( json, node.children[ i ], meshes, materials ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\n\t\t\t}\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager );\n\t\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar meshes = parseList( json.meshes, parseMesh );\n\t\t\tvar materials = parseList( json.materials, parseMaterial );\n\t\t\treturn parseObject( json, json.rootnode, meshes, materials );\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.AssimpJSONLoader ;\n});\ndefine('skylark-threejs-ex/loaders/AssimpLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AssimpLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AssimpLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AssimpLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer, path));\n            }, onProgress, onError);\n        },\n        parse: function (buffer, path) {\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var Virtulous = {};\n            Virtulous.KeyFrame = function (time, matrix) {\n                this.time = time;\n                this.matrix = matrix.clone();\n                this.position = new THREE.Vector3();\n                this.quaternion = new THREE.Quaternion();\n                this.scale = new THREE.Vector3(1, 1, 1);\n                this.matrix.decompose(this.position, this.quaternion, this.scale);\n                this.clone = function () {\n                    var n = new Virtulous.KeyFrame(this.time, this.matrix);\n                    return n;\n                };\n                this.lerp = function (nextKey, time) {\n                    time -= this.time;\n                    var dist = nextKey.time - this.time;\n                    var l = time / dist;\n                    var l2 = 1 - l;\n                    var keypos = this.position;\n                    var keyrot = this.quaternion;\n                    var key2pos = nextKey.position;\n                    var key2rot = nextKey.quaternion;\n                    Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n                    Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n                    Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n                    Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n                    Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n                    return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n                };\n            };\n            Virtulous.KeyFrame.tempAniPos = new THREE.Vector3();\n            Virtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();\n            Virtulous.KeyFrame.tempAniScale = new THREE.Vector3(1, 1, 1);\n            Virtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();\n            Virtulous.KeyFrameTrack = function () {\n                this.keys = [];\n                this.target = null;\n                this.time = 0;\n                this.length = 0;\n                this._accelTable = {};\n                this.fps = 20;\n                this.addKey = function (key) {\n                    this.keys.push(key);\n                };\n                this.init = function () {\n                    this.sortKeys();\n                    if (this.keys.length > 0)\n                        this.length = this.keys[this.keys.length - 1].time;\n                    else\n                        this.length = 0;\n                    if (!this.fps)\n                        return;\n                    for (var j = 0; j < this.length * this.fps; j++) {\n                        for (var i = 0; i < this.keys.length; i++) {\n                            if (this.keys[i].time == j) {\n                                this._accelTable[j] = i;\n                                break;\n                            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n                                this._accelTable[j] = i;\n                                break;\n                            }\n                        }\n                    }\n                };\n                this.parseFromThree = function (data) {\n                    var fps = data.fps;\n                    this.target = data.node;\n                    var track = data.hierarchy[0].keys;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n                    }\n                    this.init();\n                };\n                this.parseFromCollada = function (data) {\n                    var track = data.keys;\n                    var fps = this.fps;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n                    }\n                    this.init();\n                };\n                this.sortKeys = function () {\n                    this.keys.sort(this.keySortFunc);\n                };\n                this.keySortFunc = function (a, b) {\n                    return a.time - b.time;\n                };\n                this.clone = function () {\n                    var t = new Virtulous.KeyFrameTrack();\n                    t.target = this.target;\n                    t.time = this.time;\n                    t.length = this.length;\n                    for (var i = 0; i < this.keys.length; i++) {\n                        t.addKey(this.keys[i].clone());\n                    }\n                    t.init();\n                    return t;\n                };\n                this.reTarget = function (root, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    this.target = compareitor(root, this.target);\n                };\n                this.keySearchAccel = function (time) {\n                    time *= this.fps;\n                    time = Math.floor(time);\n                    return this._accelTable[time] || 0;\n                };\n                this.setTime = function (time) {\n                    time = Math.abs(time);\n                    if (this.length)\n                        time = time % this.length + 0.05;\n                    var key0 = null;\n                    var key1 = null;\n                    for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {\n                        if (this.keys[i].time == time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i];\n                            break;\n                        } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i + 1];\n                            break;\n                        } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[0].clone();\n                            key1.time += this.length + 0.05;\n                            break;\n                        }\n                    }\n                    if (key0 && key1 && key0 !== key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.lerp(key1, time));\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                    if (key0 && key1 && key0 == key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.matrix);\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                };\n            };\n            Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n                function find(node, name) {\n                    if (node.name == name)\n                        return node;\n                    for (var i = 0; i < node.children.length; i++) {\n                        var r = find(node.children[i], name);\n                        if (r)\n                            return r;\n                    }\n                    return null;\n                }\n                return find(root, target.name);\n            };\n            Virtulous.Animation = function () {\n                this.tracks = [];\n                this.length = 0;\n                this.addTrack = function (track) {\n                    this.tracks.push(track);\n                    this.length = Math.max(track.length, this.length);\n                };\n                this.setTime = function (time) {\n                    this.time = time;\n                    for (var i = 0; i < this.tracks.length; i++)\n                        this.tracks[i].setTime(time);\n                };\n                this.clone = function (target, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    var n = new Virtulous.Animation();\n                    n.target = target;\n                    for (var i = 0; i < this.tracks.length; i++) {\n                        var track = this.tracks[i].clone();\n                        track.reTarget(target, compareitor);\n                        n.addTrack(track);\n                    }\n                    return n;\n                };\n            };\n            var ASSBIN_CHUNK_AICAMERA = 4660;\n            var ASSBIN_CHUNK_AILIGHT = 4661;\n            var ASSBIN_CHUNK_AITEXTURE = 4662;\n            var ASSBIN_CHUNK_AIMESH = 4663;\n            var ASSBIN_CHUNK_AINODEANIM = 4664;\n            var ASSBIN_CHUNK_AISCENE = 4665;\n            var ASSBIN_CHUNK_AIBONE = 4666;\n            var ASSBIN_CHUNK_AIANIMATION = 4667;\n            var ASSBIN_CHUNK_AINODE = 4668;\n            var ASSBIN_CHUNK_AIMATERIAL = 4669;\n            var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n            var ASSBIN_MESH_HAS_POSITIONS = 1;\n            var ASSBIN_MESH_HAS_NORMALS = 2;\n            var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n            var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n            var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n            var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n            var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n            var aiLightSource_DIRECTIONAL = 1;\n            var aiLightSource_SPOT = 3;\n            var aiTextureType_DIFFUSE = 1;\n            var aiTextureType_NORMALS = 6;\n            var aiTextureType_OPACITY = 8;\n            var aiTextureType_LIGHTMAP = 10;\n            var BONESPERVERT = 4;\n            function ASSBIN_MESH_HAS_TEXCOORD(n) {\n                return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n            }\n            function ASSBIN_MESH_HAS_COLOR(n) {\n                return ASSBIN_MESH_HAS_COLOR_BASE << n;\n            }\n            function markBones(scene) {\n                for (var i in scene.mMeshes) {\n                    var mesh = scene.mMeshes[i];\n                    for (var k in mesh.mBones) {\n                        var boneNode = scene.findNode(mesh.mBones[k].mName);\n                        if (boneNode)\n                            boneNode.isBone = true;\n                    }\n                }\n            }\n            function cloneTreeToBones(root, scene) {\n                var rootBone = new THREE.Bone();\n                rootBone.matrix.copy(root.matrix);\n                rootBone.matrixWorld.copy(root.matrixWorld);\n                rootBone.position.copy(root.position);\n                rootBone.quaternion.copy(root.quaternion);\n                rootBone.scale.copy(root.scale);\n                scene.nodeCount++;\n                rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();\n                if (!scene.nodeToBoneMap[root.name])\n                    scene.nodeToBoneMap[root.name] = [];\n                scene.nodeToBoneMap[root.name].push(rootBone);\n                for (var i in root.children) {\n                    var child = cloneTreeToBones(root.children[i], scene);\n                    rootBone.add(child);\n                }\n                return rootBone;\n            }\n            function sortWeights(indexes, weights) {\n                var pairs = [];\n                for (var i = 0; i < indexes.length; i++) {\n                    pairs.push({\n                        i: indexes[i],\n                        w: weights[i]\n                    });\n                }\n                pairs.sort(function (a, b) {\n                    return b.w - a.w;\n                });\n                while (pairs.length < 4) {\n                    pairs.push({\n                        i: 0,\n                        w: 0\n                    });\n                }\n                if (pairs.length > 4)\n                    pairs.length = 4;\n                var sum = 0;\n                for (var i = 0; i < 4; i++) {\n                    sum += pairs[i].w * pairs[i].w;\n                }\n                sum = Math.sqrt(sum);\n                for (var i = 0; i < 4; i++) {\n                    pairs[i].w = pairs[i].w / sum;\n                    indexes[i] = pairs[i].i;\n                    weights[i] = pairs[i].w;\n                }\n            }\n            function findMatchingBone(root, name) {\n                if (root.name.indexOf('bone_' + name) == 0)\n                    return root;\n                for (var i in root.children) {\n                    var ret = findMatchingBone(root.children[i], name);\n                    if (ret)\n                        return ret;\n                }\n                return undefined;\n            }\n            function aiMesh() {\n                this.mPrimitiveTypes = 0;\n                this.mNumVertices = 0;\n                this.mNumFaces = 0;\n                this.mNumBones = 0;\n                this.mMaterialIndex = 0;\n                this.mVertices = [];\n                this.mNormals = [];\n                this.mTangents = [];\n                this.mBitangents = [];\n                this.mColors = [[]];\n                this.mTextureCoords = [[]];\n                this.mFaces = [];\n                this.mBones = [];\n                this.hookupSkeletons = function (scene) {\n                    if (this.mBones.length == 0)\n                        return;\n                    var allBones = [];\n                    var offsetMatrix = [];\n                    var skeletonRoot = scene.findNode(this.mBones[0].mName);\n                    while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n                        skeletonRoot = skeletonRoot.mParent;\n                    }\n                    var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                    var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                    this.threeNode.add(threeSkeletonRootBone);\n                    for (var i = 0; i < this.mBones.length; i++) {\n                        var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                        if (bone) {\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        } else {\n                            var skeletonRoot = scene.findNode(this.mBones[i].mName);\n                            if (!skeletonRoot)\n                                return;\n                            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                            this.threeNode.add(threeSkeletonRootBone);\n                            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        }\n                    }\n                    var skeleton = new THREE.Skeleton(allBones, offsetMatrix);\n                    this.threeNode.bind(skeleton, new THREE.Matrix4());\n                    this.threeNode.material.skinning = true;\n                };\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var geometry = new THREE.BufferGeometry();\n                    var mat;\n                    if (scene.mMaterials[this.mMaterialIndex])\n                        mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);\n                    else\n                        mat = new THREE.MeshLambertMaterial();\n                    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(this.mVertexBuffer, 3));\n                    if (this.mNormalBuffer && this.mNormalBuffer.length > 0)\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(this.mNormalBuffer, 3));\n                    if (this.mColorBuffer && this.mColorBuffer.length > 0)\n                        geometry.setAttribute('color', new THREE.BufferAttribute(this.mColorBuffer, 4));\n                    if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0)\n                        geometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n                    if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0)\n                        geometry.setAttribute('uv1', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n                    if (this.mTangentBuffer && this.mTangentBuffer.length > 0)\n                        geometry.setAttribute('tangents', new THREE.BufferAttribute(this.mTangentBuffer, 3));\n                    if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0)\n                        geometry.setAttribute('bitangents', new THREE.BufferAttribute(this.mBitangentBuffer, 3));\n                    if (this.mBones.length > 0) {\n                        var weights = [];\n                        var bones = [];\n                        for (var i = 0; i < this.mBones.length; i++) {\n                            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {\n                                var weight = this.mBones[i].mWeights[j];\n                                if (weight) {\n                                    if (!weights[weight.mVertexId])\n                                        weights[weight.mVertexId] = [];\n                                    if (!bones[weight.mVertexId])\n                                        bones[weight.mVertexId] = [];\n                                    weights[weight.mVertexId].push(weight.mWeight);\n                                    bones[weight.mVertexId].push(parseInt(i));\n                                }\n                            }\n                        }\n                        for (var i in bones) {\n                            sortWeights(bones[i], weights[i]);\n                        }\n                        var _weights = [];\n                        var _bones = [];\n                        for (var i = 0; i < weights.length; i++) {\n                            for (var j = 0; j < 4; j++) {\n                                if (weights[i] && bones[i]) {\n                                    _weights.push(weights[i][j]);\n                                    _bones.push(bones[i][j]);\n                                } else {\n                                    _weights.push(0);\n                                    _bones.push(0);\n                                }\n                            }\n                        }\n                        geometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n                        geometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n                    }\n                    var mesh;\n                    if (this.mBones.length == 0)\n                        mesh = new THREE.Mesh(geometry, mat);\n                    if (this.mBones.length > 0) {\n                        mesh = new THREE.SkinnedMesh(geometry, mat);\n                        mesh.normalizeSkinWeights();\n                    }\n                    this.threeNode = mesh;\n                    return mesh;\n                };\n            }\n            function aiFace() {\n                this.mNumIndices = 0;\n                this.mIndices = [];\n            }\n            function aiVector3D() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.toTHREE = function () {\n                    return new THREE.Vector3(this.x, this.y, this.z);\n                };\n            }\n            function aiColor3D() {\n                this.r = 0;\n                this.g = 0;\n                this.b = 0;\n                this.a = 0;\n                this.toTHREE = function () {\n                    return new THREE.Color(this.r, this.g, this.b);\n                };\n            }\n            function aiQuaternion() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.w = 0;\n                this.toTHREE = function () {\n                    return new THREE.Quaternion(this.x, this.y, this.z, this.w);\n                };\n            }\n            function aiVertexWeight() {\n                this.mVertexId = 0;\n                this.mWeight = 0;\n            }\n            function aiString() {\n                this.data = [];\n                this.toString = function () {\n                    var str = '';\n                    this.data.forEach(function (i) {\n                        str += String.fromCharCode(i);\n                    });\n                    return str.replace(/[^\\x20-\\x7E]+/g, '');\n                };\n            }\n            function aiVectorKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiQuatKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiNode() {\n                this.mName = '';\n                this.mTransformation = [];\n                this.mNumChildren = 0;\n                this.mNumMeshes = 0;\n                this.mMeshes = [];\n                this.mChildren = [];\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var o = new THREE.Object3D();\n                    o.name = this.mName;\n                    o.matrix = this.mTransformation.toTHREE();\n                    for (var i = 0; i < this.mChildren.length; i++) {\n                        o.add(this.mChildren[i].toTHREE(scene));\n                    }\n                    for (var i = 0; i < this.mMeshes.length; i++) {\n                        o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n                    }\n                    this.threeNode = o;\n                    o.matrix.decompose(o.position, o.quaternion, o.scale);\n                    return o;\n                };\n            }\n            function aiBone() {\n                this.mName = '';\n                this.mNumWeights = 0;\n                this.mOffsetMatrix = 0;\n            }\n            function aiMaterialProperty() {\n                this.mKey = '';\n                this.mSemantic = 0;\n                this.mIndex = 0;\n                this.mData = [];\n                this.mDataLength = 0;\n                this.mType = 0;\n                this.dataAsColor = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    var g = reader.getFloat32(4, true);\n                    var b = reader.getFloat32(8, true);\n                    return new THREE.Color(r, g, b);\n                };\n                this.dataAsFloat = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return r;\n                };\n                this.dataAsBool = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return !!r;\n                };\n                this.dataAsString = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    return s.toString();\n                };\n                this.dataAsMap = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    var path = s.toString();\n                    path = path.replace(/\\\\/g, '/');\n                    if (path.indexOf('/') != -1) {\n                        path = path.substr(path.lastIndexOf('/') + 1);\n                    }\n                    return textureLoader.load(path);\n                };\n            }\n            var namePropMapping = {\n                '?mat.name': 'name',\n                '$mat.shadingm': 'shading',\n                '$mat.twosided': 'twoSided',\n                '$mat.wireframe': 'wireframe',\n                '$clr.ambient': 'ambient',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'specular',\n                '$clr.emissive': 'emissive',\n                '$clr.transparent': 'transparent',\n                '$clr.reflective': 'reflect',\n                '$mat.shininess': 'shininess',\n                '$mat.reflectivity': 'reflectivity',\n                '$mat.refracti': 'refraction',\n                '$tex.file': 'map'\n            };\n            var nameTypeMapping = {\n                '?mat.name': 'string',\n                '$mat.shadingm': 'bool',\n                '$mat.twosided': 'bool',\n                '$mat.wireframe': 'bool',\n                '$clr.ambient': 'color',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'color',\n                '$clr.emissive': 'color',\n                '$clr.transparent': 'color',\n                '$clr.reflective': 'color',\n                '$mat.shininess': 'float',\n                '$mat.reflectivity': 'float',\n                '$mat.refracti': 'float',\n                '$tex.file': 'map'\n            };\n            function aiMaterial() {\n                this.mNumAllocated = 0;\n                this.mNumProperties = 0;\n                this.mProperties = [];\n                this.toTHREE = function () {\n                    var mat = new THREE.MeshPhongMaterial();\n                    for (var i = 0; i < this.mProperties.length; i++) {\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'float')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'color')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'bool')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'string')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {\n                            var prop = this.mProperties[i];\n                            if (prop.mSemantic == aiTextureType_DIFFUSE)\n                                mat.map = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_NORMALS)\n                                mat.normalMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_LIGHTMAP)\n                                mat.lightMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_OPACITY)\n                                mat.alphaMap = this.mProperties[i].dataAsMap();\n                        }\n                    }\n                    mat.ambient.r = 0.53;\n                    mat.ambient.g = 0.53;\n                    mat.ambient.b = 0.53;\n                    mat.color.r = 1;\n                    mat.color.g = 1;\n                    mat.color.b = 1;\n                    return mat;\n                };\n            }\n            function veclerp(v1, v2, l) {\n                var v = new THREE.Vector3();\n                var lm1 = 1 - l;\n                v.x = v1.x * l + v2.x * lm1;\n                v.y = v1.y * l + v2.y * lm1;\n                v.z = v1.z * l + v2.z * lm1;\n                return v;\n            }\n            function quatlerp(q1, q2, l) {\n                return q1.clone().slerp(q2, 1 - l);\n            }\n            function sampleTrack(keys, time, lne, lerp) {\n                if (keys.length == 1)\n                    return keys[0].mValue.toTHREE();\n                var dist = Infinity;\n                var key = null;\n                var nextKey = null;\n                for (var i = 0; i < keys.length; i++) {\n                    var timeDist = Math.abs(keys[i].mTime - time);\n                    if (timeDist < dist && keys[i].mTime <= time) {\n                        dist = timeDist;\n                        key = keys[i];\n                        nextKey = keys[i + 1];\n                    }\n                }\n                if (!key) {\n                    return null;\n                } else if (nextKey) {\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                } else {\n                    nextKey = keys[0].clone();\n                    nextKey.mTime += lne;\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                }\n            }\n            function aiNodeAnim() {\n                this.mNodeName = '';\n                this.mNumPositionKeys = 0;\n                this.mNumRotationKeys = 0;\n                this.mNumScalingKeys = 0;\n                this.mPositionKeys = [];\n                this.mRotationKeys = [];\n                this.mScalingKeys = [];\n                this.mPreState = '';\n                this.mPostState = '';\n                this.init = function (tps) {\n                    if (!tps)\n                        tps = 1;\n                    function t(t) {\n                        t.mTime /= tps;\n                    }\n                    this.mPositionKeys.forEach(t);\n                    this.mRotationKeys.forEach(t);\n                    this.mScalingKeys.forEach(t);\n                };\n                this.sortKeys = function () {\n                    function comp(a, b) {\n                        return a.mTime - b.mTime;\n                    }\n                    this.mPositionKeys.sort(comp);\n                    this.mRotationKeys.sort(comp);\n                    this.mScalingKeys.sort(comp);\n                };\n                this.getLength = function () {\n                    return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n                        return a.mTime;\n                    })));\n                };\n                this.toTHREE = function (o) {\n                    this.sortKeys();\n                    var length = this.getLength();\n                    var track = new Virtulous.KeyFrameTrack();\n                    for (var i = 0; i < length; i += 0.05) {\n                        var matrix = new THREE.Matrix4();\n                        var time = i;\n                        var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n                        var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n                        var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n                        matrix.compose(pos, rotation, scale);\n                        var key = new Virtulous.KeyFrame(time, matrix);\n                        track.addKey(key);\n                    }\n                    track.target = o.findNode(this.mNodeName).toTHREE();\n                    var tracks = [track];\n                    if (o.nodeToBoneMap[this.mNodeName]) {\n                        for (var i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n                            var t2 = track.clone();\n                            t2.target = o.nodeToBoneMap[this.mNodeName][i];\n                            tracks.push(t2);\n                        }\n                    }\n                    return tracks;\n                };\n            }\n            function aiAnimation() {\n                this.mName = '';\n                this.mDuration = 0;\n                this.mTicksPerSecond = 0;\n                this.mNumChannels = 0;\n                this.mChannels = [];\n                this.toTHREE = function (root) {\n                    var animationHandle = new Virtulous.Animation();\n                    for (var i in this.mChannels) {\n                        this.mChannels[i].init(this.mTicksPerSecond);\n                        var tracks = this.mChannels[i].toTHREE(root);\n                        for (var j in tracks) {\n                            tracks[j].init();\n                            animationHandle.addTrack(tracks[j]);\n                        }\n                    }\n                    animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n                        return e.length;\n                    }));\n                    return animationHandle;\n                };\n            }\n            function aiTexture() {\n                this.mWidth = 0;\n                this.mHeight = 0;\n                this.texAchFormatHint = [];\n                this.pcData = [];\n            }\n            function aiLight() {\n                this.mName = '';\n                this.mType = 0;\n                this.mAttenuationConstant = 0;\n                this.mAttenuationLinear = 0;\n                this.mAttenuationQuadratic = 0;\n                this.mAngleInnerCone = 0;\n                this.mAngleOuterCone = 0;\n                this.mColorDiffuse = null;\n                this.mColorSpecular = null;\n                this.mColorAmbient = null;\n            }\n            function aiCamera() {\n                this.mName = '';\n                this.mPosition = null;\n                this.mLookAt = null;\n                this.mUp = null;\n                this.mHorizontalFOV = 0;\n                this.mClipPlaneNear = 0;\n                this.mClipPlaneFar = 0;\n                this.mAspect = 0;\n            }\n            function aiScene() {\n                this.versionMajor = 0;\n                this.versionMinor = 0;\n                this.versionRevision = 0;\n                this.compileFlags = 0;\n                this.mFlags = 0;\n                this.mNumMeshes = 0;\n                this.mNumMaterials = 0;\n                this.mNumAnimations = 0;\n                this.mNumTextures = 0;\n                this.mNumLights = 0;\n                this.mNumCameras = 0;\n                this.mRootNode = null;\n                this.mMeshes = [];\n                this.mMaterials = [];\n                this.mAnimations = [];\n                this.mLights = [];\n                this.mCameras = [];\n                this.nodeToBoneMap = {};\n                this.findNode = function (name, root) {\n                    if (!root) {\n                        root = this.mRootNode;\n                    }\n                    if (root.mName == name) {\n                        return root;\n                    }\n                    for (var i = 0; i < root.mChildren.length; i++) {\n                        var ret = this.findNode(name, root.mChildren[i]);\n                        if (ret)\n                            return ret;\n                    }\n                    return null;\n                };\n                this.toTHREE = function () {\n                    this.nodeCount = 0;\n                    markBones(this);\n                    var o = this.mRootNode.toTHREE(this);\n                    for (var i in this.mMeshes)\n                        this.mMeshes[i].hookupSkeletons(this);\n                    if (this.mAnimations.length > 0) {\n                        var a = this.mAnimations[0].toTHREE(this);\n                    }\n                    return {\n                        object: o,\n                        animation: a\n                    };\n                };\n            }\n            function aiMatrix4() {\n                this.elements = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                this.toTHREE = function () {\n                    var m = new THREE.Matrix4();\n                    for (var i = 0; i < 4; ++i) {\n                        for (var i2 = 0; i2 < 4; ++i2) {\n                            m.elements[i * 4 + i2] = this.elements[i2][i];\n                        }\n                    }\n                    return m;\n                };\n            }\n            var littleEndian = true;\n            function readFloat(dataview) {\n                var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_double(dataview) {\n                var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n                dataview.readOffset += 8;\n                return val;\n            }\n            function Read_uint8_t(dataview) {\n                var val = dataview.getUint8(dataview.readOffset);\n                dataview.readOffset += 1;\n                return val;\n            }\n            function Read_uint16_t(dataview) {\n                var val = dataview.getUint16(dataview.readOffset, littleEndian);\n                dataview.readOffset += 2;\n                return val;\n            }\n            function Read_unsigned_int(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_uint32_t(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_aiVector3D(stream) {\n                var v = new aiVector3D();\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiColor3D(stream) {\n                var c = new aiColor3D();\n                c.r = readFloat(stream);\n                c.g = readFloat(stream);\n                c.b = readFloat(stream);\n                return c;\n            }\n            function Read_aiQuaternion(stream) {\n                var v = new aiQuaternion();\n                v.w = readFloat(stream);\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiString(stream) {\n                var s = new aiString();\n                var stringlengthbytes = Read_unsigned_int(stream);\n                stream.ReadBytes(s.data, 1, stringlengthbytes);\n                return s.toString();\n            }\n            function Read_aiVertexWeight(stream) {\n                var w = new aiVertexWeight();\n                w.mVertexId = Read_unsigned_int(stream);\n                w.mWeight = readFloat(stream);\n                return w;\n            }\n            function Read_aiMatrix4x4(stream) {\n                var m = new aiMatrix4();\n                for (var i = 0; i < 4; ++i) {\n                    for (var i2 = 0; i2 < 4; ++i2) {\n                        m.elements[i][i2] = readFloat(stream);\n                    }\n                }\n                return m;\n            }\n            function Read_aiVectorKey(stream) {\n                var v = new aiVectorKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiVector3D(stream);\n                return v;\n            }\n            function Read_aiQuatKey(stream) {\n                var v = new aiQuatKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiQuaternion(stream);\n                return v;\n            }\n            function ReadArray_aiVertexWeight(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVertexWeight(stream);\n            }\n            function ReadArray_aiVectorKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVectorKey(stream);\n            }\n            function ReadArray_aiQuatKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiQuatKey(stream);\n            }\n            function ReadBounds(stream, T, n) {\n                return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n            }\n            function ai_assert(bool) {\n                if (!bool)\n                    throw 'asset failed';\n            }\n            function ReadBinaryNode(stream, parent, depth) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n                Read_uint32_t(stream);\n                var node = new aiNode();\n                node.mParent = parent;\n                node.mDepth = depth;\n                node.mName = Read_aiString(stream);\n                node.mTransformation = Read_aiMatrix4x4(stream);\n                node.mNumChildren = Read_unsigned_int(stream);\n                node.mNumMeshes = Read_unsigned_int(stream);\n                if (node.mNumMeshes) {\n                    node.mMeshes = [];\n                    for (var i = 0; i < node.mNumMeshes; ++i) {\n                        node.mMeshes[i] = Read_unsigned_int(stream);\n                    }\n                }\n                if (node.mNumChildren) {\n                    node.mChildren = [];\n                    for (var i = 0; i < node.mNumChildren; ++i) {\n                        var node2 = ReadBinaryNode(stream, node, depth++);\n                        node.mChildren[i] = node2;\n                    }\n                }\n                return node;\n            }\n            function ReadBinaryBone(stream, b) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n                Read_uint32_t(stream);\n                b.mName = Read_aiString(stream);\n                b.mNumWeights = Read_unsigned_int(stream);\n                b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n                if (shortened) {\n                    ReadBounds(stream, b.mWeights, b.mNumWeights);\n                } else {\n                    b.mWeights = [];\n                    ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n                }\n                return b;\n            }\n            function ReadBinaryMesh(stream, mesh) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n                Read_uint32_t(stream);\n                mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n                mesh.mNumVertices = Read_unsigned_int(stream);\n                mesh.mNumFaces = Read_unsigned_int(stream);\n                mesh.mNumBones = Read_unsigned_int(stream);\n                mesh.mMaterialIndex = Read_unsigned_int(stream);\n                mesh.mNumUVComponents = [];\n                var c = Read_unsigned_int(stream);\n                if (c & ASSBIN_MESH_HAS_POSITIONS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n                    } else {\n                        mesh.mVertices = [];\n                        mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_NORMALS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n                    } else {\n                        mesh.mNormals = [];\n                        mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n                        ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n                    } else {\n                        mesh.mTangents = [];\n                        mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                        mesh.mBitangents = [];\n                        mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_COLOR(n)))\n                        break;\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mColors[n] = [];\n                        mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n                        stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n                    }\n                }\n                mesh.mTexCoordsBuffers = [];\n                for (var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))\n                        break;\n                    mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mTextureCoords[n] = [];\n                        mesh.mTexCoordsBuffers[n] = [];\n                        for (var uv = 0; uv < mesh.mNumVertices; uv++) {\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            readFloat(stream);\n                        }\n                    }\n                }\n                if (shortened) {\n                    Read_unsigned_int(stream);\n                } else {\n                    mesh.mFaces = [];\n                    mesh.mIndexArray = [];\n                    for (var i = 0; i < mesh.mNumFaces; ++i) {\n                        var f = mesh.mFaces[i] = new aiFace();\n                        f.mNumIndices = Read_uint16_t(stream);\n                        f.mIndices = [];\n                        for (var a = 0; a < f.mNumIndices; ++a) {\n                            if (mesh.mNumVertices < 1 << 16) {\n                                f.mIndices[a] = Read_uint16_t(stream);\n                            } else {\n                                f.mIndices[a] = Read_unsigned_int(stream);\n                            }\n                        }\n                        if (f.mNumIndices === 3) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                        } else if (f.mNumIndices === 4) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[3]);\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                        } else {\n                            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n                        }\n                    }\n                }\n                if (mesh.mNumBones) {\n                    mesh.mBones = [];\n                    for (var a = 0; a < mesh.mNumBones; ++a) {\n                        mesh.mBones[a] = new aiBone();\n                        ReadBinaryBone(stream, mesh.mBones[a]);\n                    }\n                }\n            }\n            function ReadBinaryMaterialProperty(stream, prop) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n                Read_uint32_t(stream);\n                prop.mKey = Read_aiString(stream);\n                prop.mSemantic = Read_unsigned_int(stream);\n                prop.mIndex = Read_unsigned_int(stream);\n                prop.mDataLength = Read_unsigned_int(stream);\n                prop.mType = Read_unsigned_int(stream);\n                prop.mData = [];\n                stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n            }\n            function ReadBinaryMaterial(stream, mat) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n                Read_uint32_t(stream);\n                mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n                if (mat.mNumProperties) {\n                    if (mat.mProperties) {\n                        delete mat.mProperties;\n                    }\n                    mat.mProperties = [];\n                    for (var i = 0; i < mat.mNumProperties; ++i) {\n                        mat.mProperties[i] = new aiMaterialProperty();\n                        ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n                    }\n                }\n            }\n            function ReadBinaryNodeAnim(stream, nd) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n                Read_uint32_t(stream);\n                nd.mNodeName = Read_aiString(stream);\n                nd.mNumPositionKeys = Read_unsigned_int(stream);\n                nd.mNumRotationKeys = Read_unsigned_int(stream);\n                nd.mNumScalingKeys = Read_unsigned_int(stream);\n                nd.mPreState = Read_unsigned_int(stream);\n                nd.mPostState = Read_unsigned_int(stream);\n                if (nd.mNumPositionKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    } else {\n                        nd.mPositionKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    }\n                }\n                if (nd.mNumRotationKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    } else {\n                        nd.mRotationKeys = [];\n                        ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    }\n                }\n                if (nd.mNumScalingKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    } else {\n                        nd.mScalingKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    }\n                }\n            }\n            function ReadBinaryAnim(stream, anim) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n                Read_uint32_t(stream);\n                anim.mName = Read_aiString(stream);\n                anim.mDuration = Read_double(stream);\n                anim.mTicksPerSecond = Read_double(stream);\n                anim.mNumChannels = Read_unsigned_int(stream);\n                if (anim.mNumChannels) {\n                    anim.mChannels = [];\n                    for (var a = 0; a < anim.mNumChannels; ++a) {\n                        anim.mChannels[a] = new aiNodeAnim();\n                        ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n                    }\n                }\n            }\n            function ReadBinaryTexture(stream, tex) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n                Read_uint32_t(stream);\n                tex.mWidth = Read_unsigned_int(stream);\n                tex.mHeight = Read_unsigned_int(stream);\n                stream.ReadBytes(tex.achFormatHint, 1, 4);\n                if (!shortened) {\n                    if (!tex.mHeight) {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n                    } else {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n                    }\n                }\n            }\n            function ReadBinaryLight(stream, l) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n                Read_uint32_t(stream);\n                l.mName = Read_aiString(stream);\n                l.mType = Read_unsigned_int(stream);\n                if (l.mType != aiLightSource_DIRECTIONAL) {\n                    l.mAttenuationConstant = readFloat(stream);\n                    l.mAttenuationLinear = readFloat(stream);\n                    l.mAttenuationQuadratic = readFloat(stream);\n                }\n                l.mColorDiffuse = Read_aiColor3D(stream);\n                l.mColorSpecular = Read_aiColor3D(stream);\n                l.mColorAmbient = Read_aiColor3D(stream);\n                if (l.mType == aiLightSource_SPOT) {\n                    l.mAngleInnerCone = readFloat(stream);\n                    l.mAngleOuterCone = readFloat(stream);\n                }\n            }\n            function ReadBinaryCamera(stream, cam) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n                Read_uint32_t(stream);\n                cam.mName = Read_aiString(stream);\n                cam.mPosition = Read_aiVector3D(stream);\n                cam.mLookAt = Read_aiVector3D(stream);\n                cam.mUp = Read_aiVector3D(stream);\n                cam.mHorizontalFOV = readFloat(stream);\n                cam.mClipPlaneNear = readFloat(stream);\n                cam.mClipPlaneFar = readFloat(stream);\n                cam.mAspect = readFloat(stream);\n            }\n            function ReadBinaryScene(stream, scene) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n                Read_uint32_t(stream);\n                scene.mFlags = Read_unsigned_int(stream);\n                scene.mNumMeshes = Read_unsigned_int(stream);\n                scene.mNumMaterials = Read_unsigned_int(stream);\n                scene.mNumAnimations = Read_unsigned_int(stream);\n                scene.mNumTextures = Read_unsigned_int(stream);\n                scene.mNumLights = Read_unsigned_int(stream);\n                scene.mNumCameras = Read_unsigned_int(stream);\n                scene.mRootNode = new aiNode();\n                scene.mRootNode = ReadBinaryNode(stream, null, 0);\n                if (scene.mNumMeshes) {\n                    scene.mMeshes = [];\n                    for (var i = 0; i < scene.mNumMeshes; ++i) {\n                        scene.mMeshes[i] = new aiMesh();\n                        ReadBinaryMesh(stream, scene.mMeshes[i]);\n                    }\n                }\n                if (scene.mNumMaterials) {\n                    scene.mMaterials = [];\n                    for (var i = 0; i < scene.mNumMaterials; ++i) {\n                        scene.mMaterials[i] = new aiMaterial();\n                        ReadBinaryMaterial(stream, scene.mMaterials[i]);\n                    }\n                }\n                if (scene.mNumAnimations) {\n                    scene.mAnimations = [];\n                    for (var i = 0; i < scene.mNumAnimations; ++i) {\n                        scene.mAnimations[i] = new aiAnimation();\n                        ReadBinaryAnim(stream, scene.mAnimations[i]);\n                    }\n                }\n                if (scene.mNumTextures) {\n                    scene.mTextures = [];\n                    for (var i = 0; i < scene.mNumTextures; ++i) {\n                        scene.mTextures[i] = new aiTexture();\n                        ReadBinaryTexture(stream, scene.mTextures[i]);\n                    }\n                }\n                if (scene.mNumLights) {\n                    scene.mLights = [];\n                    for (var i = 0; i < scene.mNumLights; ++i) {\n                        scene.mLights[i] = new aiLight();\n                        ReadBinaryLight(stream, scene.mLights[i]);\n                    }\n                }\n                if (scene.mNumCameras) {\n                    scene.mCameras = [];\n                    for (var i = 0; i < scene.mNumCameras; ++i) {\n                        scene.mCameras[i] = new aiCamera();\n                        ReadBinaryCamera(stream, scene.mCameras[i]);\n                    }\n                }\n            }\n            var aiOrigin_CUR = 0;\n            var aiOrigin_BEG = 1;\n            function extendStream(stream) {\n                stream.readOffset = 0;\n                stream.Seek = function (off, ori) {\n                    if (ori == aiOrigin_CUR) {\n                        stream.readOffset += off;\n                    }\n                    if (ori == aiOrigin_BEG) {\n                        stream.readOffset = off;\n                    }\n                };\n                stream.ReadBytes = function (buff, size, n) {\n                    var bytes = size * n;\n                    for (var i = 0; i < bytes; i++)\n                        buff[i] = Read_uint8_t(this);\n                };\n                stream.subArray32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Float32Array(newbuff);\n                };\n                stream.subArrayUint16 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint16Array(newbuff);\n                };\n                stream.subArrayUint8 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint8Array(newbuff);\n                };\n                stream.subArrayUint32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint32Array(newbuff);\n                };\n            }\n            var shortened, compressed;\n            function InternReadFile(pFiledata) {\n                var pScene = new aiScene();\n                var stream = new DataView(pFiledata);\n                extendStream(stream);\n                stream.Seek(44, aiOrigin_CUR);\n                pScene.versionMajor = Read_unsigned_int(stream);\n                pScene.versionMinor = Read_unsigned_int(stream);\n                pScene.versionRevision = Read_unsigned_int(stream);\n                pScene.compileFlags = Read_unsigned_int(stream);\n                shortened = Read_uint16_t(stream) > 0;\n                compressed = Read_uint16_t(stream) > 0;\n                if (shortened)\n                    throw 'Shortened binaries are not supported!';\n                stream.Seek(256, aiOrigin_CUR);\n                stream.Seek(128, aiOrigin_CUR);\n                stream.Seek(64, aiOrigin_CUR);\n                if (compressed) {\n                    var uncompressedSize = Read_uint32_t(stream);\n                    var compressedSize = stream.FileSize() - stream.Tell();\n                    var compressedData = [];\n                    stream.Read(compressedData, 1, compressedSize);\n                    var uncompressedData = [];\n                    uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n                    var buff = new ArrayBuffer(uncompressedData);\n                    ReadBinaryScene(buff, pScene);\n                } else {\n                    ReadBinaryScene(stream, pScene);\n                }\n                return pScene.toTHREE();\n            }\n            return InternReadFile(buffer);\n        }\n    });\n    return AssimpLoader;\n});\ndefine('skylark-threejs-ex/loaders/AWDLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AWDLoader = function () {\n        var AWD_FIELD_INT8 = 1, AWD_FIELD_INT16 = 2, AWD_FIELD_INT32 = 3, AWD_FIELD_UINT8 = 4, AWD_FIELD_UINT16 = 5, AWD_FIELD_UINT32 = 6, AWD_FIELD_FLOAT32 = 7, AWD_FIELD_FLOAT64 = 8, AWD_FIELD_BOOL = 21, AWD_FIELD_BADDR = 23, AWD_FIELD_VECTOR2x1 = 41, AWD_FIELD_VECTOR3x1 = 42, AWD_FIELD_VECTOR4x1 = 43, AWD_FIELD_MTX3x2 = 44, AWD_FIELD_MTX3x3 = 45, AWD_FIELD_MTX4x3 = 46, AWD_FIELD_MTX4x4 = 47, BOOL = 21, BADDR = 23, UINT8 = 4, UINT16 = 5, FLOAT32 = 7, FLOAT64 = 8;\n        var littleEndian = true;\n        function Block() {\n            this.id = 0;\n            this.data = null;\n            this.namespace = 0;\n            this.flags = 0;\n        }\n        function AWDProperties() {\n        }\n        AWDProperties.prototype = {\n            set: function (key, value) {\n                this[key] = value;\n            },\n            get: function (key, fallback) {\n                if (this.hasOwnProperty(key)) {\n                    return this[key];\n                } else {\n                    return fallback;\n                }\n            }\n        };\n        var AWDLoader = function (manager) {\n            THREE.Loader.call(this, manager);\n            this.trunk = new THREE.Object3D();\n            this.materialFactory = undefined;\n            this._url = '';\n            this._baseDir = '';\n            this._data = undefined;\n            this._ptr = 0;\n            this._version = [];\n            this._streaming = false;\n            this._optimized_for_accuracy = false;\n            this._compression = 0;\n            this._bodylen = 4294967295;\n            this._blocks = [new Block()];\n            this._accuracyMatrix = false;\n            this._accuracyGeo = false;\n            this._accuracyProps = false;\n        };\n        AWDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: AWDLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                this._url = url;\n                this._baseDir = url.substr(0, url.lastIndexOf('/') + 1);\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(this.path);\n                loader.setResponseType('arraybuffer');\n                loader.load(url, function (text) {\n                    onLoad(scope.parse(text));\n                }, onProgress, onError);\n            },\n            parse: function (data) {\n                var blen = data.byteLength;\n                this._ptr = 0;\n                this._data = new DataView(data);\n                this._parseHeader();\n                if (this._compression != 0) {\n                    console.error('compressed AWD not supported');\n                }\n                if (!this._streaming && this._bodylen != data.byteLength - this._ptr) {\n                    console.error('AWDLoader: body len does not match file length', this._bodylen, blen - this._ptr);\n                }\n                while (this._ptr < blen) {\n                    this.parseNextBlock();\n                }\n                return this.trunk;\n            },\n            parseNextBlock: function () {\n                var assetData, block, blockId = this.readU32(), ns = this.readU8(), type = this.readU8(), flags = this.readU8(), len = this.readU32();\n                switch (type) {\n                case 1:\n                    assetData = this.parseMeshData();\n                    break;\n                case 22:\n                    assetData = this.parseContainer();\n                    break;\n                case 23:\n                    assetData = this.parseMeshInstance();\n                    break;\n                case 81:\n                    assetData = this.parseMaterial();\n                    break;\n                case 82:\n                    assetData = this.parseTexture();\n                    break;\n                case 101:\n                    assetData = this.parseSkeleton();\n                    break;\n                case 112:\n                    assetData = this.parseMeshPoseAnimation(false);\n                    break;\n                case 113:\n                    assetData = this.parseVertexAnimationSet();\n                    break;\n                case 102:\n                    assetData = this.parseSkeletonPose();\n                    break;\n                case 103:\n                    assetData = this.parseSkeletonAnimation();\n                    break;\n                case 122:\n                    assetData = this.parseAnimatorSet();\n                    break;\n                default:\n                    this._ptr += len;\n                    break;\n                }\n                this._blocks[blockId] = block = new Block();\n                block.data = assetData;\n                block.id = blockId;\n                block.namespace = ns;\n                block.flags = flags;\n            },\n            _parseHeader: function () {\n                var version = this._version, awdmagic = this.readU8() << 16 | this.readU8() << 8 | this.readU8();\n                if (awdmagic != 4282180)\n                    throw new Error('AWDLoader - bad magic');\n                version[0] = this.readU8();\n                version[1] = this.readU8();\n                var flags = this.readU16();\n                this._streaming = (flags & 1) == 1;\n                if (version[0] === 2 && version[1] === 1) {\n                    this._accuracyMatrix = (flags & 2) === 2;\n                    this._accuracyGeo = (flags & 4) === 4;\n                    this._accuracyProps = (flags & 8) === 8;\n                }\n                this._geoNrType = this._accuracyGeo ? FLOAT64 : FLOAT32;\n                this._matrixNrType = this._accuracyMatrix ? FLOAT64 : FLOAT32;\n                this._propsNrType = this._accuracyProps ? FLOAT64 : FLOAT32;\n                this._optimized_for_accuracy = (flags & 2) === 2;\n                this._compression = this.readU8();\n                this._bodylen = this.readU32();\n            },\n            parseContainer: function () {\n                var parent, ctr = new THREE.Object3D(), par_id = this.readU32(), mtx = this.parseMatrix4();\n                ctr.name = this.readUTF();\n                ctr.applyMatrix4(mtx);\n                parent = this._blocks[par_id].data || this.trunk;\n                parent.add(ctr);\n                this.parseProperties({\n                    1: this._matrixNrType,\n                    2: this._matrixNrType,\n                    3: this._matrixNrType,\n                    4: UINT8\n                });\n                ctr.extra = this.parseUserAttributes();\n                return ctr;\n            },\n            parseMeshInstance: function () {\n                var name, mesh, geometries, meshLen, meshes, par_id, data_id, mtx, materials, mat, mat_id, num_materials, parent, i;\n                par_id = this.readU32();\n                mtx = this.parseMatrix4();\n                name = this.readUTF();\n                data_id = this.readU32();\n                num_materials = this.readU16();\n                geometries = this.getBlock(data_id);\n                materials = [];\n                for (i = 0; i < num_materials; i++) {\n                    mat_id = this.readU32();\n                    mat = this.getBlock(mat_id);\n                    materials.push(mat);\n                }\n                meshLen = geometries.length;\n                meshes = [];\n                if (meshLen > 1) {\n                    mesh = new THREE.Object3D();\n                    for (i = 0; i < meshLen; i++) {\n                        var sm = new THREE.Mesh(geometries[i]);\n                        meshes.push(sm);\n                        mesh.add(sm);\n                    }\n                } else {\n                    mesh = new THREE.Mesh(geometries[0]);\n                    meshes.push(mesh);\n                }\n                mesh.applyMatrix4(mtx);\n                mesh.name = name;\n                parent = this.getBlock(par_id) || this.trunk;\n                parent.add(mesh);\n                var matLen = materials.length;\n                var maxLen = Math.max(meshLen, matLen);\n                for (i = 0; i < maxLen; i++)\n                    meshes[i % meshLen].material = materials[i % matLen];\n                this.parseProperties(null);\n                mesh.extra = this.parseUserAttributes();\n                return mesh;\n            },\n            parseMaterial: function () {\n                var name, type, props, mat, attributes, num_methods, methods_parsed;\n                name = this.readUTF();\n                type = this.readU8();\n                num_methods = this.readU8();\n                props = this.parseProperties({\n                    1: AWD_FIELD_INT32,\n                    2: AWD_FIELD_BADDR,\n                    11: AWD_FIELD_BOOL,\n                    12: AWD_FIELD_FLOAT32,\n                    13: AWD_FIELD_BOOL\n                });\n                methods_parsed = 0;\n                while (methods_parsed < num_methods) {\n                    this.readU16();\n                    this.parseProperties(null);\n                    this.parseUserAttributes();\n                }\n                attributes = this.parseUserAttributes();\n                if (this.materialFactory !== undefined) {\n                    mat = this.materialFactory(name);\n                    if (mat)\n                        return mat;\n                }\n                mat = new THREE.MeshPhongMaterial();\n                if (type === 1) {\n                    mat.color.setHex(props.get(1, 13421772));\n                } else if (type === 2) {\n                    var tex_addr = props.get(2, 0);\n                    mat.map = this.getBlock(tex_addr);\n                }\n                mat.extra = attributes;\n                mat.alphaThreshold = props.get(12, 0);\n                mat.repeat = props.get(13, false);\n                return mat;\n            },\n            parseTexture: function () {\n                var name = this.readUTF(), type = this.readU8(), asset, data_len;\n                if (type === 0) {\n                    data_len = this.readU32();\n                    var url = this.readUTFBytes(data_len);\n                    console.log(url);\n                    asset = this.loadTexture(url);\n                    asset.userData = {};\n                    asset.userData.name = name;\n                } else {\n                }\n                this.parseProperties(null);\n                this.parseUserAttributes();\n                return asset;\n            },\n            loadTexture: function (url) {\n                var tex = new THREE.Texture();\n                var loader = new THREE.ImageLoader(this.manager);\n                loader.load(this._baseDir + url, function (image) {\n                    tex.image = image;\n                    tex.needsUpdate = true;\n                });\n                return tex;\n            },\n            parseSkeleton: function () {\n                this.readUTF();\n                var num_joints = this.readU16(), skeleton = [], joints_parsed = 0;\n                this.parseProperties(null);\n                while (joints_parsed < num_joints) {\n                    var joint, ibp;\n                    this.readU16();\n                    joint = new THREE.Bone();\n                    joint.parent = this.readU16() - 1;\n                    joint.name = this.readUTF();\n                    ibp = this.parseMatrix4();\n                    joint.skinMatrix = ibp;\n                    this.parseProperties(null);\n                    this.parseUserAttributes();\n                    skeleton.push(joint);\n                    joints_parsed++;\n                }\n                this.parseUserAttributes();\n                return skeleton;\n            },\n            parseSkeletonPose: function () {\n                var name = this.readUTF();\n                var num_joints = this.readU16();\n                this.parseProperties(null);\n                var pose = [];\n                var joints_parsed = 0;\n                while (joints_parsed < num_joints) {\n                    var has_transform;\n                    var mtx_data;\n                    has_transform = this.readU8();\n                    if (has_transform === 1) {\n                        mtx_data = this.parseMatrix4();\n                    } else {\n                        mtx_data = new THREE.Matrix4();\n                    }\n                    pose[joints_parsed] = mtx_data;\n                    joints_parsed++;\n                }\n                this.parseUserAttributes();\n                return pose;\n            },\n            parseSkeletonAnimation: function () {\n                var frame_dur;\n                var pose_addr;\n                var pose;\n                var name = this.readUTF();\n                var clip = [];\n                var num_frames = this.readU16();\n                this.parseProperties(null);\n                var frames_parsed = 0;\n                while (frames_parsed < num_frames) {\n                    pose_addr = this.readU32();\n                    frame_dur = this.readU16();\n                    pose = this._blocks[pose_addr].data;\n                    clip.push({\n                        pose: pose,\n                        duration: frame_dur\n                    });\n                    frames_parsed++;\n                }\n                if (clip.length === 0) {\n                    return;\n                }\n                this.parseUserAttributes();\n                return clip;\n            },\n            parseVertexAnimationSet: function () {\n                var poseBlockAdress, name = this.readUTF(), num_frames = this.readU16(), props = this.parseProperties({ 1: UINT16 }), frames_parsed = 0, skeletonFrames = [];\n                while (frames_parsed < num_frames) {\n                    poseBlockAdress = this.readU32();\n                    skeletonFrames.push(this._blocks[poseBlockAdress].data);\n                    frames_parsed++;\n                }\n                this.parseUserAttributes();\n                return skeletonFrames;\n            },\n            parseAnimatorSet: function () {\n                var animSetBlockAdress;\n                var targetAnimationSet;\n                var name = this.readUTF();\n                var type = this.readU16();\n                var props = this.parseProperties({ 1: BADDR });\n                animSetBlockAdress = this.readU32();\n                var targetMeshLength = this.readU16();\n                var meshAdresses = [];\n                for (var i = 0; i < targetMeshLength; i++)\n                    meshAdresses.push(this.readU32());\n                var activeState = this.readU16();\n                var autoplay = Boolean(this.readU8());\n                this.parseUserAttributes();\n                this.parseUserAttributes();\n                var targetMeshes = [];\n                for (i = 0; i < meshAdresses.length; i++) {\n                    targetMeshes.push(this._blocks[meshAdresses[i]].data);\n                }\n                targetAnimationSet = this._blocks[animSetBlockAdress].data;\n                var thisAnimator;\n                if (type == 1) {\n                    thisAnimator = {\n                        animationSet: targetAnimationSet,\n                        skeleton: this._blocks[props.get(1, 0)].data\n                    };\n                } else if (type == 2) {\n                }\n                for (i = 0; i < targetMeshes.length; i++) {\n                    targetMeshes[i].animator = thisAnimator;\n                }\n                return thisAnimator;\n            },\n            parseMeshData: function () {\n                var name = this.readUTF(), num_subs = this.readU16(), geom, subs_parsed = 0, buffer, geometries = [];\n                this.parseProperties({\n                    1: this._geoNrType,\n                    2: this._geoNrType\n                });\n                while (subs_parsed < num_subs) {\n                    var sm_len, sm_end, attrib;\n                    geom = new THREE.BufferGeometry();\n                    geom.name = name;\n                    geometries.push(geom);\n                    sm_len = this.readU32();\n                    sm_end = this._ptr + sm_len;\n                    this.parseProperties({\n                        1: this._geoNrType,\n                        2: this._geoNrType\n                    });\n                    while (this._ptr < sm_end) {\n                        var idx = 0, str_type = this.readU8(), str_ftype = this.readU8(), str_len = this.readU32(), str_end = str_len + this._ptr;\n                        if (str_type === 1) {\n                            buffer = new Float32Array(str_len / 12 * 3);\n                            attrib = new THREE.BufferAttribute(buffer, 3);\n                            geom.setAttribute('position', attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx] = -this.readF32();\n                                buffer[idx + 1] = this.readF32();\n                                buffer[idx + 2] = this.readF32();\n                                idx += 3;\n                            }\n                        } else if (str_type === 2) {\n                            buffer = new Uint16Array(str_len / 2);\n                            attrib = new THREE.BufferAttribute(buffer, 1);\n                            geom.setIndex(attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx + 1] = this.readU16();\n                                buffer[idx] = this.readU16();\n                                buffer[idx + 2] = this.readU16();\n                                idx += 3;\n                            }\n                        } else if (str_type === 3) {\n                            buffer = new Float32Array(str_len / 8 * 2);\n                            attrib = new THREE.BufferAttribute(buffer, 2);\n                            geom.setAttribute('uv', attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx] = this.readF32();\n                                buffer[idx + 1] = 1 - this.readF32();\n                                idx += 2;\n                            }\n                        } else if (str_type === 4) {\n                            buffer = new Float32Array(str_len / 12 * 3);\n                            attrib = new THREE.BufferAttribute(buffer, 3);\n                            geom.setAttribute('normal', attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx] = -this.readF32();\n                                buffer[idx + 1] = this.readF32();\n                                buffer[idx + 2] = this.readF32();\n                                idx += 3;\n                            }\n                        } else {\n                            this._ptr = str_end;\n                        }\n                    }\n                    this.parseUserAttributes();\n                    geom.computeBoundingSphere();\n                    subs_parsed++;\n                }\n                this.parseUserAttributes();\n                return geometries;\n            },\n            parseMeshPoseAnimation: function (poseOnly) {\n                var num_frames = 1, num_submeshes, frames_parsed, subMeshParsed, str_len, str_end, geom, idx = 0, clip = {}, num_Streams, streamsParsed, streamtypes = [], props, name = this.readUTF(), geoAdress = this.readU32();\n                var mesh = this.getBlock(geoAdress);\n                if (mesh === null) {\n                    console.log('parseMeshPoseAnimation target mesh not found at:', geoAdress);\n                    return;\n                }\n                geom = mesh.geometry;\n                geom.morphTargets = [];\n                if (!poseOnly)\n                    num_frames = this.readU16();\n                num_submeshes = this.readU16();\n                num_Streams = this.readU16();\n                streamsParsed = 0;\n                while (streamsParsed < num_Streams) {\n                    streamtypes.push(this.readU16());\n                    streamsParsed++;\n                }\n                props = this.parseProperties({\n                    1: BOOL,\n                    2: BOOL\n                });\n                clip.looping = props.get(1, true);\n                clip.stitchFinalFrame = props.get(2, false);\n                frames_parsed = 0;\n                while (frames_parsed < num_frames) {\n                    this.readU16();\n                    subMeshParsed = 0;\n                    while (subMeshParsed < num_submeshes) {\n                        streamsParsed = 0;\n                        str_len = this.readU32();\n                        str_end = this._ptr + str_len;\n                        while (streamsParsed < num_Streams) {\n                            if (streamtypes[streamsParsed] === 1) {\n                                var buffer = new Float32Array(str_len / 4);\n                                geom.morphTargets.push({ array: buffer });\n                                idx = 0;\n                                while (this._ptr < str_end) {\n                                    buffer[idx] = this.readF32();\n                                    buffer[idx + 1] = this.readF32();\n                                    buffer[idx + 2] = this.readF32();\n                                    idx += 3;\n                                }\n                                subMeshParsed++;\n                            } else\n                                this._ptr = str_end;\n                            streamsParsed++;\n                        }\n                    }\n                    frames_parsed++;\n                }\n                this.parseUserAttributes();\n                return null;\n            },\n            getBlock: function (id) {\n                return this._blocks[id].data;\n            },\n            parseMatrix4: function () {\n                var mtx = new THREE.Matrix4();\n                var e = mtx.elements;\n                e[0] = this.readF32();\n                e[1] = this.readF32();\n                e[2] = this.readF32();\n                e[3] = 0;\n                e[4] = this.readF32();\n                e[5] = this.readF32();\n                e[6] = this.readF32();\n                e[7] = 0;\n                e[8] = this.readF32();\n                e[9] = this.readF32();\n                e[10] = this.readF32();\n                e[11] = 0;\n                e[12] = -this.readF32();\n                e[13] = this.readF32();\n                e[14] = this.readF32();\n                e[15] = 1;\n                return mtx;\n            },\n            parseProperties: function (expected) {\n                var list_len = this.readU32();\n                var list_end = this._ptr + list_len;\n                var props = new AWDProperties();\n                if (expected) {\n                    while (this._ptr < list_end) {\n                        var key = this.readU16();\n                        var len = this.readU32();\n                        var type;\n                        if (expected.hasOwnProperty(key)) {\n                            type = expected[key];\n                            props.set(key, this.parseAttrValue(type, len));\n                        } else {\n                            this._ptr += len;\n                        }\n                    }\n                }\n                return props;\n            },\n            parseUserAttributes: function () {\n                this._ptr = this.readU32() + this._ptr;\n                return null;\n            },\n            parseAttrValue: function (type, len) {\n                var elem_len;\n                var read_func;\n                switch (type) {\n                case AWD_FIELD_INT8:\n                    elem_len = 1;\n                    read_func = this.readI8;\n                    break;\n                case AWD_FIELD_INT16:\n                    elem_len = 2;\n                    read_func = this.readI16;\n                    break;\n                case AWD_FIELD_INT32:\n                    elem_len = 4;\n                    read_func = this.readI32;\n                    break;\n                case AWD_FIELD_BOOL:\n                case AWD_FIELD_UINT8:\n                    elem_len = 1;\n                    read_func = this.readU8;\n                    break;\n                case AWD_FIELD_UINT16:\n                    elem_len = 2;\n                    read_func = this.readU16;\n                    break;\n                case AWD_FIELD_UINT32:\n                case AWD_FIELD_BADDR:\n                    elem_len = 4;\n                    read_func = this.readU32;\n                    break;\n                case AWD_FIELD_FLOAT32:\n                    elem_len = 4;\n                    read_func = this.readF32;\n                    break;\n                case AWD_FIELD_FLOAT64:\n                    elem_len = 8;\n                    read_func = this.readF64;\n                    break;\n                case AWD_FIELD_VECTOR2x1:\n                case AWD_FIELD_VECTOR3x1:\n                case AWD_FIELD_VECTOR4x1:\n                case AWD_FIELD_MTX3x2:\n                case AWD_FIELD_MTX3x3:\n                case AWD_FIELD_MTX4x3:\n                case AWD_FIELD_MTX4x4:\n                    elem_len = 8;\n                    read_func = this.readF64;\n                    break;\n                }\n                if (elem_len < len) {\n                    var list;\n                    var num_read;\n                    var num_elems;\n                    list = [];\n                    num_read = 0;\n                    num_elems = len / elem_len;\n                    while (num_read < num_elems) {\n                        list.push(read_func.call(this));\n                        num_read++;\n                    }\n                    return list;\n                } else {\n                    return read_func.call(this);\n                }\n            },\n            readU8: function () {\n                return this._data.getUint8(this._ptr++);\n            },\n            readI8: function () {\n                return this._data.getInt8(this._ptr++);\n            },\n            readU16: function () {\n                var a = this._data.getUint16(this._ptr, littleEndian);\n                this._ptr += 2;\n                return a;\n            },\n            readI16: function () {\n                var a = this._data.getInt16(this._ptr, littleEndian);\n                this._ptr += 2;\n                return a;\n            },\n            readU32: function () {\n                var a = this._data.getUint32(this._ptr, littleEndian);\n                this._ptr += 4;\n                return a;\n            },\n            readI32: function () {\n                var a = this._data.getInt32(this._ptr, littleEndian);\n                this._ptr += 4;\n                return a;\n            },\n            readF32: function () {\n                var a = this._data.getFloat32(this._ptr, littleEndian);\n                this._ptr += 4;\n                return a;\n            },\n            readF64: function () {\n                var a = this._data.getFloat64(this._ptr, littleEndian);\n                this._ptr += 8;\n                return a;\n            },\n            readUTF: function () {\n                var len = this.readU16();\n                return this.readUTFBytes(len);\n            },\n            readUTFBytes: function (len) {\n                var out = [], c = 0;\n                while (out.length < len) {\n                    var c1 = this._data.getUint8(this._ptr++, littleEndian);\n                    if (c1 < 128) {\n                        out[c++] = String.fromCharCode(c1);\n                    } else if (c1 > 191 && c1 < 224) {\n                        var c2 = this._data.getUint8(this._ptr++, littleEndian);\n                        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n                    } else {\n                        var c2 = this._data.getUint8(this._ptr++, littleEndian);\n                        var c3 = this._data.getUint8(this._ptr++, littleEndian);\n                        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                    }\n                }\n                return out.join('');\n            }\n        });\n        return AWDLoader;\n    }();\n    return AWDLoader;\n});\ndefine('skylark-threejs-ex/loaders/BabylonLoader',[\n\t\"skylark-threejs\"\n],function(THREE) {\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.BabylonLoader = function ( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tTHREE.BabylonLoader.prototype = {\n\n\t\tconstructor: THREE.BabylonLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tfunction parseMaterials( json ) {\n\n\t\t\t\tvar materials = {};\n\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json.materials[ i ];\n\n\t\t\t\t\tvar material = new THREE.MeshPhongMaterial();\n\t\t\t\t\tmaterial.name = data.name;\n\t\t\t\t\tmaterial.color.fromArray( data.diffuse );\n\t\t\t\t\tmaterial.emissive.fromArray( data.emissive );\n\t\t\t\t\tmaterial.specular.fromArray( data.specular );\n\t\t\t\t\tmaterial.shininess = data.specularPower;\n\t\t\t\t\tmaterial.opacity = data.alpha;\n\n\t\t\t\t\tmaterials[ data.id ] = material;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.multiMaterials ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.multiMaterials.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar data = json.multiMaterials[ i ];\n\n\t\t\t\t\t\tconsole.warn( 'THREE.BabylonLoader: Multi materials not yet supported.' );\n\n\t\t\t\t\t\tmaterials[ data.id ] = new THREE.MeshPhongMaterial();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn materials;\n\n\t\t\t}\n\n\t\t\tfunction parseGeometry( json ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar indices = json.indices;\n\t\t\t\tvar positions = json.positions;\n\t\t\t\tvar normals = json.normals;\n\t\t\t\tvar uvs = json.uvs;\n\n\t\t\t\t// indices\n\n\t\t\t\tgeometry.setIndex( indices );\n\n\t\t\t\t// positions\n\n\t\t\t\tfor ( var j = 2, jl = positions.length; j < jl; j += 3 ) {\n\n\t\t\t\t\tpositions[ j ] = - positions[ j ];\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( normals ) {\n\n\t\t\t\t\tfor ( var j = 2, jl = normals.length; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tnormals[ j ] = - normals[ j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// uvs\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// offsets\n\n\t\t\t\tvar subMeshes = json.subMeshes;\n\n\t\t\t\tif ( subMeshes ) {\n\n\t\t\t\t\tfor ( var j = 0, jl = subMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar subMesh = subMeshes[ j ];\n\n\t\t\t\t\t\tgeometry.addGroup( subMesh.indexStart, subMesh.indexCount );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction parseObjects( json, materials ) {\n\n\t\t\t\tvar objects = {};\n\t\t\t\tvar scene = new THREE.Scene();\n\n\t\t\t\tvar cameras = json.cameras;\n\n\t\t\t\tfor ( var i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = cameras[ i ];\n\n\t\t\t\t\tvar camera = new THREE.PerspectiveCamera( ( data.fov / Math.PI ) * 180, 1.33, data.minZ, data.maxZ );\n\n\t\t\t\t\tcamera.name = data.name;\n\t\t\t\t\tcamera.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation ) camera.rotation.fromArray( data.rotation );\n\n\t\t\t\t\tobjects[ data.id ] = camera;\n\n\t\t\t\t}\n\n\t\t\t\tvar lights = json.lights;\n\n\t\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = lights[ i ];\n\n\t\t\t\t\tvar light;\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tlight = new THREE.PointLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tlight = new THREE.DirectionalLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tlight = new THREE.SpotLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tlight = new THREE.HemisphereLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlight.name = data.name;\n\t\t\t\t\tif ( data.position ) light.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );\n\t\t\t\t\tlight.color.fromArray( data.diffuse );\n\t\t\t\t\tif ( data.groundColor ) light.groundColor.fromArray( data.groundColor );\n\t\t\t\t\tif ( data.intensity ) light.intensity = data.intensity;\n\n\t\t\t\t\tobjects[ data.id ] = light;\n\n\t\t\t\t\tscene.add( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar meshes = json.meshes;\n\n\t\t\t\tfor ( var i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = meshes[ i ];\n\n\t\t\t\t\tvar object;\n\n\t\t\t\t\tif ( data.indices ) {\n\n\t\t\t\t\t\tvar geometry = parseGeometry( data );\n\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, materials[ data.materialId ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.name = data.name;\n\t\t\t\t\tobject.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );\n\t\t\t\t\tobject.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.rotationQuaternion ) object.quaternion.fromArray( data.rotationQuaternion );\n\t\t\t\t\tobject.scale.fromArray( data.scaling );\n\t\t\t\t\t// object.visible = data.isVisible;\n\n\t\t\t\t\tif ( data.parentId ) {\n\n\t\t\t\t\t\tobjects[ data.parentId ].add( object );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tscene.add( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ data.id ] = object;\n\n\t\t\t\t}\n\n\t\t\t\treturn scene;\n\n\t\t\t}\n\n\t\t\tvar materials = parseMaterials( json );\n\t\t\tvar scene = parseObjects( json, materials );\n\n\t\t\treturn scene;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.BabylonLoader ;\n});\ndefine('skylark-threejs-ex/loaders/TGALoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TGALoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    TGALoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TGALoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var texture = new THREE.Texture();\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setResponseType('arraybuffer');\n            loader.setPath(this.path);\n            loader.load(url, function (buffer) {\n                texture.image = scope.parse(buffer);\n                texture.needsUpdate = true;\n                if (onLoad !== undefined) {\n                    onLoad(texture);\n                }\n            }, onProgress, onError);\n            return texture;\n        },\n        parse: function (buffer) {\n            function tgaCheckHeader(header) {\n                switch (header.image_type) {\n                case TGA_TYPE_INDEXED:\n                case TGA_TYPE_RLE_INDEXED:\n                    if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n                    }\n                    break;\n                case TGA_TYPE_RGB:\n                case TGA_TYPE_GREY:\n                case TGA_TYPE_RLE_RGB:\n                case TGA_TYPE_RLE_GREY:\n                    if (header.colormap_type) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n                    }\n                    break;\n                case TGA_TYPE_NO_DATA:\n                    console.error('THREE.TGALoader: No data.');\n                default:\n                    console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n                }\n                if (header.width <= 0 || header.height <= 0) {\n                    console.error('THREE.TGALoader: Invalid image size.');\n                }\n                if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n                    console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n                }\n            }\n            function tgaParse(use_rle, use_pal, header, offset, data) {\n                var pixel_data, pixel_size, pixel_total, palettes;\n                pixel_size = header.pixel_size >> 3;\n                pixel_total = header.width * header.height * pixel_size;\n                if (use_pal) {\n                    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n                }\n                if (use_rle) {\n                    pixel_data = new Uint8Array(pixel_total);\n                    var c, count, i;\n                    var shift = 0;\n                    var pixels = new Uint8Array(pixel_size);\n                    while (shift < pixel_total) {\n                        c = data[offset++];\n                        count = (c & 127) + 1;\n                        if (c & 128) {\n                            for (i = 0; i < pixel_size; ++i) {\n                                pixels[i] = data[offset++];\n                            }\n                            for (i = 0; i < count; ++i) {\n                                pixel_data.set(pixels, shift + i * pixel_size);\n                            }\n                            shift += pixel_size * count;\n                        } else {\n                            count *= pixel_size;\n                            for (i = 0; i < count; ++i) {\n                                pixel_data[shift + i] = data[offset++];\n                            }\n                            shift += count;\n                        }\n                    }\n                } else {\n                    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n                }\n                return {\n                    pixel_data: pixel_data,\n                    palettes: palettes\n                };\n            }\n            function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n                var colormap = palettes;\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n                        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n                        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        color = image[i + 0] + (image[i + 1] << 8);\n                        imageData[(x + width * y) * 4 + 0] = (color & 31744) >> 7;\n                        imageData[(x + width * y) * 4 + 1] = (color & 992) >> 2;\n                        imageData[(x + width * y) * 4 + 2] = (color & 31) >> 3;\n                        imageData[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 3) {\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 4) {\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 3];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 0] = color;\n                        imageData[(x + width * y) * 4 + 1] = color;\n                        imageData[(x + width * y) * 4 + 2] = color;\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        imageData[(x + width * y) * 4 + 0] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 1];\n                    }\n                }\n                return imageData;\n            }\n            function getTgaRGBA(data, width, height, image, palette) {\n                var x_start, y_start, x_step, y_step, x_end, y_end;\n                switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n                default:\n                case TGA_ORIGIN_UL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                case TGA_ORIGIN_UR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                }\n                if (use_grey) {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 16:\n                        tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                } else {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n                        break;\n                    case 16:\n                        tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 24:\n                        tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 32:\n                        tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                }\n                return data;\n            }\n            var TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;\n            if (buffer.length < 19)\n                console.error('THREE.TGALoader: Not enough data to contain header.');\n            var content = new Uint8Array(buffer), offset = 0, header = {\n                    id_length: content[offset++],\n                    colormap_type: content[offset++],\n                    image_type: content[offset++],\n                    colormap_index: content[offset++] | content[offset++] << 8,\n                    colormap_length: content[offset++] | content[offset++] << 8,\n                    colormap_size: content[offset++],\n                    origin: [\n                        content[offset++] | content[offset++] << 8,\n                        content[offset++] | content[offset++] << 8\n                    ],\n                    width: content[offset++] | content[offset++] << 8,\n                    height: content[offset++] | content[offset++] << 8,\n                    pixel_size: content[offset++],\n                    flags: content[offset++]\n                };\n            tgaCheckHeader(header);\n            if (header.id_length + offset > buffer.length) {\n                console.error('THREE.TGALoader: No data.');\n            }\n            offset += header.id_length;\n            var use_rle = false, use_pal = false, use_grey = false;\n            switch (header.image_type) {\n            case TGA_TYPE_RLE_INDEXED:\n                use_rle = true;\n                use_pal = true;\n                break;\n            case TGA_TYPE_INDEXED:\n                use_pal = true;\n                break;\n            case TGA_TYPE_RLE_RGB:\n                use_rle = true;\n                break;\n            case TGA_TYPE_RGB:\n                break;\n            case TGA_TYPE_RLE_GREY:\n                use_rle = true;\n                use_grey = true;\n                break;\n            case TGA_TYPE_GREY:\n                use_grey = true;\n                break;\n            }\n            var useOffscreen = typeof OffscreenCanvas !== 'undefined';\n            var canvas = useOffscreen ? new OffscreenCanvas(header.width, header.height) : document.createElement('canvas');\n            canvas.width = header.width;\n            canvas.height = header.height;\n            var context = canvas.getContext('2d');\n            var imageData = context.createImageData(header.width, header.height);\n            var result = tgaParse(use_rle, use_pal, header, offset, content);\n            var rgbaData = getTgaRGBA(imageData.data, header.width, header.height, result.pixel_data, result.palettes);\n            context.putImageData(imageData, 0, 0);\n            return useOffscreen ? canvas.transferToImageBitmap() : canvas;\n        }\n    });\n    return  TGALoader;\n});\ndefine('skylark-threejs-ex/loaders/ColladaLoader',[\n    \"skylark-threejs\",\n    '../loaders/TGALoader'\n], function (THREE, TGALoader) {\n    'use strict';\n    var ColladaLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    ColladaLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ColladaLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        options: {\n            set convertUpAxis(value) {\n                console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n            }\n        },\n        parse: function (text, path) {\n            function getElementsByTagName(xml, name) {\n                var array = [];\n                var childNodes = xml.childNodes;\n                for (var i = 0, l = childNodes.length; i < l; i++) {\n                    var child = childNodes[i];\n                    if (child.nodeName === name) {\n                        array.push(child);\n                    }\n                }\n                return array;\n            }\n            function parseStrings(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parts[i];\n                }\n                return array;\n            }\n            function parseFloats(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseFloat(parts[i]);\n                }\n                return array;\n            }\n            function parseInts(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseInt(parts[i]);\n                }\n                return array;\n            }\n            function parseId(text) {\n                return text.substring(1);\n            }\n            function generateId() {\n                return 'three_default_' + count++;\n            }\n            function isEmpty(object) {\n                return Object.keys(object).length === 0;\n            }\n            function parseAsset(xml) {\n                return {\n                    unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n                    upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n                };\n            }\n            function parseAssetUnit(xml) {\n                if (xml !== undefined && xml.hasAttribute('meter') === true) {\n                    return parseFloat(xml.getAttribute('meter'));\n                } else {\n                    return 1;\n                }\n            }\n            function parseAssetUpAxis(xml) {\n                return xml !== undefined ? xml.textContent : 'Y_UP';\n            }\n            function parseLibrary(xml, libraryName, nodeName, parser) {\n                var library = getElementsByTagName(xml, libraryName)[0];\n                if (library !== undefined) {\n                    var elements = getElementsByTagName(library, nodeName);\n                    for (var i = 0; i < elements.length; i++) {\n                        parser(elements[i]);\n                    }\n                }\n            }\n            function buildLibrary(data, builder) {\n                for (var name in data) {\n                    var object = data[name];\n                    object.build = builder(data[name]);\n                }\n            }\n            function getBuild(data, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data);\n                return data.build;\n            }\n            function parseAnimation(xml) {\n                var data = {\n                    sources: {},\n                    samplers: {},\n                    channels: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id;\n                    switch (child.nodeName) {\n                    case 'source':\n                        id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'sampler':\n                        id = child.getAttribute('id');\n                        data.samplers[id] = parseAnimationSampler(child);\n                        break;\n                    case 'channel':\n                        id = child.getAttribute('target');\n                        data.channels[id] = parseAnimationChannel(child);\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.animations[xml.getAttribute('id')] = data;\n            }\n            function parseAnimationSampler(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseAnimationChannel(xml) {\n                var data = {};\n                var target = xml.getAttribute('target');\n                var parts = target.split('/');\n                var id = parts.shift();\n                var sid = parts.shift();\n                var arraySyntax = sid.indexOf('(') !== -1;\n                var memberSyntax = sid.indexOf('.') !== -1;\n                if (memberSyntax) {\n                    parts = sid.split('.');\n                    sid = parts.shift();\n                    data.member = parts.shift();\n                } else if (arraySyntax) {\n                    var indices = sid.split('(');\n                    sid = indices.shift();\n                    for (var i = 0; i < indices.length; i++) {\n                        indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n                    }\n                    data.indices = indices;\n                }\n                data.id = id;\n                data.sid = sid;\n                data.arraySyntax = arraySyntax;\n                data.memberSyntax = memberSyntax;\n                data.sampler = parseId(xml.getAttribute('source'));\n                return data;\n            }\n            function buildAnimation(data) {\n                var tracks = [];\n                var channels = data.channels;\n                var samplers = data.samplers;\n                var sources = data.sources;\n                for (var target in channels) {\n                    if (channels.hasOwnProperty(target)) {\n                        var channel = channels[target];\n                        var sampler = samplers[channel.sampler];\n                        var inputId = sampler.inputs.INPUT;\n                        var outputId = sampler.inputs.OUTPUT;\n                        var inputSource = sources[inputId];\n                        var outputSource = sources[outputId];\n                        var animation = buildAnimationChannel(channel, inputSource, outputSource);\n                        createKeyframeTracks(animation, tracks);\n                    }\n                }\n                return tracks;\n            }\n            function getAnimation(id) {\n                return getBuild(library.animations[id], buildAnimation);\n            }\n            function buildAnimationChannel(channel, inputSource, outputSource) {\n                var node = library.nodes[channel.id];\n                var object3D = getNode(node.id);\n                var transform = node.transforms[channel.sid];\n                var defaultMatrix = node.matrix.clone().transpose();\n                var time, stride;\n                var i, il, j, jl;\n                var data = {};\n                switch (transform) {\n                case 'matrix':\n                    for (i = 0, il = inputSource.array.length; i < il; i++) {\n                        time = inputSource.array[i];\n                        stride = i * outputSource.stride;\n                        if (data[time] === undefined)\n                            data[time] = {};\n                        if (channel.arraySyntax === true) {\n                            var value = outputSource.array[stride];\n                            var index = channel.indices[0] + 4 * channel.indices[1];\n                            data[time][index] = value;\n                        } else {\n                            for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                                data[time][j] = outputSource.array[stride + j];\n                            }\n                        }\n                    }\n                    break;\n                case 'translate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'rotate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'scale':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                }\n                var keyframes = prepareAnimationData(data, defaultMatrix);\n                var animation = {\n                    name: object3D.uuid,\n                    keyframes: keyframes\n                };\n                return animation;\n            }\n            function prepareAnimationData(data, defaultMatrix) {\n                var keyframes = [];\n                for (var time in data) {\n                    keyframes.push({\n                        time: parseFloat(time),\n                        value: data[time]\n                    });\n                }\n                keyframes.sort(ascending);\n                for (var i = 0; i < 16; i++) {\n                    transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n                }\n                return keyframes;\n                function ascending(a, b) {\n                    return a.time - b.time;\n                }\n            }\n            var position = new THREE.Vector3();\n            var scale = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            function createKeyframeTracks(animation, tracks) {\n                var keyframes = animation.keyframes;\n                var name = animation.name;\n                var times = [];\n                var positionData = [];\n                var quaternionData = [];\n                var scaleData = [];\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    var time = keyframe.time;\n                    var value = keyframe.value;\n                    matrix.fromArray(value).transpose();\n                    matrix.decompose(position, quaternion, scale);\n                    times.push(time);\n                    positionData.push(position.x, position.y, position.z);\n                    quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n                    scaleData.push(scale.x, scale.y, scale.z);\n                }\n                if (positionData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));\n                if (quaternionData.length > 0)\n                    tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n                if (scaleData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));\n                return tracks;\n            }\n            function transformAnimationData(keyframes, property, defaultValue) {\n                var keyframe;\n                var empty = true;\n                var i, l;\n                for (i = 0, l = keyframes.length; i < l; i++) {\n                    keyframe = keyframes[i];\n                    if (keyframe.value[property] === undefined) {\n                        keyframe.value[property] = null;\n                    } else {\n                        empty = false;\n                    }\n                }\n                if (empty === true) {\n                    for (i = 0, l = keyframes.length; i < l; i++) {\n                        keyframe = keyframes[i];\n                        keyframe.value[property] = defaultValue;\n                    }\n                } else {\n                    createMissingKeyframes(keyframes, property);\n                }\n            }\n            function createMissingKeyframes(keyframes, property) {\n                var prev, next;\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] === null) {\n                        prev = getPrev(keyframes, i, property);\n                        next = getNext(keyframes, i, property);\n                        if (prev === null) {\n                            keyframe.value[property] = next.value[property];\n                            continue;\n                        }\n                        if (next === null) {\n                            keyframe.value[property] = prev.value[property];\n                            continue;\n                        }\n                        interpolate(keyframe, prev, next, property);\n                    }\n                }\n            }\n            function getPrev(keyframes, i, property) {\n                while (i >= 0) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i--;\n                }\n                return null;\n            }\n            function getNext(keyframes, i, property) {\n                while (i < keyframes.length) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i++;\n                }\n                return null;\n            }\n            function interpolate(key, prev, next, property) {\n                if (next.time - prev.time === 0) {\n                    key.value[property] = prev.value[property];\n                    return;\n                }\n                key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n            }\n            function parseAnimationClip(xml) {\n                var data = {\n                    name: xml.getAttribute('id') || 'default',\n                    start: parseFloat(xml.getAttribute('start') || 0),\n                    end: parseFloat(xml.getAttribute('end') || 0),\n                    animations: []\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_animation':\n                        data.animations.push(parseId(child.getAttribute('url')));\n                        break;\n                    }\n                }\n                library.clips[xml.getAttribute('id')] = data;\n            }\n            function buildAnimationClip(data) {\n                var tracks = [];\n                var name = data.name;\n                var duration = data.end - data.start || -1;\n                var animations = data.animations;\n                for (var i = 0, il = animations.length; i < il; i++) {\n                    var animationTracks = getAnimation(animations[i]);\n                    for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n                        tracks.push(animationTracks[j]);\n                    }\n                }\n                return new THREE.AnimationClip(name, duration, tracks);\n            }\n            function getAnimationClip(id) {\n                return getBuild(library.clips[id], buildAnimationClip);\n            }\n            function parseController(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'skin':\n                        data.id = parseId(child.getAttribute('source'));\n                        data.skin = parseSkin(child);\n                        break;\n                    case 'morph':\n                        data.id = parseId(child.getAttribute('source'));\n                        console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n                        break;\n                    }\n                }\n                library.controllers[xml.getAttribute('id')] = data;\n            }\n            function parseSkin(xml) {\n                var data = { sources: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_shape_matrix':\n                        data.bindShapeMatrix = parseFloats(child.textContent);\n                        break;\n                    case 'source':\n                        var id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'joints':\n                        data.joints = parseJoints(child);\n                        break;\n                    case 'vertex_weights':\n                        data.vertexWeights = parseVertexWeights(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseJoints(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseVertexWeights(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        var offset = parseInt(child.getAttribute('offset'));\n                        data.inputs[semantic] = {\n                            id: id,\n                            offset: offset\n                        };\n                        break;\n                    case 'vcount':\n                        data.vcount = parseInts(child.textContent);\n                        break;\n                    case 'v':\n                        data.v = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildController(data) {\n                var build = { id: data.id };\n                var geometry = library.geometries[build.id];\n                if (data.skin !== undefined) {\n                    build.skin = buildSkin(data.skin);\n                    geometry.sources.skinIndices = build.skin.indices;\n                    geometry.sources.skinWeights = build.skin.weights;\n                }\n                return build;\n            }\n            function buildSkin(data) {\n                var BONE_LIMIT = 4;\n                var build = {\n                    joints: [],\n                    indices: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    },\n                    weights: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    }\n                };\n                var sources = data.sources;\n                var vertexWeights = data.vertexWeights;\n                var vcount = vertexWeights.vcount;\n                var v = vertexWeights.v;\n                var jointOffset = vertexWeights.inputs.JOINT.offset;\n                var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n                var jointSource = data.sources[data.joints.inputs.JOINT];\n                var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n                var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n                var stride = 0;\n                var i, j, l;\n                for (i = 0, l = vcount.length; i < l; i++) {\n                    var jointCount = vcount[i];\n                    var vertexSkinData = [];\n                    for (j = 0; j < jointCount; j++) {\n                        var skinIndex = v[stride + jointOffset];\n                        var weightId = v[stride + weightOffset];\n                        var skinWeight = weights[weightId];\n                        vertexSkinData.push({\n                            index: skinIndex,\n                            weight: skinWeight\n                        });\n                        stride += 2;\n                    }\n                    vertexSkinData.sort(descending);\n                    for (j = 0; j < BONE_LIMIT; j++) {\n                        var d = vertexSkinData[j];\n                        if (d !== undefined) {\n                            build.indices.array.push(d.index);\n                            build.weights.array.push(d.weight);\n                        } else {\n                            build.indices.array.push(0);\n                            build.weights.array.push(0);\n                        }\n                    }\n                }\n                if (data.bindShapeMatrix) {\n                    build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();\n                } else {\n                    build.bindMatrix = new THREE.Matrix4().identity();\n                }\n                for (i = 0, l = jointSource.array.length; i < l; i++) {\n                    var name = jointSource.array[i];\n                    var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n                    build.joints.push({\n                        name: name,\n                        boneInverse: boneInverse\n                    });\n                }\n                return build;\n                function descending(a, b) {\n                    return b.weight - a.weight;\n                }\n            }\n            function getController(id) {\n                return getBuild(library.controllers[id], buildController);\n            }\n            function parseImage(xml) {\n                var data = { init_from: getElementsByTagName(xml, 'init_from')[0].textContent };\n                library.images[xml.getAttribute('id')] = data;\n            }\n            function buildImage(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data.init_from;\n            }\n            function getImage(id) {\n                var data = library.images[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildImage);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n                return null;\n            }\n            function parseEffect(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'profile_COMMON':\n                        data.profile = parseEffectProfileCOMMON(child);\n                        break;\n                    }\n                }\n                library.effects[xml.getAttribute('id')] = data;\n            }\n            function parseEffectProfileCOMMON(xml) {\n                var data = {\n                    surfaces: {},\n                    samplers: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'newparam':\n                        parseEffectNewparam(child, data);\n                        break;\n                    case 'technique':\n                        data.technique = parseEffectTechnique(child);\n                        break;\n                    case 'extra':\n                        data.extra = parseEffectExtra(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectNewparam(xml, data) {\n                var sid = xml.getAttribute('sid');\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'surface':\n                        data.surfaces[sid] = parseEffectSurface(child);\n                        break;\n                    case 'sampler2D':\n                        data.samplers[sid] = parseEffectSampler(child);\n                        break;\n                    }\n                }\n            }\n            function parseEffectSurface(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'init_from':\n                        data.init_from = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectSampler(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.source = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'constant':\n                    case 'lambert':\n                    case 'blinn':\n                    case 'phong':\n                        data.type = child.nodeName;\n                        data.parameters = parseEffectParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'emission':\n                    case 'diffuse':\n                    case 'specular':\n                    case 'bump':\n                    case 'ambient':\n                    case 'shininess':\n                    case 'transparency':\n                        data[child.nodeName] = parseEffectParameter(child);\n                        break;\n                    case 'transparent':\n                        data[child.nodeName] = {\n                            opaque: child.getAttribute('opaque'),\n                            data: parseEffectParameter(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameter(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        data[child.nodeName] = parseFloats(child.textContent);\n                        break;\n                    case 'float':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'texture':\n                        data[child.nodeName] = {\n                            id: child.getAttribute('texture'),\n                            extra: parseEffectParameterTexture(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTexture(xml) {\n                var data = { technique: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'extra':\n                        parseEffectParameterTextureExtra(child, data);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTextureExtra(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        parseEffectParameterTextureExtraTechnique(child, data);\n                        break;\n                    }\n                }\n            }\n            function parseEffectParameterTextureExtraTechnique(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'repeatU':\n                    case 'repeatV':\n                    case 'offsetU':\n                    case 'offsetV':\n                        data.technique[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'wrapU':\n                    case 'wrapV':\n                        if (child.textContent.toUpperCase() === 'TRUE') {\n                            data.technique[child.nodeName] = 1;\n                        } else if (child.textContent.toUpperCase() === 'FALSE') {\n                            data.technique[child.nodeName] = 0;\n                        } else {\n                            data.technique[child.nodeName] = parseInt(child.textContent);\n                        }\n                        break;\n                    }\n                }\n            }\n            function parseEffectExtra(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        data.technique = parseEffectExtraTechnique(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectExtraTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'double_sided':\n                        data[child.nodeName] = parseInt(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildEffect(data) {\n                return data;\n            }\n            function getEffect(id) {\n                return getBuild(library.effects[id], buildEffect);\n            }\n            function parseMaterial(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_effect':\n                        data.url = parseId(child.getAttribute('url'));\n                        break;\n                    }\n                }\n                library.materials[xml.getAttribute('id')] = data;\n            }\n            function getTextureLoader(image) {\n                var loader;\n                var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2);\n                extension = extension.toLowerCase();\n                switch (extension) {\n                case 'tga':\n                    loader = tgaLoader;\n                    break;\n                default:\n                    loader = textureLoader;\n                }\n                return loader;\n            }\n            function buildMaterial(data) {\n                var effect = getEffect(data.url);\n                var technique = effect.profile.technique;\n                var extra = effect.profile.extra;\n                var material;\n                switch (technique.type) {\n                case 'phong':\n                case 'blinn':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    material = new THREE.MeshBasicMaterial();\n                    break;\n                }\n                material.name = data.name || '';\n                function getTexture(textureObject) {\n                    var sampler = effect.profile.samplers[textureObject.id];\n                    var image = null;\n                    if (sampler !== undefined) {\n                        var surface = effect.profile.surfaces[sampler.source];\n                        image = getImage(surface.init_from);\n                    } else {\n                        console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n                        image = getImage(textureObject.id);\n                    }\n                    if (image !== null) {\n                        var loader = getTextureLoader(image);\n                        if (loader !== undefined) {\n                            var texture = loader.load(image);\n                            var extra = textureObject.extra;\n                            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n                                var technique = extra.technique;\n                                texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n                                texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n                            } else {\n                                texture.wrapS = THREE.RepeatWrapping;\n                                texture.wrapT = THREE.RepeatWrapping;\n                            }\n                            return texture;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n                            return null;\n                        }\n                    } else {\n                        console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n                        return null;\n                    }\n                }\n                var parameters = technique.parameters;\n                for (var key in parameters) {\n                    var parameter = parameters[key];\n                    switch (key) {\n                    case 'diffuse':\n                        if (parameter.color)\n                            material.color.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.map = getTexture(parameter.texture);\n                        break;\n                    case 'specular':\n                        if (parameter.color && material.specular)\n                            material.specular.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.specularMap = getTexture(parameter.texture);\n                        break;\n                    case 'bump':\n                        if (parameter.texture)\n                            material.normalMap = getTexture(parameter.texture);\n                        break;\n                    case 'ambient':\n                        if (parameter.texture)\n                            material.lightMap = getTexture(parameter.texture);\n                        break;\n                    case 'shininess':\n                        if (parameter.float && material.shininess)\n                            material.shininess = parameter.float;\n                        break;\n                    case 'emission':\n                        if (parameter.color && material.emissive)\n                            material.emissive.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.emissiveMap = getTexture(parameter.texture);\n                        break;\n                    }\n                }\n                var transparent = parameters['transparent'];\n                var transparency = parameters['transparency'];\n                if (transparency === undefined && transparent) {\n                    transparency = { float: 1 };\n                }\n                if (transparent === undefined && transparency) {\n                    transparent = {\n                        opaque: 'A_ONE',\n                        data: {\n                            color: [\n                                1,\n                                1,\n                                1,\n                                1\n                            ]\n                        }\n                    };\n                }\n                if (transparent && transparency) {\n                    if (transparent.data.texture) {\n                        material.transparent = true;\n                    } else {\n                        var color = transparent.data.color;\n                        switch (transparent.opaque) {\n                        case 'A_ONE':\n                            material.opacity = color[3] * transparency.float;\n                            break;\n                        case 'RGB_ZERO':\n                            material.opacity = 1 - color[0] * transparency.float;\n                            break;\n                        case 'A_ZERO':\n                            material.opacity = 1 - color[3] * transparency.float;\n                            break;\n                        case 'RGB_ONE':\n                            material.opacity = color[0] * transparency.float;\n                            break;\n                        default:\n                            console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n                        }\n                        if (material.opacity < 1)\n                            material.transparent = true;\n                    }\n                }\n                if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n                    material.side = THREE.DoubleSide;\n                }\n                return material;\n            }\n            function getMaterial(id) {\n                return getBuild(library.materials[id], buildMaterial);\n            }\n            function parseCamera(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'optics':\n                        data.optics = parseCameraOptics(child);\n                        break;\n                    }\n                }\n                library.cameras[xml.getAttribute('id')] = data;\n            }\n            function parseCameraOptics(xml) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        return parseCameraTechnique(child);\n                    }\n                }\n                return {};\n            }\n            function parseCameraTechnique(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'perspective':\n                    case 'orthographic':\n                        data.technique = child.nodeName;\n                        data.parameters = parseCameraParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseCameraParameters(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'xfov':\n                    case 'yfov':\n                    case 'xmag':\n                    case 'ymag':\n                    case 'znear':\n                    case 'zfar':\n                    case 'aspect_ratio':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildCamera(data) {\n                var camera;\n                switch (data.optics.technique) {\n                case 'perspective':\n                    camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                case 'orthographic':\n                    var ymag = data.optics.parameters.ymag;\n                    var xmag = data.optics.parameters.xmag;\n                    var aspectRatio = data.optics.parameters.aspect_ratio;\n                    xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n                    ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n                    xmag *= 0.5;\n                    ymag *= 0.5;\n                    camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                default:\n                    camera = new THREE.PerspectiveCamera();\n                    break;\n                }\n                camera.name = data.name || '';\n                return camera;\n            }\n            function getCamera(id) {\n                var data = library.cameras[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildCamera);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n                return null;\n            }\n            function parseLight(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        data = parseLightTechnique(child);\n                        break;\n                    }\n                }\n                library.lights[xml.getAttribute('id')] = data;\n            }\n            function parseLightTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'directional':\n                    case 'point':\n                    case 'spot':\n                    case 'ambient':\n                        data.technique = child.nodeName;\n                        data.parameters = parseLightParameters(child);\n                    }\n                }\n                return data;\n            }\n            function parseLightParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        var array = parseFloats(child.textContent);\n                        data.color = new THREE.Color().fromArray(array);\n                        break;\n                    case 'falloff_angle':\n                        data.falloffAngle = parseFloat(child.textContent);\n                        break;\n                    case 'quadratic_attenuation':\n                        var f = parseFloat(child.textContent);\n                        data.distance = f ? Math.sqrt(1 / f) : 0;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildLight(data) {\n                var light;\n                switch (data.technique) {\n                case 'directional':\n                    light = new THREE.DirectionalLight();\n                    break;\n                case 'point':\n                    light = new THREE.PointLight();\n                    break;\n                case 'spot':\n                    light = new THREE.SpotLight();\n                    break;\n                case 'ambient':\n                    light = new THREE.AmbientLight();\n                    break;\n                }\n                if (data.parameters.color)\n                    light.color.copy(data.parameters.color);\n                if (data.parameters.distance)\n                    light.distance = data.parameters.distance;\n                return light;\n            }\n            function getLight(id) {\n                var data = library.lights[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildLight);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n                return null;\n            }\n            function parseGeometry(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    sources: {},\n                    vertices: {},\n                    primitives: []\n                };\n                var mesh = getElementsByTagName(xml, 'mesh')[0];\n                if (mesh === undefined)\n                    return;\n                for (var i = 0; i < mesh.childNodes.length; i++) {\n                    var child = mesh.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id = child.getAttribute('id');\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'vertices':\n                        data.vertices = parseGeometryVertices(child);\n                        break;\n                    case 'polygons':\n                        console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n                        break;\n                    case 'lines':\n                    case 'linestrips':\n                    case 'polylist':\n                    case 'triangles':\n                        data.primitives.push(parseGeometryPrimitive(child));\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.geometries[xml.getAttribute('id')] = data;\n            }\n            function parseSource(xml) {\n                var data = {\n                    array: [],\n                    stride: 3\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'float_array':\n                        data.array = parseFloats(child.textContent);\n                        break;\n                    case 'Name_array':\n                        data.array = parseStrings(child.textContent);\n                        break;\n                    case 'technique_common':\n                        var accessor = getElementsByTagName(child, 'accessor')[0];\n                        if (accessor !== undefined) {\n                            data.stride = parseInt(accessor.getAttribute('stride'));\n                        }\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseGeometryVertices(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n                }\n                return data;\n            }\n            function parseGeometryPrimitive(xml) {\n                var primitive = {\n                    type: xml.nodeName,\n                    material: xml.getAttribute('material'),\n                    count: parseInt(xml.getAttribute('count')),\n                    inputs: {},\n                    stride: 0,\n                    hasUV: false\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        var offset = parseInt(child.getAttribute('offset'));\n                        var set = parseInt(child.getAttribute('set'));\n                        var inputname = set > 0 ? semantic + set : semantic;\n                        primitive.inputs[inputname] = {\n                            id: id,\n                            offset: offset\n                        };\n                        primitive.stride = Math.max(primitive.stride, offset + 1);\n                        if (semantic === 'TEXCOORD')\n                            primitive.hasUV = true;\n                        break;\n                    case 'vcount':\n                        primitive.vcount = parseInts(child.textContent);\n                        break;\n                    case 'p':\n                        primitive.p = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return primitive;\n            }\n            function groupPrimitives(primitives) {\n                var build = {};\n                for (var i = 0; i < primitives.length; i++) {\n                    var primitive = primitives[i];\n                    if (build[primitive.type] === undefined)\n                        build[primitive.type] = [];\n                    build[primitive.type].push(primitive);\n                }\n                return build;\n            }\n            function checkUVCoordinates(primitives) {\n                var count = 0;\n                for (var i = 0, l = primitives.length; i < l; i++) {\n                    var primitive = primitives[i];\n                    if (primitive.hasUV === true) {\n                        count++;\n                    }\n                }\n                if (count > 0 && count < primitives.length) {\n                    primitives.uvsNeedsFix = true;\n                }\n            }\n            function buildGeometry(data) {\n                var build = {};\n                var sources = data.sources;\n                var vertices = data.vertices;\n                var primitives = data.primitives;\n                if (primitives.length === 0)\n                    return {};\n                var groupedPrimitives = groupPrimitives(primitives);\n                for (var type in groupedPrimitives) {\n                    var primitiveType = groupedPrimitives[type];\n                    checkUVCoordinates(primitiveType);\n                    build[type] = buildGeometryType(primitiveType, sources, vertices);\n                }\n                return build;\n            }\n            function buildGeometryType(primitives, sources, vertices) {\n                var build = {};\n                var position = {\n                    array: [],\n                    stride: 0\n                };\n                var normal = {\n                    array: [],\n                    stride: 0\n                };\n                var uv = {\n                    array: [],\n                    stride: 0\n                };\n                var uv2 = {\n                    array: [],\n                    stride: 0\n                };\n                var color = {\n                    array: [],\n                    stride: 0\n                };\n                var skinIndex = {\n                    array: [],\n                    stride: 4\n                };\n                var skinWeight = {\n                    array: [],\n                    stride: 4\n                };\n                var geometry = new THREE.BufferGeometry();\n                var materialKeys = [];\n                var start = 0;\n                for (var p = 0; p < primitives.length; p++) {\n                    var primitive = primitives[p];\n                    var inputs = primitive.inputs;\n                    var count = 0;\n                    switch (primitive.type) {\n                    case 'lines':\n                    case 'linestrips':\n                        count = primitive.count * 2;\n                        break;\n                    case 'triangles':\n                        count = primitive.count * 3;\n                        break;\n                    case 'polylist':\n                        for (var g = 0; g < primitive.count; g++) {\n                            var vc = primitive.vcount[g];\n                            switch (vc) {\n                            case 3:\n                                count += 3;\n                                break;\n                            case 4:\n                                count += 6;\n                                break;\n                            default:\n                                count += (vc - 2) * 3;\n                                break;\n                            }\n                        }\n                        break;\n                    default:\n                        console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n                    }\n                    geometry.addGroup(start, count, p);\n                    start += count;\n                    if (primitive.material) {\n                        materialKeys.push(primitive.material);\n                    }\n                    for (var name in inputs) {\n                        var input = inputs[name];\n                        switch (name) {\n                        case 'VERTEX':\n                            for (var key in vertices) {\n                                var id = vertices[key];\n                                switch (key) {\n                                case 'POSITION':\n                                    var prevLength = position.array.length;\n                                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                                    position.stride = sources[id].stride;\n                                    if (sources.skinWeights && sources.skinIndices) {\n                                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                                    }\n                                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                                        var count = (position.array.length - prevLength) / position.stride;\n                                        for (var i = 0; i < count; i++) {\n                                            uv.array.push(0, 0);\n                                        }\n                                    }\n                                    break;\n                                case 'NORMAL':\n                                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                                    normal.stride = sources[id].stride;\n                                    break;\n                                case 'COLOR':\n                                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                                    color.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD1':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                default:\n                                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                                }\n                            }\n                            break;\n                        case 'NORMAL':\n                            buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n                            normal.stride = sources[input.id].stride;\n                            break;\n                        case 'COLOR':\n                            buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n                            color.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n                            uv.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD1':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n                            uv2.stride = sources[input.id].stride;\n                            break;\n                        }\n                    }\n                }\n                if (position.array.length > 0)\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));\n                if (normal.array.length > 0)\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));\n                if (color.array.length > 0)\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));\n                if (uv.array.length > 0)\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));\n                if (uv2.array.length > 0)\n                    geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));\n                if (skinIndex.array.length > 0)\n                    geometry.setAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n                if (skinWeight.array.length > 0)\n                    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n                build.data = geometry;\n                build.type = primitives[0].type;\n                build.materialKeys = materialKeys;\n                return build;\n            }\n            function buildGeometryData(primitive, source, offset, array) {\n                var indices = primitive.p;\n                var stride = primitive.stride;\n                var vcount = primitive.vcount;\n                function pushVector(i) {\n                    var index = indices[i + offset] * sourceStride;\n                    var length = index + sourceStride;\n                    for (; index < length; index++) {\n                        array.push(sourceArray[index]);\n                    }\n                }\n                var sourceArray = source.array;\n                var sourceStride = source.stride;\n                if (primitive.vcount !== undefined) {\n                    var index = 0;\n                    for (var i = 0, l = vcount.length; i < l; i++) {\n                        var count = vcount[i];\n                        if (count === 4) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            var d = index + stride * 3;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(d);\n                            pushVector(b);\n                            pushVector(c);\n                            pushVector(d);\n                        } else if (count === 3) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(c);\n                        } else if (count > 4) {\n                            for (var k = 1, kl = count - 2; k <= kl; k++) {\n                                var a = index + stride * 0;\n                                var b = index + stride * k;\n                                var c = index + stride * (k + 1);\n                                pushVector(a);\n                                pushVector(b);\n                                pushVector(c);\n                            }\n                        }\n                        index += stride * count;\n                    }\n                } else {\n                    for (var i = 0, l = indices.length; i < l; i += stride) {\n                        pushVector(i);\n                    }\n                }\n            }\n            function getGeometry(id) {\n                return getBuild(library.geometries[id], buildGeometry);\n            }\n            function parseKinematicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    joints: {},\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parseKinematicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n                library.kinematicsModels[xml.getAttribute('id')] = data;\n            }\n            function buildKinematicsModel(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsModel(id) {\n                return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n            }\n            function parseKinematicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'joint':\n                        data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n                        break;\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsJoint(xml) {\n                var data;\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'prismatic':\n                    case 'revolute':\n                        data = parseKinematicsJointParameter(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsJointParameter(xml, data) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    axis: new THREE.Vector3(),\n                    limits: {\n                        min: 0,\n                        max: 0\n                    },\n                    type: xml.nodeName,\n                    static: false,\n                    zeroPosition: 0,\n                    middlePosition: 0\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var array = parseFloats(child.textContent);\n                        data.axis.fromArray(array);\n                        break;\n                    case 'limits':\n                        var max = child.getElementsByTagName('max')[0];\n                        var min = child.getElementsByTagName('min')[0];\n                        data.limits.max = parseFloat(max.textContent);\n                        data.limits.min = parseFloat(min.textContent);\n                        break;\n                    }\n                }\n                if (data.limits.min >= data.limits.max) {\n                    data.static = true;\n                }\n                data.middlePosition = (data.limits.min + data.limits.max) / 2;\n                return data;\n            }\n            function parseKinematicsLink(xml) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    attachments: [],\n                    transforms: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'attachment_full':\n                        data.attachments.push(parseKinematicsAttachment(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsAttachment(xml) {\n                var data = {\n                    joint: xml.getAttribute('joint').split('/').pop(),\n                    transforms: [],\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsTransform(xml) {\n                var data = { type: xml.nodeName };\n                var array = parseFloats(xml.textContent);\n                switch (data.type) {\n                case 'matrix':\n                    data.obj = new THREE.Matrix4();\n                    data.obj.fromArray(array).transpose();\n                    break;\n                case 'translate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    break;\n                case 'rotate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    data.angle = THREE.MathUtils.degToRad(array[3]);\n                    break;\n                }\n                return data;\n            }\n            function parsePhysicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    rigidBodies: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'rigid_body':\n                        data.rigidBodies[child.getAttribute('name')] = {};\n                        parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n                        break;\n                    }\n                }\n                library.physicsModels[xml.getAttribute('id')] = data;\n            }\n            function parsePhysicsRigidBody(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parsePhysicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n            }\n            function parsePhysicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'inertia':\n                        data.inertia = parseFloats(child.textContent);\n                        break;\n                    case 'mass':\n                        data.mass = parseFloats(child.textContent)[0];\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsScene(xml) {\n                var data = { bindJointAxis: [] };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_joint_axis':\n                        data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n                        break;\n                    }\n                }\n                library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n            }\n            function parseKinematicsBindJointAxis(xml) {\n                var data = { target: xml.getAttribute('target').split('/').pop() };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var param = child.getElementsByTagName('param')[0];\n                        data.axis = param.textContent;\n                        var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n                        data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildKinematicsScene(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsScene(id) {\n                return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n            }\n            function setupKinematics() {\n                var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n                var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n                var visualSceneId = Object.keys(library.visualScenes)[0];\n                if (kinematicsModelId === undefined || kinematicsSceneId === undefined)\n                    return;\n                var kinematicsModel = getKinematicsModel(kinematicsModelId);\n                var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n                var visualScene = getVisualScene(visualSceneId);\n                var bindJointAxis = kinematicsScene.bindJointAxis;\n                var jointMap = {};\n                for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n                    var axis = bindJointAxis[i];\n                    var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n                    if (targetElement) {\n                        var parentVisualElement = targetElement.parentElement;\n                        connect(axis.jointIndex, parentVisualElement);\n                    }\n                }\n                function connect(jointIndex, visualElement) {\n                    var visualElementName = visualElement.getAttribute('name');\n                    var joint = kinematicsModel.joints[jointIndex];\n                    visualScene.traverse(function (object) {\n                        if (object.name === visualElementName) {\n                            jointMap[jointIndex] = {\n                                object: object,\n                                transforms: buildTransformList(visualElement),\n                                joint: joint,\n                                position: joint.zeroPosition\n                            };\n                        }\n                    });\n                }\n                var m0 = new THREE.Matrix4();\n                kinematics = {\n                    joints: kinematicsModel && kinematicsModel.joints,\n                    getJointValue: function (jointIndex) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            return jointData.position;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n                        }\n                    },\n                    setJointValue: function (jointIndex, value) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            var joint = jointData.joint;\n                            if (value > joint.limits.max || value < joint.limits.min) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n                            } else if (joint.static) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n                            } else {\n                                var object = jointData.object;\n                                var axis = joint.axis;\n                                var transforms = jointData.transforms;\n                                matrix.identity();\n                                for (var i = 0; i < transforms.length; i++) {\n                                    var transform = transforms[i];\n                                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                                        switch (joint.type) {\n                                        case 'revolute':\n                                            matrix.multiply(m0.makeRotationAxis(axis, THREE.MathUtils.degToRad(value)));\n                                            break;\n                                        case 'prismatic':\n                                            matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                                            break;\n                                        default:\n                                            console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                                            break;\n                                        }\n                                    } else {\n                                        switch (transform.type) {\n                                        case 'matrix':\n                                            matrix.multiply(transform.obj);\n                                            break;\n                                        case 'translate':\n                                            matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                                            break;\n                                        case 'scale':\n                                            matrix.scale(transform.obj);\n                                            break;\n                                        case 'rotate':\n                                            matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                                            break;\n                                        }\n                                    }\n                                }\n                                object.matrix.copy(matrix);\n                                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                                jointMap[jointIndex].position = value;\n                            }\n                        } else {\n                            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n                        }\n                    }\n                };\n            }\n            function buildTransformList(node) {\n                var transforms = [];\n                var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        var matrix = new THREE.Matrix4().fromArray(array).transpose();\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: matrix\n                        });\n                        break;\n                    case 'translate':\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector\n                        });\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector,\n                            angle: angle\n                        });\n                        break;\n                    }\n                }\n                return transforms;\n            }\n            function prepareNodes(xml) {\n                var elements = xml.getElementsByTagName('node');\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i];\n                    if (element.hasAttribute('id') === false) {\n                        element.setAttribute('id', generateId());\n                    }\n                }\n            }\n            var matrix = new THREE.Matrix4();\n            var vector = new THREE.Vector3();\n            function parseNode(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    type: xml.getAttribute('type'),\n                    id: xml.getAttribute('id'),\n                    sid: xml.getAttribute('sid'),\n                    matrix: new THREE.Matrix4(),\n                    nodes: [],\n                    instanceCameras: [],\n                    instanceControllers: [],\n                    instanceLights: [],\n                    instanceGeometries: [],\n                    instanceNodes: [],\n                    transforms: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'node':\n                        data.nodes.push(child.getAttribute('id'));\n                        parseNode(child);\n                        break;\n                    case 'instance_camera':\n                        data.instanceCameras.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_controller':\n                        data.instanceControllers.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_light':\n                        data.instanceLights.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_geometry':\n                        data.instanceGeometries.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_node':\n                        data.instanceNodes.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.multiply(matrix.fromArray(array).transpose());\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'translate':\n                        var array = parseFloats(child.textContent);\n                        vector.fromArray(array);\n                        data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.scale(vector.fromArray(array));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'extra':\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                if (hasNode(data.id)) {\n                    console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n                } else {\n                    library.nodes[data.id] = data;\n                }\n                return data;\n            }\n            function parseNodeInstance(xml) {\n                var data = {\n                    id: parseId(xml.getAttribute('url')),\n                    materials: {},\n                    skeletons: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'bind_material':\n                        var instances = child.getElementsByTagName('instance_material');\n                        for (var j = 0; j < instances.length; j++) {\n                            var instance = instances[j];\n                            var symbol = instance.getAttribute('symbol');\n                            var target = instance.getAttribute('target');\n                            data.materials[symbol] = parseId(target);\n                        }\n                        break;\n                    case 'skeleton':\n                        data.skeletons.push(parseId(child.textContent));\n                        break;\n                    default:\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildSkeleton(skeletons, joints) {\n                var boneData = [];\n                var sortedBoneData = [];\n                var i, j, data;\n                for (i = 0; i < skeletons.length; i++) {\n                    var skeleton = skeletons[i];\n                    var root;\n                    if (hasNode(skeleton)) {\n                        root = getNode(skeleton);\n                        buildBoneHierarchy(root, joints, boneData);\n                    } else if (hasVisualScene(skeleton)) {\n                        var visualScene = library.visualScenes[skeleton];\n                        var children = visualScene.children;\n                        for (var j = 0; j < children.length; j++) {\n                            var child = children[j];\n                            if (child.type === 'JOINT') {\n                                var root = getNode(child.id);\n                                buildBoneHierarchy(root, joints, boneData);\n                            }\n                        }\n                    } else {\n                        console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n                    }\n                }\n                for (i = 0; i < joints.length; i++) {\n                    for (j = 0; j < boneData.length; j++) {\n                        data = boneData[j];\n                        if (data.bone.name === joints[i].name) {\n                            sortedBoneData[i] = data;\n                            data.processed = true;\n                            break;\n                        }\n                    }\n                }\n                for (i = 0; i < boneData.length; i++) {\n                    data = boneData[i];\n                    if (data.processed === false) {\n                        sortedBoneData.push(data);\n                        data.processed = true;\n                    }\n                }\n                var bones = [];\n                var boneInverses = [];\n                for (i = 0; i < sortedBoneData.length; i++) {\n                    data = sortedBoneData[i];\n                    bones.push(data.bone);\n                    boneInverses.push(data.boneInverse);\n                }\n                return new THREE.Skeleton(bones, boneInverses);\n            }\n            function buildBoneHierarchy(root, joints, boneData) {\n                root.traverse(function (object) {\n                    if (object.isBone === true) {\n                        var boneInverse;\n                        for (var i = 0; i < joints.length; i++) {\n                            var joint = joints[i];\n                            if (joint.name === object.name) {\n                                boneInverse = joint.boneInverse;\n                                break;\n                            }\n                        }\n                        if (boneInverse === undefined) {\n                            boneInverse = new THREE.Matrix4();\n                        }\n                        boneData.push({\n                            bone: object,\n                            boneInverse: boneInverse,\n                            processed: false\n                        });\n                    }\n                });\n            }\n            function buildNode(data) {\n                var objects = [];\n                var matrix = data.matrix;\n                var nodes = data.nodes;\n                var type = data.type;\n                var instanceCameras = data.instanceCameras;\n                var instanceControllers = data.instanceControllers;\n                var instanceLights = data.instanceLights;\n                var instanceGeometries = data.instanceGeometries;\n                var instanceNodes = data.instanceNodes;\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                    objects.push(getNode(nodes[i]));\n                }\n                for (var i = 0, l = instanceCameras.length; i < l; i++) {\n                    var instanceCamera = getCamera(instanceCameras[i]);\n                    if (instanceCamera !== null) {\n                        objects.push(instanceCamera.clone());\n                    }\n                }\n                for (var i = 0, l = instanceControllers.length; i < l; i++) {\n                    var instance = instanceControllers[i];\n                    var controller = getController(instance.id);\n                    var geometries = getGeometry(controller.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    var skeletons = instance.skeletons;\n                    var joints = controller.skin.joints;\n                    var skeleton = buildSkeleton(skeletons, joints);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        var object = newObjects[j];\n                        if (object.isSkinnedMesh) {\n                            object.bind(skeleton, controller.skin.bindMatrix);\n                            object.normalizeSkinWeights();\n                        }\n                        objects.push(object);\n                    }\n                }\n                for (var i = 0, l = instanceLights.length; i < l; i++) {\n                    var instanceLight = getLight(instanceLights[i]);\n                    if (instanceLight !== null) {\n                        objects.push(instanceLight.clone());\n                    }\n                }\n                for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n                    var instance = instanceGeometries[i];\n                    var geometries = getGeometry(instance.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        objects.push(newObjects[j]);\n                    }\n                }\n                for (var i = 0, l = instanceNodes.length; i < l; i++) {\n                    objects.push(getNode(instanceNodes[i]).clone());\n                }\n                var object;\n                if (nodes.length === 0 && objects.length === 1) {\n                    object = objects[0];\n                } else {\n                    object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();\n                    for (var i = 0; i < objects.length; i++) {\n                        object.add(objects[i]);\n                    }\n                }\n                if (object.name === '') {\n                    object.name = type === 'JOINT' ? data.sid : data.name;\n                }\n                object.matrix.copy(matrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                return object;\n            }\n            var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });\n            function resolveMaterialBinding(keys, instanceMaterials) {\n                var materials = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var id = instanceMaterials[keys[i]];\n                    if (id === undefined) {\n                        console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n                        materials.push(fallbackMaterial);\n                    } else {\n                        materials.push(getMaterial(id));\n                    }\n                }\n                return materials;\n            }\n            function buildObjects(geometries, instanceMaterials) {\n                var objects = [];\n                for (var type in geometries) {\n                    var geometry = geometries[type];\n                    var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);\n                    if (materials.length === 0) {\n                        if (type === 'lines' || type === 'linestrips') {\n                            materials.push(new THREE.LineBasicMaterial());\n                        } else {\n                            materials.push(new THREE.MeshPhongMaterial());\n                        }\n                    }\n                    var skinning = geometry.data.attributes.skinIndex !== undefined;\n                    if (skinning) {\n                        for (var i = 0, l = materials.length; i < l; i++) {\n                            materials[i].skinning = true;\n                        }\n                    }\n                    var material = materials.length === 1 ? materials[0] : materials;\n                    var object;\n                    switch (type) {\n                    case 'lines':\n                        object = new THREE.LineSegments(geometry.data, material);\n                        break;\n                    case 'linestrips':\n                        object = new THREE.Line(geometry.data, material);\n                        break;\n                    case 'triangles':\n                    case 'polylist':\n                        if (skinning) {\n                            object = new THREE.SkinnedMesh(geometry.data, material);\n                        } else {\n                            object = new THREE.Mesh(geometry.data, material);\n                        }\n                        break;\n                    }\n                    objects.push(object);\n                }\n                return objects;\n            }\n            function hasNode(id) {\n                return library.nodes[id] !== undefined;\n            }\n            function getNode(id) {\n                return getBuild(library.nodes[id], buildNode);\n            }\n            function parseVisualScene(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    children: []\n                };\n                prepareNodes(xml);\n                var elements = getElementsByTagName(xml, 'node');\n                for (var i = 0; i < elements.length; i++) {\n                    data.children.push(parseNode(elements[i]));\n                }\n                library.visualScenes[xml.getAttribute('id')] = data;\n            }\n            function buildVisualScene(data) {\n                var group = new THREE.Group();\n                group.name = data.name;\n                var children = data.children;\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n                    group.add(getNode(child.id));\n                }\n                return group;\n            }\n            function hasVisualScene(id) {\n                return library.visualScenes[id] !== undefined;\n            }\n            function getVisualScene(id) {\n                return getBuild(library.visualScenes[id], buildVisualScene);\n            }\n            function parseScene(xml) {\n                var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n                return getVisualScene(parseId(instance.getAttribute('url')));\n            }\n            function setupAnimations() {\n                var clips = library.clips;\n                if (isEmpty(clips) === true) {\n                    if (isEmpty(library.animations) === false) {\n                        var tracks = [];\n                        for (var id in library.animations) {\n                            var animationTracks = getAnimation(id);\n                            for (var i = 0, l = animationTracks.length; i < l; i++) {\n                                tracks.push(animationTracks[i]);\n                            }\n                        }\n                        animations.push(new THREE.AnimationClip('default', -1, tracks));\n                    }\n                } else {\n                    for (var id in clips) {\n                        animations.push(getAnimationClip(id));\n                    }\n                }\n            }\n            function parserErrorToText(parserError) {\n                var result = '';\n                var stack = [parserError];\n                while (stack.length) {\n                    var node = stack.shift();\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        result += node.textContent;\n                    } else {\n                        result += '\\n';\n                        stack.push.apply(stack, node.childNodes);\n                    }\n                }\n                return result.trim();\n            }\n            if (text.length === 0) {\n                return { scene: new THREE.Scene() };\n            }\n            var xml = new DOMParser().parseFromString(text, 'application/xml');\n            var collada = getElementsByTagName(xml, 'COLLADA')[0];\n            var parserError = xml.getElementsByTagName('parsererror')[0];\n            if (parserError !== undefined) {\n                var errorElement = getElementsByTagName(parserError, 'div')[0];\n                var errorText;\n                if (errorElement) {\n                    errorText = errorElement.textContent;\n                } else {\n                    errorText = parserErrorToText(parserError);\n                }\n                console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n                return null;\n            }\n            var version = collada.getAttribute('version');\n            console.log('THREE.ColladaLoader: File version', version);\n            var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var tgaLoader;\n            if (TGALoader) {\n                tgaLoader = new TGALoader(this.manager);\n                tgaLoader.setPath(this.resourcePath || path);\n            }\n            var animations = [];\n            var kinematics = {};\n            var count = 0;\n            var library = {\n                animations: {},\n                clips: {},\n                controllers: {},\n                images: {},\n                effects: {},\n                materials: {},\n                cameras: {},\n                lights: {},\n                geometries: {},\n                nodes: {},\n                visualScenes: {},\n                kinematicsModels: {},\n                physicsModels: {},\n                kinematicsScenes: {}\n            };\n            parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n            parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n            parseLibrary(collada, 'library_controllers', 'controller', parseController);\n            parseLibrary(collada, 'library_images', 'image', parseImage);\n            parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n            parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n            parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n            parseLibrary(collada, 'library_lights', 'light', parseLight);\n            parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n            parseLibrary(collada, 'library_nodes', 'node', parseNode);\n            parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n            parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n            parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n            parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n            buildLibrary(library.animations, buildAnimation);\n            buildLibrary(library.clips, buildAnimationClip);\n            buildLibrary(library.controllers, buildController);\n            buildLibrary(library.images, buildImage);\n            buildLibrary(library.effects, buildEffect);\n            buildLibrary(library.materials, buildMaterial);\n            buildLibrary(library.cameras, buildCamera);\n            buildLibrary(library.lights, buildLight);\n            buildLibrary(library.geometries, buildGeometry);\n            buildLibrary(library.visualScenes, buildVisualScene);\n            setupAnimations();\n            setupKinematics();\n            var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n            if (asset.upAxis === 'Z_UP') {\n                scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            }\n            scene.scale.multiplyScalar(asset.unit);\n            return {\n                animations: animations,\n                kinematics: kinematics,\n                library: library,\n                scene: scene\n            };\n        }\n    });\n    return ColladaLoader;\n});\ndefine('skylark-threejs-ex/loaders/DRACOLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DRACOLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.decoderPath = '';\n        this.decoderConfig = {};\n        this.decoderBinary = null;\n        this.decoderPending = null;\n        this.workerLimit = 4;\n        this.workerPool = [];\n        this.workerNextTaskID = 1;\n        this.workerSourceURL = '';\n        this.defaultAttributeIDs = {\n            position: 'POSITION',\n            normal: 'NORMAL',\n            color: 'COLOR',\n            uv: 'TEX_COORD'\n        };\n        this.defaultAttributeTypes = {\n            position: 'Float32Array',\n            normal: 'Float32Array',\n            color: 'Float32Array',\n            uv: 'Float32Array'\n        };\n    };\n    DRACOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: DRACOLoader,\n        setDecoderPath: function (path) {\n            this.decoderPath = path;\n            return this;\n        },\n        setDecoderConfig: function (config) {\n            this.decoderConfig = config;\n            return this;\n        },\n        setWorkerLimit: function (workerLimit) {\n            this.workerLimit = workerLimit;\n            return this;\n        },\n        setVerbosity: function () {\n            console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n        },\n        setDrawMode: function () {\n            console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n        },\n        setSkipDequantization: function () {\n            console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n        },\n        load: function (url, onLoad, onProgress, onError) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            if (this.crossOrigin === 'use-credentials') {\n                loader.setWithCredentials(true);\n            }\n            loader.load(url, buffer => {\n                var taskConfig = {\n                    attributeIDs: this.defaultAttributeIDs,\n                    attributeTypes: this.defaultAttributeTypes,\n                    useUniqueIDs: false\n                };\n                this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n            }, onProgress, onError);\n        },\n        decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {\n            var taskConfig = {\n                attributeIDs: attributeIDs || this.defaultAttributeIDs,\n                attributeTypes: attributeTypes || this.defaultAttributeTypes,\n                useUniqueIDs: !!attributeIDs\n            };\n            this.decodeGeometry(buffer, taskConfig).then(callback);\n        },\n        decodeGeometry: function (buffer, taskConfig) {\n            for (var attribute in taskConfig.attributeTypes) {\n                var type = taskConfig.attributeTypes[attribute];\n                if (type.BYTES_PER_ELEMENT !== undefined) {\n                    taskConfig.attributeTypes[attribute] = type.name;\n                }\n            }\n            var taskKey = JSON.stringify(taskConfig);\n            if (DRACOLoader.taskCache.has(buffer)) {\n                var cachedTask = DRACOLoader.taskCache.get(buffer);\n                if (cachedTask.key === taskKey) {\n                    return cachedTask.promise;\n                } else if (buffer.byteLength === 0) {\n                    throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n                }\n            }\n            var worker;\n            var taskID = this.workerNextTaskID++;\n            var taskCost = buffer.byteLength;\n            var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n                worker = _worker;\n                return new Promise((resolve, reject) => {\n                    worker._callbacks[taskID] = {\n                        resolve,\n                        reject\n                    };\n                    worker.postMessage({\n                        type: 'decode',\n                        id: taskID,\n                        taskConfig,\n                        buffer\n                    }, [buffer]);\n                });\n            }).then(message => this._createGeometry(message.geometry));\n            geometryPending.finally(() => {\n                if (worker && taskID) {\n                    this._releaseTask(worker, taskID);\n                }\n            });\n            DRACOLoader.taskCache.set(buffer, {\n                key: taskKey,\n                promise: geometryPending\n            });\n            return geometryPending;\n        },\n        _createGeometry: function (geometryData) {\n            var geometry = new THREE.BufferGeometry();\n            if (geometryData.index) {\n                geometry.setIndex(new THREE.BufferAttribute(geometryData.index.array, 1));\n            }\n            for (var i = 0; i < geometryData.attributes.length; i++) {\n                var attribute = geometryData.attributes[i];\n                var name = attribute.name;\n                var array = attribute.array;\n                var itemSize = attribute.itemSize;\n                geometry.setAttribute(name, new THREE.BufferAttribute(array, itemSize));\n            }\n            return geometry;\n        },\n        _loadLibrary: function (url, responseType) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.decoderPath);\n            loader.setResponseType(responseType);\n            return new Promise((resolve, reject) => {\n                loader.load(url, resolve, undefined, reject);\n            });\n        },\n        preload: function () {\n            this._initDecoder();\n            return this;\n        },\n        _initDecoder: function () {\n            if (this.decoderPending)\n                return this.decoderPending;\n            var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n            var librariesPending = [];\n            if (useJS) {\n                librariesPending.push(this._loadLibrary('draco_decoder', 'text'));\n            } else {\n                librariesPending.push(this._loadLibrary('draco_wasm_wrapper', 'text'));\n                librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n            }\n            this.decoderPending = Promise.all(librariesPending).then(libraries => {\n                var jsContent = libraries[0];\n                if (!useJS) {\n                    this.decoderConfig.wasmBinary = libraries[1];\n                }\n                var fn = DRACOLoader.DRACOWorker.toString();\n                var body = [\n                    '/* draco decoder */',\n                    jsContent,\n                    '',\n                    '/* worker */',\n                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n                ].join('\\n');\n                this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n            });\n            return this.decoderPending;\n        },\n        _getWorker: function (taskID, taskCost) {\n            return this._initDecoder().then(() => {\n                if (this.workerPool.length < this.workerLimit) {\n                    var worker = new Worker(this.workerSourceURL);\n                    worker._callbacks = {};\n                    worker._taskCosts = {};\n                    worker._taskLoad = 0;\n                    worker.postMessage({\n                        type: 'init',\n                        decoderConfig: this.decoderConfig\n                    });\n                    worker.onmessage = function (e) {\n                        var message = e.data;\n                        switch (message.type) {\n                        case 'decode':\n                            worker._callbacks[message.id].resolve(message);\n                            break;\n                        case 'error':\n                            worker._callbacks[message.id].reject(message);\n                            break;\n                        default:\n                            console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n                        }\n                    };\n                    this.workerPool.push(worker);\n                } else {\n                    this.workerPool.sort(function (a, b) {\n                        return a._taskLoad > b._taskLoad ? -1 : 1;\n                    });\n                }\n                var worker = this.workerPool[this.workerPool.length - 1];\n                worker._taskCosts[taskID] = taskCost;\n                worker._taskLoad += taskCost;\n                return worker;\n            });\n        },\n        _releaseTask: function (worker, taskID) {\n            worker._taskLoad -= worker._taskCosts[taskID];\n            delete worker._callbacks[taskID];\n            delete worker._taskCosts[taskID];\n        },\n        debug: function () {\n            console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n        },\n        dispose: function () {\n            for (var i = 0; i < this.workerPool.length; ++i) {\n                this.workerPool[i].terminate();\n            }\n            this.workerPool.length = 0;\n            return this;\n        }\n    });\n    DRACOLoader.DRACOWorker = function () {\n        var decoderConfig;\n        var decoderPending;\n        onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n            case 'init':\n                decoderConfig = message.decoderConfig;\n                decoderPending = new Promise(function (resolve) {\n                    decoderConfig.onModuleLoaded = function (draco) {\n                        resolve({ draco: draco });\n                    };\n                    DracoDecoderModule(decoderConfig);\n                });\n                break;\n            case 'decode':\n                var buffer = message.buffer;\n                var taskConfig = message.taskConfig;\n                decoderPending.then(module => {\n                    var draco = module.draco;\n                    var decoder = new draco.Decoder();\n                    var decoderBuffer = new draco.DecoderBuffer();\n                    decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n                    try {\n                        var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n                        var buffers = geometry.attributes.map(attr => attr.array.buffer);\n                        if (geometry.index)\n                            buffers.push(geometry.index.array.buffer);\n                        self.postMessage({\n                            type: 'decode',\n                            id: message.id,\n                            geometry\n                        }, buffers);\n                    } catch (error) {\n                        console.error(error);\n                        self.postMessage({\n                            type: 'error',\n                            id: message.id,\n                            error: error.message\n                        });\n                    } finally {\n                        draco.destroy(decoderBuffer);\n                        draco.destroy(decoder);\n                    }\n                });\n                break;\n            }\n        };\n        function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n            var attributeIDs = taskConfig.attributeIDs;\n            var attributeTypes = taskConfig.attributeTypes;\n            var dracoGeometry;\n            var decodingStatus;\n            var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n            if (geometryType === draco.TRIANGULAR_MESH) {\n                dracoGeometry = new draco.Mesh();\n                decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n            } else if (geometryType === draco.POINT_CLOUD) {\n                dracoGeometry = new draco.PointCloud();\n                decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n            } else {\n                throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n            }\n            if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n                throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n            }\n            var geometry = {\n                index: null,\n                attributes: []\n            };\n            for (var attributeName in attributeIDs) {\n                var attributeType = self[attributeTypes[attributeName]];\n                var attribute;\n                var attributeID;\n                if (taskConfig.useUniqueIDs) {\n                    attributeID = attributeIDs[attributeName];\n                    attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n                } else {\n                    attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n                    if (attributeID === -1)\n                        continue;\n                    attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n                }\n                geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n            }\n            if (geometryType === draco.TRIANGULAR_MESH) {\n                var numFaces = dracoGeometry.num_faces();\n                var numIndices = numFaces * 3;\n                var index = new Uint32Array(numIndices);\n                var indexArray = new draco.DracoInt32Array();\n                for (var i = 0; i < numFaces; ++i) {\n                    decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);\n                    for (var j = 0; j < 3; ++j) {\n                        index[i * 3 + j] = indexArray.GetValue(j);\n                    }\n                }\n                geometry.index = {\n                    array: index,\n                    itemSize: 1\n                };\n                draco.destroy(indexArray);\n            }\n            draco.destroy(dracoGeometry);\n            return geometry;\n        }\n        function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n            var numComponents = attribute.num_components();\n            var numPoints = dracoGeometry.num_points();\n            var numValues = numPoints * numComponents;\n            var dracoArray;\n            var array;\n            switch (attributeType) {\n            case Float32Array:\n                dracoArray = new draco.DracoFloat32Array();\n                decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Float32Array(numValues);\n                break;\n            case Int8Array:\n                dracoArray = new draco.DracoInt8Array();\n                decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int8Array(numValues);\n                break;\n            case Int16Array:\n                dracoArray = new draco.DracoInt16Array();\n                decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int16Array(numValues);\n                break;\n            case Int32Array:\n                dracoArray = new draco.DracoInt32Array();\n                decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Int32Array(numValues);\n                break;\n            case Uint8Array:\n                dracoArray = new draco.DracoUInt8Array();\n                decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint8Array(numValues);\n                break;\n            case Uint16Array:\n                dracoArray = new draco.DracoUInt16Array();\n                decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint16Array(numValues);\n                break;\n            case Uint32Array:\n                dracoArray = new draco.DracoUInt32Array();\n                decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\n                array = new Uint32Array(numValues);\n                break;\n            default:\n                throw new Error('THREE.DRACOLoader: Unexpected attribute type.');\n            }\n            for (var i = 0; i < numValues; i++) {\n                array[i] = dracoArray.GetValue(i);\n            }\n            draco.destroy(dracoArray);\n            return {\n                name: attributeName,\n                array: array,\n                itemSize: numComponents\n            };\n        }\n    };\n    DRACOLoader.taskCache = new WeakMap();\n    DRACOLoader.setDecoderPath = function () {\n        console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.setDecoderConfig = function () {\n        console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.releaseDecoderModule = function () {\n        console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n    };\n    DRACOLoader.getDecoderModule = function () {\n        console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n    };\n    return DRACOLoader;\n});\ndefine('skylark-threejs-ex/loaders/FBXLoader',[\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate',\n    '../curves/NURBSCurve'\n], function (\n    THREE, \n    Inflate, \n    NURBSCurve\n) {\n    'use strict';\n    var FBXLoader = function () {\n        var fbxTree;\n        var connections;\n        var sceneGraph;\n        function FBXLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: FBXLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var self = this;\n                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(self.path);\n                loader.setResponseType('arraybuffer');\n                loader.load(url, function (buffer) {\n                    try {\n                        onLoad(self.parse(buffer, path));\n                    } catch (error) {\n                        setTimeout(function () {\n                            if (onError)\n                                onError(error);\n                            self.manager.itemError(url);\n                        }, 0);\n                    }\n                }, onProgress, onError);\n            },\n            parse: function (FBXBuffer, path) {\n                if (isFbxFormatBinary(FBXBuffer)) {\n                    fbxTree = new BinaryParser().parse(FBXBuffer);\n                } else {\n                    var FBXText = convertArrayBufferToString(FBXBuffer);\n                    if (!isFbxFormatASCII(FBXText)) {\n                        throw new Error('THREE.FBXLoader: Unknown format.');\n                    }\n                    if (getFbxVersion(FBXText) < 7000) {\n                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n                    }\n                    fbxTree = new TextParser().parse(FBXText);\n                }\n                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n            }\n        });\n        function FBXTreeParser(textureLoader, manager) {\n            this.textureLoader = textureLoader;\n            this.manager = manager;\n        }\n        FBXTreeParser.prototype = {\n            constructor: FBXTreeParser,\n            parse: function () {\n                connections = this.parseConnections();\n                var images = this.parseImages();\n                var textures = this.parseTextures(images);\n                var materials = this.parseMaterials(textures);\n                var deformers = this.parseDeformers();\n                var geometryMap = new GeometryParser().parse(deformers);\n                this.parseScene(deformers, geometryMap, materials);\n                return sceneGraph;\n            },\n            parseConnections: function () {\n                var connectionMap = new Map();\n                if ('Connections' in fbxTree) {\n                    var rawConnections = fbxTree.Connections.connections;\n                    rawConnections.forEach(function (rawConnection) {\n                        var fromID = rawConnection[0];\n                        var toID = rawConnection[1];\n                        var relationship = rawConnection[2];\n                        if (!connectionMap.has(fromID)) {\n                            connectionMap.set(fromID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var parentRelationship = {\n                            ID: toID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(fromID).parents.push(parentRelationship);\n                        if (!connectionMap.has(toID)) {\n                            connectionMap.set(toID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var childRelationship = {\n                            ID: fromID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(toID).children.push(childRelationship);\n                    });\n                }\n                return connectionMap;\n            },\n            parseImages: function () {\n                var images = {};\n                var blobs = {};\n                if ('Video' in fbxTree.Objects) {\n                    var videoNodes = fbxTree.Objects.Video;\n                    for (var nodeID in videoNodes) {\n                        var videoNode = videoNodes[nodeID];\n                        var id = parseInt(nodeID);\n                        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n                        if ('Content' in videoNode) {\n                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n                            if (arrayBufferContent || base64Content) {\n                                var image = this.parseImage(videoNodes[nodeID]);\n                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n                            }\n                        }\n                    }\n                }\n                for (var id in images) {\n                    var filename = images[id];\n                    if (blobs[filename] !== undefined)\n                        images[id] = blobs[filename];\n                    else\n                        images[id] = images[id].split('\\\\').pop();\n                }\n                return images;\n            },\n            parseImage: function (videoNode) {\n                var content = videoNode.Content;\n                var fileName = videoNode.RelativeFilename || videoNode.Filename;\n                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n                var type;\n                switch (extension) {\n                case 'bmp':\n                    type = 'image/bmp';\n                    break;\n                case 'jpg':\n                case 'jpeg':\n                    type = 'image/jpeg';\n                    break;\n                case 'png':\n                    type = 'image/png';\n                    break;\n                case 'tif':\n                    type = 'image/tiff';\n                    break;\n                case 'tga':\n                    if (this.manager.getHandler('.tga') === null) {\n                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n                    }\n                    type = 'image/tga';\n                    break;\n                default:\n                    console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n                    return;\n                }\n                if (typeof content === 'string') {\n                    return 'data:' + type + ';base64,' + content;\n                } else {\n                    var array = new Uint8Array(content);\n                    return window.URL.createObjectURL(new Blob([array], { type: type }));\n                }\n            },\n            parseTextures: function (images) {\n                var textureMap = new Map();\n                if ('Texture' in fbxTree.Objects) {\n                    var textureNodes = fbxTree.Objects.undefined;\n                    for (var nodeID in textureNodes) {\n                        var texture = this.parseTexture(textureNodes[nodeID], images);\n                        textureMap.set(parseInt(nodeID), texture);\n                    }\n                }\n                return textureMap;\n            },\n            parseTexture: function (textureNode, images) {\n                var texture = this.loadTexture(textureNode, images);\n                texture.ID = textureNode.id;\n                texture.name = textureNode.attrName;\n                var wrapModeU = textureNode.WrapModeU;\n                var wrapModeV = textureNode.WrapModeV;\n                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                if ('Scaling' in textureNode) {\n                    var values = textureNode.Scaling.value;\n                    texture.repeat.x = values[0];\n                    texture.repeat.y = values[1];\n                }\n                return texture;\n            },\n            loadTexture: function (textureNode, images) {\n                var fileName;\n                var currentPath = this.textureLoader.path;\n                var children = connections.get(textureNode.id).children;\n                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n                    fileName = images[children[0].ID];\n                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n                        this.textureLoader.setPath(undefined);\n                    }\n                }\n                var texture;\n                var extension = textureNode.FileName.slice(-3).toLowerCase();\n                if (extension === 'tga') {\n                    var loader = this.manager.getHandler('.tga');\n                    if (loader === null) {\n                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n                        texture = new THREE.Texture();\n                    } else {\n                        texture = loader.load(fileName);\n                    }\n                } else if (extension === 'psd') {\n                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n                    texture = new THREE.Texture();\n                } else {\n                    texture = this.textureLoader.load(fileName);\n                }\n                this.textureLoader.setPath(currentPath);\n                return texture;\n            },\n            parseMaterials: function (textureMap) {\n                var materialMap = new Map();\n                if ('Material' in fbxTree.Objects) {\n                    var materialNodes = fbxTree.Objects.Material;\n                    for (var nodeID in materialNodes) {\n                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n                        if (material !== null)\n                            materialMap.set(parseInt(nodeID), material);\n                    }\n                }\n                return materialMap;\n            },\n            parseMaterial: function (materialNode, textureMap) {\n                var ID = materialNode.id;\n                var name = materialNode.attrName;\n                var type = materialNode.ShadingModel;\n                if (typeof type === 'object') {\n                    type = type.value;\n                }\n                if (!connections.has(ID))\n                    return null;\n                var parameters = this.parseParameters(materialNode, textureMap, ID);\n                var material;\n                switch (type.toLowerCase()) {\n                case 'phong':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                }\n                material.setValues(parameters);\n                material.name = name;\n                return material;\n            },\n            parseParameters: function (materialNode, textureMap, ID) {\n                var parameters = {};\n                if (materialNode.BumpFactor) {\n                    parameters.bumpScale = materialNode.BumpFactor.value;\n                }\n                if (materialNode.Diffuse) {\n                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n                }\n                if (materialNode.DisplacementFactor) {\n                    parameters.displacementScale = materialNode.DisplacementFactor.value;\n                }\n                if (materialNode.Emissive) {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n                }\n                if (materialNode.EmissiveFactor) {\n                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n                }\n                if (materialNode.Opacity) {\n                    parameters.opacity = parseFloat(materialNode.Opacity.value);\n                }\n                if (parameters.opacity < 1) {\n                    parameters.transparent = true;\n                }\n                if (materialNode.ReflectionFactor) {\n                    parameters.reflectivity = materialNode.ReflectionFactor.value;\n                }\n                if (materialNode.Shininess) {\n                    parameters.shininess = materialNode.Shininess.value;\n                }\n                if (materialNode.Specular) {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n                }\n                var self = this;\n                connections.get(ID).children.forEach(function (child) {\n                    var type = child.relationship;\n                    switch (type) {\n                    case 'Bump':\n                        parameters.bumpMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'Maya|TEX_ao_map':\n                        parameters.aoMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'DiffuseColor':\n                    case 'Maya|TEX_color_map':\n                        parameters.map = self.getTexture(textureMap, child.ID);\n                        parameters.map.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'DisplacementColor':\n                        parameters.displacementMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'EmissiveColor':\n                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'NormalMap':\n                    case 'Maya|TEX_normal_map':\n                        parameters.normalMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'ReflectionColor':\n                        parameters.envMap = self.getTexture(textureMap, child.ID);\n                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n                        parameters.envMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'SpecularColor':\n                        parameters.specularMap = self.getTexture(textureMap, child.ID);\n                        parameters.specularMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'TransparentColor':\n                        parameters.alphaMap = self.getTexture(textureMap, child.ID);\n                        parameters.transparent = true;\n                        break;\n                    case 'AmbientColor':\n                    case 'ShininessExponent':\n                    case 'SpecularFactor':\n                    case 'VectorDisplacementColor':\n                    default:\n                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n                        break;\n                    }\n                });\n                return parameters;\n            },\n            getTexture: function (textureMap, id) {\n                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n                    id = connections.get(id).children[0].ID;\n                }\n                return textureMap.get(id);\n            },\n            parseDeformers: function () {\n                var skeletons = {};\n                var morphTargets = {};\n                if ('Deformer' in fbxTree.Objects) {\n                    var DeformerNodes = fbxTree.Objects.Deformer;\n                    for (var nodeID in DeformerNodes) {\n                        var deformerNode = DeformerNodes[nodeID];\n                        var relationships = connections.get(parseInt(nodeID));\n                        if (deformerNode.attrType === 'Skin') {\n                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n                            skeleton.ID = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n                            skeleton.geometryID = relationships.parents[0].ID;\n                            skeletons[nodeID] = skeleton;\n                        } else if (deformerNode.attrType === 'BlendShape') {\n                            var morphTarget = { id: nodeID };\n                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n                            morphTarget.id = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n                            morphTargets[nodeID] = morphTarget;\n                        }\n                    }\n                }\n                return {\n                    skeletons: skeletons,\n                    morphTargets: morphTargets\n                };\n            },\n            parseSkeleton: function (relationships, deformerNodes) {\n                var rawBones = [];\n                relationships.children.forEach(function (child) {\n                    var boneNode = deformerNodes[child.ID];\n                    if (boneNode.attrType !== 'Cluster')\n                        return;\n                    var rawBone = {\n                        ID: child.ID,\n                        indices: [],\n                        weights: [],\n                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)\n                    };\n                    if ('Indexes' in boneNode) {\n                        rawBone.indices = boneNode.Indexes.a;\n                        rawBone.weights = boneNode.Weights.a;\n                    }\n                    rawBones.push(rawBone);\n                });\n                return {\n                    rawBones: rawBones,\n                    bones: []\n                };\n            },\n            parseMorphTargets: function (relationships, deformerNodes) {\n                var rawMorphTargets = [];\n                for (var i = 0; i < relationships.children.length; i++) {\n                    var child = relationships.children[i];\n                    var morphTargetNode = deformerNodes[child.ID];\n                    var rawMorphTarget = {\n                        name: morphTargetNode.attrName,\n                        initialWeight: morphTargetNode.DeformPercent,\n                        id: morphTargetNode.id,\n                        fullWeights: morphTargetNode.FullWeights.a\n                    };\n                    if (morphTargetNode.attrType !== 'BlendShapeChannel')\n                        return;\n                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n                        return child.relationship === undefined;\n                    })[0].ID;\n                    rawMorphTargets.push(rawMorphTarget);\n                }\n                return rawMorphTargets;\n            },\n            parseScene: function (deformers, geometryMap, materialMap) {\n                sceneGraph = new THREE.Group();\n                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n                var modelNodes = fbxTree.Objects.Model;\n                var self = this;\n                modelMap.forEach(function (model) {\n                    var modelNode = modelNodes[model.ID];\n                    self.setLookAtProperties(model, modelNode);\n                    var parentConnections = connections.get(model.ID).parents;\n                    parentConnections.forEach(function (connection) {\n                        var parent = modelMap.get(connection.ID);\n                        if (parent !== undefined)\n                            parent.add(model);\n                    });\n                    if (model.parent === null) {\n                        sceneGraph.add(model);\n                    }\n                });\n                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n                this.createAmbientLight();\n                this.setupMorphMaterials();\n                sceneGraph.traverse(function (node) {\n                    if (node.userData.transformData) {\n                        if (node.parent)\n                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n                        var transform = generateTransform(node.userData.transformData);\n                        node.applyMatrix4(transform);\n                    }\n                });\n                var animations = new AnimationParser().parse();\n                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n                    sceneGraph.children[0].animations = animations;\n                    sceneGraph = sceneGraph.children[0];\n                }\n                sceneGraph.animations = animations;\n            },\n            parseModels: function (skeletons, geometryMap, materialMap) {\n                var modelMap = new Map();\n                var modelNodes = fbxTree.Objects.Model;\n                for (var nodeID in modelNodes) {\n                    var id = parseInt(nodeID);\n                    var node = modelNodes[nodeID];\n                    var relationships = connections.get(id);\n                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n                    if (!model) {\n                        switch (node.attrType) {\n                        case 'Camera':\n                            model = this.createCamera(relationships);\n                            break;\n                        case 'Light':\n                            model = this.createLight(relationships);\n                            break;\n                        case 'Mesh':\n                            model = this.createMesh(relationships, geometryMap, materialMap);\n                            break;\n                        case 'NurbsCurve':\n                            model = this.createCurve(relationships, geometryMap);\n                            break;\n                        case 'LimbNode':\n                        case 'Root':\n                            model = new THREE.Bone();\n                            break;\n                        case 'Null':\n                        default:\n                            model = new THREE.Group();\n                            break;\n                        }\n                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\n                        model.ID = id;\n                    }\n                    this.getTransformData(model, node);\n                    modelMap.set(id, model);\n                }\n                return modelMap;\n            },\n            buildSkeleton: function (relationships, skeletons, id, name) {\n                var bone = null;\n                relationships.parents.forEach(function (parent) {\n                    for (var ID in skeletons) {\n                        var skeleton = skeletons[ID];\n                        skeleton.rawBones.forEach(function (rawBone, i) {\n                            if (rawBone.ID === parent.ID) {\n                                var subBone = bone;\n                                bone = new THREE.Bone();\n                                bone.matrixWorld.copy(rawBone.transformLink);\n                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\n                                bone.ID = id;\n                                skeleton.bones[i] = bone;\n                                if (subBone !== null) {\n                                    bone.add(subBone);\n                                }\n                            }\n                        });\n                    }\n                });\n                return bone;\n            },\n            createCamera: function (relationships) {\n                var model;\n                var cameraAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        cameraAttribute = attr;\n                    }\n                });\n                if (cameraAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type = 0;\n                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n                        type = 1;\n                    }\n                    var nearClippingPlane = 1;\n                    if (cameraAttribute.NearPlane !== undefined) {\n                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n                    }\n                    var farClippingPlane = 1000;\n                    if (cameraAttribute.FarPlane !== undefined) {\n                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n                    }\n                    var width = window.innerWidth;\n                    var height = window.innerHeight;\n                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n                        width = cameraAttribute.AspectWidth.value;\n                        height = cameraAttribute.AspectHeight.value;\n                    }\n                    var aspect = width / height;\n                    var fov = 45;\n                    if (cameraAttribute.FieldOfView !== undefined) {\n                        fov = cameraAttribute.FieldOfView.value;\n                    }\n                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n                        if (focalLength !== null)\n                            model.setFocalLength(focalLength);\n                        break;\n                    case 1:\n                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n                        model = new THREE.Object3D();\n                        break;\n                    }\n                }\n                return model;\n            },\n            createLight: function (relationships) {\n                var model;\n                var lightAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        lightAttribute = attr;\n                    }\n                });\n                if (lightAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type;\n                    if (lightAttribute.LightType === undefined) {\n                        type = 0;\n                    } else {\n                        type = lightAttribute.LightType.value;\n                    }\n                    var color = 16777215;\n                    if (lightAttribute.undefined !== undefined) {\n                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);\n                    }\n                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n                        intensity = 0;\n                    }\n                    var distance = 0;\n                    if (lightAttribute.FarAttenuationEnd !== undefined) {\n                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n                            distance = 0;\n                        } else {\n                            distance = lightAttribute.FarAttenuationEnd.value;\n                        }\n                    }\n                    var decay = 1;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PointLight(color, intensity, distance, decay);\n                        break;\n                    case 1:\n                        model = new THREE.DirectionalLight(color, intensity);\n                        break;\n                    case 2:\n                        var angle = Math.PI / 3;\n                        if (lightAttribute.InnerAngle !== undefined) {\n                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\n                        }\n                        var penumbra = 0;\n                        if (lightAttribute.OuterAngle !== undefined) {\n                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\n                            penumbra = Math.max(penumbra, 1);\n                        }\n                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n                        model = new THREE.PointLight(color, intensity);\n                        break;\n                    }\n                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n                        model.castShadow = true;\n                    }\n                }\n                return model;\n            },\n            createMesh: function (relationships, geometryMap, materialMap) {\n                var model;\n                var geometry = null;\n                var material = null;\n                var materials = [];\n                relationships.children.forEach(function (child) {\n                    if (geometryMap.has(child.ID)) {\n                        geometry = geometryMap.get(child.ID);\n                    }\n                    if (materialMap.has(child.ID)) {\n                        materials.push(materialMap.get(child.ID));\n                    }\n                });\n                if (materials.length > 1) {\n                    material = materials;\n                } else if (materials.length > 0) {\n                    material = materials[0];\n                } else {\n                    material = new THREE.MeshPhongMaterial({ color: 13421772 });\n                    materials.push(material);\n                }\n                if ('color' in geometry.attributes) {\n                    materials.forEach(function (material) {\n                        material.vertexColors = true;\n                    });\n                }\n                if (geometry.FBX_Deformer) {\n                    materials.forEach(function (material) {\n                        material.skinning = true;\n                    });\n                    model = new THREE.SkinnedMesh(geometry, material);\n                    model.normalizeSkinWeights();\n                } else {\n                    model = new THREE.Mesh(geometry, material);\n                }\n                return model;\n            },\n            createCurve: function (relationships, geometryMap) {\n                var geometry = relationships.children.reduce(function (geo, child) {\n                    if (geometryMap.has(child.ID))\n                        geo = geometryMap.get(child.ID);\n                    return geo;\n                }, null);\n                var material = new THREE.LineBasicMaterial({\n                    color: 3342591,\n                    linewidth: 1\n                });\n                return new THREE.Line(geometry, material);\n            },\n            getTransformData: function (model, modelNode) {\n                var transformData = {};\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                else\n                    transformData.eulerOrder = 'ZYX';\n                if ('Lcl_Translation' in modelNode)\n                    transformData.translation = modelNode.Lcl_Translation.value;\n                if ('PreRotation' in modelNode)\n                    transformData.preRotation = modelNode.PreRotation.value;\n                if ('Lcl_Rotation' in modelNode)\n                    transformData.rotation = modelNode.Lcl_Rotation.value;\n                if ('PostRotation' in modelNode)\n                    transformData.postRotation = modelNode.PostRotation.value;\n                if ('Lcl_Scaling' in modelNode)\n                    transformData.scale = modelNode.Lcl_Scaling.value;\n                if ('ScalingOffset' in modelNode)\n                    transformData.scalingOffset = modelNode.ScalingOffset.value;\n                if ('ScalingPivot' in modelNode)\n                    transformData.scalingPivot = modelNode.ScalingPivot.value;\n                if ('RotationOffset' in modelNode)\n                    transformData.rotationOffset = modelNode.RotationOffset.value;\n                if ('RotationPivot' in modelNode)\n                    transformData.rotationPivot = modelNode.RotationPivot.value;\n                model.userData.transformData = transformData;\n            },\n            setLookAtProperties: function (model, modelNode) {\n                if ('LookAtProperty' in modelNode) {\n                    var children = connections.get(model.ID).children;\n                    children.forEach(function (child) {\n                        if (child.relationship === 'LookAtProperty') {\n                            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n                            if ('Lcl_Translation' in lookAtTarget) {\n                                var pos = lookAtTarget.Lcl_Translation.value;\n                                if (model.target !== undefined) {\n                                    model.target.position.fromArray(pos);\n                                    sceneGraph.add(model.target);\n                                } else {\n                                    model.lookAt(new THREE.Vector3().fromArray(pos));\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            bindSkeleton: function (skeletons, geometryMap, modelMap) {\n                var bindMatrices = this.parsePoseNodes();\n                for (var ID in skeletons) {\n                    var skeleton = skeletons[ID];\n                    var parents = connections.get(parseInt(skeleton.ID)).parents;\n                    parents.forEach(function (parent) {\n                        if (geometryMap.has(parent.ID)) {\n                            var geoID = parent.ID;\n                            var geoRelationships = connections.get(geoID);\n                            geoRelationships.parents.forEach(function (geoConnParent) {\n                                if (modelMap.has(geoConnParent.ID)) {\n                                    var model = modelMap.get(geoConnParent.ID);\n                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            parsePoseNodes: function () {\n                var bindMatrices = {};\n                if ('Pose' in fbxTree.Objects) {\n                    var BindPoseNode = fbxTree.Objects.Pose;\n                    for (var nodeID in BindPoseNode) {\n                        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n                            var poseNodes = BindPoseNode[nodeID].PoseNode;\n                            if (Array.isArray(poseNodes)) {\n                                poseNodes.forEach(function (poseNode) {\n                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n                                });\n                            } else {\n                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n                            }\n                        }\n                    }\n                }\n                return bindMatrices;\n            },\n            createAmbientLight: function () {\n                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n                    var r = ambientColor[0];\n                    var g = ambientColor[1];\n                    var b = ambientColor[2];\n                    if (r !== 0 || g !== 0 || b !== 0) {\n                        var color = new THREE.Color(r, g, b);\n                        sceneGraph.add(new THREE.AmbientLight(color, 1));\n                    }\n                }\n            },\n            setupMorphMaterials: function () {\n                var self = this;\n                sceneGraph.traverse(function (child) {\n                    if (child.isMesh) {\n                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n                            if (Array.isArray(child.material)) {\n                                child.material.forEach(function (material, i) {\n                                    self.setupMorphMaterial(child, material, i);\n                                });\n                            } else {\n                                self.setupMorphMaterial(child, child.material);\n                            }\n                        }\n                    }\n                });\n            },\n            setupMorphMaterial: function (child, material, index) {\n                var uuid = child.uuid;\n                var matUuid = material.uuid;\n                var sharedMat = false;\n                sceneGraph.traverse(function (node) {\n                    if (node.isMesh) {\n                        if (Array.isArray(node.material)) {\n                            node.material.forEach(function (mat) {\n                                if (mat.uuid === matUuid && node.uuid !== uuid)\n                                    sharedMat = true;\n                            });\n                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)\n                            sharedMat = true;\n                    }\n                });\n                if (sharedMat === true) {\n                    var clonedMat = material.clone();\n                    clonedMat.morphTargets = true;\n                    if (index === undefined)\n                        child.material = clonedMat;\n                    else\n                        child.material[index] = clonedMat;\n                } else\n                    material.morphTargets = true;\n            }\n        };\n        function GeometryParser() {\n        }\n        GeometryParser.prototype = {\n            constructor: GeometryParser,\n            parse: function (deformers) {\n                var geometryMap = new Map();\n                if ('Geometry' in fbxTree.Objects) {\n                    var geoNodes = fbxTree.Objects.Geometry;\n                    for (var nodeID in geoNodes) {\n                        var relationships = connections.get(parseInt(nodeID));\n                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n                        geometryMap.set(parseInt(nodeID), geo);\n                    }\n                }\n                return geometryMap;\n            },\n            parseGeometry: function (relationships, geoNode, deformers) {\n                switch (geoNode.attrType) {\n                case 'Mesh':\n                    return this.parseMeshGeometry(relationships, geoNode, deformers);\n                    break;\n                case 'NurbsCurve':\n                    return this.parseNurbsGeometry(geoNode);\n                    break;\n                }\n            },\n            parseMeshGeometry: function (relationships, geoNode, deformers) {\n                var skeletons = deformers.skeletons;\n                var morphTargets = [];\n                var modelNodes = relationships.parents.map(function (parent) {\n                    return fbxTree.Objects.Model[parent.ID];\n                });\n                if (modelNodes.length === 0)\n                    return;\n                var skeleton = relationships.children.reduce(function (skeleton, child) {\n                    if (skeletons[child.ID] !== undefined)\n                        skeleton = skeletons[child.ID];\n                    return skeleton;\n                }, null);\n                relationships.children.forEach(function (child) {\n                    if (deformers.morphTargets[child.ID] !== undefined) {\n                        morphTargets.push(deformers.morphTargets[child.ID]);\n                    }\n                });\n                var modelNode = modelNodes[0];\n                var transformData = {};\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('GeometricTranslation' in modelNode)\n                    transformData.translation = modelNode.GeometricTranslation.value;\n                if ('GeometricRotation' in modelNode)\n                    transformData.rotation = modelNode.GeometricRotation.value;\n                if ('GeometricScaling' in modelNode)\n                    transformData.scale = modelNode.GeometricScaling.value;\n                var transform = generateTransform(transformData);\n                return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n            },\n            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n                var geo = new THREE.BufferGeometry();\n                if (geoNode.attrName)\n                    geo.name = geoNode.attrName;\n                var geoInfo = this.parseGeoNode(geoNode, skeleton);\n                var buffers = this.genBuffers(geoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n                positionAttribute.applyMatrix4(preTransform);\n                geo.setAttribute('position', positionAttribute);\n                if (buffers.colors.length > 0) {\n                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n                }\n                if (skeleton) {\n                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));\n                    geo.FBX_Deformer = skeleton;\n                }\n                if (buffers.normal.length > 0) {\n                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n                    normalAttribute.applyNormalMatrix(normalMatrix);\n                    geo.setAttribute('normal', normalAttribute);\n                }\n                buffers.uvs.forEach(function (uvBuffer, i) {\n                    var name = 'uv' + (i + 1).toString();\n                    if (i === 0) {\n                        name = 'uv';\n                    }\n                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n                });\n                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                    var prevMaterialIndex = buffers.materialIndex[0];\n                    var startIndex = 0;\n                    buffers.materialIndex.forEach(function (currentIndex, i) {\n                        if (currentIndex !== prevMaterialIndex) {\n                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n                            prevMaterialIndex = currentIndex;\n                            startIndex = i;\n                        }\n                    });\n                    if (geo.groups.length > 0) {\n                        var lastGroup = geo.groups[geo.groups.length - 1];\n                        var lastIndex = lastGroup.start + lastGroup.count;\n                        if (lastIndex !== buffers.materialIndex.length) {\n                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n                        }\n                    }\n                    if (geo.groups.length === 0) {\n                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n                    }\n                }\n                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n                return geo;\n            },\n            parseGeoNode: function (geoNode, skeleton) {\n                var geoInfo = {};\n                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n                if (geoNode.LayerElementColor) {\n                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n                }\n                if (geoNode.LayerElementMaterial) {\n                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n                }\n                if (geoNode.LayerElementNormal) {\n                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n                }\n                if (geoNode.LayerElementUV) {\n                    geoInfo.uv = [];\n                    var i = 0;\n                    while (geoNode.LayerElementUV[i]) {\n                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n                        i++;\n                    }\n                }\n                geoInfo.weightTable = {};\n                if (skeleton !== null) {\n                    geoInfo.skeleton = skeleton;\n                    skeleton.rawBones.forEach(function (rawBone, i) {\n                        rawBone.indices.forEach(function (index, j) {\n                            if (geoInfo.weightTable[index] === undefined)\n                                geoInfo.weightTable[index] = [];\n                            geoInfo.weightTable[index].push({\n                                id: i,\n                                weight: rawBone.weights[j]\n                            });\n                        });\n                    });\n                }\n                return geoInfo;\n            },\n            genBuffers: function (geoInfo) {\n                var buffers = {\n                    vertex: [],\n                    normal: [],\n                    colors: [],\n                    uvs: [],\n                    materialIndex: [],\n                    vertexWeights: [],\n                    weightsIndices: []\n                };\n                var polygonIndex = 0;\n                var faceLength = 0;\n                var displayedWeightsWarning = false;\n                var facePositionIndexes = [];\n                var faceNormals = [];\n                var faceColors = [];\n                var faceUVs = [];\n                var faceWeights = [];\n                var faceWeightIndices = [];\n                var self = this;\n                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n                    var endOfFace = false;\n                    if (vertexIndex < 0) {\n                        vertexIndex = vertexIndex ^ -1;\n                        endOfFace = true;\n                    }\n                    var weightIndices = [];\n                    var weights = [];\n                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n                    if (geoInfo.color) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n                        faceColors.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.skeleton) {\n                        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n                                weights.push(wt.weight);\n                                weightIndices.push(wt.id);\n                            });\n                        }\n                        if (weights.length > 4) {\n                            if (!displayedWeightsWarning) {\n                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n                                displayedWeightsWarning = true;\n                            }\n                            var wIndex = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            var Weight = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            weights.forEach(function (weight, weightIndex) {\n                                var currentWeight = weight;\n                                var currentIndex = weightIndices[weightIndex];\n                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                                    if (currentWeight > comparedWeight) {\n                                        comparedWeightArray[comparedWeightIndex] = currentWeight;\n                                        currentWeight = comparedWeight;\n                                        var tmp = wIndex[comparedWeightIndex];\n                                        wIndex[comparedWeightIndex] = currentIndex;\n                                        currentIndex = tmp;\n                                    }\n                                });\n                            });\n                            weightIndices = wIndex;\n                            weights = Weight;\n                        }\n                        while (weights.length < 4) {\n                            weights.push(0);\n                            weightIndices.push(0);\n                        }\n                        for (var i = 0; i < 4; ++i) {\n                            faceWeights.push(weights[i]);\n                            faceWeightIndices.push(weightIndices[i]);\n                        }\n                    }\n                    if (geoInfo.normal) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n                        faceNormals.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, i) {\n                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n                            if (faceUVs[i] === undefined) {\n                                faceUVs[i] = [];\n                            }\n                            faceUVs[i].push(data[0]);\n                            faceUVs[i].push(data[1]);\n                        });\n                    }\n                    faceLength++;\n                    if (endOfFace) {\n                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n                        polygonIndex++;\n                        faceLength = 0;\n                        facePositionIndexes = [];\n                        faceNormals = [];\n                        faceColors = [];\n                        faceUVs = [];\n                        faceWeights = [];\n                        faceWeightIndices = [];\n                    }\n                });\n                return buffers;\n            },\n            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n                for (var i = 2; i < faceLength; i++) {\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n                    if (geoInfo.skeleton) {\n                        buffers.vertexWeights.push(faceWeights[0]);\n                        buffers.vertexWeights.push(faceWeights[1]);\n                        buffers.vertexWeights.push(faceWeights[2]);\n                        buffers.vertexWeights.push(faceWeights[3]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n                        buffers.vertexWeights.push(faceWeights[i * 4]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[0]);\n                        buffers.weightsIndices.push(faceWeightIndices[1]);\n                        buffers.weightsIndices.push(faceWeightIndices[2]);\n                        buffers.weightsIndices.push(faceWeightIndices[3]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n                    }\n                    if (geoInfo.color) {\n                        buffers.colors.push(faceColors[0]);\n                        buffers.colors.push(faceColors[1]);\n                        buffers.colors.push(faceColors[2]);\n                        buffers.colors.push(faceColors[(i - 1) * 3]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n                        buffers.colors.push(faceColors[i * 3]);\n                        buffers.colors.push(faceColors[i * 3 + 1]);\n                        buffers.colors.push(faceColors[i * 3 + 2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                    }\n                    if (geoInfo.normal) {\n                        buffers.normal.push(faceNormals[0]);\n                        buffers.normal.push(faceNormals[1]);\n                        buffers.normal.push(faceNormals[2]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n                        buffers.normal.push(faceNormals[i * 3]);\n                        buffers.normal.push(faceNormals[i * 3 + 1]);\n                        buffers.normal.push(faceNormals[i * 3 + 2]);\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, j) {\n                            if (buffers.uvs[j] === undefined)\n                                buffers.uvs[j] = [];\n                            buffers.uvs[j].push(faceUVs[j][0]);\n                            buffers.uvs[j].push(faceUVs[j][1]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n                        });\n                    }\n                }\n            },\n            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n                if (morphTargets.length === 0)\n                    return;\n                parentGeo.morphTargetsRelative = true;\n                parentGeo.morphAttributes.position = [];\n                var self = this;\n                morphTargets.forEach(function (morphTarget) {\n                    morphTarget.rawTargets.forEach(function (rawTarget) {\n                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n                        if (morphGeoNode !== undefined) {\n                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n                        }\n                    });\n                });\n            },\n            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n                var length = parentGeo.attributes.position.count * 3;\n                var morphPositions = new Float32Array(length);\n                for (var i = 0; i < indices.length; i++) {\n                    var morphIndex = indices[i] * 3;\n                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n                }\n                var morphGeoInfo = {\n                    vertexIndices: vertexIndices,\n                    vertexPositions: morphPositions\n                };\n                var morphBuffers = this.genBuffers(morphGeoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n                positionAttribute.name = name || morphGeoNode.attrName;\n                positionAttribute.applyMatrix4(preTransform);\n                parentGeo.morphAttributes.position.push(positionAttribute);\n            },\n            parseNormals: function (NormalNode) {\n                var mappingType = NormalNode.MappingInformationType;\n                var referenceType = NormalNode.ReferenceInformationType;\n                var buffer = NormalNode.Normals.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    if ('NormalIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalIndex.a;\n                    } else if ('NormalsIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalsIndex.a;\n                    }\n                }\n                return {\n                    dataSize: 3,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseUVs: function (UVNode) {\n                var mappingType = UVNode.MappingInformationType;\n                var referenceType = UVNode.ReferenceInformationType;\n                var buffer = UVNode.UV.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = UVNode.UVIndex.a;\n                }\n                return {\n                    dataSize: 2,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseVertexColors: function (ColorNode) {\n                var mappingType = ColorNode.MappingInformationType;\n                var referenceType = ColorNode.ReferenceInformationType;\n                var buffer = ColorNode.Colors.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = ColorNode.ColorIndex.a;\n                }\n                return {\n                    dataSize: 4,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseMaterialIndices: function (MaterialNode) {\n                var mappingType = MaterialNode.MappingInformationType;\n                var referenceType = MaterialNode.ReferenceInformationType;\n                if (mappingType === 'NoMappingInformation') {\n                    return {\n                        dataSize: 1,\n                        buffer: [0],\n                        indices: [0],\n                        mappingType: 'AllSame',\n                        referenceType: referenceType\n                    };\n                }\n                var materialIndexBuffer = MaterialNode.Materials.a;\n                var materialIndices = [];\n                for (var i = 0; i < materialIndexBuffer.length; ++i) {\n                    materialIndices.push(i);\n                }\n                return {\n                    dataSize: 1,\n                    buffer: materialIndexBuffer,\n                    indices: materialIndices,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseNurbsGeometry: function (geoNode) {\n                if (c.NURBSCurve === undefined) {\n                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n                    return new THREE.BufferGeometry();\n                }\n                var order = parseInt(geoNode.Order);\n                if (isNaN(order)) {\n                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n                    return new THREE.BufferGeometry();\n                }\n                var degree = order - 1;\n                var knots = geoNode.KnotVector.a;\n                var controlPoints = [];\n                var pointsValues = geoNode.Points.a;\n                for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n                }\n                var startKnot, endKnot;\n                if (geoNode.Form === 'Closed') {\n                    controlPoints.push(controlPoints[0]);\n                } else if (geoNode.Form === 'Periodic') {\n                    startKnot = degree;\n                    endKnot = knots.length - 1 - startKnot;\n                    for (var i = 0; i < degree; ++i) {\n                        controlPoints.push(controlPoints[i]);\n                    }\n                }\n                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n                var vertices = curve.getPoints(controlPoints.length * 7);\n                var positions = new Float32Array(vertices.length * 3);\n                vertices.forEach(function (vertex, i) {\n                    vertex.toArray(positions, i * 3);\n                });\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n                return geometry;\n            }\n        };\n        function AnimationParser() {\n        }\n        AnimationParser.prototype = {\n            constructor: AnimationParser,\n            parse: function () {\n                var animationClips = [];\n                var rawClips = this.parseClips();\n                if (rawClips !== undefined) {\n                    for (var key in rawClips) {\n                        var rawClip = rawClips[key];\n                        var clip = this.addClip(rawClip);\n                        animationClips.push(clip);\n                    }\n                }\n                return animationClips;\n            },\n            parseClips: function () {\n                if (fbxTree.Objects.AnimationCurve === undefined)\n                    return undefined;\n                var curveNodesMap = this.parseAnimationCurveNodes();\n                this.parseAnimationCurves(curveNodesMap);\n                var layersMap = this.parseAnimationLayers(curveNodesMap);\n                var rawClips = this.parseAnimStacks(layersMap);\n                return rawClips;\n            },\n            parseAnimationCurveNodes: function () {\n                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n                var curveNodesMap = new Map();\n                for (var nodeID in rawCurveNodes) {\n                    var rawCurveNode = rawCurveNodes[nodeID];\n                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n                        var curveNode = {\n                            id: rawCurveNode.id,\n                            attr: rawCurveNode.attrName,\n                            curves: {}\n                        };\n                        curveNodesMap.set(curveNode.id, curveNode);\n                    }\n                }\n                return curveNodesMap;\n            },\n            parseAnimationCurves: function (curveNodesMap) {\n                var rawCurves = fbxTree.Objects.AnimationCurve;\n                for (var nodeID in rawCurves) {\n                    var animationCurve = {\n                        id: rawCurves[nodeID].id,\n                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n                        values: rawCurves[nodeID].KeyValueFloat.a\n                    };\n                    var relationships = connections.get(animationCurve.id);\n                    if (relationships !== undefined) {\n                        var animationCurveID = relationships.parents[0].ID;\n                        var animationCurveRelationship = relationships.parents[0].relationship;\n                        if (animationCurveRelationship.match(/X/)) {\n                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Y/)) {\n                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Z/)) {\n                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n                        }\n                    }\n                }\n            },\n            parseAnimationLayers: function (curveNodesMap) {\n                var rawLayers = fbxTree.Objects.AnimationLayer;\n                var layersMap = new Map();\n                for (var nodeID in rawLayers) {\n                    var layerCurveNodes = [];\n                    var connection = connections.get(parseInt(nodeID));\n                    if (connection !== undefined) {\n                        var children = connection.children;\n                        children.forEach(function (child, i) {\n                            if (curveNodesMap.has(child.ID)) {\n                                var curveNode = curveNodesMap.get(child.ID);\n                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        if (modelID !== undefined) {\n                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                                            var node = {\n                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                                ID: rawModel.id,\n                                                initialPosition: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialRotation: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialScale: [\n                                                    1,\n                                                    1,\n                                                    1\n                                                ]\n                                            };\n                                            sceneGraph.traverse(function (child) {\n                                                if (child.ID === rawModel.id) {\n                                                    node.transform = child.matrix;\n                                                    if (child.userData.transformData)\n                                                        node.eulerOrder = child.userData.transformData.eulerOrder;\n                                                }\n                                            });\n                                            if (!node.transform)\n                                                node.transform = new THREE.Matrix4();\n                                            if ('PreRotation' in rawModel)\n                                                node.preRotation = rawModel.PreRotation.value;\n                                            if ('PostRotation' in rawModel)\n                                                node.postRotation = rawModel.PostRotation.value;\n                                            layerCurveNodes[i] = node;\n                                        }\n                                    }\n                                    if (layerCurveNodes[i])\n                                        layerCurveNodes[i][curveNode.attr] = curveNode;\n                                } else if (curveNode.curves.morph !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        var morpherID = connections.get(deformerID).parents[0].ID;\n                                        var geoID = connections.get(morpherID).parents[0].ID;\n                                        var modelID = connections.get(geoID).parents[0].ID;\n                                        var rawModel = fbxTree.Objects.Model[modelID];\n                                        var node = {\n                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                                        };\n                                        layerCurveNodes[i] = node;\n                                    }\n                                    layerCurveNodes[i][curveNode.attr] = curveNode;\n                                }\n                            }\n                        });\n                        layersMap.set(parseInt(nodeID), layerCurveNodes);\n                    }\n                }\n                return layersMap;\n            },\n            parseAnimStacks: function (layersMap) {\n                var rawStacks = fbxTree.Objects.AnimationStack;\n                var rawClips = {};\n                for (var nodeID in rawStacks) {\n                    var children = connections.get(parseInt(nodeID)).children;\n                    if (children.length > 1) {\n                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n                    }\n                    var layer = layersMap.get(children[0].ID);\n                    rawClips[nodeID] = {\n                        name: rawStacks[nodeID].attrName,\n                        layer: layer\n                    };\n                }\n                return rawClips;\n            },\n            addClip: function (rawClip) {\n                var tracks = [];\n                var self = this;\n                rawClip.layer.forEach(function (rawTracks) {\n                    tracks = tracks.concat(self.generateTracks(rawTracks));\n                });\n                return new THREE.AnimationClip(rawClip.name, -1, tracks);\n            },\n            generateTracks: function (rawTracks) {\n                var tracks = [];\n                var initialPosition = new THREE.Vector3();\n                var initialRotation = new THREE.Quaternion();\n                var initialScale = new THREE.Vector3();\n                if (rawTracks.transform)\n                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n                initialPosition = initialPosition.toArray();\n                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n                initialScale = initialScale.toArray();\n                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n                    if (positionTrack !== undefined)\n                        tracks.push(positionTrack);\n                }\n                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n                    if (rotationTrack !== undefined)\n                        tracks.push(rotationTrack);\n                }\n                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n                    if (scaleTrack !== undefined)\n                        tracks.push(scaleTrack);\n                }\n                if (rawTracks.DeformPercent !== undefined) {\n                    var morphTrack = this.generateMorphTrack(rawTracks);\n                    if (morphTrack !== undefined)\n                        tracks.push(morphTrack);\n                }\n                return tracks;\n            },\n            generateVectorTrack: function (modelName, curves, initialValue, type) {\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n            },\n            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n                if (curves.x !== undefined) {\n                    this.interpolateRotations(curves.x);\n                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.y !== undefined) {\n                    this.interpolateRotations(curves.y);\n                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.z !== undefined) {\n                    this.interpolateRotations(curves.z);\n                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\n                }\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                if (preRotation !== undefined) {\n                    preRotation = preRotation.map(THREE.MathUtils.degToRad);\n                    preRotation.push(eulerOrder);\n                    preRotation = new THREE.Euler().fromArray(preRotation);\n                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);\n                }\n                if (postRotation !== undefined) {\n                    postRotation = postRotation.map(THREE.MathUtils.degToRad);\n                    postRotation.push(eulerOrder);\n                    postRotation = new THREE.Euler().fromArray(postRotation);\n                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();\n                }\n                var quaternion = new THREE.Quaternion();\n                var euler = new THREE.Euler();\n                var quaternionValues = [];\n                for (var i = 0; i < values.length; i += 3) {\n                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n                    quaternion.setFromEuler(euler);\n                    if (preRotation !== undefined)\n                        quaternion.premultiply(preRotation);\n                    if (postRotation !== undefined)\n                        quaternion.multiply(postRotation);\n                    quaternion.toArray(quaternionValues, i / 3 * 4);\n                }\n                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n            },\n            generateMorphTrack: function (rawTracks) {\n                var curves = rawTracks.DeformPercent.curves.morph;\n                var values = curves.values.map(function (val) {\n                    return val / 100;\n                });\n                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n            },\n            getTimesForAllAxes: function (curves) {\n                var times = [];\n                if (curves.x !== undefined)\n                    times = times.concat(curves.x.times);\n                if (curves.y !== undefined)\n                    times = times.concat(curves.y.times);\n                if (curves.z !== undefined)\n                    times = times.concat(curves.z.times);\n                times = times.sort(function (a, b) {\n                    return a - b;\n                }).filter(function (elem, index, array) {\n                    return array.indexOf(elem) == index;\n                });\n                return times;\n            },\n            getKeyframeTrackValues: function (times, curves, initialValue) {\n                var prevValue = initialValue;\n                var values = [];\n                var xIndex = -1;\n                var yIndex = -1;\n                var zIndex = -1;\n                times.forEach(function (time) {\n                    if (curves.x)\n                        xIndex = curves.x.times.indexOf(time);\n                    if (curves.y)\n                        yIndex = curves.y.times.indexOf(time);\n                    if (curves.z)\n                        zIndex = curves.z.times.indexOf(time);\n                    if (xIndex !== -1) {\n                        var xValue = curves.x.values[xIndex];\n                        values.push(xValue);\n                        prevValue[0] = xValue;\n                    } else {\n                        values.push(prevValue[0]);\n                    }\n                    if (yIndex !== -1) {\n                        var yValue = curves.y.values[yIndex];\n                        values.push(yValue);\n                        prevValue[1] = yValue;\n                    } else {\n                        values.push(prevValue[1]);\n                    }\n                    if (zIndex !== -1) {\n                        var zValue = curves.z.values[zIndex];\n                        values.push(zValue);\n                        prevValue[2] = zValue;\n                    } else {\n                        values.push(prevValue[2]);\n                    }\n                });\n                return values;\n            },\n            interpolateRotations: function (curve) {\n                for (var i = 1; i < curve.values.length; i++) {\n                    var initialValue = curve.values[i - 1];\n                    var valuesSpan = curve.values[i] - initialValue;\n                    var absoluteSpan = Math.abs(valuesSpan);\n                    if (absoluteSpan >= 180) {\n                        var numSubIntervals = absoluteSpan / 180;\n                        var step = valuesSpan / numSubIntervals;\n                        var nextValue = initialValue + step;\n                        var initialTime = curve.times[i - 1];\n                        var timeSpan = curve.times[i] - initialTime;\n                        var interval = timeSpan / numSubIntervals;\n                        var nextTime = initialTime + interval;\n                        var interpolatedTimes = [];\n                        var interpolatedValues = [];\n                        while (nextTime < curve.times[i]) {\n                            interpolatedTimes.push(nextTime);\n                            nextTime += interval;\n                            interpolatedValues.push(nextValue);\n                            nextValue += step;\n                        }\n                        curve.times = inject(curve.times, i, interpolatedTimes);\n                        curve.values = inject(curve.values, i, interpolatedValues);\n                    }\n                }\n            }\n        };\n        function TextParser() {\n        }\n        TextParser.prototype = {\n            constructor: TextParser,\n            getPrevNode: function () {\n                return this.nodeStack[this.currentIndent - 2];\n            },\n            getCurrentNode: function () {\n                return this.nodeStack[this.currentIndent - 1];\n            },\n            getCurrentProp: function () {\n                return this.currentProp;\n            },\n            pushStack: function (node) {\n                this.nodeStack.push(node);\n                this.currentIndent += 1;\n            },\n            popStack: function () {\n                this.nodeStack.pop();\n                this.currentIndent -= 1;\n            },\n            setCurrentProp: function (val, name) {\n                this.currentProp = val;\n                this.currentPropName = name;\n            },\n            parse: function (text) {\n                this.currentIndent = 0;\n                this.allNodes = new FBXTree();\n                this.nodeStack = [];\n                this.currentProp = [];\n                this.currentPropName = '';\n                var self = this;\n                var split = text.split(/[\\r\\n]+/);\n                split.forEach(function (line, i) {\n                    var matchComment = line.match(/^[\\s\\t]*;/);\n                    var matchEmpty = line.match(/^[\\s\\t]*$/);\n                    if (matchComment || matchEmpty)\n                        return;\n                    var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n                    var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n                    var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n                    if (matchBeginning) {\n                        self.parseNodeBegin(line, matchBeginning);\n                    } else if (matchProperty) {\n                        self.parseNodeProperty(line, matchProperty, split[++i]);\n                    } else if (matchEnd) {\n                        self.popStack();\n                    } else if (line.match(/^[^\\s\\t}]/)) {\n                        self.parseNodePropertyContinued(line);\n                    }\n                });\n                return this.allNodes;\n            },\n            parseNodeBegin: function (line, property) {\n                var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n                var nodeAttrs = property[2].split(',').map(function (attr) {\n                    return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n                });\n                var node = { name: nodeName };\n                var attrs = this.parseNodeAttr(nodeAttrs);\n                var currentNode = this.getCurrentNode();\n                if (this.currentIndent === 0) {\n                    this.allNodes.add(nodeName, node);\n                } else {\n                    if (nodeName in currentNode) {\n                        if (nodeName === 'PoseNode') {\n                            currentNode.PoseNode.push(node);\n                        } else if (currentNode[nodeName].id !== undefined) {\n                            currentNode[nodeName] = {};\n                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n                        }\n                        if (attrs.id !== '')\n                            currentNode[nodeName][attrs.id] = node;\n                    } else if (typeof attrs.id === 'number') {\n                        currentNode[nodeName] = {};\n                        currentNode[nodeName][attrs.id] = node;\n                    } else if (nodeName !== 'Properties70') {\n                        if (nodeName === 'PoseNode')\n                            currentNode[nodeName] = [node];\n                        else\n                            currentNode[nodeName] = node;\n                    }\n                }\n                if (typeof attrs.id === 'number')\n                    node.id = attrs.id;\n                if (attrs.name !== '')\n                    node.attrName = attrs.name;\n                if (attrs.type !== '')\n                    node.attrType = attrs.type;\n                this.pushStack(node);\n            },\n            parseNodeAttr: function (attrs) {\n                var id = attrs[0];\n                if (attrs[0] !== '') {\n                    id = parseInt(attrs[0]);\n                    if (isNaN(id)) {\n                        id = attrs[0];\n                    }\n                }\n                var name = '', type = '';\n                if (attrs.length > 1) {\n                    name = attrs[1].replace(/^(\\w+)::/, '');\n                    type = attrs[2];\n                }\n                return {\n                    id: id,\n                    name: name,\n                    type: type\n                };\n            },\n            parseNodeProperty: function (line, property, contentLine) {\n                var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n                var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n                if (propName === 'Content' && propValue === ',') {\n                    propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n                }\n                var currentNode = this.getCurrentNode();\n                var parentName = currentNode.name;\n                if (parentName === 'Properties70') {\n                    this.parseNodeSpecialProperty(line, propName, propValue);\n                    return;\n                }\n                if (propName === 'C') {\n                    var connProps = propValue.split(',').slice(1);\n                    var from = parseInt(connProps[0]);\n                    var to = parseInt(connProps[1]);\n                    var rest = propValue.split(',').slice(3);\n                    rest = rest.map(function (elem) {\n                        return elem.trim().replace(/^\"/, '');\n                    });\n                    propName = 'connections';\n                    propValue = [\n                        from,\n                        to\n                    ];\n                    append(propValue, rest);\n                    if (currentNode[propName] === undefined) {\n                        currentNode[propName] = [];\n                    }\n                }\n                if (propName === 'Node')\n                    currentNode.id = propValue;\n                if (propName in currentNode && Array.isArray(currentNode[propName])) {\n                    currentNode[propName].push(propValue);\n                } else {\n                    if (propName !== 'a')\n                        currentNode[propName] = propValue;\n                    else\n                        currentNode.a = propValue;\n                }\n                this.setCurrentProp(currentNode, propName);\n                if (propName === 'a' && propValue.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(propValue);\n                }\n            },\n            parseNodePropertyContinued: function (line) {\n                var currentNode = this.getCurrentNode();\n                currentNode.a += line;\n                if (line.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(currentNode.a);\n                }\n            },\n            parseNodeSpecialProperty: function (line, propName, propValue) {\n                var props = propValue.split('\",').map(function (prop) {\n                    return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n                });\n                var innerPropName = props[0];\n                var innerPropType1 = props[1];\n                var innerPropType2 = props[2];\n                var innerPropFlag = props[3];\n                var innerPropValue = props[4];\n                switch (innerPropType1) {\n                case 'int':\n                case 'enum':\n                case 'bool':\n                case 'ULongLong':\n                case 'double':\n                case 'Number':\n                case 'FieldOfView':\n                    innerPropValue = parseFloat(innerPropValue);\n                    break;\n                case 'Color':\n                case 'ColorRGB':\n                case 'Vector3D':\n                case 'Lcl_Translation':\n                case 'Lcl_Rotation':\n                case 'Lcl_Scaling':\n                    innerPropValue = parseNumberArray(innerPropValue);\n                    break;\n                }\n                this.getPrevNode()[innerPropName] = {\n                    'type': innerPropType1,\n                    'type2': innerPropType2,\n                    'flag': innerPropFlag,\n                    'value': innerPropValue\n                };\n                this.setCurrentProp(this.getPrevNode(), innerPropName);\n            }\n        };\n        function BinaryParser() {\n        }\n        BinaryParser.prototype = {\n            constructor: BinaryParser,\n            parse: function (buffer) {\n                var reader = new BinaryReader(buffer);\n                reader.skip(23);\n                var version = reader.getUint32();\n                console.log('THREE.FBXLoader: FBX binary version: ' + version);\n                var allNodes = new FBXTree();\n                while (!this.endOfContent(reader)) {\n                    var node = this.parseNode(reader, version);\n                    if (node !== null)\n                        allNodes.add(node.name, node);\n                }\n                return allNodes;\n            },\n            endOfContent: function (reader) {\n                if (reader.size() % 16 === 0) {\n                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n                } else {\n                    return reader.getOffset() + 160 + 16 >= reader.size();\n                }\n            },\n            parseNode: function (reader, version) {\n                var node = {};\n                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var nameLen = reader.getUint8();\n                var name = reader.getString(nameLen);\n                if (endOffset === 0)\n                    return null;\n                var propertyList = [];\n                for (var i = 0; i < numProperties; i++) {\n                    propertyList.push(this.parseProperty(reader));\n                }\n                var id = propertyList.length > 0 ? propertyList[0] : '';\n                var attrName = propertyList.length > 1 ? propertyList[1] : '';\n                var attrType = propertyList.length > 2 ? propertyList[2] : '';\n                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n                while (endOffset > reader.getOffset()) {\n                    var subNode = this.parseNode(reader, version);\n                    if (subNode !== null)\n                        this.parseSubNode(name, node, subNode);\n                }\n                node.propertyList = propertyList;\n                if (typeof id === 'number')\n                    node.id = id;\n                if (attrName !== '')\n                    node.attrName = attrName;\n                if (attrType !== '')\n                    node.attrType = attrType;\n                if (name !== '')\n                    node.name = name;\n                return node;\n            },\n            parseSubNode: function (name, node, subNode) {\n                if (subNode.singleProperty === true) {\n                    var value = subNode.propertyList[0];\n                    if (Array.isArray(value)) {\n                        node[subNode.name] = subNode;\n                        subNode.a = value;\n                    } else {\n                        node[subNode.name] = value;\n                    }\n                } else if (name === 'Connections' && subNode.name === 'C') {\n                    var array = [];\n                    subNode.propertyList.forEach(function (property, i) {\n                        if (i !== 0)\n                            array.push(property);\n                    });\n                    if (node.connections === undefined) {\n                        node.connections = [];\n                    }\n                    node.connections.push(array);\n                } else if (subNode.name === 'Properties70') {\n                    var keys = Object.keys(subNode);\n                    keys.forEach(function (key) {\n                        node[key] = subNode[key];\n                    });\n                } else if (name === 'Properties70' && subNode.name === 'P') {\n                    var innerPropName = subNode.propertyList[0];\n                    var innerPropType1 = subNode.propertyList[1];\n                    var innerPropType2 = subNode.propertyList[2];\n                    var innerPropFlag = subNode.propertyList[3];\n                    var innerPropValue;\n                    if (innerPropName.indexOf('Lcl ') === 0)\n                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1.indexOf('Lcl ') === 0)\n                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n                        innerPropValue = [\n                            subNode.propertyList[4],\n                            subNode.propertyList[5],\n                            subNode.propertyList[6]\n                        ];\n                    } else {\n                        innerPropValue = subNode.propertyList[4];\n                    }\n                    node[innerPropName] = {\n                        'type': innerPropType1,\n                        'type2': innerPropType2,\n                        'flag': innerPropFlag,\n                        'value': innerPropValue\n                    };\n                } else if (node[subNode.name] === undefined) {\n                    if (typeof subNode.id === 'number') {\n                        node[subNode.name] = {};\n                        node[subNode.name][subNode.id] = subNode;\n                    } else {\n                        node[subNode.name] = subNode;\n                    }\n                } else {\n                    if (subNode.name === 'PoseNode') {\n                        if (!Array.isArray(node[subNode.name])) {\n                            node[subNode.name] = [node[subNode.name]];\n                        }\n                        node[subNode.name].push(subNode);\n                    } else if (node[subNode.name][subNode.id] === undefined) {\n                        node[subNode.name][subNode.id] = subNode;\n                    }\n                }\n            },\n            parseProperty: function (reader) {\n                var type = reader.getString(1);\n                switch (type) {\n                case 'C':\n                    return reader.getBoolean();\n                case 'D':\n                    return reader.getFloat64();\n                case 'F':\n                    return reader.getFloat32();\n                case 'I':\n                    return reader.getInt32();\n                case 'L':\n                    return reader.getInt64();\n                case 'R':\n                    var length = reader.getUint32();\n                    return reader.getArrayBuffer(length);\n                case 'S':\n                    var length = reader.getUint32();\n                    return reader.getString(length);\n                case 'Y':\n                    return reader.getInt16();\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'f':\n                case 'i':\n                case 'l':\n                    var arrayLength = reader.getUint32();\n                    var encoding = reader.getUint32();\n                    var compressedLength = reader.getUint32();\n                    if (encoding === 0) {\n                        switch (type) {\n                        case 'b':\n                        case 'c':\n                            return reader.getBooleanArray(arrayLength);\n                        case 'd':\n                            return reader.getFloat64Array(arrayLength);\n                        case 'f':\n                            return reader.getFloat32Array(arrayLength);\n                        case 'i':\n                            return reader.getInt32Array(arrayLength);\n                        case 'l':\n                            return reader.getInt64Array(arrayLength);\n                        }\n                    }\n                    //if (typeof b.Zlib === 'undefined') {\n                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');\n                    //}\n                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n                    var reader2 = new BinaryReader(inflate.decompress().buffer);\n                    switch (type) {\n                    case 'b':\n                    case 'c':\n                        return reader2.getBooleanArray(arrayLength);\n                    case 'd':\n                        return reader2.getFloat64Array(arrayLength);\n                    case 'f':\n                        return reader2.getFloat32Array(arrayLength);\n                    case 'i':\n                        return reader2.getInt32Array(arrayLength);\n                    case 'l':\n                        return reader2.getInt64Array(arrayLength);\n                    }\n                default:\n                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n                }\n            }\n        };\n        function BinaryReader(buffer, littleEndian) {\n            this.dv = new DataView(buffer);\n            this.offset = 0;\n            this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n        }\n        BinaryReader.prototype = {\n            constructor: BinaryReader,\n            getOffset: function () {\n                return this.offset;\n            },\n            size: function () {\n                return this.dv.buffer.byteLength;\n            },\n            skip: function (length) {\n                this.offset += length;\n            },\n            getBoolean: function () {\n                return (this.getUint8() & 1) === 1;\n            },\n            getBooleanArray: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getBoolean());\n                }\n                return a;\n            },\n            getUint8: function () {\n                var value = this.dv.getUint8(this.offset);\n                this.offset += 1;\n                return value;\n            },\n            getInt16: function () {\n                var value = this.dv.getInt16(this.offset, this.littleEndian);\n                this.offset += 2;\n                return value;\n            },\n            getInt32: function () {\n                var value = this.dv.getInt32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt32());\n                }\n                return a;\n            },\n            getUint32: function () {\n                var value = this.dv.getUint32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                if (high & 2147483648) {\n                    high = ~high & 4294967295;\n                    low = ~low & 4294967295;\n                    if (low === 4294967295)\n                        high = high + 1 & 4294967295;\n                    low = low + 1 & 4294967295;\n                    return -(high * 4294967296 + low);\n                }\n                return high * 4294967296 + low;\n            },\n            getInt64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt64());\n                }\n                return a;\n            },\n            getUint64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                return high * 4294967296 + low;\n            },\n            getFloat32: function () {\n                var value = this.dv.getFloat32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getFloat32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat32());\n                }\n                return a;\n            },\n            getFloat64: function () {\n                var value = this.dv.getFloat64(this.offset, this.littleEndian);\n                this.offset += 8;\n                return value;\n            },\n            getFloat64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat64());\n                }\n                return a;\n            },\n            getArrayBuffer: function (size) {\n                var value = this.dv.buffer.slice(this.offset, this.offset + size);\n                this.offset += size;\n                return value;\n            },\n            getString: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a[i] = this.getUint8();\n                }\n                var nullByte = a.indexOf(0);\n                if (nullByte >= 0)\n                    a = a.slice(0, nullByte);\n                return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n            }\n        };\n        function FBXTree() {\n        }\n        FBXTree.prototype = {\n            constructor: FBXTree,\n            add: function (key, val) {\n                this[key] = val;\n            }\n        };\n        function isFbxFormatBinary(buffer) {\n            var CORRECT = 'Kaydara FBX Binary  \\0';\n            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n        }\n        function isFbxFormatASCII(text) {\n            var CORRECT = [\n                'K',\n                'a',\n                'y',\n                'd',\n                'a',\n                'r',\n                'a',\n                '\\\\',\n                'F',\n                'B',\n                'X',\n                '\\\\',\n                'B',\n                'i',\n                'n',\n                'a',\n                'r',\n                'y',\n                '\\\\',\n                '\\\\'\n            ];\n            var cursor = 0;\n            function read(offset) {\n                var result = text[offset - 1];\n                text = text.slice(cursor + offset);\n                cursor++;\n                return result;\n            }\n            for (var i = 0; i < CORRECT.length; ++i) {\n                var num = read(1);\n                if (num === CORRECT[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function getFbxVersion(text) {\n            var versionRegExp = /FBXVersion: (\\d+)/;\n            var match = text.match(versionRegExp);\n            if (match) {\n                var version = parseInt(match[1]);\n                return version;\n            }\n            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n        }\n        function convertFBXTimeToSeconds(time) {\n            return time / 46186158000;\n        }\n        var dataArray = [];\n        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n            var index;\n            switch (infoObject.mappingType) {\n            case 'ByPolygonVertex':\n                index = polygonVertexIndex;\n                break;\n            case 'ByPolygon':\n                index = polygonIndex;\n                break;\n            case 'ByVertice':\n                index = vertexIndex;\n                break;\n            case 'AllSame':\n                index = infoObject.indices[0];\n                break;\n            default:\n                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n            }\n            if (infoObject.referenceType === 'IndexToDirect')\n                index = infoObject.indices[index];\n            var from = index * infoObject.dataSize;\n            var to = from + infoObject.dataSize;\n            return slice(dataArray, infoObject.buffer, from, to);\n        }\n        var tempEuler = new THREE.Euler();\n        var tempVec = new THREE.Vector3();\n        function generateTransform(transformData) {\n            var lTranslationM = new THREE.Matrix4();\n            var lPreRotationM = new THREE.Matrix4();\n            var lRotationM = new THREE.Matrix4();\n            var lPostRotationM = new THREE.Matrix4();\n            var lScalingM = new THREE.Matrix4();\n            var lScalingPivotM = new THREE.Matrix4();\n            var lScalingOffsetM = new THREE.Matrix4();\n            var lRotationOffsetM = new THREE.Matrix4();\n            var lRotationPivotM = new THREE.Matrix4();\n            var lParentGX = new THREE.Matrix4();\n            var lGlobalT = new THREE.Matrix4();\n            var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n            if (transformData.translation)\n                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n            if (transformData.preRotation) {\n                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.rotation) {\n                var array = transformData.rotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.postRotation) {\n                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.scale)\n                lScalingM.scale(tempVec.fromArray(transformData.scale));\n            if (transformData.scalingOffset)\n                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n            if (transformData.scalingPivot)\n                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n            if (transformData.rotationOffset)\n                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n            if (transformData.rotationPivot)\n                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n            if (transformData.parentMatrixWorld)\n                lParentGX = transformData.parentMatrixWorld;\n            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\n            var lParentGRM = new THREE.Matrix4();\n            lParentGX.extractRotation(lParentGRM);\n            var lParentTM = new THREE.Matrix4();\n            var lLSM;\n            var lParentGSM;\n            var lParentGRSM;\n            lParentTM.copyPosition(lParentGX);\n            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\n            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\n            lLSM = lScalingM;\n            var lGlobalRS;\n            if (inheritType === 0) {\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n            } else if (inheritType === 1) {\n                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n            } else {\n                var lParentLSM = new THREE.Matrix4().copy(lScalingM);\n                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n            }\n            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));\n            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\n            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);\n            lGlobalT.copyPosition(lGlobalTranslation);\n            lTransform = lGlobalT.multiply(lGlobalRS);\n            return lTransform;\n        }\n        function getEulerOrder(order) {\n            order = order || 0;\n            var enums = [\n                'ZYX',\n                'YZX',\n                'XZY',\n                'ZXY',\n                'YXZ',\n                'XYZ'\n            ];\n            if (order === 6) {\n                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n                return enums[0];\n            }\n            return enums[order];\n        }\n        function parseNumberArray(value) {\n            var array = value.split(',').map(function (val) {\n                return parseFloat(val);\n            });\n            return array;\n        }\n        function convertArrayBufferToString(buffer, from, to) {\n            if (from === undefined)\n                from = 0;\n            if (to === undefined)\n                to = buffer.byteLength;\n            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n        }\n        function append(a, b) {\n            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n                a[j] = b[i];\n            }\n        }\n        function slice(a, b, from, to) {\n            for (var i = from, j = 0; i < to; i++, j++) {\n                a[j] = b[i];\n            }\n            return a;\n        }\n        function inject(a1, index, a2) {\n            return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n        }\n        return FBXLoader;\n    }();\n    return FBXLoader;\n});\ndefine('skylark-threejs-ex/loaders/GCodeLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GCodeLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.splitLayer = false;\n    };\n    GCodeLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: GCodeLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var self = this;\n            var loader = new THREE.FileLoader(self.manager);\n            loader.setPath(self.path);\n            loader.load(url, function (text) {\n                onLoad(self.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var state = {\n                x: 0,\n                y: 0,\n                z: 0,\n                e: 0,\n                f: 0,\n                extruding: false,\n                relative: false\n            };\n            var layers = [];\n            var currentLayer = undefined;\n            var pathMaterial = new THREE.LineBasicMaterial({ color: 16711680 });\n            pathMaterial.name = 'path';\n            var extrudingMaterial = new THREE.LineBasicMaterial({ color: 65280 });\n            extrudingMaterial.name = 'extruded';\n            function newLayer(line) {\n                currentLayer = {\n                    vertex: [],\n                    pathVertex: [],\n                    z: line.z\n                };\n                layers.push(currentLayer);\n            }\n            function addSegment(p1, p2) {\n                if (currentLayer === undefined) {\n                    newLayer(p1);\n                }\n                if (line.extruding) {\n                    currentLayer.vertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.vertex.push(p2.x, p2.y, p2.z);\n                } else {\n                    currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n                }\n            }\n            function delta(v1, v2) {\n                return state.relative ? v2 : v2 - v1;\n            }\n            function absolute(v1, v2) {\n                return state.relative ? v1 + v2 : v2;\n            }\n            var lines = data.replace(/;.+/g, '').split('\\n');\n            for (var i = 0; i < lines.length; i++) {\n                var tokens = lines[i].split(' ');\n                var cmd = tokens[0].toUpperCase();\n                var args = {};\n                tokens.splice(1).forEach(function (token) {\n                    if (token[0] !== undefined) {\n                        var key = token[0].toLowerCase();\n                        var value = parseFloat(token.substring(1));\n                        args[key] = value;\n                    }\n                });\n                if (cmd === 'G0' || cmd === 'G1') {\n                    var line = {\n                        x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n                        y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n                        z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n                        e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n                        f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n                    };\n                    if (delta(state.e, line.e) > 0) {\n                        line.extruding = delta(state.e, line.e) > 0;\n                        if (currentLayer == undefined || line.z != currentLayer.z) {\n                            newLayer(line);\n                        }\n                    }\n                    addSegment(state, line);\n                    state = line;\n                } else if (cmd === 'G2' || cmd === 'G3') {\n                } else if (cmd === 'G90') {\n                    state.relative = false;\n                } else if (cmd === 'G91') {\n                    state.relative = true;\n                } else if (cmd === 'G92') {\n                    var line = state;\n                    line.x = args.x !== undefined ? args.x : line.x;\n                    line.y = args.y !== undefined ? args.y : line.y;\n                    line.z = args.z !== undefined ? args.z : line.z;\n                    line.e = args.e !== undefined ? args.e : line.e;\n                    state = line;\n                } else {\n                }\n            }\n            function addObject(vertex, extruding) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertex, 3));\n                var segments = new THREE.LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n                segments.name = 'layer' + i;\n                object.add(segments);\n            }\n            var object = new THREE.Group();\n            object.name = 'gcode';\n            if (this.splitLayer) {\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    addObject(layer.vertex, true);\n                    addObject(layer.pathVertex, false);\n                }\n            } else {\n                var vertex = [], pathVertex = [];\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    vertex = vertex.concat(layer.vertex);\n                    pathVertex = pathVertex.concat(layer.pathVertex);\n                }\n                addObject(vertex, true);\n                addObject(pathVertex, false);\n            }\n            object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            return object;\n        }\n    });\n    return GCodeLoader;\n});\ndefine('skylark-threejs-ex/loaders/GLTFLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GLTFLoader = function () {\n        function GLTFLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.dracoLoader = null;\n            this.ddsLoader = null;\n        }\n        GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: GLTFLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var resourcePath;\n                if (this.resourcePath !== '') {\n                    resourcePath = this.resourcePath;\n                } else if (this.path !== '') {\n                    resourcePath = this.path;\n                } else {\n                    resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n                }\n                scope.manager.itemStart(url);\n                var _onError = function (e) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        console.error(e);\n                    }\n                    scope.manager.itemError(url);\n                    scope.manager.itemEnd(url);\n                };\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(this.path);\n                loader.setResponseType('arraybuffer');\n                if (scope.crossOrigin === 'use-credentials') {\n                    loader.setWithCredentials(true);\n                }\n                loader.load(url, function (data) {\n                    try {\n                        scope.parse(data, resourcePath, function (gltf) {\n                            onLoad(gltf);\n                            scope.manager.itemEnd(url);\n                        }, _onError);\n                    } catch (e) {\n                        _onError(e);\n                    }\n                }, onProgress, _onError);\n            },\n            setDRACOLoader: function (dracoLoader) {\n                this.dracoLoader = dracoLoader;\n                return this;\n            },\n            setDDSLoader: function (ddsLoader) {\n                this.ddsLoader = ddsLoader;\n                return this;\n            },\n            parse: function (data, path, onLoad, onError) {\n                var content;\n                var extensions = {};\n                if (typeof data === 'string') {\n                    content = data;\n                } else {\n                    var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n                    if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n                        try {\n                            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n                        } catch (error) {\n                            if (onError)\n                                onError(error);\n                            return;\n                        }\n                        content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n                    } else {\n                        content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                    }\n                }\n                var json = JSON.parse(content);\n                if (json.asset === undefined || json.asset.version[0] < 2) {\n                    if (onError)\n                        onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));\n                    return;\n                }\n                if (json.extensionsUsed) {\n                    for (var i = 0; i < json.extensionsUsed.length; ++i) {\n                        var extensionName = json.extensionsUsed[i];\n                        var extensionsRequired = json.extensionsRequired || [];\n                        switch (extensionName) {\n                        case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n                            extensions[extensionName] = new GLTFLightsExtension(json);\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:\n                            extensions[extensionName] = new GLTFMaterialsClearcoatExtension();\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_UNLIT:\n                            extensions[extensionName] = new GLTFMaterialsUnlitExtension();\n                            break;\n                        case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n                            extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n                            break;\n                        case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n                            extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);\n                            break;\n                        case EXTENSIONS.MSFT_TEXTURE_DDS:\n                            extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);\n                            break;\n                        case EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n                            extensions[extensionName] = new GLTFTextureTransformExtension();\n                            break;\n                        case EXTENSIONS.KHR_MESH_QUANTIZATION:\n                            extensions[extensionName] = new GLTFMeshQuantizationExtension();\n                            break;\n                        default:\n                            if (extensionsRequired.indexOf(extensionName) >= 0) {\n                                console.warn('THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".');\n                            }\n                        }\n                    }\n                }\n                var parser = new GLTFParser(json, extensions, {\n                    path: path || this.resourcePath || '',\n                    crossOrigin: this.crossOrigin,\n                    manager: this.manager\n                });\n                parser.parse(onLoad, onError);\n            }\n        });\n        function GLTFRegistry() {\n            var objects = {};\n            return {\n                get: function (key) {\n                    return objects[key];\n                },\n                add: function (key, object) {\n                    objects[key] = object;\n                },\n                remove: function (key) {\n                    delete objects[key];\n                },\n                removeAll: function () {\n                    objects = {};\n                }\n            };\n        }\n        var EXTENSIONS = {\n            KHR_BINARY_GLTF: 'KHR_binary_glTF',\n            KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n            KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n            KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n            KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n            KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n            KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n            MSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n        };\n        function GLTFTextureDDSExtension(ddsLoader) {\n            if (!ddsLoader) {\n                throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader');\n            }\n            this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n            this.ddsLoader = ddsLoader;\n        }\n        function GLTFLightsExtension(json) {\n            this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n            var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};\n            this.lightDefs = extension.lights || [];\n        }\n        GLTFLightsExtension.prototype.loadLight = function (lightIndex) {\n            var lightDef = this.lightDefs[lightIndex];\n            var lightNode;\n            var color = new THREE.Color(16777215);\n            if (lightDef.color !== undefined)\n                color.fromArray(lightDef.color);\n            var range = lightDef.range !== undefined ? lightDef.range : 0;\n            switch (lightDef.type) {\n            case 'directional':\n                lightNode = new THREE.DirectionalLight(color);\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            case 'point':\n                lightNode = new THREE.PointLight(color);\n                lightNode.distance = range;\n                break;\n            case 'spot':\n                lightNode = new THREE.SpotLight(color);\n                lightNode.distance = range;\n                lightDef.spot = lightDef.spot || {};\n                lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n                lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4;\n                lightNode.angle = lightDef.spot.outerConeAngle;\n                lightNode.penumbra = 1 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            default:\n                throw new Error('THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".');\n            }\n            lightNode.position.set(0, 0, 0);\n            lightNode.decay = 2;\n            if (lightDef.intensity !== undefined)\n                lightNode.intensity = lightDef.intensity;\n            lightNode.name = lightDef.name || 'light_' + lightIndex;\n            return Promise.resolve(lightNode);\n        };\n        function GLTFMaterialsUnlitExtension() {\n            this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n        }\n        GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n            return THREE.MeshBasicMaterial;\n        };\n        GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n            var pending = [];\n            materialParams.color = new THREE.Color(1, 1, 1);\n            materialParams.opacity = 1;\n            var metallicRoughness = materialDef.pbrMetallicRoughness;\n            if (metallicRoughness) {\n                if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                    var array = metallicRoughness.baseColorFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (metallicRoughness.baseColorTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n                }\n            }\n            return Promise.all(pending);\n        };\n        function GLTFMaterialsClearcoatExtension() {\n            this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n        }\n        GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {\n            return THREE.MeshPhysicalMaterial;\n        };\n        GLTFMaterialsClearcoatExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n            var pending = [];\n            var extension = materialDef.extensions[this.name];\n            if (extension.clearcoatFactor !== undefined) {\n                materialParams.clearcoat = extension.clearcoatFactor;\n            }\n            if (extension.clearcoatTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatMap', extension.clearcoatTexture));\n            }\n            if (extension.clearcoatRoughnessFactor !== undefined) {\n                materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n            }\n            if (extension.clearcoatRoughnessTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture));\n            }\n            if (extension.clearcoatNormalTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture));\n                if (extension.clearcoatNormalTexture.scale !== undefined) {\n                    var scale = extension.clearcoatNormalTexture.scale;\n                    materialParams.clearcoatNormalScale = new THREE.Vector2(scale, scale);\n                }\n            }\n            return Promise.all(pending);\n        };\n        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n        var BINARY_EXTENSION_HEADER_LENGTH = 12;\n        var BINARY_EXTENSION_CHUNK_TYPES = {\n            JSON: 1313821514,\n            BIN: 5130562\n        };\n        function GLTFBinaryExtension(data) {\n            this.name = EXTENSIONS.KHR_BINARY_GLTF;\n            this.content = null;\n            this.body = null;\n            var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n            this.header = {\n                magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n                version: headerView.getUint32(4, true),\n                length: headerView.getUint32(8, true)\n            };\n            if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {\n                throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');\n            } else if (this.header.version < 2) {\n                throw new Error('THREE.GLTFLoader: Legacy binary file detected.');\n            }\n            var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n            var chunkIndex = 0;\n            while (chunkIndex < chunkView.byteLength) {\n                var chunkLength = chunkView.getUint32(chunkIndex, true);\n                chunkIndex += 4;\n                var chunkType = chunkView.getUint32(chunkIndex, true);\n                chunkIndex += 4;\n                if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n                    var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);\n                    this.content = THREE.LoaderUtils.decodeText(contentArray);\n                } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n                    this.body = data.slice(byteOffset, byteOffset + chunkLength);\n                }\n                chunkIndex += chunkLength;\n            }\n            if (this.content === null) {\n                throw new Error('THREE.GLTFLoader: JSON content not found.');\n            }\n        }\n        function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n            if (!dracoLoader) {\n                throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');\n            }\n            this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n            this.json = json;\n            this.dracoLoader = dracoLoader;\n            this.dracoLoader.preload();\n        }\n        GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {\n            var json = this.json;\n            var dracoLoader = this.dracoLoader;\n            var bufferViewIndex = primitive.extensions[this.name].bufferView;\n            var gltfAttributeMap = primitive.extensions[this.name].attributes;\n            var threeAttributeMap = {};\n            var attributeNormalizedMap = {};\n            var attributeTypeMap = {};\n            for (var attributeName in gltfAttributeMap) {\n                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n                threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];\n            }\n            for (attributeName in primitive.attributes) {\n                var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n                if (gltfAttributeMap[attributeName] !== undefined) {\n                    var accessorDef = json.accessors[primitive.attributes[attributeName]];\n                    var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                    attributeTypeMap[threeAttributeName] = componentType;\n                    attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;\n                }\n            }\n            return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {\n                return new Promise(function (resolve) {\n                    dracoLoader.decodeDracoFile(bufferView, function (geometry) {\n                        for (var attributeName in geometry.attributes) {\n                            var attribute = geometry.attributes[attributeName];\n                            var normalized = attributeNormalizedMap[attributeName];\n                            if (normalized !== undefined)\n                                attribute.normalized = normalized;\n                        }\n                        resolve(geometry);\n                    }, threeAttributeMap, attributeTypeMap);\n                });\n            });\n        };\n        function GLTFTextureTransformExtension() {\n            this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n        }\n        GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {\n            texture = texture.clone();\n            if (transform.offset !== undefined) {\n                texture.offset.fromArray(transform.offset);\n            }\n            if (transform.rotation !== undefined) {\n                texture.rotation = transform.rotation;\n            }\n            if (transform.scale !== undefined) {\n                texture.repeat.fromArray(transform.scale);\n            }\n            if (transform.texCoord !== undefined) {\n                console.warn('THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.');\n            }\n            texture.needsUpdate = true;\n            return texture;\n        };\n        function GLTFMeshStandardSGMaterial(params) {\n            THREE.MeshStandardMaterial.call(this);\n            this.isGLTFSpecularGlossinessMaterial = true;\n            var specularMapParsFragmentChunk = [\n                '#ifdef USE_SPECULARMAP',\n                '\\tuniform sampler2D specularMap;',\n                '#endif'\n            ].join('\\n');\n            var glossinessMapParsFragmentChunk = [\n                '#ifdef USE_GLOSSINESSMAP',\n                '\\tuniform sampler2D glossinessMap;',\n                '#endif'\n            ].join('\\n');\n            var specularMapFragmentChunk = [\n                'vec3 specularFactor = specular;',\n                '#ifdef USE_SPECULARMAP',\n                '\\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n                '\\ttexelSpecular = sRGBToLinear( texelSpecular );',\n                '\\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n                '\\tspecularFactor *= texelSpecular.rgb;',\n                '#endif'\n            ].join('\\n');\n            var glossinessMapFragmentChunk = [\n                'float glossinessFactor = glossiness;',\n                '#ifdef USE_GLOSSINESSMAP',\n                '\\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n                '\\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n                '\\tglossinessFactor *= texelGlossiness.a;',\n                '#endif'\n            ].join('\\n');\n            var lightPhysicalFragmentChunk = [\n                'PhysicalMaterial material;',\n                'material.diffuseColor = diffuseColor.rgb;',\n                'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n                'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n                'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',\n                'material.specularRoughness += geometryRoughness;',\n                'material.specularRoughness = min( material.specularRoughness, 1.0 );',\n                'material.specularColor = specularFactor.rgb;'\n            ].join('\\n');\n            var uniforms = {\n                specular: { value: new THREE.Color().setHex(16777215) },\n                glossiness: { value: 1 },\n                specularMap: { value: null },\n                glossinessMap: { value: null }\n            };\n            this._extraUniforms = uniforms;\n            this.onBeforeCompile = function (shader) {\n                for (var uniformName in uniforms) {\n                    shader.uniforms[uniformName] = uniforms[uniformName];\n                }\n                shader.fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;');\n                shader.fragmentShader = shader.fragmentShader.replace('uniform float metalness;', 'uniform float glossiness;');\n                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_fragment>', specularMapFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk);\n                shader.fragmentShader = shader.fragmentShader.replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\n            };\n            Object.defineProperties(this, {\n                specular: {\n                    get: function () {\n                        return uniforms.specular.value;\n                    },\n                    set: function (v) {\n                        uniforms.specular.value = v;\n                    }\n                },\n                specularMap: {\n                    get: function () {\n                        return uniforms.specularMap.value;\n                    },\n                    set: function (v) {\n                        uniforms.specularMap.value = v;\n                    }\n                },\n                glossiness: {\n                    get: function () {\n                        return uniforms.glossiness.value;\n                    },\n                    set: function (v) {\n                        uniforms.glossiness.value = v;\n                    }\n                },\n                glossinessMap: {\n                    get: function () {\n                        return uniforms.glossinessMap.value;\n                    },\n                    set: function (v) {\n                        uniforms.glossinessMap.value = v;\n                        if (v) {\n                            this.defines.USE_GLOSSINESSMAP = '';\n                            this.defines.USE_ROUGHNESSMAP = '';\n                        } else {\n                            delete this.defines.USE_ROUGHNESSMAP;\n                            delete this.defines.USE_GLOSSINESSMAP;\n                        }\n                    }\n                }\n            });\n            delete this.metalness;\n            delete this.roughness;\n            delete this.metalnessMap;\n            delete this.roughnessMap;\n            this.setValues(params);\n        }\n        GLTFMeshStandardSGMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);\n        GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;\n        GLTFMeshStandardSGMaterial.prototype.copy = function (source) {\n            THREE.MeshStandardMaterial.prototype.copy.call(this, source);\n            this.specularMap = source.specularMap;\n            this.specular.copy(source.specular);\n            this.glossinessMap = source.glossinessMap;\n            this.glossiness = source.glossiness;\n            delete this.metalness;\n            delete this.roughness;\n            delete this.metalnessMap;\n            delete this.roughnessMap;\n            return this;\n        };\n        function GLTFMaterialsPbrSpecularGlossinessExtension() {\n            return {\n                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n                specularGlossinessParams: [\n                    'color',\n                    'map',\n                    'lightMap',\n                    'lightMapIntensity',\n                    'aoMap',\n                    'aoMapIntensity',\n                    'emissive',\n                    'emissiveIntensity',\n                    'emissiveMap',\n                    'bumpMap',\n                    'bumpScale',\n                    'normalMap',\n                    'normalMapType',\n                    'displacementMap',\n                    'displacementScale',\n                    'displacementBias',\n                    'specularMap',\n                    'specular',\n                    'glossinessMap',\n                    'glossiness',\n                    'alphaMap',\n                    'envMap',\n                    'envMapIntensity',\n                    'refractionRatio'\n                ],\n                getMaterialType: function () {\n                    return GLTFMeshStandardSGMaterial;\n                },\n                extendParams: function (materialParams, materialDef, parser) {\n                    var pbrSpecularGlossiness = materialDef.extensions[this.name];\n                    materialParams.color = new THREE.Color(1, 1, 1);\n                    materialParams.opacity = 1;\n                    var pending = [];\n                    if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n                        var array = pbrSpecularGlossiness.diffuseFactor;\n                        materialParams.color.fromArray(array);\n                        materialParams.opacity = array[3];\n                    }\n                    if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\n                        pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));\n                    }\n                    materialParams.emissive = new THREE.Color(0, 0, 0);\n                    materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1;\n                    materialParams.specular = new THREE.Color(1, 1, 1);\n                    if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {\n                        materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n                    }\n                    if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n                        var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n                        pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));\n                        pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));\n                    }\n                    return Promise.all(pending);\n                },\n                createMaterial: function (materialParams) {\n                    var material = new GLTFMeshStandardSGMaterial(materialParams);\n                    material.fog = true;\n                    material.color = materialParams.color;\n                    material.map = materialParams.map === undefined ? null : materialParams.map;\n                    material.lightMap = null;\n                    material.lightMapIntensity = 1;\n                    material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;\n                    material.aoMapIntensity = 1;\n                    material.emissive = materialParams.emissive;\n                    material.emissiveIntensity = 1;\n                    material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;\n                    material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;\n                    material.bumpScale = 1;\n                    material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;\n                    material.normalMapType = THREE.TangentSpaceNormalMap;\n                    if (materialParams.normalScale)\n                        material.normalScale = materialParams.normalScale;\n                    material.displacementMap = null;\n                    material.displacementScale = 1;\n                    material.displacementBias = 0;\n                    material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;\n                    material.specular = materialParams.specular;\n                    material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;\n                    material.glossiness = materialParams.glossiness;\n                    material.alphaMap = null;\n                    material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;\n                    material.envMapIntensity = 1;\n                    material.refractionRatio = 0.98;\n                    return material;\n                }\n            };\n        }\n        function GLTFMeshQuantizationExtension() {\n            this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n        }\n        function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n            THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n        }\n        GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);\n        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n        GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {\n            var result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;\n            for (var i = 0; i !== valueSize; i++) {\n                result[i] = values[offset + i];\n            }\n            return result;\n        };\n        GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n        GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n        GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {\n            var result = this.resultBuffer;\n            var values = this.sampleValues;\n            var stride = this.valueSize;\n            var stride2 = stride * 2;\n            var stride3 = stride * 3;\n            var td = t1 - t0;\n            var p = (t - t0) / td;\n            var pp = p * p;\n            var ppp = pp * p;\n            var offset1 = i1 * stride3;\n            var offset0 = offset1 - stride3;\n            var s2 = -2 * ppp + 3 * pp;\n            var s3 = ppp - pp;\n            var s0 = 1 - s2;\n            var s1 = s3 - pp + p;\n            for (var i = 0; i !== stride; i++) {\n                var p0 = values[offset0 + i + stride];\n                var m0 = values[offset0 + i + stride2] * td;\n                var p1 = values[offset1 + i + stride];\n                var m1 = values[offset1 + i] * td;\n                result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n            }\n            return result;\n        };\n        var WEBGL_CONSTANTS = {\n            FLOAT: 5126,\n            FLOAT_MAT3: 35675,\n            FLOAT_MAT4: 35676,\n            FLOAT_VEC2: 35664,\n            FLOAT_VEC3: 35665,\n            FLOAT_VEC4: 35666,\n            LINEAR: 9729,\n            REPEAT: 10497,\n            SAMPLER_2D: 35678,\n            POINTS: 0,\n            LINES: 1,\n            LINE_LOOP: 2,\n            LINE_STRIP: 3,\n            TRIANGLES: 4,\n            TRIANGLE_STRIP: 5,\n            TRIANGLE_FAN: 6,\n            UNSIGNED_BYTE: 5121,\n            UNSIGNED_SHORT: 5123\n        };\n        var WEBGL_COMPONENT_TYPES = {\n            5120: Int8Array,\n            5121: Uint8Array,\n            5122: Int16Array,\n            5123: Uint16Array,\n            5125: Uint32Array,\n            5126: Float32Array\n        };\n        var WEBGL_FILTERS = {\n            9728: THREE.NearestFilter,\n            9729: THREE.LinearFilter,\n            9984: THREE.NearestMipmapNearestFilter,\n            9985: THREE.LinearMipmapNearestFilter,\n            9986: THREE.NearestMipmapLinearFilter,\n            9987: THREE.LinearMipmapLinearFilter\n        };\n        var WEBGL_WRAPPINGS = {\n            33071: THREE.ClampToEdgeWrapping,\n            33648: THREE.MirroredRepeatWrapping,\n            10497: THREE.RepeatWrapping\n        };\n        var WEBGL_TYPE_SIZES = {\n            'SCALAR': 1,\n            'VEC2': 2,\n            'VEC3': 3,\n            'VEC4': 4,\n            'MAT2': 4,\n            'MAT3': 9,\n            'MAT4': 16\n        };\n        var ATTRIBUTES = {\n            POSITION: 'position',\n            NORMAL: 'normal',\n            TANGENT: 'tangent',\n            TEXCOORD_0: 'uv',\n            TEXCOORD_1: 'uv2',\n            COLOR_0: 'color',\n            WEIGHTS_0: 'skinWeight',\n            JOINTS_0: 'skinIndex'\n        };\n        var PATH_PROPERTIES = {\n            scale: 'scale',\n            translation: 'position',\n            rotation: 'quaternion',\n            weights: 'morphTargetInfluences'\n        };\n        var INTERPOLATION = {\n            CUBICSPLINE: undefined,\n            LINEAR: THREE.InterpolateLinear,\n            STEP: THREE.InterpolateDiscrete\n        };\n        var ALPHA_MODES = {\n            OPAQUE: 'OPAQUE',\n            MASK: 'MASK',\n            BLEND: 'BLEND'\n        };\n        var MIME_TYPE_FORMATS = {\n            'image/png': THREE.RGBAFormat,\n            'image/jpeg': THREE.RGBFormat\n        };\n        function resolveURL(url, path) {\n            if (typeof url !== 'string' || url === '')\n                return '';\n            if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n                path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n            }\n            if (/^(https?:)?\\/\\//i.test(url))\n                return url;\n            if (/^data:.*,.*$/i.test(url))\n                return url;\n            if (/^blob:.*$/i.test(url))\n                return url;\n            return path + url;\n        }\n        function createDefaultMaterial(cache) {\n            if (cache['DefaultMaterial'] === undefined) {\n                cache['DefaultMaterial'] = new THREE.MeshStandardMaterial({\n                    color: 16777215,\n                    emissive: 0,\n                    metalness: 1,\n                    roughness: 1,\n                    transparent: false,\n                    depthTest: true,\n                    side: THREE.FrontSide\n                });\n            }\n            return cache['DefaultMaterial'];\n        }\n        function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n            for (var name in objectDef.extensions) {\n                if (knownExtensions[name] === undefined) {\n                    object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n                    object.userData.gltfExtensions[name] = objectDef.extensions[name];\n                }\n            }\n        }\n        function assignExtrasToUserData(object, gltfDef) {\n            if (gltfDef.extras !== undefined) {\n                if (typeof gltfDef.extras === 'object') {\n                    Object.assign(object.userData, gltfDef.extras);\n                } else {\n                    console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);\n                }\n            }\n        }\n        function addMorphTargets(geometry, targets, parser) {\n            var hasMorphPosition = false;\n            var hasMorphNormal = false;\n            for (var i = 0, il = targets.length; i < il; i++) {\n                var target = targets[i];\n                if (target.POSITION !== undefined)\n                    hasMorphPosition = true;\n                if (target.NORMAL !== undefined)\n                    hasMorphNormal = true;\n                if (hasMorphPosition && hasMorphNormal)\n                    break;\n            }\n            if (!hasMorphPosition && !hasMorphNormal)\n                return Promise.resolve(geometry);\n            var pendingPositionAccessors = [];\n            var pendingNormalAccessors = [];\n            for (var i = 0, il = targets.length; i < il; i++) {\n                var target = targets[i];\n                if (hasMorphPosition) {\n                    var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;\n                    pendingPositionAccessors.push(pendingAccessor);\n                }\n                if (hasMorphNormal) {\n                    var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;\n                    pendingNormalAccessors.push(pendingAccessor);\n                }\n            }\n            return Promise.all([\n                Promise.all(pendingPositionAccessors),\n                Promise.all(pendingNormalAccessors)\n            ]).then(function (accessors) {\n                var morphPositions = accessors[0];\n                var morphNormals = accessors[1];\n                if (hasMorphPosition)\n                    geometry.morphAttributes.position = morphPositions;\n                if (hasMorphNormal)\n                    geometry.morphAttributes.normal = morphNormals;\n                geometry.morphTargetsRelative = true;\n                return geometry;\n            });\n        }\n        function updateMorphTargets(mesh, meshDef) {\n            mesh.updateMorphTargets();\n            if (meshDef.weights !== undefined) {\n                for (var i = 0, il = meshDef.weights.length; i < il; i++) {\n                    mesh.morphTargetInfluences[i] = meshDef.weights[i];\n                }\n            }\n            if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n                var targetNames = meshDef.extras.targetNames;\n                if (mesh.morphTargetInfluences.length === targetNames.length) {\n                    mesh.morphTargetDictionary = {};\n                    for (var i = 0, il = targetNames.length; i < il; i++) {\n                        mesh.morphTargetDictionary[targetNames[i]] = i;\n                    }\n                } else {\n                    console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');\n                }\n            }\n        }\n        function createPrimitiveKey(primitiveDef) {\n            var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];\n            var geometryKey;\n            if (dracoExtension) {\n                geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);\n            } else {\n                geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;\n            }\n            return geometryKey;\n        }\n        function createAttributesKey(attributes) {\n            var attributesKey = '';\n            var keys = Object.keys(attributes).sort();\n            for (var i = 0, il = keys.length; i < il; i++) {\n                attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';\n            }\n            return attributesKey;\n        }\n        function GLTFParser(json, extensions, options) {\n            this.json = json || {};\n            this.extensions = extensions || {};\n            this.options = options || {};\n            this.cache = new GLTFRegistry();\n            this.primitiveCache = {};\n            this.textureLoader = new THREE.TextureLoader(this.options.manager);\n            this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n            this.fileLoader = new THREE.FileLoader(this.options.manager);\n            this.fileLoader.setResponseType('arraybuffer');\n            if (this.options.crossOrigin === 'use-credentials') {\n                this.fileLoader.setWithCredentials(true);\n            }\n        }\n        GLTFParser.prototype.parse = function (onLoad, onError) {\n            var parser = this;\n            var json = this.json;\n            var extensions = this.extensions;\n            this.cache.removeAll();\n            this.markDefs();\n            Promise.all([\n                this.getDependencies('scene'),\n                this.getDependencies('animation'),\n                this.getDependencies('camera')\n            ]).then(function (dependencies) {\n                var result = {\n                    scene: dependencies[0][json.scene || 0],\n                    scenes: dependencies[0],\n                    animations: dependencies[1],\n                    cameras: dependencies[2],\n                    asset: json.asset,\n                    parser: parser,\n                    userData: {}\n                };\n                addUnknownExtensionsToUserData(extensions, result, json);\n                assignExtrasToUserData(result, json);\n                onLoad(result);\n            }).catch(onError);\n        };\n        GLTFParser.prototype.markDefs = function () {\n            var nodeDefs = this.json.nodes || [];\n            var skinDefs = this.json.skins || [];\n            var meshDefs = this.json.meshes || [];\n            var meshReferences = {};\n            var meshUses = {};\n            for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {\n                var joints = skinDefs[skinIndex].joints;\n                for (var i = 0, il = joints.length; i < il; i++) {\n                    nodeDefs[joints[i]].isBone = true;\n                }\n            }\n            for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {\n                var nodeDef = nodeDefs[nodeIndex];\n                if (nodeDef.mesh !== undefined) {\n                    if (meshReferences[nodeDef.mesh] === undefined) {\n                        meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n                    }\n                    meshReferences[nodeDef.mesh]++;\n                    if (nodeDef.skin !== undefined) {\n                        meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n                    }\n                }\n            }\n            this.json.meshReferences = meshReferences;\n            this.json.meshUses = meshUses;\n        };\n        GLTFParser.prototype.getDependency = function (type, index) {\n            var cacheKey = type + ':' + index;\n            var dependency = this.cache.get(cacheKey);\n            if (!dependency) {\n                switch (type) {\n                case 'scene':\n                    dependency = this.loadScene(index);\n                    break;\n                case 'node':\n                    dependency = this.loadNode(index);\n                    break;\n                case 'mesh':\n                    dependency = this.loadMesh(index);\n                    break;\n                case 'accessor':\n                    dependency = this.loadAccessor(index);\n                    break;\n                case 'bufferView':\n                    dependency = this.loadBufferView(index);\n                    break;\n                case 'buffer':\n                    dependency = this.loadBuffer(index);\n                    break;\n                case 'material':\n                    dependency = this.loadMaterial(index);\n                    break;\n                case 'texture':\n                    dependency = this.loadTexture(index);\n                    break;\n                case 'skin':\n                    dependency = this.loadSkin(index);\n                    break;\n                case 'animation':\n                    dependency = this.loadAnimation(index);\n                    break;\n                case 'camera':\n                    dependency = this.loadCamera(index);\n                    break;\n                case 'light':\n                    dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);\n                    break;\n                default:\n                    throw new Error('Unknown type: ' + type);\n                }\n                this.cache.add(cacheKey, dependency);\n            }\n            return dependency;\n        };\n        GLTFParser.prototype.getDependencies = function (type) {\n            var dependencies = this.cache.get(type);\n            if (!dependencies) {\n                var parser = this;\n                var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];\n                dependencies = Promise.all(defs.map(function (def, index) {\n                    return parser.getDependency(type, index);\n                }));\n                this.cache.add(type, dependencies);\n            }\n            return dependencies;\n        };\n        GLTFParser.prototype.loadBuffer = function (bufferIndex) {\n            var bufferDef = this.json.buffers[bufferIndex];\n            var loader = this.fileLoader;\n            if (bufferDef.type && bufferDef.type !== 'arraybuffer') {\n                throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');\n            }\n            if (bufferDef.uri === undefined && bufferIndex === 0) {\n                return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n            }\n            var options = this.options;\n            return new Promise(function (resolve, reject) {\n                loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {\n                    reject(new Error('THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'));\n                });\n            });\n        };\n        GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {\n            var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n            return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {\n                var byteLength = bufferViewDef.byteLength || 0;\n                var byteOffset = bufferViewDef.byteOffset || 0;\n                return buffer.slice(byteOffset, byteOffset + byteLength);\n            });\n        };\n        GLTFParser.prototype.loadAccessor = function (accessorIndex) {\n            var parser = this;\n            var json = this.json;\n            var accessorDef = this.json.accessors[accessorIndex];\n            if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {\n                return Promise.resolve(null);\n            }\n            var pendingBufferViews = [];\n            if (accessorDef.bufferView !== undefined) {\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));\n            } else {\n                pendingBufferViews.push(null);\n            }\n            if (accessorDef.sparse !== undefined) {\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));\n                pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));\n            }\n            return Promise.all(pendingBufferViews).then(function (bufferViews) {\n                var bufferView = bufferViews[0];\n                var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n                var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n                var itemBytes = elementBytes * itemSize;\n                var byteOffset = accessorDef.byteOffset || 0;\n                var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;\n                var normalized = accessorDef.normalized === true;\n                var array, bufferAttribute;\n                if (byteStride && byteStride !== itemBytes) {\n                    var ibSlice = Math.floor(byteOffset / byteStride);\n                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n                    var ib = parser.cache.get(ibCacheKey);\n                    if (!ib) {\n                        array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);\n                        ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n                        parser.cache.add(ibCacheKey, ib);\n                    }\n                    bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);\n                } else {\n                    if (bufferView === null) {\n                        array = new TypedArray(accessorDef.count * itemSize);\n                    } else {\n                        array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);\n                    }\n                    bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);\n                }\n                if (accessorDef.sparse !== undefined) {\n                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n                    var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);\n                    var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);\n                    if (bufferView !== null) {\n                        bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\n                    }\n                    for (var i = 0, il = sparseIndices.length; i < il; i++) {\n                        var index = sparseIndices[i];\n                        bufferAttribute.setX(index, sparseValues[i * itemSize]);\n                        if (itemSize >= 2)\n                            bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n                        if (itemSize >= 3)\n                            bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n                        if (itemSize >= 4)\n                            bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n                        if (itemSize >= 5)\n                            throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');\n                    }\n                }\n                return bufferAttribute;\n            });\n        };\n        GLTFParser.prototype.loadTexture = function (textureIndex) {\n            var parser = this;\n            var json = this.json;\n            var options = this.options;\n            var textureLoader = this.textureLoader;\n            var URL = self.URL || self.webkitURL;\n            var textureDef = json.textures[textureIndex];\n            var textureExtensions = textureDef.extensions || {};\n            var source;\n            if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {\n                source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n            } else {\n                source = json.images[textureDef.source];\n            }\n            var sourceURI = source.uri;\n            var isObjectURL = false;\n            if (source.bufferView !== undefined) {\n                sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {\n                    isObjectURL = true;\n                    var blob = new Blob([bufferView], { type: source.mimeType });\n                    sourceURI = URL.createObjectURL(blob);\n                    return sourceURI;\n                });\n            }\n            return Promise.resolve(sourceURI).then(function (sourceURI) {\n                var loader = options.manager.getHandler(sourceURI);\n                if (!loader) {\n                    loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;\n                }\n                return new Promise(function (resolve, reject) {\n                    loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);\n                });\n            }).then(function (texture) {\n                if (isObjectURL === true) {\n                    URL.revokeObjectURL(sourceURI);\n                }\n                texture.flipY = false;\n                if (textureDef.name)\n                    texture.name = textureDef.name;\n                if (source.mimeType in MIME_TYPE_FORMATS) {\n                    texture.format = MIME_TYPE_FORMATS[source.mimeType];\n                }\n                var samplers = json.samplers || {};\n                var sampler = samplers[textureDef.sampler] || {};\n                texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n                texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;\n                texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n                texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n                return texture;\n            });\n        };\n        GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {\n            var parser = this;\n            return this.getDependency('texture', mapDef.index).then(function (texture) {\n                if (!texture.isCompressedTexture) {\n                    switch (mapName) {\n                    case 'aoMap':\n                    case 'emissiveMap':\n                    case 'metalnessMap':\n                    case 'normalMap':\n                    case 'roughnessMap':\n                        texture.format = THREE.RGBFormat;\n                        break;\n                    }\n                }\n                if (mapDef.texCoord !== undefined && mapDef.texCoord != 0 && !(mapName === 'aoMap' && mapDef.texCoord == 1)) {\n                    console.warn('THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.');\n                }\n                if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {\n                    var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\n                    if (transform) {\n                        texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);\n                    }\n                }\n                materialParams[mapName] = texture;\n            });\n        };\n        GLTFParser.prototype.assignFinalMaterial = function (mesh) {\n            var geometry = mesh.geometry;\n            var material = mesh.material;\n            var useVertexTangents = geometry.attributes.tangent !== undefined;\n            var useVertexColors = geometry.attributes.color !== undefined;\n            var useFlatShading = geometry.attributes.normal === undefined;\n            var useSkinning = mesh.isSkinnedMesh === true;\n            var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;\n            var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n            if (mesh.isPoints) {\n                var cacheKey = 'PointsMaterial:' + material.uuid;\n                var pointsMaterial = this.cache.get(cacheKey);\n                if (!pointsMaterial) {\n                    pointsMaterial = new THREE.PointsMaterial();\n                    THREE.Material.prototype.copy.call(pointsMaterial, material);\n                    pointsMaterial.color.copy(material.color);\n                    pointsMaterial.map = material.map;\n                    pointsMaterial.sizeAttenuation = false;\n                    this.cache.add(cacheKey, pointsMaterial);\n                }\n                material = pointsMaterial;\n            } else if (mesh.isLine) {\n                var cacheKey = 'LineBasicMaterial:' + material.uuid;\n                var lineMaterial = this.cache.get(cacheKey);\n                if (!lineMaterial) {\n                    lineMaterial = new THREE.LineBasicMaterial();\n                    THREE.Material.prototype.copy.call(lineMaterial, material);\n                    lineMaterial.color.copy(material.color);\n                    this.cache.add(cacheKey, lineMaterial);\n                }\n                material = lineMaterial;\n            }\n            if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {\n                var cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n                if (material.isGLTFSpecularGlossinessMaterial)\n                    cacheKey += 'specular-glossiness:';\n                if (useSkinning)\n                    cacheKey += 'skinning:';\n                if (useVertexTangents)\n                    cacheKey += 'vertex-tangents:';\n                if (useVertexColors)\n                    cacheKey += 'vertex-colors:';\n                if (useFlatShading)\n                    cacheKey += 'flat-shading:';\n                if (useMorphTargets)\n                    cacheKey += 'morph-targets:';\n                if (useMorphNormals)\n                    cacheKey += 'morph-normals:';\n                var cachedMaterial = this.cache.get(cacheKey);\n                if (!cachedMaterial) {\n                    cachedMaterial = material.clone();\n                    if (useSkinning)\n                        cachedMaterial.skinning = true;\n                    if (useVertexTangents)\n                        cachedMaterial.vertexTangents = true;\n                    if (useVertexColors)\n                        cachedMaterial.vertexColors = true;\n                    if (useFlatShading)\n                        cachedMaterial.flatShading = true;\n                    if (useMorphTargets)\n                        cachedMaterial.morphTargets = true;\n                    if (useMorphNormals)\n                        cachedMaterial.morphNormals = true;\n                    this.cache.add(cacheKey, cachedMaterial);\n                }\n                material = cachedMaterial;\n            }\n            if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {\n                geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));\n            }\n            if (material.normalScale && !useVertexTangents) {\n                material.normalScale.y = -material.normalScale.y;\n            }\n            if (material.clearcoatNormalScale && !useVertexTangents) {\n                material.clearcoatNormalScale.y = -material.clearcoatNormalScale.y;\n            }\n            mesh.material = material;\n        };\n        GLTFParser.prototype.loadMaterial = function (materialIndex) {\n            var parser = this;\n            var json = this.json;\n            var extensions = this.extensions;\n            var materialDef = json.materials[materialIndex];\n            var materialType;\n            var materialParams = {};\n            var materialExtensions = materialDef.extensions || {};\n            var pending = [];\n            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n                var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n                materialType = sgExtension.getMaterialType();\n                pending.push(sgExtension.extendParams(materialParams, materialDef, parser));\n            } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n                var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n                materialType = kmuExtension.getMaterialType();\n                pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));\n            } else {\n                materialType = THREE.MeshStandardMaterial;\n                var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n                materialParams.color = new THREE.Color(1, 1, 1);\n                materialParams.opacity = 1;\n                if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                    var array = metallicRoughness.baseColorFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (metallicRoughness.baseColorTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n                }\n                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1;\n                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1;\n                if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n                    pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));\n                    pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));\n                }\n            }\n            if (materialDef.doubleSided === true) {\n                materialParams.side = THREE.DoubleSide;\n            }\n            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n            if (alphaMode === ALPHA_MODES.BLEND) {\n                materialParams.transparent = true;\n                materialParams.depthWrite = false;\n            } else {\n                materialParams.transparent = false;\n                if (alphaMode === ALPHA_MODES.MASK) {\n                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n                }\n            }\n            if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));\n                materialParams.normalScale = new THREE.Vector2(1, 1);\n                if (materialDef.normalTexture.scale !== undefined) {\n                    materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);\n                }\n            }\n            if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));\n                if (materialDef.occlusionTexture.strength !== undefined) {\n                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n                }\n            }\n            if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);\n            }\n            if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n                pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));\n            }\n            if (materialExtensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {\n                var clearcoatExtension = extensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT];\n                materialType = clearcoatExtension.getMaterialType();\n                pending.push(clearcoatExtension.extendParams(materialParams, { extensions: materialExtensions }, parser));\n            }\n            return Promise.all(pending).then(function () {\n                var material;\n                if (materialType === GLTFMeshStandardSGMaterial) {\n                    material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);\n                } else {\n                    material = new materialType(materialParams);\n                }\n                if (materialDef.name)\n                    material.name = materialDef.name;\n                if (material.map)\n                    material.map.encoding = THREE.sRGBEncoding;\n                if (material.emissiveMap)\n                    material.emissiveMap.encoding = THREE.sRGBEncoding;\n                assignExtrasToUserData(material, materialDef);\n                if (materialDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, material, materialDef);\n                return material;\n            });\n        };\n        function computeBounds(geometry, primitiveDef, parser) {\n            var attributes = primitiveDef.attributes;\n            var box = new THREE.Box3();\n            if (attributes.POSITION !== undefined) {\n                var accessor = parser.json.accessors[attributes.POSITION];\n                var min = accessor.min;\n                var max = accessor.max;\n                if (min !== undefined && max !== undefined) {\n                    box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));\n                } else {\n                    console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                    return;\n                }\n            } else {\n                return;\n            }\n            var targets = primitiveDef.targets;\n            if (targets !== undefined) {\n                var maxDisplacement = new THREE.Vector3();\n                var vector = new THREE.Vector3();\n                for (var i = 0, il = targets.length; i < il; i++) {\n                    var target = targets[i];\n                    if (target.POSITION !== undefined) {\n                        var accessor = parser.json.accessors[target.POSITION];\n                        var min = accessor.min;\n                        var max = accessor.max;\n                        if (min !== undefined && max !== undefined) {\n                            vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));\n                            vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));\n                            vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));\n                            maxDisplacement.max(vector);\n                        } else {\n                            console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                        }\n                    }\n                }\n                box.expandByVector(maxDisplacement);\n            }\n            geometry.boundingBox = box;\n            var sphere = new THREE.Sphere();\n            box.getCenter(sphere.center);\n            sphere.radius = box.min.distanceTo(box.max) / 2;\n            geometry.boundingSphere = sphere;\n        }\n        function addPrimitiveAttributes(geometry, primitiveDef, parser) {\n            var attributes = primitiveDef.attributes;\n            var pending = [];\n            function assignAttributeAccessor(accessorIndex, attributeName) {\n                return parser.getDependency('accessor', accessorIndex).then(function (accessor) {\n                    geometry.setAttribute(attributeName, accessor);\n                });\n            }\n            for (var gltfAttributeName in attributes) {\n                var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();\n                if (threeAttributeName in geometry.attributes)\n                    continue;\n                pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));\n            }\n            if (primitiveDef.indices !== undefined && !geometry.index) {\n                var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {\n                    geometry.setIndex(accessor);\n                });\n                pending.push(accessor);\n            }\n            assignExtrasToUserData(geometry, primitiveDef);\n            computeBounds(geometry, primitiveDef, parser);\n            return Promise.all(pending).then(function () {\n                return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;\n            });\n        }\n        function toTrianglesDrawMode(geometry, drawMode) {\n            var index = geometry.getIndex();\n            if (index === null) {\n                var indices = [];\n                var position = geometry.getAttribute('position');\n                if (position !== undefined) {\n                    for (var i = 0; i < position.count; i++) {\n                        indices.push(i);\n                    }\n                    geometry.setIndex(indices);\n                    index = geometry.getIndex();\n                } else {\n                    console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n                    return geometry;\n                }\n            }\n            var numberOfTriangles = index.count - 2;\n            var newIndices = [];\n            if (drawMode === THREE.TriangleFanDrawMode) {\n                for (var i = 1; i <= numberOfTriangles; i++) {\n                    newIndices.push(index.getX(0));\n                    newIndices.push(index.getX(i));\n                    newIndices.push(index.getX(i + 1));\n                }\n            } else {\n                for (var i = 0; i < numberOfTriangles; i++) {\n                    if (i % 2 === 0) {\n                        newIndices.push(index.getX(i));\n                        newIndices.push(index.getX(i + 1));\n                        newIndices.push(index.getX(i + 2));\n                    } else {\n                        newIndices.push(index.getX(i + 2));\n                        newIndices.push(index.getX(i + 1));\n                        newIndices.push(index.getX(i));\n                    }\n                }\n            }\n            if (newIndices.length / 3 !== numberOfTriangles) {\n                console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n            }\n            var newGeometry = geometry.clone();\n            newGeometry.setIndex(newIndices);\n            return newGeometry;\n        }\n        GLTFParser.prototype.loadGeometries = function (primitives) {\n            var parser = this;\n            var extensions = this.extensions;\n            var cache = this.primitiveCache;\n            function createDracoPrimitive(primitive) {\n                return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {\n                    return addPrimitiveAttributes(geometry, primitive, parser);\n                });\n            }\n            var pending = [];\n            for (var i = 0, il = primitives.length; i < il; i++) {\n                var primitive = primitives[i];\n                var cacheKey = createPrimitiveKey(primitive);\n                var cached = cache[cacheKey];\n                if (cached) {\n                    pending.push(cached.promise);\n                } else {\n                    var geometryPromise;\n                    if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {\n                        geometryPromise = createDracoPrimitive(primitive);\n                    } else {\n                        geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);\n                    }\n                    cache[cacheKey] = {\n                        primitive: primitive,\n                        promise: geometryPromise\n                    };\n                    pending.push(geometryPromise);\n                }\n            }\n            return Promise.all(pending);\n        };\n        GLTFParser.prototype.loadMesh = function (meshIndex) {\n            var parser = this;\n            var json = this.json;\n            var meshDef = json.meshes[meshIndex];\n            var primitives = meshDef.primitives;\n            var pending = [];\n            for (var i = 0, il = primitives.length; i < il; i++) {\n                var material = primitives[i].material === undefined ? createDefaultMaterial(this.cache) : this.getDependency('material', primitives[i].material);\n                pending.push(material);\n            }\n            pending.push(parser.loadGeometries(primitives));\n            return Promise.all(pending).then(function (results) {\n                var materials = results.slice(0, results.length - 1);\n                var geometries = results[results.length - 1];\n                var meshes = [];\n                for (var i = 0, il = geometries.length; i < il; i++) {\n                    var geometry = geometries[i];\n                    var primitive = primitives[i];\n                    var mesh;\n                    var material = materials[i];\n                    if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {\n                        mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);\n                        if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {\n                            mesh.normalizeSkinWeights();\n                        }\n                        if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {\n                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleStripDrawMode);\n                        } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {\n                            mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleFanDrawMode);\n                        }\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n                        mesh = new THREE.LineSegments(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {\n                        mesh = new THREE.Line(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {\n                        mesh = new THREE.LineLoop(geometry, material);\n                    } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {\n                        mesh = new THREE.Points(geometry, material);\n                    } else {\n                        throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);\n                    }\n                    if (Object.keys(mesh.geometry.morphAttributes).length > 0) {\n                        updateMorphTargets(mesh, meshDef);\n                    }\n                    mesh.name = meshDef.name || 'mesh_' + meshIndex;\n                    if (geometries.length > 1)\n                        mesh.name += '_' + i;\n                    assignExtrasToUserData(mesh, meshDef);\n                    parser.assignFinalMaterial(mesh);\n                    meshes.push(mesh);\n                }\n                if (meshes.length === 1) {\n                    return meshes[0];\n                }\n                var group = new THREE.Group();\n                for (var i = 0, il = meshes.length; i < il; i++) {\n                    group.add(meshes[i]);\n                }\n                return group;\n            });\n        };\n        GLTFParser.prototype.loadCamera = function (cameraIndex) {\n            var camera;\n            var cameraDef = this.json.cameras[cameraIndex];\n            var params = cameraDef[cameraDef.type];\n            if (!params) {\n                console.warn('THREE.GLTFLoader: Missing camera parameters.');\n                return;\n            }\n            if (cameraDef.type === 'perspective') {\n                camera = new THREE.PerspectiveCamera(THREE.MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2000000);\n            } else if (cameraDef.type === 'orthographic') {\n                camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);\n            }\n            if (cameraDef.name)\n                camera.name = cameraDef.name;\n            assignExtrasToUserData(camera, cameraDef);\n            return Promise.resolve(camera);\n        };\n        GLTFParser.prototype.loadSkin = function (skinIndex) {\n            var skinDef = this.json.skins[skinIndex];\n            var skinEntry = { joints: skinDef.joints };\n            if (skinDef.inverseBindMatrices === undefined) {\n                return Promise.resolve(skinEntry);\n            }\n            return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {\n                skinEntry.inverseBindMatrices = accessor;\n                return skinEntry;\n            });\n        };\n        GLTFParser.prototype.loadAnimation = function (animationIndex) {\n            var json = this.json;\n            var animationDef = json.animations[animationIndex];\n            var pendingNodes = [];\n            var pendingInputAccessors = [];\n            var pendingOutputAccessors = [];\n            var pendingSamplers = [];\n            var pendingTargets = [];\n            for (var i = 0, il = animationDef.channels.length; i < il; i++) {\n                var channel = animationDef.channels[i];\n                var sampler = animationDef.samplers[channel.sampler];\n                var target = channel.target;\n                var name = target.node !== undefined ? target.node : target.id;\n                var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;\n                var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;\n                pendingNodes.push(this.getDependency('node', name));\n                pendingInputAccessors.push(this.getDependency('accessor', input));\n                pendingOutputAccessors.push(this.getDependency('accessor', output));\n                pendingSamplers.push(sampler);\n                pendingTargets.push(target);\n            }\n            return Promise.all([\n                Promise.all(pendingNodes),\n                Promise.all(pendingInputAccessors),\n                Promise.all(pendingOutputAccessors),\n                Promise.all(pendingSamplers),\n                Promise.all(pendingTargets)\n            ]).then(function (dependencies) {\n                var nodes = dependencies[0];\n                var inputAccessors = dependencies[1];\n                var outputAccessors = dependencies[2];\n                var samplers = dependencies[3];\n                var targets = dependencies[4];\n                var tracks = [];\n                for (var i = 0, il = nodes.length; i < il; i++) {\n                    var node = nodes[i];\n                    var inputAccessor = inputAccessors[i];\n                    var outputAccessor = outputAccessors[i];\n                    var sampler = samplers[i];\n                    var target = targets[i];\n                    if (node === undefined)\n                        continue;\n                    node.updateMatrix();\n                    node.matrixAutoUpdate = true;\n                    var TypedKeyframeTrack;\n                    switch (PATH_PROPERTIES[target.path]) {\n                    case PATH_PROPERTIES.weights:\n                        TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.rotation:\n                        TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.position:\n                    case PATH_PROPERTIES.scale:\n                    default:\n                        TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n                        break;\n                    }\n                    var targetName = node.name ? node.name : node.uuid;\n                    var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;\n                    var targetNames = [];\n                    if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {\n                        node.traverse(function (object) {\n                            if (object.isMesh === true && object.morphTargetInfluences) {\n                                targetNames.push(object.name ? object.name : object.uuid);\n                            }\n                        });\n                    } else {\n                        targetNames.push(targetName);\n                    }\n                    var outputArray = outputAccessor.array;\n                    if (outputAccessor.normalized) {\n                        var scale;\n                        if (outputArray.constructor === Int8Array) {\n                            scale = 1 / 127;\n                        } else if (outputArray.constructor === Uint8Array) {\n                            scale = 1 / 255;\n                        } else if (outputArray.constructor == Int16Array) {\n                            scale = 1 / 32767;\n                        } else if (outputArray.constructor === Uint16Array) {\n                            scale = 1 / 65535;\n                        } else {\n                            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');\n                        }\n                        var scaled = new Float32Array(outputArray.length);\n                        for (var j = 0, jl = outputArray.length; j < jl; j++) {\n                            scaled[j] = outputArray[j] * scale;\n                        }\n                        outputArray = scaled;\n                    }\n                    for (var j = 0, jl = targetNames.length; j < jl; j++) {\n                        var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);\n                        if (sampler.interpolation === 'CUBICSPLINE') {\n                            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {\n                                return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);\n                            };\n                            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n                        }\n                        tracks.push(track);\n                    }\n                }\n                var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n                return new THREE.AnimationClip(name, undefined, tracks);\n            });\n        };\n        GLTFParser.prototype.loadNode = function (nodeIndex) {\n            var json = this.json;\n            var extensions = this.extensions;\n            var parser = this;\n            var meshReferences = json.meshReferences;\n            var meshUses = json.meshUses;\n            var nodeDef = json.nodes[nodeIndex];\n            return function () {\n                var pending = [];\n                if (nodeDef.mesh !== undefined) {\n                    pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {\n                        var node;\n                        if (meshReferences[nodeDef.mesh] > 1) {\n                            var instanceNum = meshUses[nodeDef.mesh]++;\n                            node = mesh.clone();\n                            node.name += '_instance_' + instanceNum;\n                        } else {\n                            node = mesh;\n                        }\n                        if (nodeDef.weights !== undefined) {\n                            node.traverse(function (o) {\n                                if (!o.isMesh)\n                                    return;\n                                for (var i = 0, il = nodeDef.weights.length; i < il; i++) {\n                                    o.morphTargetInfluences[i] = nodeDef.weights[i];\n                                }\n                            });\n                        }\n                        return node;\n                    }));\n                }\n                if (nodeDef.camera !== undefined) {\n                    pending.push(parser.getDependency('camera', nodeDef.camera));\n                }\n                if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {\n                    pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\n                }\n                return Promise.all(pending);\n            }().then(function (objects) {\n                var node;\n                if (nodeDef.isBone === true) {\n                    node = new THREE.Bone();\n                } else if (objects.length > 1) {\n                    node = new THREE.Group();\n                } else if (objects.length === 1) {\n                    node = objects[0];\n                } else {\n                    node = new THREE.Object3D();\n                }\n                if (node !== objects[0]) {\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        node.add(objects[i]);\n                    }\n                }\n                if (nodeDef.name) {\n                    node.userData.name = nodeDef.name;\n                    node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n                }\n                assignExtrasToUserData(node, nodeDef);\n                if (nodeDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, node, nodeDef);\n                if (nodeDef.matrix !== undefined) {\n                    var matrix = new THREE.Matrix4();\n                    matrix.fromArray(nodeDef.matrix);\n                    node.applyMatrix4(matrix);\n                } else {\n                    if (nodeDef.translation !== undefined) {\n                        node.position.fromArray(nodeDef.translation);\n                    }\n                    if (nodeDef.rotation !== undefined) {\n                        node.quaternion.fromArray(nodeDef.rotation);\n                    }\n                    if (nodeDef.scale !== undefined) {\n                        node.scale.fromArray(nodeDef.scale);\n                    }\n                }\n                return node;\n            });\n        };\n        GLTFParser.prototype.loadScene = function () {\n            function buildNodeHierachy(nodeId, parentObject, json, parser) {\n                var nodeDef = json.nodes[nodeId];\n                return parser.getDependency('node', nodeId).then(function (node) {\n                    if (nodeDef.skin === undefined)\n                        return node;\n                    var skinEntry;\n                    return parser.getDependency('skin', nodeDef.skin).then(function (skin) {\n                        skinEntry = skin;\n                        var pendingJoints = [];\n                        for (var i = 0, il = skinEntry.joints.length; i < il; i++) {\n                            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));\n                        }\n                        return Promise.all(pendingJoints);\n                    }).then(function (jointNodes) {\n                        node.traverse(function (mesh) {\n                            if (!mesh.isMesh)\n                                return;\n                            var bones = [];\n                            var boneInverses = [];\n                            for (var j = 0, jl = jointNodes.length; j < jl; j++) {\n                                var jointNode = jointNodes[j];\n                                if (jointNode) {\n                                    bones.push(jointNode);\n                                    var mat = new THREE.Matrix4();\n                                    if (skinEntry.inverseBindMatrices !== undefined) {\n                                        mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n                                    }\n                                    boneInverses.push(mat);\n                                } else {\n                                    console.warn('THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[j]);\n                                }\n                            }\n                            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n                        });\n                        return node;\n                    });\n                }).then(function (node) {\n                    parentObject.add(node);\n                    var pending = [];\n                    if (nodeDef.children) {\n                        var children = nodeDef.children;\n                        for (var i = 0, il = children.length; i < il; i++) {\n                            var child = children[i];\n                            pending.push(buildNodeHierachy(child, node, json, parser));\n                        }\n                    }\n                    return Promise.all(pending);\n                });\n            }\n            return function loadScene(sceneIndex) {\n                var json = this.json;\n                var extensions = this.extensions;\n                var sceneDef = this.json.scenes[sceneIndex];\n                var parser = this;\n                var scene = new THREE.Group();\n                if (sceneDef.name)\n                    scene.name = sceneDef.name;\n                assignExtrasToUserData(scene, sceneDef);\n                if (sceneDef.extensions)\n                    addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n                var nodeIds = sceneDef.nodes || [];\n                var pending = [];\n                for (var i = 0, il = nodeIds.length; i < il; i++) {\n                    pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));\n                }\n                return Promise.all(pending).then(function () {\n                    return scene;\n                });\n            };\n        }();\n        return GLTFLoader;\n    }();\n    return GLTFLoader ;\n});\ndefine('skylark-threejs-ex/loaders/MTLLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var MTLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: MTLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        setMaterialOptions: function (value) {\n            this.materialOptions = value;\n            return this;\n        },\n        parse: function (text, path) {\n            var lines = text.split('\\n');\n            var info = {};\n            var delimiter_pattern = /\\s+/;\n            var materialsInfo = {};\n            for (var i = 0; i < lines.length; i++) {\n                var line = lines[i];\n                line = line.trim();\n                if (line.length === 0 || line.charAt(0) === '#') {\n                    continue;\n                }\n                var pos = line.indexOf(' ');\n                var key = pos >= 0 ? line.substring(0, pos) : line;\n                key = key.toLowerCase();\n                var value = pos >= 0 ? line.substring(pos + 1) : '';\n                value = value.trim();\n                if (key === 'newmtl') {\n                    info = { name: value };\n                    materialsInfo[value] = info;\n                } else {\n                    if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n                        var ss = value.split(delimiter_pattern, 3);\n                        info[key] = [\n                            parseFloat(ss[0]),\n                            parseFloat(ss[1]),\n                            parseFloat(ss[2])\n                        ];\n                    } else {\n                        info[key] = value;\n                    }\n                }\n            }\n            var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n            materialCreator.setCrossOrigin(this.crossOrigin);\n            materialCreator.setManager(this.manager);\n            materialCreator.setMaterials(materialsInfo);\n            return materialCreator;\n        }\n    });\n    MTLLoader.MaterialCreator = function (baseUrl, options) {\n        this.baseUrl = baseUrl || '';\n        this.options = options;\n        this.materialsInfo = {};\n        this.materials = {};\n        this.materialsArray = [];\n        this.nameLookup = {};\n        this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n        this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n    };\n    MTLLoader.MaterialCreator.prototype = {\n        constructor: MTLLoader.MaterialCreator,\n        crossOrigin: 'anonymous',\n        setCrossOrigin: function (value) {\n            this.crossOrigin = value;\n            return this;\n        },\n        setManager: function (value) {\n            this.manager = value;\n        },\n        setMaterials: function (materialsInfo) {\n            this.materialsInfo = this.convert(materialsInfo);\n            this.materials = {};\n            this.materialsArray = [];\n            this.nameLookup = {};\n        },\n        convert: function (materialsInfo) {\n            if (!this.options)\n                return materialsInfo;\n            var converted = {};\n            for (var mn in materialsInfo) {\n                var mat = materialsInfo[mn];\n                var covmat = {};\n                converted[mn] = covmat;\n                for (var prop in mat) {\n                    var save = true;\n                    var value = mat[prop];\n                    var lprop = prop.toLowerCase();\n                    switch (lprop) {\n                    case 'kd':\n                    case 'ka':\n                    case 'ks':\n                        if (this.options && this.options.normalizeRGB) {\n                            value = [\n                                value[0] / 255,\n                                value[1] / 255,\n                                value[2] / 255\n                            ];\n                        }\n                        if (this.options && this.options.ignoreZeroRGBs) {\n                            if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                                save = false;\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                    }\n                    if (save) {\n                        covmat[lprop] = value;\n                    }\n                }\n            }\n            return converted;\n        },\n        preload: function () {\n            for (var mn in this.materialsInfo) {\n                this.create(mn);\n            }\n        },\n        getIndex: function (materialName) {\n            return this.nameLookup[materialName];\n        },\n        getAsArray: function () {\n            var index = 0;\n            for (var mn in this.materialsInfo) {\n                this.materialsArray[index] = this.create(mn);\n                this.nameLookup[mn] = index;\n                index++;\n            }\n            return this.materialsArray;\n        },\n        create: function (materialName) {\n            if (this.materials[materialName] === undefined) {\n                this.createMaterial_(materialName);\n            }\n            return this.materials[materialName];\n        },\n        createMaterial_: function (materialName) {\n            var scope = this;\n            var mat = this.materialsInfo[materialName];\n            var params = {\n                name: materialName,\n                side: this.side\n            };\n            function resolveURL(baseUrl, url) {\n                if (typeof url !== 'string' || url === '')\n                    return '';\n                if (/^https?:\\/\\//i.test(url))\n                    return url;\n                return baseUrl + url;\n            }\n            function setMapForType(mapType, value) {\n                if (params[mapType])\n                    return;\n                var texParams = scope.getTextureParams(value, params);\n                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n                map.repeat.copy(texParams.scale);\n                map.offset.copy(texParams.offset);\n                map.wrapS = scope.wrap;\n                map.wrapT = scope.wrap;\n                params[mapType] = map;\n            }\n            for (var prop in mat) {\n                var value = mat[prop];\n                var n;\n                if (value === '')\n                    continue;\n                switch (prop.toLowerCase()) {\n                case 'kd':\n                    params.color = new THREE.Color().fromArray(value);\n                    break;\n                case 'ks':\n                    params.specular = new THREE.Color().fromArray(value);\n                    break;\n                case 'ke':\n                    params.emissive = new THREE.Color().fromArray(value);\n                    break;\n                case 'map_kd':\n                    setMapForType('map', value);\n                    break;\n                case 'map_ks':\n                    setMapForType('specularMap', value);\n                    break;\n                case 'map_ke':\n                    setMapForType('emissiveMap', value);\n                    break;\n                case 'norm':\n                    setMapForType('normalMap', value);\n                    break;\n                case 'map_bump':\n                case 'bump':\n                    setMapForType('bumpMap', value);\n                    break;\n                case 'map_d':\n                    setMapForType('alphaMap', value);\n                    params.transparent = true;\n                    break;\n                case 'ns':\n                    params.shininess = parseFloat(value);\n                    break;\n                case 'd':\n                    n = parseFloat(value);\n                    if (n < 1) {\n                        params.opacity = n;\n                        params.transparent = true;\n                    }\n                    break;\n                case 'tr':\n                    n = parseFloat(value);\n                    if (this.options && this.options.invertTrProperty)\n                        n = 1 - n;\n                    if (n > 0) {\n                        params.opacity = 1 - n;\n                        params.transparent = true;\n                    }\n                    break;\n                default:\n                    break;\n                }\n            }\n            this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n            return this.materials[materialName];\n        },\n        getTextureParams: function (value, matParams) {\n            var texParams = {\n                scale: new THREE.Vector2(1, 1),\n                offset: new THREE.Vector2(0, 0)\n            };\n            var items = value.split(/\\s+/);\n            var pos;\n            pos = items.indexOf('-bm');\n            if (pos >= 0) {\n                matParams.bumpScale = parseFloat(items[pos + 1]);\n                items.splice(pos, 2);\n            }\n            pos = items.indexOf('-s');\n            if (pos >= 0) {\n                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            pos = items.indexOf('-o');\n            if (pos >= 0) {\n                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            texParams.url = items.join(' ').trim();\n            return texParams;\n        },\n        loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n            var texture;\n            var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n            var loader = manager.getHandler(url);\n            if (loader === null) {\n                loader = new THREE.TextureLoader(manager);\n            }\n            if (loader.setCrossOrigin)\n                loader.setCrossOrigin(this.crossOrigin);\n            texture = loader.load(url, onLoad, onProgress, onError);\n            if (mapping !== undefined)\n                texture.mapping = mapping;\n            return texture;\n        }\n    };\n    return MTLLoader ;\n});\ndefine('skylark-threejs-ex/loaders/OBJLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var OBJLoader = function () {\n        var object_pattern = /^[og]\\s*(.+)?/;\n        var material_library_pattern = /^mtllib /;\n        var material_use_pattern = /^usemtl /;\n        var map_use_pattern = /^usemap /;\n        function ParserState() {\n            var state = {\n                objects: [],\n                object: {},\n                vertices: [],\n                normals: [],\n                colors: [],\n                uvs: [],\n                materials: {},\n                materialLibraries: [],\n                startObject: function (name, fromDeclaration) {\n                    if (this.object && this.object.fromDeclaration === false) {\n                        this.object.name = name;\n                        this.object.fromDeclaration = fromDeclaration !== false;\n                        return;\n                    }\n                    var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\n                    if (this.object && typeof this.object._finalize === 'function') {\n                        this.object._finalize(true);\n                    }\n                    this.object = {\n                        name: name || '',\n                        fromDeclaration: fromDeclaration !== false,\n                        geometry: {\n                            vertices: [],\n                            normals: [],\n                            colors: [],\n                            uvs: []\n                        },\n                        materials: [],\n                        smooth: true,\n                        startMaterial: function (name, libraries) {\n                            var previous = this._finalize(false);\n                            if (previous && (previous.inherited || previous.groupCount <= 0)) {\n                                this.materials.splice(previous.index, 1);\n                            }\n                            var material = {\n                                index: this.materials.length,\n                                name: name || '',\n                                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\n                                smooth: previous !== undefined ? previous.smooth : this.smooth,\n                                groupStart: previous !== undefined ? previous.groupEnd : 0,\n                                groupEnd: -1,\n                                groupCount: -1,\n                                inherited: false,\n                                clone: function (index) {\n                                    var cloned = {\n                                        index: typeof index === 'number' ? index : this.index,\n                                        name: this.name,\n                                        mtllib: this.mtllib,\n                                        smooth: this.smooth,\n                                        groupStart: 0,\n                                        groupEnd: -1,\n                                        groupCount: -1,\n                                        inherited: false\n                                    };\n                                    cloned.clone = this.clone.bind(cloned);\n                                    return cloned;\n                                }\n                            };\n                            this.materials.push(material);\n                            return material;\n                        },\n                        currentMaterial: function () {\n                            if (this.materials.length > 0) {\n                                return this.materials[this.materials.length - 1];\n                            }\n                            return undefined;\n                        },\n                        _finalize: function (end) {\n                            var lastMultiMaterial = this.currentMaterial();\n                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n                                lastMultiMaterial.inherited = false;\n                            }\n                            if (end && this.materials.length > 1) {\n                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {\n                                    if (this.materials[mi].groupCount <= 0) {\n                                        this.materials.splice(mi, 1);\n                                    }\n                                }\n                            }\n                            if (end && this.materials.length === 0) {\n                                this.materials.push({\n                                    name: '',\n                                    smooth: this.smooth\n                                });\n                            }\n                            return lastMultiMaterial;\n                        }\n                    };\n                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\n                        var declared = previousMaterial.clone(0);\n                        declared.inherited = true;\n                        this.object.materials.push(declared);\n                    }\n                    this.objects.push(this.object);\n                },\n                finalize: function () {\n                    if (this.object && typeof this.object._finalize === 'function') {\n                        this.object._finalize(true);\n                    }\n                },\n                parseVertexIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\n                },\n                parseNormalIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\n                },\n                parseUVIndex: function (value, len) {\n                    var index = parseInt(value, 10);\n                    return (index >= 0 ? index - 1 : index + len / 2) * 2;\n                },\n                addVertex: function (a, b, c) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addVertexPoint: function (a) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                },\n                addVertexLine: function (a) {\n                    var src = this.vertices;\n                    var dst = this.object.geometry.vertices;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                },\n                addNormal: function (a, b, c) {\n                    var src = this.normals;\n                    var dst = this.object.geometry.normals;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addColor: function (a, b, c) {\n                    var src = this.colors;\n                    var dst = this.object.geometry.colors;\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\n                },\n                addUV: function (a, b, c) {\n                    var src = this.uvs;\n                    var dst = this.object.geometry.uvs;\n                    dst.push(src[a + 0], src[a + 1]);\n                    dst.push(src[b + 0], src[b + 1]);\n                    dst.push(src[c + 0], src[c + 1]);\n                },\n                addUVLine: function (a) {\n                    var src = this.uvs;\n                    var dst = this.object.geometry.uvs;\n                    dst.push(src[a + 0], src[a + 1]);\n                },\n                addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n                    var vLen = this.vertices.length;\n                    var ia = this.parseVertexIndex(a, vLen);\n                    var ib = this.parseVertexIndex(b, vLen);\n                    var ic = this.parseVertexIndex(c, vLen);\n                    this.addVertex(ia, ib, ic);\n                    if (this.colors.length > 0) {\n                        this.addColor(ia, ib, ic);\n                    }\n                    if (ua !== undefined && ua !== '') {\n                        var uvLen = this.uvs.length;\n                        ia = this.parseUVIndex(ua, uvLen);\n                        ib = this.parseUVIndex(ub, uvLen);\n                        ic = this.parseUVIndex(uc, uvLen);\n                        this.addUV(ia, ib, ic);\n                    }\n                    if (na !== undefined && na !== '') {\n                        var nLen = this.normals.length;\n                        ia = this.parseNormalIndex(na, nLen);\n                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\n                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\n                        this.addNormal(ia, ib, ic);\n                    }\n                },\n                addPointGeometry: function (vertices) {\n                    this.object.geometry.type = 'Points';\n                    var vLen = this.vertices.length;\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\n                        this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\n                    }\n                },\n                addLineGeometry: function (vertices, uvs) {\n                    this.object.geometry.type = 'Line';\n                    var vLen = this.vertices.length;\n                    var uvLen = this.uvs.length;\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\n                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n                    }\n                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\n                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n                    }\n                }\n            };\n            state.startObject('', false);\n            return state;\n        }\n        function OBJLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.materials = null;\n        }\n        OBJLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: OBJLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(this.path);\n                loader.load(url, function (text) {\n                    onLoad(scope.parse(text));\n                }, onProgress, onError);\n            },\n            setMaterials: function (materials) {\n                this.materials = materials;\n                return this;\n            },\n            parse: function (text) {\n                var state = new ParserState();\n                if (text.indexOf('\\r\\n') !== -1) {\n                    text = text.replace(/\\r\\n/g, '\\n');\n                }\n                if (text.indexOf('\\\\\\n') !== -1) {\n                    text = text.replace(/\\\\\\n/g, '');\n                }\n                var lines = text.split('\\n');\n                var line = '', lineFirstChar = '';\n                var lineLength = 0;\n                var result = [];\n                var trimLeft = typeof ''.trimLeft === 'function';\n                for (var i = 0, l = lines.length; i < l; i++) {\n                    line = lines[i];\n                    line = trimLeft ? line.trimLeft() : line.trim();\n                    lineLength = line.length;\n                    if (lineLength === 0)\n                        continue;\n                    lineFirstChar = line.charAt(0);\n                    if (lineFirstChar === '#')\n                        continue;\n                    if (lineFirstChar === 'v') {\n                        var data = line.split(/\\s+/);\n                        switch (data[0]) {\n                        case 'v':\n                            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n                            if (data.length >= 7) {\n                                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n                            }\n                            break;\n                        case 'vn':\n                            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n                            break;\n                        case 'vt':\n                            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n                            break;\n                        }\n                    } else if (lineFirstChar === 'f') {\n                        var lineData = line.substr(1).trim();\n                        var vertexData = lineData.split(/\\s+/);\n                        var faceVertices = [];\n                        for (var j = 0, jl = vertexData.length; j < jl; j++) {\n                            var vertex = vertexData[j];\n                            if (vertex.length > 0) {\n                                var vertexParts = vertex.split('/');\n                                faceVertices.push(vertexParts);\n                            }\n                        }\n                        var v1 = faceVertices[0];\n                        for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n                            var v2 = faceVertices[j];\n                            var v3 = faceVertices[j + 1];\n                            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n                        }\n                    } else if (lineFirstChar === 'l') {\n                        var lineParts = line.substring(1).trim().split(' ');\n                        var lineVertices = [], lineUVs = [];\n                        if (line.indexOf('/') === -1) {\n                            lineVertices = lineParts;\n                        } else {\n                            for (var li = 0, llen = lineParts.length; li < llen; li++) {\n                                var parts = lineParts[li].split('/');\n                                if (parts[0] !== '')\n                                    lineVertices.push(parts[0]);\n                                if (parts[1] !== '')\n                                    lineUVs.push(parts[1]);\n                            }\n                        }\n                        state.addLineGeometry(lineVertices, lineUVs);\n                    } else if (lineFirstChar === 'p') {\n                        var lineData = line.substr(1).trim();\n                        var pointData = lineData.split(' ');\n                        state.addPointGeometry(pointData);\n                    } else if ((result = object_pattern.exec(line)) !== null) {\n                        var name = (' ' + result[0].substr(1).trim()).substr(1);\n                        state.startObject(name);\n                    } else if (material_use_pattern.test(line)) {\n                        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n                    } else if (material_library_pattern.test(line)) {\n                        state.materialLibraries.push(line.substring(7).trim());\n                    } else if (map_use_pattern.test(line)) {\n                        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n                    } else if (lineFirstChar === 's') {\n                        result = line.split(' ');\n                        if (result.length > 1) {\n                            var value = result[1].trim().toLowerCase();\n                            state.object.smooth = value !== '0' && value !== 'off';\n                        } else {\n                            state.object.smooth = true;\n                        }\n                        var material = state.object.currentMaterial();\n                        if (material)\n                            material.smooth = state.object.smooth;\n                    } else {\n                        if (line === '\\0')\n                            continue;\n                        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n                    }\n                }\n                state.finalize();\n                var container = new THREE.Group();\n                container.materialLibraries = [].concat(state.materialLibraries);\n                for (var i = 0, l = state.objects.length; i < l; i++) {\n                    var object = state.objects[i];\n                    var geometry = object.geometry;\n                    var materials = object.materials;\n                    var isLine = geometry.type === 'Line';\n                    var isPoints = geometry.type === 'Points';\n                    var hasVertexColors = false;\n                    if (geometry.vertices.length === 0)\n                        continue;\n                    var buffergeometry = new THREE.BufferGeometry();\n                    buffergeometry.setAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));\n                    if (geometry.normals.length > 0) {\n                        buffergeometry.setAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));\n                    } else {\n                        buffergeometry.computeVertexNormals();\n                    }\n                    if (geometry.colors.length > 0) {\n                        hasVertexColors = true;\n                        buffergeometry.setAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));\n                    }\n                    if (geometry.uvs.length > 0) {\n                        buffergeometry.setAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));\n                    }\n                    var createdMaterials = [];\n                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n                        var sourceMaterial = materials[mi];\n                        var materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n                        var material = state.materials[materialHash];\n                        if (this.materials !== null) {\n                            material = this.materials.create(sourceMaterial.name);\n                            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\n                                var materialLine = new THREE.LineBasicMaterial();\n                                THREE.Material.prototype.copy.call(materialLine, material);\n                                materialLine.color.copy(material.color);\n                                material = materialLine;\n                            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {\n                                var materialPoints = new THREE.PointsMaterial({\n                                    size: 10,\n                                    sizeAttenuation: false\n                                });\n                                THREE.Material.prototype.copy.call(materialPoints, material);\n                                materialPoints.color.copy(material.color);\n                                materialPoints.map = material.map;\n                                material = materialPoints;\n                            }\n                        }\n                        if (material === undefined) {\n                            if (isLine) {\n                                material = new THREE.LineBasicMaterial();\n                            } else if (isPoints) {\n                                material = new THREE.PointsMaterial({\n                                    size: 1,\n                                    sizeAttenuation: false\n                                });\n                            } else {\n                                material = new THREE.MeshPhongMaterial();\n                            }\n                            material.name = sourceMaterial.name;\n                            material.flatShading = sourceMaterial.smooth ? false : true;\n                            material.vertexColors = hasVertexColors;\n                            state.materials[materialHash] = material;\n                        }\n                        createdMaterials.push(material);\n                    }\n                    var mesh;\n                    if (createdMaterials.length > 1) {\n                        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n                            var sourceMaterial = materials[mi];\n                            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n                        }\n                        if (isLine) {\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\n                        } else if (isPoints) {\n                            mesh = new THREE.Points(buffergeometry, createdMaterials);\n                        } else {\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\n                        }\n                    } else {\n                        if (isLine) {\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\n                        } else if (isPoints) {\n                            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\n                        } else {\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\n                        }\n                    }\n                    mesh.name = object.name;\n                    container.add(mesh);\n                }\n                return container;\n            }\n        });\n        return OBJLoader;\n    }();\n    return OBJLoader;\n});\ndefine('skylark-threejs-ex/loaders/obj2/OBJLoader2Parser',[],function () {\n    'use strict';\n    const OBJLoader2Parser = function () {\n        this.logging = {\n            enabled: false,\n            debug: false\n        };\n        let scope = this;\n        this.callbacks = {\n            onProgress: function (text) {\n                scope._onProgress(text);\n            },\n            onAssetAvailable: function (payload) {\n                scope._onAssetAvailable(payload);\n            },\n            onError: function (errorMessage) {\n                scope._onError(errorMessage);\n            },\n            onLoad: function (object3d, message) {\n                scope._onLoad(object3d, message);\n            }\n        };\n        this.contentRef = null;\n        this.legacyMode = false;\n        this.materials = {};\n        this.materialPerSmoothingGroup = false;\n        this.useOAsMesh = false;\n        this.useIndices = false;\n        this.disregardNormals = false;\n        this.vertices = [];\n        this.colors = [];\n        this.normals = [];\n        this.uvs = [];\n        this.rawMesh = {\n            objectName: '',\n            groupName: '',\n            activeMtlName: '',\n            mtllibName: '',\n            faceType: -1,\n            subGroups: [],\n            subGroupInUse: null,\n            smoothingGroup: {\n                splitMaterials: false,\n                normalized: -1,\n                real: -1\n            },\n            counts: {\n                doubleIndicesCount: 0,\n                faceCount: 0,\n                mtlCount: 0,\n                smoothingGroupCount: 0\n            }\n        };\n        this.inputObjectCount = 1;\n        this.outputObjectCount = 1;\n        this.globalCounts = {\n            vertices: 0,\n            faces: 0,\n            doubleIndicesCount: 0,\n            lineByte: 0,\n            currentByte: 0,\n            totalBytes: 0\n        };\n    };\n    OBJLoader2Parser.prototype = {\n        constructor: OBJLoader2Parser,\n        _resetRawMesh: function () {\n            this.rawMesh.subGroups = [];\n            this.rawMesh.subGroupInUse = null;\n            this.rawMesh.smoothingGroup.normalized = -1;\n            this.rawMesh.smoothingGroup.real = -1;\n            this._pushSmoothingGroup(1);\n            this.rawMesh.counts.doubleIndicesCount = 0;\n            this.rawMesh.counts.faceCount = 0;\n            this.rawMesh.counts.mtlCount = 0;\n            this.rawMesh.counts.smoothingGroupCount = 0;\n        },\n        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {\n            this.materialPerSmoothingGroup = materialPerSmoothingGroup === true;\n            return this;\n        },\n        setUseOAsMesh: function (useOAsMesh) {\n            this.useOAsMesh = useOAsMesh === true;\n            return this;\n        },\n        setUseIndices: function (useIndices) {\n            this.useIndices = useIndices === true;\n            return this;\n        },\n        setDisregardNormals: function (disregardNormals) {\n            this.disregardNormals = disregardNormals === true;\n            return this;\n        },\n        setMaterials: function (materials) {\n            this.materials = Object.assign({}, materials);\n        },\n        setCallbackOnAssetAvailable: function (onAssetAvailable) {\n            if (onAssetAvailable !== null && onAssetAvailable !== undefined && onAssetAvailable instanceof Function) {\n                this.callbacks.onAssetAvailable = onAssetAvailable;\n            }\n            return this;\n        },\n        setCallbackOnProgress: function (onProgress) {\n            if (onProgress !== null && onProgress !== undefined && onProgress instanceof Function) {\n                this.callbacks.onProgress = onProgress;\n            }\n            return this;\n        },\n        setCallbackOnError: function (onError) {\n            if (onError !== null && onError !== undefined && onError instanceof Function) {\n                this.callbacks.onError = onError;\n            }\n            return this;\n        },\n        setCallbackOnLoad: function (onLoad) {\n            if (onLoad !== null && onLoad !== undefined && onLoad instanceof Function) {\n                this.callbacks.onLoad = onLoad;\n            }\n            return this;\n        },\n        _onProgress: function (text) {\n            let message = text ? text : '';\n            if (this.logging.enabled && this.logging.debug) {\n                console.log(message);\n            }\n        },\n        _onError: function (errorMessage) {\n            if (this.logging.enabled && this.logging.debug) {\n                console.error(errorMessage);\n            }\n        },\n        _onAssetAvailable: function (payload) {\n            let errorMessage = 'OBJLoader2Parser does not provide implementation for onAssetAvailable. Aborting...';\n            this.callbacks.onError(errorMessage);\n            throw errorMessage;\n        },\n        _onLoad: function (object3d, message) {\n            console.log('You reached parser default onLoad callback: ' + message);\n        },\n        setLogging: function (enabled, debug) {\n            this.logging.enabled = enabled === true;\n            this.logging.debug = debug === true;\n            return this;\n        },\n        _configure: function () {\n            this._pushSmoothingGroup(1);\n            if (this.logging.enabled) {\n                let matKeys = Object.keys(this.materials);\n                let matNames = matKeys.length > 0 ? '\\n\\tmaterialNames:\\n\\t\\t- ' + matKeys.join('\\n\\t\\t- ') : '\\n\\tmaterialNames: None';\n                let printedConfig = 'OBJLoader.Parser configuration:' + matNames + '\\n\\tmaterialPerSmoothingGroup: ' + this.materialPerSmoothingGroup + '\\n\\tuseOAsMesh: ' + this.useOAsMesh + '\\n\\tuseIndices: ' + this.useIndices + '\\n\\tdisregardNormals: ' + this.disregardNormals;\n                printedConfig += '\\n\\tcallbacks.onProgress: ' + this.callbacks.onProgress.name;\n                printedConfig += '\\n\\tcallbacks.onAssetAvailable: ' + this.callbacks.onAssetAvailable.name;\n                printedConfig += '\\n\\tcallbacks.onError: ' + this.callbacks.onError.name;\n                console.info(printedConfig);\n            }\n        },\n        execute: function (arrayBuffer) {\n            if (this.logging.enabled)\n                console.time('OBJLoader2Parser.execute');\n            this._configure();\n            let arrayBufferView = new Uint8Array(arrayBuffer);\n            this.contentRef = arrayBufferView;\n            let length = arrayBufferView.byteLength;\n            this.globalCounts.totalBytes = length;\n            let buffer = new Array(128);\n            for (let code, word = '', bufferPointer = 0, slashesCount = 0, i = 0; i < length; i++) {\n                code = arrayBufferView[i];\n                switch (code) {\n                case 32:\n                    if (word.length > 0)\n                        buffer[bufferPointer++] = word;\n                    word = '';\n                    break;\n                case 47:\n                    if (word.length > 0)\n                        buffer[bufferPointer++] = word;\n                    slashesCount++;\n                    word = '';\n                    break;\n                case 10:\n                    if (word.length > 0)\n                        buffer[bufferPointer++] = word;\n                    word = '';\n                    this.globalCounts.lineByte = this.globalCounts.currentByte;\n                    this.globalCounts.currentByte = i;\n                    this._processLine(buffer, bufferPointer, slashesCount);\n                    bufferPointer = 0;\n                    slashesCount = 0;\n                    break;\n                case 13:\n                    break;\n                default:\n                    word += String.fromCharCode(code);\n                    break;\n                }\n            }\n            this._finalizeParsing();\n            if (this.logging.enabled)\n                console.timeEnd('OBJLoader2Parser.execute');\n        },\n        executeLegacy: function (text) {\n            if (this.logging.enabled)\n                console.time('OBJLoader2Parser.executeLegacy');\n            this._configure();\n            this.legacyMode = true;\n            this.contentRef = text;\n            let length = text.length;\n            this.globalCounts.totalBytes = length;\n            let buffer = new Array(128);\n            for (let char, word = '', bufferPointer = 0, slashesCount = 0, i = 0; i < length; i++) {\n                char = text[i];\n                switch (char) {\n                case ' ':\n                    if (word.length > 0)\n                        buffer[bufferPointer++] = word;\n                    word = '';\n                    break;\n                case '/':\n                    if (word.length > 0)\n                        buffer[bufferPointer++] = word;\n                    slashesCount++;\n                    word = '';\n                    break;\n                case '\\n':\n                    if (word.length > 0)\n                        buffer[bufferPointer++] = word;\n                    word = '';\n                    this.globalCounts.lineByte = this.globalCounts.currentByte;\n                    this.globalCounts.currentByte = i;\n                    this._processLine(buffer, bufferPointer, slashesCount);\n                    bufferPointer = 0;\n                    slashesCount = 0;\n                    break;\n                case '\\r':\n                    break;\n                default:\n                    word += char;\n                }\n            }\n            this._finalizeParsing();\n            if (this.logging.enabled)\n                console.timeEnd('OBJLoader2Parser.executeLegacy');\n        },\n        _processLine: function (buffer, bufferPointer, slashesCount) {\n            if (bufferPointer < 1)\n                return;\n            let reconstructString = function (content, legacyMode, start, stop) {\n                let line = '';\n                if (stop > start) {\n                    let i;\n                    if (legacyMode) {\n                        for (i = start; i < stop; i++)\n                            line += content[i];\n                    } else {\n                        for (i = start; i < stop; i++)\n                            line += String.fromCharCode(content[i]);\n                    }\n                    line = line.trim();\n                }\n                return line;\n            };\n            let bufferLength, length, i, lineDesignation;\n            lineDesignation = buffer[0];\n            switch (lineDesignation) {\n            case 'v':\n                this.vertices.push(parseFloat(buffer[1]));\n                this.vertices.push(parseFloat(buffer[2]));\n                this.vertices.push(parseFloat(buffer[3]));\n                if (bufferPointer > 4) {\n                    this.colors.push(parseFloat(buffer[4]));\n                    this.colors.push(parseFloat(buffer[5]));\n                    this.colors.push(parseFloat(buffer[6]));\n                }\n                break;\n            case 'vt':\n                this.uvs.push(parseFloat(buffer[1]));\n                this.uvs.push(parseFloat(buffer[2]));\n                break;\n            case 'vn':\n                this.normals.push(parseFloat(buffer[1]));\n                this.normals.push(parseFloat(buffer[2]));\n                this.normals.push(parseFloat(buffer[3]));\n                break;\n            case 'f':\n                bufferLength = bufferPointer - 1;\n                if (slashesCount === 0) {\n                    this._checkFaceType(0);\n                    for (i = 2, length = bufferLength; i < length; i++) {\n                        this._buildFace(buffer[1]);\n                        this._buildFace(buffer[i]);\n                        this._buildFace(buffer[i + 1]);\n                    }\n                } else if (bufferLength === slashesCount * 2) {\n                    this._checkFaceType(1);\n                    for (i = 3, length = bufferLength - 2; i < length; i += 2) {\n                        this._buildFace(buffer[1], buffer[2]);\n                        this._buildFace(buffer[i], buffer[i + 1]);\n                        this._buildFace(buffer[i + 2], buffer[i + 3]);\n                    }\n                } else if (bufferLength * 2 === slashesCount * 3) {\n                    this._checkFaceType(2);\n                    for (i = 4, length = bufferLength - 3; i < length; i += 3) {\n                        this._buildFace(buffer[1], buffer[2], buffer[3]);\n                        this._buildFace(buffer[i], buffer[i + 1], buffer[i + 2]);\n                        this._buildFace(buffer[i + 3], buffer[i + 4], buffer[i + 5]);\n                    }\n                } else {\n                    this._checkFaceType(3);\n                    for (i = 3, length = bufferLength - 2; i < length; i += 2) {\n                        this._buildFace(buffer[1], undefined, buffer[2]);\n                        this._buildFace(buffer[i], undefined, buffer[i + 1]);\n                        this._buildFace(buffer[i + 2], undefined, buffer[i + 3]);\n                    }\n                }\n                break;\n            case 'l':\n            case 'p':\n                bufferLength = bufferPointer - 1;\n                if (bufferLength === slashesCount * 2) {\n                    this._checkFaceType(4);\n                    for (i = 1, length = bufferLength + 1; i < length; i += 2)\n                        this._buildFace(buffer[i], buffer[i + 1]);\n                } else {\n                    this._checkFaceType(lineDesignation === 'l' ? 5 : 6);\n                    for (i = 1, length = bufferLength + 1; i < length; i++)\n                        this._buildFace(buffer[i]);\n                }\n                break;\n            case 's':\n                this._pushSmoothingGroup(buffer[1]);\n                break;\n            case 'g':\n                this._processCompletedMesh();\n                this.rawMesh.groupName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 2, this.globalCounts.currentByte);\n                break;\n            case 'o':\n                if (this.useOAsMesh)\n                    this._processCompletedMesh();\n                this.rawMesh.objectName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 2, this.globalCounts.currentByte);\n                break;\n            case 'mtllib':\n                this.rawMesh.mtllibName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 7, this.globalCounts.currentByte);\n                break;\n            case 'usemtl':\n                let mtlName = reconstructString(this.contentRef, this.legacyMode, this.globalCounts.lineByte + 7, this.globalCounts.currentByte);\n                if (mtlName !== '' && this.rawMesh.activeMtlName !== mtlName) {\n                    this.rawMesh.activeMtlName = mtlName;\n                    this.rawMesh.counts.mtlCount++;\n                    this._checkSubGroup();\n                }\n                break;\n            default:\n                break;\n            }\n        },\n        _pushSmoothingGroup: function (smoothingGroup) {\n            let smoothingGroupInt = parseInt(smoothingGroup);\n            if (isNaN(smoothingGroupInt)) {\n                smoothingGroupInt = smoothingGroup === 'off' ? 0 : 1;\n            }\n            let smoothCheck = this.rawMesh.smoothingGroup.normalized;\n            this.rawMesh.smoothingGroup.normalized = this.rawMesh.smoothingGroup.splitMaterials ? smoothingGroupInt : smoothingGroupInt === 0 ? 0 : 1;\n            this.rawMesh.smoothingGroup.real = smoothingGroupInt;\n            if (smoothCheck !== smoothingGroupInt) {\n                this.rawMesh.counts.smoothingGroupCount++;\n                this._checkSubGroup();\n            }\n        },\n        _checkFaceType: function (faceType) {\n            if (this.rawMesh.faceType !== faceType) {\n                this._processCompletedMesh();\n                this.rawMesh.faceType = faceType;\n                this._checkSubGroup();\n            }\n        },\n        _checkSubGroup: function () {\n            let index = this.rawMesh.activeMtlName + '|' + this.rawMesh.smoothingGroup.normalized;\n            this.rawMesh.subGroupInUse = this.rawMesh.subGroups[index];\n            if (this.rawMesh.subGroupInUse === undefined || this.rawMesh.subGroupInUse === null) {\n                this.rawMesh.subGroupInUse = {\n                    index: index,\n                    objectName: this.rawMesh.objectName,\n                    groupName: this.rawMesh.groupName,\n                    materialName: this.rawMesh.activeMtlName,\n                    smoothingGroup: this.rawMesh.smoothingGroup.normalized,\n                    vertices: [],\n                    indexMappingsCount: 0,\n                    indexMappings: [],\n                    indices: [],\n                    colors: [],\n                    uvs: [],\n                    normals: []\n                };\n                this.rawMesh.subGroups[index] = this.rawMesh.subGroupInUse;\n            }\n        },\n        _buildFace: function (faceIndexV, faceIndexU, faceIndexN) {\n            let subGroupInUse = this.rawMesh.subGroupInUse;\n            let scope = this;\n            let updateSubGroupInUse = function () {\n                let faceIndexVi = parseInt(faceIndexV);\n                let indexPointerV = 3 * (faceIndexVi > 0 ? faceIndexVi - 1 : faceIndexVi + scope.vertices.length / 3);\n                let indexPointerC = scope.colors.length > 0 ? indexPointerV : null;\n                let vertices = subGroupInUse.vertices;\n                vertices.push(scope.vertices[indexPointerV++]);\n                vertices.push(scope.vertices[indexPointerV++]);\n                vertices.push(scope.vertices[indexPointerV]);\n                if (indexPointerC !== null) {\n                    let colors = subGroupInUse.colors;\n                    colors.push(scope.colors[indexPointerC++]);\n                    colors.push(scope.colors[indexPointerC++]);\n                    colors.push(scope.colors[indexPointerC]);\n                }\n                if (faceIndexU) {\n                    let faceIndexUi = parseInt(faceIndexU);\n                    let indexPointerU = 2 * (faceIndexUi > 0 ? faceIndexUi - 1 : faceIndexUi + scope.uvs.length / 2);\n                    let uvs = subGroupInUse.uvs;\n                    uvs.push(scope.uvs[indexPointerU++]);\n                    uvs.push(scope.uvs[indexPointerU]);\n                }\n                if (faceIndexN && !scope.disregardNormals) {\n                    let faceIndexNi = parseInt(faceIndexN);\n                    let indexPointerN = 3 * (faceIndexNi > 0 ? faceIndexNi - 1 : faceIndexNi + scope.normals.length / 3);\n                    let normals = subGroupInUse.normals;\n                    normals.push(scope.normals[indexPointerN++]);\n                    normals.push(scope.normals[indexPointerN++]);\n                    normals.push(scope.normals[indexPointerN]);\n                }\n            };\n            if (this.useIndices) {\n                if (this.disregardNormals)\n                    faceIndexN = undefined;\n                let mappingName = faceIndexV + (faceIndexU ? '_' + faceIndexU : '_n') + (faceIndexN ? '_' + faceIndexN : '_n');\n                let indicesPointer = subGroupInUse.indexMappings[mappingName];\n                if (indicesPointer === undefined || indicesPointer === null) {\n                    indicesPointer = this.rawMesh.subGroupInUse.vertices.length / 3;\n                    updateSubGroupInUse();\n                    subGroupInUse.indexMappings[mappingName] = indicesPointer;\n                    subGroupInUse.indexMappingsCount++;\n                } else {\n                    this.rawMesh.counts.doubleIndicesCount++;\n                }\n                subGroupInUse.indices.push(indicesPointer);\n            } else {\n                updateSubGroupInUse();\n            }\n            this.rawMesh.counts.faceCount++;\n        },\n        _createRawMeshReport: function (inputObjectCount) {\n            return 'Input Object number: ' + inputObjectCount + '\\n\\tObject name: ' + this.rawMesh.objectName + '\\n\\tGroup name: ' + this.rawMesh.groupName + '\\n\\tMtllib name: ' + this.rawMesh.mtllibName + '\\n\\tVertex count: ' + this.vertices.length / 3 + '\\n\\tNormal count: ' + this.normals.length / 3 + '\\n\\tUV count: ' + this.uvs.length / 2 + '\\n\\tSmoothingGroup count: ' + this.rawMesh.counts.smoothingGroupCount + '\\n\\tMaterial count: ' + this.rawMesh.counts.mtlCount + '\\n\\tReal MeshOutputGroup count: ' + this.rawMesh.subGroups.length;\n        },\n        _finalizeRawMesh: function () {\n            let meshOutputGroupTemp = [];\n            let meshOutputGroup;\n            let absoluteVertexCount = 0;\n            let absoluteIndexMappingsCount = 0;\n            let absoluteIndexCount = 0;\n            let absoluteColorCount = 0;\n            let absoluteNormalCount = 0;\n            let absoluteUvCount = 0;\n            let indices;\n            for (let name in this.rawMesh.subGroups) {\n                meshOutputGroup = this.rawMesh.subGroups[name];\n                if (meshOutputGroup.vertices.length > 0) {\n                    indices = meshOutputGroup.indices;\n                    if (indices.length > 0 && absoluteIndexMappingsCount > 0) {\n                        for (let i = 0; i < indices.length; i++) {\n                            indices[i] = indices[i] + absoluteIndexMappingsCount;\n                        }\n                    }\n                    meshOutputGroupTemp.push(meshOutputGroup);\n                    absoluteVertexCount += meshOutputGroup.vertices.length;\n                    absoluteIndexMappingsCount += meshOutputGroup.indexMappingsCount;\n                    absoluteIndexCount += meshOutputGroup.indices.length;\n                    absoluteColorCount += meshOutputGroup.colors.length;\n                    absoluteUvCount += meshOutputGroup.uvs.length;\n                    absoluteNormalCount += meshOutputGroup.normals.length;\n                }\n            }\n            let result = null;\n            if (meshOutputGroupTemp.length > 0) {\n                result = {\n                    name: this.rawMesh.groupName !== '' ? this.rawMesh.groupName : this.rawMesh.objectName,\n                    subGroups: meshOutputGroupTemp,\n                    absoluteVertexCount: absoluteVertexCount,\n                    absoluteIndexCount: absoluteIndexCount,\n                    absoluteColorCount: absoluteColorCount,\n                    absoluteNormalCount: absoluteNormalCount,\n                    absoluteUvCount: absoluteUvCount,\n                    faceCount: this.rawMesh.counts.faceCount,\n                    doubleIndicesCount: this.rawMesh.counts.doubleIndicesCount\n                };\n            }\n            return result;\n        },\n        _processCompletedMesh: function () {\n            let result = this._finalizeRawMesh();\n            let haveMesh = result !== null;\n            if (haveMesh) {\n                if (this.colors.length > 0 && this.colors.length !== this.vertices.length) {\n                    this.callbacks.onError('Vertex Colors were detected, but vertex count and color count do not match!');\n                }\n                if (this.logging.enabled && this.logging.debug)\n                    console.debug(this._createRawMeshReport(this.inputObjectCount));\n                this.inputObjectCount++;\n                this._buildMesh(result);\n                let progressBytesPercent = this.globalCounts.currentByte / this.globalCounts.totalBytes;\n                this._onProgress('Completed [o: ' + this.rawMesh.objectName + ' g:' + this.rawMesh.groupName + '' + '] Total progress: ' + (progressBytesPercent * 100).toFixed(2) + '%');\n                this._resetRawMesh();\n            }\n            return haveMesh;\n        },\n        _buildMesh: function (result) {\n            let meshOutputGroups = result.subGroups;\n            let vertexFA = new Float32Array(result.absoluteVertexCount);\n            this.globalCounts.vertices += result.absoluteVertexCount / 3;\n            this.globalCounts.faces += result.faceCount;\n            this.globalCounts.doubleIndicesCount += result.doubleIndicesCount;\n            let indexUA = result.absoluteIndexCount > 0 ? new Uint32Array(result.absoluteIndexCount) : null;\n            let colorFA = result.absoluteColorCount > 0 ? new Float32Array(result.absoluteColorCount) : null;\n            let normalFA = result.absoluteNormalCount > 0 ? new Float32Array(result.absoluteNormalCount) : null;\n            let uvFA = result.absoluteUvCount > 0 ? new Float32Array(result.absoluteUvCount) : null;\n            let haveVertexColors = colorFA !== null;\n            let meshOutputGroup;\n            let materialNames = [];\n            let createMultiMaterial = meshOutputGroups.length > 1;\n            let materialIndex = 0;\n            let materialIndexMapping = [];\n            let selectedMaterialIndex;\n            let materialGroup;\n            let materialGroups = [];\n            let vertexFAOffset = 0;\n            let indexUAOffset = 0;\n            let colorFAOffset = 0;\n            let normalFAOffset = 0;\n            let uvFAOffset = 0;\n            let materialGroupOffset = 0;\n            let materialGroupLength = 0;\n            let materialOrg, material, materialName, materialNameOrg;\n            for (let oodIndex in meshOutputGroups) {\n                if (!meshOutputGroups.hasOwnProperty(oodIndex))\n                    continue;\n                meshOutputGroup = meshOutputGroups[oodIndex];\n                materialNameOrg = meshOutputGroup.materialName;\n                if (this.rawMesh.faceType < 4) {\n                    materialName = materialNameOrg + (haveVertexColors ? '_vertexColor' : '') + (meshOutputGroup.smoothingGroup === 0 ? '_flat' : '');\n                } else {\n                    materialName = this.rawMesh.faceType === 6 ? 'defaultPointMaterial' : 'defaultLineMaterial';\n                }\n                materialOrg = this.materials[materialNameOrg];\n                material = this.materials[materialName];\n                if ((materialOrg === undefined || materialOrg === null) && (material === undefined || material === null)) {\n                    materialName = haveVertexColors ? 'defaultVertexColorMaterial' : 'defaultMaterial';\n                    material = this.materials[materialName];\n                    if (this.logging.enabled) {\n                        console.info('object_group \"' + meshOutputGroup.objectName + '_' + meshOutputGroup.groupName + '\" was defined with unresolvable material \"' + materialNameOrg + '\"! Assigning \"' + materialName + '\".');\n                    }\n                }\n                if (material === undefined || material === null) {\n                    let materialCloneInstructions = {\n                        materialNameOrg: materialNameOrg,\n                        materialName: materialName,\n                        materialProperties: {\n                            vertexColors: haveVertexColors ? 2 : 0,\n                            flatShading: meshOutputGroup.smoothingGroup === 0\n                        }\n                    };\n                    let payload = {\n                        cmd: 'assetAvailable',\n                        type: 'material',\n                        materials: { materialCloneInstructions: materialCloneInstructions }\n                    };\n                    this.callbacks.onAssetAvailable(payload);\n                    let matCheck = this.materials[materialName];\n                    if (matCheck === undefined || matCheck === null) {\n                        this.materials[materialName] = materialCloneInstructions;\n                    }\n                }\n                if (createMultiMaterial) {\n                    selectedMaterialIndex = materialIndexMapping[materialName];\n                    if (!selectedMaterialIndex) {\n                        selectedMaterialIndex = materialIndex;\n                        materialIndexMapping[materialName] = materialIndex;\n                        materialNames.push(materialName);\n                        materialIndex++;\n                    }\n                    materialGroupLength = this.useIndices ? meshOutputGroup.indices.length : meshOutputGroup.vertices.length / 3;\n                    materialGroup = {\n                        start: materialGroupOffset,\n                        count: materialGroupLength,\n                        index: selectedMaterialIndex\n                    };\n                    materialGroups.push(materialGroup);\n                    materialGroupOffset += materialGroupLength;\n                } else {\n                    materialNames.push(materialName);\n                }\n                vertexFA.set(meshOutputGroup.vertices, vertexFAOffset);\n                vertexFAOffset += meshOutputGroup.vertices.length;\n                if (indexUA) {\n                    indexUA.set(meshOutputGroup.indices, indexUAOffset);\n                    indexUAOffset += meshOutputGroup.indices.length;\n                }\n                if (colorFA) {\n                    colorFA.set(meshOutputGroup.colors, colorFAOffset);\n                    colorFAOffset += meshOutputGroup.colors.length;\n                }\n                if (normalFA) {\n                    normalFA.set(meshOutputGroup.normals, normalFAOffset);\n                    normalFAOffset += meshOutputGroup.normals.length;\n                }\n                if (uvFA) {\n                    uvFA.set(meshOutputGroup.uvs, uvFAOffset);\n                    uvFAOffset += meshOutputGroup.uvs.length;\n                }\n                if (this.logging.enabled && this.logging.debug) {\n                    let materialIndexLine = selectedMaterialIndex === undefined || selectedMaterialIndex === null ? '' : '\\n\\t\\tmaterialIndex: ' + selectedMaterialIndex;\n                    let createdReport = '\\tOutput Object no.: ' + this.outputObjectCount + '\\n\\t\\tgroupName: ' + meshOutputGroup.groupName + '\\n\\t\\tIndex: ' + meshOutputGroup.index + '\\n\\t\\tfaceType: ' + this.rawMesh.faceType + '\\n\\t\\tmaterialName: ' + meshOutputGroup.materialName + '\\n\\t\\tsmoothingGroup: ' + meshOutputGroup.smoothingGroup + materialIndexLine + '\\n\\t\\tobjectName: ' + meshOutputGroup.objectName + '\\n\\t\\t#vertices: ' + meshOutputGroup.vertices.length / 3 + '\\n\\t\\t#indices: ' + meshOutputGroup.indices.length + '\\n\\t\\t#colors: ' + meshOutputGroup.colors.length / 3 + '\\n\\t\\t#uvs: ' + meshOutputGroup.uvs.length / 2 + '\\n\\t\\t#normals: ' + meshOutputGroup.normals.length / 3;\n                    console.debug(createdReport);\n                }\n            }\n            this.outputObjectCount++;\n            this.callbacks.onAssetAvailable({\n                cmd: 'assetAvailable',\n                type: 'mesh',\n                progress: { numericalValue: this.globalCounts.currentByte / this.globalCounts.totalBytes },\n                params: { meshName: result.name },\n                materials: {\n                    multiMaterial: createMultiMaterial,\n                    materialNames: materialNames,\n                    materialGroups: materialGroups\n                },\n                buffers: {\n                    vertices: vertexFA,\n                    indices: indexUA,\n                    colors: colorFA,\n                    normals: normalFA,\n                    uvs: uvFA\n                },\n                geometryType: this.rawMesh.faceType < 4 ? 0 : this.rawMesh.faceType === 6 ? 2 : 1\n            }, [vertexFA.buffer], indexUA !== null ? [indexUA.buffer] : null, colorFA !== null ? [colorFA.buffer] : null, normalFA !== null ? [normalFA.buffer] : null, uvFA !== null ? [uvFA.buffer] : null);\n        },\n        _finalizeParsing: function () {\n            if (this.logging.enabled)\n                console.info('Global output object count: ' + this.outputObjectCount);\n            if (this._processCompletedMesh() && this.logging.enabled) {\n                let parserFinalReport = 'Overall counts: ' + '\\n\\tVertices: ' + this.globalCounts.vertices + '\\n\\tFaces: ' + this.globalCounts.faces + '\\n\\tMultiple definitions: ' + this.globalCounts.doubleIndicesCount;\n                console.info(parserFinalReport);\n            }\n        }\n    };\n\n    return OBJLoader2Parser;\n});\ndefine('skylark-threejs-ex/loaders/obj2/shared/MeshReceiver',[\n    'skylark-threejs'\n], function (THREE) {\n    'use strict';\n    const MeshReceiver = function (materialHandler) {\n        this.logging = {\n            enabled: false,\n            debug: false\n        };\n        this.callbacks = {\n            onProgress: null,\n            onMeshAlter: null\n        };\n        this.materialHandler = materialHandler;\n    };\n    MeshReceiver.prototype = {\n        constructor: MeshReceiver,\n        setLogging: function (enabled, debug) {\n            this.logging.enabled = enabled === true;\n            this.logging.debug = debug === true;\n        },\n        _setCallbacks: function (onProgress, onMeshAlter) {\n            if (onProgress !== null && onProgress !== undefined && onProgress instanceof Function) {\n                this.callbacks.onProgress = onProgress;\n            }\n            if (onMeshAlter !== null && onMeshAlter !== undefined && onMeshAlter instanceof Function) {\n                this.callbacks.onMeshAlter = onMeshAlter;\n            }\n        },\n        buildMeshes: function (meshPayload) {\n            let meshName = meshPayload.params.meshName;\n            let buffers = meshPayload.buffers;\n            let bufferGeometry = new THREE.BufferGeometry();\n            if (buffers.vertices !== undefined && buffers.vertices !== null) {\n                bufferGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(buffers.vertices), 3));\n            }\n            if (buffers.indices !== undefined && buffers.indices !== null) {\n                bufferGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(buffers.indices), 1));\n            }\n            if (buffers.colors !== undefined && buffers.colors !== null) {\n                bufferGeometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(buffers.colors), 3));\n            }\n            if (buffers.normals !== undefined && buffers.normals !== null) {\n                bufferGeometry.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffers.normals), 3));\n            } else {\n                bufferGeometry.computeVertexNormals();\n            }\n            if (buffers.uvs !== undefined && buffers.uvs !== null) {\n                bufferGeometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(buffers.uvs), 2));\n            }\n            if (buffers.skinIndex !== undefined && buffers.skinIndex !== null) {\n                bufferGeometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Uint16Array(buffers.skinIndex), 4));\n            }\n            if (buffers.skinWeight !== undefined && buffers.skinWeight !== null) {\n                bufferGeometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(buffers.skinWeight), 4));\n            }\n            let material, materialName, key;\n            let materialNames = meshPayload.materials.materialNames;\n            let createMultiMaterial = meshPayload.materials.multiMaterial;\n            let multiMaterials = [];\n            for (key in materialNames) {\n                materialName = materialNames[key];\n                material = this.materialHandler.getMaterial(materialName);\n                if (createMultiMaterial)\n                    multiMaterials.push(material);\n            }\n            if (createMultiMaterial) {\n                material = multiMaterials;\n                let materialGroups = meshPayload.materials.materialGroups;\n                let materialGroup;\n                for (key in materialGroups) {\n                    materialGroup = materialGroups[key];\n                    bufferGeometry.addGroup(materialGroup.start, materialGroup.count, materialGroup.index);\n                }\n            }\n            let meshes = [];\n            let mesh;\n            let callbackOnMeshAlterResult;\n            let useOrgMesh = true;\n            let geometryType = meshPayload.geometryType === null ? 0 : meshPayload.geometryType;\n            if (this.callbacks.onMeshAlter) {\n                callbackOnMeshAlterResult = this.callbacks.onMeshAlter({\n                    detail: {\n                        meshName: meshName,\n                        bufferGeometry: bufferGeometry,\n                        material: material,\n                        geometryType: geometryType\n                    }\n                });\n            }\n            if (callbackOnMeshAlterResult) {\n                if (callbackOnMeshAlterResult.isDisregardMesh()) {\n                    useOrgMesh = false;\n                } else if (callbackOnMeshAlterResult.providesAlteredMeshes()) {\n                    for (let i in callbackOnMeshAlterResult.meshes) {\n                        meshes.push(callbackOnMeshAlterResult.meshes[i]);\n                    }\n                    useOrgMesh = false;\n                }\n            }\n            if (useOrgMesh) {\n                if (meshPayload.computeBoundingSphere)\n                    bufferGeometry.computeBoundingSphere();\n                if (geometryType === 0) {\n                    mesh = new THREE.Mesh(bufferGeometry, material);\n                } else if (geometryType === 1) {\n                    mesh = new THREE.LineSegments(bufferGeometry, material);\n                } else {\n                    mesh = new THREE.Points(bufferGeometry, material);\n                }\n                mesh.name = meshName;\n                meshes.push(mesh);\n            }\n            let progressMessage = meshPayload.params.meshName;\n            if (meshes.length > 0) {\n                let meshNames = [];\n                for (let i in meshes) {\n                    mesh = meshes[i];\n                    meshNames[i] = mesh.name;\n                }\n                progressMessage += ': Adding mesh(es) (' + meshNames.length + ': ' + meshNames + ') from input mesh: ' + meshName;\n                progressMessage += ' (' + (meshPayload.progress.numericalValue * 100).toFixed(2) + '%)';\n            } else {\n                progressMessage += ': Not adding mesh: ' + meshName;\n                progressMessage += ' (' + (meshPayload.progress.numericalValue * 100).toFixed(2) + '%)';\n            }\n            if (this.callbacks.onProgress) {\n                this.callbacks.onProgress('progress', progressMessage, meshPayload.progress.numericalValue);\n            }\n            return meshes;\n        }\n    };\n\n    return  MeshReceiver;\n});\ndefine('skylark-threejs-ex/loaders/obj2/shared/MaterialHandler',[\n    'skylark-threejs'\n], function (THREE) {\n    'use strict';\n    const MaterialHandler = function () {\n        this.logging = {\n            enabled: false,\n            debug: false\n        };\n        this.callbacks = { onLoadMaterials: null };\n        this.materials = {};\n    };\n    MaterialHandler.prototype = {\n        constructor: MaterialHandler,\n        setLogging: function (enabled, debug) {\n            this.logging.enabled = enabled === true;\n            this.logging.debug = debug === true;\n        },\n        _setCallbacks: function (onLoadMaterials) {\n            if (onLoadMaterials !== undefined && onLoadMaterials !== null && onLoadMaterials instanceof Function) {\n                this.callbacks.onLoadMaterials = onLoadMaterials;\n            }\n        },\n        createDefaultMaterials: function (overrideExisting) {\n            let defaultMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });\n            defaultMaterial.name = 'defaultMaterial';\n            let defaultVertexColorMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });\n            defaultVertexColorMaterial.name = 'defaultVertexColorMaterial';\n            defaultVertexColorMaterial.vertexColors = THREE.VertexColors;\n            let defaultLineMaterial = new THREE.LineBasicMaterial();\n            defaultLineMaterial.name = 'defaultLineMaterial';\n            let defaultPointMaterial = new THREE.PointsMaterial({ size: 0.1 });\n            defaultPointMaterial.name = 'defaultPointMaterial';\n            let runtimeMaterials = {};\n            runtimeMaterials[defaultMaterial.name] = defaultMaterial;\n            runtimeMaterials[defaultVertexColorMaterial.name] = defaultVertexColorMaterial;\n            runtimeMaterials[defaultLineMaterial.name] = defaultLineMaterial;\n            runtimeMaterials[defaultPointMaterial.name] = defaultPointMaterial;\n            this.addMaterials(runtimeMaterials, overrideExisting);\n        },\n        addPayloadMaterials: function (materialPayload) {\n            let material, materialName;\n            let materialCloneInstructions = materialPayload.materials.materialCloneInstructions;\n            let newMaterials = {};\n            if (materialCloneInstructions !== undefined && materialCloneInstructions !== null) {\n                let materialNameOrg = materialCloneInstructions.materialNameOrg;\n                materialNameOrg = materialNameOrg !== undefined && materialNameOrg !== null ? materialNameOrg : '';\n                let materialOrg = this.materials[materialNameOrg];\n                if (materialOrg) {\n                    material = materialOrg.clone();\n                    materialName = materialCloneInstructions.materialName;\n                    material.name = materialName;\n                    Object.assign(material, materialCloneInstructions.materialProperties);\n                    this.materials[materialName] = material;\n                    newMaterials[materialName] = material;\n                } else {\n                    if (this.logging.enabled) {\n                        console.info('Requested material \"' + materialNameOrg + '\" is not available!');\n                    }\n                }\n            }\n            let materials = materialPayload.materials.serializedMaterials;\n            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {\n                let loader = new THREE.MaterialLoader();\n                let materialJson;\n                for (materialName in materials) {\n                    materialJson = materials[materialName];\n                    if (materialJson !== undefined && materialJson !== null) {\n                        material = loader.parse(materialJson);\n                        if (this.logging.enabled) {\n                            console.info('De-serialized material with name \"' + materialName + '\" will be added.');\n                        }\n                        this.materials[materialName] = material;\n                        newMaterials[materialName] = material;\n                    }\n                }\n            }\n            materials = materialPayload.materials.runtimeMaterials;\n            newMaterials = this.addMaterials(materials, true, newMaterials);\n            return newMaterials;\n        },\n        addMaterials: function (materials, overrideExisting, newMaterials) {\n            if (newMaterials === undefined || newMaterials === null) {\n                newMaterials = {};\n            }\n            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {\n                let material;\n                let existingMaterial;\n                let add;\n                for (let materialName in materials) {\n                    material = materials[materialName];\n                    add = overrideExisting === true;\n                    if (!add) {\n                        existingMaterial = this.materials[materialName];\n                        add = existingMaterial === null || existingMaterial === undefined;\n                    }\n                    if (add) {\n                        this.materials[materialName] = material;\n                        newMaterials[materialName] = material;\n                    }\n                    if (this.logging.enabled && this.logging.debug) {\n                        console.info('Material with name \"' + materialName + '\" was added.');\n                    }\n                }\n            }\n            if (this.callbacks.onLoadMaterials) {\n                this.callbacks.onLoadMaterials(newMaterials);\n            }\n            return newMaterials;\n        },\n        getMaterials: function () {\n            return this.materials;\n        },\n        getMaterial: function (materialName) {\n            return this.materials[materialName];\n        },\n        getMaterialsJSON: function () {\n            let materialsJSON = {};\n            let material;\n            for (let materialName in this.materials) {\n                material = this.materials[materialName];\n                materialsJSON[materialName] = material.toJSON();\n            }\n            return materialsJSON;\n        },\n        clearMaterials: function () {\n            this.materials = {};\n        }\n    };\n    return MaterialHandler;\n});\ndefine('skylark-threejs-ex/loaders/OBJLoader2',[\n    \"skylark-threejs\",\n    './obj2/OBJLoader2Parser',\n    './obj2/shared/MeshReceiver',\n    './obj2/shared/MaterialHandler'\n], function (\n    THREE, \n    OBJLoader2Parser, \n    MeshReceiver, \n    MaterialHandler\n) {\n    'use strict';\n    const OBJLoader2 = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.parser = new OBJLoader2Parser();\n        this.modelName = '';\n        this.instanceNo = 0;\n        this.baseObject3d = new THREE.Object3D();\n        this.materialHandler = new MaterialHandler();\n        this.meshReceiver = new MeshReceiver(this.materialHandler);\n        let scope = this;\n        let defaultOnAssetAvailable = function (payload) {\n            scope._onAssetAvailable(payload);\n        };\n        this.parser.setCallbackOnAssetAvailable(defaultOnAssetAvailable);\n    };\n    OBJLoader2.OBJLOADER2_VERSION = '3.2.0';\n    console.info('Using OBJLoader2 version: ' + OBJLoader2.OBJLOADER2_VERSION);\n    OBJLoader2.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: OBJLoader2,\n        setLogging: function (enabled, debug) {\n            this.parser.setLogging(enabled, debug);\n            return this;\n        },\n        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {\n            this.parser.setMaterialPerSmoothingGroup(materialPerSmoothingGroup);\n            return this;\n        },\n        setUseOAsMesh: function (useOAsMesh) {\n            this.parser.setUseOAsMesh(useOAsMesh);\n            return this;\n        },\n        setUseIndices: function (useIndices) {\n            this.parser.setUseIndices(useIndices);\n            return this;\n        },\n        setDisregardNormals: function (disregardNormals) {\n            this.parser.setDisregardNormals(disregardNormals);\n            return this;\n        },\n        setModelName: function (modelName) {\n            this.modelName = modelName ? modelName : this.modelName;\n            return this;\n        },\n        setBaseObject3d: function (baseObject3d) {\n            this.baseObject3d = baseObject3d === undefined || baseObject3d === null ? this.baseObject3d : baseObject3d;\n            return this;\n        },\n        addMaterials: function (materials, overrideExisting) {\n            this.materialHandler.addMaterials(materials, overrideExisting);\n            return this;\n        },\n        setCallbackOnAssetAvailable: function (onAssetAvailable) {\n            this.parser.setCallbackOnAssetAvailable(onAssetAvailable);\n            return this;\n        },\n        setCallbackOnProgress: function (onProgress) {\n            this.parser.setCallbackOnProgress(onProgress);\n            return this;\n        },\n        setCallbackOnError: function (onError) {\n            this.parser.setCallbackOnError(onError);\n            return this;\n        },\n        setCallbackOnLoad: function (onLoad) {\n            this.parser.setCallbackOnLoad(onLoad);\n            return this;\n        },\n        setCallbackOnMeshAlter: function (onMeshAlter) {\n            this.meshReceiver._setCallbacks(this.parser.callbacks.onProgress, onMeshAlter);\n            return this;\n        },\n        setCallbackOnLoadMaterials: function (onLoadMaterials) {\n            this.materialHandler._setCallbacks(onLoadMaterials);\n            return this;\n        },\n        load: function (url, onLoad, onFileLoadProgress, onError, onMeshAlter) {\n            let scope = this;\n            if (onLoad === null || onLoad === undefined || !(onLoad instanceof Function)) {\n                let errorMessage = 'onLoad is not a function! Aborting...';\n                scope.parser.callbacks.onError(errorMessage);\n                throw errorMessage;\n            } else {\n                this.parser.setCallbackOnLoad(onLoad);\n            }\n            if (onError === null || onError === undefined || !(onError instanceof Function)) {\n                onError = function (event) {\n                    let errorMessage = event;\n                    if (event.currentTarget && event.currentTarget.statusText !== null) {\n                        errorMessage = 'Error occurred while downloading!\\nurl: ' + event.currentTarget.responseURL + '\\nstatus: ' + event.currentTarget.statusText;\n                    }\n                    scope.parser.callbacks.onError(errorMessage);\n                };\n            }\n            if (!url) {\n                onError('An invalid url was provided. Unable to continue!');\n            }\n            let urlFull = new URL(url, window.location.href).href;\n            let filename = urlFull;\n            let urlParts = urlFull.split('/');\n            if (urlParts.length > 2) {\n                filename = urlParts[urlParts.length - 1];\n                this.path = urlParts.slice(0, urlParts.length - 1).join('/') + '/';\n            }\n            if (onFileLoadProgress === null || onFileLoadProgress === undefined || !(onFileLoadProgress instanceof Function)) {\n                let numericalValueRef = 0;\n                let numericalValue = 0;\n                onFileLoadProgress = function (event) {\n                    if (!event.lengthComputable)\n                        return;\n                    numericalValue = event.loaded / event.total;\n                    if (numericalValue > numericalValueRef) {\n                        numericalValueRef = numericalValue;\n                        let output = 'Download of \"' + url + '\": ' + (numericalValue * 100).toFixed(2) + '%';\n                        scope.parser.callbacks.onProgress('progressLoad', output, numericalValue);\n                    }\n                };\n            }\n            this.setCallbackOnMeshAlter(onMeshAlter);\n            let fileLoaderOnLoad = function (content) {\n                scope.parser.callbacks.onLoad(scope.parse(content), 'OBJLoader2#load: Parsing completed');\n            };\n            let fileLoader = new THREE.FileLoader(this.manager);\n            fileLoader.setPath(this.path || this.resourcePath);\n            fileLoader.setResponseType('arraybuffer');\n            fileLoader.load(filename, fileLoaderOnLoad, onFileLoadProgress, onError);\n        },\n        parse: function (content) {\n            if (content === null || content === undefined) {\n                throw 'Provided content is not a valid ArrayBuffer or String. Unable to continue parsing';\n            }\n            if (this.parser.logging.enabled) {\n                console.time('OBJLoader parse: ' + this.modelName);\n            }\n            this.materialHandler.createDefaultMaterials(false);\n            this.parser.setMaterials(this.materialHandler.getMaterials());\n            if (content instanceof ArrayBuffer || content instanceof Uint8Array) {\n                if (this.parser.logging.enabled)\n                    console.info('Parsing arrayBuffer...');\n                this.parser.execute(content);\n            } else if (typeof content === 'string' || content instanceof String) {\n                if (this.parser.logging.enabled)\n                    console.info('Parsing text...');\n                this.parser.executeLegacy(content);\n            } else {\n                this.parser.callbacks.onError('Provided content was neither of type String nor Uint8Array! Aborting...');\n            }\n            if (this.parser.logging.enabled) {\n                console.timeEnd('OBJLoader parse: ' + this.modelName);\n            }\n            return this.baseObject3d;\n        },\n        _onAssetAvailable: function (payload) {\n            if (payload.cmd !== 'assetAvailable')\n                return;\n            if (payload.type === 'mesh') {\n                let meshes = this.meshReceiver.buildMeshes(payload);\n                for (let mesh of meshes) {\n                    this.baseObject3d.add(mesh);\n                }\n            } else if (payload.type === 'material') {\n                this.materialHandler.addPayloadMaterials(payload);\n            }\n        }\n    });\n    return OBJLoader2;\n});\ndefine('skylark-threejs-ex/loaders/PCDLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PCDLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.littleEndian = true;\n    };\n    PCDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PCDLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                try {\n                    onLoad(scope.parse(data, url));\n                } catch (e) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        throw e;\n                    }\n                }\n            }, onProgress, onError);\n        },\n        parse: function (data, url) {\n            function decompressLZF(inData, outLength) {\n                var inLength = inData.length;\n                var outData = new Uint8Array(outLength);\n                var inPtr = 0;\n                var outPtr = 0;\n                var ctrl;\n                var len;\n                var ref;\n                do {\n                    ctrl = inData[inPtr++];\n                    if (ctrl < 1 << 5) {\n                        ctrl++;\n                        if (outPtr + ctrl > outLength)\n                            throw new Error('Output buffer is not large enough');\n                        if (inPtr + ctrl > inLength)\n                            throw new Error('Invalid compressed data');\n                        do {\n                            outData[outPtr++] = inData[inPtr++];\n                        } while (--ctrl);\n                    } else {\n                        len = ctrl >> 5;\n                        ref = outPtr - ((ctrl & 31) << 8) - 1;\n                        if (inPtr >= inLength)\n                            throw new Error('Invalid compressed data');\n                        if (len === 7) {\n                            len += inData[inPtr++];\n                            if (inPtr >= inLength)\n                                throw new Error('Invalid compressed data');\n                        }\n                        ref -= inData[inPtr++];\n                        if (outPtr + len + 2 > outLength)\n                            throw new Error('Output buffer is not large enough');\n                        if (ref < 0)\n                            throw new Error('Invalid compressed data');\n                        if (ref >= outPtr)\n                            throw new Error('Invalid compressed data');\n                        do {\n                            outData[outPtr++] = outData[ref++];\n                        } while (--len + 2);\n                    }\n                } while (inPtr < inLength);\n                return outData;\n            }\n            function parseHeader(data) {\n                var PCDheader = {};\n                var result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n                var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n                PCDheader.data = result2[1];\n                PCDheader.headerLen = result2[0].length + result1;\n                PCDheader.str = data.substr(0, PCDheader.headerLen);\n                PCDheader.str = PCDheader.str.replace(/\\#.*/gi, '');\n                PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\n                PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\n                PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\n                PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\n                PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\n                PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\n                PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\n                PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\n                PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str);\n                if (PCDheader.version !== null)\n                    PCDheader.version = parseFloat(PCDheader.version[1]);\n                if (PCDheader.fields !== null)\n                    PCDheader.fields = PCDheader.fields[1].split(' ');\n                if (PCDheader.type !== null)\n                    PCDheader.type = PCDheader.type[1].split(' ');\n                if (PCDheader.width !== null)\n                    PCDheader.width = parseInt(PCDheader.width[1]);\n                if (PCDheader.height !== null)\n                    PCDheader.height = parseInt(PCDheader.height[1]);\n                if (PCDheader.viewpoint !== null)\n                    PCDheader.viewpoint = PCDheader.viewpoint[1];\n                if (PCDheader.points !== null)\n                    PCDheader.points = parseInt(PCDheader.points[1], 10);\n                if (PCDheader.points === null)\n                    PCDheader.points = PCDheader.width * PCDheader.height;\n                if (PCDheader.size !== null) {\n                    PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\n                        return parseInt(x, 10);\n                    });\n                }\n                if (PCDheader.count !== null) {\n                    PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\n                        return parseInt(x, 10);\n                    });\n                } else {\n                    PCDheader.count = [];\n                    for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n                        PCDheader.count.push(1);\n                    }\n                }\n                PCDheader.offset = {};\n                var sizeSum = 0;\n                for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\n                    if (PCDheader.data === 'ascii') {\n                        PCDheader.offset[PCDheader.fields[i]] = i;\n                    } else {\n                        PCDheader.offset[PCDheader.fields[i]] = sizeSum;\n                        sizeSum += PCDheader.size[i];\n                    }\n                }\n                PCDheader.rowSize = sizeSum;\n                return PCDheader;\n            }\n            var textData = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n            var PCDheader = parseHeader(textData);\n            var position = [];\n            var normal = [];\n            var color = [];\n            if (PCDheader.data === 'ascii') {\n                var offset = PCDheader.offset;\n                var pcdData = textData.substr(PCDheader.headerLen);\n                var lines = pcdData.split('\\n');\n                for (var i = 0, l = lines.length; i < l; i++) {\n                    if (lines[i] === '')\n                        continue;\n                    var line = lines[i].split(' ');\n                    if (offset.x !== undefined) {\n                        position.push(parseFloat(line[offset.x]));\n                        position.push(parseFloat(line[offset.y]));\n                        position.push(parseFloat(line[offset.z]));\n                    }\n                    if (offset.rgb !== undefined) {\n                        var rgb = parseFloat(line[offset.rgb]);\n                        var r = rgb >> 16 & 255;\n                        var g = rgb >> 8 & 255;\n                        var b = rgb >> 0 & 255;\n                        color.push(r / 255, g / 255, b / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(parseFloat(line[offset.normal_x]));\n                        normal.push(parseFloat(line[offset.normal_y]));\n                        normal.push(parseFloat(line[offset.normal_z]));\n                    }\n                }\n            }\n            if (PCDheader.data === 'binary_compressed') {\n                var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n                var compressedSize = sizes[0];\n                var decompressedSize = sizes[1];\n                var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n                var dataview = new DataView(decompressed.buffer);\n                var offset = PCDheader.offset;\n                for (var i = 0; i < PCDheader.points; i++) {\n                    if (offset.x !== undefined) {\n                        position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n                        position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n                        position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n                    }\n                    if (offset.rgb !== undefined) {\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n                    }\n                }\n            }\n            if (PCDheader.data === 'binary') {\n                var dataview = new DataView(data, PCDheader.headerLen);\n                var offset = PCDheader.offset;\n                for (var i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n                    if (offset.x !== undefined) {\n                        position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n                        position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n                        position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n                    }\n                    if (offset.rgb !== undefined) {\n                        color.push(dataview.getUint8(row + offset.rgb + 2) / 255);\n                        color.push(dataview.getUint8(row + offset.rgb + 1) / 255);\n                        color.push(dataview.getUint8(row + offset.rgb + 0) / 255);\n                    }\n                    if (offset.normal_x !== undefined) {\n                        normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n                        normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n                        normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n                    }\n                }\n            }\n            var geometry = new THREE.BufferGeometry();\n            if (position.length > 0)\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            if (normal.length > 0)\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal, 3));\n            if (color.length > 0)\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\n            geometry.computeBoundingSphere();\n            var material = new THREE.PointsMaterial({ size: 0.005 });\n            if (color.length > 0) {\n                material.vertexColors = true;\n            } else {\n                material.color.setHex(Math.random() * 16777215);\n            }\n            var mesh = new THREE.Points(geometry, material);\n            var name = url.split('').reverse().join('');\n            name = /([^\\/]*)/.exec(name);\n            name = name[1].split('').reverse().join('');\n            mesh.name = name;\n            return mesh;\n        }\n    });\n    return PCDLoader;\n});\ndefine('skylark-threejs-ex/loaders/PLYLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PLYLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.propertyNameMapping = {};\n    };\n    PLYLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PLYLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        setPropertyNameMapping: function (mapping) {\n            this.propertyNameMapping = mapping;\n        },\n        parse: function (data) {\n            function parseHeader(data) {\n                var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n                var headerText = '';\n                var headerLength = 0;\n                var result = patternHeader.exec(data);\n                if (result !== null) {\n                    headerText = result[1];\n                    headerLength = result[0].length;\n                }\n                var header = {\n                    comments: [],\n                    elements: [],\n                    headerLength: headerLength\n                };\n                var lines = headerText.split('\\n');\n                var currentElement;\n                var lineType, lineValues;\n                function make_ply_element_property(propertValues, propertyNameMapping) {\n                    var property = { type: propertValues[0] };\n                    if (property.type === 'list') {\n                        property.name = propertValues[3];\n                        property.countType = propertValues[1];\n                        property.itemType = propertValues[2];\n                    } else {\n                        property.name = propertValues[1];\n                    }\n                    if (property.name in propertyNameMapping) {\n                        property.name = propertyNameMapping[property.name];\n                    }\n                    return property;\n                }\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '')\n                        continue;\n                    lineValues = line.split(/\\s+/);\n                    lineType = lineValues.shift();\n                    line = lineValues.join(' ');\n                    switch (lineType) {\n                    case 'format':\n                        header.format = lineValues[0];\n                        header.version = lineValues[1];\n                        break;\n                    case 'comment':\n                        header.comments.push(line);\n                        break;\n                    case 'element':\n                        if (currentElement !== undefined) {\n                            header.elements.push(currentElement);\n                        }\n                        currentElement = {};\n                        currentElement.name = lineValues[0];\n                        currentElement.count = parseInt(lineValues[1]);\n                        currentElement.properties = [];\n                        break;\n                    case 'property':\n                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n                        break;\n                    default:\n                        console.log('unhandled', lineType, lineValues);\n                    }\n                }\n                if (currentElement !== undefined) {\n                    header.elements.push(currentElement);\n                }\n                return header;\n            }\n            function parseASCIINumber(n, type) {\n                switch (type) {\n                case 'char':\n                case 'uchar':\n                case 'short':\n                case 'ushort':\n                case 'int':\n                case 'uint':\n                case 'int8':\n                case 'uint8':\n                case 'int16':\n                case 'uint16':\n                case 'int32':\n                case 'uint32':\n                    return parseInt(n);\n                case 'float':\n                case 'double':\n                case 'float32':\n                case 'float64':\n                    return parseFloat(n);\n                }\n            }\n            function parseASCIIElement(properties, line) {\n                var values = line.split(/\\s+/);\n                var element = {};\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        var n = parseASCIINumber(values.shift(), properties[i].countType);\n                        for (var j = 0; j < n; j++) {\n                            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n                    }\n                }\n                return element;\n            }\n            function parseASCII(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var result;\n                var patternBody = /end_header\\s([\\s\\S]*)$/;\n                var body = '';\n                if ((result = patternBody.exec(data)) !== null) {\n                    body = result[1];\n                }\n                var lines = body.split('\\n');\n                var currentElement = 0;\n                var currentElementCount = 0;\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '') {\n                        continue;\n                    }\n                    if (currentElementCount >= header.elements[currentElement].count) {\n                        currentElement++;\n                        currentElementCount = 0;\n                    }\n                    var element = parseASCIIElement(header.elements[currentElement].properties, line);\n                    handleElement(buffer, header.elements[currentElement].name, element);\n                    currentElementCount++;\n                }\n                return postProcess(buffer);\n            }\n            function postProcess(buffer) {\n                var geometry = new THREE.BufferGeometry();\n                if (buffer.indices.length > 0) {\n                    geometry.setIndex(buffer.indices);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3));\n                if (buffer.normals.length > 0) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3));\n                }\n                if (buffer.uvs.length > 0) {\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2));\n                }\n                if (buffer.colors.length > 0) {\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3));\n                }\n                if (buffer.faceVertexUvs.length > 0) {\n                    geometry = geometry.toNonIndexed();\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2));\n                }\n                geometry.computeBoundingSphere();\n                return geometry;\n            }\n            function handleElement(buffer, elementName, element) {\n                if (elementName === 'vertex') {\n                    buffer.vertices.push(element.x, element.y, element.z);\n                    if ('nx' in element && 'ny' in element && 'nz' in element) {\n                        buffer.normals.push(element.nx, element.ny, element.nz);\n                    }\n                    if ('s' in element && 't' in element) {\n                        buffer.uvs.push(element.s, element.t);\n                    }\n                    if ('red' in element && 'green' in element && 'blue' in element) {\n                        buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n                    }\n                } else if (elementName === 'face') {\n                    var vertex_indices = element.vertex_indices || element.vertex_index;\n                    var texcoord = element.texcoord;\n                    if (vertex_indices.length === 3) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n                        if (texcoord && texcoord.length === 6) {\n                            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n                            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n                            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n                        }\n                    } else if (vertex_indices.length === 4) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n                        buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n                    }\n                }\n            }\n            function binaryRead(dataview, at, type, little_endian) {\n                switch (type) {\n                case 'int8':\n                case 'char':\n                    return [\n                        dataview.getInt8(at),\n                        1\n                    ];\n                case 'uint8':\n                case 'uchar':\n                    return [\n                        dataview.getUint8(at),\n                        1\n                    ];\n                case 'int16':\n                case 'short':\n                    return [\n                        dataview.getInt16(at, little_endian),\n                        2\n                    ];\n                case 'uint16':\n                case 'ushort':\n                    return [\n                        dataview.getUint16(at, little_endian),\n                        2\n                    ];\n                case 'int32':\n                case 'int':\n                    return [\n                        dataview.getInt32(at, little_endian),\n                        4\n                    ];\n                case 'uint32':\n                case 'uint':\n                    return [\n                        dataview.getUint32(at, little_endian),\n                        4\n                    ];\n                case 'float32':\n                case 'float':\n                    return [\n                        dataview.getFloat32(at, little_endian),\n                        4\n                    ];\n                case 'float64':\n                case 'double':\n                    return [\n                        dataview.getFloat64(at, little_endian),\n                        8\n                    ];\n                }\n            }\n            function binaryReadElement(dataview, at, properties, little_endian) {\n                var element = {};\n                var result, read = 0;\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n                        var n = result[0];\n                        read += result[1];\n                        for (var j = 0; j < n; j++) {\n                            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n                            list.push(result[0]);\n                            read += result[1];\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n                        element[properties[i].name] = result[0];\n                        read += result[1];\n                    }\n                }\n                return [\n                    element,\n                    read\n                ];\n            }\n            function parseBinary(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var little_endian = header.format === 'binary_little_endian';\n                var body = new DataView(data, header.headerLength);\n                var result, loc = 0;\n                for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n                    for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n                        result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n                        loc += result[1];\n                        var element = result[0];\n                        handleElement(buffer, header.elements[currentElement].name, element);\n                    }\n                }\n                return postProcess(buffer);\n            }\n            var geometry;\n            var scope = this;\n            if (data instanceof ArrayBuffer) {\n                var text = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                var header = parseHeader(text);\n                geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n            } else {\n                geometry = parseASCII(data, parseHeader(data));\n            }\n            return geometry;\n        }\n    });\n    return PLYLoader;\n});\ndefine('skylark-threejs-ex/loaders/PRWMLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PRWMLoader = function () {\n        var bigEndianPlatform = null;\n        function isBigEndianPlatform() {\n            if (bigEndianPlatform === null) {\n                var buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);\n                uint8Array[0] = 170;\n                uint8Array[1] = 187;\n                bigEndianPlatform = uint16Array[0] === 43707;\n            }\n            return bigEndianPlatform;\n        }\n        var InvertedEncodingTypes = [\n            null,\n            Float32Array,\n            null,\n            Int8Array,\n            Int16Array,\n            null,\n            Int32Array,\n            Uint8Array,\n            Uint16Array,\n            null,\n            Uint32Array\n        ];\n        var getMethods = {\n            Uint16Array: 'getUint16',\n            Uint32Array: 'getUint32',\n            Int16Array: 'getInt16',\n            Int32Array: 'getInt32',\n            Float32Array: 'getFloat32',\n            Float64Array: 'getFloat64'\n        };\n        function copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n            var bytesPerElement = viewType.BYTES_PER_ELEMENT, result;\n            if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n                result = new viewType(sourceArrayBuffer, position, length);\n            } else {\n                var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian, i = 0;\n                result = new viewType(length);\n                for (; i < length; i++) {\n                    result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n                }\n            }\n            return result;\n        }\n        function decodePrwm(buffer) {\n            var array = new Uint8Array(buffer), version = array[0], flags = array[1], indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31, valuesNumber = 0, indicesNumber = 0;\n            if (bigEndian) {\n                valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n                indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n            } else {\n                valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n                indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n            }\n            if (version === 0) {\n                throw new Error('PRWM decoder: Invalid format version: 0');\n            } else if (version !== 1) {\n                throw new Error('PRWM decoder: Unsupported format version: ' + version);\n            }\n            if (!indexedGeometry) {\n                if (indicesType !== 0) {\n                    throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');\n                } else if (indicesNumber !== 0) {\n                    throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');\n                }\n            }\n            var pos = 8;\n            var attributes = {}, attributeName, char, attributeType, cardinality, encodingType, arrayType, values, indices, i;\n            for (i = 0; i < attributesNumber; i++) {\n                attributeName = '';\n                while (pos < array.length) {\n                    char = array[pos];\n                    pos++;\n                    if (char === 0) {\n                        break;\n                    } else {\n                        attributeName += String.fromCharCode(char);\n                    }\n                }\n                flags = array[pos];\n                attributeType = flags >> 7 & 1;\n                cardinality = (flags >> 4 & 3) + 1;\n                encodingType = flags & 15;\n                arrayType = InvertedEncodingTypes[encodingType];\n                pos++;\n                pos = Math.ceil(pos / 4) * 4;\n                values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n                pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n                attributes[attributeName] = {\n                    type: attributeType,\n                    cardinality: cardinality,\n                    values: values\n                };\n            }\n            pos = Math.ceil(pos / 4) * 4;\n            indices = null;\n            if (indexedGeometry) {\n                indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n            }\n            return {\n                version: version,\n                attributes: attributes,\n                indices: indices\n            };\n        }\n        function PRWMLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        PRWMLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: PRWMLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var loader = new THREE.FileLoader(scope.manager);\n                loader.setPath(scope.path);\n                loader.setResponseType('arraybuffer');\n                url = url.replace(/\\*/g, isBigEndianPlatform() ? 'be' : 'le');\n                loader.load(url, function (arrayBuffer) {\n                    onLoad(scope.parse(arrayBuffer));\n                }, onProgress, onError);\n            },\n            parse: function (arrayBuffer) {\n                var data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new THREE.BufferGeometry(), attribute, i;\n                for (i = 0; i < attributesKey.length; i++) {\n                    attribute = data.attributes[attributesKey[i]];\n                    bufferGeometry.setAttribute(attributesKey[i], new THREE.BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n                }\n                if (data.indices !== null) {\n                    bufferGeometry.setIndex(new THREE.BufferAttribute(data.indices, 1));\n                }\n                return bufferGeometry;\n            }\n        });\n        PRWMLoader.isBigEndianPlatform = function () {\n            return isBigEndianPlatform();\n        };\n        return PRWMLoader;\n    }();\n    return PRWMLoader;\n});\ndefine('skylark-threejs-ex/loaders/STLLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var STLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    STLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: STLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                try {\n                    onLoad(scope.parse(text));\n                } catch (exception) {\n                    if (onError) {\n                        onError(exception);\n                    }\n                }\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function isBinary(data) {\n                var expect, face_size, n_faces, reader;\n                reader = new DataView(data);\n                face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                n_faces = reader.getUint32(80, true);\n                expect = 80 + 32 / 8 + n_faces * face_size;\n                if (expect === reader.byteLength) {\n                    return true;\n                }\n                var solid = [\n                    115,\n                    111,\n                    108,\n                    105,\n                    100\n                ];\n                for (var off = 0; off < 5; off++) {\n                    if (matchDataViewAt(solid, reader, off))\n                        return false;\n                }\n                return true;\n            }\n            function matchDataViewAt(query, reader, offset) {\n                for (var i = 0, il = query.length; i < il; i++) {\n                    if (query[i] !== reader.getUint8(offset + i, false))\n                        return false;\n                }\n                return true;\n            }\n            function parseBinary(data) {\n                var reader = new DataView(data);\n                var faces = reader.getUint32(80, true);\n                var r, g, b, hasColors = false, colors;\n                var defaultR, defaultG, defaultB, alpha;\n                for (var index = 0; index < 80 - 10; index++) {\n                    if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n                        hasColors = true;\n                        colors = new Float32Array(faces * 3 * 3);\n                        defaultR = reader.getUint8(index + 6) / 255;\n                        defaultG = reader.getUint8(index + 7) / 255;\n                        defaultB = reader.getUint8(index + 8) / 255;\n                        alpha = reader.getUint8(index + 9) / 255;\n                    }\n                }\n                var dataOffset = 84;\n                var faceLength = 12 * 4 + 2;\n                var geometry = new THREE.BufferGeometry();\n                var vertices = new Float32Array(faces * 3 * 3);\n                var normals = new Float32Array(faces * 3 * 3);\n                for (var face = 0; face < faces; face++) {\n                    var start = dataOffset + face * faceLength;\n                    var normalX = reader.getFloat32(start, true);\n                    var normalY = reader.getFloat32(start + 4, true);\n                    var normalZ = reader.getFloat32(start + 8, true);\n                    if (hasColors) {\n                        var packedColor = reader.getUint16(start + 48, true);\n                        if ((packedColor & 32768) === 0) {\n                            r = (packedColor & 31) / 31;\n                            g = (packedColor >> 5 & 31) / 31;\n                            b = (packedColor >> 10 & 31) / 31;\n                        } else {\n                            r = defaultR;\n                            g = defaultG;\n                            b = defaultB;\n                        }\n                    }\n                    for (var i = 1; i <= 3; i++) {\n                        var vertexstart = start + i * 12;\n                        var componentIdx = face * 3 * 3 + (i - 1) * 3;\n                        vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n                        vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n                        vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n                        normals[componentIdx] = normalX;\n                        normals[componentIdx + 1] = normalY;\n                        normals[componentIdx + 2] = normalZ;\n                        if (hasColors) {\n                            colors[componentIdx] = r;\n                            colors[componentIdx + 1] = g;\n                            colors[componentIdx + 2] = b;\n                        }\n                    }\n                }\n                geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n                geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                if (hasColors) {\n                    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n                    geometry.hasColors = true;\n                    geometry.alpha = alpha;\n                }\n                return geometry;\n            }\n            function parseASCII(data) {\n                var geometry = new THREE.BufferGeometry();\n                var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n                var patternFace = /facet([\\s\\S]*?)endfacet/g;\n                var faceCounter = 0;\n                var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n                var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n                var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n                var vertices = [];\n                var normals = [];\n                var normal = new THREE.Vector3();\n                var result;\n                var groupCount = 0;\n                var startVertex = 0;\n                var endVertex = 0;\n                while ((result = patternSolid.exec(data)) !== null) {\n                    startVertex = endVertex;\n                    var solid = result[0];\n                    while ((result = patternFace.exec(solid)) !== null) {\n                        var vertexCountPerFace = 0;\n                        var normalCountPerFace = 0;\n                        var text = result[0];\n                        while ((result = patternNormal.exec(text)) !== null) {\n                            normal.x = parseFloat(result[1]);\n                            normal.y = parseFloat(result[2]);\n                            normal.z = parseFloat(result[3]);\n                            normalCountPerFace++;\n                        }\n                        while ((result = patternVertex.exec(text)) !== null) {\n                            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n                            normals.push(normal.x, normal.y, normal.z);\n                            vertexCountPerFace++;\n                            endVertex++;\n                        }\n                        if (normalCountPerFace !== 1) {\n                            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n                        }\n                        if (vertexCountPerFace !== 3) {\n                            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n                        }\n                        faceCounter++;\n                    }\n                    var start = startVertex;\n                    var count = endVertex - startVertex;\n                    geometry.addGroup(start, count, groupCount);\n                    groupCount++;\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                return geometry;\n            }\n            function ensureString(buffer) {\n                if (typeof buffer !== 'string') {\n                    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer));\n                }\n                return buffer;\n            }\n            function ensureBinary(buffer) {\n                if (typeof buffer === 'string') {\n                    var array_buffer = new Uint8Array(buffer.length);\n                    for (var i = 0; i < buffer.length; i++) {\n                        array_buffer[i] = buffer.charCodeAt(i) & 255;\n                    }\n                    return array_buffer.buffer || array_buffer;\n                } else {\n                    return buffer;\n                }\n            }\n            var binData = ensureBinary(data);\n            return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n        }\n    });\n    return STLLoader;\n});\ndefine('skylark-threejs-ex/loaders/SVGLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SVGLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.defaultDPI = 90;\n        this.defaultUnit = 'px';\n    };\n    SVGLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: SVGLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (text) {\n            var scope = this;\n            function parseNode(node, style) {\n                if (node.nodeType !== 1)\n                    return;\n                var transform = getNodeTransform(node);\n                var path = null;\n                switch (node.nodeName) {\n                case 'svg':\n                    break;\n                case 'g':\n                    style = parseStyle(node, style);\n                    break;\n                case 'path':\n                    style = parseStyle(node, style);\n                    if (node.hasAttribute('d'))\n                        path = parsePathNode(node);\n                    break;\n                case 'rect':\n                    style = parseStyle(node, style);\n                    path = parseRectNode(node);\n                    break;\n                case 'polygon':\n                    style = parseStyle(node, style);\n                    path = parsePolygonNode(node);\n                    break;\n                case 'polyline':\n                    style = parseStyle(node, style);\n                    path = parsePolylineNode(node);\n                    break;\n                case 'circle':\n                    style = parseStyle(node, style);\n                    path = parseCircleNode(node);\n                    break;\n                case 'ellipse':\n                    style = parseStyle(node, style);\n                    path = parseEllipseNode(node);\n                    break;\n                case 'line':\n                    style = parseStyle(node, style);\n                    path = parseLineNode(node);\n                    break;\n                default:\n                    console.log(node);\n                }\n                if (path) {\n                    if (style.fill !== undefined && style.fill !== 'none') {\n                        path.color.setStyle(style.fill);\n                    }\n                    transformPath(path, currentTransform);\n                    paths.push(path);\n                    path.userData = {\n                        node: node,\n                        style: style\n                    };\n                }\n                var nodes = node.childNodes;\n                for (var i = 0; i < nodes.length; i++) {\n                    parseNode(nodes[i], style);\n                }\n                if (transform) {\n                    transformStack.pop();\n                    if (transformStack.length > 0) {\n                        currentTransform.copy(transformStack[transformStack.length - 1]);\n                    } else {\n                        currentTransform.identity();\n                    }\n                }\n            }\n            function parsePathNode(node) {\n                var path = new THREE.ShapePath();\n                var point = new THREE.Vector2();\n                var control = new THREE.Vector2();\n                var firstPoint = new THREE.Vector2();\n                var isFirstPoint = true;\n                var doSetFirstPoint = false;\n                var d = node.getAttribute('d');\n                var commands = d.match(/[a-df-z][^a-df-z]*/ig);\n                for (var i = 0, l = commands.length; i < l; i++) {\n                    var command = commands[i];\n                    var type = command.charAt(0);\n                    var data = command.substr(1).trim();\n                    if (isFirstPoint === true) {\n                        doSetFirstPoint = true;\n                        isFirstPoint = false;\n                    }\n                    switch (type) {\n                    case 'M':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            if (j === 0) {\n                                path.moveTo(point.x, point.y);\n                            } else {\n                                path.lineTo(point.x, point.y);\n                            }\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'H':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.x = numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'V':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.y = numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'L':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'C':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {\n                            path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n                            control.x = numbers[j + 2];\n                            control.y = numbers[j + 3];\n                            point.x = numbers[j + 4];\n                            point.y = numbers[j + 5];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'S':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n                            control.x = numbers[j + 0];\n                            control.y = numbers[j + 1];\n                            point.x = numbers[j + 2];\n                            point.y = numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'Q':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n                            control.x = numbers[j + 0];\n                            control.y = numbers[j + 1];\n                            point.x = numbers[j + 2];\n                            point.y = numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'T':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            var rx = getReflection(point.x, control.x);\n                            var ry = getReflection(point.y, control.y);\n                            path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n                            control.x = rx;\n                            control.y = ry;\n                            point.x = numbers[j + 0];\n                            point.y = numbers[j + 1];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'A':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {\n                            var start = point.clone();\n                            point.x = numbers[j + 5];\n                            point.y = numbers[j + 6];\n                            control.x = point.x;\n                            control.y = point.y;\n                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'm':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x += numbers[j + 0];\n                            point.y += numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            if (j === 0) {\n                                path.moveTo(point.x, point.y);\n                            } else {\n                                path.lineTo(point.x, point.y);\n                            }\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'h':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.x += numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'v':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j++) {\n                            point.y += numbers[j];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'l':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            point.x += numbers[j + 0];\n                            point.y += numbers[j + 1];\n                            control.x = point.x;\n                            control.y = point.y;\n                            path.lineTo(point.x, point.y);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'c':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 6) {\n                            path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n                            control.x = point.x + numbers[j + 2];\n                            control.y = point.y + numbers[j + 3];\n                            point.x += numbers[j + 4];\n                            point.y += numbers[j + 5];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 's':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n                            control.x = point.x + numbers[j + 0];\n                            control.y = point.y + numbers[j + 1];\n                            point.x += numbers[j + 2];\n                            point.y += numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'q':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 4) {\n                            path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n                            control.x = point.x + numbers[j + 0];\n                            control.y = point.y + numbers[j + 1];\n                            point.x += numbers[j + 2];\n                            point.y += numbers[j + 3];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 't':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n                            var rx = getReflection(point.x, control.x);\n                            var ry = getReflection(point.y, control.y);\n                            path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n                            control.x = rx;\n                            control.y = ry;\n                            point.x = point.x + numbers[j + 0];\n                            point.y = point.y + numbers[j + 1];\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'a':\n                        var numbers = parseFloats(data);\n                        for (var j = 0, jl = numbers.length; j < jl; j += 7) {\n                            var start = point.clone();\n                            point.x += numbers[j + 5];\n                            point.y += numbers[j + 6];\n                            control.x = point.x;\n                            control.y = point.y;\n                            parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n                            if (j === 0 && doSetFirstPoint === true)\n                                firstPoint.copy(point);\n                        }\n                        break;\n                    case 'Z':\n                    case 'z':\n                        path.currentPath.autoClose = true;\n                        if (path.currentPath.curves.length > 0) {\n                            point.copy(firstPoint);\n                            path.currentPath.currentPoint.copy(point);\n                            isFirstPoint = true;\n                        }\n                        break;\n                    default:\n                        console.warn(command);\n                    }\n                    doSetFirstPoint = false;\n                }\n                return path;\n            }\n            function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n                x_axis_rotation = x_axis_rotation * Math.PI / 180;\n                rx = Math.abs(rx);\n                ry = Math.abs(ry);\n                var dx2 = (start.x - end.x) / 2;\n                var dy2 = (start.y - end.y) / 2;\n                var x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n                var y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n                var rxs = rx * rx;\n                var rys = ry * ry;\n                var x1ps = x1p * x1p;\n                var y1ps = y1p * y1p;\n                var cr = x1ps / rxs + y1ps / rys;\n                if (cr > 1) {\n                    var s = Math.sqrt(cr);\n                    rx = s * rx;\n                    ry = s * ry;\n                    rxs = rx * rx;\n                    rys = ry * ry;\n                }\n                var dq = rxs * y1ps + rys * x1ps;\n                var pq = (rxs * rys - dq) / dq;\n                var q = Math.sqrt(Math.max(0, pq));\n                if (large_arc_flag === sweep_flag)\n                    q = -q;\n                var cxp = q * rx * y1p / ry;\n                var cyp = -q * ry * x1p / rx;\n                var cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n                var cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n                var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n                var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n                path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n            }\n            function svgAngle(ux, uy, vx, vy) {\n                var dot = ux * vx + uy * vy;\n                var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n                var ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n                if (ux * vy - uy * vx < 0)\n                    ang = -ang;\n                return ang;\n            }\n            function parseRectNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('x') || 0);\n                var y = parseFloatWithUnits(node.getAttribute('y') || 0);\n                var rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n                var ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n                var w = parseFloatWithUnits(node.getAttribute('width'));\n                var h = parseFloatWithUnits(node.getAttribute('height'));\n                var path = new THREE.ShapePath();\n                path.moveTo(x + 2 * rx, y);\n                path.lineTo(x + w - 2 * rx, y);\n                if (rx !== 0 || ry !== 0)\n                    path.bezierCurveTo(x + w, y, x + w, y, x + w, y + 2 * ry);\n                path.lineTo(x + w, y + h - 2 * ry);\n                if (rx !== 0 || ry !== 0)\n                    path.bezierCurveTo(x + w, y + h, x + w, y + h, x + w - 2 * rx, y + h);\n                path.lineTo(x + 2 * rx, y + h);\n                if (rx !== 0 || ry !== 0) {\n                    path.bezierCurveTo(x, y + h, x, y + h, x, y + h - 2 * ry);\n                }\n                path.lineTo(x, y + 2 * ry);\n                if (rx !== 0 || ry !== 0) {\n                    path.bezierCurveTo(x, y, x, y, x + 2 * rx, y);\n                }\n                return path;\n            }\n            function parsePolygonNode(node) {\n                function iterator(match, a, b) {\n                    var x = parseFloatWithUnits(a);\n                    var y = parseFloatWithUnits(b);\n                    if (index === 0) {\n                        path.moveTo(x, y);\n                    } else {\n                        path.lineTo(x, y);\n                    }\n                    index++;\n                }\n                var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n                var path = new THREE.ShapePath();\n                var index = 0;\n                node.getAttribute('points').replace(regex, iterator);\n                path.currentPath.autoClose = true;\n                return path;\n            }\n            function parsePolylineNode(node) {\n                function iterator(match, a, b) {\n                    var x = parseFloatWithUnits(a);\n                    var y = parseFloatWithUnits(b);\n                    if (index === 0) {\n                        path.moveTo(x, y);\n                    } else {\n                        path.lineTo(x, y);\n                    }\n                    index++;\n                }\n                var regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n                var path = new THREE.ShapePath();\n                var index = 0;\n                node.getAttribute('points').replace(regex, iterator);\n                path.currentPath.autoClose = false;\n                return path;\n            }\n            function parseCircleNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('cx'));\n                var y = parseFloatWithUnits(node.getAttribute('cy'));\n                var r = parseFloatWithUnits(node.getAttribute('r'));\n                var subpath = new THREE.Path();\n                subpath.absarc(x, y, r, 0, Math.PI * 2);\n                var path = new THREE.ShapePath();\n                path.subPaths.push(subpath);\n                return path;\n            }\n            function parseEllipseNode(node) {\n                var x = parseFloatWithUnits(node.getAttribute('cx'));\n                var y = parseFloatWithUnits(node.getAttribute('cy'));\n                var rx = parseFloatWithUnits(node.getAttribute('rx'));\n                var ry = parseFloatWithUnits(node.getAttribute('ry'));\n                var subpath = new THREE.Path();\n                subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n                var path = new THREE.ShapePath();\n                path.subPaths.push(subpath);\n                return path;\n            }\n            function parseLineNode(node) {\n                var x1 = parseFloatWithUnits(node.getAttribute('x1'));\n                var y1 = parseFloatWithUnits(node.getAttribute('y1'));\n                var x2 = parseFloatWithUnits(node.getAttribute('x2'));\n                var y2 = parseFloatWithUnits(node.getAttribute('y2'));\n                var path = new THREE.ShapePath();\n                path.moveTo(x1, y1);\n                path.lineTo(x2, y2);\n                path.currentPath.autoClose = false;\n                return path;\n            }\n            function parseStyle(node, style) {\n                style = Object.assign({}, style);\n                function addStyle(svgName, jsName, adjustFunction) {\n                    if (adjustFunction === undefined)\n                        adjustFunction = function copy(v) {\n                            return v;\n                        };\n                    if (node.hasAttribute(svgName))\n                        style[jsName] = adjustFunction(node.getAttribute(svgName));\n                    if (node.style && node.style[svgName] !== '')\n                        style[jsName] = adjustFunction(node.style[svgName]);\n                }\n                function clamp(v) {\n                    return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n                }\n                function positive(v) {\n                    return Math.max(0, parseFloatWithUnits(v));\n                }\n                addStyle('fill', 'fill');\n                addStyle('fill-opacity', 'fillOpacity', clamp);\n                addStyle('stroke', 'stroke');\n                addStyle('stroke-opacity', 'strokeOpacity', clamp);\n                addStyle('stroke-width', 'strokeWidth', positive);\n                addStyle('stroke-linejoin', 'strokeLineJoin');\n                addStyle('stroke-linecap', 'strokeLineCap');\n                addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n                return style;\n            }\n            function getReflection(a, b) {\n                return a - (b - a);\n            }\n            function parseFloats(string) {\n                var array = string.split(/[\\s,]+|(?=\\s?[+\\-])/);\n                for (var i = 0; i < array.length; i++) {\n                    var number = array[i];\n                    if (number.indexOf('.') !== number.lastIndexOf('.')) {\n                        var split = number.split('.');\n                        for (var s = 2; s < split.length; s++) {\n                            array.splice(i + s - 1, 0, '0.' + split[s]);\n                        }\n                    }\n                    array[i] = parseFloatWithUnits(number);\n                }\n                return array;\n            }\n            var units = [\n                'mm',\n                'cm',\n                'in',\n                'pt',\n                'pc',\n                'px'\n            ];\n            var unitConversion = {\n                'mm': {\n                    'mm': 1,\n                    'cm': 0.1,\n                    'in': 1 / 25.4,\n                    'pt': 72 / 25.4,\n                    'pc': 6 / 25.4,\n                    'px': -1\n                },\n                'cm': {\n                    'mm': 10,\n                    'cm': 1,\n                    'in': 1 / 2.54,\n                    'pt': 72 / 2.54,\n                    'pc': 6 / 2.54,\n                    'px': -1\n                },\n                'in': {\n                    'mm': 25.4,\n                    'cm': 2.54,\n                    'in': 1,\n                    'pt': 72,\n                    'pc': 6,\n                    'px': -1\n                },\n                'pt': {\n                    'mm': 25.4 / 72,\n                    'cm': 2.54 / 72,\n                    'in': 1 / 72,\n                    'pt': 1,\n                    'pc': 6 / 72,\n                    'px': -1\n                },\n                'pc': {\n                    'mm': 25.4 / 6,\n                    'cm': 2.54 / 6,\n                    'in': 1 / 6,\n                    'pt': 72 / 6,\n                    'pc': 1,\n                    'px': -1\n                },\n                'px': { 'px': 1 }\n            };\n            function parseFloatWithUnits(string) {\n                var theUnit = 'px';\n                if (typeof string === 'string' || string instanceof String) {\n                    for (var i = 0, n = units.length; i < n; i++) {\n                        var u = units[i];\n                        if (string.endsWith(u)) {\n                            theUnit = u;\n                            string = string.substring(0, string.length - u.length);\n                            break;\n                        }\n                    }\n                }\n                var scale = undefined;\n                if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n                    scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n                } else {\n                    scale = unitConversion[theUnit][scope.defaultUnit];\n                    if (scale < 0) {\n                        scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n                    }\n                }\n                return scale * parseFloat(string);\n            }\n            function getNodeTransform(node) {\n                if (!node.hasAttribute('transform')) {\n                    return null;\n                }\n                var transform = parseNodeTransform(node);\n                if (transformStack.length > 0) {\n                    transform.premultiply(transformStack[transformStack.length - 1]);\n                }\n                currentTransform.copy(transform);\n                transformStack.push(transform);\n                return transform;\n            }\n            function parseNodeTransform(node) {\n                var transform = new THREE.Matrix3();\n                var currentTransform = tempTransform0;\n                var transformsTexts = node.getAttribute('transform').split(')');\n                for (var tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n                    var transformText = transformsTexts[tIndex].trim();\n                    if (transformText === '')\n                        continue;\n                    var openParPos = transformText.indexOf('(');\n                    var closeParPos = transformText.length;\n                    if (openParPos > 0 && openParPos < closeParPos) {\n                        var transformType = transformText.substr(0, openParPos);\n                        var array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n                        currentTransform.identity();\n                        switch (transformType) {\n                        case 'translate':\n                            if (array.length >= 1) {\n                                var tx = array[0];\n                                var ty = tx;\n                                if (array.length >= 2) {\n                                    ty = array[1];\n                                }\n                                currentTransform.translate(tx, ty);\n                            }\n                            break;\n                        case 'rotate':\n                            if (array.length >= 1) {\n                                var angle = 0;\n                                var cx = 0;\n                                var cy = 0;\n                                angle = -array[0] * Math.PI / 180;\n                                if (array.length >= 3) {\n                                    cx = array[1];\n                                    cy = array[2];\n                                }\n                                tempTransform1.identity().translate(-cx, -cy);\n                                tempTransform2.identity().rotate(angle);\n                                tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                                tempTransform1.identity().translate(cx, cy);\n                                currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                            }\n                            break;\n                        case 'scale':\n                            if (array.length >= 1) {\n                                var scaleX = array[0];\n                                var scaleY = scaleX;\n                                if (array.length >= 2) {\n                                    scaleY = array[1];\n                                }\n                                currentTransform.scale(scaleX, scaleY);\n                            }\n                            break;\n                        case 'skewX':\n                            if (array.length === 1) {\n                                currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                            }\n                            break;\n                        case 'skewY':\n                            if (array.length === 1) {\n                                currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                            }\n                            break;\n                        case 'matrix':\n                            if (array.length === 6) {\n                                currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                            }\n                            break;\n                        }\n                    }\n                    transform.premultiply(currentTransform);\n                }\n                return transform;\n            }\n            function transformPath(path, m) {\n                function transfVec2(v2) {\n                    tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n                    v2.set(tempV3.x, tempV3.y);\n                }\n                var isRotated = isTransformRotated(m);\n                var subPaths = path.subPaths;\n                for (var i = 0, n = subPaths.length; i < n; i++) {\n                    var subPath = subPaths[i];\n                    var curves = subPath.curves;\n                    for (var j = 0; j < curves.length; j++) {\n                        var curve = curves[j];\n                        if (curve.isLineCurve) {\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                        } else if (curve.isCubicBezierCurve) {\n                            transfVec2(curve.v0);\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                            transfVec2(curve.v3);\n                        } else if (curve.isQuadraticBezierCurve) {\n                            transfVec2(curve.v0);\n                            transfVec2(curve.v1);\n                            transfVec2(curve.v2);\n                        } else if (curve.isEllipseCurve) {\n                            if (isRotated) {\n                                console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n                            }\n                            tempV2.set(curve.aX, curve.aY);\n                            transfVec2(tempV2);\n                            curve.aX = tempV2.x;\n                            curve.aY = tempV2.y;\n                            curve.xRadius *= getTransformScaleX(m);\n                            curve.yRadius *= getTransformScaleY(m);\n                        }\n                    }\n                }\n            }\n            function isTransformRotated(m) {\n                return m.elements[1] !== 0 || m.elements[3] !== 0;\n            }\n            function getTransformScaleX(m) {\n                var te = m.elements;\n                return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n            }\n            function getTransformScaleY(m) {\n                var te = m.elements;\n                return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n            }\n            var paths = [];\n            var transformStack = [];\n            var tempTransform0 = new THREE.Matrix3();\n            var tempTransform1 = new THREE.Matrix3();\n            var tempTransform2 = new THREE.Matrix3();\n            var tempTransform3 = new THREE.Matrix3();\n            var tempV2 = new THREE.Vector2();\n            var tempV3 = new THREE.Vector3();\n            var currentTransform = new THREE.Matrix3();\n            var xml = new DOMParser().parseFromString(text, 'image/svg+xml');\n            parseNode(xml.documentElement, {\n                fill: '#000',\n                fillOpacity: 1,\n                strokeOpacity: 1,\n                strokeWidth: 1,\n                strokeLineJoin: 'miter',\n                strokeLineCap: 'butt',\n                strokeMiterLimit: 4\n            });\n            var data = {\n                paths: paths,\n                xml: xml.documentElement\n            };\n            return data;\n        }\n    });\n    SVGLoader.getStrokeStyle = function (width, color, lineJoin, lineCap, miterLimit) {\n        width = width !== undefined ? width : 1;\n        color = color !== undefined ? color : '#000';\n        lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n        lineCap = lineCap !== undefined ? lineCap : 'butt';\n        miterLimit = miterLimit !== undefined ? miterLimit : 4;\n        return {\n            strokeColor: color,\n            strokeWidth: width,\n            strokeLineJoin: lineJoin,\n            strokeLineCap: lineCap,\n            strokeMiterLimit: miterLimit\n        };\n    };\n    SVGLoader.pointsToStroke = function (points, style, arcDivisions, minDistance) {\n        var vertices = [];\n        var normals = [];\n        var uvs = [];\n        if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n            return null;\n        }\n        var geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n        geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n        return geometry;\n    };\n    SVGLoader.pointsToStrokeWithBuffers = function () {\n        var tempV2_1 = new THREE.Vector2();\n        var tempV2_2 = new THREE.Vector2();\n        var tempV2_3 = new THREE.Vector2();\n        var tempV2_4 = new THREE.Vector2();\n        var tempV2_5 = new THREE.Vector2();\n        var tempV2_6 = new THREE.Vector2();\n        var tempV2_7 = new THREE.Vector2();\n        var lastPointL = new THREE.Vector2();\n        var lastPointR = new THREE.Vector2();\n        var point0L = new THREE.Vector2();\n        var point0R = new THREE.Vector2();\n        var currentPointL = new THREE.Vector2();\n        var currentPointR = new THREE.Vector2();\n        var nextPointL = new THREE.Vector2();\n        var nextPointR = new THREE.Vector2();\n        var innerPoint = new THREE.Vector2();\n        var outerPoint = new THREE.Vector2();\n        return function (points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n            arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n            minDistance = minDistance !== undefined ? minDistance : 0.001;\n            vertexOffset = vertexOffset !== undefined ? vertexOffset : 0;\n            points = removeDuplicatedPoints(points);\n            var numPoints = points.length;\n            if (numPoints < 2)\n                return 0;\n            var isClosed = points[0].equals(points[numPoints - 1]);\n            var currentPoint;\n            var previousPoint = points[0];\n            var nextPoint;\n            var strokeWidth2 = style.strokeWidth / 2;\n            var deltaU = 1 / (numPoints - 1);\n            var u0 = 0;\n            var innerSideModified;\n            var joinIsOnLeftSide;\n            var isMiter;\n            var initialJoinIsOnLeftSide = false;\n            var numVertices = 0;\n            var currentCoordinate = vertexOffset * 3;\n            var currentCoordinateUV = vertexOffset * 2;\n            getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n            lastPointL.copy(points[0]).sub(tempV2_1);\n            lastPointR.copy(points[0]).add(tempV2_1);\n            point0L.copy(lastPointL);\n            point0R.copy(lastPointR);\n            for (var iPoint = 1; iPoint < numPoints; iPoint++) {\n                currentPoint = points[iPoint];\n                if (iPoint === numPoints - 1) {\n                    if (isClosed) {\n                        nextPoint = points[1];\n                    } else\n                        nextPoint = undefined;\n                } else {\n                    nextPoint = points[iPoint + 1];\n                }\n                var normal1 = tempV2_1;\n                getNormal(previousPoint, currentPoint, normal1);\n                tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n                currentPointL.copy(currentPoint).sub(tempV2_3);\n                currentPointR.copy(currentPoint).add(tempV2_3);\n                var u1 = u0 + deltaU;\n                innerSideModified = false;\n                if (nextPoint !== undefined) {\n                    getNormal(currentPoint, nextPoint, tempV2_2);\n                    tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n                    nextPointL.copy(currentPoint).sub(tempV2_3);\n                    nextPointR.copy(currentPoint).add(tempV2_3);\n                    joinIsOnLeftSide = true;\n                    tempV2_3.subVectors(nextPoint, previousPoint);\n                    if (normal1.dot(tempV2_3) < 0) {\n                        joinIsOnLeftSide = false;\n                    }\n                    if (iPoint === 1)\n                        initialJoinIsOnLeftSide = joinIsOnLeftSide;\n                    tempV2_3.subVectors(nextPoint, currentPoint);\n                    tempV2_3.normalize();\n                    var dot = Math.abs(normal1.dot(tempV2_3));\n                    if (dot !== 0) {\n                        var miterSide = strokeWidth2 / dot;\n                        tempV2_3.multiplyScalar(-miterSide);\n                        tempV2_4.subVectors(currentPoint, previousPoint);\n                        tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n                        innerPoint.copy(tempV2_5).negate();\n                        var miterLength2 = tempV2_5.length();\n                        var segmentLengthPrev = tempV2_4.length();\n                        tempV2_4.divideScalar(segmentLengthPrev);\n                        tempV2_6.subVectors(nextPoint, currentPoint);\n                        var segmentLengthNext = tempV2_6.length();\n                        tempV2_6.divideScalar(segmentLengthNext);\n                        if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n                            innerSideModified = true;\n                        }\n                        outerPoint.copy(tempV2_5).add(currentPoint);\n                        innerPoint.add(currentPoint);\n                        isMiter = false;\n                        if (innerSideModified) {\n                            if (joinIsOnLeftSide) {\n                                nextPointR.copy(innerPoint);\n                                currentPointR.copy(innerPoint);\n                            } else {\n                                nextPointL.copy(innerPoint);\n                                currentPointL.copy(innerPoint);\n                            }\n                        } else {\n                            makeSegmentTriangles();\n                        }\n                        switch (style.strokeLineJoin) {\n                        case 'bevel':\n                            makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                            break;\n                        case 'round':\n                            createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                            if (joinIsOnLeftSide) {\n                                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n                            } else {\n                                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n                            }\n                            break;\n                        case 'miter':\n                        case 'miter-clip':\n                        default:\n                            var miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n                            if (miterFraction < 1) {\n                                if (style.strokeLineJoin !== 'miter-clip') {\n                                    makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                                    break;\n                                } else {\n                                    createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                                    if (joinIsOnLeftSide) {\n                                        tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                                        tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                                        addVertex(currentPointL, u1, 0);\n                                        addVertex(tempV2_6, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_6, u1, 0);\n                                        addVertex(tempV2_7, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_7, u1, 0);\n                                        addVertex(nextPointL, u1, 0);\n                                    } else {\n                                        tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                                        tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                                        addVertex(currentPointR, u1, 1);\n                                        addVertex(tempV2_6, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_6, u1, 1);\n                                        addVertex(tempV2_7, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(tempV2_7, u1, 1);\n                                        addVertex(nextPointR, u1, 1);\n                                    }\n                                }\n                            } else {\n                                if (innerSideModified) {\n                                    if (joinIsOnLeftSide) {\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(innerPoint, u1, 1);\n                                    } else {\n                                        addVertex(lastPointR, u0, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(lastPointL, u0, 0);\n                                        addVertex(innerPoint, u1, 0);\n                                        addVertex(outerPoint, u1, 1);\n                                    }\n                                    if (joinIsOnLeftSide) {\n                                        nextPointL.copy(outerPoint);\n                                    } else {\n                                        nextPointR.copy(outerPoint);\n                                    }\n                                } else {\n                                    if (joinIsOnLeftSide) {\n                                        addVertex(currentPointL, u1, 0);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(outerPoint, u1, 0);\n                                        addVertex(nextPointL, u1, 0);\n                                    } else {\n                                        addVertex(currentPointR, u1, 1);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(currentPoint, u1, 0.5);\n                                        addVertex(outerPoint, u1, 1);\n                                        addVertex(nextPointR, u1, 1);\n                                    }\n                                }\n                                isMiter = true;\n                            }\n                            break;\n                        }\n                    } else {\n                        makeSegmentTriangles();\n                    }\n                } else {\n                    makeSegmentTriangles();\n                }\n                if (!isClosed && iPoint === numPoints - 1) {\n                    addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n                }\n                u0 = u1;\n                previousPoint = currentPoint;\n                lastPointL.copy(nextPointL);\n                lastPointR.copy(nextPointR);\n            }\n            if (!isClosed) {\n                addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n            } else if (innerSideModified && vertices) {\n                var lastOuter = outerPoint;\n                var lastInner = innerPoint;\n                if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n                    lastOuter = innerPoint;\n                    lastInner = outerPoint;\n                }\n                if (joinIsOnLeftSide) {\n                    if (isMiter || initialJoinIsOnLeftSide) {\n                        lastInner.toArray(vertices, 0 * 3);\n                        lastInner.toArray(vertices, 3 * 3);\n                        if (isMiter) {\n                            lastOuter.toArray(vertices, 1 * 3);\n                        }\n                    }\n                } else {\n                    if (isMiter || !initialJoinIsOnLeftSide) {\n                        lastInner.toArray(vertices, 1 * 3);\n                        lastInner.toArray(vertices, 3 * 3);\n                        if (isMiter) {\n                            lastOuter.toArray(vertices, 0 * 3);\n                        }\n                    }\n                }\n            }\n            return numVertices;\n            function getNormal(p1, p2, result) {\n                result.subVectors(p2, p1);\n                return result.set(-result.y, result.x).normalize();\n            }\n            function addVertex(position, u, v) {\n                if (vertices) {\n                    vertices[currentCoordinate] = position.x;\n                    vertices[currentCoordinate + 1] = position.y;\n                    vertices[currentCoordinate + 2] = 0;\n                    if (normals) {\n                        normals[currentCoordinate] = 0;\n                        normals[currentCoordinate + 1] = 0;\n                        normals[currentCoordinate + 2] = 1;\n                    }\n                    currentCoordinate += 3;\n                    if (uvs) {\n                        uvs[currentCoordinateUV] = u;\n                        uvs[currentCoordinateUV + 1] = v;\n                        currentCoordinateUV += 2;\n                    }\n                }\n                numVertices += 3;\n            }\n            function makeCircularSector(center, p1, p2, u, v) {\n                tempV2_1.copy(p1).sub(center).normalize();\n                tempV2_2.copy(p2).sub(center).normalize();\n                var angle = Math.PI;\n                var dot = tempV2_1.dot(tempV2_2);\n                if (Math.abs(dot) < 1)\n                    angle = Math.abs(Math.acos(dot));\n                angle /= arcDivisions;\n                tempV2_3.copy(p1);\n                for (var i = 0, il = arcDivisions - 1; i < il; i++) {\n                    tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n                    addVertex(tempV2_3, u, v);\n                    addVertex(tempV2_4, u, v);\n                    addVertex(center, u, 0.5);\n                    tempV2_3.copy(tempV2_4);\n                }\n                addVertex(tempV2_4, u, v);\n                addVertex(p2, u, v);\n                addVertex(center, u, 0.5);\n            }\n            function makeSegmentTriangles() {\n                addVertex(lastPointR, u0, 1);\n                addVertex(lastPointL, u0, 0);\n                addVertex(currentPointL, u1, 0);\n                addVertex(lastPointR, u0, 1);\n                addVertex(currentPointL, u1, 1);\n                addVertex(currentPointR, u1, 0);\n            }\n            function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n                if (innerSideModified) {\n                    if (joinIsOnLeftSide) {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPointL, u, 0);\n                        addVertex(nextPointL, u, 0);\n                        addVertex(innerPoint, u, 0.5);\n                    } else {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(currentPointR, u, 1);\n                        addVertex(nextPointR, u, 0);\n                        addVertex(innerPoint, u, 0.5);\n                    }\n                } else {\n                    if (joinIsOnLeftSide) {\n                        addVertex(currentPointL, u, 0);\n                        addVertex(nextPointL, u, 0);\n                        addVertex(currentPoint, u, 0.5);\n                    } else {\n                        addVertex(currentPointR, u, 1);\n                        addVertex(nextPointR, u, 0);\n                        addVertex(currentPoint, u, 0.5);\n                    }\n                }\n            }\n            function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n                if (innerSideModified) {\n                    if (joinIsOnLeftSide) {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(currentPointL, u1, 0);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPointL, u0, 0);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(innerPoint, u1, 1);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(nextPointL, u0, 0);\n                        addVertex(innerPoint, u1, 1);\n                    } else {\n                        addVertex(lastPointR, u0, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(lastPointL, u0, 0);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPointR, u1, 1);\n                        addVertex(currentPointR, u0, 1);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(currentPoint, u1, 0.5);\n                        addVertex(innerPoint, u1, 0);\n                        addVertex(nextPointR, u0, 1);\n                    }\n                }\n            }\n            function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n                switch (style.strokeLineCap) {\n                case 'round':\n                    if (start) {\n                        makeCircularSector(center, p2, p1, u, 0.5);\n                    } else {\n                        makeCircularSector(center, p1, p2, u, 0.5);\n                    }\n                    break;\n                case 'square':\n                    if (start) {\n                        tempV2_1.subVectors(p1, center);\n                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n                        if (joinIsOnLeftSide) {\n                            tempV2_3.toArray(vertices, 1 * 3);\n                            tempV2_4.toArray(vertices, 0 * 3);\n                            tempV2_4.toArray(vertices, 3 * 3);\n                        } else {\n                            tempV2_3.toArray(vertices, 1 * 3);\n                            tempV2_3.toArray(vertices, 3 * 3);\n                            tempV2_4.toArray(vertices, 0 * 3);\n                        }\n                    } else {\n                        tempV2_1.subVectors(p2, center);\n                        tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n                        tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n                        tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n                        var vl = vertices.length;\n                        if (joinIsOnLeftSide) {\n                            tempV2_3.toArray(vertices, vl - 1 * 3);\n                            tempV2_4.toArray(vertices, vl - 2 * 3);\n                            tempV2_4.toArray(vertices, vl - 4 * 3);\n                        } else {\n                            tempV2_3.toArray(vertices, vl - 2 * 3);\n                            tempV2_4.toArray(vertices, vl - 1 * 3);\n                            tempV2_4.toArray(vertices, vl - 4 * 3);\n                        }\n                    }\n                    break;\n                case 'butt':\n                default:\n                    break;\n                }\n            }\n            function removeDuplicatedPoints(points) {\n                var dupPoints = false;\n                for (var i = 1, n = points.length - 1; i < n; i++) {\n                    if (points[i].distanceTo(points[i + 1]) < minDistance) {\n                        dupPoints = true;\n                        break;\n                    }\n                }\n                if (!dupPoints)\n                    return points;\n                var newPoints = [];\n                newPoints.push(points[0]);\n                for (var i = 1, n = points.length - 1; i < n; i++) {\n                    if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n                        newPoints.push(points[i]);\n                    }\n                }\n                newPoints.push(points[points.length - 1]);\n                return newPoints;\n            }\n        };\n    }();\n    return SVGLoader;\n});\ndefine('skylark-threejs-ex/loaders/TDSLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TDSLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.debug = false;\n        this.group = null;\n        this.position = 0;\n        this.materials = [];\n        this.meshes = [];\n    };\n    TDSLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TDSLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                onLoad(scope.parse(data, path));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer, path) {\n            this.group = new THREE.Group();\n            this.position = 0;\n            this.materials = [];\n            this.meshes = [];\n            this.readFile(arraybuffer, path);\n            for (var i = 0; i < this.meshes.length; i++) {\n                this.group.add(this.meshes[i]);\n            }\n            return this.group;\n        },\n        readFile: function (arraybuffer, path) {\n            var data = new DataView(arraybuffer);\n            var chunk = this.readChunk(data);\n            if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n                var next = this.nextChunk(data, chunk);\n                while (next !== 0) {\n                    if (next === M3D_VERSION) {\n                        var version = this.readDWord(data);\n                        this.debugMessage('3DS file version: ' + version);\n                    } else if (next === MDATA) {\n                        this.resetPosition(data);\n                        this.readMeshData(data, path);\n                    } else {\n                        this.debugMessage('Unknown main chunk: ' + next.toString(16));\n                    }\n                    next = this.nextChunk(data, chunk);\n                }\n            }\n            this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n        },\n        readMeshData: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === MESH_VERSION) {\n                    var version = +this.readDWord(data);\n                    this.debugMessage('Mesh Version: ' + version);\n                } else if (next === MASTER_SCALE) {\n                    var scale = this.readFloat(data);\n                    this.debugMessage('Master scale: ' + scale);\n                    this.group.scale.set(scale, scale, scale);\n                } else if (next === NAMED_OBJECT) {\n                    this.debugMessage('Named Object');\n                    this.resetPosition(data);\n                    this.readNamedObject(data);\n                } else if (next === MAT_ENTRY) {\n                    this.debugMessage('Material');\n                    this.resetPosition(data);\n                    this.readMaterialEntry(data, path);\n                } else {\n                    this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n        },\n        readNamedObject: function (data) {\n            var chunk = this.readChunk(data);\n            var name = this.readString(data, 64);\n            chunk.cur = this.position;\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === N_TRI_OBJECT) {\n                    this.resetPosition(data);\n                    var mesh = this.readMesh(data);\n                    mesh.name = name;\n                    this.meshes.push(mesh);\n                } else {\n                    this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMaterialEntry: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var material = new THREE.MeshPhongMaterial();\n            while (next !== 0) {\n                if (next === MAT_NAME) {\n                    material.name = this.readString(data, 64);\n                    this.debugMessage('   Name: ' + material.name);\n                } else if (next === MAT_WIRE) {\n                    this.debugMessage('   Wireframe');\n                    material.wireframe = true;\n                } else if (next === MAT_WIRE_SIZE) {\n                    var value = this.readByte(data);\n                    material.wireframeLinewidth = value;\n                    this.debugMessage('   Wireframe Thickness: ' + value);\n                } else if (next === MAT_TWO_SIDE) {\n                    material.side = THREE.DoubleSide;\n                    this.debugMessage('   DoubleSided');\n                } else if (next === MAT_ADDITIVE) {\n                    this.debugMessage('   Additive Blending');\n                    material.blending = THREE.AdditiveBlending;\n                } else if (next === MAT_DIFFUSE) {\n                    this.debugMessage('   Diffuse Color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SPECULAR) {\n                    this.debugMessage('   Specular Color');\n                    material.specular = this.readColor(data);\n                } else if (next === MAT_AMBIENT) {\n                    this.debugMessage('   Ambient color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SHININESS) {\n                    var shininess = this.readWord(data);\n                    material.shininess = shininess;\n                    this.debugMessage('   Shininess : ' + shininess);\n                } else if (next === MAT_TRANSPARENCY) {\n                    var opacity = this.readWord(data);\n                    material.opacity = opacity * 0.01;\n                    this.debugMessage('  Opacity : ' + opacity);\n                    material.transparent = opacity < 100 ? true : false;\n                } else if (next === MAT_TEXMAP) {\n                    this.debugMessage('   ColorMap');\n                    this.resetPosition(data);\n                    material.map = this.readMap(data, path);\n                } else if (next === MAT_BUMPMAP) {\n                    this.debugMessage('   BumpMap');\n                    this.resetPosition(data);\n                    material.bumpMap = this.readMap(data, path);\n                } else if (next === MAT_OPACMAP) {\n                    this.debugMessage('   OpacityMap');\n                    this.resetPosition(data);\n                    material.alphaMap = this.readMap(data, path);\n                } else if (next === MAT_SPECMAP) {\n                    this.debugMessage('   SpecularMap');\n                    this.resetPosition(data);\n                    material.specularMap = this.readMap(data, path);\n                } else {\n                    this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            this.materials[material.name] = material;\n        },\n        readMesh: function (data) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var geometry = new THREE.BufferGeometry();\n            var uvs = [];\n            var material = new THREE.MeshPhongMaterial();\n            var mesh = new THREE.Mesh(geometry, material);\n            mesh.name = 'mesh';\n            while (next !== 0) {\n                if (next === POINT_ARRAY) {\n                    var points = this.readWord(data);\n                    this.debugMessage('   Vertex: ' + points);\n                    var vertices = [];\n                    for (var i = 0; i < points; i++) {\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                } else if (next === FACE_ARRAY) {\n                    this.resetPosition(data);\n                    this.readFaceArray(data, mesh);\n                } else if (next === TEX_VERTS) {\n                    var texels = this.readWord(data);\n                    this.debugMessage('   UV: ' + texels);\n                    var uvs = [];\n                    for (var i = 0; i < texels; i++) {\n                        uvs.push(this.readFloat(data));\n                        uvs.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                } else if (next === MESH_MATRIX) {\n                    this.debugMessage('   Tranformation Matrix (TODO)');\n                    var values = [];\n                    for (var i = 0; i < 12; i++) {\n                        values[i] = this.readFloat(data);\n                    }\n                    var matrix = new THREE.Matrix4();\n                    matrix.elements[0] = values[0];\n                    matrix.elements[1] = values[6];\n                    matrix.elements[2] = values[3];\n                    matrix.elements[3] = values[9];\n                    matrix.elements[4] = values[2];\n                    matrix.elements[5] = values[8];\n                    matrix.elements[6] = values[5];\n                    matrix.elements[7] = values[11];\n                    matrix.elements[8] = values[1];\n                    matrix.elements[9] = values[7];\n                    matrix.elements[10] = values[4];\n                    matrix.elements[11] = values[10];\n                    matrix.elements[12] = 0;\n                    matrix.elements[13] = 0;\n                    matrix.elements[14] = 0;\n                    matrix.elements[15] = 1;\n                    matrix.transpose();\n                    var inverse = new THREE.Matrix4();\n                    inverse.getInverse(matrix);\n                    geometry.applyMatrix4(inverse);\n                    matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n                } else {\n                    this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            geometry.computeVertexNormals();\n            return mesh;\n        },\n        readFaceArray: function (data, mesh) {\n            var chunk = this.readChunk(data);\n            var faces = this.readWord(data);\n            this.debugMessage('   Faces: ' + faces);\n            var index = [];\n            for (var i = 0; i < faces; ++i) {\n                index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n                this.readWord(data);\n            }\n            mesh.geometry.setIndex(index);\n            while (this.position < chunk.end) {\n                var chunk = this.readChunk(data);\n                if (chunk.id === MSH_MAT_GROUP) {\n                    this.debugMessage('      Material Group');\n                    this.resetPosition(data);\n                    var group = this.readMaterialGroup(data);\n                    var material = this.materials[group.name];\n                    if (material !== undefined) {\n                        mesh.material = material;\n                        if (material.name === '') {\n                            material.name = mesh.name;\n                        }\n                    }\n                } else {\n                    this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));\n                }\n                this.endChunk(chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMap: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var texture = {};\n            var loader = new THREE.TextureLoader(this.manager);\n            loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            while (next !== 0) {\n                if (next === MAT_MAPNAME) {\n                    var name = this.readString(data, 128);\n                    texture = loader.load(name);\n                    this.debugMessage('      File: ' + path + name);\n                } else if (next === MAT_MAP_UOFFSET) {\n                    texture.offset.x = this.readFloat(data);\n                    this.debugMessage('      OffsetX: ' + texture.offset.x);\n                } else if (next === MAT_MAP_VOFFSET) {\n                    texture.offset.y = this.readFloat(data);\n                    this.debugMessage('      OffsetY: ' + texture.offset.y);\n                } else if (next === MAT_MAP_USCALE) {\n                    texture.repeat.x = this.readFloat(data);\n                    this.debugMessage('      RepeatX: ' + texture.repeat.x);\n                } else if (next === MAT_MAP_VSCALE) {\n                    texture.repeat.y = this.readFloat(data);\n                    this.debugMessage('      RepeatY: ' + texture.repeat.y);\n                } else {\n                    this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            return texture;\n        },\n        readMaterialGroup: function (data) {\n            this.readChunk(data);\n            var name = this.readString(data, 64);\n            var numFaces = this.readWord(data);\n            this.debugMessage('         Name: ' + name);\n            this.debugMessage('         Faces: ' + numFaces);\n            var index = [];\n            for (var i = 0; i < numFaces; ++i) {\n                index.push(this.readWord(data));\n            }\n            return {\n                name: name,\n                index: index\n            };\n        },\n        readColor: function (data) {\n            var chunk = this.readChunk(data);\n            var color = new THREE.Color();\n            if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n                var r = this.readByte(data);\n                var g = this.readByte(data);\n                var b = this.readByte(data);\n                color.setRGB(r / 255, g / 255, b / 255);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n                var r = this.readFloat(data);\n                var g = this.readFloat(data);\n                var b = this.readFloat(data);\n                color.setRGB(r, g, b);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else {\n                this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n            }\n            this.endChunk(chunk);\n            return color;\n        },\n        readChunk: function (data) {\n            var chunk = {};\n            chunk.cur = this.position;\n            chunk.id = this.readWord(data);\n            chunk.size = this.readDWord(data);\n            chunk.end = chunk.cur + chunk.size;\n            chunk.cur += 6;\n            return chunk;\n        },\n        endChunk: function (chunk) {\n            this.position = chunk.end;\n        },\n        nextChunk: function (data, chunk) {\n            if (chunk.cur >= chunk.end) {\n                return 0;\n            }\n            this.position = chunk.cur;\n            try {\n                var next = this.readChunk(data);\n                chunk.cur += next.size;\n                return next.id;\n            } catch (e) {\n                this.debugMessage('Unable to read chunk at ' + this.position);\n                return 0;\n            }\n        },\n        resetPosition: function () {\n            this.position -= 6;\n        },\n        readByte: function (data) {\n            var v = data.getUint8(this.position, true);\n            this.position += 1;\n            return v;\n        },\n        readFloat: function (data) {\n            try {\n                var v = data.getFloat32(this.position, true);\n                this.position += 4;\n                return v;\n            } catch (e) {\n                this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n            }\n        },\n        readInt: function (data) {\n            var v = data.getInt32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readShort: function (data) {\n            var v = data.getInt16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readDWord: function (data) {\n            var v = data.getUint32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readWord: function (data) {\n            var v = data.getUint16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readString: function (data, maxLength) {\n            var s = '';\n            for (var i = 0; i < maxLength; i++) {\n                var c = this.readByte(data);\n                if (!c) {\n                    break;\n                }\n                s += String.fromCharCode(c);\n            }\n            return s;\n        },\n        debugMessage: function (message) {\n            if (this.debug) {\n                console.log(message);\n            }\n        }\n    });\n    var M3DMAGIC = 19789;\n    var MLIBMAGIC = 15786;\n    var CMAGIC = 49725;\n    var M3D_VERSION = 2;\n    var COLOR_F = 16;\n    var COLOR_24 = 17;\n    var LIN_COLOR_24 = 18;\n    var LIN_COLOR_F = 19;\n    var MDATA = 15677;\n    var MESH_VERSION = 15678;\n    var MASTER_SCALE = 256;\n    var MAT_ENTRY = 45055;\n    var MAT_NAME = 40960;\n    var MAT_AMBIENT = 40976;\n    var MAT_DIFFUSE = 40992;\n    var MAT_SPECULAR = 41008;\n    var MAT_SHININESS = 41024;\n    var MAT_TRANSPARENCY = 41040;\n    var MAT_TWO_SIDE = 41089;\n    var MAT_ADDITIVE = 41091;\n    var MAT_WIRE = 41093;\n    var MAT_WIRE_SIZE = 41095;\n    var MAT_TEXMAP = 41472;\n    var MAT_OPACMAP = 41488;\n    var MAT_BUMPMAP = 41520;\n    var MAT_SPECMAP = 41476;\n    var MAT_MAPNAME = 41728;\n    var MAT_MAP_USCALE = 41812;\n    var MAT_MAP_VSCALE = 41814;\n    var MAT_MAP_UOFFSET = 41816;\n    var MAT_MAP_VOFFSET = 41818;\n    var NAMED_OBJECT = 16384;\n    var N_TRI_OBJECT = 16640;\n    var POINT_ARRAY = 16656;\n    var FACE_ARRAY = 16672;\n    var MSH_MAT_GROUP = 16688;\n    var TEX_VERTS = 16704;\n    var MESH_MATRIX = 16736;\n\n    return TDSLoader;\n});\ndefine('skylark-threejs-ex/loaders/VRMLLoader',[\n    \"skylark-threejs\",\n//    '../libs/chevrotain.module.min'\n], function (THREE, chevrotain) {\n    'use strict';\n    var VRMLLoader = function () {\n        if (typeof chevrotain === 'undefined') {\n            throw Error('THREE.VRMLLoader: External library chevrotain.min.js required.');\n        }\n        function VRMLLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        VRMLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: VRMLLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(scope.path);\n                loader.load(url, function (text) {\n                    onLoad(scope.parse(text, path));\n                }, onProgress, onError);\n            },\n            parse: function (data, path) {\n                var nodeMap = {};\n                function generateVRMLTree(data) {\n                    var tokenData = createTokens();\n                    var lexer = new VRMLLexer(tokenData.tokens);\n                    var parser = new VRMLParser(tokenData.tokenVocabulary);\n                    var visitor = createVisitor(parser.getBaseCstVisitorConstructor());\n                    var lexingResult = lexer.lex(data);\n                    parser.input = lexingResult.tokens;\n                    var cstOutput = parser.vrml();\n                    if (parser.errors.length > 0) {\n                        console.error(parser.errors);\n                        throw Error('THREE.VRMLLoader: Parsing errors detected.');\n                    }\n                    var ast = visitor.visit(cstOutput);\n                    return ast;\n                }\n                function createTokens() {\n                    var createToken = chevrotain.createToken;\n                    var RouteIdentifier = createToken({\n                        name: 'RouteIdentifier',\n                        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n                    });\n                    var Identifier = createToken({\n                        name: 'Identifier',\n                        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n                        longer_alt: RouteIdentifier\n                    });\n                    var nodeTypes = [\n                        'Anchor',\n                        'Billboard',\n                        'Collision',\n                        'Group',\n                        'Transform',\n                        'Inline',\n                        'LOD',\n                        'Switch',\n                        'AudioClip',\n                        'DirectionalLight',\n                        'PointLight',\n                        'Script',\n                        'Shape',\n                        'Sound',\n                        'SpotLight',\n                        'WorldInfo',\n                        'CylinderSensor',\n                        'PlaneSensor',\n                        'ProximitySensor',\n                        'SphereSensor',\n                        'TimeSensor',\n                        'TouchSensor',\n                        'VisibilitySensor',\n                        'Box',\n                        'Cone',\n                        'Cylinder',\n                        'ElevationGrid',\n                        'Extrusion',\n                        'IndexedFaceSet',\n                        'IndexedLineSet',\n                        'PointSet',\n                        'Sphere',\n                        'Color',\n                        'Coordinate',\n                        'Normal',\n                        'TextureCoordinate',\n                        'Appearance',\n                        'FontStyle',\n                        'ImageTexture',\n                        'Material',\n                        'MovieTexture',\n                        'PixelTexture',\n                        'TextureTransform',\n                        'ColorInterpolator',\n                        'CoordinateInterpolator',\n                        'NormalInterpolator',\n                        'OrientationInterpolator',\n                        'PositionInterpolator',\n                        'ScalarInterpolator',\n                        'Background',\n                        'Fog',\n                        'NavigationInfo',\n                        'Viewpoint',\n                        'Text'\n                    ];\n                    var Version = createToken({\n                        name: 'Version',\n                        pattern: /#VRML.*/,\n                        longer_alt: Identifier\n                    });\n                    var NodeName = createToken({\n                        name: 'NodeName',\n                        pattern: new RegExp(nodeTypes.join('|')),\n                        longer_alt: Identifier\n                    });\n                    var DEF = createToken({\n                        name: 'DEF',\n                        pattern: /DEF/,\n                        longer_alt: Identifier\n                    });\n                    var USE = createToken({\n                        name: 'USE',\n                        pattern: /USE/,\n                        longer_alt: Identifier\n                    });\n                    var ROUTE = createToken({\n                        name: 'ROUTE',\n                        pattern: /ROUTE/,\n                        longer_alt: Identifier\n                    });\n                    var TO = createToken({\n                        name: 'TO',\n                        pattern: /TO/,\n                        longer_alt: Identifier\n                    });\n                    var StringLiteral = createToken({\n                        name: 'StringLiteral',\n                        pattern: /\"(:?[^\\\\\"\\n\\r]+|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/\n                    });\n                    var HexLiteral = createToken({\n                        name: 'HexLiteral',\n                        pattern: /0[xX][0-9a-fA-F]+/\n                    });\n                    var NumberLiteral = createToken({\n                        name: 'NumberLiteral',\n                        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n                    });\n                    var TrueLiteral = createToken({\n                        name: 'TrueLiteral',\n                        pattern: /TRUE/\n                    });\n                    var FalseLiteral = createToken({\n                        name: 'FalseLiteral',\n                        pattern: /FALSE/\n                    });\n                    var NullLiteral = createToken({\n                        name: 'NullLiteral',\n                        pattern: /NULL/\n                    });\n                    var LSquare = createToken({\n                        name: 'LSquare',\n                        pattern: /\\[/\n                    });\n                    var RSquare = createToken({\n                        name: 'RSquare',\n                        pattern: /]/\n                    });\n                    var LCurly = createToken({\n                        name: 'LCurly',\n                        pattern: /{/\n                    });\n                    var RCurly = createToken({\n                        name: 'RCurly',\n                        pattern: /}/\n                    });\n                    var Comment = createToken({\n                        name: 'Comment',\n                        pattern: /#.*/,\n                        group: chevrotain.Lexer.SKIPPED\n                    });\n                    var WhiteSpace = createToken({\n                        name: 'WhiteSpace',\n                        pattern: /[ ,\\s]/,\n                        group: chevrotain.Lexer.SKIPPED\n                    });\n                    var tokens = [\n                        WhiteSpace,\n                        NodeName,\n                        DEF,\n                        USE,\n                        ROUTE,\n                        TO,\n                        TrueLiteral,\n                        FalseLiteral,\n                        NullLiteral,\n                        Version,\n                        Identifier,\n                        RouteIdentifier,\n                        StringLiteral,\n                        HexLiteral,\n                        NumberLiteral,\n                        LSquare,\n                        RSquare,\n                        LCurly,\n                        RCurly,\n                        Comment\n                    ];\n                    var tokenVocabulary = {};\n                    for (var i = 0, l = tokens.length; i < l; i++) {\n                        var token = tokens[i];\n                        tokenVocabulary[token.name] = token;\n                    }\n                    return {\n                        tokens: tokens,\n                        tokenVocabulary: tokenVocabulary\n                    };\n                }\n                function createVisitor(BaseVRMLVisitor) {\n                    function VRMLToASTVisitor() {\n                        BaseVRMLVisitor.call(this);\n                        this.validateVisitor();\n                    }\n                    VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n                        constructor: VRMLToASTVisitor,\n                        vrml: function (ctx) {\n                            var data = {\n                                version: this.visit(ctx.version),\n                                nodes: [],\n                                routes: []\n                            };\n                            for (var i = 0, l = ctx.node.length; i < l; i++) {\n                                var node = ctx.node[i];\n                                data.nodes.push(this.visit(node));\n                            }\n                            if (ctx.route) {\n                                for (var i = 0, l = ctx.route.length; i < l; i++) {\n                                    var route = ctx.route[i];\n                                    data.routes.push(this.visit(route));\n                                }\n                            }\n                            return data;\n                        },\n                        version: function (ctx) {\n                            return ctx.Version[0].image;\n                        },\n                        node: function (ctx) {\n                            var data = {\n                                name: ctx.NodeName[0].image,\n                                fields: []\n                            };\n                            if (ctx.field) {\n                                for (var i = 0, l = ctx.field.length; i < l; i++) {\n                                    var field = ctx.field[i];\n                                    data.fields.push(this.visit(field));\n                                }\n                            }\n                            if (ctx.def) {\n                                data.DEF = this.visit(ctx.def[0]);\n                            }\n                            return data;\n                        },\n                        field: function (ctx) {\n                            var data = {\n                                name: ctx.Identifier[0].image,\n                                type: null,\n                                values: null\n                            };\n                            var result;\n                            if (ctx.singleFieldValue) {\n                                result = this.visit(ctx.singleFieldValue[0]);\n                            }\n                            if (ctx.multiFieldValue) {\n                                result = this.visit(ctx.multiFieldValue[0]);\n                            }\n                            data.type = result.type;\n                            data.values = result.values;\n                            return data;\n                        },\n                        def: function (ctx) {\n                            return ctx.Identifier[0].image;\n                        },\n                        use: function (ctx) {\n                            return { USE: ctx.Identifier[0].image };\n                        },\n                        singleFieldValue: function (ctx) {\n                            return processField(this, ctx);\n                        },\n                        multiFieldValue: function (ctx) {\n                            return processField(this, ctx);\n                        },\n                        route: function (ctx) {\n                            var data = {\n                                FROM: ctx.RouteIdentifier[0].image,\n                                TO: ctx.RouteIdentifier[1].image\n                            };\n                            return data;\n                        }\n                    });\n                    function processField(scope, ctx) {\n                        var field = {\n                            type: null,\n                            values: []\n                        };\n                        if (ctx.node) {\n                            field.type = 'node';\n                            for (var i = 0, l = ctx.node.length; i < l; i++) {\n                                var node = ctx.node[i];\n                                field.values.push(scope.visit(node));\n                            }\n                        }\n                        if (ctx.use) {\n                            field.type = 'use';\n                            for (var i = 0, l = ctx.use.length; i < l; i++) {\n                                var use = ctx.use[i];\n                                field.values.push(scope.visit(use));\n                            }\n                        }\n                        if (ctx.StringLiteral) {\n                            field.type = 'string';\n                            for (var i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n                                var stringLiteral = ctx.StringLiteral[i];\n                                field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n                            }\n                        }\n                        if (ctx.NumberLiteral) {\n                            field.type = 'number';\n                            for (var i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n                                var numberLiteral = ctx.NumberLiteral[i];\n                                field.values.push(parseFloat(numberLiteral.image));\n                            }\n                        }\n                        if (ctx.HexLiteral) {\n                            field.type = 'hex';\n                            for (var i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n                                var hexLiteral = ctx.HexLiteral[i];\n                                field.values.push(hexLiteral.image);\n                            }\n                        }\n                        if (ctx.TrueLiteral) {\n                            field.type = 'boolean';\n                            for (var i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n                                var trueLiteral = ctx.TrueLiteral[i];\n                                if (trueLiteral.image === 'TRUE')\n                                    field.values.push(true);\n                            }\n                        }\n                        if (ctx.FalseLiteral) {\n                            field.type = 'boolean';\n                            for (var i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n                                var falseLiteral = ctx.FalseLiteral[i];\n                                if (falseLiteral.image === 'FALSE')\n                                    field.values.push(false);\n                            }\n                        }\n                        if (ctx.NullLiteral) {\n                            field.type = 'null';\n                            ctx.NullLiteral.forEach(function () {\n                                field.values.push(null);\n                            });\n                        }\n                        return field;\n                    }\n                    return new VRMLToASTVisitor();\n                }\n                function parseTree(tree) {\n                    var nodes = tree.nodes;\n                    var scene = new THREE.Scene();\n                    for (var i = 0, l = nodes.length; i < l; i++) {\n                        var node = nodes[i];\n                        buildNodeMap(node);\n                    }\n                    for (var i = 0, l = nodes.length; i < l; i++) {\n                        var node = nodes[i];\n                        var object = getNode(node);\n                        if (object instanceof THREE.Object3D)\n                            scene.add(object);\n                    }\n                    return scene;\n                }\n                function buildNodeMap(node) {\n                    if (node.DEF) {\n                        nodeMap[node.DEF] = node;\n                    }\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        if (field.type === 'node') {\n                            var fieldValues = field.values;\n                            for (var j = 0, jl = fieldValues.length; j < jl; j++) {\n                                buildNodeMap(fieldValues[j]);\n                            }\n                        }\n                    }\n                }\n                function getNode(node) {\n                    if (node.USE) {\n                        return resolveUSE(node.USE);\n                    }\n                    if (node.build !== undefined)\n                        return node.build;\n                    node.build = buildNode(node);\n                    return node.build;\n                }\n                function buildNode(node) {\n                    var nodeName = node.name;\n                    var build;\n                    switch (nodeName) {\n                    case 'Group':\n                    case 'Transform':\n                        build = buildGroupingNode(node);\n                        break;\n                    case 'Background':\n                        build = buildBackgroundNode(node);\n                        break;\n                    case 'Shape':\n                        build = buildShapeNode(node);\n                        break;\n                    case 'Appearance':\n                        build = buildAppearanceNode(node);\n                        break;\n                    case 'Material':\n                        build = buildMaterialNode(node);\n                        break;\n                    case 'ImageTexture':\n                        build = buildImageTextureNode(node);\n                        break;\n                    case 'PixelTexture':\n                        build = buildPixelTextureNode(node);\n                        break;\n                    case 'TextureTransform':\n                        build = buildTextureTransformNode(node);\n                        break;\n                    case 'IndexedFaceSet':\n                        build = buildIndexedFaceSetNode(node);\n                        break;\n                    case 'IndexedLineSet':\n                        build = buildIndexedLineSetNode(node);\n                        break;\n                    case 'PointSet':\n                        build = buildPointSetNode(node);\n                        break;\n                    case 'Box':\n                        build = buildBoxNode(node);\n                        break;\n                    case 'Cone':\n                        build = buildConeNode(node);\n                        break;\n                    case 'Cylinder':\n                        build = buildCylinderNode(node);\n                        break;\n                    case 'Sphere':\n                        build = buildSphereNode(node);\n                        break;\n                    case 'Color':\n                    case 'Coordinate':\n                    case 'Normal':\n                    case 'TextureCoordinate':\n                        build = buildGeometricNode(node);\n                        break;\n                    case 'Anchor':\n                    case 'Billboard':\n                    case 'Collision':\n                    case 'Inline':\n                    case 'LOD':\n                    case 'Switch':\n                    case 'AudioClip':\n                    case 'DirectionalLight':\n                    case 'PointLight':\n                    case 'Script':\n                    case 'Sound':\n                    case 'SpotLight':\n                    case 'WorldInfo':\n                    case 'CylinderSensor':\n                    case 'PlaneSensor':\n                    case 'ProximitySensor':\n                    case 'SphereSensor':\n                    case 'TimeSensor':\n                    case 'TouchSensor':\n                    case 'VisibilitySensor':\n                    case 'ElevationGrid':\n                    case 'Extrusion':\n                    case 'Text':\n                    case 'FontStyle':\n                    case 'MovieTexture':\n                    case 'ColorInterpolator':\n                    case 'CoordinateInterpolator':\n                    case 'NormalInterpolator':\n                    case 'OrientationInterpolator':\n                    case 'PositionInterpolator':\n                    case 'ScalarInterpolator':\n                    case 'Fog':\n                    case 'NavigationInfo':\n                    case 'Viewpoint':\n                        break;\n                    default:\n                        console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n                        break;\n                    }\n                    return build;\n                }\n                function buildGroupingNode(node) {\n                    var object = new THREE.Group();\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'center':\n                            break;\n                        case 'children':\n                            parseFieldChildren(fieldValues, object);\n                            break;\n                        case 'rotation':\n                            var axis = new THREE.Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n                            var angle = fieldValues[3];\n                            object.quaternion.setFromAxisAngle(axis, angle);\n                            break;\n                        case 'scale':\n                            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n                            break;\n                        case 'scaleOrientation':\n                            break;\n                        case 'translation':\n                            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n                            break;\n                        case 'bboxCenter':\n                            break;\n                        case 'bboxSize':\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    return object;\n                }\n                function buildBackgroundNode(node) {\n                    var group = new THREE.Group();\n                    var groundAngle, groundColor;\n                    var skyAngle, skyColor;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'groundAngle':\n                            groundAngle = fieldValues;\n                            break;\n                        case 'groundColor':\n                            groundColor = fieldValues;\n                            break;\n                        case 'backUrl':\n                            break;\n                        case 'bottomUrl':\n                            break;\n                        case 'frontUrl':\n                            break;\n                        case 'leftUrl':\n                            break;\n                        case 'rightUrl':\n                            break;\n                        case 'topUrl':\n                            break;\n                        case 'skyAngle':\n                            skyAngle = fieldValues;\n                            break;\n                        case 'skyColor':\n                            skyColor = fieldValues;\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var radius = 10000;\n                    if (skyColor) {\n                        var skyGeometry = new THREE.SphereBufferGeometry(radius, 32, 16);\n                        var skyMaterial = new THREE.MeshBasicMaterial({\n                            fog: false,\n                            side: THREE.BackSide,\n                            depthWrite: false,\n                            depthTest: false\n                        });\n                        if (skyColor.length > 3) {\n                            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n                            skyMaterial.vertexColors = true;\n                        } else {\n                            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n                        }\n                        var sky = new THREE.Mesh(skyGeometry, skyMaterial);\n                        group.add(sky);\n                    }\n                    if (groundColor) {\n                        if (groundColor.length > 0) {\n                            var groundGeometry = new THREE.SphereBufferGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n                            var groundMaterial = new THREE.MeshBasicMaterial({\n                                fog: false,\n                                side: THREE.BackSide,\n                                vertexColors: true,\n                                depthWrite: false,\n                                depthTest: false\n                            });\n                            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n                            var ground = new THREE.Mesh(groundGeometry, groundMaterial);\n                            group.add(ground);\n                        }\n                    }\n                    group.renderOrder = -Infinity;\n                    return group;\n                }\n                function buildShapeNode(node) {\n                    var fields = node.fields;\n                    var material = new THREE.MeshBasicMaterial({ color: 0 });\n                    var geometry;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'appearance':\n                            if (fieldValues[0] !== null) {\n                                material = getNode(fieldValues[0]);\n                            }\n                            break;\n                        case 'geometry':\n                            if (fieldValues[0] !== null) {\n                                geometry = getNode(fieldValues[0]);\n                            }\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var object;\n                    if (geometry && geometry.attributes.position) {\n                        var type = geometry._type;\n                        if (type === 'points') {\n                            var pointsMaterial = new THREE.PointsMaterial({ color: 16777215 });\n                            if (geometry.attributes.color !== undefined) {\n                                pointsMaterial.vertexColors = true;\n                            } else {\n                                if (material.isMeshPhongMaterial) {\n                                    pointsMaterial.color.copy(material.emissive);\n                                }\n                            }\n                            object = new THREE.Points(geometry, pointsMaterial);\n                        } else if (type === 'line') {\n                            var lineMaterial = new THREE.LineBasicMaterial({ color: 16777215 });\n                            if (geometry.attributes.color !== undefined) {\n                                lineMaterial.vertexColors = true;\n                            } else {\n                                if (material.isMeshPhongMaterial) {\n                                    lineMaterial.color.copy(material.emissive);\n                                }\n                            }\n                            object = new THREE.LineSegments(geometry, lineMaterial);\n                        } else {\n                            if (geometry._solid !== undefined) {\n                                material.side = geometry._solid ? THREE.FrontSide : THREE.DoubleSide;\n                            }\n                            if (geometry.attributes.color !== undefined) {\n                                material.vertexColors = true;\n                            }\n                            object = new THREE.Mesh(geometry, material);\n                        }\n                    } else {\n                        object = new THREE.Object3D();\n                        object.visible = false;\n                    }\n                    return object;\n                }\n                function buildAppearanceNode(node) {\n                    var material = new THREE.MeshPhongMaterial();\n                    var transformData;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'material':\n                            if (fieldValues[0] !== null) {\n                                var materialData = getNode(fieldValues[0]);\n                                if (materialData.diffuseColor)\n                                    material.color.copy(materialData.diffuseColor);\n                                if (materialData.emissiveColor)\n                                    material.emissive.copy(materialData.emissiveColor);\n                                if (materialData.shininess)\n                                    material.shininess = materialData.shininess;\n                                if (materialData.specularColor)\n                                    material.specular.copy(materialData.specularColor);\n                                if (materialData.transparency)\n                                    material.opacity = 1 - materialData.transparency;\n                                if (materialData.transparency > 0)\n                                    material.transparent = true;\n                            } else {\n                                material = new THREE.MeshBasicMaterial({ color: 0 });\n                            }\n                            break;\n                        case 'texture':\n                            var textureNode = fieldValues[0];\n                            if (textureNode !== null) {\n                                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                                    material.map = getNode(textureNode);\n                                } else {\n                                }\n                            }\n                            break;\n                        case 'textureTransform':\n                            if (fieldValues[0] !== null) {\n                                transformData = getNode(fieldValues[0]);\n                            }\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    if (material.map) {\n                        if (material.map.__type) {\n                            switch (material.map.__type) {\n                            case TEXTURE_TYPE.INTENSITY_ALPHA:\n                                material.opacity = 1;\n                                break;\n                            case TEXTURE_TYPE.RGB:\n                                material.color.set(16777215);\n                                break;\n                            case TEXTURE_TYPE.RGBA:\n                                material.color.set(16777215);\n                                material.opacity = 1;\n                                break;\n                            default:\n                            }\n                            delete material.map.__type;\n                        }\n                        if (transformData) {\n                            material.map.center.copy(transformData.center);\n                            material.map.rotation = transformData.rotation;\n                            material.map.repeat.copy(transformData.scale);\n                            material.map.offset.copy(transformData.translation);\n                        }\n                    }\n                    return material;\n                }\n                function buildMaterialNode(node) {\n                    var materialData = {};\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'ambientIntensity':\n                            break;\n                        case 'diffuseColor':\n                            materialData.diffuseColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n                            break;\n                        case 'emissiveColor':\n                            materialData.emissiveColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n                            break;\n                        case 'shininess':\n                            materialData.shininess = fieldValues[0];\n                            break;\n                        case 'specularColor':\n                            materialData.emissiveColor = new THREE.Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n                            break;\n                        case 'transparency':\n                            materialData.transparency = fieldValues[0];\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    return materialData;\n                }\n                function parseHexColor(hex, textureType, color) {\n                    switch (textureType) {\n                    case TEXTURE_TYPE.INTENSITY:\n                        var value = parseInt(hex);\n                        color.r = value;\n                        color.g = value;\n                        color.b = value;\n                        break;\n                    case TEXTURE_TYPE.INTENSITY_ALPHA:\n                        var value = parseInt('0x' + hex.substring(2, 4));\n                        color.r = value;\n                        color.g = value;\n                        color.b = value;\n                        color.a = parseInt('0x' + hex.substring(4, 6));\n                        break;\n                    case TEXTURE_TYPE.RGB:\n                        color.r = parseInt('0x' + hex.substring(2, 4));\n                        color.g = parseInt('0x' + hex.substring(4, 6));\n                        color.b = parseInt('0x' + hex.substring(6, 8));\n                        break;\n                    case TEXTURE_TYPE.RGBA:\n                        color.r = parseInt('0x' + hex.substring(2, 4));\n                        color.g = parseInt('0x' + hex.substring(4, 6));\n                        color.b = parseInt('0x' + hex.substring(6, 8));\n                        color.a = parseInt('0x' + hex.substring(8, 10));\n                        break;\n                    default:\n                    }\n                }\n                function getTextureType(num_components) {\n                    var type;\n                    switch (num_components) {\n                    case 1:\n                        type = TEXTURE_TYPE.INTENSITY;\n                        break;\n                    case 2:\n                        type = TEXTURE_TYPE.INTENSITY_ALPHA;\n                        break;\n                    case 3:\n                        type = TEXTURE_TYPE.RGB;\n                        break;\n                    case 4:\n                        type = TEXTURE_TYPE.RGBA;\n                        break;\n                    default:\n                    }\n                    return type;\n                }\n                function buildPixelTextureNode(node) {\n                    var texture;\n                    var wrapS = THREE.RepeatWrapping;\n                    var wrapT = THREE.RepeatWrapping;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'image':\n                            var width = fieldValues[0];\n                            var height = fieldValues[1];\n                            var num_components = fieldValues[2];\n                            var useAlpha = num_components === 2 || num_components === 4;\n                            var textureType = getTextureType(num_components);\n                            var size = (useAlpha === true ? 4 : 3) * (width * height);\n                            var data = new Uint8Array(size);\n                            var color = {\n                                r: 0,\n                                g: 0,\n                                b: 0,\n                                a: 0\n                            };\n                            for (var j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n                                parseHexColor(fieldValues[j], textureType, color);\n                                if (useAlpha === true) {\n                                    var stride = k * 4;\n                                    data[stride + 0] = color.r;\n                                    data[stride + 1] = color.g;\n                                    data[stride + 2] = color.b;\n                                    data[stride + 3] = color.a;\n                                } else {\n                                    var stride = k * 3;\n                                    data[stride + 0] = color.r;\n                                    data[stride + 1] = color.g;\n                                    data[stride + 2] = color.b;\n                                }\n                            }\n                            texture = new THREE.DataTexture(data, width, height, useAlpha === true ? THREE.RGBAFormat : THREE.RGBFormat);\n                            texture.__type = textureType;\n                            break;\n                        case 'repeatS':\n                            if (fieldValues[0] === false)\n                                wrapS = THREE.ClampToEdgeWrapping;\n                            break;\n                        case 'repeatT':\n                            if (fieldValues[0] === false)\n                                wrapT = THREE.ClampToEdgeWrapping;\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    if (texture) {\n                        texture.wrapS = wrapS;\n                        texture.wrapT = wrapT;\n                    }\n                    return texture;\n                }\n                function buildImageTextureNode(node) {\n                    var texture;\n                    var wrapS = THREE.RepeatWrapping;\n                    var wrapT = THREE.RepeatWrapping;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'url':\n                            var url = fieldValues[0];\n                            if (url)\n                                texture = textureLoader.load(url);\n                            break;\n                        case 'repeatS':\n                            if (fieldValues[0] === false)\n                                wrapS = THREE.ClampToEdgeWrapping;\n                            break;\n                        case 'repeatT':\n                            if (fieldValues[0] === false)\n                                wrapT = THREE.ClampToEdgeWrapping;\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    if (texture) {\n                        texture.wrapS = wrapS;\n                        texture.wrapT = wrapT;\n                    }\n                    return texture;\n                }\n                function buildTextureTransformNode(node) {\n                    var transformData = {\n                        center: new THREE.Vector2(),\n                        rotation: new THREE.Vector2(),\n                        scale: new THREE.Vector2(),\n                        translation: new THREE.Vector2()\n                    };\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'center':\n                            transformData.center.set(fieldValues[0], fieldValues[1]);\n                            break;\n                        case 'rotation':\n                            transformData.rotation = fieldValues[0];\n                            break;\n                        case 'scale':\n                            transformData.scale.set(fieldValues[0], fieldValues[1]);\n                            break;\n                        case 'translation':\n                            transformData.translation.set(fieldValues[0], fieldValues[1]);\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    return transformData;\n                }\n                function buildGeometricNode(node) {\n                    return node.fields[0].values;\n                }\n                function buildIndexedFaceSetNode(node) {\n                    var color, coord, normal, texCoord;\n                    var ccw = true, solid = true, creaseAngle = 0;\n                    var colorIndex, coordIndex, normalIndex, texCoordIndex;\n                    var colorPerVertex = true, normalPerVertex = true;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'color':\n                            var colorNode = fieldValues[0];\n                            if (colorNode !== null) {\n                                color = getNode(colorNode);\n                            }\n                            break;\n                        case 'coord':\n                            var coordNode = fieldValues[0];\n                            if (coordNode !== null) {\n                                coord = getNode(coordNode);\n                            }\n                            break;\n                        case 'normal':\n                            var normalNode = fieldValues[0];\n                            if (normalNode !== null) {\n                                normal = getNode(normalNode);\n                            }\n                            break;\n                        case 'texCoord':\n                            var texCoordNode = fieldValues[0];\n                            if (texCoordNode !== null) {\n                                texCoord = getNode(texCoordNode);\n                            }\n                            break;\n                        case 'ccw':\n                            ccw = fieldValues[0];\n                            break;\n                        case 'colorIndex':\n                            colorIndex = fieldValues;\n                            break;\n                        case 'colorPerVertex':\n                            colorPerVertex = fieldValues[0];\n                            break;\n                        case 'convex':\n                            break;\n                        case 'coordIndex':\n                            coordIndex = fieldValues;\n                            break;\n                        case 'creaseAngle':\n                            creaseAngle = fieldValues[0];\n                            break;\n                        case 'normalIndex':\n                            normalIndex = fieldValues;\n                            break;\n                        case 'normalPerVertex':\n                            normalPerVertex = fieldValues[0];\n                            break;\n                        case 'solid':\n                            solid = fieldValues[0];\n                            break;\n                        case 'texCoordIndex':\n                            texCoordIndex = fieldValues;\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    if (coordIndex === undefined) {\n                        console.warn('THREE.VRMLLoader: Missing coordIndex.');\n                        return new THREE.BufferGeometry();\n                    }\n                    var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n                    var positionAttribute;\n                    var colorAttribute;\n                    var normalAttribute;\n                    var uvAttribute;\n                    if (color) {\n                        if (colorPerVertex === true) {\n                            if (colorIndex && colorIndex.length > 0) {\n                                var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n                                colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n                            } else {\n                                colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(color, 3));\n                            }\n                        } else {\n                            if (colorIndex && colorIndex.length > 0) {\n                                var flattenFaceColors = flattenData(color, colorIndex);\n                                var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n                                colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n                            } else {\n                                var triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n                                colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n                            }\n                        }\n                    }\n                    if (normal) {\n                        if (normalPerVertex === true) {\n                            if (normalIndex && normalIndex.length > 0) {\n                                var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n                                normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n                            } else {\n                                normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(normal, 3));\n                            }\n                        } else {\n                            if (normalIndex && normalIndex.length > 0) {\n                                var flattenFaceNormals = flattenData(normal, normalIndex);\n                                var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n                                normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n                            } else {\n                                var triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n                                normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n                            }\n                        }\n                    } else {\n                        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n                    }\n                    if (texCoord) {\n                        if (texCoordIndex && texCoordIndex.length > 0) {\n                            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n                            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n                        } else {\n                            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(texCoord, 2));\n                        }\n                    }\n                    var geometry = new THREE.BufferGeometry();\n                    positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new THREE.Float32BufferAttribute(coord, 3));\n                    geometry.setAttribute('position', positionAttribute);\n                    geometry.setAttribute('normal', normalAttribute);\n                    if (colorAttribute)\n                        geometry.setAttribute('color', colorAttribute);\n                    if (uvAttribute)\n                        geometry.setAttribute('uv', uvAttribute);\n                    geometry._solid = solid;\n                    geometry._type = 'mesh';\n                    return geometry;\n                }\n                function buildIndexedLineSetNode(node) {\n                    var color, coord;\n                    var colorIndex, coordIndex;\n                    var colorPerVertex = true;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'color':\n                            var colorNode = fieldValues[0];\n                            if (colorNode !== null) {\n                                color = getNode(colorNode);\n                            }\n                            break;\n                        case 'coord':\n                            var coordNode = fieldValues[0];\n                            if (coordNode !== null) {\n                                coord = getNode(coordNode);\n                            }\n                            break;\n                        case 'colorIndex':\n                            colorIndex = fieldValues;\n                            break;\n                        case 'colorPerVertex':\n                            colorPerVertex = fieldValues[0];\n                            break;\n                        case 'coordIndex':\n                            coordIndex = fieldValues;\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var colorAttribute;\n                    var expandedLineIndex = expandLineIndex(coordIndex);\n                    if (color) {\n                        if (colorPerVertex === true) {\n                            if (colorIndex.length > 0) {\n                                var expandedColorIndex = expandLineIndex(colorIndex);\n                                colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);\n                            } else {\n                                colorAttribute = toNonIndexedAttribute(expandedLineIndex, new THREE.Float32BufferAttribute(color, 3));\n                            }\n                        } else {\n                            if (colorIndex.length > 0) {\n                                var flattenLineColors = flattenData(color, colorIndex);\n                                var expandedLineColors = expandLineData(flattenLineColors, coordIndex);\n                                colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n                            } else {\n                                var expandedLineColors = expandLineData(color, coordIndex);\n                                colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n                            }\n                        }\n                    }\n                    var geometry = new THREE.BufferGeometry();\n                    var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new THREE.Float32BufferAttribute(coord, 3));\n                    geometry.setAttribute('position', positionAttribute);\n                    if (colorAttribute)\n                        geometry.setAttribute('color', colorAttribute);\n                    geometry._type = 'line';\n                    return geometry;\n                }\n                function buildPointSetNode(node) {\n                    var geometry;\n                    var color, coord;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'color':\n                            var colorNode = fieldValues[0];\n                            if (colorNode !== null) {\n                                color = getNode(colorNode);\n                            }\n                            break;\n                        case 'coord':\n                            var coordNode = fieldValues[0];\n                            if (coordNode !== null) {\n                                coord = getNode(coordNode);\n                            }\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var geometry = new THREE.BufferGeometry();\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(coord, 3));\n                    if (color)\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\n                    geometry._type = 'points';\n                    return geometry;\n                }\n                function buildBoxNode(node) {\n                    var size = new THREE.Vector3(2, 2, 2);\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'size':\n                            size.x = fieldValues[0];\n                            size.y = fieldValues[1];\n                            size.z = fieldValues[2];\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var geometry = new THREE.BoxBufferGeometry(size.x, size.y, size.z);\n                    return geometry;\n                }\n                function buildConeNode(node) {\n                    var radius = 1, height = 2, openEnded = false;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'bottom':\n                            openEnded = !fieldValues[0];\n                            break;\n                        case 'bottomRadius':\n                            radius = fieldValues[0];\n                            break;\n                        case 'height':\n                            height = fieldValues[0];\n                            break;\n                        case 'side':\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var geometry = new THREE.ConeBufferGeometry(radius, height, 16, 1, openEnded);\n                    return geometry;\n                }\n                function buildCylinderNode(node) {\n                    var radius = 1, height = 2;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'bottom':\n                            break;\n                        case 'radius':\n                            radius = fieldValues[0];\n                            break;\n                        case 'height':\n                            height = fieldValues[0];\n                            break;\n                        case 'side':\n                            break;\n                        case 'top':\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var geometry = new THREE.CylinderBufferGeometry(radius, radius, height, 16, 1);\n                    return geometry;\n                }\n                function buildSphereNode(node) {\n                    var radius = 1;\n                    var fields = node.fields;\n                    for (var i = 0, l = fields.length; i < l; i++) {\n                        var field = fields[i];\n                        var fieldName = field.name;\n                        var fieldValues = field.values;\n                        switch (fieldName) {\n                        case 'radius':\n                            radius = fieldValues[0];\n                            break;\n                        default:\n                            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n                            break;\n                        }\n                    }\n                    var geometry = new THREE.SphereBufferGeometry(radius, 16, 16);\n                    return geometry;\n                }\n                function resolveUSE(identifier) {\n                    var node = nodeMap[identifier];\n                    var build = getNode(node);\n                    return build.isObject3D || build.isMaterial ? build.clone() : build;\n                }\n                function parseFieldChildren(children, owner) {\n                    for (var i = 0, l = children.length; i < l; i++) {\n                        var object = getNode(children[i]);\n                        if (object instanceof THREE.Object3D)\n                            owner.add(object);\n                    }\n                }\n                function triangulateFaceIndex(index, ccw) {\n                    var indices = [];\n                    var start = 0;\n                    for (var i = 0, l = index.length; i < l; i++) {\n                        var i1 = index[start];\n                        var i2 = index[i + (ccw ? 1 : 2)];\n                        var i3 = index[i + (ccw ? 2 : 1)];\n                        indices.push(i1, i2, i3);\n                        if (index[i + 3] === -1 || i + 3 >= l) {\n                            i += 3;\n                            start = i + 1;\n                        }\n                    }\n                    return indices;\n                }\n                function triangulateFaceData(data, index) {\n                    var triangulatedData = [];\n                    var start = 0;\n                    for (var i = 0, l = index.length; i < l; i++) {\n                        var stride = start * 3;\n                        var x = data[stride];\n                        var y = data[stride + 1];\n                        var z = data[stride + 2];\n                        triangulatedData.push(x, y, z);\n                        if (index[i + 3] === -1 || i + 3 >= l) {\n                            i += 3;\n                            start++;\n                        }\n                    }\n                    return triangulatedData;\n                }\n                function flattenData(data, index) {\n                    var flattenData = [];\n                    for (var i = 0, l = index.length; i < l; i++) {\n                        var i1 = index[i];\n                        var stride = i1 * 3;\n                        var x = data[stride];\n                        var y = data[stride + 1];\n                        var z = data[stride + 2];\n                        flattenData.push(x, y, z);\n                    }\n                    return flattenData;\n                }\n                function expandLineIndex(index) {\n                    var indices = [];\n                    for (var i = 0, l = index.length; i < l; i++) {\n                        var i1 = index[i];\n                        var i2 = index[i + 1];\n                        indices.push(i1, i2);\n                        if (index[i + 2] === -1 || i + 2 >= l) {\n                            i += 2;\n                        }\n                    }\n                    return indices;\n                }\n                function expandLineData(data, index) {\n                    var triangulatedData = [];\n                    var start = 0;\n                    for (var i = 0, l = index.length; i < l; i++) {\n                        var stride = start * 3;\n                        var x = data[stride];\n                        var y = data[stride + 1];\n                        var z = data[stride + 2];\n                        triangulatedData.push(x, y, z);\n                        if (index[i + 2] === -1 || i + 2 >= l) {\n                            i += 2;\n                            start++;\n                        }\n                    }\n                    return triangulatedData;\n                }\n                var vA = new THREE.Vector3();\n                var vB = new THREE.Vector3();\n                var vC = new THREE.Vector3();\n                var uvA = new THREE.Vector2();\n                var uvB = new THREE.Vector2();\n                var uvC = new THREE.Vector2();\n                function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n                    var array = [];\n                    for (var i = 0, l = coordIndex.length; i < l; i += 3) {\n                        var a = index[i];\n                        var b = index[i + 1];\n                        var c = index[i + 2];\n                        if (itemSize === 2) {\n                            uvA.fromArray(data, a * itemSize);\n                            uvB.fromArray(data, b * itemSize);\n                            uvC.fromArray(data, c * itemSize);\n                            array.push(uvA.x, uvA.y);\n                            array.push(uvB.x, uvB.y);\n                            array.push(uvC.x, uvC.y);\n                        } else {\n                            vA.fromArray(data, a * itemSize);\n                            vB.fromArray(data, b * itemSize);\n                            vC.fromArray(data, c * itemSize);\n                            array.push(vA.x, vA.y, vA.z);\n                            array.push(vB.x, vB.y, vB.z);\n                            array.push(vC.x, vC.y, vC.z);\n                        }\n                    }\n                    return new THREE.Float32BufferAttribute(array, itemSize);\n                }\n                function computeAttributeFromFaceData(index, faceData) {\n                    var array = [];\n                    for (var i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n                        vA.fromArray(faceData, j * 3);\n                        array.push(vA.x, vA.y, vA.z);\n                        array.push(vA.x, vA.y, vA.z);\n                        array.push(vA.x, vA.y, vA.z);\n                    }\n                    return new THREE.Float32BufferAttribute(array, 3);\n                }\n                function computeAttributeFromLineData(index, lineData) {\n                    var array = [];\n                    for (var i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n                        vA.fromArray(lineData, j * 3);\n                        array.push(vA.x, vA.y, vA.z);\n                        array.push(vA.x, vA.y, vA.z);\n                    }\n                    return new THREE.Float32BufferAttribute(array, 3);\n                }\n                function toNonIndexedAttribute(indices, attribute) {\n                    var array = attribute.array;\n                    var itemSize = attribute.itemSize;\n                    var array2 = new array.constructor(indices.length * itemSize);\n                    var index = 0, index2 = 0;\n                    for (var i = 0, l = indices.length; i < l; i++) {\n                        index = indices[i] * itemSize;\n                        for (var j = 0; j < itemSize; j++) {\n                            array2[index2++] = array[index++];\n                        }\n                    }\n                    return new THREE.Float32BufferAttribute(array2, itemSize);\n                }\n                var ab = new THREE.Vector3();\n                var cb = new THREE.Vector3();\n                function computeNormalAttribute(index, coord, creaseAngle) {\n                    var faces = [];\n                    var vertexNormals = {};\n                    for (var i = 0, l = index.length; i < l; i += 3) {\n                        var a = index[i];\n                        var b = index[i + 1];\n                        var c = index[i + 2];\n                        var face = new Face(a, b, c);\n                        vA.fromArray(coord, a * 3);\n                        vB.fromArray(coord, b * 3);\n                        vC.fromArray(coord, c * 3);\n                        cb.subVectors(vC, vB);\n                        ab.subVectors(vA, vB);\n                        cb.cross(ab);\n                        cb.normalize();\n                        face.normal.copy(cb);\n                        if (vertexNormals[a] === undefined)\n                            vertexNormals[a] = [];\n                        if (vertexNormals[b] === undefined)\n                            vertexNormals[b] = [];\n                        if (vertexNormals[c] === undefined)\n                            vertexNormals[c] = [];\n                        vertexNormals[a].push(face.normal);\n                        vertexNormals[b].push(face.normal);\n                        vertexNormals[c].push(face.normal);\n                        faces.push(face);\n                    }\n                    var normals = [];\n                    for (var i = 0, l = faces.length; i < l; i++) {\n                        var face = faces[i];\n                        var nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n                        var nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n                        var nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n                        vA.fromArray(coord, face.a * 3);\n                        vB.fromArray(coord, face.b * 3);\n                        vC.fromArray(coord, face.c * 3);\n                        normals.push(nA.x, nA.y, nA.z);\n                        normals.push(nB.x, nB.y, nB.z);\n                        normals.push(nC.x, nC.y, nC.z);\n                    }\n                    return new THREE.Float32BufferAttribute(normals, 3);\n                }\n                function weightedNormal(normals, vector, creaseAngle) {\n                    var normal = new THREE.Vector3();\n                    if (creaseAngle === 0) {\n                        normal.copy(vector);\n                    } else {\n                        for (var i = 0, l = normals.length; i < l; i++) {\n                            if (normals[i].angleTo(vector) < creaseAngle) {\n                                normal.add(normals[i]);\n                            }\n                        }\n                    }\n                    return normal.normalize();\n                }\n                function toColorArray(colors) {\n                    var array = [];\n                    for (var i = 0, l = colors.length; i < l; i += 3) {\n                        array.push(new THREE.Color(colors[i], colors[i + 1], colors[i + 2]));\n                    }\n                    return array;\n                }\n                function paintFaces(geometry, radius, angles, colors, topDown) {\n                    var thresholds = [];\n                    var startAngle = topDown === true ? 0 : Math.PI;\n                    for (var i = 0, l = colors.length; i < l; i++) {\n                        var angle = i === 0 ? 0 : angles[i - 1];\n                        angle = topDown === true ? angle : startAngle - angle;\n                        var point = new THREE.Vector3();\n                        point.setFromSphericalCoords(radius, angle, 0);\n                        thresholds.push(point);\n                    }\n                    var indices = geometry.index;\n                    var positionAttribute = geometry.attributes.position;\n                    var colorAttribute = new THREE.BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n                    var position = new THREE.Vector3();\n                    var color = new THREE.Color();\n                    for (var i = 0; i < indices.count; i++) {\n                        var index = indices.getX(i);\n                        position.fromBufferAttribute(positionAttribute, index);\n                        var thresholdIndexA, thresholdIndexB;\n                        var t = 1;\n                        for (var j = 1; j < thresholds.length; j++) {\n                            thresholdIndexA = j - 1;\n                            thresholdIndexB = j;\n                            var thresholdA = thresholds[thresholdIndexA];\n                            var thresholdB = thresholds[thresholdIndexB];\n                            if (topDown === true) {\n                                if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n                                    t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                                    break;\n                                }\n                            } else {\n                                if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n                                    t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                                    break;\n                                }\n                            }\n                        }\n                        var colorA = colors[thresholdIndexA];\n                        var colorB = colors[thresholdIndexB];\n                        color.copy(colorA).lerp(colorB, t);\n                        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n                    }\n                    geometry.setAttribute('color', colorAttribute);\n                }\n                var textureLoader = new THREE.TextureLoader(this.manager);\n                textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n                var tree = generateVRMLTree(data);\n                if (tree.version.indexOf('V2.0') === -1) {\n                    throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n                }\n                var scene = parseTree(tree);\n                return scene;\n            }\n        });\n        function VRMLLexer(tokens) {\n            this.lexer = new chevrotain.Lexer(tokens);\n        }\n        VRMLLexer.prototype = {\n            constructor: VRMLLexer,\n            lex: function (inputText) {\n                var lexingResult = this.lexer.tokenize(inputText);\n                if (lexingResult.errors.length > 0) {\n                    console.error(lexingResult.errors);\n                    throw Error('THREE.VRMLLexer: Lexing errors detected.');\n                }\n                return lexingResult;\n            }\n        };\n        function VRMLParser(tokenVocabulary) {\n            chevrotain.Parser.call(this, tokenVocabulary);\n            var $ = this;\n            var Version = tokenVocabulary['Version'];\n            var LCurly = tokenVocabulary['LCurly'];\n            var RCurly = tokenVocabulary['RCurly'];\n            var LSquare = tokenVocabulary['LSquare'];\n            var RSquare = tokenVocabulary['RSquare'];\n            var Identifier = tokenVocabulary['Identifier'];\n            var RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n            var StringLiteral = tokenVocabulary['StringLiteral'];\n            var HexLiteral = tokenVocabulary['HexLiteral'];\n            var NumberLiteral = tokenVocabulary['NumberLiteral'];\n            var TrueLiteral = tokenVocabulary['TrueLiteral'];\n            var FalseLiteral = tokenVocabulary['FalseLiteral'];\n            var NullLiteral = tokenVocabulary['NullLiteral'];\n            var DEF = tokenVocabulary['DEF'];\n            var USE = tokenVocabulary['USE'];\n            var ROUTE = tokenVocabulary['ROUTE'];\n            var TO = tokenVocabulary['TO'];\n            var NodeName = tokenVocabulary['NodeName'];\n            $.RULE('vrml', function () {\n                $.SUBRULE($.version);\n                $.AT_LEAST_ONE(function () {\n                    $.SUBRULE($.node);\n                });\n                $.MANY(function () {\n                    $.SUBRULE($.route);\n                });\n            });\n            $.RULE('version', function () {\n                $.CONSUME(Version);\n            });\n            $.RULE('node', function () {\n                $.OPTION(function () {\n                    $.SUBRULE($.def);\n                });\n                $.CONSUME(NodeName);\n                $.CONSUME(LCurly);\n                $.MANY(function () {\n                    $.SUBRULE($.field);\n                });\n                $.CONSUME(RCurly);\n            });\n            $.RULE('field', function () {\n                $.CONSUME(Identifier);\n                $.OR2([\n                    {\n                        ALT: function () {\n                            $.SUBRULE($.singleFieldValue);\n                        }\n                    },\n                    {\n                        ALT: function () {\n                            $.SUBRULE($.multiFieldValue);\n                        }\n                    }\n                ]);\n            });\n            $.RULE('def', function () {\n                $.CONSUME(DEF);\n                $.CONSUME(Identifier);\n            });\n            $.RULE('use', function () {\n                $.CONSUME(USE);\n                $.CONSUME(Identifier);\n            });\n            $.RULE('singleFieldValue', function () {\n                $.AT_LEAST_ONE(function () {\n                    $.OR([\n                        {\n                            ALT: function () {\n                                $.SUBRULE($.node);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.SUBRULE($.use);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(StringLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(HexLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(NumberLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(TrueLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(FalseLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(NullLiteral);\n                            }\n                        }\n                    ]);\n                });\n            });\n            $.RULE('multiFieldValue', function () {\n                $.CONSUME(LSquare);\n                $.MANY(function () {\n                    $.OR([\n                        {\n                            ALT: function () {\n                                $.SUBRULE($.node);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.SUBRULE($.use);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(StringLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(HexLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(NumberLiteral);\n                            }\n                        },\n                        {\n                            ALT: function () {\n                                $.CONSUME(NullLiteral);\n                            }\n                        }\n                    ]);\n                });\n                $.CONSUME(RSquare);\n            });\n            $.RULE('route', function () {\n                $.CONSUME(ROUTE);\n                $.CONSUME(RouteIdentifier);\n                $.CONSUME(TO);\n                $.CONSUME2(RouteIdentifier);\n            });\n            this.performSelfAnalysis();\n        }\n        VRMLParser.prototype = Object.create(chevrotain.Parser.prototype);\n        VRMLParser.prototype.constructor = VRMLParser;\n        function Face(a, b, c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n            this.normal = new THREE.Vector3();\n        }\n        var TEXTURE_TYPE = {\n            INTENSITY: 1,\n            INTENSITY_ALPHA: 2,\n            RGB: 3,\n            RGBA: 4\n        };\n        return VRMLLoader;\n    }();\n    return VRMLLoader;\n});\ndefine('skylark-threejs-ex/loaders/VTKLoader',[\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate'\n], function (\n    THREE, \n    Inflate\n) {\n    'use strict';\n    var VTKLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    VTKLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: VTKLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function parseASCII(data) {\n                var indices = [];\n                var positions = [];\n                var colors = [];\n                var normals = [];\n                var result;\n                var patWord = /^[^\\d.\\s-]+/;\n                var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n                var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n                var patPOINTS = /^POINTS /;\n                var patPOLYGONS = /^POLYGONS /;\n                var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n                var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n                var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n                var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n                var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n                var inPointsSection = false;\n                var inPolygonsSection = false;\n                var inTriangleStripSection = false;\n                var inPointDataSection = false;\n                var inCellDataSection = false;\n                var inColorSection = false;\n                var inNormalsSection = false;\n                var lines = data.split('\\n');\n                for (var i in lines) {\n                    var line = lines[i].trim();\n                    if (line.indexOf('DATASET') === 0) {\n                        var dataset = line.split(' ')[1];\n                        if (dataset !== 'POLYDATA')\n                            throw new Error('Unsupported DATASET type: ' + dataset);\n                    } else if (inPointsSection) {\n                        while ((result = pat3Floats.exec(line)) !== null) {\n                            if (patWord.exec(line) !== null)\n                                break;\n                            var x = parseFloat(result[1]);\n                            var y = parseFloat(result[2]);\n                            var z = parseFloat(result[3]);\n                            positions.push(x, y, z);\n                        }\n                    } else if (inPolygonsSection) {\n                        if ((result = patConnectivity.exec(line)) !== null) {\n                            var numVertices = parseInt(result[1]);\n                            var inds = result[2].split(/\\s+/);\n                            if (numVertices >= 3) {\n                                var i0 = parseInt(inds[0]);\n                                var i1, i2;\n                                var k = 1;\n                                for (var j = 0; j < numVertices - 2; ++j) {\n                                    i1 = parseInt(inds[k]);\n                                    i2 = parseInt(inds[k + 1]);\n                                    indices.push(i0, i1, i2);\n                                    k++;\n                                }\n                            }\n                        }\n                    } else if (inTriangleStripSection) {\n                        if ((result = patConnectivity.exec(line)) !== null) {\n                            var numVertices = parseInt(result[1]);\n                            var inds = result[2].split(/\\s+/);\n                            if (numVertices >= 3) {\n                                var i0, i1, i2;\n                                for (var j = 0; j < numVertices - 2; j++) {\n                                    if (j % 2 === 1) {\n                                        i0 = parseInt(inds[j]);\n                                        i1 = parseInt(inds[j + 2]);\n                                        i2 = parseInt(inds[j + 1]);\n                                        indices.push(i0, i1, i2);\n                                    } else {\n                                        i0 = parseInt(inds[j]);\n                                        i1 = parseInt(inds[j + 1]);\n                                        i2 = parseInt(inds[j + 2]);\n                                        indices.push(i0, i1, i2);\n                                    }\n                                }\n                            }\n                        }\n                    } else if (inPointDataSection || inCellDataSection) {\n                        if (inColorSection) {\n                            while ((result = pat3Floats.exec(line)) !== null) {\n                                if (patWord.exec(line) !== null)\n                                    break;\n                                var r = parseFloat(result[1]);\n                                var g = parseFloat(result[2]);\n                                var b = parseFloat(result[3]);\n                                colors.push(r, g, b);\n                            }\n                        } else if (inNormalsSection) {\n                            while ((result = pat3Floats.exec(line)) !== null) {\n                                if (patWord.exec(line) !== null)\n                                    break;\n                                var nx = parseFloat(result[1]);\n                                var ny = parseFloat(result[2]);\n                                var nz = parseFloat(result[3]);\n                                normals.push(nx, ny, nz);\n                            }\n                        }\n                    }\n                    if (patPOLYGONS.exec(line) !== null) {\n                        inPolygonsSection = true;\n                        inPointsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patPOINTS.exec(line) !== null) {\n                        inPolygonsSection = false;\n                        inPointsSection = true;\n                        inTriangleStripSection = false;\n                    } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n                        inPolygonsSection = false;\n                        inPointsSection = false;\n                        inTriangleStripSection = true;\n                    } else if (patPOINT_DATA.exec(line) !== null) {\n                        inPointDataSection = true;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patCELL_DATA.exec(line) !== null) {\n                        inCellDataSection = true;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patCOLOR_SCALARS.exec(line) !== null) {\n                        inColorSection = true;\n                        inNormalsSection = false;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    } else if (patNORMALS.exec(line) !== null) {\n                        inNormalsSection = true;\n                        inColorSection = false;\n                        inPointsSection = false;\n                        inPolygonsSection = false;\n                        inTriangleStripSection = false;\n                    }\n                }\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(indices);\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n                if (normals.length === positions.length) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                }\n                if (colors.length !== indices.length) {\n                    if (colors.length === positions.length) {\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n                    }\n                } else {\n                    geometry = geometry.toNonIndexed();\n                    var numTriangles = geometry.attributes.position.count / 3;\n                    if (colors.length === numTriangles * 3) {\n                        var newColors = [];\n                        for (var i = 0; i < numTriangles; i++) {\n                            var r = colors[3 * i + 0];\n                            var g = colors[3 * i + 1];\n                            var b = colors[3 * i + 2];\n                            newColors.push(r, g, b);\n                            newColors.push(r, g, b);\n                            newColors.push(r, g, b);\n                        }\n                        geometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));\n                    }\n                }\n                return geometry;\n            }\n            function parseBinary(data) {\n                var count, pointIndex, i, numberOfPoints, s;\n                var buffer = new Uint8Array(data);\n                var dataView = new DataView(data);\n                var points = [];\n                var normals = [];\n                var indices = [];\n                var vtk = [];\n                var index = 0;\n                function findString(buffer, start) {\n                    var index = start;\n                    var c = buffer[index];\n                    var s = [];\n                    while (c !== 10) {\n                        s.push(String.fromCharCode(c));\n                        index++;\n                        c = buffer[index];\n                    }\n                    return {\n                        start: start,\n                        end: index,\n                        next: index + 1,\n                        parsedString: s.join('')\n                    };\n                }\n                var state, line;\n                while (true) {\n                    state = findString(buffer, index);\n                    line = state.parsedString;\n                    if (line.indexOf('DATASET') === 0) {\n                        var dataset = line.split(' ')[1];\n                        if (dataset !== 'POLYDATA')\n                            throw new Error('Unsupported DATASET type: ' + dataset);\n                    } else if (line.indexOf('POINTS') === 0) {\n                        vtk.push(line);\n                        numberOfPoints = parseInt(line.split(' ')[1], 10);\n                        count = numberOfPoints * 4 * 3;\n                        points = new Float32Array(numberOfPoints * 3);\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfPoints; i++) {\n                            points[3 * i] = dataView.getFloat32(pointIndex, false);\n                            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n                            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n                            pointIndex = pointIndex + 12;\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n                        var numberOfStrips = parseInt(line.split(' ')[1], 10);\n                        var size = parseInt(line.split(' ')[2], 10);\n                        count = size * 4;\n                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                        var indicesIndex = 0;\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfStrips; i++) {\n                            var indexCount = dataView.getInt32(pointIndex, false);\n                            var strip = [];\n                            pointIndex += 4;\n                            for (s = 0; s < indexCount; s++) {\n                                strip.push(dataView.getInt32(pointIndex, false));\n                                pointIndex += 4;\n                            }\n                            for (var j = 0; j < indexCount - 2; j++) {\n                                if (j % 2) {\n                                    indices[indicesIndex++] = strip[j];\n                                    indices[indicesIndex++] = strip[j + 2];\n                                    indices[indicesIndex++] = strip[j + 1];\n                                } else {\n                                    indices[indicesIndex++] = strip[j];\n                                    indices[indicesIndex++] = strip[j + 1];\n                                    indices[indicesIndex++] = strip[j + 2];\n                                }\n                            }\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('POLYGONS') === 0) {\n                        var numberOfStrips = parseInt(line.split(' ')[1], 10);\n                        var size = parseInt(line.split(' ')[2], 10);\n                        count = size * 4;\n                        indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                        var indicesIndex = 0;\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfStrips; i++) {\n                            var indexCount = dataView.getInt32(pointIndex, false);\n                            var strip = [];\n                            pointIndex += 4;\n                            for (s = 0; s < indexCount; s++) {\n                                strip.push(dataView.getInt32(pointIndex, false));\n                                pointIndex += 4;\n                            }\n                            for (var j = 1; j < indexCount - 1; j++) {\n                                indices[indicesIndex++] = strip[0];\n                                indices[indicesIndex++] = strip[j];\n                                indices[indicesIndex++] = strip[j + 1];\n                            }\n                        }\n                        state.next = state.next + count + 1;\n                    } else if (line.indexOf('POINT_DATA') === 0) {\n                        numberOfPoints = parseInt(line.split(' ')[1], 10);\n                        state = findString(buffer, state.next);\n                        count = numberOfPoints * 4 * 3;\n                        normals = new Float32Array(numberOfPoints * 3);\n                        pointIndex = state.next;\n                        for (i = 0; i < numberOfPoints; i++) {\n                            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n                            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n                            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n                            pointIndex += 12;\n                        }\n                        state.next = state.next + count;\n                    }\n                    index = state.next;\n                    if (index >= buffer.byteLength) {\n                        break;\n                    }\n                }\n                var geometry = new THREE.BufferGeometry();\n                geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n                geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));\n                if (normals.length === points.length) {\n                    geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                }\n                return geometry;\n            }\n            function Float32Concat(first, second) {\n                var firstLength = first.length, result = new Float32Array(firstLength + second.length);\n                result.set(first);\n                result.set(second, firstLength);\n                return result;\n            }\n            function Int32Concat(first, second) {\n                var firstLength = first.length, result = new Int32Array(firstLength + second.length);\n                result.set(first);\n                result.set(second, firstLength);\n                return result;\n            }\n            function parseXML(stringFile) {\n                function xmlToJson(xml) {\n                    var obj = {};\n                    if (xml.nodeType === 1) {\n                        if (xml.attributes) {\n                            if (xml.attributes.length > 0) {\n                                obj['attributes'] = {};\n                                for (var j = 0; j < xml.attributes.length; j++) {\n                                    var attribute = xml.attributes.item(j);\n                                    obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim();\n                                }\n                            }\n                        }\n                    } else if (xml.nodeType === 3) {\n                        obj = xml.nodeValue.trim();\n                    }\n                    if (xml.hasChildNodes()) {\n                        for (var i = 0; i < xml.childNodes.length; i++) {\n                            var item = xml.childNodes.item(i);\n                            var nodeName = item.nodeName;\n                            if (typeof obj[nodeName] === 'undefined') {\n                                var tmp = xmlToJson(item);\n                                if (tmp !== '')\n                                    obj[nodeName] = tmp;\n                            } else {\n                                if (typeof obj[nodeName].push === 'undefined') {\n                                    var old = obj[nodeName];\n                                    obj[nodeName] = [old];\n                                }\n                                var tmp = xmlToJson(item);\n                                if (tmp !== '')\n                                    obj[nodeName].push(tmp);\n                            }\n                        }\n                    }\n                    return obj;\n                }\n                function Base64toByteArray(b64) {\n                    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n                    var i;\n                    var lookup = [];\n                    var revLookup = [];\n                    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n                    var len = code.length;\n                    for (i = 0; i < len; i++) {\n                        lookup[i] = code[i];\n                    }\n                    for (i = 0; i < len; ++i) {\n                        revLookup[code.charCodeAt(i)] = i;\n                    }\n                    revLookup['-'.charCodeAt(0)] = 62;\n                    revLookup['_'.charCodeAt(0)] = 63;\n                    var j, l, tmp, placeHolders, arr;\n                    var len = b64.length;\n                    if (len % 4 > 0) {\n                        throw new Error('Invalid string. Length must be a multiple of 4');\n                    }\n                    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n                    arr = new Arr(len * 3 / 4 - placeHolders);\n                    l = placeHolders > 0 ? len - 4 : len;\n                    var L = 0;\n                    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n                        arr[L++] = (tmp & 16711680) >> 16;\n                        arr[L++] = (tmp & 65280) >> 8;\n                        arr[L++] = tmp & 255;\n                    }\n                    if (placeHolders === 2) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n                        arr[L++] = tmp & 255;\n                    } else if (placeHolders === 1) {\n                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n                        arr[L++] = tmp >> 8 & 255;\n                        arr[L++] = tmp & 255;\n                    }\n                    return arr;\n                }\n                function parseDataArray(ele, compressed) {\n                    var numBytes = 0;\n                    if (json.attributes.header_type === 'UInt64') {\n                        numBytes = 8;\n                    } else if (json.attributes.header_type === 'UInt32') {\n                        numBytes = 4;\n                    }\n                    if (ele.attributes.format === 'binary' && compressed) {\n                        var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n                        if (ele.attributes.type === 'Float32') {\n                            var txt = new Float32Array();\n                        } else if (ele.attributes.type === 'Int64') {\n                            var txt = new Int32Array();\n                        }\n                        rawData = ele['#text'];\n                        byteData = Base64toByteArray(rawData);\n                        blocks = byteData[0];\n                        for (var i = 1; i < numBytes - 1; i++) {\n                            blocks = blocks | byteData[i] << i * numBytes;\n                        }\n                        headerSize = (blocks + 3) * numBytes;\n                        padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n                        headerSize = headerSize + padding;\n                        dataOffsets = [];\n                        currentOffset = headerSize;\n                        dataOffsets.push(currentOffset);\n                        cSizeStart = 3 * numBytes;\n                        for (var i = 0; i < blocks; i++) {\n                            var currentBlockSize = byteData[i * numBytes + cSizeStart];\n                            for (var j = 1; j < numBytes - 1; j++) {\n                                currentBlockSize = currentBlockSize | byteData[i * numBytes + cSizeStart + j] << j * 8;\n                            }\n                            currentOffset = currentOffset + currentBlockSize;\n                            dataOffsets.push(currentOffset);\n                        }\n                        for (var i = 0; i < dataOffsets.length - 1; i++) {\n                            var inflate = new Inflate(byteData.slice(dataOffsets[i], dataOffsets[i + 1]), {\n                                resize: true,\n                                verify: true\n                            });\n                            content = inflate.decompress();\n                            content = content.buffer;\n                            if (ele.attributes.type === 'Float32') {\n                                content = new Float32Array(content);\n                                txt = Float32Concat(txt, content);\n                            } else if (ele.attributes.type === 'Int64') {\n                                content = new Int32Array(content);\n                                txt = Int32Concat(txt, content);\n                            }\n                        }\n                        delete ele['#text'];\n                        if (ele.attributes.type === 'Int64') {\n                            if (ele.attributes.format === 'binary') {\n                                txt = txt.filter(function (el, idx) {\n                                    if (idx % 2 !== 1)\n                                        return true;\n                                });\n                            }\n                        }\n                    } else {\n                        if (ele.attributes.format === 'binary' && !compressed) {\n                            var content = Base64toByteArray(ele['#text']);\n                            content = content.slice(numBytes).buffer;\n                        } else {\n                            if (ele['#text']) {\n                                var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                                    if (el !== '')\n                                        return el;\n                                });\n                            } else {\n                                var content = new Int32Array(0).buffer;\n                            }\n                        }\n                        delete ele['#text'];\n                        if (ele.attributes.type === 'Float32') {\n                            var txt = new Float32Array(content);\n                        } else if (ele.attributes.type === 'Int32') {\n                            var txt = new Int32Array(content);\n                        } else if (ele.attributes.type === 'Int64') {\n                            var txt = new Int32Array(content);\n                            if (ele.attributes.format === 'binary') {\n                                txt = txt.filter(function (el, idx) {\n                                    if (idx % 2 !== 1)\n                                        return true;\n                                });\n                            }\n                        }\n                    }\n                    return txt;\n                }\n                var dom = null;\n                if (window.DOMParser) {\n                    try {\n                        dom = new DOMParser().parseFromString(stringFile, 'text/xml');\n                    } catch (e) {\n                        dom = null;\n                    }\n                } else if (window.ActiveXObject) {\n                    try {\n                        dom = new ActiveXObject('Microsoft.XMLDOM');\n                        dom.async = false;\n                        if (!dom.loadXML()) {\n                            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n                        }\n                    } catch (e) {\n                        dom = null;\n                    }\n                } else {\n                    throw new Error('Cannot parse xml string!');\n                }\n                var doc = dom.documentElement;\n                var json = xmlToJson(doc);\n                var points = [];\n                var normals = [];\n                var indices = [];\n                if (json.PolyData) {\n                    var piece = json.PolyData.Piece;\n                    var compressed = json.attributes.hasOwnProperty('compressor');\n                    var sections = [\n                        'PointData',\n                        'Points',\n                        'Strips',\n                        'Polys'\n                    ];\n                    var sectionIndex = 0, numberOfSections = sections.length;\n                    while (sectionIndex < numberOfSections) {\n                        var section = piece[sections[sectionIndex]];\n                        if (section && section.DataArray) {\n                            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n                                var arr = section.DataArray;\n                            } else {\n                                var arr = [section.DataArray];\n                            }\n                            var dataArrayIndex = 0, numberOfDataArrays = arr.length;\n                            while (dataArrayIndex < numberOfDataArrays) {\n                                if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                                    arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n                                }\n                                dataArrayIndex++;\n                            }\n                            switch (sections[sectionIndex]) {\n                            case 'PointData':\n                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                                var normalsName = section.attributes.Normals;\n                                if (numberOfPoints > 0) {\n                                    for (var i = 0, len = arr.length; i < len; i++) {\n                                        if (normalsName === arr[i].attributes.Name) {\n                                            var components = arr[i].attributes.NumberOfComponents;\n                                            normals = new Float32Array(numberOfPoints * components);\n                                            normals.set(arr[i].text, 0);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 'Points':\n                                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                                if (numberOfPoints > 0) {\n                                    var components = section.DataArray.attributes.NumberOfComponents;\n                                    points = new Float32Array(numberOfPoints * components);\n                                    points.set(section.DataArray.text, 0);\n                                }\n                                break;\n                            case 'Strips':\n                                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                                if (numberOfStrips > 0) {\n                                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                                    var offset = new Int32Array(section.DataArray[1].text.length);\n                                    connectivity.set(section.DataArray[0].text, 0);\n                                    offset.set(section.DataArray[1].text, 0);\n                                    var size = numberOfStrips + connectivity.length;\n                                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                                    var indicesIndex = 0;\n                                    for (var i = 0, len = numberOfStrips; i < len; i++) {\n                                        var strip = [];\n                                        for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                                            strip.push(connectivity[s]);\n                                            if (i > 0)\n                                                len0 = offset[i - 1];\n                                        }\n                                        for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                                            if (j % 2) {\n                                                indices[indicesIndex++] = strip[j];\n                                                indices[indicesIndex++] = strip[j + 2];\n                                                indices[indicesIndex++] = strip[j + 1];\n                                            } else {\n                                                indices[indicesIndex++] = strip[j];\n                                                indices[indicesIndex++] = strip[j + 1];\n                                                indices[indicesIndex++] = strip[j + 2];\n                                            }\n                                            if (i > 0)\n                                                len0 = offset[i - 1];\n                                        }\n                                    }\n                                }\n                                break;\n                            case 'Polys':\n                                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                                if (numberOfPolys > 0) {\n                                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                                    var offset = new Int32Array(section.DataArray[1].text.length);\n                                    connectivity.set(section.DataArray[0].text, 0);\n                                    offset.set(section.DataArray[1].text, 0);\n                                    var size = numberOfPolys + connectivity.length;\n                                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                                    var indicesIndex = 0, connectivityIndex = 0;\n                                    var i = 0, len = numberOfPolys, len0 = 0;\n                                    while (i < len) {\n                                        var poly = [];\n                                        var s = 0, len1 = offset[i];\n                                        while (s < len1 - len0) {\n                                            poly.push(connectivity[connectivityIndex++]);\n                                            s++;\n                                        }\n                                        var j = 1;\n                                        while (j < len1 - len0 - 1) {\n                                            indices[indicesIndex++] = poly[0];\n                                            indices[indicesIndex++] = poly[j];\n                                            indices[indicesIndex++] = poly[j + 1];\n                                            j++;\n                                        }\n                                        i++;\n                                        len0 = offset[i - 1];\n                                    }\n                                }\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n                        sectionIndex++;\n                    }\n                    var geometry = new THREE.BufferGeometry();\n                    geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(points, 3));\n                    if (normals.length === points.length) {\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                    }\n                    return geometry;\n                } else {\n                    throw new Error('Unsupported DATASET type');\n                }\n            }\n            function getStringFile(data) {\n                var stringFile = '';\n                var charArray = new Uint8Array(data);\n                var i = 0;\n                var len = charArray.length;\n                while (len--) {\n                    stringFile += String.fromCharCode(charArray[i++]);\n                }\n                return stringFile;\n            }\n            var meta = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split('\\n');\n            if (meta[0].indexOf('xml') !== -1) {\n                return parseXML(getStringFile(data));\n            } else if (meta[2].includes('ASCII')) {\n                return parseASCII(getStringFile(data));\n            } else {\n                return parseBinary(data);\n            }\n        }\n    });\n\n    return VTKLoader;\n});\ndefine('skylark-threejs-ex/loaders/XLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var XLoader = function () {\n        var classCallCheck = function (instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n            }\n        };\n        var createClass = function () {\n            function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if ('value' in descriptor)\n                        descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            return function (Constructor, protoProps, staticProps) {\n                if (protoProps)\n                    defineProperties(Constructor.prototype, protoProps);\n                if (staticProps)\n                    defineProperties(Constructor, staticProps);\n                return Constructor;\n            };\n        }();\n        var XboneInf = function XboneInf() {\n            classCallCheck(this, XboneInf);\n            this.boneName = '';\n            this.BoneIndex = 0;\n            this.Indeces = [];\n            this.Weights = [];\n            this.initMatrix = null;\n            this.OffsetMatrix = null;\n        };\n        var XAnimationInfo = function XAnimationInfo() {\n            classCallCheck(this, XAnimationInfo);\n            this.animeName = '';\n            this.boneName = '';\n            this.targetBone = null;\n            this.keyType = 4;\n            this.frameStartLv = 0;\n            this.keyFrames = [];\n            this.InverseMx = null;\n        };\n        var XAnimationObj = function () {\n            function XAnimationObj(_flags) {\n                classCallCheck(this, XAnimationObj);\n                this.fps = 30;\n                this.name = 'xanimation';\n                this.length = 0;\n                this.hierarchy = [];\n                this.putFlags = _flags;\n                if (this.putFlags.putPos === undefined) {\n                    this.putFlags.putPos = true;\n                }\n                if (this.putFlags.putRot === undefined) {\n                    this.putFlags.putRot = true;\n                }\n                if (this.putFlags.putScl === undefined) {\n                    this.putFlags.putScl = true;\n                }\n            }\n            createClass(XAnimationObj, [\n                {\n                    key: 'make',\n                    value: function make(XAnimationInfoArray) {\n                        for (var i = 0; i < XAnimationInfoArray.length; i++) {\n                            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n                        }\n                        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n                    }\n                },\n                {\n                    key: 'clone',\n                    value: function clone() {\n                        return Object.assign({}, this);\n                    }\n                },\n                {\n                    key: 'makeBonekeys',\n                    value: function makeBonekeys(XAnimationInfo) {\n                        var refObj = {};\n                        refObj.name = XAnimationInfo.boneName;\n                        refObj.parent = '';\n                        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n                        refObj.copy = function () {\n                            return Object.assign({}, this);\n                        };\n                        return refObj;\n                    }\n                },\n                {\n                    key: 'keyFrameRefactor',\n                    value: function keyFrameRefactor(XAnimationInfo) {\n                        var keys = [];\n                        for (var i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n                            var keyframe = {};\n                            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n                            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n                                keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n                            }\n                            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n                                keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n                            }\n                            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n                                keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n                            }\n                            if (XAnimationInfo.keyFrames[i].matrix) {\n                                keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n                                if (this.putFlags.putPos) {\n                                    keyframe.pos = new THREE.Vector3().setFromMatrixPosition(keyframe.matrix);\n                                }\n                                if (this.putFlags.putRot) {\n                                    keyframe.rot = new THREE.Quaternion().setFromRotationMatrix(keyframe.matrix);\n                                }\n                                if (this.putFlags.putScl) {\n                                    keyframe.scl = new THREE.Vector3().setFromMatrixScale(keyframe.matrix);\n                                }\n                            }\n                            keys.push(keyframe);\n                        }\n                        return keys;\n                    }\n                }\n            ]);\n            return XAnimationObj;\n        }();\n        var XKeyFrameInfo = function XKeyFrameInfo() {\n            classCallCheck(this, XKeyFrameInfo);\n            this.index = 0;\n            this.Frame = 0;\n            this.time = 0;\n            this.matrix = null;\n        };\n        var XLoader = function () {\n            function XLoader(manager) {\n                THREE.Loader.call(this, manager);\n                classCallCheck(this, XLoader);\n                this.debug = false;\n                this.texloader = new THREE.TextureLoader(this.manager);\n                this.url = '';\n                this._putMatLength = 0;\n                this._nowMat = null;\n                this._nowFrameName = '';\n                this.frameHierarchie = [];\n                this.Hierarchies = {};\n                this.HieStack = [];\n                this._currentObject = {};\n                this._currentFrame = {};\n                this._data = null;\n                this.onLoad = null;\n                this.IsUvYReverse = true;\n                this.Meshes = [];\n                this.animations = [];\n                this.animTicksPerSecond = 30;\n                this._currentGeo = null;\n                this._currentAnime = null;\n                this._currentAnimeFrames = null;\n            }\n            createClass(XLoader, [\n                {\n                    key: '_setArgOption',\n                    value: function _setArgOption(_arg) {\n                        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        if (!_arg) {\n                            return;\n                        }\n                        for (var i = _start; i < _arg.length; i++) {\n                            switch (i) {\n                            case 0:\n                                this.url = _arg[i];\n                                break;\n                            case 1:\n                                this.options = _arg[i];\n                                break;\n                            }\n                        }\n                        if (this.options === undefined) {\n                            this.options = {};\n                        }\n                    }\n                },\n                {\n                    key: 'load',\n                    value: function load(_arg, onLoad, onProgress, onError) {\n                        var _this = this;\n                        this._setArgOption(_arg);\n                        var loader = new THREE.FileLoader(this.manager);\n                        loader.setPath(this.path);\n                        loader.setResponseType('arraybuffer');\n                        loader.load(this.url, function (response) {\n                            _this.parse(response, onLoad);\n                        }, onProgress, onError);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_isBinary',\n                    value: function _isBinary(binData) {\n                        var reader = new DataView(binData);\n                        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                        var n_faces = reader.getUint32(80, true);\n                        var expect = 80 + 32 / 8 + n_faces * face_size;\n                        if (expect === reader.byteLength) {\n                            return true;\n                        }\n                        var fileLength = reader.byteLength;\n                        for (var index = 0; index < fileLength; index++) {\n                            if (reader.getUint8(index, false) > 127) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: '_ensureBinary',\n                    value: function _ensureBinary(buf) {\n                        if (typeof buf === 'string') {\n                            var array_buffer = new Uint8Array(buf.length);\n                            for (var i = 0; i < buf.length; i++) {\n                                array_buffer[i] = buf.charCodeAt(i) & 255;\n                            }\n                            return array_buffer.buffer || array_buffer;\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: '_ensureString',\n                    value: function _ensureString(buf) {\n                        if (typeof buf !== 'string') {\n                            return THREE.LoaderUtils.decodeText(new Uint8Array(buf));\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: 'parse',\n                    value: function _parse(data, onLoad) {\n                        var binData = this._ensureBinary(data);\n                        this._data = this._ensureString(data);\n                        this.onLoad = onLoad;\n                        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n                    }\n                },\n                {\n                    key: '_parseBinary',\n                    value: function _parseBinary(data) {\n                        return this._parseASCII(THREE.LoaderUtils.decodeText(new Uint8Array(data)));\n                    }\n                },\n                {\n                    key: '_parseASCII',\n                    value: function _parseASCII() {\n                        var path;\n                        if (this.resourcePath !== '') {\n                            path = this.resourcePath;\n                        } else if (this.path !== '') {\n                            path = this.path;\n                        } else {\n                            path = THREE.LoaderUtils.extractUrlBase(this.url);\n                        }\n                        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n                        var endRead = 16;\n                        this.Hierarchies.children = [];\n                        this._hierarchieParse(this.Hierarchies, endRead);\n                        this._changeRoot();\n                        this._currentObject = this.Hierarchies.children.shift();\n                        this._mainloop();\n                    }\n                },\n                {\n                    key: '_hierarchieParse',\n                    value: function _hierarchieParse(_parent, _end) {\n                        var endRead = _end;\n                        while (true) {\n                            var find1 = this._data.indexOf('{', endRead) + 1;\n                            var findEnd = this._data.indexOf('}', endRead);\n                            var findNext = this._data.indexOf('{', find1) + 1;\n                            if (find1 > 0 && findEnd > find1) {\n                                var _currentObject = {};\n                                _currentObject.children = [];\n                                var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n                                var word = nameData.split(/ /g);\n                                if (word.length > 0) {\n                                    _currentObject.type = word[0];\n                                    if (word.length >= 2) {\n                                        _currentObject.name = word[1];\n                                    } else {\n                                        _currentObject.name = word[0] + this.Hierarchies.children.length;\n                                    }\n                                } else {\n                                    _currentObject.name = nameData;\n                                    _currentObject.type = '';\n                                }\n                                if (_currentObject.type === 'Animation') {\n                                    _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n                                    var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n                                    endRead = refs.end;\n                                    _currentObject.children = refs.parent.children;\n                                } else {\n                                    var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n                                    _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n                                    if (findNext <= 0 || findEnd < findNext) {\n                                        endRead = findEnd + 1;\n                                    } else {\n                                        var nextStart = Math.max(DataEnder + 1, find1);\n                                        var _refs = this._hierarchieParse(_currentObject, nextStart);\n                                        endRead = _refs.end;\n                                        _currentObject.children = _refs.parent.children;\n                                    }\n                                }\n                                _currentObject.parent = _parent;\n                                if (_currentObject.type != 'template') {\n                                    _parent.children.push(_currentObject);\n                                }\n                            } else {\n                                endRead = find1 === -1 ? this._data.length : findEnd + 1;\n                                break;\n                            }\n                        }\n                        return {\n                            parent: _parent,\n                            end: endRead\n                        };\n                    }\n                },\n                {\n                    key: '_mainloop',\n                    value: function _mainloop() {\n                        var _this2 = this;\n                        this._mainProc();\n                        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n                            setTimeout(function () {\n                                _this2._mainloop();\n                            }, 1);\n                        } else {\n                            setTimeout(function () {\n                                _this2.onLoad({\n                                    models: _this2.Meshes,\n                                    animations: _this2.animations\n                                });\n                            }, 1);\n                        }\n                    }\n                },\n                {\n                    key: '_mainProc',\n                    value: function _mainProc() {\n                        var breakFlag = false;\n                        while (true) {\n                            if (!this._currentObject.worked) {\n                                switch (this._currentObject.type) {\n                                case 'template':\n                                    break;\n                                case 'AnimTicksPerSecond':\n                                    this.animTicksPerSecond = parseInt(this._currentObject.data);\n                                    break;\n                                case 'Frame':\n                                    this._setFrame();\n                                    break;\n                                case 'FrameTransformMatrix':\n                                    this._setFrameTransformMatrix();\n                                    break;\n                                case 'Mesh':\n                                    this._changeRoot();\n                                    this._currentGeo = {};\n                                    this._currentGeo.name = this._currentObject.name.trim();\n                                    this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                                    this._currentGeo.VertexSetedBoneCount = [];\n                                    this._currentGeo.GeometryData = {\n                                        vertices: [],\n                                        normals: [],\n                                        uvs: [],\n                                        skinIndices: [],\n                                        skinWeights: [],\n                                        indices: [],\n                                        materialIndices: []\n                                    };\n                                    this._currentGeo.Materials = [];\n                                    this._currentGeo.normalVectors = [];\n                                    this._currentGeo.BoneInfs = [];\n                                    this._currentGeo.baseFrame = this._currentFrame;\n                                    this._makeBoneFrom_CurrentFrame();\n                                    this._readVertexDatas();\n                                    breakFlag = true;\n                                    break;\n                                case 'MeshNormals':\n                                    this._readVertexDatas();\n                                    break;\n                                case 'MeshTextureCoords':\n                                    this._setMeshTextureCoords();\n                                    break;\n                                case 'VertexDuplicationIndices':\n                                    break;\n                                case 'MeshMaterialList':\n                                    this._setMeshMaterialList();\n                                    break;\n                                case 'Material':\n                                    this._setMaterial();\n                                    break;\n                                case 'SkinWeights':\n                                    this._setSkinWeights();\n                                    break;\n                                case 'AnimationSet':\n                                    this._changeRoot();\n                                    this._currentAnime = {};\n                                    this._currentAnime.name = this._currentObject.name.trim();\n                                    this._currentAnime.AnimeFrames = [];\n                                    break;\n                                case 'Animation':\n                                    if (this._currentAnimeFrames) {\n                                        this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                    }\n                                    this._currentAnimeFrames = new XAnimationInfo();\n                                    this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                                    break;\n                                case 'AnimationKey':\n                                    this._readAnimationKey();\n                                    breakFlag = true;\n                                    break;\n                                }\n                                this._currentObject.worked = true;\n                            }\n                            if (this._currentObject.children.length > 0) {\n                                this._currentObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + this._currentObject.name);\n                                }\n                                if (breakFlag)\n                                    break;\n                            } else {\n                                if (this._currentObject.worked) {\n                                    if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                                        this._changeRoot();\n                                    }\n                                }\n                                if (this._currentObject.parent) {\n                                    this._currentObject = this._currentObject.parent;\n                                } else {\n                                    breakFlag = true;\n                                }\n                                if (breakFlag)\n                                    break;\n                            }\n                        }\n                        return;\n                    }\n                },\n                {\n                    key: '_changeRoot',\n                    value: function _changeRoot() {\n                        if (this._currentGeo != null && this._currentGeo.name) {\n                            this._makeOutputGeometry();\n                        }\n                        this._currentGeo = {};\n                        if (this._currentAnime != null && this._currentAnime.name) {\n                            if (this._currentAnimeFrames) {\n                                this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                this._currentAnimeFrames = null;\n                            }\n                            this._makeOutputAnimation();\n                        }\n                        this._currentAnime = {};\n                    }\n                },\n                {\n                    key: '_getParentName',\n                    value: function _getParentName(_obj) {\n                        if (_obj.parent) {\n                            if (_obj.parent.name) {\n                                return _obj.parent.name;\n                            } else {\n                                return this._getParentName(_obj.parent);\n                            }\n                        } else {\n                            return '';\n                        }\n                    }\n                },\n                {\n                    key: '_setFrame',\n                    value: function _setFrame() {\n                        this._nowFrameName = this._currentObject.name.trim();\n                        this._currentFrame = {};\n                        this._currentFrame.name = this._nowFrameName;\n                        this._currentFrame.children = [];\n                        if (this._currentObject.parent && this._currentObject.parent.name) {\n                            this._currentFrame.parentName = this._currentObject.parent.name;\n                        }\n                        this.frameHierarchie.push(this._nowFrameName);\n                        this.HieStack[this._nowFrameName] = this._currentFrame;\n                    }\n                },\n                {\n                    key: '_setFrameTransformMatrix',\n                    value: function _setFrameTransformMatrix() {\n                        this._currentFrame.FrameTransformMatrix = new THREE.Matrix4();\n                        var data = this._currentObject.data.split(',');\n                        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n                        this._makeBoneFrom_CurrentFrame();\n                    }\n                },\n                {\n                    key: '_makeBoneFrom_CurrentFrame',\n                    value: function _makeBoneFrom_CurrentFrame() {\n                        if (!this._currentFrame.FrameTransformMatrix) {\n                            return;\n                        }\n                        var b = new THREE.Bone();\n                        b.name = this._currentFrame.name;\n                        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n                        b.matrixWorld = b.matrix;\n                        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n                        this._currentFrame.putBone = b;\n                        if (this._currentFrame.parentName) {\n                            for (var frame in this.HieStack) {\n                                if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                                    this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readVertexDatas',\n                    value: function _readVertexDatas() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        var maxLength = 0;\n                        while (true) {\n                            var changeMode = false;\n                            if (mode_local === 0) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local = 1;\n                                maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n                                if (maxLength <= 0) {\n                                    maxLength = this._currentObject.data.length;\n                                }\n                            } else {\n                                var find = 0;\n                                switch (mode) {\n                                case 0:\n                                    find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    break;\n                                case 1:\n                                    find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                                    break;\n                                }\n                                if (find === 0 || find > maxLength) {\n                                    find = maxLength;\n                                    mode_local = 0;\n                                    changeMode = true;\n                                }\n                                switch (this._currentObject.type) {\n                                case 'Mesh':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    case 1:\n                                        this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                case 'MeshNormals':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                }\n                                endRead = find + 1;\n                                if (changeMode) {\n                                    mode++;\n                                }\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readInt1',\n                    value: function _readInt1(start) {\n                        var find = this._currentObject.data.indexOf(';', start);\n                        return {\n                            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n                            endRead: find + 1\n                        };\n                    }\n                },\n                {\n                    key: '_readVertex1',\n                    value: function _readVertex1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n                        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n                        this._currentGeo.VertexSetedBoneCount.push(0);\n                    }\n                },\n                {\n                    key: '_readFace1',\n                    value: function _readFace1(line) {\n                        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n                        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n                    }\n                },\n                {\n                    key: '_readNormalVector1',\n                    value: function _readNormalVector1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                    }\n                },\n                {\n                    key: '_buildGeometry',\n                    value: function _buildGeometry() {\n                        var bufferGeometry = new THREE.BufferGeometry();\n                        var position = [];\n                        var normals = [];\n                        var uvs = [];\n                        var skinIndices = [];\n                        var skinWeights = [];\n                        var data = this._currentGeo.GeometryData;\n                        for (var i = 0, l = data.indices.length; i < l; i++) {\n                            var stride2 = data.indices[i] * 2;\n                            var stride3 = data.indices[i] * 3;\n                            var stride4 = data.indices[i] * 4;\n                            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n                            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n                            skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n                            skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n                            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n                        }\n                        bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n                        bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                        bufferGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                        bufferGeometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));\n                        bufferGeometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));\n                        this._computeGroups(bufferGeometry, data.materialIndices);\n                        return bufferGeometry;\n                    }\n                },\n                {\n                    key: '_computeGroups',\n                    value: function _computeGroups(bufferGeometry, materialIndices) {\n                        var group;\n                        var groups = [];\n                        var materialIndex = undefined;\n                        for (var i = 0; i < materialIndices.length; i++) {\n                            var currentMaterialIndex = materialIndices[i];\n                            if (currentMaterialIndex !== materialIndex) {\n                                materialIndex = currentMaterialIndex;\n                                if (group !== undefined) {\n                                    group.count = i * 3 - group.start;\n                                    groups.push(group);\n                                }\n                                group = {\n                                    start: i * 3,\n                                    materialIndex: materialIndex\n                                };\n                            }\n                        }\n                        if (group !== undefined) {\n                            group.count = i * 3 - group.start;\n                            groups.push(group);\n                        }\n                        bufferGeometry.groups = groups;\n                    }\n                },\n                {\n                    key: '_setMeshTextureCoords',\n                    value: function _setMeshTextureCoords() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            switch (mode) {\n                            case 0:\n                                if (mode_local === 0) {\n                                    var refO = this._readInt1(0);\n                                    endRead = refO.endRead;\n                                    mode_local = 1;\n                                } else {\n                                    var find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    if (find === 0) {\n                                        find = this._currentObject.data.length;\n                                        mode = 2;\n                                        mode_local = 0;\n                                    }\n                                    var line = this._currentObject.data.substr(endRead, find - endRead);\n                                    var data = this._readLine(line.trim()).split(';');\n                                    if (this.IsUvYReverse) {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                                    } else {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                                    }\n                                    endRead = find + 1;\n                                }\n                                break;\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMeshMaterialList',\n                    value: function _setMeshMaterialList() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            if (mode_local < 2) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local++;\n                            } else {\n                                var find = this._currentObject.data.indexOf(';', endRead);\n                                if (find === -1) {\n                                    find = this._currentObject.data.length;\n                                    mode = 3;\n                                    mode_local = 0;\n                                }\n                                var line = this._currentObject.data.substr(endRead, find - endRead);\n                                var data = this._readLine(line.trim()).split(',');\n                                for (var i = 0; i < data.length; i++) {\n                                    this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n                                }\n                                endRead = this._currentObject.data.length;\n                            }\n                            if (endRead >= this._currentObject.data.length || mode >= 3) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMaterial',\n                    value: function _setMaterial() {\n                        var _nowMat = new THREE.MeshPhongMaterial({ color: Math.random() * 16777215 });\n                        _nowMat.side = THREE.FrontSide;\n                        _nowMat.name = this._currentObject.name;\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';;', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(';');\n                        _nowMat.color.r = parseFloat(data[0]);\n                        _nowMat.color.g = parseFloat(data[1]);\n                        _nowMat.color.b = parseFloat(data[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        _nowMat.shininess = parseFloat(this._readLine(line));\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(';');\n                        _nowMat.specular.r = parseFloat(data2[0]);\n                        _nowMat.specular.g = parseFloat(data2[1]);\n                        _nowMat.specular.b = parseFloat(data2[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        if (find === -1) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(';');\n                        _nowMat.emissive.r = parseFloat(data3[0]);\n                        _nowMat.emissive.g = parseFloat(data3[1]);\n                        _nowMat.emissive.b = parseFloat(data3[2]);\n                        var localObject = null;\n                        while (true) {\n                            if (this._currentObject.children.length > 0) {\n                                localObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + localObject.name);\n                                }\n                                var fileName = localObject.data.substr(1, localObject.data.length - 2);\n                                switch (localObject.type) {\n                                case 'TextureFilename':\n                                    _nowMat.map = this.texloader.load(fileName);\n                                    break;\n                                case 'BumpMapFilename':\n                                    _nowMat.bumpMap = this.texloader.load(fileName);\n                                    _nowMat.bumpScale = 0.05;\n                                    break;\n                                case 'NormalMapFilename':\n                                    _nowMat.normalMap = this.texloader.load(fileName);\n                                    _nowMat.normalScale = new THREE.Vector2(2, 2);\n                                    break;\n                                case 'EmissiveMapFilename':\n                                    _nowMat.emissiveMap = this.texloader.load(fileName);\n                                    break;\n                                case 'LightMapFilename':\n                                    _nowMat.lightMap = this.texloader.load(fileName);\n                                    break;\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        this._currentGeo.Materials.push(_nowMat);\n                    }\n                },\n                {\n                    key: '_setSkinWeights',\n                    value: function _setSkinWeights() {\n                        var boneInf = new XboneInf();\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        boneInf.boneName = line.substr(1, line.length - 2);\n                        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(',');\n                        for (var i = 0; i < data.length; i++) {\n                            boneInf.Indeces.push(parseInt(data[i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(',');\n                        for (var _i = 0; _i < data2.length; _i++) {\n                            boneInf.Weights.push(parseFloat(data2[_i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        if (find <= 0) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(',');\n                        boneInf.OffsetMatrix = new THREE.Matrix4();\n                        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n                        this._currentGeo.BoneInfs.push(boneInf);\n                    }\n                },\n                {\n                    key: '_makePutBoneList',\n                    value: function _makePutBoneList(_RootName, _bones) {\n                        var putting = false;\n                        for (var frame in this.HieStack) {\n                            if (this.HieStack[frame].name === _RootName || putting) {\n                                putting = true;\n                                var b = new THREE.Bone();\n                                b.name = this.HieStack[frame].name;\n                                b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n                                b.matrixWorld = b.matrix;\n                                b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n                                b.pos = new THREE.Vector3().setFromMatrixPosition(FrameTransformMatrix).toArray();\n                                b.rotq = new THREE.Quaternion().setFromRotationMatrix(FrameTransformMatrix).toArray();\n                                b.scl = new THREE.Vector3().setFromMatrixScale(FrameTransformMatrix).toArray();\n                                if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                                    for (var i = 0; i < _bones.length; i++) {\n                                        if (this.HieStack[frame].parentName === _bones[i].name) {\n                                            _bones[i].add(b);\n                                            b.parent = i;\n                                            break;\n                                        }\n                                    }\n                                }\n                                _bones.push(b);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputGeometry',\n                    value: function _makeOutputGeometry() {\n                        var mesh = null;\n                        if (this._currentGeo.BoneInfs.length > 0) {\n                            var putBones = [];\n                            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n                            for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n                                var boneIndex = 0;\n                                for (var bb = 0; bb < putBones.length; bb++) {\n                                    if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                                        boneIndex = bb;\n                                        putBones[bb].OffsetMatrix = new THREE.Matrix4();\n                                        putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                                        break;\n                                    }\n                                }\n                                for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                                    var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n                                    var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n                                    var stride = nowVertexID * 4;\n                                    switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                                    case 0:\n                                        this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                                        break;\n                                    case 1:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                                        break;\n                                    case 2:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                                        break;\n                                    case 3:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                                        break;\n                                    }\n                                    this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n                                    if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                                        console.log('warn! over 4 bone weight! :' + nowVertexID);\n                                    }\n                                }\n                            }\n                            for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n                                this._currentGeo.Materials[sk].skinning = true;\n                            }\n                            var offsetList = [];\n                            for (var _bi = 0; _bi < putBones.length; _bi++) {\n                                if (putBones[_bi].OffsetMatrix) {\n                                    offsetList.push(putBones[_bi].OffsetMatrix);\n                                } else {\n                                    offsetList.push(new THREE.Matrix4());\n                                }\n                            }\n                            var bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                            this._initSkeleton(mesh, putBones, offsetList);\n                        } else {\n                            var _bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                        }\n                        mesh.name = this._currentGeo.name;\n                        var worldBaseMx = new THREE.Matrix4();\n                        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n                        if (currentMxFrame && currentMxFrame.parent) {\n                            while (true) {\n                                currentMxFrame = currentMxFrame.parent;\n                                if (currentMxFrame) {\n                                    worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n                                } else {\n                                    break;\n                                }\n                            }\n                            mesh.applyMatrix4(worldBaseMx);\n                        }\n                        this.Meshes.push(mesh);\n                    }\n                },\n                {\n                    key: '_initSkeleton',\n                    value: function _initSkeleton(mesh, boneList, boneInverses) {\n                        var bones = [], bone, gbone;\n                        var i, il;\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            bone = new THREE.Bone();\n                            bones.push(bone);\n                            bone.name = gbone.name;\n                            bone.position.fromArray(gbone.pos);\n                            bone.quaternion.fromArray(gbone.rotq);\n                            if (gbone.scl !== undefined)\n                                bone.scale.fromArray(gbone.scl);\n                        }\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n                                bones[gbone.parent].add(bones[i]);\n                            } else {\n                                mesh.add(bones[i]);\n                            }\n                        }\n                        mesh.updateMatrixWorld(true);\n                        var skeleton = new THREE.Skeleton(bones, boneInverses);\n                        mesh.bind(skeleton, mesh.matrixWorld);\n                    }\n                },\n                {\n                    key: '_readAnimationKey',\n                    value: function _readAnimationKey() {\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        var nowKeyType = parseInt(this._readLine(line));\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        line = this._currentObject.data.substr(endRead);\n                        var data = this._readLine(line.trim()).split(';;,');\n                        for (var i = 0; i < data.length; i++) {\n                            var data2 = data[i].split(';');\n                            var keyInfo = new XKeyFrameInfo();\n                            keyInfo.type = nowKeyType;\n                            keyInfo.Frame = parseInt(data2[0]);\n                            keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n                            keyInfo.time = keyInfo.Frame;\n                            if (nowKeyType != 4) {\n                                var frameFound = false;\n                                for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                                    if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                                        keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                                        frameFound = true;\n                                        break;\n                                    }\n                                }\n                                var frameValue = data2[2].split(',');\n                                switch (nowKeyType) {\n                                case 0:\n                                    keyInfo.rot = new THREE.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                                    break;\n                                case 1:\n                                    keyInfo.scl = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                case 2:\n                                    keyInfo.pos = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                }\n                                if (!frameFound) {\n                                    this._currentAnimeFrames.keyFrames.push(keyInfo);\n                                }\n                            } else {\n                                keyInfo.matrix = new THREE.Matrix4();\n                                this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n                                this._currentAnimeFrames.keyFrames.push(keyInfo);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputAnimation',\n                    value: function _makeOutputAnimation() {\n                        var animationObj = new XAnimationObj(this.options);\n                        animationObj.fps = this.animTicksPerSecond;\n                        animationObj.name = this._currentAnime.name;\n                        animationObj.make(this._currentAnime.AnimeFrames);\n                        this.animations.push(animationObj);\n                    }\n                },\n                {\n                    key: 'assignAnimation',\n                    value: function assignAnimation(_model, _animation) {\n                        var model = _model;\n                        var animation = _animation;\n                        if (!model) {\n                            model = this.Meshes[0];\n                        }\n                        if (!animation) {\n                            animation = this.animations[0];\n                        }\n                        if (!model || !animation) {\n                            return null;\n                        }\n                        var put = {};\n                        put.fps = animation.fps;\n                        put.name = animation.name;\n                        put.length = animation.length;\n                        put.hierarchy = [];\n                        for (var b = 0; b < model.skeleton.bones.length; b++) {\n                            var findAnimation = false;\n                            for (var i = 0; i < animation.hierarchy.length; i++) {\n                                if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n                                    findAnimation = true;\n                                    var c_key = animation.hierarchy[i].copy();\n                                    c_key.parent = -1;\n                                    if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                                        for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                                            if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                                                c_key.parent = bb;\n                                                c_key.parentName = model.skeleton.bones[b].parent.name;\n                                            }\n                                        }\n                                    }\n                                    put.hierarchy.push(c_key);\n                                    break;\n                                }\n                            }\n                            if (!findAnimation) {\n                                var _c_key = animation.hierarchy[0].copy();\n                                _c_key.name = model.skeleton.bones[b].name;\n                                _c_key.parent = -1;\n                                for (var k = 0; k < _c_key.keys.length; k++) {\n                                    if (_c_key.keys[k].pos) {\n                                        _c_key.keys[k].pos.set(0, 0, 0);\n                                    }\n                                    if (_c_key.keys[k].scl) {\n                                        _c_key.keys[k].scl.set(1, 1, 1);\n                                    }\n                                    if (_c_key.keys[k].rot) {\n                                        _c_key.keys[k].rot.set(0, 0, 0, 1);\n                                    }\n                                }\n                                put.hierarchy.push(_c_key);\n                            }\n                        }\n                        if (!model.geometry.animations) {\n                            model.geometry.animations = [];\n                        }\n                        model.geometry.animations.push(THREE.AnimationClip.parseAnimation(put, model.skeleton.bones));\n                        if (!model.animationMixer) {\n                            model.animationMixer = new THREE.AnimationMixer(model);\n                        }\n                        return put;\n                    }\n                },\n                {\n                    key: '_ParseMatrixData',\n                    value: function _ParseMatrixData(targetMatrix, data) {\n                        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n                    }\n                }\n            ]);\n            return XLoader;\n        }();\n        return XLoader;\n    }();\n\n    return XLoader;\n});\ndefine('skylark-threejs-ex/loaders/DDSLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DDSLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    DDSLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: DDSLoader,\n        parse: function (buffer, loadMipmaps) {\n            var dds = {\n                mipmaps: [],\n                width: 0,\n                height: 0,\n                format: null,\n                mipmapCount: 1\n            };\n            var DDS_MAGIC = 542327876;\n            var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;\n            var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;\n            var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;\n            var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;\n            function fourCCToInt32(value) {\n                return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n            }\n            function int32ToFourCC(value) {\n                return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n            }\n            function loadARGBMip(buffer, dataOffset, width, height) {\n                var dataLength = width * height * 4;\n                var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n                var byteArray = new Uint8Array(dataLength);\n                var dst = 0;\n                var src = 0;\n                for (var y = 0; y < height; y++) {\n                    for (var x = 0; x < width; x++) {\n                        var b = srcBuffer[src];\n                        src++;\n                        var g = srcBuffer[src];\n                        src++;\n                        var r = srcBuffer[src];\n                        src++;\n                        var a = srcBuffer[src];\n                        src++;\n                        byteArray[dst] = r;\n                        dst++;\n                        byteArray[dst] = g;\n                        dst++;\n                        byteArray[dst] = b;\n                        dst++;\n                        byteArray[dst] = a;\n                        dst++;\n                    }\n                }\n                return byteArray;\n            }\n            var FOURCC_DXT1 = fourCCToInt32('DXT1');\n            var FOURCC_DXT3 = fourCCToInt32('DXT3');\n            var FOURCC_DXT5 = fourCCToInt32('DXT5');\n            var FOURCC_ETC1 = fourCCToInt32('ETC1');\n            var headerLengthInt = 31;\n            var off_magic = 0;\n            var off_size = 1;\n            var off_flags = 2;\n            var off_height = 3;\n            var off_width = 4;\n            var off_mipmapCount = 7;\n            var off_pfFlags = 20;\n            var off_pfFourCC = 21;\n            var off_RGBBitCount = 22;\n            var off_RBitMask = 23;\n            var off_GBitMask = 24;\n            var off_BBitMask = 25;\n            var off_ABitMask = 26;\n            var off_caps = 27;\n            var off_caps2 = 28;\n            var off_caps3 = 29;\n            var off_caps4 = 30;\n            var header = new Int32Array(buffer, 0, headerLengthInt);\n            if (header[off_magic] !== DDS_MAGIC) {\n                console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n                return dds;\n            }\n            if (!header[off_pfFlags] & DDPF_FOURCC) {\n                console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n                return dds;\n            }\n            var blockBytes;\n            var fourCC = header[off_pfFourCC];\n            var isRGBAUncompressed = false;\n            switch (fourCC) {\n            case FOURCC_DXT1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_S3TC_DXT1_Format;\n                break;\n            case FOURCC_DXT3:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT3_Format;\n                break;\n            case FOURCC_DXT5:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT5_Format;\n                break;\n            case FOURCC_ETC1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_ETC1_Format;\n                break;\n            default:\n                if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n                    isRGBAUncompressed = true;\n                    blockBytes = 64;\n                    dds.format = THREE.RGBAFormat;\n                } else {\n                    console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n                    return dds;\n                }\n            }\n            dds.mipmapCount = 1;\n            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n            }\n            var caps2 = header[off_caps2];\n            dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n            if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n                console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n                return dds;\n            }\n            dds.width = header[off_width];\n            dds.height = header[off_height];\n            var dataOffset = header[off_size] + 4;\n            var faces = dds.isCubemap ? 6 : 1;\n            for (var face = 0; face < faces; face++) {\n                var width = dds.width;\n                var height = dds.height;\n                for (var i = 0; i < dds.mipmapCount; i++) {\n                    if (isRGBAUncompressed) {\n                        var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n                        var dataLength = byteArray.length;\n                    } else {\n                        var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n                        var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n                    }\n                    var mipmap = {\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    };\n                    dds.mipmaps.push(mipmap);\n                    dataOffset += dataLength;\n                    width = Math.max(width >> 1, 1);\n                    height = Math.max(height >> 1, 1);\n                }\n            }\n            return dds;\n        }\n    });\n    return DDSLoader;\n});\ndefine('skylark-threejs-ex/loaders/PVRLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PVRLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    PVRLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: PVRLoader,\n        parse: function (buffer, loadMipmaps) {\n            var headerLengthInt = 13;\n            var header = new Uint32Array(buffer, 0, headerLengthInt);\n            var pvrDatas = {\n                buffer: buffer,\n                header: header,\n                loadMipmaps: loadMipmaps\n            };\n            if (header[0] === 55727696) {\n                return PVRLoader._parseV3(pvrDatas);\n            } else if (header[11] === 559044176) {\n                return PVRLoader._parseV2(pvrDatas);\n            } else {\n                console.error('THREE.PVRLoader: Unknown PVR format.');\n            }\n        }\n    });\n    PVRLoader._parseV3 = function (pvrDatas) {\n        var header = pvrDatas.header;\n        var bpp, format;\n        var metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];\n        switch (pixelFormat) {\n        case 0:\n            bpp = 2;\n            format = THREE.RGB_PVRTC_2BPPV1_Format;\n            break;\n        case 1:\n            bpp = 2;\n            format = THREE.RGBA_PVRTC_2BPPV1_Format;\n            break;\n        case 2:\n            bpp = 4;\n            format = THREE.RGB_PVRTC_4BPPV1_Format;\n            break;\n        case 3:\n            bpp = 4;\n            format = THREE.RGBA_PVRTC_4BPPV1_Format;\n            break;\n        default:\n            console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n        }\n        pvrDatas.dataPtr = 52 + metaLen;\n        pvrDatas.bpp = bpp;\n        pvrDatas.format = format;\n        pvrDatas.width = width;\n        pvrDatas.height = height;\n        pvrDatas.numSurfaces = numFaces;\n        pvrDatas.numMipmaps = numMipmaps;\n        pvrDatas.isCubemap = numFaces === 6;\n        return PVRLoader._extract(pvrDatas);\n    };\n    PVRLoader._parseV2 = function (pvrDatas) {\n        var header = pvrDatas.header;\n        var headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];\n        var TYPE_MASK = 255;\n        var PVRTC_2 = 24, PVRTC_4 = 25;\n        var formatFlags = flags & TYPE_MASK;\n        var bpp, format;\n        var _hasAlpha = bitmaskAlpha > 0;\n        if (formatFlags === PVRTC_4) {\n            format = _hasAlpha ? THREE.RGBA_PVRTC_4BPPV1_Format : THREE.RGB_PVRTC_4BPPV1_Format;\n            bpp = 4;\n        } else if (formatFlags === PVRTC_2) {\n            format = _hasAlpha ? THREE.RGBA_PVRTC_2BPPV1_Format : THREE.RGB_PVRTC_2BPPV1_Format;\n            bpp = 2;\n        } else {\n            console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n        }\n        pvrDatas.dataPtr = headerLength;\n        pvrDatas.bpp = bpp;\n        pvrDatas.format = format;\n        pvrDatas.width = width;\n        pvrDatas.height = height;\n        pvrDatas.numSurfaces = numSurfs;\n        pvrDatas.numMipmaps = numMipmaps + 1;\n        pvrDatas.isCubemap = numSurfs === 6;\n        return PVRLoader._extract(pvrDatas);\n    };\n    PVRLoader._extract = function (pvrDatas) {\n        var pvr = {\n            mipmaps: [],\n            width: pvrDatas.width,\n            height: pvrDatas.height,\n            format: pvrDatas.format,\n            mipmapCount: pvrDatas.numMipmaps,\n            isCubemap: pvrDatas.isCubemap\n        };\n        var buffer = pvrDatas.buffer;\n        var dataOffset = pvrDatas.dataPtr, bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;\n        if (bpp === 2) {\n            blockWidth = 8;\n            blockHeight = 4;\n        } else {\n            blockWidth = 4;\n            blockHeight = 4;\n        }\n        blockSize = blockWidth * blockHeight * bpp / 8;\n        pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n        var mipLevel = 0;\n        while (mipLevel < pvrDatas.numMipmaps) {\n            var sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;\n            widthBlocks = sWidth / blockWidth;\n            heightBlocks = sHeight / blockHeight;\n            if (widthBlocks < 2)\n                widthBlocks = 2;\n            if (heightBlocks < 2)\n                heightBlocks = 2;\n            dataSize = widthBlocks * heightBlocks * blockSize;\n            for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n                var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n                var mipmap = {\n                    data: byteArray,\n                    width: sWidth,\n                    height: sHeight\n                };\n                pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n                dataOffset += dataSize;\n            }\n            mipLevel++;\n        }\n        return pvr;\n    };\n    return PVRLoader;\n});\ndefine('skylark-threejs-ex/loaders/KTXLoader',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var KTXLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    KTXLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: KTXLoader,\n        parse: function (buffer, loadMipmaps) {\n            var ktx = new KhronosTextureContainer(buffer, 1);\n            return {\n                mipmaps: ktx.mipmaps(loadMipmaps),\n                width: ktx.pixelWidth,\n                height: ktx.pixelHeight,\n                format: ktx.glInternalFormat,\n                isCubemap: ktx.numberOfFaces === 6,\n                mipmapCount: ktx.numberOfMipmapLevels\n            };\n        }\n    });\n    var KhronosTextureContainer = function () {\n        function KhronosTextureContainer(arrayBuffer, facesExpected) {\n            this.arrayBuffer = arrayBuffer;\n            var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n            if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n                console.error('texture missing KTX identifier');\n                return;\n            }\n            var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n            var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n            var endianness = headerDataView.getUint32(0, true);\n            var littleEndian = endianness === 67305985;\n            this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n            this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n            this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n            this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n            this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n            this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n            this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n            this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n            this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n            this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n            this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n            this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n            if (this.glType !== 0) {\n                console.warn('only compressed formats currently supported');\n                return;\n            } else {\n                this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n            }\n            if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n                console.warn('only 2D textures currently supported');\n                return;\n            }\n            if (this.numberOfArrayElements !== 0) {\n                console.warn('texture arrays not currently supported');\n                return;\n            }\n            if (this.numberOfFaces !== facesExpected) {\n                console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n                return;\n            }\n            this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n        }\n        KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n            var mipmaps = [];\n            var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n            var width = this.pixelWidth;\n            var height = this.pixelHeight;\n            var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n            for (var level = 0; level < mipmapCount; level++) {\n                var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n                dataOffset += 4;\n                for (var face = 0; face < this.numberOfFaces; face++) {\n                    var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n                    mipmaps.push({\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    });\n                    dataOffset += imageSize;\n                    dataOffset += 3 - (imageSize + 3) % 4;\n                }\n                width = Math.max(1, width * 0.5);\n                height = Math.max(1, height * 0.5);\n            }\n            return mipmaps;\n        };\n        KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4;\n        KhronosTextureContainer.COMPRESSED_2D = 0;\n        KhronosTextureContainer.COMPRESSED_3D = 1;\n        KhronosTextureContainer.TEX_2D = 2;\n        KhronosTextureContainer.TEX_3D = 3;\n        return KhronosTextureContainer;\n    }();\n    return KTXLoader;\n});\ndefine('skylark-threejs-ex/modifiers/SimplifyModifier',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SimplifyModifier = function () {\n    };\n    (function () {\n        var cb = new THREE.Vector3(), ab = new THREE.Vector3();\n        function pushIfUnique(array, object) {\n            if (array.indexOf(object) === -1)\n                array.push(object);\n        }\n        function removeFromArray(array, object) {\n            var k = array.indexOf(object);\n            if (k > -1)\n                array.splice(k, 1);\n        }\n        function computeEdgeCollapseCost(u, v) {\n            var edgelength = v.position.distanceTo(u.position);\n            var curvature = 0;\n            var sideFaces = [];\n            var i, il = u.faces.length, face, sideFace;\n            for (i = 0; i < il; i++) {\n                face = u.faces[i];\n                if (face.hasVertex(v)) {\n                    sideFaces.push(face);\n                }\n            }\n            for (i = 0; i < il; i++) {\n                var minCurvature = 1;\n                face = u.faces[i];\n                for (var j = 0; j < sideFaces.length; j++) {\n                    sideFace = sideFaces[j];\n                    var dotProd = face.normal.dot(sideFace.normal);\n                    minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n                }\n                curvature = Math.max(curvature, minCurvature);\n            }\n            var borders = 0;\n            if (sideFaces.length < 2) {\n                curvature = 1;\n            }\n            var amt = edgelength * curvature + borders;\n            return amt;\n        }\n        function computeEdgeCostAtVertex(v) {\n            if (v.neighbors.length === 0) {\n                v.collapseNeighbor = null;\n                v.collapseCost = -0.01;\n                return;\n            }\n            v.collapseCost = 100000;\n            v.collapseNeighbor = null;\n            for (var i = 0; i < v.neighbors.length; i++) {\n                var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n                if (!v.collapseNeighbor) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.collapseCost = collapseCost;\n                    v.minCost = collapseCost;\n                    v.totalCost = 0;\n                    v.costCount = 0;\n                }\n                v.costCount++;\n                v.totalCost += collapseCost;\n                if (collapseCost < v.minCost) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.minCost = collapseCost;\n                }\n            }\n            v.collapseCost = v.totalCost / v.costCount;\n        }\n        function removeVertex(v, vertices) {\n            console.assert(v.faces.length === 0);\n            while (v.neighbors.length) {\n                var n = v.neighbors.pop();\n                removeFromArray(n.neighbors, v);\n            }\n            removeFromArray(vertices, v);\n        }\n        function removeFace(f, faces) {\n            removeFromArray(faces, f);\n            if (f.v1)\n                removeFromArray(f.v1.faces, f);\n            if (f.v2)\n                removeFromArray(f.v2.faces, f);\n            if (f.v3)\n                removeFromArray(f.v3.faces, f);\n            var vs = [\n                f.v1,\n                f.v2,\n                f.v3\n            ];\n            var v1, v2;\n            for (var i = 0; i < 3; i++) {\n                v1 = vs[i];\n                v2 = vs[(i + 1) % 3];\n                if (!v1 || !v2)\n                    continue;\n                v1.removeIfNonNeighbor(v2);\n                v2.removeIfNonNeighbor(v1);\n            }\n        }\n        function collapse(vertices, faces, u, v) {\n            if (!v) {\n                removeVertex(u, vertices);\n                return;\n            }\n            var i;\n            var tmpVertices = [];\n            for (i = 0; i < u.neighbors.length; i++) {\n                tmpVertices.push(u.neighbors[i]);\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                if (u.faces[i].hasVertex(v)) {\n                    removeFace(u.faces[i], faces);\n                }\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                u.faces[i].replaceVertex(u, v);\n            }\n            removeVertex(u, vertices);\n            for (i = 0; i < tmpVertices.length; i++) {\n                computeEdgeCostAtVertex(tmpVertices[i]);\n            }\n        }\n        function minimumCostEdge(vertices) {\n            var least = vertices[0];\n            for (var i = 0; i < vertices.length; i++) {\n                if (vertices[i].collapseCost < least.collapseCost) {\n                    least = vertices[i];\n                }\n            }\n            return least;\n        }\n        function Triangle(v1, v2, v3, a, b, c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n            this.v1 = v1;\n            this.v2 = v2;\n            this.v3 = v3;\n            this.normal = new THREE.Vector3();\n            this.computeNormal();\n            v1.faces.push(this);\n            v1.addUniqueNeighbor(v2);\n            v1.addUniqueNeighbor(v3);\n            v2.faces.push(this);\n            v2.addUniqueNeighbor(v1);\n            v2.addUniqueNeighbor(v3);\n            v3.faces.push(this);\n            v3.addUniqueNeighbor(v1);\n            v3.addUniqueNeighbor(v2);\n        }\n        Triangle.prototype.computeNormal = function () {\n            var vA = this.v1.position;\n            var vB = this.v2.position;\n            var vC = this.v3.position;\n            cb.subVectors(vC, vB);\n            ab.subVectors(vA, vB);\n            cb.cross(ab).normalize();\n            this.normal.copy(cb);\n        };\n        Triangle.prototype.hasVertex = function (v) {\n            return v === this.v1 || v === this.v2 || v === this.v3;\n        };\n        Triangle.prototype.replaceVertex = function (oldv, newv) {\n            if (oldv === this.v1)\n                this.v1 = newv;\n            else if (oldv === this.v2)\n                this.v2 = newv;\n            else if (oldv === this.v3)\n                this.v3 = newv;\n            removeFromArray(oldv.faces, this);\n            newv.faces.push(this);\n            oldv.removeIfNonNeighbor(this.v1);\n            this.v1.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v2);\n            this.v2.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v3);\n            this.v3.removeIfNonNeighbor(oldv);\n            this.v1.addUniqueNeighbor(this.v2);\n            this.v1.addUniqueNeighbor(this.v3);\n            this.v2.addUniqueNeighbor(this.v1);\n            this.v2.addUniqueNeighbor(this.v3);\n            this.v3.addUniqueNeighbor(this.v1);\n            this.v3.addUniqueNeighbor(this.v2);\n            this.computeNormal();\n        };\n        function Vertex(v, id) {\n            this.position = v;\n            this.id = id;\n            this.faces = [];\n            this.neighbors = [];\n            this.collapseCost = 0;\n            this.collapseNeighbor = null;\n        }\n        Vertex.prototype.addUniqueNeighbor = function (vertex) {\n            pushIfUnique(this.neighbors, vertex);\n        };\n        Vertex.prototype.removeIfNonNeighbor = function (n) {\n            var neighbors = this.neighbors;\n            var faces = this.faces;\n            var offset = neighbors.indexOf(n);\n            if (offset === -1)\n                return;\n            for (var i = 0; i < faces.length; i++) {\n                if (faces[i].hasVertex(n))\n                    return;\n            }\n            neighbors.splice(offset, 1);\n        };\n        SimplifyModifier.prototype.modify = function (geometry, count) {\n            if (geometry.isBufferGeometry) {\n                geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n            }\n            geometry.mergeVertices();\n            var oldVertices = geometry.vertices;\n            var oldFaces = geometry.faces;\n            var vertices = [];\n            var faces = [];\n            var i, il;\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                var vertex = new Vertex(oldVertices[i], i);\n                vertices.push(vertex);\n            }\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                var face = oldFaces[i];\n                var a = face.a;\n                var b = face.b;\n                var c = face.c;\n                var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n                faces.push(triangle);\n            }\n            for (i = 0, il = vertices.length; i < il; i++) {\n                computeEdgeCostAtVertex(vertices[i]);\n            }\n            var nextVertex;\n            var z = count;\n            while (z--) {\n                nextVertex = minimumCostEdge(vertices);\n                if (!nextVertex) {\n                    console.log('THREE.SimplifyModifier: No next vertex');\n                    break;\n                }\n                collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n            }\n            var simplifiedGeometry = new THREE.BufferGeometry();\n            var position = [];\n            var index = [];\n            for (i = 0; i < vertices.length; i++) {\n                var vertex = vertices[i].position;\n                position.push(vertex.x, vertex.y, vertex.z);\n            }\n            for (i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                var a = vertices.indexOf(face.v1);\n                var b = vertices.indexOf(face.v2);\n                var c = vertices.indexOf(face.v3);\n                index.push(a, b, c);\n            }\n            simplifiedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            simplifiedGeometry.setIndex(index);\n            return simplifiedGeometry;\n        };\n    }());\n    return SimplifyModifier;\n});\ndefine('skylark-threejs-ex/modifiers/SubdivisionModifier',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SubdivisionModifier = function (subdivisions) {\n        this.subdivisions = subdivisions === undefined ? 1 : subdivisions;\n    };\n    SubdivisionModifier.prototype.modify = function (geometry) {\n        if (geometry.isBufferGeometry) {\n            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n        } else {\n            geometry = geometry.clone();\n        }\n        geometry.mergeVertices();\n        var repeats = this.subdivisions;\n        while (repeats-- > 0) {\n            this.smooth(geometry);\n        }\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n        return geometry;\n    };\n    (function () {\n        var ABC = [\n            'a',\n            'b',\n            'c'\n        ];\n        function getEdge(a, b, map) {\n            var vertexIndexA = Math.min(a, b);\n            var vertexIndexB = Math.max(a, b);\n            var key = vertexIndexA + '_' + vertexIndexB;\n            return map[key];\n        }\n        function processEdge(a, b, vertices, map, face, metaVertices) {\n            var vertexIndexA = Math.min(a, b);\n            var vertexIndexB = Math.max(a, b);\n            var key = vertexIndexA + '_' + vertexIndexB;\n            var edge;\n            if (key in map) {\n                edge = map[key];\n            } else {\n                var vertexA = vertices[vertexIndexA];\n                var vertexB = vertices[vertexIndexB];\n                edge = {\n                    a: vertexA,\n                    b: vertexB,\n                    newEdge: null,\n                    faces: []\n                };\n                map[key] = edge;\n            }\n            edge.faces.push(face);\n            metaVertices[a].edges.push(edge);\n            metaVertices[b].edges.push(edge);\n        }\n        function generateLookups(vertices, faces, metaVertices, edges) {\n            var i, il, face;\n            for (i = 0, il = vertices.length; i < il; i++) {\n                metaVertices[i] = { edges: [] };\n            }\n            for (i = 0, il = faces.length; i < il; i++) {\n                face = faces[i];\n                processEdge(face.a, face.b, vertices, edges, face, metaVertices);\n                processEdge(face.b, face.c, vertices, edges, face, metaVertices);\n                processEdge(face.c, face.a, vertices, edges, face, metaVertices);\n            }\n        }\n        function newFace(newFaces, a, b, c, materialIndex) {\n            newFaces.push(new THREE.Face3(a, b, c, undefined, undefined, materialIndex));\n        }\n        function midpoint(a, b) {\n            return Math.abs(b - a) / 2 + Math.min(a, b);\n        }\n        function newUv(newUvs, a, b, c) {\n            newUvs.push([\n                THREE.clone(),\n                b.clone(),\n                c.clone()\n            ]);\n        }\n        SubdivisionModifier.prototype.smooth = function (geometry) {\n            var tmp = new THREE.Vector3();\n            var oldVertices, oldFaces, oldUvs;\n            var newVertices, newFaces, newUVs = [];\n            var n, i, il, j, k;\n            var metaVertices, sourceEdges;\n            var sourceEdges, newEdgeVertices, newSourceVertices;\n            oldVertices = geometry.vertices;\n            oldFaces = geometry.faces;\n            oldUvs = geometry.faceVertexUvs;\n            var hasUvs = oldUvs[0] !== undefined && oldUvs[0].length > 0;\n            if (hasUvs) {\n                for (var j = 0; j < oldUvs.length; j++) {\n                    newUVs.push([]);\n                }\n            }\n            metaVertices = new Array(oldVertices.length);\n            sourceEdges = {};\n            generateLookups(oldVertices, oldFaces, metaVertices, sourceEdges);\n            newEdgeVertices = [];\n            var other, currentEdge, newEdge, face;\n            var edgeVertexWeight, adjacentVertexWeight, connectedFaces;\n            for (i in sourceEdges) {\n                currentEdge = sourceEdges[i];\n                newEdge = new THREE.Vector3();\n                edgeVertexWeight = 3 / 8;\n                adjacentVertexWeight = 1 / 8;\n                connectedFaces = currentEdge.faces.length;\n                if (connectedFaces != 2) {\n                    edgeVertexWeight = 0.5;\n                    adjacentVertexWeight = 0;\n                    if (connectedFaces != 1) {\n                    }\n                }\n                newEdge.addVectors(currentEdge.a, currentEdge.b).multiplyScalar(edgeVertexWeight);\n                tmp.set(0, 0, 0);\n                for (j = 0; j < connectedFaces; j++) {\n                    face = currentEdge.faces[j];\n                    for (k = 0; k < 3; k++) {\n                        other = oldVertices[face[ABC[k]]];\n                        if (other !== currentEdge.a && other !== currentEdge.b)\n                            break;\n                    }\n                    tmp.add(other);\n                }\n                tmp.multiplyScalar(adjacentVertexWeight);\n                newEdge.add(tmp);\n                currentEdge.newEdge = newEdgeVertices.length;\n                newEdgeVertices.push(newEdge);\n            }\n            var beta, sourceVertexWeight, connectingVertexWeight;\n            var connectingEdge, connectingEdges, oldVertex, newSourceVertex;\n            newSourceVertices = [];\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                oldVertex = oldVertices[i];\n                connectingEdges = metaVertices[i].edges;\n                n = connectingEdges.length;\n                if (n == 3) {\n                    beta = 3 / 16;\n                } else if (n > 3) {\n                    beta = 3 / (8 * n);\n                }\n                sourceVertexWeight = 1 - n * beta;\n                connectingVertexWeight = beta;\n                if (n <= 2) {\n                    if (n == 2) {\n                        sourceVertexWeight = 3 / 4;\n                        connectingVertexWeight = 1 / 8;\n                    } else if (n == 1) {\n                    } else if (n == 0) {\n                    }\n                }\n                newSourceVertex = oldVertex.clone().multiplyScalar(sourceVertexWeight);\n                tmp.set(0, 0, 0);\n                for (j = 0; j < n; j++) {\n                    connectingEdge = connectingEdges[j];\n                    other = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;\n                    tmp.add(other);\n                }\n                tmp.multiplyScalar(connectingVertexWeight);\n                newSourceVertex.add(tmp);\n                newSourceVertices.push(newSourceVertex);\n            }\n            newVertices = newSourceVertices.concat(newEdgeVertices);\n            var sl = newSourceVertices.length, edge1, edge2, edge3;\n            newFaces = [];\n            var uv, x0, x1, x2;\n            var x3 = new THREE.Vector2();\n            var x4 = new THREE.Vector2();\n            var x5 = new THREE.Vector2();\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                face = oldFaces[i];\n                edge1 = getEdge(face.a, face.b, sourceEdges).newEdge + sl;\n                edge2 = getEdge(face.b, face.c, sourceEdges).newEdge + sl;\n                edge3 = getEdge(face.c, face.a, sourceEdges).newEdge + sl;\n                newFace(newFaces, edge1, edge2, edge3, face.materialIndex);\n                newFace(newFaces, face.a, edge1, edge3, face.materialIndex);\n                newFace(newFaces, face.b, edge2, edge1, face.materialIndex);\n                newFace(newFaces, face.c, edge3, edge2, face.materialIndex);\n                if (hasUvs) {\n                    for (var j = 0; j < oldUvs.length; j++) {\n                        uv = oldUvs[j][i];\n                        x0 = uv[0];\n                        x1 = uv[1];\n                        x2 = uv[2];\n                        x3.set(midpoint(x0.x, x1.x), midpoint(x0.y, x1.y));\n                        x4.set(midpoint(x1.x, x2.x), midpoint(x1.y, x2.y));\n                        x5.set(midpoint(x0.x, x2.x), midpoint(x0.y, x2.y));\n                        newUv(newUVs[j], x3, x4, x5);\n                        newUv(newUVs[j], x0, x3, x5);\n                        newUv(newUVs[j], x1, x4, x3);\n                        newUv(newUVs[j], x2, x5, x4);\n                    }\n                }\n            }\n            geometry.vertices = newVertices;\n            geometry.faces = newFaces;\n            if (hasUvs)\n                geometry.faceVertexUvs = newUVs;\n        };\n    }());\n    return SubdivisionModifier;\n});\ndefine('skylark-threejs-ex/exporters/ColladaExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var ColladaExporter = function () {\n    };\n    ColladaExporter.prototype = {\n        constructor: ColladaExporter,\n        parse: function (object, onDone, options) {\n            options = options || {};\n            options = Object.assign({\n                version: '1.4.1',\n                author: null,\n                textureDirectory: ''\n            }, options);\n            if (options.textureDirectory !== '') {\n                options.textureDirectory = `${ options.textureDirectory }/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n            }\n            var version = options.version;\n            if (version !== '1.4.1' && version !== '1.5.0') {\n                console.warn(`ColladaExporter : Version ${ version } not supported for export. Only 1.4.1 and 1.5.0.`);\n                return null;\n            }\n            function format(urdf) {\n                var IS_END_TAG = /^<\\//;\n                var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n                var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n                var pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n                var tagnum = 0;\n                return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(tag => {\n                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n                        tagnum--;\n                    }\n                    var res = `${ pad('  ', tagnum) }${ tag }`;\n                    if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n                        tagnum++;\n                    }\n                    return res;\n                }).join('\\n');\n            }\n            function base64ToBuffer(str) {\n                var b = atob(str);\n                var buf = new Uint8Array(b.length);\n                for (var i = 0, l = buf.length; i < l; i++) {\n                    buf[i] = b.charCodeAt(i);\n                }\n                return buf;\n            }\n            var canvas, ctx;\n            function imageToData(image, ext) {\n                canvas = canvas || document.createElement('canvas');\n                ctx = ctx || canvas.getContext('2d');\n                canvas.width = image.naturalWidth;\n                canvas.height = image.naturalHeight;\n                ctx.drawImage(image, 0, 0);\n                var base64data = canvas.toDataURL(`image/${ ext }`, 1).replace(/^data:image\\/(png|jpg);base64,/, '');\n                return base64ToBuffer(base64data);\n            }\n            var getFuncs = [\n                'getX',\n                'getY',\n                'getZ',\n                'getW'\n            ];\n            function attrBufferToArray(attr) {\n                if (attr.isInterleavedBufferAttribute) {\n                    var arr = new attr.array.constructor(attr.count * attr.itemSize);\n                    var size = attr.itemSize;\n                    for (var i = 0, l = attr.count; i < l; i++) {\n                        for (var j = 0; j < size; j++) {\n                            arr[i * size + j] = attr[getFuncs[j]](i);\n                        }\n                    }\n                    return arr;\n                } else {\n                    return attr.array;\n                }\n            }\n            function subArray(arr, st, ct) {\n                if (Array.isArray(arr))\n                    return arr.slice(st, st + ct);\n                else\n                    return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n            }\n            function getAttribute(attr, name, params, type) {\n                var array = attrBufferToArray(attr);\n                var res = `<source id=\"${ name }\">` + `<float_array id=\"${ name }-array\" count=\"${ array.length }\">` + array.join(' ') + '</float_array>' + '<technique_common>' + `<accessor source=\"#${ name }-array\" count=\"${ Math.floor(array.length / attr.itemSize) }\" stride=\"${ attr.itemSize }\">` + params.map(n => `<param name=\"${ n }\" type=\"${ type }\" />`).join('') + '</accessor>' + '</technique_common>' + '</source>';\n                return res;\n            }\n            var transMat;\n            function getTransform(o) {\n                o.updateMatrix();\n                transMat = transMat || new THREE.Matrix4();\n                transMat.copy(o.matrix);\n                transMat.transpose();\n                return `<matrix>${ transMat.toArray().join(' ') }</matrix>`;\n            }\n            function processGeometry(g) {\n                var info = geometryInfo.get(g);\n                if (!info) {\n                    var bufferGeometry = g;\n                    if (bufferGeometry instanceof THREE.Geometry) {\n                        bufferGeometry = new THREE.BufferGeometry().fromGeometry(bufferGeometry);\n                    }\n                    var meshid = `Mesh${ libraryGeometries.length + 1 }`;\n                    var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n                    var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n                            start: 0,\n                            count: indexCount,\n                            materialIndex: 0\n                        }];\n                    var gname = g.name ? ` name=\"${ g.name }\"` : '';\n                    var gnode = `<geometry id=\"${ meshid }\"${ gname }><mesh>`;\n                    var posName = `${ meshid }-position`;\n                    var vertName = `${ meshid }-vertices`;\n                    gnode += getAttribute(bufferGeometry.attributes.position, posName, [\n                        'X',\n                        'Y',\n                        'Z'\n                    ], 'float');\n                    gnode += `<vertices id=\"${ vertName }\"><input semantic=\"POSITION\" source=\"#${ posName }\" /></vertices>`;\n                    var triangleInputs = `<input semantic=\"VERTEX\" source=\"#${ vertName }\" offset=\"0\" />`;\n                    if ('normal' in bufferGeometry.attributes) {\n                        var normName = `${ meshid }-normal`;\n                        gnode += getAttribute(bufferGeometry.attributes.normal, normName, [\n                            'X',\n                            'Y',\n                            'Z'\n                        ], 'float');\n                        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${ normName }\" offset=\"0\" />`;\n                    }\n                    if ('uv' in bufferGeometry.attributes) {\n                        var uvName = `${ meshid }-texcoord`;\n                        gnode += getAttribute(bufferGeometry.attributes.uv, uvName, [\n                            'S',\n                            'T'\n                        ], 'float');\n                        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${ uvName }\" offset=\"0\" set=\"0\" />`;\n                    }\n                    if ('color' in bufferGeometry.attributes) {\n                        var colName = `${ meshid }-color`;\n                        gnode += getAttribute(bufferGeometry.attributes.color, colName, [\n                            'X',\n                            'Y',\n                            'Z'\n                        ], 'uint8');\n                        triangleInputs += `<input semantic=\"COLOR\" source=\"#${ colName }\" offset=\"0\" />`;\n                    }\n                    var indexArray = null;\n                    if (bufferGeometry.index) {\n                        indexArray = attrBufferToArray(bufferGeometry.index);\n                    } else {\n                        indexArray = new Array(indexCount);\n                        for (var i = 0, l = indexArray.length; i < l; i++)\n                            indexArray[i] = i;\n                    }\n                    for (var i = 0, l = groups.length; i < l; i++) {\n                        var group = groups[i];\n                        var subarr = subArray(indexArray, group.start, group.count);\n                        var polycount = subarr.length / 3;\n                        gnode += `<triangles material=\"MESH_MATERIAL_${ group.materialIndex }\" count=\"${ polycount }\">`;\n                        gnode += triangleInputs;\n                        gnode += `<p>${ subarr.join(' ') }</p>`;\n                        gnode += '</triangles>';\n                    }\n                    gnode += `</mesh></geometry>`;\n                    libraryGeometries.push(gnode);\n                    info = {\n                        meshid: meshid,\n                        bufferGeometry: bufferGeometry\n                    };\n                    geometryInfo.set(g, info);\n                }\n                return info;\n            }\n            function processTexture(tex) {\n                var texid = imageMap.get(tex);\n                if (texid == null) {\n                    texid = `image-${ libraryImages.length + 1 }`;\n                    var ext = 'png';\n                    var name = tex.name || texid;\n                    var imageNode = `<image id=\"${ texid }\" name=\"${ name }\">`;\n                    if (version === '1.5.0') {\n                        imageNode += `<init_from><ref>${ options.textureDirectory }${ name }.${ ext }</ref></init_from>`;\n                    } else {\n                        imageNode += `<init_from>${ options.textureDirectory }${ name }.${ ext }</init_from>`;\n                    }\n                    imageNode += '</image>';\n                    libraryImages.push(imageNode);\n                    imageMap.set(tex, texid);\n                    textures.push({\n                        directory: options.textureDirectory,\n                        name,\n                        ext,\n                        data: imageToData(tex.image, ext),\n                        original: tex\n                    });\n                }\n                return texid;\n            }\n            function processMaterial(m) {\n                var matid = materialMap.get(m);\n                if (matid == null) {\n                    matid = `Mat${ libraryEffects.length + 1 }`;\n                    var type = 'phong';\n                    if (m instanceof THREE.MeshLambertMaterial) {\n                        type = 'lambert';\n                    } else if (m instanceof THREE.MeshBasicMaterial) {\n                        type = 'constant';\n                        if (m.map !== null) {\n                            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n                        }\n                    }\n                    var emissive = m.emissive ? m.emissive : new THREE.Color(0, 0, 0);\n                    var diffuse = m.color ? m.color : new THREE.Color(0, 0, 0);\n                    var specular = m.specular ? m.specular : new THREE.Color(1, 1, 1);\n                    var shininess = m.shininess || 0;\n                    var reflectivity = m.reflectivity || 0;\n                    var transparencyNode = '';\n                    if (m.transparent === true) {\n                        transparencyNode += `<transparent>` + (m.map ? `<texture texture=\"diffuse-sampler\"></texture>` : '<float>1</float>') + '</transparent>';\n                        if (m.opacity < 1) {\n                            transparencyNode += `<transparency><float>${ m.opacity }</float></transparency>`;\n                        }\n                    }\n                    var techniqueNode = `<technique sid=\"common\"><${ type }>` + '<emission>' + (m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${ emissive.r } ${ emissive.g } ${ emissive.b } 1</color>`) + '</emission>' + (type !== 'constant' ? '<diffuse>' + (m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color>`) + '</diffuse>' : '') + (type !== 'constant' ? '<bump>' + (m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : '') + '</bump>' : '') + (type === 'phong' ? `<specular><color sid=\"specular\">${ specular.r } ${ specular.g } ${ specular.b } 1</color></specular>` + '<shininess>' + (m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${ shininess }</float>`) + '</shininess>' : '') + `<reflective><color>${ diffuse.r } ${ diffuse.g } ${ diffuse.b } 1</color></reflective>` + `<reflectivity><float>${ reflectivity }</float></reflectivity>` + transparencyNode + `</${ type }></technique>`;\n                    var effectnode = `<effect id=\"${ matid }-effect\">` + '<profile_COMMON>' + (m.map ? '<newparam sid=\"diffuse-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.map) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>' : '') + (m.specularMap ? '<newparam sid=\"specular-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.specularMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>' : '') + (m.emissiveMap ? '<newparam sid=\"emissive-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.emissiveMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>' : '') + (m.normalMap ? '<newparam sid=\"bump-surface\"><surface type=\"2D\">' + `<init_from>${ processTexture(m.normalMap) }</init_from>` + '</surface></newparam>' + '<newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>' : '') + techniqueNode + (m.side === THREE.DoubleSide ? `<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>` : '') + '</profile_COMMON>' + '</effect>';\n                    var materialName = m.name ? ` name=\"${ m.name }\"` : '';\n                    var materialNode = `<material id=\"${ matid }\"${ materialName }><instance_effect url=\"#${ matid }-effect\" /></material>`;\n                    libraryMaterials.push(materialNode);\n                    libraryEffects.push(effectnode);\n                    materialMap.set(m, matid);\n                }\n                return matid;\n            }\n            function processObject(o) {\n                var node = `<node name=\"${ o.name }\">`;\n                node += getTransform(o);\n                if (o instanceof THREE.Mesh && o.geometry != null) {\n                    var geomInfo = processGeometry(o.geometry);\n                    var meshid = geomInfo.meshid;\n                    var geometry = geomInfo.bufferGeometry;\n                    var matids = null;\n                    var matidsArray = [];\n                    var mat = o.material || new THREE.MeshBasicMaterial();\n                    var materials = Array.isArray(mat) ? mat : [mat];\n                    if (geometry.groups.length > materials.length) {\n                        matidsArray = new Array(geometry.groups.length);\n                    } else {\n                        matidsArray = new Array(materials.length);\n                    }\n                    matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));\n                    node += `<instance_geometry url=\"#${ meshid }\">` + (matids != null ? '<bind_material><technique_common>' + matids.map((id, i) => `<instance_material symbol=\"MESH_MATERIAL_${ i }\" target=\"#${ id }\" >` + '<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" />' + '</instance_material>').join('') + '</technique_common></bind_material>' : '') + '</instance_geometry>';\n                }\n                o.children.forEach(c => node += processObject(c));\n                node += '</node>';\n                return node;\n            }\n            var geometryInfo = new WeakMap();\n            var materialMap = new WeakMap();\n            var imageMap = new WeakMap();\n            var textures = [];\n            var libraryImages = [];\n            var libraryGeometries = [];\n            var libraryEffects = [];\n            var libraryMaterials = [];\n            var libraryVisualScenes = processObject(object);\n            var specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n            var dae = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>' + `<COLLADA xmlns=\"${ specLink }\" version=\"${ version }\">` + '<asset>' + ('<contributor>' + '<authoring_tool>three.js Collada Exporter</authoring_tool>' + (options.author !== null ? `<author>${ options.author }</author>` : '') + '</contributor>' + `<created>${ new Date().toISOString() }</created>` + `<modified>${ new Date().toISOString() }</modified>` + '<up_axis>Y_UP</up_axis>') + '</asset>';\n            dae += `<library_images>${ libraryImages.join('') }</library_images>`;\n            dae += `<library_effects>${ libraryEffects.join('') }</library_effects>`;\n            dae += `<library_materials>${ libraryMaterials.join('') }</library_materials>`;\n            dae += `<library_geometries>${ libraryGeometries.join('') }</library_geometries>`;\n            dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${ libraryVisualScenes }</visual_scene></library_visual_scenes>`;\n            dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n            dae += '</COLLADA>';\n            var res = {\n                data: format(dae),\n                textures\n            };\n            if (typeof onDone === 'function') {\n                requestAnimationFrame(() => onDone(res));\n            }\n            return res;\n        }\n    };\n    return ColladaExporter;\n});\ndefine('skylark-threejs-ex/exporters/DRACOExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DRACOExporter = function () {\n    };\n    DRACOExporter.prototype = {\n        constructor: DRACOExporter,\n        parse: function (geometry, options) {\n            if (DracoEncoderModule === undefined) {\n                throw new Error('THREE.DRACOExporter: required the draco_decoder to work.');\n            }\n            if (options === undefined) {\n                options = {\n                    decodeSpeed: 5,\n                    encodeSpeed: 5,\n                    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n                    quantization: [\n                        16,\n                        8,\n                        8,\n                        8,\n                        8\n                    ],\n                    exportUvs: true,\n                    exportNormals: true,\n                    exportColor: false\n                };\n            }\n            var dracoEncoder = DracoEncoderModule();\n            var encoder = new dracoEncoder.Encoder();\n            var builder = new dracoEncoder.MeshBuilder();\n            var mesh = new dracoEncoder.Mesh();\n            if (geometry.isGeometry === true) {\n                var bufferGeometry = new THREE.BufferGeometry();\n                bufferGeometry.fromGeometry(geometry);\n                geometry = bufferGeometry;\n            }\n            if (geometry.isBufferGeometry !== true) {\n                throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or BufferGeometry instance.');\n            }\n            var vertices = geometry.getAttribute('position');\n            builder.AddFloatAttributeToMesh(mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n            var faces = geometry.getIndex();\n            if (faces !== null) {\n                builder.AddFacesToMesh(mesh, faces.count, faces.array);\n            } else {\n                var faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n                for (var i = 0; i < faces.length; i++) {\n                    faces[i] = i;\n                }\n                builder.AddFacesToMesh(mesh, vertices.count, faces);\n            }\n            if (options.exportNormals === true) {\n                var normals = geometry.getAttribute('normal');\n                if (normals !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n                }\n            }\n            if (options.exportUvs === true) {\n                var uvs = geometry.getAttribute('uv');\n                if (uvs !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n                }\n            }\n            if (options.exportColor === true) {\n                var colors = geometry.getAttribute('color');\n                if (colors !== undefined) {\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n                }\n            }\n            var encodedData = new dracoEncoder.DracoInt8Array();\n            encoder.SetSpeedOptions(options.encodeSpeed || 5, options.decodeSpeed || 5);\n            if (options.encoderMethod !== undefined) {\n                encoder.SetEncodingMethod(options.encoderMethod);\n            }\n            if (options.quantization !== undefined) {\n                for (var i = 0; i < 5; i++) {\n                    if (options.quantization[i] !== undefined) {\n                        encoder.SetAttributeQuantization(i, options.quantization[i]);\n                    }\n                }\n            }\n            var length = encoder.EncodeMeshToDracoBuffer(mesh, encodedData);\n            dracoEncoder.destroy(mesh);\n            if (length === 0) {\n                throw new Error('THREE.DRACOExporter: Draco encoding failed.');\n            }\n            var outputData = new Int8Array(new ArrayBuffer(length));\n            for (var i = 0; i < length; i++) {\n                outputData[i] = encodedData.GetValue(i);\n            }\n            dracoEncoder.destroy(encodedData);\n            dracoEncoder.destroy(encoder);\n            dracoEncoder.destroy(builder);\n            return outputData;\n        }\n    };\n    DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;\n    DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;\n    DRACOExporter.POINT_CLOUD = 0;\n    DRACOExporter.TRIANGULAR_MESH = 1;\n    DRACOExporter.INVALID = -1;\n    DRACOExporter.POSITION = 0;\n    DRACOExporter.NORMAL = 1;\n    DRACOExporter.COLOR = 2;\n    DRACOExporter.TEX_COORD = 3;\n    DRACOExporter.GENERIC = 4;\n\n    return DRACOExporter;\n});\ndefine('skylark-threejs-ex/exporters/GLTFExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var WEBGL_CONSTANTS = {\n        POINTS: 0,\n        LINES: 1,\n        LINE_LOOP: 2,\n        LINE_STRIP: 3,\n        TRIANGLES: 4,\n        TRIANGLE_STRIP: 5,\n        TRIANGLE_FAN: 6,\n        UNSIGNED_BYTE: 5121,\n        UNSIGNED_SHORT: 5123,\n        FLOAT: 5126,\n        UNSIGNED_INT: 5125,\n        ARRAY_BUFFER: 34962,\n        ELEMENT_ARRAY_BUFFER: 34963,\n        NEAREST: 9728,\n        LINEAR: 9729,\n        NEAREST_MIPMAP_NEAREST: 9984,\n        LINEAR_MIPMAP_NEAREST: 9985,\n        NEAREST_MIPMAP_LINEAR: 9986,\n        LINEAR_MIPMAP_LINEAR: 9987,\n        CLAMP_TO_EDGE: 33071,\n        MIRRORED_REPEAT: 33648,\n        REPEAT: 10497\n    };\n    var THREE_TO_WEBGL = {};\n    THREE_TO_WEBGL[THREE.NearestFilter] = WEBGL_CONSTANTS.NEAREST;\n    THREE_TO_WEBGL[THREE.NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\n    THREE_TO_WEBGL[THREE.NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\n    THREE_TO_WEBGL[THREE.LinearFilter] = WEBGL_CONSTANTS.LINEAR;\n    THREE_TO_WEBGL[THREE.LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\n    THREE_TO_WEBGL[THREE.LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n    THREE_TO_WEBGL[THREE.ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\n    THREE_TO_WEBGL[THREE.RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\n    THREE_TO_WEBGL[THREE.MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n    var PATH_PROPERTIES = {\n        scale: 'scale',\n        position: 'translation',\n        quaternion: 'rotation',\n        morphTargetInfluences: 'weights'\n    };\n    var GLTFExporter = function () {\n    };\n    GLTFExporter.prototype = {\n        constructor: GLTFExporter,\n        parse: function (input, onDone, options) {\n            var DEFAULT_OPTIONS = {\n                binary: false,\n                trs: false,\n                onlyVisible: true,\n                truncateDrawRange: true,\n                embedImages: true,\n                maxTextureSize: Infinity,\n                animations: [],\n                forceIndices: false,\n                forcePowerOfTwoTextures: false,\n                includeCustomExtensions: false\n            };\n            options = Object.assign({}, DEFAULT_OPTIONS, options);\n            if (options.animations.length > 0) {\n                options.trs = true;\n            }\n            var outputJSON = {\n                asset: {\n                    version: '2.0',\n                    generator: 'GLTFExporter'\n                }\n            };\n            var byteOffset = 0;\n            var buffers = [];\n            var pending = [];\n            var nodeMap = new Map();\n            var skins = [];\n            var extensionsUsed = {};\n            var cachedData = {\n                meshes: new Map(),\n                attributes: new Map(),\n                attributesNormalized: new Map(),\n                materials: new Map(),\n                textures: new Map(),\n                images: new Map()\n            };\n            var cachedCanvas;\n            var uids = new Map();\n            var uid = 0;\n            function getUID(object) {\n                if (!uids.has(object))\n                    uids.set(object, uid++);\n                return uids.get(object);\n            }\n            function equalArray(array1, array2) {\n                return array1.length === array2.length && array1.every(function (element, index) {\n                    return element === array2[index];\n                });\n            }\n            function stringToArrayBuffer(text) {\n                if (window.TextEncoder !== undefined) {\n                    return new TextEncoder().encode(text).buffer;\n                }\n                var array = new Uint8Array(new ArrayBuffer(text.length));\n                for (var i = 0, il = text.length; i < il; i++) {\n                    var value = text.charCodeAt(i);\n                    array[i] = value > 255 ? 32 : value;\n                }\n                return array.buffer;\n            }\n            function getMinMax(attribute, start, count) {\n                var output = {\n                    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n                    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n                };\n                for (var i = start; i < start + count; i++) {\n                    for (var a = 0; a < attribute.itemSize; a++) {\n                        var value = attribute.array[i * attribute.itemSize + a];\n                        output.min[a] = Math.min(output.min[a], value);\n                        output.max[a] = Math.max(output.max[a], value);\n                    }\n                }\n                return output;\n            }\n            function isPowerOfTwo(image) {\n                return THREE.MathUtils.isPowerOfTwo(image.width) && THREE.MathUtils.isPowerOfTwo(image.height);\n            }\n            function isNormalizedNormalAttribute(normal) {\n                if (cachedData.attributesNormalized.has(normal)) {\n                    return false;\n                }\n                var v = new THREE.Vector3();\n                for (var i = 0, il = normal.count; i < il; i++) {\n                    if (Math.abs(v.fromArray(normal.array, i * 3).length() - 1) > 0.0005)\n                        return false;\n                }\n                return true;\n            }\n            function createNormalizedNormalAttribute(normal) {\n                if (cachedData.attributesNormalized.has(normal)) {\n                    return cachedData.attributesNormalized.get(normal);\n                }\n                var attribute = normal.clone();\n                var v = new THREE.Vector3();\n                for (var i = 0, il = attribute.count; i < il; i++) {\n                    v.fromArray(attribute.array, i * 3);\n                    if (v.x === 0 && v.y === 0 && v.z === 0) {\n                        v.setX(1);\n                    } else {\n                        v.normalize();\n                    }\n                    v.toArray(attribute.array, i * 3);\n                }\n                cachedData.attributesNormalized.set(normal, attribute);\n                return attribute;\n            }\n            function getPaddedBufferSize(bufferSize) {\n                return Math.ceil(bufferSize / 4) * 4;\n            }\n            function getPaddedArrayBuffer(arrayBuffer, paddingByte) {\n                paddingByte = paddingByte || 0;\n                var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n                if (paddedLength !== arrayBuffer.byteLength) {\n                    var array = new Uint8Array(paddedLength);\n                    array.set(new Uint8Array(arrayBuffer));\n                    if (paddingByte !== 0) {\n                        for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {\n                            array[i] = paddingByte;\n                        }\n                    }\n                    return array.buffer;\n                }\n                return arrayBuffer;\n            }\n            function serializeUserData(object, gltfProperty) {\n                if (Object.keys(object.userData).length === 0) {\n                    return;\n                }\n                try {\n                    var json = JSON.parse(JSON.stringify(object.userData));\n                    if (options.includeCustomExtensions && json.gltfExtensions) {\n                        if (gltfProperty.extensions === undefined) {\n                            gltfProperty.extensions = {};\n                        }\n                        for (var extensionName in json.gltfExtensions) {\n                            gltfProperty.extensions[extensionName] = json.gltfExtensions[extensionName];\n                            extensionsUsed[extensionName] = true;\n                        }\n                        delete json.gltfExtensions;\n                    }\n                    if (Object.keys(json).length > 0) {\n                        gltfProperty.extras = json;\n                    }\n                } catch (error) {\n                    console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' \" + \"won't be serialized because of JSON.stringify error - \" + error.message);\n                }\n            }\n            function applyTextureTransform(mapDef, texture) {\n                var didTransform = false;\n                var transformDef = {};\n                if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n                    transformDef.offset = texture.offset.toArray();\n                    didTransform = true;\n                }\n                if (texture.rotation !== 0) {\n                    transformDef.rotation = texture.rotation;\n                    didTransform = true;\n                }\n                if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n                    transformDef.scale = texture.repeat.toArray();\n                    didTransform = true;\n                }\n                if (didTransform) {\n                    mapDef.extensions = mapDef.extensions || {};\n                    mapDef.extensions['KHR_texture_transform'] = transformDef;\n                    extensionsUsed['KHR_texture_transform'] = true;\n                }\n            }\n            function processBuffer(buffer) {\n                if (!outputJSON.buffers) {\n                    outputJSON.buffers = [{ byteLength: 0 }];\n                }\n                buffers.push(buffer);\n                return 0;\n            }\n            function processBufferView(attribute, componentType, start, count, target) {\n                if (!outputJSON.bufferViews) {\n                    outputJSON.bufferViews = [];\n                }\n                var componentSize;\n                if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n                    componentSize = 1;\n                } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n                    componentSize = 2;\n                } else {\n                    componentSize = 4;\n                }\n                var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n                var dataView = new DataView(new ArrayBuffer(byteLength));\n                var offset = 0;\n                for (var i = start; i < start + count; i++) {\n                    for (var a = 0; a < attribute.itemSize; a++) {\n                        var value = attribute.array[i * attribute.itemSize + a];\n                        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n                            dataView.setFloat32(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n                            dataView.setUint32(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n                            dataView.setUint16(offset, value, true);\n                        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n                            dataView.setUint8(offset, value);\n                        }\n                        offset += componentSize;\n                    }\n                }\n                var gltfBufferView = {\n                    buffer: processBuffer(dataView.buffer),\n                    byteOffset: byteOffset,\n                    byteLength: byteLength\n                };\n                if (target !== undefined)\n                    gltfBufferView.target = target;\n                if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n                    gltfBufferView.byteStride = attribute.itemSize * componentSize;\n                }\n                byteOffset += byteLength;\n                outputJSON.bufferViews.push(gltfBufferView);\n                var output = {\n                    id: outputJSON.bufferViews.length - 1,\n                    byteLength: 0\n                };\n                return output;\n            }\n            function processBufferViewImage(blob) {\n                if (!outputJSON.bufferViews) {\n                    outputJSON.bufferViews = [];\n                }\n                return new Promise(function (resolve) {\n                    var reader = new window.FileReader();\n                    reader.readAsArrayBuffer(blob);\n                    reader.onloadend = function () {\n                        var buffer = getPaddedArrayBuffer(reader.result);\n                        var bufferView = {\n                            buffer: processBuffer(buffer),\n                            byteOffset: byteOffset,\n                            byteLength: buffer.byteLength\n                        };\n                        byteOffset += buffer.byteLength;\n                        outputJSON.bufferViews.push(bufferView);\n                        resolve(outputJSON.bufferViews.length - 1);\n                    };\n                });\n            }\n            function processAccessor(attribute, geometry, start, count) {\n                var types = {\n                    1: 'SCALAR',\n                    2: 'VEC2',\n                    3: 'VEC3',\n                    4: 'VEC4',\n                    16: 'MAT4'\n                };\n                var componentType;\n                if (attribute.array.constructor === Float32Array) {\n                    componentType = WEBGL_CONSTANTS.FLOAT;\n                } else if (attribute.array.constructor === Uint32Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n                } else if (attribute.array.constructor === Uint16Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n                } else if (attribute.array.constructor === Uint8Array) {\n                    componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n                } else {\n                    throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n                }\n                if (start === undefined)\n                    start = 0;\n                if (count === undefined)\n                    count = attribute.count;\n                if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n                    var end = start + count;\n                    var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n                    start = Math.max(start, geometry.drawRange.start);\n                    count = Math.min(end, end2) - start;\n                    if (count < 0)\n                        count = 0;\n                }\n                if (count === 0) {\n                    return null;\n                }\n                var minMax = getMinMax(attribute, start, count);\n                var bufferViewTarget;\n                if (geometry !== undefined) {\n                    bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n                }\n                var bufferView = processBufferView(attribute, componentType, start, count, bufferViewTarget);\n                var gltfAccessor = {\n                    bufferView: bufferView.id,\n                    byteOffset: bufferView.byteOffset,\n                    componentType: componentType,\n                    count: count,\n                    max: minMax.max,\n                    min: minMax.min,\n                    type: types[attribute.itemSize]\n                };\n                if (!outputJSON.accessors) {\n                    outputJSON.accessors = [];\n                }\n                outputJSON.accessors.push(gltfAccessor);\n                return outputJSON.accessors.length - 1;\n            }\n            function processImage(image, format, flipY) {\n                if (!cachedData.images.has(image)) {\n                    cachedData.images.set(image, {});\n                }\n                var cachedImages = cachedData.images.get(image);\n                var mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';\n                var key = mimeType + ':flipY/' + flipY.toString();\n                if (cachedImages[key] !== undefined) {\n                    return cachedImages[key];\n                }\n                if (!outputJSON.images) {\n                    outputJSON.images = [];\n                }\n                var gltfImage = { mimeType: mimeType };\n                if (options.embedImages) {\n                    var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');\n                    canvas.width = Math.min(image.width, options.maxTextureSize);\n                    canvas.height = Math.min(image.height, options.maxTextureSize);\n                    if (options.forcePowerOfTwoTextures && !isPowerOfTwo(canvas)) {\n                        console.warn('GLTFExporter: Resized non-power-of-two image.', image);\n                        canvas.width = THREE.MathUtils.floorPowerOfTwo(canvas.width);\n                        canvas.height = THREE.MathUtils.floorPowerOfTwo(canvas.height);\n                    }\n                    var ctx = canvas.getContext('2d');\n                    if (flipY === true) {\n                        ctx.translate(0, canvas.height);\n                        ctx.scale(1, -1);\n                    }\n                    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n                    if (options.binary === true) {\n                        pending.push(new Promise(function (resolve) {\n                            canvas.toBlob(function (blob) {\n                                processBufferViewImage(blob).then(function (bufferViewIndex) {\n                                    gltfImage.bufferView = bufferViewIndex;\n                                    resolve();\n                                });\n                            }, mimeType);\n                        }));\n                    } else {\n                        gltfImage.uri = canvas.toDataURL(mimeType);\n                    }\n                } else {\n                    gltfImage.uri = image.src;\n                }\n                outputJSON.images.push(gltfImage);\n                var index = outputJSON.images.length - 1;\n                cachedImages[key] = index;\n                return index;\n            }\n            function processSampler(map) {\n                if (!outputJSON.samplers) {\n                    outputJSON.samplers = [];\n                }\n                var gltfSampler = {\n                    magFilter: THREE_TO_WEBGL[map.magFilter],\n                    minFilter: THREE_TO_WEBGL[map.minFilter],\n                    wrapS: THREE_TO_WEBGL[map.wrapS],\n                    wrapT: THREE_TO_WEBGL[map.wrapT]\n                };\n                outputJSON.samplers.push(gltfSampler);\n                return outputJSON.samplers.length - 1;\n            }\n            function processTexture(map) {\n                if (cachedData.textures.has(map)) {\n                    return cachedData.textures.get(map);\n                }\n                if (!outputJSON.textures) {\n                    outputJSON.textures = [];\n                }\n                var gltfTexture = {\n                    sampler: processSampler(map),\n                    source: processImage(map.image, map.format, map.flipY)\n                };\n                if (map.name) {\n                    gltfTexture.name = map.name;\n                }\n                outputJSON.textures.push(gltfTexture);\n                var index = outputJSON.textures.length - 1;\n                cachedData.textures.set(map, index);\n                return index;\n            }\n            function processMaterial(material) {\n                if (cachedData.materials.has(material)) {\n                    return cachedData.materials.get(material);\n                }\n                if (material.isShaderMaterial) {\n                    console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n                    return null;\n                }\n                if (!outputJSON.materials) {\n                    outputJSON.materials = [];\n                }\n                var gltfMaterial = { pbrMetallicRoughness: {} };\n                if (material.isMeshBasicMaterial) {\n                    gltfMaterial.extensions = { KHR_materials_unlit: {} };\n                    extensionsUsed['KHR_materials_unlit'] = true;\n                } else if (material.isGLTFSpecularGlossinessMaterial) {\n                    gltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\n                    extensionsUsed['KHR_materials_pbrSpecularGlossiness'] = true;\n                } else if (!material.isMeshStandardMaterial) {\n                    console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n                }\n                var color = material.color.toArray().concat([material.opacity]);\n                if (!equalArray(color, [\n                        1,\n                        1,\n                        1,\n                        1\n                    ])) {\n                    gltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n                }\n                if (material.isMeshStandardMaterial) {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n                } else if (material.isMeshBasicMaterial) {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n                } else {\n                    gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n                    gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n                }\n                if (material.isGLTFSpecularGlossinessMaterial) {\n                    if (gltfMaterial.pbrMetallicRoughness.baseColorFactor) {\n                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n                    }\n                    var specularFactor = [\n                        1,\n                        1,\n                        1\n                    ];\n                    material.specular.toArray(specularFactor, 0);\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n                }\n                if (material.metalnessMap || material.roughnessMap) {\n                    if (material.metalnessMap === material.roughnessMap) {\n                        var metalRoughMapDef = { index: processTexture(material.metalnessMap) };\n                        applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n                        gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n                    } else {\n                        console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n                    }\n                }\n                if (material.map) {\n                    var baseColorMapDef = { index: processTexture(material.map) };\n                    applyTextureTransform(baseColorMapDef, material.map);\n                    if (material.isGLTFSpecularGlossinessMaterial) {\n                        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n                    }\n                    gltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n                }\n                if (material.isGLTFSpecularGlossinessMaterial && material.specularMap) {\n                    var specularMapDef = { index: processTexture(material.specularMap) };\n                    applyTextureTransform(specularMapDef, material.specularMap);\n                    gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n                }\n                if (material.emissive) {\n                    var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();\n                    if (!equalArray(emissive, [\n                            0,\n                            0,\n                            0\n                        ])) {\n                        gltfMaterial.emissiveFactor = emissive;\n                    }\n                    if (material.emissiveMap) {\n                        var emissiveMapDef = { index: processTexture(material.emissiveMap) };\n                        applyTextureTransform(emissiveMapDef, material.emissiveMap);\n                        gltfMaterial.emissiveTexture = emissiveMapDef;\n                    }\n                }\n                if (material.normalMap) {\n                    var normalMapDef = { index: processTexture(material.normalMap) };\n                    if (material.normalScale && material.normalScale.x !== -1) {\n                        if (material.normalScale.x !== material.normalScale.y) {\n                            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');\n                        }\n                        normalMapDef.scale = material.normalScale.x;\n                    }\n                    applyTextureTransform(normalMapDef, material.normalMap);\n                    gltfMaterial.normalTexture = normalMapDef;\n                }\n                if (material.aoMap) {\n                    var occlusionMapDef = {\n                        index: processTexture(material.aoMap),\n                        texCoord: 1\n                    };\n                    if (material.aoMapIntensity !== 1) {\n                        occlusionMapDef.strength = material.aoMapIntensity;\n                    }\n                    applyTextureTransform(occlusionMapDef, material.aoMap);\n                    gltfMaterial.occlusionTexture = occlusionMapDef;\n                }\n                if (material.transparent) {\n                    gltfMaterial.alphaMode = 'BLEND';\n                } else {\n                    if (material.alphaTest > 0) {\n                        gltfMaterial.alphaMode = 'MASK';\n                        gltfMaterial.alphaCutoff = material.alphaTest;\n                    }\n                }\n                if (material.side === THREE.DoubleSide) {\n                    gltfMaterial.doubleSided = true;\n                }\n                if (material.name !== '') {\n                    gltfMaterial.name = material.name;\n                }\n                serializeUserData(material, gltfMaterial);\n                outputJSON.materials.push(gltfMaterial);\n                var index = outputJSON.materials.length - 1;\n                cachedData.materials.set(material, index);\n                return index;\n            }\n            function processMesh(mesh) {\n                var meshCacheKeyParts = [mesh.geometry.uuid];\n                if (Array.isArray(mesh.material)) {\n                    for (var i = 0, l = mesh.material.length; i < l; i++) {\n                        meshCacheKeyParts.push(mesh.material[i].uuid);\n                    }\n                } else {\n                    meshCacheKeyParts.push(mesh.material.uuid);\n                }\n                var meshCacheKey = meshCacheKeyParts.join(':');\n                if (cachedData.meshes.has(meshCacheKey)) {\n                    return cachedData.meshes.get(meshCacheKey);\n                }\n                var geometry = mesh.geometry;\n                var mode;\n                if (mesh.isLineSegments) {\n                    mode = WEBGL_CONSTANTS.LINES;\n                } else if (mesh.isLineLoop) {\n                    mode = WEBGL_CONSTANTS.LINE_LOOP;\n                } else if (mesh.isLine) {\n                    mode = WEBGL_CONSTANTS.LINE_STRIP;\n                } else if (mesh.isPoints) {\n                    mode = WEBGL_CONSTANTS.POINTS;\n                } else {\n                    mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n                }\n                if (!geometry.isBufferGeometry) {\n                    console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use BufferGeometry instead.');\n                    geometry = new THREE.BufferGeometry().setFromObject(mesh);\n                }\n                var gltfMesh = {};\n                var attributes = {};\n                var primitives = [];\n                var targets = [];\n                var nameConversion = {\n                    uv: 'TEXCOORD_0',\n                    uv2: 'TEXCOORD_1',\n                    color: 'COLOR_0',\n                    skinWeight: 'WEIGHTS_0',\n                    skinIndex: 'JOINTS_0'\n                };\n                var originalNormal = geometry.getAttribute('normal');\n                if (originalNormal !== undefined && !isNormalizedNormalAttribute(originalNormal)) {\n                    console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n                    geometry.setAttribute('normal', createNormalizedNormalAttribute(originalNormal));\n                }\n                var modifiedAttribute = null;\n                for (var attributeName in geometry.attributes) {\n                    if (attributeName.substr(0, 5) === 'morph')\n                        continue;\n                    var attribute = geometry.attributes[attributeName];\n                    attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n                    var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n                    if (!validVertexAttributes.test(attributeName)) {\n                        attributeName = '_' + attributeName;\n                    }\n                    if (cachedData.attributes.has(getUID(attribute))) {\n                        attributes[attributeName] = cachedData.attributes.get(getUID(attribute));\n                        continue;\n                    }\n                    modifiedAttribute = null;\n                    var array = attribute.array;\n                    if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n                        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n                        modifiedAttribute = new THREE.BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n                    }\n                    var accessor = processAccessor(modifiedAttribute || attribute, geometry);\n                    if (accessor !== null) {\n                        attributes[attributeName] = accessor;\n                        cachedData.attributes.set(getUID(attribute), accessor);\n                    }\n                }\n                if (originalNormal !== undefined)\n                    geometry.setAttribute('normal', originalNormal);\n                if (Object.keys(attributes).length === 0) {\n                    return null;\n                }\n                if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n                    var weights = [];\n                    var targetNames = [];\n                    var reverseDictionary = {};\n                    if (mesh.morphTargetDictionary !== undefined) {\n                        for (var key in mesh.morphTargetDictionary) {\n                            reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n                        }\n                    }\n                    for (var i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n                        var target = {};\n                        var warned = false;\n                        for (var attributeName in geometry.morphAttributes) {\n                            if (attributeName !== 'position' && attributeName !== 'normal') {\n                                if (!warned) {\n                                    console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n                                    warned = true;\n                                }\n                                continue;\n                            }\n                            var attribute = geometry.morphAttributes[attributeName][i];\n                            var gltfAttributeName = attributeName.toUpperCase();\n                            var baseAttribute = geometry.attributes[attributeName];\n                            if (cachedData.attributes.has(getUID(attribute))) {\n                                target[gltfAttributeName] = cachedData.attributes.get(getUID(attribute));\n                                continue;\n                            }\n                            var relativeAttribute = attribute.clone();\n                            if (!geometry.morphTargetsRelative) {\n                                for (var j = 0, jl = attribute.count; j < jl; j++) {\n                                    relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n                                }\n                            }\n                            target[gltfAttributeName] = processAccessor(relativeAttribute, geometry);\n                            cachedData.attributes.set(getUID(baseAttribute), target[gltfAttributeName]);\n                        }\n                        targets.push(target);\n                        weights.push(mesh.morphTargetInfluences[i]);\n                        if (mesh.morphTargetDictionary !== undefined)\n                            targetNames.push(reverseDictionary[i]);\n                    }\n                    gltfMesh.weights = weights;\n                    if (targetNames.length > 0) {\n                        gltfMesh.extras = {};\n                        gltfMesh.extras.targetNames = targetNames;\n                    }\n                }\n                var forceIndices = options.forceIndices;\n                var isMultiMaterial = Array.isArray(mesh.material);\n                if (isMultiMaterial && geometry.groups.length === 0)\n                    return null;\n                if (!forceIndices && geometry.index === null && isMultiMaterial) {\n                    console.warn('THREE.GLTFExporter: Creating index for non-indexed multi-material mesh.');\n                    forceIndices = true;\n                }\n                var didForceIndices = false;\n                if (geometry.index === null && forceIndices) {\n                    var indices = [];\n                    for (var i = 0, il = geometry.attributes.position.count; i < il; i++) {\n                        indices[i] = i;\n                    }\n                    geometry.setIndex(indices);\n                    didForceIndices = true;\n                }\n                var materials = isMultiMaterial ? mesh.material : [mesh.material];\n                var groups = isMultiMaterial ? geometry.groups : [{\n                        materialIndex: 0,\n                        start: undefined,\n                        count: undefined\n                    }];\n                for (var i = 0, il = groups.length; i < il; i++) {\n                    var primitive = {\n                        mode: mode,\n                        attributes: attributes\n                    };\n                    serializeUserData(geometry, primitive);\n                    if (targets.length > 0)\n                        primitive.targets = targets;\n                    if (geometry.index !== null) {\n                        var cacheKey = getUID(geometry.index);\n                        if (groups[i].start !== undefined || groups[i].count !== undefined) {\n                            cacheKey += ':' + groups[i].start + ':' + groups[i].count;\n                        }\n                        if (cachedData.attributes.has(cacheKey)) {\n                            primitive.indices = cachedData.attributes.get(cacheKey);\n                        } else {\n                            primitive.indices = processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n                            cachedData.attributes.set(cacheKey, primitive.indices);\n                        }\n                        if (primitive.indices === null)\n                            delete primitive.indices;\n                    }\n                    var material = processMaterial(materials[groups[i].materialIndex]);\n                    if (material !== null) {\n                        primitive.material = material;\n                    }\n                    primitives.push(primitive);\n                }\n                if (didForceIndices) {\n                    geometry.setIndex(null);\n                }\n                gltfMesh.primitives = primitives;\n                if (!outputJSON.meshes) {\n                    outputJSON.meshes = [];\n                }\n                outputJSON.meshes.push(gltfMesh);\n                var index = outputJSON.meshes.length - 1;\n                cachedData.meshes.set(meshCacheKey, index);\n                return index;\n            }\n            function processCamera(camera) {\n                if (!outputJSON.cameras) {\n                    outputJSON.cameras = [];\n                }\n                var isOrtho = camera.isOrthographicCamera;\n                var gltfCamera = { type: isOrtho ? 'orthographic' : 'perspective' };\n                if (isOrtho) {\n                    gltfCamera.orthographic = {\n                        xmag: camera.right * 2,\n                        ymag: camera.top * 2,\n                        zfar: camera.far <= 0 ? 0.001 : camera.far,\n                        znear: camera.near < 0 ? 0 : camera.near\n                    };\n                } else {\n                    gltfCamera.perspective = {\n                        aspectRatio: camera.aspect,\n                        yfov: THREE.MathUtils.degToRad(camera.fov),\n                        zfar: camera.far <= 0 ? 0.001 : camera.far,\n                        znear: camera.near < 0 ? 0 : camera.near\n                    };\n                }\n                if (camera.name !== '') {\n                    gltfCamera.name = camera.type;\n                }\n                outputJSON.cameras.push(gltfCamera);\n                return outputJSON.cameras.length - 1;\n            }\n            function processAnimation(clip, root) {\n                if (!outputJSON.animations) {\n                    outputJSON.animations = [];\n                }\n                clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n                var tracks = clip.tracks;\n                var channels = [];\n                var samplers = [];\n                for (var i = 0; i < tracks.length; ++i) {\n                    var track = tracks[i];\n                    var trackBinding = THREE.PropertyBinding.parseTrackName(track.name);\n                    var trackNode = THREE.PropertyBinding.findNode(root, trackBinding.nodeName);\n                    var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n                    if (trackBinding.objectName === 'bones') {\n                        if (trackNode.isSkinnedMesh === true) {\n                            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n                        } else {\n                            trackNode = undefined;\n                        }\n                    }\n                    if (!trackNode || !trackProperty) {\n                        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n                        return null;\n                    }\n                    var inputItemSize = 1;\n                    var outputItemSize = track.values.length / track.times.length;\n                    if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n                        outputItemSize /= trackNode.morphTargetInfluences.length;\n                    }\n                    var interpolation;\n                    if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n                        interpolation = 'CUBICSPLINE';\n                        outputItemSize /= 3;\n                    } else if (track.getInterpolation() === THREE.InterpolateDiscrete) {\n                        interpolation = 'STEP';\n                    } else {\n                        interpolation = 'LINEAR';\n                    }\n                    samplers.push({\n                        input: processAccessor(new THREE.BufferAttribute(track.times, inputItemSize)),\n                        output: processAccessor(new THREE.BufferAttribute(track.values, outputItemSize)),\n                        interpolation: interpolation\n                    });\n                    channels.push({\n                        sampler: samplers.length - 1,\n                        target: {\n                            node: nodeMap.get(trackNode),\n                            path: trackProperty\n                        }\n                    });\n                }\n                outputJSON.animations.push({\n                    name: clip.name || 'clip_' + outputJSON.animations.length,\n                    samplers: samplers,\n                    channels: channels\n                });\n                return outputJSON.animations.length - 1;\n            }\n            function processSkin(object) {\n                var node = outputJSON.nodes[nodeMap.get(object)];\n                var skeleton = object.skeleton;\n                if (skeleton === undefined)\n                    return null;\n                var rootJoint = object.skeleton.bones[0];\n                if (rootJoint === undefined)\n                    return null;\n                var joints = [];\n                var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n                for (var i = 0; i < skeleton.bones.length; ++i) {\n                    joints.push(nodeMap.get(skeleton.bones[i]));\n                    skeleton.boneInverses[i].toArray(inverseBindMatrices, i * 16);\n                }\n                if (outputJSON.skins === undefined) {\n                    outputJSON.skins = [];\n                }\n                outputJSON.skins.push({\n                    inverseBindMatrices: processAccessor(new THREE.BufferAttribute(inverseBindMatrices, 16)),\n                    joints: joints,\n                    skeleton: nodeMap.get(rootJoint)\n                });\n                var skinIndex = node.skin = outputJSON.skins.length - 1;\n                return skinIndex;\n            }\n            function processLight(light) {\n                var lightDef = {};\n                if (light.name)\n                    lightDef.name = light.name;\n                lightDef.color = light.color.toArray();\n                lightDef.intensity = light.intensity;\n                if (light.isDirectionalLight) {\n                    lightDef.type = 'directional';\n                } else if (light.isPointLight) {\n                    lightDef.type = 'point';\n                    if (light.distance > 0)\n                        lightDef.range = light.distance;\n                } else if (light.isSpotLight) {\n                    lightDef.type = 'spot';\n                    if (light.distance > 0)\n                        lightDef.range = light.distance;\n                    lightDef.spot = {};\n                    lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n                    lightDef.spot.outerConeAngle = light.angle;\n                }\n                if (light.decay !== undefined && light.decay !== 2) {\n                    console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n                }\n                if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n                    console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n                }\n                var lights = outputJSON.extensions['KHR_lights_punctual'].lights;\n                lights.push(lightDef);\n                return lights.length - 1;\n            }\n            function processNode(object) {\n                if (!outputJSON.nodes) {\n                    outputJSON.nodes = [];\n                }\n                var gltfNode = {};\n                if (options.trs) {\n                    var rotation = object.quaternion.toArray();\n                    var position = object.position.toArray();\n                    var scale = object.scale.toArray();\n                    if (!equalArray(rotation, [\n                            0,\n                            0,\n                            0,\n                            1\n                        ])) {\n                        gltfNode.rotation = rotation;\n                    }\n                    if (!equalArray(position, [\n                            0,\n                            0,\n                            0\n                        ])) {\n                        gltfNode.translation = position;\n                    }\n                    if (!equalArray(scale, [\n                            1,\n                            1,\n                            1\n                        ])) {\n                        gltfNode.scale = scale;\n                    }\n                } else {\n                    if (object.matrixAutoUpdate) {\n                        object.updateMatrix();\n                    }\n                    if (!equalArray(object.matrix.elements, [\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1\n                        ])) {\n                        gltfNode.matrix = object.matrix.elements;\n                    }\n                }\n                if (object.name !== '') {\n                    gltfNode.name = String(object.name);\n                }\n                serializeUserData(object, gltfNode);\n                if (object.isMesh || object.isLine || object.isPoints) {\n                    var mesh = processMesh(object);\n                    if (mesh !== null) {\n                        gltfNode.mesh = mesh;\n                    }\n                } else if (object.isCamera) {\n                    gltfNode.camera = processCamera(object);\n                } else if (object.isDirectionalLight || object.isPointLight || object.isSpotLight) {\n                    if (!extensionsUsed['KHR_lights_punctual']) {\n                        outputJSON.extensions = outputJSON.extensions || {};\n                        outputJSON.extensions['KHR_lights_punctual'] = { lights: [] };\n                        extensionsUsed['KHR_lights_punctual'] = true;\n                    }\n                    gltfNode.extensions = gltfNode.extensions || {};\n                    gltfNode.extensions['KHR_lights_punctual'] = { light: processLight(object) };\n                } else if (object.isLight) {\n                    console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object);\n                    return null;\n                }\n                if (object.isSkinnedMesh) {\n                    skins.push(object);\n                }\n                if (object.children.length > 0) {\n                    var children = [];\n                    for (var i = 0, l = object.children.length; i < l; i++) {\n                        var child = object.children[i];\n                        if (child.visible || options.onlyVisible === false) {\n                            var node = processNode(child);\n                            if (node !== null) {\n                                children.push(node);\n                            }\n                        }\n                    }\n                    if (children.length > 0) {\n                        gltfNode.children = children;\n                    }\n                }\n                outputJSON.nodes.push(gltfNode);\n                var nodeIndex = outputJSON.nodes.length - 1;\n                nodeMap.set(object, nodeIndex);\n                return nodeIndex;\n            }\n            function processScene(scene) {\n                if (!outputJSON.scenes) {\n                    outputJSON.scenes = [];\n                    outputJSON.scene = 0;\n                }\n                var gltfScene = {};\n                if (scene.name !== '') {\n                    gltfScene.name = scene.name;\n                }\n                outputJSON.scenes.push(gltfScene);\n                var nodes = [];\n                for (var i = 0, l = scene.children.length; i < l; i++) {\n                    var child = scene.children[i];\n                    if (child.visible || options.onlyVisible === false) {\n                        var node = processNode(child);\n                        if (node !== null) {\n                            nodes.push(node);\n                        }\n                    }\n                }\n                if (nodes.length > 0) {\n                    gltfScene.nodes = nodes;\n                }\n                serializeUserData(scene, gltfScene);\n            }\n            function processObjects(objects) {\n                var scene = new THREE.Scene();\n                scene.name = 'AuxScene';\n                for (var i = 0; i < objects.length; i++) {\n                    scene.children.push(objects[i]);\n                }\n                processScene(scene);\n            }\n            function processInput(input) {\n                input = input instanceof Array ? input : [input];\n                var objectsWithoutScene = [];\n                for (var i = 0; i < input.length; i++) {\n                    if (input[i] instanceof THREE.Scene) {\n                        processScene(input[i]);\n                    } else {\n                        objectsWithoutScene.push(input[i]);\n                    }\n                }\n                if (objectsWithoutScene.length > 0) {\n                    processObjects(objectsWithoutScene);\n                }\n                for (var i = 0; i < skins.length; ++i) {\n                    processSkin(skins[i]);\n                }\n                for (var i = 0; i < options.animations.length; ++i) {\n                    processAnimation(options.animations[i], input[0]);\n                }\n            }\n            processInput(input);\n            Promise.all(pending).then(function () {\n                var blob = new Blob(buffers, { type: 'application/octet-stream' });\n                var extensionsUsedList = Object.keys(extensionsUsed);\n                if (extensionsUsedList.length > 0)\n                    outputJSON.extensionsUsed = extensionsUsedList;\n                if (outputJSON.buffers && outputJSON.buffers.length > 0)\n                    outputJSON.buffers[0].byteLength = blob.size;\n                if (options.binary === true) {\n                    var GLB_HEADER_BYTES = 12;\n                    var GLB_HEADER_MAGIC = 1179937895;\n                    var GLB_VERSION = 2;\n                    var GLB_CHUNK_PREFIX_BYTES = 8;\n                    var GLB_CHUNK_TYPE_JSON = 1313821514;\n                    var GLB_CHUNK_TYPE_BIN = 5130562;\n                    var reader = new window.FileReader();\n                    reader.readAsArrayBuffer(blob);\n                    reader.onloadend = function () {\n                        var binaryChunk = getPaddedArrayBuffer(reader.result);\n                        var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n                        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n                        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n                        var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)), 32);\n                        var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n                        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n                        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n                        var header = new ArrayBuffer(GLB_HEADER_BYTES);\n                        var headerView = new DataView(header);\n                        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n                        headerView.setUint32(4, GLB_VERSION, true);\n                        var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n                        headerView.setUint32(8, totalByteLength, true);\n                        var glbBlob = new Blob([\n                            header,\n                            jsonChunkPrefix,\n                            jsonChunk,\n                            binaryChunkPrefix,\n                            binaryChunk\n                        ], { type: 'application/octet-stream' });\n                        var glbReader = new window.FileReader();\n                        glbReader.readAsArrayBuffer(glbBlob);\n                        glbReader.onloadend = function () {\n                            onDone(glbReader.result);\n                        };\n                    };\n                } else {\n                    if (outputJSON.buffers && outputJSON.buffers.length > 0) {\n                        var reader = new window.FileReader();\n                        reader.readAsDataURL(blob);\n                        reader.onloadend = function () {\n                            var base64data = reader.result;\n                            outputJSON.buffers[0].uri = base64data;\n                            onDone(outputJSON);\n                        };\n                    } else {\n                        onDone(outputJSON);\n                    }\n                }\n            });\n        }\n    };\n    GLTFExporter.Utils = {\n        insertKeyframe: function (track, time) {\n            var tolerance = 0.001;\n            var valueSize = track.getValueSize();\n            var times = new track.TimeBufferType(track.times.length + 1);\n            var values = new track.ValueBufferType(track.values.length + valueSize);\n            var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n            var index;\n            if (track.times.length === 0) {\n                times[0] = time;\n                for (var i = 0; i < valueSize; i++) {\n                    values[i] = 0;\n                }\n                index = 0;\n            } else if (time < track.times[0]) {\n                if (Math.abs(track.times[0] - time) < tolerance)\n                    return 0;\n                times[0] = time;\n                times.set(track.times, 1);\n                values.set(interpolant.evaluate(time), 0);\n                values.set(track.values, valueSize);\n                index = 0;\n            } else if (time > track.times[track.times.length - 1]) {\n                if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n                    return track.times.length - 1;\n                }\n                times[times.length - 1] = time;\n                times.set(track.times, 0);\n                values.set(track.values, 0);\n                values.set(interpolant.evaluate(time), track.values.length);\n                index = times.length - 1;\n            } else {\n                for (var i = 0; i < track.times.length; i++) {\n                    if (Math.abs(track.times[i] - time) < tolerance)\n                        return i;\n                    if (track.times[i] < time && track.times[i + 1] > time) {\n                        times.set(track.times.slice(0, i + 1), 0);\n                        times[i + 1] = time;\n                        times.set(track.times.slice(i + 1), i + 2);\n                        values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n                        values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n                        values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n                        index = i + 1;\n                        break;\n                    }\n                }\n            }\n            track.times = times;\n            track.values = values;\n            return index;\n        },\n        mergeMorphTargetTracks: function (clip, root) {\n            var tracks = [];\n            var mergedTracks = {};\n            var sourceTracks = clip.tracks;\n            for (var i = 0; i < sourceTracks.length; ++i) {\n                var sourceTrack = sourceTracks[i];\n                var sourceTrackBinding = THREE.PropertyBinding.parseTrackName(sourceTrack.name);\n                var sourceTrackNode = THREE.PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n                if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n                    tracks.push(sourceTrack);\n                    continue;\n                }\n                if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n                    if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n                        throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n                    }\n                    console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n                    sourceTrack = sourceTrack.clone();\n                    sourceTrack.setInterpolation(THREE.InterpolateLinear);\n                }\n                var targetCount = sourceTrackNode.morphTargetInfluences.length;\n                var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n                if (targetIndex === undefined) {\n                    throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n                }\n                var mergedTrack;\n                if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n                    mergedTrack = sourceTrack.clone();\n                    var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n                    for (var j = 0; j < mergedTrack.times.length; j++) {\n                        values[j * targetCount + targetIndex] = mergedTrack.values[j];\n                    }\n                    mergedTrack.name = '.morphTargetInfluences';\n                    mergedTrack.values = values;\n                    mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n                    tracks.push(mergedTrack);\n                    continue;\n                }\n                var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n                mergedTrack = mergedTracks[sourceTrackNode.uuid];\n                for (var j = 0; j < mergedTrack.times.length; j++) {\n                    mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n                }\n                for (var j = 0; j < sourceTrack.times.length; j++) {\n                    var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n                    mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n                }\n            }\n            clip.tracks = tracks;\n            return clip;\n        }\n    };\n    return GLTFExporter;\n});\ndefine('skylark-threejs-ex/utils/mmdparser',[],function(){\r\n\r\n\r\n\t/**\r\n\t * @author Takahiro / https://github.com/takahirox\r\n\t *\r\n\t * Simple CharsetEncoder.\r\n\t */\r\n\r\n\tfunction CharsetEncoder() {\r\n\t}\r\n\r\n\t/*\r\n\t * Converts from Shift_JIS Uint8Array data to Unicode strings.\r\n\t */\r\n\tCharsetEncoder.prototype.s2u = function ( uint8Array ) {\r\n\r\n\t\tvar t = this.s2uTable;\r\n\t\tvar str = '';\r\n\t\tvar p = 0;\r\n\r\n\t\twhile ( p < uint8Array.length ) {\r\n\r\n\t\t\tvar key = uint8Array[ p ++ ];\r\n\r\n\t\t\tif ( ! ( ( key >= 0x00 && key <= 0x7e ) ||\r\n\t          ( key >= 0xa1 && key <= 0xdf ) ) &&\r\n\t       p < uint8Array.length ) {\r\n\r\n\t\t\t\tkey = ( key << 8 ) | uint8Array[ p ++ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( t[ key ] === undefined ) {\r\n\r\n\t\t\t\tthrow 'unknown char code ' + key + '.';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstr += String.fromCharCode( t[ key ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\r\n\t};\r\n\r\n\tCharsetEncoder.prototype.s2uTable = {\r\n\t\t0: 0,\r\n\t\t1: 1,\r\n\t\t2: 2,\r\n\t\t3: 3,\r\n\t\t4: 4,\r\n\t\t5: 5,\r\n\t\t6: 6,\r\n\t\t7: 7,\r\n\t\t8: 8,\r\n\t\t9: 9,\r\n\t\t10: 10,\r\n\t\t11: 11,\r\n\t\t12: 12,\r\n\t\t13: 13,\r\n\t\t14: 14,\r\n\t\t15: 15,\r\n\t\t16: 16,\r\n\t\t17: 17,\r\n\t\t18: 18,\r\n\t\t19: 19,\r\n\t\t20: 20,\r\n\t\t21: 21,\r\n\t\t22: 22,\r\n\t\t23: 23,\r\n\t\t24: 24,\r\n\t\t25: 25,\r\n\t\t26: 26,\r\n\t\t27: 27,\r\n\t\t28: 28,\r\n\t\t29: 29,\r\n\t\t30: 30,\r\n\t\t31: 31,\r\n\t\t32: 32,\r\n\t\t33: 33,\r\n\t\t34: 34,\r\n\t\t35: 35,\r\n\t\t36: 36,\r\n\t\t37: 37,\r\n\t\t38: 38,\r\n\t\t39: 39,\r\n\t\t40: 40,\r\n\t\t41: 41,\r\n\t\t42: 42,\r\n\t\t43: 43,\r\n\t\t44: 44,\r\n\t\t45: 45,\r\n\t\t46: 46,\r\n\t\t47: 47,\r\n\t\t48: 48,\r\n\t\t49: 49,\r\n\t\t50: 50,\r\n\t\t51: 51,\r\n\t\t52: 52,\r\n\t\t53: 53,\r\n\t\t54: 54,\r\n\t\t55: 55,\r\n\t\t56: 56,\r\n\t\t57: 57,\r\n\t\t58: 58,\r\n\t\t59: 59,\r\n\t\t60: 60,\r\n\t\t61: 61,\r\n\t\t62: 62,\r\n\t\t63: 63,\r\n\t\t64: 64,\r\n\t\t65: 65,\r\n\t\t66: 66,\r\n\t\t67: 67,\r\n\t\t68: 68,\r\n\t\t69: 69,\r\n\t\t70: 70,\r\n\t\t71: 71,\r\n\t\t72: 72,\r\n\t\t73: 73,\r\n\t\t74: 74,\r\n\t\t75: 75,\r\n\t\t76: 76,\r\n\t\t77: 77,\r\n\t\t78: 78,\r\n\t\t79: 79,\r\n\t\t80: 80,\r\n\t\t81: 81,\r\n\t\t82: 82,\r\n\t\t83: 83,\r\n\t\t84: 84,\r\n\t\t85: 85,\r\n\t\t86: 86,\r\n\t\t87: 87,\r\n\t\t88: 88,\r\n\t\t89: 89,\r\n\t\t90: 90,\r\n\t\t91: 91,\r\n\t\t92: 92,\r\n\t\t93: 93,\r\n\t\t94: 94,\r\n\t\t95: 95,\r\n\t\t96: 96,\r\n\t\t97: 97,\r\n\t\t98: 98,\r\n\t\t99: 99,\r\n\t\t100: 100,\r\n\t\t101: 101,\r\n\t\t102: 102,\r\n\t\t103: 103,\r\n\t\t104: 104,\r\n\t\t105: 105,\r\n\t\t106: 106,\r\n\t\t107: 107,\r\n\t\t108: 108,\r\n\t\t109: 109,\r\n\t\t110: 110,\r\n\t\t111: 111,\r\n\t\t112: 112,\r\n\t\t113: 113,\r\n\t\t114: 114,\r\n\t\t115: 115,\r\n\t\t116: 116,\r\n\t\t117: 117,\r\n\t\t118: 118,\r\n\t\t119: 119,\r\n\t\t120: 120,\r\n\t\t121: 121,\r\n\t\t122: 122,\r\n\t\t123: 123,\r\n\t\t124: 124,\r\n\t\t125: 125,\r\n\t\t126: 126,\r\n\t\t161: 65377,\r\n\t\t162: 65378,\r\n\t\t163: 65379,\r\n\t\t164: 65380,\r\n\t\t165: 65381,\r\n\t\t166: 65382,\r\n\t\t167: 65383,\r\n\t\t168: 65384,\r\n\t\t169: 65385,\r\n\t\t170: 65386,\r\n\t\t171: 65387,\r\n\t\t172: 65388,\r\n\t\t173: 65389,\r\n\t\t174: 65390,\r\n\t\t175: 65391,\r\n\t\t176: 65392,\r\n\t\t177: 65393,\r\n\t\t178: 65394,\r\n\t\t179: 65395,\r\n\t\t180: 65396,\r\n\t\t181: 65397,\r\n\t\t182: 65398,\r\n\t\t183: 65399,\r\n\t\t184: 65400,\r\n\t\t185: 65401,\r\n\t\t186: 65402,\r\n\t\t187: 65403,\r\n\t\t188: 65404,\r\n\t\t189: 65405,\r\n\t\t190: 65406,\r\n\t\t191: 65407,\r\n\t\t192: 65408,\r\n\t\t193: 65409,\r\n\t\t194: 65410,\r\n\t\t195: 65411,\r\n\t\t196: 65412,\r\n\t\t197: 65413,\r\n\t\t198: 65414,\r\n\t\t199: 65415,\r\n\t\t200: 65416,\r\n\t\t201: 65417,\r\n\t\t202: 65418,\r\n\t\t203: 65419,\r\n\t\t204: 65420,\r\n\t\t205: 65421,\r\n\t\t206: 65422,\r\n\t\t207: 65423,\r\n\t\t208: 65424,\r\n\t\t209: 65425,\r\n\t\t210: 65426,\r\n\t\t211: 65427,\r\n\t\t212: 65428,\r\n\t\t213: 65429,\r\n\t\t214: 65430,\r\n\t\t215: 65431,\r\n\t\t216: 65432,\r\n\t\t217: 65433,\r\n\t\t218: 65434,\r\n\t\t219: 65435,\r\n\t\t220: 65436,\r\n\t\t221: 65437,\r\n\t\t222: 65438,\r\n\t\t223: 65439,\r\n\t\t33088: 12288,\r\n\t\t33089: 12289,\r\n\t\t33090: 12290,\r\n\t\t33091: 65292,\r\n\t\t33092: 65294,\r\n\t\t33093: 12539,\r\n\t\t33094: 65306,\r\n\t\t33095: 65307,\r\n\t\t33096: 65311,\r\n\t\t33097: 65281,\r\n\t\t33098: 12443,\r\n\t\t33099: 12444,\r\n\t\t33100: 180,\r\n\t\t33101: 65344,\r\n\t\t33102: 168,\r\n\t\t33103: 65342,\r\n\t\t33104: 65507,\r\n\t\t33105: 65343,\r\n\t\t33106: 12541,\r\n\t\t33107: 12542,\r\n\t\t33108: 12445,\r\n\t\t33109: 12446,\r\n\t\t33110: 12291,\r\n\t\t33111: 20189,\r\n\t\t33112: 12293,\r\n\t\t33113: 12294,\r\n\t\t33114: 12295,\r\n\t\t33115: 12540,\r\n\t\t33116: 8213,\r\n\t\t33117: 8208,\r\n\t\t33118: 65295,\r\n\t\t33119: 65340,\r\n\t\t33120: 65374,\r\n\t\t33121: 8741,\r\n\t\t33122: 65372,\r\n\t\t33123: 8230,\r\n\t\t33124: 8229,\r\n\t\t33125: 8216,\r\n\t\t33126: 8217,\r\n\t\t33127: 8220,\r\n\t\t33128: 8221,\r\n\t\t33129: 65288,\r\n\t\t33130: 65289,\r\n\t\t33131: 12308,\r\n\t\t33132: 12309,\r\n\t\t33133: 65339,\r\n\t\t33134: 65341,\r\n\t\t33135: 65371,\r\n\t\t33136: 65373,\r\n\t\t33137: 12296,\r\n\t\t33138: 12297,\r\n\t\t33139: 12298,\r\n\t\t33140: 12299,\r\n\t\t33141: 12300,\r\n\t\t33142: 12301,\r\n\t\t33143: 12302,\r\n\t\t33144: 12303,\r\n\t\t33145: 12304,\r\n\t\t33146: 12305,\r\n\t\t33147: 65291,\r\n\t\t33148: 65293,\r\n\t\t33149: 177,\r\n\t\t33150: 215,\r\n\t\t33152: 247,\r\n\t\t33153: 65309,\r\n\t\t33154: 8800,\r\n\t\t33155: 65308,\r\n\t\t33156: 65310,\r\n\t\t33157: 8806,\r\n\t\t33158: 8807,\r\n\t\t33159: 8734,\r\n\t\t33160: 8756,\r\n\t\t33161: 9794,\r\n\t\t33162: 9792,\r\n\t\t33163: 176,\r\n\t\t33164: 8242,\r\n\t\t33165: 8243,\r\n\t\t33166: 8451,\r\n\t\t33167: 65509,\r\n\t\t33168: 65284,\r\n\t\t33169: 65504,\r\n\t\t33170: 65505,\r\n\t\t33171: 65285,\r\n\t\t33172: 65283,\r\n\t\t33173: 65286,\r\n\t\t33174: 65290,\r\n\t\t33175: 65312,\r\n\t\t33176: 167,\r\n\t\t33177: 9734,\r\n\t\t33178: 9733,\r\n\t\t33179: 9675,\r\n\t\t33180: 9679,\r\n\t\t33181: 9678,\r\n\t\t33182: 9671,\r\n\t\t33183: 9670,\r\n\t\t33184: 9633,\r\n\t\t33185: 9632,\r\n\t\t33186: 9651,\r\n\t\t33187: 9650,\r\n\t\t33188: 9661,\r\n\t\t33189: 9660,\r\n\t\t33190: 8251,\r\n\t\t33191: 12306,\r\n\t\t33192: 8594,\r\n\t\t33193: 8592,\r\n\t\t33194: 8593,\r\n\t\t33195: 8595,\r\n\t\t33196: 12307,\r\n\t\t33208: 8712,\r\n\t\t33209: 8715,\r\n\t\t33210: 8838,\r\n\t\t33211: 8839,\r\n\t\t33212: 8834,\r\n\t\t33213: 8835,\r\n\t\t33214: 8746,\r\n\t\t33215: 8745,\r\n\t\t33224: 8743,\r\n\t\t33225: 8744,\r\n\t\t33226: 65506,\r\n\t\t33227: 8658,\r\n\t\t33228: 8660,\r\n\t\t33229: 8704,\r\n\t\t33230: 8707,\r\n\t\t33242: 8736,\r\n\t\t33243: 8869,\r\n\t\t33244: 8978,\r\n\t\t33245: 8706,\r\n\t\t33246: 8711,\r\n\t\t33247: 8801,\r\n\t\t33248: 8786,\r\n\t\t33249: 8810,\r\n\t\t33250: 8811,\r\n\t\t33251: 8730,\r\n\t\t33252: 8765,\r\n\t\t33253: 8733,\r\n\t\t33254: 8757,\r\n\t\t33255: 8747,\r\n\t\t33256: 8748,\r\n\t\t33264: 8491,\r\n\t\t33265: 8240,\r\n\t\t33266: 9839,\r\n\t\t33267: 9837,\r\n\t\t33268: 9834,\r\n\t\t33269: 8224,\r\n\t\t33270: 8225,\r\n\t\t33271: 182,\r\n\t\t33276: 9711,\r\n\t\t33359: 65296,\r\n\t\t33360: 65297,\r\n\t\t33361: 65298,\r\n\t\t33362: 65299,\r\n\t\t33363: 65300,\r\n\t\t33364: 65301,\r\n\t\t33365: 65302,\r\n\t\t33366: 65303,\r\n\t\t33367: 65304,\r\n\t\t33368: 65305,\r\n\t\t33376: 65313,\r\n\t\t33377: 65314,\r\n\t\t33378: 65315,\r\n\t\t33379: 65316,\r\n\t\t33380: 65317,\r\n\t\t33381: 65318,\r\n\t\t33382: 65319,\r\n\t\t33383: 65320,\r\n\t\t33384: 65321,\r\n\t\t33385: 65322,\r\n\t\t33386: 65323,\r\n\t\t33387: 65324,\r\n\t\t33388: 65325,\r\n\t\t33389: 65326,\r\n\t\t33390: 65327,\r\n\t\t33391: 65328,\r\n\t\t33392: 65329,\r\n\t\t33393: 65330,\r\n\t\t33394: 65331,\r\n\t\t33395: 65332,\r\n\t\t33396: 65333,\r\n\t\t33397: 65334,\r\n\t\t33398: 65335,\r\n\t\t33399: 65336,\r\n\t\t33400: 65337,\r\n\t\t33401: 65338,\r\n\t\t33409: 65345,\r\n\t\t33410: 65346,\r\n\t\t33411: 65347,\r\n\t\t33412: 65348,\r\n\t\t33413: 65349,\r\n\t\t33414: 65350,\r\n\t\t33415: 65351,\r\n\t\t33416: 65352,\r\n\t\t33417: 65353,\r\n\t\t33418: 65354,\r\n\t\t33419: 65355,\r\n\t\t33420: 65356,\r\n\t\t33421: 65357,\r\n\t\t33422: 65358,\r\n\t\t33423: 65359,\r\n\t\t33424: 65360,\r\n\t\t33425: 65361,\r\n\t\t33426: 65362,\r\n\t\t33427: 65363,\r\n\t\t33428: 65364,\r\n\t\t33429: 65365,\r\n\t\t33430: 65366,\r\n\t\t33431: 65367,\r\n\t\t33432: 65368,\r\n\t\t33433: 65369,\r\n\t\t33434: 65370,\r\n\t\t33439: 12353,\r\n\t\t33440: 12354,\r\n\t\t33441: 12355,\r\n\t\t33442: 12356,\r\n\t\t33443: 12357,\r\n\t\t33444: 12358,\r\n\t\t33445: 12359,\r\n\t\t33446: 12360,\r\n\t\t33447: 12361,\r\n\t\t33448: 12362,\r\n\t\t33449: 12363,\r\n\t\t33450: 12364,\r\n\t\t33451: 12365,\r\n\t\t33452: 12366,\r\n\t\t33453: 12367,\r\n\t\t33454: 12368,\r\n\t\t33455: 12369,\r\n\t\t33456: 12370,\r\n\t\t33457: 12371,\r\n\t\t33458: 12372,\r\n\t\t33459: 12373,\r\n\t\t33460: 12374,\r\n\t\t33461: 12375,\r\n\t\t33462: 12376,\r\n\t\t33463: 12377,\r\n\t\t33464: 12378,\r\n\t\t33465: 12379,\r\n\t\t33466: 12380,\r\n\t\t33467: 12381,\r\n\t\t33468: 12382,\r\n\t\t33469: 12383,\r\n\t\t33470: 12384,\r\n\t\t33471: 12385,\r\n\t\t33472: 12386,\r\n\t\t33473: 12387,\r\n\t\t33474: 12388,\r\n\t\t33475: 12389,\r\n\t\t33476: 12390,\r\n\t\t33477: 12391,\r\n\t\t33478: 12392,\r\n\t\t33479: 12393,\r\n\t\t33480: 12394,\r\n\t\t33481: 12395,\r\n\t\t33482: 12396,\r\n\t\t33483: 12397,\r\n\t\t33484: 12398,\r\n\t\t33485: 12399,\r\n\t\t33486: 12400,\r\n\t\t33487: 12401,\r\n\t\t33488: 12402,\r\n\t\t33489: 12403,\r\n\t\t33490: 12404,\r\n\t\t33491: 12405,\r\n\t\t33492: 12406,\r\n\t\t33493: 12407,\r\n\t\t33494: 12408,\r\n\t\t33495: 12409,\r\n\t\t33496: 12410,\r\n\t\t33497: 12411,\r\n\t\t33498: 12412,\r\n\t\t33499: 12413,\r\n\t\t33500: 12414,\r\n\t\t33501: 12415,\r\n\t\t33502: 12416,\r\n\t\t33503: 12417,\r\n\t\t33504: 12418,\r\n\t\t33505: 12419,\r\n\t\t33506: 12420,\r\n\t\t33507: 12421,\r\n\t\t33508: 12422,\r\n\t\t33509: 12423,\r\n\t\t33510: 12424,\r\n\t\t33511: 12425,\r\n\t\t33512: 12426,\r\n\t\t33513: 12427,\r\n\t\t33514: 12428,\r\n\t\t33515: 12429,\r\n\t\t33516: 12430,\r\n\t\t33517: 12431,\r\n\t\t33518: 12432,\r\n\t\t33519: 12433,\r\n\t\t33520: 12434,\r\n\t\t33521: 12435,\r\n\t\t33600: 12449,\r\n\t\t33601: 12450,\r\n\t\t33602: 12451,\r\n\t\t33603: 12452,\r\n\t\t33604: 12453,\r\n\t\t33605: 12454,\r\n\t\t33606: 12455,\r\n\t\t33607: 12456,\r\n\t\t33608: 12457,\r\n\t\t33609: 12458,\r\n\t\t33610: 12459,\r\n\t\t33611: 12460,\r\n\t\t33612: 12461,\r\n\t\t33613: 12462,\r\n\t\t33614: 12463,\r\n\t\t33615: 12464,\r\n\t\t33616: 12465,\r\n\t\t33617: 12466,\r\n\t\t33618: 12467,\r\n\t\t33619: 12468,\r\n\t\t33620: 12469,\r\n\t\t33621: 12470,\r\n\t\t33622: 12471,\r\n\t\t33623: 12472,\r\n\t\t33624: 12473,\r\n\t\t33625: 12474,\r\n\t\t33626: 12475,\r\n\t\t33627: 12476,\r\n\t\t33628: 12477,\r\n\t\t33629: 12478,\r\n\t\t33630: 12479,\r\n\t\t33631: 12480,\r\n\t\t33632: 12481,\r\n\t\t33633: 12482,\r\n\t\t33634: 12483,\r\n\t\t33635: 12484,\r\n\t\t33636: 12485,\r\n\t\t33637: 12486,\r\n\t\t33638: 12487,\r\n\t\t33639: 12488,\r\n\t\t33640: 12489,\r\n\t\t33641: 12490,\r\n\t\t33642: 12491,\r\n\t\t33643: 12492,\r\n\t\t33644: 12493,\r\n\t\t33645: 12494,\r\n\t\t33646: 12495,\r\n\t\t33647: 12496,\r\n\t\t33648: 12497,\r\n\t\t33649: 12498,\r\n\t\t33650: 12499,\r\n\t\t33651: 12500,\r\n\t\t33652: 12501,\r\n\t\t33653: 12502,\r\n\t\t33654: 12503,\r\n\t\t33655: 12504,\r\n\t\t33656: 12505,\r\n\t\t33657: 12506,\r\n\t\t33658: 12507,\r\n\t\t33659: 12508,\r\n\t\t33660: 12509,\r\n\t\t33661: 12510,\r\n\t\t33662: 12511,\r\n\t\t33664: 12512,\r\n\t\t33665: 12513,\r\n\t\t33666: 12514,\r\n\t\t33667: 12515,\r\n\t\t33668: 12516,\r\n\t\t33669: 12517,\r\n\t\t33670: 12518,\r\n\t\t33671: 12519,\r\n\t\t33672: 12520,\r\n\t\t33673: 12521,\r\n\t\t33674: 12522,\r\n\t\t33675: 12523,\r\n\t\t33676: 12524,\r\n\t\t33677: 12525,\r\n\t\t33678: 12526,\r\n\t\t33679: 12527,\r\n\t\t33680: 12528,\r\n\t\t33681: 12529,\r\n\t\t33682: 12530,\r\n\t\t33683: 12531,\r\n\t\t33684: 12532,\r\n\t\t33685: 12533,\r\n\t\t33686: 12534,\r\n\t\t33695: 913,\r\n\t\t33696: 914,\r\n\t\t33697: 915,\r\n\t\t33698: 916,\r\n\t\t33699: 917,\r\n\t\t33700: 918,\r\n\t\t33701: 919,\r\n\t\t33702: 920,\r\n\t\t33703: 921,\r\n\t\t33704: 922,\r\n\t\t33705: 923,\r\n\t\t33706: 924,\r\n\t\t33707: 925,\r\n\t\t33708: 926,\r\n\t\t33709: 927,\r\n\t\t33710: 928,\r\n\t\t33711: 929,\r\n\t\t33712: 931,\r\n\t\t33713: 932,\r\n\t\t33714: 933,\r\n\t\t33715: 934,\r\n\t\t33716: 935,\r\n\t\t33717: 936,\r\n\t\t33718: 937,\r\n\t\t33727: 945,\r\n\t\t33728: 946,\r\n\t\t33729: 947,\r\n\t\t33730: 948,\r\n\t\t33731: 949,\r\n\t\t33732: 950,\r\n\t\t33733: 951,\r\n\t\t33734: 952,\r\n\t\t33735: 953,\r\n\t\t33736: 954,\r\n\t\t33737: 955,\r\n\t\t33738: 956,\r\n\t\t33739: 957,\r\n\t\t33740: 958,\r\n\t\t33741: 959,\r\n\t\t33742: 960,\r\n\t\t33743: 961,\r\n\t\t33744: 963,\r\n\t\t33745: 964,\r\n\t\t33746: 965,\r\n\t\t33747: 966,\r\n\t\t33748: 967,\r\n\t\t33749: 968,\r\n\t\t33750: 969,\r\n\t\t33856: 1040,\r\n\t\t33857: 1041,\r\n\t\t33858: 1042,\r\n\t\t33859: 1043,\r\n\t\t33860: 1044,\r\n\t\t33861: 1045,\r\n\t\t33862: 1025,\r\n\t\t33863: 1046,\r\n\t\t33864: 1047,\r\n\t\t33865: 1048,\r\n\t\t33866: 1049,\r\n\t\t33867: 1050,\r\n\t\t33868: 1051,\r\n\t\t33869: 1052,\r\n\t\t33870: 1053,\r\n\t\t33871: 1054,\r\n\t\t33872: 1055,\r\n\t\t33873: 1056,\r\n\t\t33874: 1057,\r\n\t\t33875: 1058,\r\n\t\t33876: 1059,\r\n\t\t33877: 1060,\r\n\t\t33878: 1061,\r\n\t\t33879: 1062,\r\n\t\t33880: 1063,\r\n\t\t33881: 1064,\r\n\t\t33882: 1065,\r\n\t\t33883: 1066,\r\n\t\t33884: 1067,\r\n\t\t33885: 1068,\r\n\t\t33886: 1069,\r\n\t\t33887: 1070,\r\n\t\t33888: 1071,\r\n\t\t33904: 1072,\r\n\t\t33905: 1073,\r\n\t\t33906: 1074,\r\n\t\t33907: 1075,\r\n\t\t33908: 1076,\r\n\t\t33909: 1077,\r\n\t\t33910: 1105,\r\n\t\t33911: 1078,\r\n\t\t33912: 1079,\r\n\t\t33913: 1080,\r\n\t\t33914: 1081,\r\n\t\t33915: 1082,\r\n\t\t33916: 1083,\r\n\t\t33917: 1084,\r\n\t\t33918: 1085,\r\n\t\t33920: 1086,\r\n\t\t33921: 1087,\r\n\t\t33922: 1088,\r\n\t\t33923: 1089,\r\n\t\t33924: 1090,\r\n\t\t33925: 1091,\r\n\t\t33926: 1092,\r\n\t\t33927: 1093,\r\n\t\t33928: 1094,\r\n\t\t33929: 1095,\r\n\t\t33930: 1096,\r\n\t\t33931: 1097,\r\n\t\t33932: 1098,\r\n\t\t33933: 1099,\r\n\t\t33934: 1100,\r\n\t\t33935: 1101,\r\n\t\t33936: 1102,\r\n\t\t33937: 1103,\r\n\t\t33951: 9472,\r\n\t\t33952: 9474,\r\n\t\t33953: 9484,\r\n\t\t33954: 9488,\r\n\t\t33955: 9496,\r\n\t\t33956: 9492,\r\n\t\t33957: 9500,\r\n\t\t33958: 9516,\r\n\t\t33959: 9508,\r\n\t\t33960: 9524,\r\n\t\t33961: 9532,\r\n\t\t33962: 9473,\r\n\t\t33963: 9475,\r\n\t\t33964: 9487,\r\n\t\t33965: 9491,\r\n\t\t33966: 9499,\r\n\t\t33967: 9495,\r\n\t\t33968: 9507,\r\n\t\t33969: 9523,\r\n\t\t33970: 9515,\r\n\t\t33971: 9531,\r\n\t\t33972: 9547,\r\n\t\t33973: 9504,\r\n\t\t33974: 9519,\r\n\t\t33975: 9512,\r\n\t\t33976: 9527,\r\n\t\t33977: 9535,\r\n\t\t33978: 9501,\r\n\t\t33979: 9520,\r\n\t\t33980: 9509,\r\n\t\t33981: 9528,\r\n\t\t33982: 9538,\r\n\t\t34624: 9312,\r\n\t\t34625: 9313,\r\n\t\t34626: 9314,\r\n\t\t34627: 9315,\r\n\t\t34628: 9316,\r\n\t\t34629: 9317,\r\n\t\t34630: 9318,\r\n\t\t34631: 9319,\r\n\t\t34632: 9320,\r\n\t\t34633: 9321,\r\n\t\t34634: 9322,\r\n\t\t34635: 9323,\r\n\t\t34636: 9324,\r\n\t\t34637: 9325,\r\n\t\t34638: 9326,\r\n\t\t34639: 9327,\r\n\t\t34640: 9328,\r\n\t\t34641: 9329,\r\n\t\t34642: 9330,\r\n\t\t34643: 9331,\r\n\t\t34644: 8544,\r\n\t\t34645: 8545,\r\n\t\t34646: 8546,\r\n\t\t34647: 8547,\r\n\t\t34648: 8548,\r\n\t\t34649: 8549,\r\n\t\t34650: 8550,\r\n\t\t34651: 8551,\r\n\t\t34652: 8552,\r\n\t\t34653: 8553,\r\n\t\t34655: 13129,\r\n\t\t34656: 13076,\r\n\t\t34657: 13090,\r\n\t\t34658: 13133,\r\n\t\t34659: 13080,\r\n\t\t34660: 13095,\r\n\t\t34661: 13059,\r\n\t\t34662: 13110,\r\n\t\t34663: 13137,\r\n\t\t34664: 13143,\r\n\t\t34665: 13069,\r\n\t\t34666: 13094,\r\n\t\t34667: 13091,\r\n\t\t34668: 13099,\r\n\t\t34669: 13130,\r\n\t\t34670: 13115,\r\n\t\t34671: 13212,\r\n\t\t34672: 13213,\r\n\t\t34673: 13214,\r\n\t\t34674: 13198,\r\n\t\t34675: 13199,\r\n\t\t34676: 13252,\r\n\t\t34677: 13217,\r\n\t\t34686: 13179,\r\n\t\t34688: 12317,\r\n\t\t34689: 12319,\r\n\t\t34690: 8470,\r\n\t\t34691: 13261,\r\n\t\t34692: 8481,\r\n\t\t34693: 12964,\r\n\t\t34694: 12965,\r\n\t\t34695: 12966,\r\n\t\t34696: 12967,\r\n\t\t34697: 12968,\r\n\t\t34698: 12849,\r\n\t\t34699: 12850,\r\n\t\t34700: 12857,\r\n\t\t34701: 13182,\r\n\t\t34702: 13181,\r\n\t\t34703: 13180,\r\n\t\t34704: 8786,\r\n\t\t34705: 8801,\r\n\t\t34706: 8747,\r\n\t\t34707: 8750,\r\n\t\t34708: 8721,\r\n\t\t34709: 8730,\r\n\t\t34710: 8869,\r\n\t\t34711: 8736,\r\n\t\t34712: 8735,\r\n\t\t34713: 8895,\r\n\t\t34714: 8757,\r\n\t\t34715: 8745,\r\n\t\t34716: 8746,\r\n\t\t34975: 20124,\r\n\t\t34976: 21782,\r\n\t\t34977: 23043,\r\n\t\t34978: 38463,\r\n\t\t34979: 21696,\r\n\t\t34980: 24859,\r\n\t\t34981: 25384,\r\n\t\t34982: 23030,\r\n\t\t34983: 36898,\r\n\t\t34984: 33909,\r\n\t\t34985: 33564,\r\n\t\t34986: 31312,\r\n\t\t34987: 24746,\r\n\t\t34988: 25569,\r\n\t\t34989: 28197,\r\n\t\t34990: 26093,\r\n\t\t34991: 33894,\r\n\t\t34992: 33446,\r\n\t\t34993: 39925,\r\n\t\t34994: 26771,\r\n\t\t34995: 22311,\r\n\t\t34996: 26017,\r\n\t\t34997: 25201,\r\n\t\t34998: 23451,\r\n\t\t34999: 22992,\r\n\t\t35000: 34427,\r\n\t\t35001: 39156,\r\n\t\t35002: 32098,\r\n\t\t35003: 32190,\r\n\t\t35004: 39822,\r\n\t\t35005: 25110,\r\n\t\t35006: 31903,\r\n\t\t35007: 34999,\r\n\t\t35008: 23433,\r\n\t\t35009: 24245,\r\n\t\t35010: 25353,\r\n\t\t35011: 26263,\r\n\t\t35012: 26696,\r\n\t\t35013: 38343,\r\n\t\t35014: 38797,\r\n\t\t35015: 26447,\r\n\t\t35016: 20197,\r\n\t\t35017: 20234,\r\n\t\t35018: 20301,\r\n\t\t35019: 20381,\r\n\t\t35020: 20553,\r\n\t\t35021: 22258,\r\n\t\t35022: 22839,\r\n\t\t35023: 22996,\r\n\t\t35024: 23041,\r\n\t\t35025: 23561,\r\n\t\t35026: 24799,\r\n\t\t35027: 24847,\r\n\t\t35028: 24944,\r\n\t\t35029: 26131,\r\n\t\t35030: 26885,\r\n\t\t35031: 28858,\r\n\t\t35032: 30031,\r\n\t\t35033: 30064,\r\n\t\t35034: 31227,\r\n\t\t35035: 32173,\r\n\t\t35036: 32239,\r\n\t\t35037: 32963,\r\n\t\t35038: 33806,\r\n\t\t35039: 34915,\r\n\t\t35040: 35586,\r\n\t\t35041: 36949,\r\n\t\t35042: 36986,\r\n\t\t35043: 21307,\r\n\t\t35044: 20117,\r\n\t\t35045: 20133,\r\n\t\t35046: 22495,\r\n\t\t35047: 32946,\r\n\t\t35048: 37057,\r\n\t\t35049: 30959,\r\n\t\t35050: 19968,\r\n\t\t35051: 22769,\r\n\t\t35052: 28322,\r\n\t\t35053: 36920,\r\n\t\t35054: 31282,\r\n\t\t35055: 33576,\r\n\t\t35056: 33419,\r\n\t\t35057: 39983,\r\n\t\t35058: 20801,\r\n\t\t35059: 21360,\r\n\t\t35060: 21693,\r\n\t\t35061: 21729,\r\n\t\t35062: 22240,\r\n\t\t35063: 23035,\r\n\t\t35064: 24341,\r\n\t\t35065: 39154,\r\n\t\t35066: 28139,\r\n\t\t35067: 32996,\r\n\t\t35068: 34093,\r\n\t\t35136: 38498,\r\n\t\t35137: 38512,\r\n\t\t35138: 38560,\r\n\t\t35139: 38907,\r\n\t\t35140: 21515,\r\n\t\t35141: 21491,\r\n\t\t35142: 23431,\r\n\t\t35143: 28879,\r\n\t\t35144: 32701,\r\n\t\t35145: 36802,\r\n\t\t35146: 38632,\r\n\t\t35147: 21359,\r\n\t\t35148: 40284,\r\n\t\t35149: 31418,\r\n\t\t35150: 19985,\r\n\t\t35151: 30867,\r\n\t\t35152: 33276,\r\n\t\t35153: 28198,\r\n\t\t35154: 22040,\r\n\t\t35155: 21764,\r\n\t\t35156: 27421,\r\n\t\t35157: 34074,\r\n\t\t35158: 39995,\r\n\t\t35159: 23013,\r\n\t\t35160: 21417,\r\n\t\t35161: 28006,\r\n\t\t35162: 29916,\r\n\t\t35163: 38287,\r\n\t\t35164: 22082,\r\n\t\t35165: 20113,\r\n\t\t35166: 36939,\r\n\t\t35167: 38642,\r\n\t\t35168: 33615,\r\n\t\t35169: 39180,\r\n\t\t35170: 21473,\r\n\t\t35171: 21942,\r\n\t\t35172: 23344,\r\n\t\t35173: 24433,\r\n\t\t35174: 26144,\r\n\t\t35175: 26355,\r\n\t\t35176: 26628,\r\n\t\t35177: 27704,\r\n\t\t35178: 27891,\r\n\t\t35179: 27945,\r\n\t\t35180: 29787,\r\n\t\t35181: 30408,\r\n\t\t35182: 31310,\r\n\t\t35183: 38964,\r\n\t\t35184: 33521,\r\n\t\t35185: 34907,\r\n\t\t35186: 35424,\r\n\t\t35187: 37613,\r\n\t\t35188: 28082,\r\n\t\t35189: 30123,\r\n\t\t35190: 30410,\r\n\t\t35191: 39365,\r\n\t\t35192: 24742,\r\n\t\t35193: 35585,\r\n\t\t35194: 36234,\r\n\t\t35195: 38322,\r\n\t\t35196: 27022,\r\n\t\t35197: 21421,\r\n\t\t35198: 20870,\r\n\t\t35200: 22290,\r\n\t\t35201: 22576,\r\n\t\t35202: 22852,\r\n\t\t35203: 23476,\r\n\t\t35204: 24310,\r\n\t\t35205: 24616,\r\n\t\t35206: 25513,\r\n\t\t35207: 25588,\r\n\t\t35208: 27839,\r\n\t\t35209: 28436,\r\n\t\t35210: 28814,\r\n\t\t35211: 28948,\r\n\t\t35212: 29017,\r\n\t\t35213: 29141,\r\n\t\t35214: 29503,\r\n\t\t35215: 32257,\r\n\t\t35216: 33398,\r\n\t\t35217: 33489,\r\n\t\t35218: 34199,\r\n\t\t35219: 36960,\r\n\t\t35220: 37467,\r\n\t\t35221: 40219,\r\n\t\t35222: 22633,\r\n\t\t35223: 26044,\r\n\t\t35224: 27738,\r\n\t\t35225: 29989,\r\n\t\t35226: 20985,\r\n\t\t35227: 22830,\r\n\t\t35228: 22885,\r\n\t\t35229: 24448,\r\n\t\t35230: 24540,\r\n\t\t35231: 25276,\r\n\t\t35232: 26106,\r\n\t\t35233: 27178,\r\n\t\t35234: 27431,\r\n\t\t35235: 27572,\r\n\t\t35236: 29579,\r\n\t\t35237: 32705,\r\n\t\t35238: 35158,\r\n\t\t35239: 40236,\r\n\t\t35240: 40206,\r\n\t\t35241: 40644,\r\n\t\t35242: 23713,\r\n\t\t35243: 27798,\r\n\t\t35244: 33659,\r\n\t\t35245: 20740,\r\n\t\t35246: 23627,\r\n\t\t35247: 25014,\r\n\t\t35248: 33222,\r\n\t\t35249: 26742,\r\n\t\t35250: 29281,\r\n\t\t35251: 20057,\r\n\t\t35252: 20474,\r\n\t\t35253: 21368,\r\n\t\t35254: 24681,\r\n\t\t35255: 28201,\r\n\t\t35256: 31311,\r\n\t\t35257: 38899,\r\n\t\t35258: 19979,\r\n\t\t35259: 21270,\r\n\t\t35260: 20206,\r\n\t\t35261: 20309,\r\n\t\t35262: 20285,\r\n\t\t35263: 20385,\r\n\t\t35264: 20339,\r\n\t\t35265: 21152,\r\n\t\t35266: 21487,\r\n\t\t35267: 22025,\r\n\t\t35268: 22799,\r\n\t\t35269: 23233,\r\n\t\t35270: 23478,\r\n\t\t35271: 23521,\r\n\t\t35272: 31185,\r\n\t\t35273: 26247,\r\n\t\t35274: 26524,\r\n\t\t35275: 26550,\r\n\t\t35276: 27468,\r\n\t\t35277: 27827,\r\n\t\t35278: 28779,\r\n\t\t35279: 29634,\r\n\t\t35280: 31117,\r\n\t\t35281: 31166,\r\n\t\t35282: 31292,\r\n\t\t35283: 31623,\r\n\t\t35284: 33457,\r\n\t\t35285: 33499,\r\n\t\t35286: 33540,\r\n\t\t35287: 33655,\r\n\t\t35288: 33775,\r\n\t\t35289: 33747,\r\n\t\t35290: 34662,\r\n\t\t35291: 35506,\r\n\t\t35292: 22057,\r\n\t\t35293: 36008,\r\n\t\t35294: 36838,\r\n\t\t35295: 36942,\r\n\t\t35296: 38686,\r\n\t\t35297: 34442,\r\n\t\t35298: 20420,\r\n\t\t35299: 23784,\r\n\t\t35300: 25105,\r\n\t\t35301: 29273,\r\n\t\t35302: 30011,\r\n\t\t35303: 33253,\r\n\t\t35304: 33469,\r\n\t\t35305: 34558,\r\n\t\t35306: 36032,\r\n\t\t35307: 38597,\r\n\t\t35308: 39187,\r\n\t\t35309: 39381,\r\n\t\t35310: 20171,\r\n\t\t35311: 20250,\r\n\t\t35312: 35299,\r\n\t\t35313: 22238,\r\n\t\t35314: 22602,\r\n\t\t35315: 22730,\r\n\t\t35316: 24315,\r\n\t\t35317: 24555,\r\n\t\t35318: 24618,\r\n\t\t35319: 24724,\r\n\t\t35320: 24674,\r\n\t\t35321: 25040,\r\n\t\t35322: 25106,\r\n\t\t35323: 25296,\r\n\t\t35324: 25913,\r\n\t\t35392: 39745,\r\n\t\t35393: 26214,\r\n\t\t35394: 26800,\r\n\t\t35395: 28023,\r\n\t\t35396: 28784,\r\n\t\t35397: 30028,\r\n\t\t35398: 30342,\r\n\t\t35399: 32117,\r\n\t\t35400: 33445,\r\n\t\t35401: 34809,\r\n\t\t35402: 38283,\r\n\t\t35403: 38542,\r\n\t\t35404: 35997,\r\n\t\t35405: 20977,\r\n\t\t35406: 21182,\r\n\t\t35407: 22806,\r\n\t\t35408: 21683,\r\n\t\t35409: 23475,\r\n\t\t35410: 23830,\r\n\t\t35411: 24936,\r\n\t\t35412: 27010,\r\n\t\t35413: 28079,\r\n\t\t35414: 30861,\r\n\t\t35415: 33995,\r\n\t\t35416: 34903,\r\n\t\t35417: 35442,\r\n\t\t35418: 37799,\r\n\t\t35419: 39608,\r\n\t\t35420: 28012,\r\n\t\t35421: 39336,\r\n\t\t35422: 34521,\r\n\t\t35423: 22435,\r\n\t\t35424: 26623,\r\n\t\t35425: 34510,\r\n\t\t35426: 37390,\r\n\t\t35427: 21123,\r\n\t\t35428: 22151,\r\n\t\t35429: 21508,\r\n\t\t35430: 24275,\r\n\t\t35431: 25313,\r\n\t\t35432: 25785,\r\n\t\t35433: 26684,\r\n\t\t35434: 26680,\r\n\t\t35435: 27579,\r\n\t\t35436: 29554,\r\n\t\t35437: 30906,\r\n\t\t35438: 31339,\r\n\t\t35439: 35226,\r\n\t\t35440: 35282,\r\n\t\t35441: 36203,\r\n\t\t35442: 36611,\r\n\t\t35443: 37101,\r\n\t\t35444: 38307,\r\n\t\t35445: 38548,\r\n\t\t35446: 38761,\r\n\t\t35447: 23398,\r\n\t\t35448: 23731,\r\n\t\t35449: 27005,\r\n\t\t35450: 38989,\r\n\t\t35451: 38990,\r\n\t\t35452: 25499,\r\n\t\t35453: 31520,\r\n\t\t35454: 27179,\r\n\t\t35456: 27263,\r\n\t\t35457: 26806,\r\n\t\t35458: 39949,\r\n\t\t35459: 28511,\r\n\t\t35460: 21106,\r\n\t\t35461: 21917,\r\n\t\t35462: 24688,\r\n\t\t35463: 25324,\r\n\t\t35464: 27963,\r\n\t\t35465: 28167,\r\n\t\t35466: 28369,\r\n\t\t35467: 33883,\r\n\t\t35468: 35088,\r\n\t\t35469: 36676,\r\n\t\t35470: 19988,\r\n\t\t35471: 39993,\r\n\t\t35472: 21494,\r\n\t\t35473: 26907,\r\n\t\t35474: 27194,\r\n\t\t35475: 38788,\r\n\t\t35476: 26666,\r\n\t\t35477: 20828,\r\n\t\t35478: 31427,\r\n\t\t35479: 33970,\r\n\t\t35480: 37340,\r\n\t\t35481: 37772,\r\n\t\t35482: 22107,\r\n\t\t35483: 40232,\r\n\t\t35484: 26658,\r\n\t\t35485: 33541,\r\n\t\t35486: 33841,\r\n\t\t35487: 31909,\r\n\t\t35488: 21000,\r\n\t\t35489: 33477,\r\n\t\t35490: 29926,\r\n\t\t35491: 20094,\r\n\t\t35492: 20355,\r\n\t\t35493: 20896,\r\n\t\t35494: 23506,\r\n\t\t35495: 21002,\r\n\t\t35496: 21208,\r\n\t\t35497: 21223,\r\n\t\t35498: 24059,\r\n\t\t35499: 21914,\r\n\t\t35500: 22570,\r\n\t\t35501: 23014,\r\n\t\t35502: 23436,\r\n\t\t35503: 23448,\r\n\t\t35504: 23515,\r\n\t\t35505: 24178,\r\n\t\t35506: 24185,\r\n\t\t35507: 24739,\r\n\t\t35508: 24863,\r\n\t\t35509: 24931,\r\n\t\t35510: 25022,\r\n\t\t35511: 25563,\r\n\t\t35512: 25954,\r\n\t\t35513: 26577,\r\n\t\t35514: 26707,\r\n\t\t35515: 26874,\r\n\t\t35516: 27454,\r\n\t\t35517: 27475,\r\n\t\t35518: 27735,\r\n\t\t35519: 28450,\r\n\t\t35520: 28567,\r\n\t\t35521: 28485,\r\n\t\t35522: 29872,\r\n\t\t35523: 29976,\r\n\t\t35524: 30435,\r\n\t\t35525: 30475,\r\n\t\t35526: 31487,\r\n\t\t35527: 31649,\r\n\t\t35528: 31777,\r\n\t\t35529: 32233,\r\n\t\t35530: 32566,\r\n\t\t35531: 32752,\r\n\t\t35532: 32925,\r\n\t\t35533: 33382,\r\n\t\t35534: 33694,\r\n\t\t35535: 35251,\r\n\t\t35536: 35532,\r\n\t\t35537: 36011,\r\n\t\t35538: 36996,\r\n\t\t35539: 37969,\r\n\t\t35540: 38291,\r\n\t\t35541: 38289,\r\n\t\t35542: 38306,\r\n\t\t35543: 38501,\r\n\t\t35544: 38867,\r\n\t\t35545: 39208,\r\n\t\t35546: 33304,\r\n\t\t35547: 20024,\r\n\t\t35548: 21547,\r\n\t\t35549: 23736,\r\n\t\t35550: 24012,\r\n\t\t35551: 29609,\r\n\t\t35552: 30284,\r\n\t\t35553: 30524,\r\n\t\t35554: 23721,\r\n\t\t35555: 32747,\r\n\t\t35556: 36107,\r\n\t\t35557: 38593,\r\n\t\t35558: 38929,\r\n\t\t35559: 38996,\r\n\t\t35560: 39000,\r\n\t\t35561: 20225,\r\n\t\t35562: 20238,\r\n\t\t35563: 21361,\r\n\t\t35564: 21916,\r\n\t\t35565: 22120,\r\n\t\t35566: 22522,\r\n\t\t35567: 22855,\r\n\t\t35568: 23305,\r\n\t\t35569: 23492,\r\n\t\t35570: 23696,\r\n\t\t35571: 24076,\r\n\t\t35572: 24190,\r\n\t\t35573: 24524,\r\n\t\t35574: 25582,\r\n\t\t35575: 26426,\r\n\t\t35576: 26071,\r\n\t\t35577: 26082,\r\n\t\t35578: 26399,\r\n\t\t35579: 26827,\r\n\t\t35580: 26820,\r\n\t\t35648: 27231,\r\n\t\t35649: 24112,\r\n\t\t35650: 27589,\r\n\t\t35651: 27671,\r\n\t\t35652: 27773,\r\n\t\t35653: 30079,\r\n\t\t35654: 31048,\r\n\t\t35655: 23395,\r\n\t\t35656: 31232,\r\n\t\t35657: 32000,\r\n\t\t35658: 24509,\r\n\t\t35659: 35215,\r\n\t\t35660: 35352,\r\n\t\t35661: 36020,\r\n\t\t35662: 36215,\r\n\t\t35663: 36556,\r\n\t\t35664: 36637,\r\n\t\t35665: 39138,\r\n\t\t35666: 39438,\r\n\t\t35667: 39740,\r\n\t\t35668: 20096,\r\n\t\t35669: 20605,\r\n\t\t35670: 20736,\r\n\t\t35671: 22931,\r\n\t\t35672: 23452,\r\n\t\t35673: 25135,\r\n\t\t35674: 25216,\r\n\t\t35675: 25836,\r\n\t\t35676: 27450,\r\n\t\t35677: 29344,\r\n\t\t35678: 30097,\r\n\t\t35679: 31047,\r\n\t\t35680: 32681,\r\n\t\t35681: 34811,\r\n\t\t35682: 35516,\r\n\t\t35683: 35696,\r\n\t\t35684: 25516,\r\n\t\t35685: 33738,\r\n\t\t35686: 38816,\r\n\t\t35687: 21513,\r\n\t\t35688: 21507,\r\n\t\t35689: 21931,\r\n\t\t35690: 26708,\r\n\t\t35691: 27224,\r\n\t\t35692: 35440,\r\n\t\t35693: 30759,\r\n\t\t35694: 26485,\r\n\t\t35695: 40653,\r\n\t\t35696: 21364,\r\n\t\t35697: 23458,\r\n\t\t35698: 33050,\r\n\t\t35699: 34384,\r\n\t\t35700: 36870,\r\n\t\t35701: 19992,\r\n\t\t35702: 20037,\r\n\t\t35703: 20167,\r\n\t\t35704: 20241,\r\n\t\t35705: 21450,\r\n\t\t35706: 21560,\r\n\t\t35707: 23470,\r\n\t\t35708: 24339,\r\n\t\t35709: 24613,\r\n\t\t35710: 25937,\r\n\t\t35712: 26429,\r\n\t\t35713: 27714,\r\n\t\t35714: 27762,\r\n\t\t35715: 27875,\r\n\t\t35716: 28792,\r\n\t\t35717: 29699,\r\n\t\t35718: 31350,\r\n\t\t35719: 31406,\r\n\t\t35720: 31496,\r\n\t\t35721: 32026,\r\n\t\t35722: 31998,\r\n\t\t35723: 32102,\r\n\t\t35724: 26087,\r\n\t\t35725: 29275,\r\n\t\t35726: 21435,\r\n\t\t35727: 23621,\r\n\t\t35728: 24040,\r\n\t\t35729: 25298,\r\n\t\t35730: 25312,\r\n\t\t35731: 25369,\r\n\t\t35732: 28192,\r\n\t\t35733: 34394,\r\n\t\t35734: 35377,\r\n\t\t35735: 36317,\r\n\t\t35736: 37624,\r\n\t\t35737: 28417,\r\n\t\t35738: 31142,\r\n\t\t35739: 39770,\r\n\t\t35740: 20136,\r\n\t\t35741: 20139,\r\n\t\t35742: 20140,\r\n\t\t35743: 20379,\r\n\t\t35744: 20384,\r\n\t\t35745: 20689,\r\n\t\t35746: 20807,\r\n\t\t35747: 31478,\r\n\t\t35748: 20849,\r\n\t\t35749: 20982,\r\n\t\t35750: 21332,\r\n\t\t35751: 21281,\r\n\t\t35752: 21375,\r\n\t\t35753: 21483,\r\n\t\t35754: 21932,\r\n\t\t35755: 22659,\r\n\t\t35756: 23777,\r\n\t\t35757: 24375,\r\n\t\t35758: 24394,\r\n\t\t35759: 24623,\r\n\t\t35760: 24656,\r\n\t\t35761: 24685,\r\n\t\t35762: 25375,\r\n\t\t35763: 25945,\r\n\t\t35764: 27211,\r\n\t\t35765: 27841,\r\n\t\t35766: 29378,\r\n\t\t35767: 29421,\r\n\t\t35768: 30703,\r\n\t\t35769: 33016,\r\n\t\t35770: 33029,\r\n\t\t35771: 33288,\r\n\t\t35772: 34126,\r\n\t\t35773: 37111,\r\n\t\t35774: 37857,\r\n\t\t35775: 38911,\r\n\t\t35776: 39255,\r\n\t\t35777: 39514,\r\n\t\t35778: 20208,\r\n\t\t35779: 20957,\r\n\t\t35780: 23597,\r\n\t\t35781: 26241,\r\n\t\t35782: 26989,\r\n\t\t35783: 23616,\r\n\t\t35784: 26354,\r\n\t\t35785: 26997,\r\n\t\t35786: 29577,\r\n\t\t35787: 26704,\r\n\t\t35788: 31873,\r\n\t\t35789: 20677,\r\n\t\t35790: 21220,\r\n\t\t35791: 22343,\r\n\t\t35792: 24062,\r\n\t\t35793: 37670,\r\n\t\t35794: 26020,\r\n\t\t35795: 27427,\r\n\t\t35796: 27453,\r\n\t\t35797: 29748,\r\n\t\t35798: 31105,\r\n\t\t35799: 31165,\r\n\t\t35800: 31563,\r\n\t\t35801: 32202,\r\n\t\t35802: 33465,\r\n\t\t35803: 33740,\r\n\t\t35804: 34943,\r\n\t\t35805: 35167,\r\n\t\t35806: 35641,\r\n\t\t35807: 36817,\r\n\t\t35808: 37329,\r\n\t\t35809: 21535,\r\n\t\t35810: 37504,\r\n\t\t35811: 20061,\r\n\t\t35812: 20534,\r\n\t\t35813: 21477,\r\n\t\t35814: 21306,\r\n\t\t35815: 29399,\r\n\t\t35816: 29590,\r\n\t\t35817: 30697,\r\n\t\t35818: 33510,\r\n\t\t35819: 36527,\r\n\t\t35820: 39366,\r\n\t\t35821: 39368,\r\n\t\t35822: 39378,\r\n\t\t35823: 20855,\r\n\t\t35824: 24858,\r\n\t\t35825: 34398,\r\n\t\t35826: 21936,\r\n\t\t35827: 31354,\r\n\t\t35828: 20598,\r\n\t\t35829: 23507,\r\n\t\t35830: 36935,\r\n\t\t35831: 38533,\r\n\t\t35832: 20018,\r\n\t\t35833: 27355,\r\n\t\t35834: 37351,\r\n\t\t35835: 23633,\r\n\t\t35836: 23624,\r\n\t\t35904: 25496,\r\n\t\t35905: 31391,\r\n\t\t35906: 27795,\r\n\t\t35907: 38772,\r\n\t\t35908: 36705,\r\n\t\t35909: 31402,\r\n\t\t35910: 29066,\r\n\t\t35911: 38536,\r\n\t\t35912: 31874,\r\n\t\t35913: 26647,\r\n\t\t35914: 32368,\r\n\t\t35915: 26705,\r\n\t\t35916: 37740,\r\n\t\t35917: 21234,\r\n\t\t35918: 21531,\r\n\t\t35919: 34219,\r\n\t\t35920: 35347,\r\n\t\t35921: 32676,\r\n\t\t35922: 36557,\r\n\t\t35923: 37089,\r\n\t\t35924: 21350,\r\n\t\t35925: 34952,\r\n\t\t35926: 31041,\r\n\t\t35927: 20418,\r\n\t\t35928: 20670,\r\n\t\t35929: 21009,\r\n\t\t35930: 20804,\r\n\t\t35931: 21843,\r\n\t\t35932: 22317,\r\n\t\t35933: 29674,\r\n\t\t35934: 22411,\r\n\t\t35935: 22865,\r\n\t\t35936: 24418,\r\n\t\t35937: 24452,\r\n\t\t35938: 24693,\r\n\t\t35939: 24950,\r\n\t\t35940: 24935,\r\n\t\t35941: 25001,\r\n\t\t35942: 25522,\r\n\t\t35943: 25658,\r\n\t\t35944: 25964,\r\n\t\t35945: 26223,\r\n\t\t35946: 26690,\r\n\t\t35947: 28179,\r\n\t\t35948: 30054,\r\n\t\t35949: 31293,\r\n\t\t35950: 31995,\r\n\t\t35951: 32076,\r\n\t\t35952: 32153,\r\n\t\t35953: 32331,\r\n\t\t35954: 32619,\r\n\t\t35955: 33550,\r\n\t\t35956: 33610,\r\n\t\t35957: 34509,\r\n\t\t35958: 35336,\r\n\t\t35959: 35427,\r\n\t\t35960: 35686,\r\n\t\t35961: 36605,\r\n\t\t35962: 38938,\r\n\t\t35963: 40335,\r\n\t\t35964: 33464,\r\n\t\t35965: 36814,\r\n\t\t35966: 39912,\r\n\t\t35968: 21127,\r\n\t\t35969: 25119,\r\n\t\t35970: 25731,\r\n\t\t35971: 28608,\r\n\t\t35972: 38553,\r\n\t\t35973: 26689,\r\n\t\t35974: 20625,\r\n\t\t35975: 27424,\r\n\t\t35976: 27770,\r\n\t\t35977: 28500,\r\n\t\t35978: 31348,\r\n\t\t35979: 32080,\r\n\t\t35980: 34880,\r\n\t\t35981: 35363,\r\n\t\t35982: 26376,\r\n\t\t35983: 20214,\r\n\t\t35984: 20537,\r\n\t\t35985: 20518,\r\n\t\t35986: 20581,\r\n\t\t35987: 20860,\r\n\t\t35988: 21048,\r\n\t\t35989: 21091,\r\n\t\t35990: 21927,\r\n\t\t35991: 22287,\r\n\t\t35992: 22533,\r\n\t\t35993: 23244,\r\n\t\t35994: 24314,\r\n\t\t35995: 25010,\r\n\t\t35996: 25080,\r\n\t\t35997: 25331,\r\n\t\t35998: 25458,\r\n\t\t35999: 26908,\r\n\t\t36000: 27177,\r\n\t\t36001: 29309,\r\n\t\t36002: 29356,\r\n\t\t36003: 29486,\r\n\t\t36004: 30740,\r\n\t\t36005: 30831,\r\n\t\t36006: 32121,\r\n\t\t36007: 30476,\r\n\t\t36008: 32937,\r\n\t\t36009: 35211,\r\n\t\t36010: 35609,\r\n\t\t36011: 36066,\r\n\t\t36012: 36562,\r\n\t\t36013: 36963,\r\n\t\t36014: 37749,\r\n\t\t36015: 38522,\r\n\t\t36016: 38997,\r\n\t\t36017: 39443,\r\n\t\t36018: 40568,\r\n\t\t36019: 20803,\r\n\t\t36020: 21407,\r\n\t\t36021: 21427,\r\n\t\t36022: 24187,\r\n\t\t36023: 24358,\r\n\t\t36024: 28187,\r\n\t\t36025: 28304,\r\n\t\t36026: 29572,\r\n\t\t36027: 29694,\r\n\t\t36028: 32067,\r\n\t\t36029: 33335,\r\n\t\t36030: 35328,\r\n\t\t36031: 35578,\r\n\t\t36032: 38480,\r\n\t\t36033: 20046,\r\n\t\t36034: 20491,\r\n\t\t36035: 21476,\r\n\t\t36036: 21628,\r\n\t\t36037: 22266,\r\n\t\t36038: 22993,\r\n\t\t36039: 23396,\r\n\t\t36040: 24049,\r\n\t\t36041: 24235,\r\n\t\t36042: 24359,\r\n\t\t36043: 25144,\r\n\t\t36044: 25925,\r\n\t\t36045: 26543,\r\n\t\t36046: 28246,\r\n\t\t36047: 29392,\r\n\t\t36048: 31946,\r\n\t\t36049: 34996,\r\n\t\t36050: 32929,\r\n\t\t36051: 32993,\r\n\t\t36052: 33776,\r\n\t\t36053: 34382,\r\n\t\t36054: 35463,\r\n\t\t36055: 36328,\r\n\t\t36056: 37431,\r\n\t\t36057: 38599,\r\n\t\t36058: 39015,\r\n\t\t36059: 40723,\r\n\t\t36060: 20116,\r\n\t\t36061: 20114,\r\n\t\t36062: 20237,\r\n\t\t36063: 21320,\r\n\t\t36064: 21577,\r\n\t\t36065: 21566,\r\n\t\t36066: 23087,\r\n\t\t36067: 24460,\r\n\t\t36068: 24481,\r\n\t\t36069: 24735,\r\n\t\t36070: 26791,\r\n\t\t36071: 27278,\r\n\t\t36072: 29786,\r\n\t\t36073: 30849,\r\n\t\t36074: 35486,\r\n\t\t36075: 35492,\r\n\t\t36076: 35703,\r\n\t\t36077: 37264,\r\n\t\t36078: 20062,\r\n\t\t36079: 39881,\r\n\t\t36080: 20132,\r\n\t\t36081: 20348,\r\n\t\t36082: 20399,\r\n\t\t36083: 20505,\r\n\t\t36084: 20502,\r\n\t\t36085: 20809,\r\n\t\t36086: 20844,\r\n\t\t36087: 21151,\r\n\t\t36088: 21177,\r\n\t\t36089: 21246,\r\n\t\t36090: 21402,\r\n\t\t36091: 21475,\r\n\t\t36092: 21521,\r\n\t\t36160: 21518,\r\n\t\t36161: 21897,\r\n\t\t36162: 22353,\r\n\t\t36163: 22434,\r\n\t\t36164: 22909,\r\n\t\t36165: 23380,\r\n\t\t36166: 23389,\r\n\t\t36167: 23439,\r\n\t\t36168: 24037,\r\n\t\t36169: 24039,\r\n\t\t36170: 24055,\r\n\t\t36171: 24184,\r\n\t\t36172: 24195,\r\n\t\t36173: 24218,\r\n\t\t36174: 24247,\r\n\t\t36175: 24344,\r\n\t\t36176: 24658,\r\n\t\t36177: 24908,\r\n\t\t36178: 25239,\r\n\t\t36179: 25304,\r\n\t\t36180: 25511,\r\n\t\t36181: 25915,\r\n\t\t36182: 26114,\r\n\t\t36183: 26179,\r\n\t\t36184: 26356,\r\n\t\t36185: 26477,\r\n\t\t36186: 26657,\r\n\t\t36187: 26775,\r\n\t\t36188: 27083,\r\n\t\t36189: 27743,\r\n\t\t36190: 27946,\r\n\t\t36191: 28009,\r\n\t\t36192: 28207,\r\n\t\t36193: 28317,\r\n\t\t36194: 30002,\r\n\t\t36195: 30343,\r\n\t\t36196: 30828,\r\n\t\t36197: 31295,\r\n\t\t36198: 31968,\r\n\t\t36199: 32005,\r\n\t\t36200: 32024,\r\n\t\t36201: 32094,\r\n\t\t36202: 32177,\r\n\t\t36203: 32789,\r\n\t\t36204: 32771,\r\n\t\t36205: 32943,\r\n\t\t36206: 32945,\r\n\t\t36207: 33108,\r\n\t\t36208: 33167,\r\n\t\t36209: 33322,\r\n\t\t36210: 33618,\r\n\t\t36211: 34892,\r\n\t\t36212: 34913,\r\n\t\t36213: 35611,\r\n\t\t36214: 36002,\r\n\t\t36215: 36092,\r\n\t\t36216: 37066,\r\n\t\t36217: 37237,\r\n\t\t36218: 37489,\r\n\t\t36219: 30783,\r\n\t\t36220: 37628,\r\n\t\t36221: 38308,\r\n\t\t36222: 38477,\r\n\t\t36224: 38917,\r\n\t\t36225: 39321,\r\n\t\t36226: 39640,\r\n\t\t36227: 40251,\r\n\t\t36228: 21083,\r\n\t\t36229: 21163,\r\n\t\t36230: 21495,\r\n\t\t36231: 21512,\r\n\t\t36232: 22741,\r\n\t\t36233: 25335,\r\n\t\t36234: 28640,\r\n\t\t36235: 35946,\r\n\t\t36236: 36703,\r\n\t\t36237: 40633,\r\n\t\t36238: 20811,\r\n\t\t36239: 21051,\r\n\t\t36240: 21578,\r\n\t\t36241: 22269,\r\n\t\t36242: 31296,\r\n\t\t36243: 37239,\r\n\t\t36244: 40288,\r\n\t\t36245: 40658,\r\n\t\t36246: 29508,\r\n\t\t36247: 28425,\r\n\t\t36248: 33136,\r\n\t\t36249: 29969,\r\n\t\t36250: 24573,\r\n\t\t36251: 24794,\r\n\t\t36252: 39592,\r\n\t\t36253: 29403,\r\n\t\t36254: 36796,\r\n\t\t36255: 27492,\r\n\t\t36256: 38915,\r\n\t\t36257: 20170,\r\n\t\t36258: 22256,\r\n\t\t36259: 22372,\r\n\t\t36260: 22718,\r\n\t\t36261: 23130,\r\n\t\t36262: 24680,\r\n\t\t36263: 25031,\r\n\t\t36264: 26127,\r\n\t\t36265: 26118,\r\n\t\t36266: 26681,\r\n\t\t36267: 26801,\r\n\t\t36268: 28151,\r\n\t\t36269: 30165,\r\n\t\t36270: 32058,\r\n\t\t36271: 33390,\r\n\t\t36272: 39746,\r\n\t\t36273: 20123,\r\n\t\t36274: 20304,\r\n\t\t36275: 21449,\r\n\t\t36276: 21766,\r\n\t\t36277: 23919,\r\n\t\t36278: 24038,\r\n\t\t36279: 24046,\r\n\t\t36280: 26619,\r\n\t\t36281: 27801,\r\n\t\t36282: 29811,\r\n\t\t36283: 30722,\r\n\t\t36284: 35408,\r\n\t\t36285: 37782,\r\n\t\t36286: 35039,\r\n\t\t36287: 22352,\r\n\t\t36288: 24231,\r\n\t\t36289: 25387,\r\n\t\t36290: 20661,\r\n\t\t36291: 20652,\r\n\t\t36292: 20877,\r\n\t\t36293: 26368,\r\n\t\t36294: 21705,\r\n\t\t36295: 22622,\r\n\t\t36296: 22971,\r\n\t\t36297: 23472,\r\n\t\t36298: 24425,\r\n\t\t36299: 25165,\r\n\t\t36300: 25505,\r\n\t\t36301: 26685,\r\n\t\t36302: 27507,\r\n\t\t36303: 28168,\r\n\t\t36304: 28797,\r\n\t\t36305: 37319,\r\n\t\t36306: 29312,\r\n\t\t36307: 30741,\r\n\t\t36308: 30758,\r\n\t\t36309: 31085,\r\n\t\t36310: 25998,\r\n\t\t36311: 32048,\r\n\t\t36312: 33756,\r\n\t\t36313: 35009,\r\n\t\t36314: 36617,\r\n\t\t36315: 38555,\r\n\t\t36316: 21092,\r\n\t\t36317: 22312,\r\n\t\t36318: 26448,\r\n\t\t36319: 32618,\r\n\t\t36320: 36001,\r\n\t\t36321: 20916,\r\n\t\t36322: 22338,\r\n\t\t36323: 38442,\r\n\t\t36324: 22586,\r\n\t\t36325: 27018,\r\n\t\t36326: 32948,\r\n\t\t36327: 21682,\r\n\t\t36328: 23822,\r\n\t\t36329: 22524,\r\n\t\t36330: 30869,\r\n\t\t36331: 40442,\r\n\t\t36332: 20316,\r\n\t\t36333: 21066,\r\n\t\t36334: 21643,\r\n\t\t36335: 25662,\r\n\t\t36336: 26152,\r\n\t\t36337: 26388,\r\n\t\t36338: 26613,\r\n\t\t36339: 31364,\r\n\t\t36340: 31574,\r\n\t\t36341: 32034,\r\n\t\t36342: 37679,\r\n\t\t36343: 26716,\r\n\t\t36344: 39853,\r\n\t\t36345: 31545,\r\n\t\t36346: 21273,\r\n\t\t36347: 20874,\r\n\t\t36348: 21047,\r\n\t\t36416: 23519,\r\n\t\t36417: 25334,\r\n\t\t36418: 25774,\r\n\t\t36419: 25830,\r\n\t\t36420: 26413,\r\n\t\t36421: 27578,\r\n\t\t36422: 34217,\r\n\t\t36423: 38609,\r\n\t\t36424: 30352,\r\n\t\t36425: 39894,\r\n\t\t36426: 25420,\r\n\t\t36427: 37638,\r\n\t\t36428: 39851,\r\n\t\t36429: 30399,\r\n\t\t36430: 26194,\r\n\t\t36431: 19977,\r\n\t\t36432: 20632,\r\n\t\t36433: 21442,\r\n\t\t36434: 23665,\r\n\t\t36435: 24808,\r\n\t\t36436: 25746,\r\n\t\t36437: 25955,\r\n\t\t36438: 26719,\r\n\t\t36439: 29158,\r\n\t\t36440: 29642,\r\n\t\t36441: 29987,\r\n\t\t36442: 31639,\r\n\t\t36443: 32386,\r\n\t\t36444: 34453,\r\n\t\t36445: 35715,\r\n\t\t36446: 36059,\r\n\t\t36447: 37240,\r\n\t\t36448: 39184,\r\n\t\t36449: 26028,\r\n\t\t36450: 26283,\r\n\t\t36451: 27531,\r\n\t\t36452: 20181,\r\n\t\t36453: 20180,\r\n\t\t36454: 20282,\r\n\t\t36455: 20351,\r\n\t\t36456: 21050,\r\n\t\t36457: 21496,\r\n\t\t36458: 21490,\r\n\t\t36459: 21987,\r\n\t\t36460: 22235,\r\n\t\t36461: 22763,\r\n\t\t36462: 22987,\r\n\t\t36463: 22985,\r\n\t\t36464: 23039,\r\n\t\t36465: 23376,\r\n\t\t36466: 23629,\r\n\t\t36467: 24066,\r\n\t\t36468: 24107,\r\n\t\t36469: 24535,\r\n\t\t36470: 24605,\r\n\t\t36471: 25351,\r\n\t\t36472: 25903,\r\n\t\t36473: 23388,\r\n\t\t36474: 26031,\r\n\t\t36475: 26045,\r\n\t\t36476: 26088,\r\n\t\t36477: 26525,\r\n\t\t36478: 27490,\r\n\t\t36480: 27515,\r\n\t\t36481: 27663,\r\n\t\t36482: 29509,\r\n\t\t36483: 31049,\r\n\t\t36484: 31169,\r\n\t\t36485: 31992,\r\n\t\t36486: 32025,\r\n\t\t36487: 32043,\r\n\t\t36488: 32930,\r\n\t\t36489: 33026,\r\n\t\t36490: 33267,\r\n\t\t36491: 35222,\r\n\t\t36492: 35422,\r\n\t\t36493: 35433,\r\n\t\t36494: 35430,\r\n\t\t36495: 35468,\r\n\t\t36496: 35566,\r\n\t\t36497: 36039,\r\n\t\t36498: 36060,\r\n\t\t36499: 38604,\r\n\t\t36500: 39164,\r\n\t\t36501: 27503,\r\n\t\t36502: 20107,\r\n\t\t36503: 20284,\r\n\t\t36504: 20365,\r\n\t\t36505: 20816,\r\n\t\t36506: 23383,\r\n\t\t36507: 23546,\r\n\t\t36508: 24904,\r\n\t\t36509: 25345,\r\n\t\t36510: 26178,\r\n\t\t36511: 27425,\r\n\t\t36512: 28363,\r\n\t\t36513: 27835,\r\n\t\t36514: 29246,\r\n\t\t36515: 29885,\r\n\t\t36516: 30164,\r\n\t\t36517: 30913,\r\n\t\t36518: 31034,\r\n\t\t36519: 32780,\r\n\t\t36520: 32819,\r\n\t\t36521: 33258,\r\n\t\t36522: 33940,\r\n\t\t36523: 36766,\r\n\t\t36524: 27728,\r\n\t\t36525: 40575,\r\n\t\t36526: 24335,\r\n\t\t36527: 35672,\r\n\t\t36528: 40235,\r\n\t\t36529: 31482,\r\n\t\t36530: 36600,\r\n\t\t36531: 23437,\r\n\t\t36532: 38635,\r\n\t\t36533: 19971,\r\n\t\t36534: 21489,\r\n\t\t36535: 22519,\r\n\t\t36536: 22833,\r\n\t\t36537: 23241,\r\n\t\t36538: 23460,\r\n\t\t36539: 24713,\r\n\t\t36540: 28287,\r\n\t\t36541: 28422,\r\n\t\t36542: 30142,\r\n\t\t36543: 36074,\r\n\t\t36544: 23455,\r\n\t\t36545: 34048,\r\n\t\t36546: 31712,\r\n\t\t36547: 20594,\r\n\t\t36548: 26612,\r\n\t\t36549: 33437,\r\n\t\t36550: 23649,\r\n\t\t36551: 34122,\r\n\t\t36552: 32286,\r\n\t\t36553: 33294,\r\n\t\t36554: 20889,\r\n\t\t36555: 23556,\r\n\t\t36556: 25448,\r\n\t\t36557: 36198,\r\n\t\t36558: 26012,\r\n\t\t36559: 29038,\r\n\t\t36560: 31038,\r\n\t\t36561: 32023,\r\n\t\t36562: 32773,\r\n\t\t36563: 35613,\r\n\t\t36564: 36554,\r\n\t\t36565: 36974,\r\n\t\t36566: 34503,\r\n\t\t36567: 37034,\r\n\t\t36568: 20511,\r\n\t\t36569: 21242,\r\n\t\t36570: 23610,\r\n\t\t36571: 26451,\r\n\t\t36572: 28796,\r\n\t\t36573: 29237,\r\n\t\t36574: 37196,\r\n\t\t36575: 37320,\r\n\t\t36576: 37675,\r\n\t\t36577: 33509,\r\n\t\t36578: 23490,\r\n\t\t36579: 24369,\r\n\t\t36580: 24825,\r\n\t\t36581: 20027,\r\n\t\t36582: 21462,\r\n\t\t36583: 23432,\r\n\t\t36584: 25163,\r\n\t\t36585: 26417,\r\n\t\t36586: 27530,\r\n\t\t36587: 29417,\r\n\t\t36588: 29664,\r\n\t\t36589: 31278,\r\n\t\t36590: 33131,\r\n\t\t36591: 36259,\r\n\t\t36592: 37202,\r\n\t\t36593: 39318,\r\n\t\t36594: 20754,\r\n\t\t36595: 21463,\r\n\t\t36596: 21610,\r\n\t\t36597: 23551,\r\n\t\t36598: 25480,\r\n\t\t36599: 27193,\r\n\t\t36600: 32172,\r\n\t\t36601: 38656,\r\n\t\t36602: 22234,\r\n\t\t36603: 21454,\r\n\t\t36604: 21608,\r\n\t\t36672: 23447,\r\n\t\t36673: 23601,\r\n\t\t36674: 24030,\r\n\t\t36675: 20462,\r\n\t\t36676: 24833,\r\n\t\t36677: 25342,\r\n\t\t36678: 27954,\r\n\t\t36679: 31168,\r\n\t\t36680: 31179,\r\n\t\t36681: 32066,\r\n\t\t36682: 32333,\r\n\t\t36683: 32722,\r\n\t\t36684: 33261,\r\n\t\t36685: 33311,\r\n\t\t36686: 33936,\r\n\t\t36687: 34886,\r\n\t\t36688: 35186,\r\n\t\t36689: 35728,\r\n\t\t36690: 36468,\r\n\t\t36691: 36655,\r\n\t\t36692: 36913,\r\n\t\t36693: 37195,\r\n\t\t36694: 37228,\r\n\t\t36695: 38598,\r\n\t\t36696: 37276,\r\n\t\t36697: 20160,\r\n\t\t36698: 20303,\r\n\t\t36699: 20805,\r\n\t\t36700: 21313,\r\n\t\t36701: 24467,\r\n\t\t36702: 25102,\r\n\t\t36703: 26580,\r\n\t\t36704: 27713,\r\n\t\t36705: 28171,\r\n\t\t36706: 29539,\r\n\t\t36707: 32294,\r\n\t\t36708: 37325,\r\n\t\t36709: 37507,\r\n\t\t36710: 21460,\r\n\t\t36711: 22809,\r\n\t\t36712: 23487,\r\n\t\t36713: 28113,\r\n\t\t36714: 31069,\r\n\t\t36715: 32302,\r\n\t\t36716: 31899,\r\n\t\t36717: 22654,\r\n\t\t36718: 29087,\r\n\t\t36719: 20986,\r\n\t\t36720: 34899,\r\n\t\t36721: 36848,\r\n\t\t36722: 20426,\r\n\t\t36723: 23803,\r\n\t\t36724: 26149,\r\n\t\t36725: 30636,\r\n\t\t36726: 31459,\r\n\t\t36727: 33308,\r\n\t\t36728: 39423,\r\n\t\t36729: 20934,\r\n\t\t36730: 24490,\r\n\t\t36731: 26092,\r\n\t\t36732: 26991,\r\n\t\t36733: 27529,\r\n\t\t36734: 28147,\r\n\t\t36736: 28310,\r\n\t\t36737: 28516,\r\n\t\t36738: 30462,\r\n\t\t36739: 32020,\r\n\t\t36740: 24033,\r\n\t\t36741: 36981,\r\n\t\t36742: 37255,\r\n\t\t36743: 38918,\r\n\t\t36744: 20966,\r\n\t\t36745: 21021,\r\n\t\t36746: 25152,\r\n\t\t36747: 26257,\r\n\t\t36748: 26329,\r\n\t\t36749: 28186,\r\n\t\t36750: 24246,\r\n\t\t36751: 32210,\r\n\t\t36752: 32626,\r\n\t\t36753: 26360,\r\n\t\t36754: 34223,\r\n\t\t36755: 34295,\r\n\t\t36756: 35576,\r\n\t\t36757: 21161,\r\n\t\t36758: 21465,\r\n\t\t36759: 22899,\r\n\t\t36760: 24207,\r\n\t\t36761: 24464,\r\n\t\t36762: 24661,\r\n\t\t36763: 37604,\r\n\t\t36764: 38500,\r\n\t\t36765: 20663,\r\n\t\t36766: 20767,\r\n\t\t36767: 21213,\r\n\t\t36768: 21280,\r\n\t\t36769: 21319,\r\n\t\t36770: 21484,\r\n\t\t36771: 21736,\r\n\t\t36772: 21830,\r\n\t\t36773: 21809,\r\n\t\t36774: 22039,\r\n\t\t36775: 22888,\r\n\t\t36776: 22974,\r\n\t\t36777: 23100,\r\n\t\t36778: 23477,\r\n\t\t36779: 23558,\r\n\t\t36780: 23567,\r\n\t\t36781: 23569,\r\n\t\t36782: 23578,\r\n\t\t36783: 24196,\r\n\t\t36784: 24202,\r\n\t\t36785: 24288,\r\n\t\t36786: 24432,\r\n\t\t36787: 25215,\r\n\t\t36788: 25220,\r\n\t\t36789: 25307,\r\n\t\t36790: 25484,\r\n\t\t36791: 25463,\r\n\t\t36792: 26119,\r\n\t\t36793: 26124,\r\n\t\t36794: 26157,\r\n\t\t36795: 26230,\r\n\t\t36796: 26494,\r\n\t\t36797: 26786,\r\n\t\t36798: 27167,\r\n\t\t36799: 27189,\r\n\t\t36800: 27836,\r\n\t\t36801: 28040,\r\n\t\t36802: 28169,\r\n\t\t36803: 28248,\r\n\t\t36804: 28988,\r\n\t\t36805: 28966,\r\n\t\t36806: 29031,\r\n\t\t36807: 30151,\r\n\t\t36808: 30465,\r\n\t\t36809: 30813,\r\n\t\t36810: 30977,\r\n\t\t36811: 31077,\r\n\t\t36812: 31216,\r\n\t\t36813: 31456,\r\n\t\t36814: 31505,\r\n\t\t36815: 31911,\r\n\t\t36816: 32057,\r\n\t\t36817: 32918,\r\n\t\t36818: 33750,\r\n\t\t36819: 33931,\r\n\t\t36820: 34121,\r\n\t\t36821: 34909,\r\n\t\t36822: 35059,\r\n\t\t36823: 35359,\r\n\t\t36824: 35388,\r\n\t\t36825: 35412,\r\n\t\t36826: 35443,\r\n\t\t36827: 35937,\r\n\t\t36828: 36062,\r\n\t\t36829: 37284,\r\n\t\t36830: 37478,\r\n\t\t36831: 37758,\r\n\t\t36832: 37912,\r\n\t\t36833: 38556,\r\n\t\t36834: 38808,\r\n\t\t36835: 19978,\r\n\t\t36836: 19976,\r\n\t\t36837: 19998,\r\n\t\t36838: 20055,\r\n\t\t36839: 20887,\r\n\t\t36840: 21104,\r\n\t\t36841: 22478,\r\n\t\t36842: 22580,\r\n\t\t36843: 22732,\r\n\t\t36844: 23330,\r\n\t\t36845: 24120,\r\n\t\t36846: 24773,\r\n\t\t36847: 25854,\r\n\t\t36848: 26465,\r\n\t\t36849: 26454,\r\n\t\t36850: 27972,\r\n\t\t36851: 29366,\r\n\t\t36852: 30067,\r\n\t\t36853: 31331,\r\n\t\t36854: 33976,\r\n\t\t36855: 35698,\r\n\t\t36856: 37304,\r\n\t\t36857: 37664,\r\n\t\t36858: 22065,\r\n\t\t36859: 22516,\r\n\t\t36860: 39166,\r\n\t\t36928: 25325,\r\n\t\t36929: 26893,\r\n\t\t36930: 27542,\r\n\t\t36931: 29165,\r\n\t\t36932: 32340,\r\n\t\t36933: 32887,\r\n\t\t36934: 33394,\r\n\t\t36935: 35302,\r\n\t\t36936: 39135,\r\n\t\t36937: 34645,\r\n\t\t36938: 36785,\r\n\t\t36939: 23611,\r\n\t\t36940: 20280,\r\n\t\t36941: 20449,\r\n\t\t36942: 20405,\r\n\t\t36943: 21767,\r\n\t\t36944: 23072,\r\n\t\t36945: 23517,\r\n\t\t36946: 23529,\r\n\t\t36947: 24515,\r\n\t\t36948: 24910,\r\n\t\t36949: 25391,\r\n\t\t36950: 26032,\r\n\t\t36951: 26187,\r\n\t\t36952: 26862,\r\n\t\t36953: 27035,\r\n\t\t36954: 28024,\r\n\t\t36955: 28145,\r\n\t\t36956: 30003,\r\n\t\t36957: 30137,\r\n\t\t36958: 30495,\r\n\t\t36959: 31070,\r\n\t\t36960: 31206,\r\n\t\t36961: 32051,\r\n\t\t36962: 33251,\r\n\t\t36963: 33455,\r\n\t\t36964: 34218,\r\n\t\t36965: 35242,\r\n\t\t36966: 35386,\r\n\t\t36967: 36523,\r\n\t\t36968: 36763,\r\n\t\t36969: 36914,\r\n\t\t36970: 37341,\r\n\t\t36971: 38663,\r\n\t\t36972: 20154,\r\n\t\t36973: 20161,\r\n\t\t36974: 20995,\r\n\t\t36975: 22645,\r\n\t\t36976: 22764,\r\n\t\t36977: 23563,\r\n\t\t36978: 29978,\r\n\t\t36979: 23613,\r\n\t\t36980: 33102,\r\n\t\t36981: 35338,\r\n\t\t36982: 36805,\r\n\t\t36983: 38499,\r\n\t\t36984: 38765,\r\n\t\t36985: 31525,\r\n\t\t36986: 35535,\r\n\t\t36987: 38920,\r\n\t\t36988: 37218,\r\n\t\t36989: 22259,\r\n\t\t36990: 21416,\r\n\t\t36992: 36887,\r\n\t\t36993: 21561,\r\n\t\t36994: 22402,\r\n\t\t36995: 24101,\r\n\t\t36996: 25512,\r\n\t\t36997: 27700,\r\n\t\t36998: 28810,\r\n\t\t36999: 30561,\r\n\t\t37000: 31883,\r\n\t\t37001: 32736,\r\n\t\t37002: 34928,\r\n\t\t37003: 36930,\r\n\t\t37004: 37204,\r\n\t\t37005: 37648,\r\n\t\t37006: 37656,\r\n\t\t37007: 38543,\r\n\t\t37008: 29790,\r\n\t\t37009: 39620,\r\n\t\t37010: 23815,\r\n\t\t37011: 23913,\r\n\t\t37012: 25968,\r\n\t\t37013: 26530,\r\n\t\t37014: 36264,\r\n\t\t37015: 38619,\r\n\t\t37016: 25454,\r\n\t\t37017: 26441,\r\n\t\t37018: 26905,\r\n\t\t37019: 33733,\r\n\t\t37020: 38935,\r\n\t\t37021: 38592,\r\n\t\t37022: 35070,\r\n\t\t37023: 28548,\r\n\t\t37024: 25722,\r\n\t\t37025: 23544,\r\n\t\t37026: 19990,\r\n\t\t37027: 28716,\r\n\t\t37028: 30045,\r\n\t\t37029: 26159,\r\n\t\t37030: 20932,\r\n\t\t37031: 21046,\r\n\t\t37032: 21218,\r\n\t\t37033: 22995,\r\n\t\t37034: 24449,\r\n\t\t37035: 24615,\r\n\t\t37036: 25104,\r\n\t\t37037: 25919,\r\n\t\t37038: 25972,\r\n\t\t37039: 26143,\r\n\t\t37040: 26228,\r\n\t\t37041: 26866,\r\n\t\t37042: 26646,\r\n\t\t37043: 27491,\r\n\t\t37044: 28165,\r\n\t\t37045: 29298,\r\n\t\t37046: 29983,\r\n\t\t37047: 30427,\r\n\t\t37048: 31934,\r\n\t\t37049: 32854,\r\n\t\t37050: 22768,\r\n\t\t37051: 35069,\r\n\t\t37052: 35199,\r\n\t\t37053: 35488,\r\n\t\t37054: 35475,\r\n\t\t37055: 35531,\r\n\t\t37056: 36893,\r\n\t\t37057: 37266,\r\n\t\t37058: 38738,\r\n\t\t37059: 38745,\r\n\t\t37060: 25993,\r\n\t\t37061: 31246,\r\n\t\t37062: 33030,\r\n\t\t37063: 38587,\r\n\t\t37064: 24109,\r\n\t\t37065: 24796,\r\n\t\t37066: 25114,\r\n\t\t37067: 26021,\r\n\t\t37068: 26132,\r\n\t\t37069: 26512,\r\n\t\t37070: 30707,\r\n\t\t37071: 31309,\r\n\t\t37072: 31821,\r\n\t\t37073: 32318,\r\n\t\t37074: 33034,\r\n\t\t37075: 36012,\r\n\t\t37076: 36196,\r\n\t\t37077: 36321,\r\n\t\t37078: 36447,\r\n\t\t37079: 30889,\r\n\t\t37080: 20999,\r\n\t\t37081: 25305,\r\n\t\t37082: 25509,\r\n\t\t37083: 25666,\r\n\t\t37084: 25240,\r\n\t\t37085: 35373,\r\n\t\t37086: 31363,\r\n\t\t37087: 31680,\r\n\t\t37088: 35500,\r\n\t\t37089: 38634,\r\n\t\t37090: 32118,\r\n\t\t37091: 33292,\r\n\t\t37092: 34633,\r\n\t\t37093: 20185,\r\n\t\t37094: 20808,\r\n\t\t37095: 21315,\r\n\t\t37096: 21344,\r\n\t\t37097: 23459,\r\n\t\t37098: 23554,\r\n\t\t37099: 23574,\r\n\t\t37100: 24029,\r\n\t\t37101: 25126,\r\n\t\t37102: 25159,\r\n\t\t37103: 25776,\r\n\t\t37104: 26643,\r\n\t\t37105: 26676,\r\n\t\t37106: 27849,\r\n\t\t37107: 27973,\r\n\t\t37108: 27927,\r\n\t\t37109: 26579,\r\n\t\t37110: 28508,\r\n\t\t37111: 29006,\r\n\t\t37112: 29053,\r\n\t\t37113: 26059,\r\n\t\t37114: 31359,\r\n\t\t37115: 31661,\r\n\t\t37116: 32218,\r\n\t\t37184: 32330,\r\n\t\t37185: 32680,\r\n\t\t37186: 33146,\r\n\t\t37187: 33307,\r\n\t\t37188: 33337,\r\n\t\t37189: 34214,\r\n\t\t37190: 35438,\r\n\t\t37191: 36046,\r\n\t\t37192: 36341,\r\n\t\t37193: 36984,\r\n\t\t37194: 36983,\r\n\t\t37195: 37549,\r\n\t\t37196: 37521,\r\n\t\t37197: 38275,\r\n\t\t37198: 39854,\r\n\t\t37199: 21069,\r\n\t\t37200: 21892,\r\n\t\t37201: 28472,\r\n\t\t37202: 28982,\r\n\t\t37203: 20840,\r\n\t\t37204: 31109,\r\n\t\t37205: 32341,\r\n\t\t37206: 33203,\r\n\t\t37207: 31950,\r\n\t\t37208: 22092,\r\n\t\t37209: 22609,\r\n\t\t37210: 23720,\r\n\t\t37211: 25514,\r\n\t\t37212: 26366,\r\n\t\t37213: 26365,\r\n\t\t37214: 26970,\r\n\t\t37215: 29401,\r\n\t\t37216: 30095,\r\n\t\t37217: 30094,\r\n\t\t37218: 30990,\r\n\t\t37219: 31062,\r\n\t\t37220: 31199,\r\n\t\t37221: 31895,\r\n\t\t37222: 32032,\r\n\t\t37223: 32068,\r\n\t\t37224: 34311,\r\n\t\t37225: 35380,\r\n\t\t37226: 38459,\r\n\t\t37227: 36961,\r\n\t\t37228: 40736,\r\n\t\t37229: 20711,\r\n\t\t37230: 21109,\r\n\t\t37231: 21452,\r\n\t\t37232: 21474,\r\n\t\t37233: 20489,\r\n\t\t37234: 21930,\r\n\t\t37235: 22766,\r\n\t\t37236: 22863,\r\n\t\t37237: 29245,\r\n\t\t37238: 23435,\r\n\t\t37239: 23652,\r\n\t\t37240: 21277,\r\n\t\t37241: 24803,\r\n\t\t37242: 24819,\r\n\t\t37243: 25436,\r\n\t\t37244: 25475,\r\n\t\t37245: 25407,\r\n\t\t37246: 25531,\r\n\t\t37248: 25805,\r\n\t\t37249: 26089,\r\n\t\t37250: 26361,\r\n\t\t37251: 24035,\r\n\t\t37252: 27085,\r\n\t\t37253: 27133,\r\n\t\t37254: 28437,\r\n\t\t37255: 29157,\r\n\t\t37256: 20105,\r\n\t\t37257: 30185,\r\n\t\t37258: 30456,\r\n\t\t37259: 31379,\r\n\t\t37260: 31967,\r\n\t\t37261: 32207,\r\n\t\t37262: 32156,\r\n\t\t37263: 32865,\r\n\t\t37264: 33609,\r\n\t\t37265: 33624,\r\n\t\t37266: 33900,\r\n\t\t37267: 33980,\r\n\t\t37268: 34299,\r\n\t\t37269: 35013,\r\n\t\t37270: 36208,\r\n\t\t37271: 36865,\r\n\t\t37272: 36973,\r\n\t\t37273: 37783,\r\n\t\t37274: 38684,\r\n\t\t37275: 39442,\r\n\t\t37276: 20687,\r\n\t\t37277: 22679,\r\n\t\t37278: 24974,\r\n\t\t37279: 33235,\r\n\t\t37280: 34101,\r\n\t\t37281: 36104,\r\n\t\t37282: 36896,\r\n\t\t37283: 20419,\r\n\t\t37284: 20596,\r\n\t\t37285: 21063,\r\n\t\t37286: 21363,\r\n\t\t37287: 24687,\r\n\t\t37288: 25417,\r\n\t\t37289: 26463,\r\n\t\t37290: 28204,\r\n\t\t37291: 36275,\r\n\t\t37292: 36895,\r\n\t\t37293: 20439,\r\n\t\t37294: 23646,\r\n\t\t37295: 36042,\r\n\t\t37296: 26063,\r\n\t\t37297: 32154,\r\n\t\t37298: 21330,\r\n\t\t37299: 34966,\r\n\t\t37300: 20854,\r\n\t\t37301: 25539,\r\n\t\t37302: 23384,\r\n\t\t37303: 23403,\r\n\t\t37304: 23562,\r\n\t\t37305: 25613,\r\n\t\t37306: 26449,\r\n\t\t37307: 36956,\r\n\t\t37308: 20182,\r\n\t\t37309: 22810,\r\n\t\t37310: 22826,\r\n\t\t37311: 27760,\r\n\t\t37312: 35409,\r\n\t\t37313: 21822,\r\n\t\t37314: 22549,\r\n\t\t37315: 22949,\r\n\t\t37316: 24816,\r\n\t\t37317: 25171,\r\n\t\t37318: 26561,\r\n\t\t37319: 33333,\r\n\t\t37320: 26965,\r\n\t\t37321: 38464,\r\n\t\t37322: 39364,\r\n\t\t37323: 39464,\r\n\t\t37324: 20307,\r\n\t\t37325: 22534,\r\n\t\t37326: 23550,\r\n\t\t37327: 32784,\r\n\t\t37328: 23729,\r\n\t\t37329: 24111,\r\n\t\t37330: 24453,\r\n\t\t37331: 24608,\r\n\t\t37332: 24907,\r\n\t\t37333: 25140,\r\n\t\t37334: 26367,\r\n\t\t37335: 27888,\r\n\t\t37336: 28382,\r\n\t\t37337: 32974,\r\n\t\t37338: 33151,\r\n\t\t37339: 33492,\r\n\t\t37340: 34955,\r\n\t\t37341: 36024,\r\n\t\t37342: 36864,\r\n\t\t37343: 36910,\r\n\t\t37344: 38538,\r\n\t\t37345: 40667,\r\n\t\t37346: 39899,\r\n\t\t37347: 20195,\r\n\t\t37348: 21488,\r\n\t\t37349: 22823,\r\n\t\t37350: 31532,\r\n\t\t37351: 37261,\r\n\t\t37352: 38988,\r\n\t\t37353: 40441,\r\n\t\t37354: 28381,\r\n\t\t37355: 28711,\r\n\t\t37356: 21331,\r\n\t\t37357: 21828,\r\n\t\t37358: 23429,\r\n\t\t37359: 25176,\r\n\t\t37360: 25246,\r\n\t\t37361: 25299,\r\n\t\t37362: 27810,\r\n\t\t37363: 28655,\r\n\t\t37364: 29730,\r\n\t\t37365: 35351,\r\n\t\t37366: 37944,\r\n\t\t37367: 28609,\r\n\t\t37368: 35582,\r\n\t\t37369: 33592,\r\n\t\t37370: 20967,\r\n\t\t37371: 34552,\r\n\t\t37372: 21482,\r\n\t\t37440: 21481,\r\n\t\t37441: 20294,\r\n\t\t37442: 36948,\r\n\t\t37443: 36784,\r\n\t\t37444: 22890,\r\n\t\t37445: 33073,\r\n\t\t37446: 24061,\r\n\t\t37447: 31466,\r\n\t\t37448: 36799,\r\n\t\t37449: 26842,\r\n\t\t37450: 35895,\r\n\t\t37451: 29432,\r\n\t\t37452: 40008,\r\n\t\t37453: 27197,\r\n\t\t37454: 35504,\r\n\t\t37455: 20025,\r\n\t\t37456: 21336,\r\n\t\t37457: 22022,\r\n\t\t37458: 22374,\r\n\t\t37459: 25285,\r\n\t\t37460: 25506,\r\n\t\t37461: 26086,\r\n\t\t37462: 27470,\r\n\t\t37463: 28129,\r\n\t\t37464: 28251,\r\n\t\t37465: 28845,\r\n\t\t37466: 30701,\r\n\t\t37467: 31471,\r\n\t\t37468: 31658,\r\n\t\t37469: 32187,\r\n\t\t37470: 32829,\r\n\t\t37471: 32966,\r\n\t\t37472: 34507,\r\n\t\t37473: 35477,\r\n\t\t37474: 37723,\r\n\t\t37475: 22243,\r\n\t\t37476: 22727,\r\n\t\t37477: 24382,\r\n\t\t37478: 26029,\r\n\t\t37479: 26262,\r\n\t\t37480: 27264,\r\n\t\t37481: 27573,\r\n\t\t37482: 30007,\r\n\t\t37483: 35527,\r\n\t\t37484: 20516,\r\n\t\t37485: 30693,\r\n\t\t37486: 22320,\r\n\t\t37487: 24347,\r\n\t\t37488: 24677,\r\n\t\t37489: 26234,\r\n\t\t37490: 27744,\r\n\t\t37491: 30196,\r\n\t\t37492: 31258,\r\n\t\t37493: 32622,\r\n\t\t37494: 33268,\r\n\t\t37495: 34584,\r\n\t\t37496: 36933,\r\n\t\t37497: 39347,\r\n\t\t37498: 31689,\r\n\t\t37499: 30044,\r\n\t\t37500: 31481,\r\n\t\t37501: 31569,\r\n\t\t37502: 33988,\r\n\t\t37504: 36880,\r\n\t\t37505: 31209,\r\n\t\t37506: 31378,\r\n\t\t37507: 33590,\r\n\t\t37508: 23265,\r\n\t\t37509: 30528,\r\n\t\t37510: 20013,\r\n\t\t37511: 20210,\r\n\t\t37512: 23449,\r\n\t\t37513: 24544,\r\n\t\t37514: 25277,\r\n\t\t37515: 26172,\r\n\t\t37516: 26609,\r\n\t\t37517: 27880,\r\n\t\t37518: 34411,\r\n\t\t37519: 34935,\r\n\t\t37520: 35387,\r\n\t\t37521: 37198,\r\n\t\t37522: 37619,\r\n\t\t37523: 39376,\r\n\t\t37524: 27159,\r\n\t\t37525: 28710,\r\n\t\t37526: 29482,\r\n\t\t37527: 33511,\r\n\t\t37528: 33879,\r\n\t\t37529: 36015,\r\n\t\t37530: 19969,\r\n\t\t37531: 20806,\r\n\t\t37532: 20939,\r\n\t\t37533: 21899,\r\n\t\t37534: 23541,\r\n\t\t37535: 24086,\r\n\t\t37536: 24115,\r\n\t\t37537: 24193,\r\n\t\t37538: 24340,\r\n\t\t37539: 24373,\r\n\t\t37540: 24427,\r\n\t\t37541: 24500,\r\n\t\t37542: 25074,\r\n\t\t37543: 25361,\r\n\t\t37544: 26274,\r\n\t\t37545: 26397,\r\n\t\t37546: 28526,\r\n\t\t37547: 29266,\r\n\t\t37548: 30010,\r\n\t\t37549: 30522,\r\n\t\t37550: 32884,\r\n\t\t37551: 33081,\r\n\t\t37552: 33144,\r\n\t\t37553: 34678,\r\n\t\t37554: 35519,\r\n\t\t37555: 35548,\r\n\t\t37556: 36229,\r\n\t\t37557: 36339,\r\n\t\t37558: 37530,\r\n\t\t37559: 38263,\r\n\t\t37560: 38914,\r\n\t\t37561: 40165,\r\n\t\t37562: 21189,\r\n\t\t37563: 25431,\r\n\t\t37564: 30452,\r\n\t\t37565: 26389,\r\n\t\t37566: 27784,\r\n\t\t37567: 29645,\r\n\t\t37568: 36035,\r\n\t\t37569: 37806,\r\n\t\t37570: 38515,\r\n\t\t37571: 27941,\r\n\t\t37572: 22684,\r\n\t\t37573: 26894,\r\n\t\t37574: 27084,\r\n\t\t37575: 36861,\r\n\t\t37576: 37786,\r\n\t\t37577: 30171,\r\n\t\t37578: 36890,\r\n\t\t37579: 22618,\r\n\t\t37580: 26626,\r\n\t\t37581: 25524,\r\n\t\t37582: 27131,\r\n\t\t37583: 20291,\r\n\t\t37584: 28460,\r\n\t\t37585: 26584,\r\n\t\t37586: 36795,\r\n\t\t37587: 34086,\r\n\t\t37588: 32180,\r\n\t\t37589: 37716,\r\n\t\t37590: 26943,\r\n\t\t37591: 28528,\r\n\t\t37592: 22378,\r\n\t\t37593: 22775,\r\n\t\t37594: 23340,\r\n\t\t37595: 32044,\r\n\t\t37596: 29226,\r\n\t\t37597: 21514,\r\n\t\t37598: 37347,\r\n\t\t37599: 40372,\r\n\t\t37600: 20141,\r\n\t\t37601: 20302,\r\n\t\t37602: 20572,\r\n\t\t37603: 20597,\r\n\t\t37604: 21059,\r\n\t\t37605: 35998,\r\n\t\t37606: 21576,\r\n\t\t37607: 22564,\r\n\t\t37608: 23450,\r\n\t\t37609: 24093,\r\n\t\t37610: 24213,\r\n\t\t37611: 24237,\r\n\t\t37612: 24311,\r\n\t\t37613: 24351,\r\n\t\t37614: 24716,\r\n\t\t37615: 25269,\r\n\t\t37616: 25402,\r\n\t\t37617: 25552,\r\n\t\t37618: 26799,\r\n\t\t37619: 27712,\r\n\t\t37620: 30855,\r\n\t\t37621: 31118,\r\n\t\t37622: 31243,\r\n\t\t37623: 32224,\r\n\t\t37624: 33351,\r\n\t\t37625: 35330,\r\n\t\t37626: 35558,\r\n\t\t37627: 36420,\r\n\t\t37628: 36883,\r\n\t\t37696: 37048,\r\n\t\t37697: 37165,\r\n\t\t37698: 37336,\r\n\t\t37699: 40718,\r\n\t\t37700: 27877,\r\n\t\t37701: 25688,\r\n\t\t37702: 25826,\r\n\t\t37703: 25973,\r\n\t\t37704: 28404,\r\n\t\t37705: 30340,\r\n\t\t37706: 31515,\r\n\t\t37707: 36969,\r\n\t\t37708: 37841,\r\n\t\t37709: 28346,\r\n\t\t37710: 21746,\r\n\t\t37711: 24505,\r\n\t\t37712: 25764,\r\n\t\t37713: 36685,\r\n\t\t37714: 36845,\r\n\t\t37715: 37444,\r\n\t\t37716: 20856,\r\n\t\t37717: 22635,\r\n\t\t37718: 22825,\r\n\t\t37719: 23637,\r\n\t\t37720: 24215,\r\n\t\t37721: 28155,\r\n\t\t37722: 32399,\r\n\t\t37723: 29980,\r\n\t\t37724: 36028,\r\n\t\t37725: 36578,\r\n\t\t37726: 39003,\r\n\t\t37727: 28857,\r\n\t\t37728: 20253,\r\n\t\t37729: 27583,\r\n\t\t37730: 28593,\r\n\t\t37731: 30000,\r\n\t\t37732: 38651,\r\n\t\t37733: 20814,\r\n\t\t37734: 21520,\r\n\t\t37735: 22581,\r\n\t\t37736: 22615,\r\n\t\t37737: 22956,\r\n\t\t37738: 23648,\r\n\t\t37739: 24466,\r\n\t\t37740: 26007,\r\n\t\t37741: 26460,\r\n\t\t37742: 28193,\r\n\t\t37743: 30331,\r\n\t\t37744: 33759,\r\n\t\t37745: 36077,\r\n\t\t37746: 36884,\r\n\t\t37747: 37117,\r\n\t\t37748: 37709,\r\n\t\t37749: 30757,\r\n\t\t37750: 30778,\r\n\t\t37751: 21162,\r\n\t\t37752: 24230,\r\n\t\t37753: 22303,\r\n\t\t37754: 22900,\r\n\t\t37755: 24594,\r\n\t\t37756: 20498,\r\n\t\t37757: 20826,\r\n\t\t37758: 20908,\r\n\t\t37760: 20941,\r\n\t\t37761: 20992,\r\n\t\t37762: 21776,\r\n\t\t37763: 22612,\r\n\t\t37764: 22616,\r\n\t\t37765: 22871,\r\n\t\t37766: 23445,\r\n\t\t37767: 23798,\r\n\t\t37768: 23947,\r\n\t\t37769: 24764,\r\n\t\t37770: 25237,\r\n\t\t37771: 25645,\r\n\t\t37772: 26481,\r\n\t\t37773: 26691,\r\n\t\t37774: 26812,\r\n\t\t37775: 26847,\r\n\t\t37776: 30423,\r\n\t\t37777: 28120,\r\n\t\t37778: 28271,\r\n\t\t37779: 28059,\r\n\t\t37780: 28783,\r\n\t\t37781: 29128,\r\n\t\t37782: 24403,\r\n\t\t37783: 30168,\r\n\t\t37784: 31095,\r\n\t\t37785: 31561,\r\n\t\t37786: 31572,\r\n\t\t37787: 31570,\r\n\t\t37788: 31958,\r\n\t\t37789: 32113,\r\n\t\t37790: 21040,\r\n\t\t37791: 33891,\r\n\t\t37792: 34153,\r\n\t\t37793: 34276,\r\n\t\t37794: 35342,\r\n\t\t37795: 35588,\r\n\t\t37796: 35910,\r\n\t\t37797: 36367,\r\n\t\t37798: 36867,\r\n\t\t37799: 36879,\r\n\t\t37800: 37913,\r\n\t\t37801: 38518,\r\n\t\t37802: 38957,\r\n\t\t37803: 39472,\r\n\t\t37804: 38360,\r\n\t\t37805: 20685,\r\n\t\t37806: 21205,\r\n\t\t37807: 21516,\r\n\t\t37808: 22530,\r\n\t\t37809: 23566,\r\n\t\t37810: 24999,\r\n\t\t37811: 25758,\r\n\t\t37812: 27934,\r\n\t\t37813: 30643,\r\n\t\t37814: 31461,\r\n\t\t37815: 33012,\r\n\t\t37816: 33796,\r\n\t\t37817: 36947,\r\n\t\t37818: 37509,\r\n\t\t37819: 23776,\r\n\t\t37820: 40199,\r\n\t\t37821: 21311,\r\n\t\t37822: 24471,\r\n\t\t37823: 24499,\r\n\t\t37824: 28060,\r\n\t\t37825: 29305,\r\n\t\t37826: 30563,\r\n\t\t37827: 31167,\r\n\t\t37828: 31716,\r\n\t\t37829: 27602,\r\n\t\t37830: 29420,\r\n\t\t37831: 35501,\r\n\t\t37832: 26627,\r\n\t\t37833: 27233,\r\n\t\t37834: 20984,\r\n\t\t37835: 31361,\r\n\t\t37836: 26932,\r\n\t\t37837: 23626,\r\n\t\t37838: 40182,\r\n\t\t37839: 33515,\r\n\t\t37840: 23493,\r\n\t\t37841: 37193,\r\n\t\t37842: 28702,\r\n\t\t37843: 22136,\r\n\t\t37844: 23663,\r\n\t\t37845: 24775,\r\n\t\t37846: 25958,\r\n\t\t37847: 27788,\r\n\t\t37848: 35930,\r\n\t\t37849: 36929,\r\n\t\t37850: 38931,\r\n\t\t37851: 21585,\r\n\t\t37852: 26311,\r\n\t\t37853: 37389,\r\n\t\t37854: 22856,\r\n\t\t37855: 37027,\r\n\t\t37856: 20869,\r\n\t\t37857: 20045,\r\n\t\t37858: 20970,\r\n\t\t37859: 34201,\r\n\t\t37860: 35598,\r\n\t\t37861: 28760,\r\n\t\t37862: 25466,\r\n\t\t37863: 37707,\r\n\t\t37864: 26978,\r\n\t\t37865: 39348,\r\n\t\t37866: 32260,\r\n\t\t37867: 30071,\r\n\t\t37868: 21335,\r\n\t\t37869: 26976,\r\n\t\t37870: 36575,\r\n\t\t37871: 38627,\r\n\t\t37872: 27741,\r\n\t\t37873: 20108,\r\n\t\t37874: 23612,\r\n\t\t37875: 24336,\r\n\t\t37876: 36841,\r\n\t\t37877: 21250,\r\n\t\t37878: 36049,\r\n\t\t37879: 32905,\r\n\t\t37880: 34425,\r\n\t\t37881: 24319,\r\n\t\t37882: 26085,\r\n\t\t37883: 20083,\r\n\t\t37884: 20837,\r\n\t\t37952: 22914,\r\n\t\t37953: 23615,\r\n\t\t37954: 38894,\r\n\t\t37955: 20219,\r\n\t\t37956: 22922,\r\n\t\t37957: 24525,\r\n\t\t37958: 35469,\r\n\t\t37959: 28641,\r\n\t\t37960: 31152,\r\n\t\t37961: 31074,\r\n\t\t37962: 23527,\r\n\t\t37963: 33905,\r\n\t\t37964: 29483,\r\n\t\t37965: 29105,\r\n\t\t37966: 24180,\r\n\t\t37967: 24565,\r\n\t\t37968: 25467,\r\n\t\t37969: 25754,\r\n\t\t37970: 29123,\r\n\t\t37971: 31896,\r\n\t\t37972: 20035,\r\n\t\t37973: 24316,\r\n\t\t37974: 20043,\r\n\t\t37975: 22492,\r\n\t\t37976: 22178,\r\n\t\t37977: 24745,\r\n\t\t37978: 28611,\r\n\t\t37979: 32013,\r\n\t\t37980: 33021,\r\n\t\t37981: 33075,\r\n\t\t37982: 33215,\r\n\t\t37983: 36786,\r\n\t\t37984: 35223,\r\n\t\t37985: 34468,\r\n\t\t37986: 24052,\r\n\t\t37987: 25226,\r\n\t\t37988: 25773,\r\n\t\t37989: 35207,\r\n\t\t37990: 26487,\r\n\t\t37991: 27874,\r\n\t\t37992: 27966,\r\n\t\t37993: 29750,\r\n\t\t37994: 30772,\r\n\t\t37995: 23110,\r\n\t\t37996: 32629,\r\n\t\t37997: 33453,\r\n\t\t37998: 39340,\r\n\t\t37999: 20467,\r\n\t\t38000: 24259,\r\n\t\t38001: 25309,\r\n\t\t38002: 25490,\r\n\t\t38003: 25943,\r\n\t\t38004: 26479,\r\n\t\t38005: 30403,\r\n\t\t38006: 29260,\r\n\t\t38007: 32972,\r\n\t\t38008: 32954,\r\n\t\t38009: 36649,\r\n\t\t38010: 37197,\r\n\t\t38011: 20493,\r\n\t\t38012: 22521,\r\n\t\t38013: 23186,\r\n\t\t38014: 26757,\r\n\t\t38016: 26995,\r\n\t\t38017: 29028,\r\n\t\t38018: 29437,\r\n\t\t38019: 36023,\r\n\t\t38020: 22770,\r\n\t\t38021: 36064,\r\n\t\t38022: 38506,\r\n\t\t38023: 36889,\r\n\t\t38024: 34687,\r\n\t\t38025: 31204,\r\n\t\t38026: 30695,\r\n\t\t38027: 33833,\r\n\t\t38028: 20271,\r\n\t\t38029: 21093,\r\n\t\t38030: 21338,\r\n\t\t38031: 25293,\r\n\t\t38032: 26575,\r\n\t\t38033: 27850,\r\n\t\t38034: 30333,\r\n\t\t38035: 31636,\r\n\t\t38036: 31893,\r\n\t\t38037: 33334,\r\n\t\t38038: 34180,\r\n\t\t38039: 36843,\r\n\t\t38040: 26333,\r\n\t\t38041: 28448,\r\n\t\t38042: 29190,\r\n\t\t38043: 32283,\r\n\t\t38044: 33707,\r\n\t\t38045: 39361,\r\n\t\t38046: 40614,\r\n\t\t38047: 20989,\r\n\t\t38048: 31665,\r\n\t\t38049: 30834,\r\n\t\t38050: 31672,\r\n\t\t38051: 32903,\r\n\t\t38052: 31560,\r\n\t\t38053: 27368,\r\n\t\t38054: 24161,\r\n\t\t38055: 32908,\r\n\t\t38056: 30033,\r\n\t\t38057: 30048,\r\n\t\t38058: 20843,\r\n\t\t38059: 37474,\r\n\t\t38060: 28300,\r\n\t\t38061: 30330,\r\n\t\t38062: 37271,\r\n\t\t38063: 39658,\r\n\t\t38064: 20240,\r\n\t\t38065: 32624,\r\n\t\t38066: 25244,\r\n\t\t38067: 31567,\r\n\t\t38068: 38309,\r\n\t\t38069: 40169,\r\n\t\t38070: 22138,\r\n\t\t38071: 22617,\r\n\t\t38072: 34532,\r\n\t\t38073: 38588,\r\n\t\t38074: 20276,\r\n\t\t38075: 21028,\r\n\t\t38076: 21322,\r\n\t\t38077: 21453,\r\n\t\t38078: 21467,\r\n\t\t38079: 24070,\r\n\t\t38080: 25644,\r\n\t\t38081: 26001,\r\n\t\t38082: 26495,\r\n\t\t38083: 27710,\r\n\t\t38084: 27726,\r\n\t\t38085: 29256,\r\n\t\t38086: 29359,\r\n\t\t38087: 29677,\r\n\t\t38088: 30036,\r\n\t\t38089: 32321,\r\n\t\t38090: 33324,\r\n\t\t38091: 34281,\r\n\t\t38092: 36009,\r\n\t\t38093: 31684,\r\n\t\t38094: 37318,\r\n\t\t38095: 29033,\r\n\t\t38096: 38930,\r\n\t\t38097: 39151,\r\n\t\t38098: 25405,\r\n\t\t38099: 26217,\r\n\t\t38100: 30058,\r\n\t\t38101: 30436,\r\n\t\t38102: 30928,\r\n\t\t38103: 34115,\r\n\t\t38104: 34542,\r\n\t\t38105: 21290,\r\n\t\t38106: 21329,\r\n\t\t38107: 21542,\r\n\t\t38108: 22915,\r\n\t\t38109: 24199,\r\n\t\t38110: 24444,\r\n\t\t38111: 24754,\r\n\t\t38112: 25161,\r\n\t\t38113: 25209,\r\n\t\t38114: 25259,\r\n\t\t38115: 26000,\r\n\t\t38116: 27604,\r\n\t\t38117: 27852,\r\n\t\t38118: 30130,\r\n\t\t38119: 30382,\r\n\t\t38120: 30865,\r\n\t\t38121: 31192,\r\n\t\t38122: 32203,\r\n\t\t38123: 32631,\r\n\t\t38124: 32933,\r\n\t\t38125: 34987,\r\n\t\t38126: 35513,\r\n\t\t38127: 36027,\r\n\t\t38128: 36991,\r\n\t\t38129: 38750,\r\n\t\t38130: 39131,\r\n\t\t38131: 27147,\r\n\t\t38132: 31800,\r\n\t\t38133: 20633,\r\n\t\t38134: 23614,\r\n\t\t38135: 24494,\r\n\t\t38136: 26503,\r\n\t\t38137: 27608,\r\n\t\t38138: 29749,\r\n\t\t38139: 30473,\r\n\t\t38140: 32654,\r\n\t\t38208: 40763,\r\n\t\t38209: 26570,\r\n\t\t38210: 31255,\r\n\t\t38211: 21305,\r\n\t\t38212: 30091,\r\n\t\t38213: 39661,\r\n\t\t38214: 24422,\r\n\t\t38215: 33181,\r\n\t\t38216: 33777,\r\n\t\t38217: 32920,\r\n\t\t38218: 24380,\r\n\t\t38219: 24517,\r\n\t\t38220: 30050,\r\n\t\t38221: 31558,\r\n\t\t38222: 36924,\r\n\t\t38223: 26727,\r\n\t\t38224: 23019,\r\n\t\t38225: 23195,\r\n\t\t38226: 32016,\r\n\t\t38227: 30334,\r\n\t\t38228: 35628,\r\n\t\t38229: 20469,\r\n\t\t38230: 24426,\r\n\t\t38231: 27161,\r\n\t\t38232: 27703,\r\n\t\t38233: 28418,\r\n\t\t38234: 29922,\r\n\t\t38235: 31080,\r\n\t\t38236: 34920,\r\n\t\t38237: 35413,\r\n\t\t38238: 35961,\r\n\t\t38239: 24287,\r\n\t\t38240: 25551,\r\n\t\t38241: 30149,\r\n\t\t38242: 31186,\r\n\t\t38243: 33495,\r\n\t\t38244: 37672,\r\n\t\t38245: 37618,\r\n\t\t38246: 33948,\r\n\t\t38247: 34541,\r\n\t\t38248: 39981,\r\n\t\t38249: 21697,\r\n\t\t38250: 24428,\r\n\t\t38251: 25996,\r\n\t\t38252: 27996,\r\n\t\t38253: 28693,\r\n\t\t38254: 36007,\r\n\t\t38255: 36051,\r\n\t\t38256: 38971,\r\n\t\t38257: 25935,\r\n\t\t38258: 29942,\r\n\t\t38259: 19981,\r\n\t\t38260: 20184,\r\n\t\t38261: 22496,\r\n\t\t38262: 22827,\r\n\t\t38263: 23142,\r\n\t\t38264: 23500,\r\n\t\t38265: 20904,\r\n\t\t38266: 24067,\r\n\t\t38267: 24220,\r\n\t\t38268: 24598,\r\n\t\t38269: 25206,\r\n\t\t38270: 25975,\r\n\t\t38272: 26023,\r\n\t\t38273: 26222,\r\n\t\t38274: 28014,\r\n\t\t38275: 29238,\r\n\t\t38276: 31526,\r\n\t\t38277: 33104,\r\n\t\t38278: 33178,\r\n\t\t38279: 33433,\r\n\t\t38280: 35676,\r\n\t\t38281: 36000,\r\n\t\t38282: 36070,\r\n\t\t38283: 36212,\r\n\t\t38284: 38428,\r\n\t\t38285: 38468,\r\n\t\t38286: 20398,\r\n\t\t38287: 25771,\r\n\t\t38288: 27494,\r\n\t\t38289: 33310,\r\n\t\t38290: 33889,\r\n\t\t38291: 34154,\r\n\t\t38292: 37096,\r\n\t\t38293: 23553,\r\n\t\t38294: 26963,\r\n\t\t38295: 39080,\r\n\t\t38296: 33914,\r\n\t\t38297: 34135,\r\n\t\t38298: 20239,\r\n\t\t38299: 21103,\r\n\t\t38300: 24489,\r\n\t\t38301: 24133,\r\n\t\t38302: 26381,\r\n\t\t38303: 31119,\r\n\t\t38304: 33145,\r\n\t\t38305: 35079,\r\n\t\t38306: 35206,\r\n\t\t38307: 28149,\r\n\t\t38308: 24343,\r\n\t\t38309: 25173,\r\n\t\t38310: 27832,\r\n\t\t38311: 20175,\r\n\t\t38312: 29289,\r\n\t\t38313: 39826,\r\n\t\t38314: 20998,\r\n\t\t38315: 21563,\r\n\t\t38316: 22132,\r\n\t\t38317: 22707,\r\n\t\t38318: 24996,\r\n\t\t38319: 25198,\r\n\t\t38320: 28954,\r\n\t\t38321: 22894,\r\n\t\t38322: 31881,\r\n\t\t38323: 31966,\r\n\t\t38324: 32027,\r\n\t\t38325: 38640,\r\n\t\t38326: 25991,\r\n\t\t38327: 32862,\r\n\t\t38328: 19993,\r\n\t\t38329: 20341,\r\n\t\t38330: 20853,\r\n\t\t38331: 22592,\r\n\t\t38332: 24163,\r\n\t\t38333: 24179,\r\n\t\t38334: 24330,\r\n\t\t38335: 26564,\r\n\t\t38336: 20006,\r\n\t\t38337: 34109,\r\n\t\t38338: 38281,\r\n\t\t38339: 38491,\r\n\t\t38340: 31859,\r\n\t\t38341: 38913,\r\n\t\t38342: 20731,\r\n\t\t38343: 22721,\r\n\t\t38344: 30294,\r\n\t\t38345: 30887,\r\n\t\t38346: 21029,\r\n\t\t38347: 30629,\r\n\t\t38348: 34065,\r\n\t\t38349: 31622,\r\n\t\t38350: 20559,\r\n\t\t38351: 22793,\r\n\t\t38352: 29255,\r\n\t\t38353: 31687,\r\n\t\t38354: 32232,\r\n\t\t38355: 36794,\r\n\t\t38356: 36820,\r\n\t\t38357: 36941,\r\n\t\t38358: 20415,\r\n\t\t38359: 21193,\r\n\t\t38360: 23081,\r\n\t\t38361: 24321,\r\n\t\t38362: 38829,\r\n\t\t38363: 20445,\r\n\t\t38364: 33303,\r\n\t\t38365: 37610,\r\n\t\t38366: 22275,\r\n\t\t38367: 25429,\r\n\t\t38368: 27497,\r\n\t\t38369: 29995,\r\n\t\t38370: 35036,\r\n\t\t38371: 36628,\r\n\t\t38372: 31298,\r\n\t\t38373: 21215,\r\n\t\t38374: 22675,\r\n\t\t38375: 24917,\r\n\t\t38376: 25098,\r\n\t\t38377: 26286,\r\n\t\t38378: 27597,\r\n\t\t38379: 31807,\r\n\t\t38380: 33769,\r\n\t\t38381: 20515,\r\n\t\t38382: 20472,\r\n\t\t38383: 21253,\r\n\t\t38384: 21574,\r\n\t\t38385: 22577,\r\n\t\t38386: 22857,\r\n\t\t38387: 23453,\r\n\t\t38388: 23792,\r\n\t\t38389: 23791,\r\n\t\t38390: 23849,\r\n\t\t38391: 24214,\r\n\t\t38392: 25265,\r\n\t\t38393: 25447,\r\n\t\t38394: 25918,\r\n\t\t38395: 26041,\r\n\t\t38396: 26379,\r\n\t\t38464: 27861,\r\n\t\t38465: 27873,\r\n\t\t38466: 28921,\r\n\t\t38467: 30770,\r\n\t\t38468: 32299,\r\n\t\t38469: 32990,\r\n\t\t38470: 33459,\r\n\t\t38471: 33804,\r\n\t\t38472: 34028,\r\n\t\t38473: 34562,\r\n\t\t38474: 35090,\r\n\t\t38475: 35370,\r\n\t\t38476: 35914,\r\n\t\t38477: 37030,\r\n\t\t38478: 37586,\r\n\t\t38479: 39165,\r\n\t\t38480: 40179,\r\n\t\t38481: 40300,\r\n\t\t38482: 20047,\r\n\t\t38483: 20129,\r\n\t\t38484: 20621,\r\n\t\t38485: 21078,\r\n\t\t38486: 22346,\r\n\t\t38487: 22952,\r\n\t\t38488: 24125,\r\n\t\t38489: 24536,\r\n\t\t38490: 24537,\r\n\t\t38491: 25151,\r\n\t\t38492: 26292,\r\n\t\t38493: 26395,\r\n\t\t38494: 26576,\r\n\t\t38495: 26834,\r\n\t\t38496: 20882,\r\n\t\t38497: 32033,\r\n\t\t38498: 32938,\r\n\t\t38499: 33192,\r\n\t\t38500: 35584,\r\n\t\t38501: 35980,\r\n\t\t38502: 36031,\r\n\t\t38503: 37502,\r\n\t\t38504: 38450,\r\n\t\t38505: 21536,\r\n\t\t38506: 38956,\r\n\t\t38507: 21271,\r\n\t\t38508: 20693,\r\n\t\t38509: 21340,\r\n\t\t38510: 22696,\r\n\t\t38511: 25778,\r\n\t\t38512: 26420,\r\n\t\t38513: 29287,\r\n\t\t38514: 30566,\r\n\t\t38515: 31302,\r\n\t\t38516: 37350,\r\n\t\t38517: 21187,\r\n\t\t38518: 27809,\r\n\t\t38519: 27526,\r\n\t\t38520: 22528,\r\n\t\t38521: 24140,\r\n\t\t38522: 22868,\r\n\t\t38523: 26412,\r\n\t\t38524: 32763,\r\n\t\t38525: 20961,\r\n\t\t38526: 30406,\r\n\t\t38528: 25705,\r\n\t\t38529: 30952,\r\n\t\t38530: 39764,\r\n\t\t38531: 40635,\r\n\t\t38532: 22475,\r\n\t\t38533: 22969,\r\n\t\t38534: 26151,\r\n\t\t38535: 26522,\r\n\t\t38536: 27598,\r\n\t\t38537: 21737,\r\n\t\t38538: 27097,\r\n\t\t38539: 24149,\r\n\t\t38540: 33180,\r\n\t\t38541: 26517,\r\n\t\t38542: 39850,\r\n\t\t38543: 26622,\r\n\t\t38544: 40018,\r\n\t\t38545: 26717,\r\n\t\t38546: 20134,\r\n\t\t38547: 20451,\r\n\t\t38548: 21448,\r\n\t\t38549: 25273,\r\n\t\t38550: 26411,\r\n\t\t38551: 27819,\r\n\t\t38552: 36804,\r\n\t\t38553: 20397,\r\n\t\t38554: 32365,\r\n\t\t38555: 40639,\r\n\t\t38556: 19975,\r\n\t\t38557: 24930,\r\n\t\t38558: 28288,\r\n\t\t38559: 28459,\r\n\t\t38560: 34067,\r\n\t\t38561: 21619,\r\n\t\t38562: 26410,\r\n\t\t38563: 39749,\r\n\t\t38564: 24051,\r\n\t\t38565: 31637,\r\n\t\t38566: 23724,\r\n\t\t38567: 23494,\r\n\t\t38568: 34588,\r\n\t\t38569: 28234,\r\n\t\t38570: 34001,\r\n\t\t38571: 31252,\r\n\t\t38572: 33032,\r\n\t\t38573: 22937,\r\n\t\t38574: 31885,\r\n\t\t38575: 27665,\r\n\t\t38576: 30496,\r\n\t\t38577: 21209,\r\n\t\t38578: 22818,\r\n\t\t38579: 28961,\r\n\t\t38580: 29279,\r\n\t\t38581: 30683,\r\n\t\t38582: 38695,\r\n\t\t38583: 40289,\r\n\t\t38584: 26891,\r\n\t\t38585: 23167,\r\n\t\t38586: 23064,\r\n\t\t38587: 20901,\r\n\t\t38588: 21517,\r\n\t\t38589: 21629,\r\n\t\t38590: 26126,\r\n\t\t38591: 30431,\r\n\t\t38592: 36855,\r\n\t\t38593: 37528,\r\n\t\t38594: 40180,\r\n\t\t38595: 23018,\r\n\t\t38596: 29277,\r\n\t\t38597: 28357,\r\n\t\t38598: 20813,\r\n\t\t38599: 26825,\r\n\t\t38600: 32191,\r\n\t\t38601: 32236,\r\n\t\t38602: 38754,\r\n\t\t38603: 40634,\r\n\t\t38604: 25720,\r\n\t\t38605: 27169,\r\n\t\t38606: 33538,\r\n\t\t38607: 22916,\r\n\t\t38608: 23391,\r\n\t\t38609: 27611,\r\n\t\t38610: 29467,\r\n\t\t38611: 30450,\r\n\t\t38612: 32178,\r\n\t\t38613: 32791,\r\n\t\t38614: 33945,\r\n\t\t38615: 20786,\r\n\t\t38616: 26408,\r\n\t\t38617: 40665,\r\n\t\t38618: 30446,\r\n\t\t38619: 26466,\r\n\t\t38620: 21247,\r\n\t\t38621: 39173,\r\n\t\t38622: 23588,\r\n\t\t38623: 25147,\r\n\t\t38624: 31870,\r\n\t\t38625: 36016,\r\n\t\t38626: 21839,\r\n\t\t38627: 24758,\r\n\t\t38628: 32011,\r\n\t\t38629: 38272,\r\n\t\t38630: 21249,\r\n\t\t38631: 20063,\r\n\t\t38632: 20918,\r\n\t\t38633: 22812,\r\n\t\t38634: 29242,\r\n\t\t38635: 32822,\r\n\t\t38636: 37326,\r\n\t\t38637: 24357,\r\n\t\t38638: 30690,\r\n\t\t38639: 21380,\r\n\t\t38640: 24441,\r\n\t\t38641: 32004,\r\n\t\t38642: 34220,\r\n\t\t38643: 35379,\r\n\t\t38644: 36493,\r\n\t\t38645: 38742,\r\n\t\t38646: 26611,\r\n\t\t38647: 34222,\r\n\t\t38648: 37971,\r\n\t\t38649: 24841,\r\n\t\t38650: 24840,\r\n\t\t38651: 27833,\r\n\t\t38652: 30290,\r\n\t\t38720: 35565,\r\n\t\t38721: 36664,\r\n\t\t38722: 21807,\r\n\t\t38723: 20305,\r\n\t\t38724: 20778,\r\n\t\t38725: 21191,\r\n\t\t38726: 21451,\r\n\t\t38727: 23461,\r\n\t\t38728: 24189,\r\n\t\t38729: 24736,\r\n\t\t38730: 24962,\r\n\t\t38731: 25558,\r\n\t\t38732: 26377,\r\n\t\t38733: 26586,\r\n\t\t38734: 28263,\r\n\t\t38735: 28044,\r\n\t\t38736: 29494,\r\n\t\t38737: 29495,\r\n\t\t38738: 30001,\r\n\t\t38739: 31056,\r\n\t\t38740: 35029,\r\n\t\t38741: 35480,\r\n\t\t38742: 36938,\r\n\t\t38743: 37009,\r\n\t\t38744: 37109,\r\n\t\t38745: 38596,\r\n\t\t38746: 34701,\r\n\t\t38747: 22805,\r\n\t\t38748: 20104,\r\n\t\t38749: 20313,\r\n\t\t38750: 19982,\r\n\t\t38751: 35465,\r\n\t\t38752: 36671,\r\n\t\t38753: 38928,\r\n\t\t38754: 20653,\r\n\t\t38755: 24188,\r\n\t\t38756: 22934,\r\n\t\t38757: 23481,\r\n\t\t38758: 24248,\r\n\t\t38759: 25562,\r\n\t\t38760: 25594,\r\n\t\t38761: 25793,\r\n\t\t38762: 26332,\r\n\t\t38763: 26954,\r\n\t\t38764: 27096,\r\n\t\t38765: 27915,\r\n\t\t38766: 28342,\r\n\t\t38767: 29076,\r\n\t\t38768: 29992,\r\n\t\t38769: 31407,\r\n\t\t38770: 32650,\r\n\t\t38771: 32768,\r\n\t\t38772: 33865,\r\n\t\t38773: 33993,\r\n\t\t38774: 35201,\r\n\t\t38775: 35617,\r\n\t\t38776: 36362,\r\n\t\t38777: 36965,\r\n\t\t38778: 38525,\r\n\t\t38779: 39178,\r\n\t\t38780: 24958,\r\n\t\t38781: 25233,\r\n\t\t38782: 27442,\r\n\t\t38784: 27779,\r\n\t\t38785: 28020,\r\n\t\t38786: 32716,\r\n\t\t38787: 32764,\r\n\t\t38788: 28096,\r\n\t\t38789: 32645,\r\n\t\t38790: 34746,\r\n\t\t38791: 35064,\r\n\t\t38792: 26469,\r\n\t\t38793: 33713,\r\n\t\t38794: 38972,\r\n\t\t38795: 38647,\r\n\t\t38796: 27931,\r\n\t\t38797: 32097,\r\n\t\t38798: 33853,\r\n\t\t38799: 37226,\r\n\t\t38800: 20081,\r\n\t\t38801: 21365,\r\n\t\t38802: 23888,\r\n\t\t38803: 27396,\r\n\t\t38804: 28651,\r\n\t\t38805: 34253,\r\n\t\t38806: 34349,\r\n\t\t38807: 35239,\r\n\t\t38808: 21033,\r\n\t\t38809: 21519,\r\n\t\t38810: 23653,\r\n\t\t38811: 26446,\r\n\t\t38812: 26792,\r\n\t\t38813: 29702,\r\n\t\t38814: 29827,\r\n\t\t38815: 30178,\r\n\t\t38816: 35023,\r\n\t\t38817: 35041,\r\n\t\t38818: 37324,\r\n\t\t38819: 38626,\r\n\t\t38820: 38520,\r\n\t\t38821: 24459,\r\n\t\t38822: 29575,\r\n\t\t38823: 31435,\r\n\t\t38824: 33870,\r\n\t\t38825: 25504,\r\n\t\t38826: 30053,\r\n\t\t38827: 21129,\r\n\t\t38828: 27969,\r\n\t\t38829: 28316,\r\n\t\t38830: 29705,\r\n\t\t38831: 30041,\r\n\t\t38832: 30827,\r\n\t\t38833: 31890,\r\n\t\t38834: 38534,\r\n\t\t38835: 31452,\r\n\t\t38836: 40845,\r\n\t\t38837: 20406,\r\n\t\t38838: 24942,\r\n\t\t38839: 26053,\r\n\t\t38840: 34396,\r\n\t\t38841: 20102,\r\n\t\t38842: 20142,\r\n\t\t38843: 20698,\r\n\t\t38844: 20001,\r\n\t\t38845: 20940,\r\n\t\t38846: 23534,\r\n\t\t38847: 26009,\r\n\t\t38848: 26753,\r\n\t\t38849: 28092,\r\n\t\t38850: 29471,\r\n\t\t38851: 30274,\r\n\t\t38852: 30637,\r\n\t\t38853: 31260,\r\n\t\t38854: 31975,\r\n\t\t38855: 33391,\r\n\t\t38856: 35538,\r\n\t\t38857: 36988,\r\n\t\t38858: 37327,\r\n\t\t38859: 38517,\r\n\t\t38860: 38936,\r\n\t\t38861: 21147,\r\n\t\t38862: 32209,\r\n\t\t38863: 20523,\r\n\t\t38864: 21400,\r\n\t\t38865: 26519,\r\n\t\t38866: 28107,\r\n\t\t38867: 29136,\r\n\t\t38868: 29747,\r\n\t\t38869: 33256,\r\n\t\t38870: 36650,\r\n\t\t38871: 38563,\r\n\t\t38872: 40023,\r\n\t\t38873: 40607,\r\n\t\t38874: 29792,\r\n\t\t38875: 22593,\r\n\t\t38876: 28057,\r\n\t\t38877: 32047,\r\n\t\t38878: 39006,\r\n\t\t38879: 20196,\r\n\t\t38880: 20278,\r\n\t\t38881: 20363,\r\n\t\t38882: 20919,\r\n\t\t38883: 21169,\r\n\t\t38884: 23994,\r\n\t\t38885: 24604,\r\n\t\t38886: 29618,\r\n\t\t38887: 31036,\r\n\t\t38888: 33491,\r\n\t\t38889: 37428,\r\n\t\t38890: 38583,\r\n\t\t38891: 38646,\r\n\t\t38892: 38666,\r\n\t\t38893: 40599,\r\n\t\t38894: 40802,\r\n\t\t38895: 26278,\r\n\t\t38896: 27508,\r\n\t\t38897: 21015,\r\n\t\t38898: 21155,\r\n\t\t38899: 28872,\r\n\t\t38900: 35010,\r\n\t\t38901: 24265,\r\n\t\t38902: 24651,\r\n\t\t38903: 24976,\r\n\t\t38904: 28451,\r\n\t\t38905: 29001,\r\n\t\t38906: 31806,\r\n\t\t38907: 32244,\r\n\t\t38908: 32879,\r\n\t\t38976: 34030,\r\n\t\t38977: 36899,\r\n\t\t38978: 37676,\r\n\t\t38979: 21570,\r\n\t\t38980: 39791,\r\n\t\t38981: 27347,\r\n\t\t38982: 28809,\r\n\t\t38983: 36034,\r\n\t\t38984: 36335,\r\n\t\t38985: 38706,\r\n\t\t38986: 21172,\r\n\t\t38987: 23105,\r\n\t\t38988: 24266,\r\n\t\t38989: 24324,\r\n\t\t38990: 26391,\r\n\t\t38991: 27004,\r\n\t\t38992: 27028,\r\n\t\t38993: 28010,\r\n\t\t38994: 28431,\r\n\t\t38995: 29282,\r\n\t\t38996: 29436,\r\n\t\t38997: 31725,\r\n\t\t38998: 32769,\r\n\t\t38999: 32894,\r\n\t\t39000: 34635,\r\n\t\t39001: 37070,\r\n\t\t39002: 20845,\r\n\t\t39003: 40595,\r\n\t\t39004: 31108,\r\n\t\t39005: 32907,\r\n\t\t39006: 37682,\r\n\t\t39007: 35542,\r\n\t\t39008: 20525,\r\n\t\t39009: 21644,\r\n\t\t39010: 35441,\r\n\t\t39011: 27498,\r\n\t\t39012: 36036,\r\n\t\t39013: 33031,\r\n\t\t39014: 24785,\r\n\t\t39015: 26528,\r\n\t\t39016: 40434,\r\n\t\t39017: 20121,\r\n\t\t39018: 20120,\r\n\t\t39019: 39952,\r\n\t\t39020: 35435,\r\n\t\t39021: 34241,\r\n\t\t39022: 34152,\r\n\t\t39023: 26880,\r\n\t\t39024: 28286,\r\n\t\t39025: 30871,\r\n\t\t39026: 33109,\r\n\t\t39071: 24332,\r\n\t\t39072: 19984,\r\n\t\t39073: 19989,\r\n\t\t39074: 20010,\r\n\t\t39075: 20017,\r\n\t\t39076: 20022,\r\n\t\t39077: 20028,\r\n\t\t39078: 20031,\r\n\t\t39079: 20034,\r\n\t\t39080: 20054,\r\n\t\t39081: 20056,\r\n\t\t39082: 20098,\r\n\t\t39083: 20101,\r\n\t\t39084: 35947,\r\n\t\t39085: 20106,\r\n\t\t39086: 33298,\r\n\t\t39087: 24333,\r\n\t\t39088: 20110,\r\n\t\t39089: 20126,\r\n\t\t39090: 20127,\r\n\t\t39091: 20128,\r\n\t\t39092: 20130,\r\n\t\t39093: 20144,\r\n\t\t39094: 20147,\r\n\t\t39095: 20150,\r\n\t\t39096: 20174,\r\n\t\t39097: 20173,\r\n\t\t39098: 20164,\r\n\t\t39099: 20166,\r\n\t\t39100: 20162,\r\n\t\t39101: 20183,\r\n\t\t39102: 20190,\r\n\t\t39103: 20205,\r\n\t\t39104: 20191,\r\n\t\t39105: 20215,\r\n\t\t39106: 20233,\r\n\t\t39107: 20314,\r\n\t\t39108: 20272,\r\n\t\t39109: 20315,\r\n\t\t39110: 20317,\r\n\t\t39111: 20311,\r\n\t\t39112: 20295,\r\n\t\t39113: 20342,\r\n\t\t39114: 20360,\r\n\t\t39115: 20367,\r\n\t\t39116: 20376,\r\n\t\t39117: 20347,\r\n\t\t39118: 20329,\r\n\t\t39119: 20336,\r\n\t\t39120: 20369,\r\n\t\t39121: 20335,\r\n\t\t39122: 20358,\r\n\t\t39123: 20374,\r\n\t\t39124: 20760,\r\n\t\t39125: 20436,\r\n\t\t39126: 20447,\r\n\t\t39127: 20430,\r\n\t\t39128: 20440,\r\n\t\t39129: 20443,\r\n\t\t39130: 20433,\r\n\t\t39131: 20442,\r\n\t\t39132: 20432,\r\n\t\t39133: 20452,\r\n\t\t39134: 20453,\r\n\t\t39135: 20506,\r\n\t\t39136: 20520,\r\n\t\t39137: 20500,\r\n\t\t39138: 20522,\r\n\t\t39139: 20517,\r\n\t\t39140: 20485,\r\n\t\t39141: 20252,\r\n\t\t39142: 20470,\r\n\t\t39143: 20513,\r\n\t\t39144: 20521,\r\n\t\t39145: 20524,\r\n\t\t39146: 20478,\r\n\t\t39147: 20463,\r\n\t\t39148: 20497,\r\n\t\t39149: 20486,\r\n\t\t39150: 20547,\r\n\t\t39151: 20551,\r\n\t\t39152: 26371,\r\n\t\t39153: 20565,\r\n\t\t39154: 20560,\r\n\t\t39155: 20552,\r\n\t\t39156: 20570,\r\n\t\t39157: 20566,\r\n\t\t39158: 20588,\r\n\t\t39159: 20600,\r\n\t\t39160: 20608,\r\n\t\t39161: 20634,\r\n\t\t39162: 20613,\r\n\t\t39163: 20660,\r\n\t\t39164: 20658,\r\n\t\t39232: 20681,\r\n\t\t39233: 20682,\r\n\t\t39234: 20659,\r\n\t\t39235: 20674,\r\n\t\t39236: 20694,\r\n\t\t39237: 20702,\r\n\t\t39238: 20709,\r\n\t\t39239: 20717,\r\n\t\t39240: 20707,\r\n\t\t39241: 20718,\r\n\t\t39242: 20729,\r\n\t\t39243: 20725,\r\n\t\t39244: 20745,\r\n\t\t39245: 20737,\r\n\t\t39246: 20738,\r\n\t\t39247: 20758,\r\n\t\t39248: 20757,\r\n\t\t39249: 20756,\r\n\t\t39250: 20762,\r\n\t\t39251: 20769,\r\n\t\t39252: 20794,\r\n\t\t39253: 20791,\r\n\t\t39254: 20796,\r\n\t\t39255: 20795,\r\n\t\t39256: 20799,\r\n\t\t39257: 20800,\r\n\t\t39258: 20818,\r\n\t\t39259: 20812,\r\n\t\t39260: 20820,\r\n\t\t39261: 20834,\r\n\t\t39262: 31480,\r\n\t\t39263: 20841,\r\n\t\t39264: 20842,\r\n\t\t39265: 20846,\r\n\t\t39266: 20864,\r\n\t\t39267: 20866,\r\n\t\t39268: 22232,\r\n\t\t39269: 20876,\r\n\t\t39270: 20873,\r\n\t\t39271: 20879,\r\n\t\t39272: 20881,\r\n\t\t39273: 20883,\r\n\t\t39274: 20885,\r\n\t\t39275: 20886,\r\n\t\t39276: 20900,\r\n\t\t39277: 20902,\r\n\t\t39278: 20898,\r\n\t\t39279: 20905,\r\n\t\t39280: 20906,\r\n\t\t39281: 20907,\r\n\t\t39282: 20915,\r\n\t\t39283: 20913,\r\n\t\t39284: 20914,\r\n\t\t39285: 20912,\r\n\t\t39286: 20917,\r\n\t\t39287: 20925,\r\n\t\t39288: 20933,\r\n\t\t39289: 20937,\r\n\t\t39290: 20955,\r\n\t\t39291: 20960,\r\n\t\t39292: 34389,\r\n\t\t39293: 20969,\r\n\t\t39294: 20973,\r\n\t\t39296: 20976,\r\n\t\t39297: 20981,\r\n\t\t39298: 20990,\r\n\t\t39299: 20996,\r\n\t\t39300: 21003,\r\n\t\t39301: 21012,\r\n\t\t39302: 21006,\r\n\t\t39303: 21031,\r\n\t\t39304: 21034,\r\n\t\t39305: 21038,\r\n\t\t39306: 21043,\r\n\t\t39307: 21049,\r\n\t\t39308: 21071,\r\n\t\t39309: 21060,\r\n\t\t39310: 21067,\r\n\t\t39311: 21068,\r\n\t\t39312: 21086,\r\n\t\t39313: 21076,\r\n\t\t39314: 21098,\r\n\t\t39315: 21108,\r\n\t\t39316: 21097,\r\n\t\t39317: 21107,\r\n\t\t39318: 21119,\r\n\t\t39319: 21117,\r\n\t\t39320: 21133,\r\n\t\t39321: 21140,\r\n\t\t39322: 21138,\r\n\t\t39323: 21105,\r\n\t\t39324: 21128,\r\n\t\t39325: 21137,\r\n\t\t39326: 36776,\r\n\t\t39327: 36775,\r\n\t\t39328: 21164,\r\n\t\t39329: 21165,\r\n\t\t39330: 21180,\r\n\t\t39331: 21173,\r\n\t\t39332: 21185,\r\n\t\t39333: 21197,\r\n\t\t39334: 21207,\r\n\t\t39335: 21214,\r\n\t\t39336: 21219,\r\n\t\t39337: 21222,\r\n\t\t39338: 39149,\r\n\t\t39339: 21216,\r\n\t\t39340: 21235,\r\n\t\t39341: 21237,\r\n\t\t39342: 21240,\r\n\t\t39343: 21241,\r\n\t\t39344: 21254,\r\n\t\t39345: 21256,\r\n\t\t39346: 30008,\r\n\t\t39347: 21261,\r\n\t\t39348: 21264,\r\n\t\t39349: 21263,\r\n\t\t39350: 21269,\r\n\t\t39351: 21274,\r\n\t\t39352: 21283,\r\n\t\t39353: 21295,\r\n\t\t39354: 21297,\r\n\t\t39355: 21299,\r\n\t\t39356: 21304,\r\n\t\t39357: 21312,\r\n\t\t39358: 21318,\r\n\t\t39359: 21317,\r\n\t\t39360: 19991,\r\n\t\t39361: 21321,\r\n\t\t39362: 21325,\r\n\t\t39363: 20950,\r\n\t\t39364: 21342,\r\n\t\t39365: 21353,\r\n\t\t39366: 21358,\r\n\t\t39367: 22808,\r\n\t\t39368: 21371,\r\n\t\t39369: 21367,\r\n\t\t39370: 21378,\r\n\t\t39371: 21398,\r\n\t\t39372: 21408,\r\n\t\t39373: 21414,\r\n\t\t39374: 21413,\r\n\t\t39375: 21422,\r\n\t\t39376: 21424,\r\n\t\t39377: 21430,\r\n\t\t39378: 21443,\r\n\t\t39379: 31762,\r\n\t\t39380: 38617,\r\n\t\t39381: 21471,\r\n\t\t39382: 26364,\r\n\t\t39383: 29166,\r\n\t\t39384: 21486,\r\n\t\t39385: 21480,\r\n\t\t39386: 21485,\r\n\t\t39387: 21498,\r\n\t\t39388: 21505,\r\n\t\t39389: 21565,\r\n\t\t39390: 21568,\r\n\t\t39391: 21548,\r\n\t\t39392: 21549,\r\n\t\t39393: 21564,\r\n\t\t39394: 21550,\r\n\t\t39395: 21558,\r\n\t\t39396: 21545,\r\n\t\t39397: 21533,\r\n\t\t39398: 21582,\r\n\t\t39399: 21647,\r\n\t\t39400: 21621,\r\n\t\t39401: 21646,\r\n\t\t39402: 21599,\r\n\t\t39403: 21617,\r\n\t\t39404: 21623,\r\n\t\t39405: 21616,\r\n\t\t39406: 21650,\r\n\t\t39407: 21627,\r\n\t\t39408: 21632,\r\n\t\t39409: 21622,\r\n\t\t39410: 21636,\r\n\t\t39411: 21648,\r\n\t\t39412: 21638,\r\n\t\t39413: 21703,\r\n\t\t39414: 21666,\r\n\t\t39415: 21688,\r\n\t\t39416: 21669,\r\n\t\t39417: 21676,\r\n\t\t39418: 21700,\r\n\t\t39419: 21704,\r\n\t\t39420: 21672,\r\n\t\t39488: 21675,\r\n\t\t39489: 21698,\r\n\t\t39490: 21668,\r\n\t\t39491: 21694,\r\n\t\t39492: 21692,\r\n\t\t39493: 21720,\r\n\t\t39494: 21733,\r\n\t\t39495: 21734,\r\n\t\t39496: 21775,\r\n\t\t39497: 21780,\r\n\t\t39498: 21757,\r\n\t\t39499: 21742,\r\n\t\t39500: 21741,\r\n\t\t39501: 21754,\r\n\t\t39502: 21730,\r\n\t\t39503: 21817,\r\n\t\t39504: 21824,\r\n\t\t39505: 21859,\r\n\t\t39506: 21836,\r\n\t\t39507: 21806,\r\n\t\t39508: 21852,\r\n\t\t39509: 21829,\r\n\t\t39510: 21846,\r\n\t\t39511: 21847,\r\n\t\t39512: 21816,\r\n\t\t39513: 21811,\r\n\t\t39514: 21853,\r\n\t\t39515: 21913,\r\n\t\t39516: 21888,\r\n\t\t39517: 21679,\r\n\t\t39518: 21898,\r\n\t\t39519: 21919,\r\n\t\t39520: 21883,\r\n\t\t39521: 21886,\r\n\t\t39522: 21912,\r\n\t\t39523: 21918,\r\n\t\t39524: 21934,\r\n\t\t39525: 21884,\r\n\t\t39526: 21891,\r\n\t\t39527: 21929,\r\n\t\t39528: 21895,\r\n\t\t39529: 21928,\r\n\t\t39530: 21978,\r\n\t\t39531: 21957,\r\n\t\t39532: 21983,\r\n\t\t39533: 21956,\r\n\t\t39534: 21980,\r\n\t\t39535: 21988,\r\n\t\t39536: 21972,\r\n\t\t39537: 22036,\r\n\t\t39538: 22007,\r\n\t\t39539: 22038,\r\n\t\t39540: 22014,\r\n\t\t39541: 22013,\r\n\t\t39542: 22043,\r\n\t\t39543: 22009,\r\n\t\t39544: 22094,\r\n\t\t39545: 22096,\r\n\t\t39546: 29151,\r\n\t\t39547: 22068,\r\n\t\t39548: 22070,\r\n\t\t39549: 22066,\r\n\t\t39550: 22072,\r\n\t\t39552: 22123,\r\n\t\t39553: 22116,\r\n\t\t39554: 22063,\r\n\t\t39555: 22124,\r\n\t\t39556: 22122,\r\n\t\t39557: 22150,\r\n\t\t39558: 22144,\r\n\t\t39559: 22154,\r\n\t\t39560: 22176,\r\n\t\t39561: 22164,\r\n\t\t39562: 22159,\r\n\t\t39563: 22181,\r\n\t\t39564: 22190,\r\n\t\t39565: 22198,\r\n\t\t39566: 22196,\r\n\t\t39567: 22210,\r\n\t\t39568: 22204,\r\n\t\t39569: 22209,\r\n\t\t39570: 22211,\r\n\t\t39571: 22208,\r\n\t\t39572: 22216,\r\n\t\t39573: 22222,\r\n\t\t39574: 22225,\r\n\t\t39575: 22227,\r\n\t\t39576: 22231,\r\n\t\t39577: 22254,\r\n\t\t39578: 22265,\r\n\t\t39579: 22272,\r\n\t\t39580: 22271,\r\n\t\t39581: 22276,\r\n\t\t39582: 22281,\r\n\t\t39583: 22280,\r\n\t\t39584: 22283,\r\n\t\t39585: 22285,\r\n\t\t39586: 22291,\r\n\t\t39587: 22296,\r\n\t\t39588: 22294,\r\n\t\t39589: 21959,\r\n\t\t39590: 22300,\r\n\t\t39591: 22310,\r\n\t\t39592: 22327,\r\n\t\t39593: 22328,\r\n\t\t39594: 22350,\r\n\t\t39595: 22331,\r\n\t\t39596: 22336,\r\n\t\t39597: 22351,\r\n\t\t39598: 22377,\r\n\t\t39599: 22464,\r\n\t\t39600: 22408,\r\n\t\t39601: 22369,\r\n\t\t39602: 22399,\r\n\t\t39603: 22409,\r\n\t\t39604: 22419,\r\n\t\t39605: 22432,\r\n\t\t39606: 22451,\r\n\t\t39607: 22436,\r\n\t\t39608: 22442,\r\n\t\t39609: 22448,\r\n\t\t39610: 22467,\r\n\t\t39611: 22470,\r\n\t\t39612: 22484,\r\n\t\t39613: 22482,\r\n\t\t39614: 22483,\r\n\t\t39615: 22538,\r\n\t\t39616: 22486,\r\n\t\t39617: 22499,\r\n\t\t39618: 22539,\r\n\t\t39619: 22553,\r\n\t\t39620: 22557,\r\n\t\t39621: 22642,\r\n\t\t39622: 22561,\r\n\t\t39623: 22626,\r\n\t\t39624: 22603,\r\n\t\t39625: 22640,\r\n\t\t39626: 27584,\r\n\t\t39627: 22610,\r\n\t\t39628: 22589,\r\n\t\t39629: 22649,\r\n\t\t39630: 22661,\r\n\t\t39631: 22713,\r\n\t\t39632: 22687,\r\n\t\t39633: 22699,\r\n\t\t39634: 22714,\r\n\t\t39635: 22750,\r\n\t\t39636: 22715,\r\n\t\t39637: 22712,\r\n\t\t39638: 22702,\r\n\t\t39639: 22725,\r\n\t\t39640: 22739,\r\n\t\t39641: 22737,\r\n\t\t39642: 22743,\r\n\t\t39643: 22745,\r\n\t\t39644: 22744,\r\n\t\t39645: 22757,\r\n\t\t39646: 22748,\r\n\t\t39647: 22756,\r\n\t\t39648: 22751,\r\n\t\t39649: 22767,\r\n\t\t39650: 22778,\r\n\t\t39651: 22777,\r\n\t\t39652: 22779,\r\n\t\t39653: 22780,\r\n\t\t39654: 22781,\r\n\t\t39655: 22786,\r\n\t\t39656: 22794,\r\n\t\t39657: 22800,\r\n\t\t39658: 22811,\r\n\t\t39659: 26790,\r\n\t\t39660: 22821,\r\n\t\t39661: 22828,\r\n\t\t39662: 22829,\r\n\t\t39663: 22834,\r\n\t\t39664: 22840,\r\n\t\t39665: 22846,\r\n\t\t39666: 31442,\r\n\t\t39667: 22869,\r\n\t\t39668: 22864,\r\n\t\t39669: 22862,\r\n\t\t39670: 22874,\r\n\t\t39671: 22872,\r\n\t\t39672: 22882,\r\n\t\t39673: 22880,\r\n\t\t39674: 22887,\r\n\t\t39675: 22892,\r\n\t\t39676: 22889,\r\n\t\t39744: 22904,\r\n\t\t39745: 22913,\r\n\t\t39746: 22941,\r\n\t\t39747: 20318,\r\n\t\t39748: 20395,\r\n\t\t39749: 22947,\r\n\t\t39750: 22962,\r\n\t\t39751: 22982,\r\n\t\t39752: 23016,\r\n\t\t39753: 23004,\r\n\t\t39754: 22925,\r\n\t\t39755: 23001,\r\n\t\t39756: 23002,\r\n\t\t39757: 23077,\r\n\t\t39758: 23071,\r\n\t\t39759: 23057,\r\n\t\t39760: 23068,\r\n\t\t39761: 23049,\r\n\t\t39762: 23066,\r\n\t\t39763: 23104,\r\n\t\t39764: 23148,\r\n\t\t39765: 23113,\r\n\t\t39766: 23093,\r\n\t\t39767: 23094,\r\n\t\t39768: 23138,\r\n\t\t39769: 23146,\r\n\t\t39770: 23194,\r\n\t\t39771: 23228,\r\n\t\t39772: 23230,\r\n\t\t39773: 23243,\r\n\t\t39774: 23234,\r\n\t\t39775: 23229,\r\n\t\t39776: 23267,\r\n\t\t39777: 23255,\r\n\t\t39778: 23270,\r\n\t\t39779: 23273,\r\n\t\t39780: 23254,\r\n\t\t39781: 23290,\r\n\t\t39782: 23291,\r\n\t\t39783: 23308,\r\n\t\t39784: 23307,\r\n\t\t39785: 23318,\r\n\t\t39786: 23346,\r\n\t\t39787: 23248,\r\n\t\t39788: 23338,\r\n\t\t39789: 23350,\r\n\t\t39790: 23358,\r\n\t\t39791: 23363,\r\n\t\t39792: 23365,\r\n\t\t39793: 23360,\r\n\t\t39794: 23377,\r\n\t\t39795: 23381,\r\n\t\t39796: 23386,\r\n\t\t39797: 23387,\r\n\t\t39798: 23397,\r\n\t\t39799: 23401,\r\n\t\t39800: 23408,\r\n\t\t39801: 23411,\r\n\t\t39802: 23413,\r\n\t\t39803: 23416,\r\n\t\t39804: 25992,\r\n\t\t39805: 23418,\r\n\t\t39806: 23424,\r\n\t\t39808: 23427,\r\n\t\t39809: 23462,\r\n\t\t39810: 23480,\r\n\t\t39811: 23491,\r\n\t\t39812: 23495,\r\n\t\t39813: 23497,\r\n\t\t39814: 23508,\r\n\t\t39815: 23504,\r\n\t\t39816: 23524,\r\n\t\t39817: 23526,\r\n\t\t39818: 23522,\r\n\t\t39819: 23518,\r\n\t\t39820: 23525,\r\n\t\t39821: 23531,\r\n\t\t39822: 23536,\r\n\t\t39823: 23542,\r\n\t\t39824: 23539,\r\n\t\t39825: 23557,\r\n\t\t39826: 23559,\r\n\t\t39827: 23560,\r\n\t\t39828: 23565,\r\n\t\t39829: 23571,\r\n\t\t39830: 23584,\r\n\t\t39831: 23586,\r\n\t\t39832: 23592,\r\n\t\t39833: 23608,\r\n\t\t39834: 23609,\r\n\t\t39835: 23617,\r\n\t\t39836: 23622,\r\n\t\t39837: 23630,\r\n\t\t39838: 23635,\r\n\t\t39839: 23632,\r\n\t\t39840: 23631,\r\n\t\t39841: 23409,\r\n\t\t39842: 23660,\r\n\t\t39843: 23662,\r\n\t\t39844: 20066,\r\n\t\t39845: 23670,\r\n\t\t39846: 23673,\r\n\t\t39847: 23692,\r\n\t\t39848: 23697,\r\n\t\t39849: 23700,\r\n\t\t39850: 22939,\r\n\t\t39851: 23723,\r\n\t\t39852: 23739,\r\n\t\t39853: 23734,\r\n\t\t39854: 23740,\r\n\t\t39855: 23735,\r\n\t\t39856: 23749,\r\n\t\t39857: 23742,\r\n\t\t39858: 23751,\r\n\t\t39859: 23769,\r\n\t\t39860: 23785,\r\n\t\t39861: 23805,\r\n\t\t39862: 23802,\r\n\t\t39863: 23789,\r\n\t\t39864: 23948,\r\n\t\t39865: 23786,\r\n\t\t39866: 23819,\r\n\t\t39867: 23829,\r\n\t\t39868: 23831,\r\n\t\t39869: 23900,\r\n\t\t39870: 23839,\r\n\t\t39871: 23835,\r\n\t\t39872: 23825,\r\n\t\t39873: 23828,\r\n\t\t39874: 23842,\r\n\t\t39875: 23834,\r\n\t\t39876: 23833,\r\n\t\t39877: 23832,\r\n\t\t39878: 23884,\r\n\t\t39879: 23890,\r\n\t\t39880: 23886,\r\n\t\t39881: 23883,\r\n\t\t39882: 23916,\r\n\t\t39883: 23923,\r\n\t\t39884: 23926,\r\n\t\t39885: 23943,\r\n\t\t39886: 23940,\r\n\t\t39887: 23938,\r\n\t\t39888: 23970,\r\n\t\t39889: 23965,\r\n\t\t39890: 23980,\r\n\t\t39891: 23982,\r\n\t\t39892: 23997,\r\n\t\t39893: 23952,\r\n\t\t39894: 23991,\r\n\t\t39895: 23996,\r\n\t\t39896: 24009,\r\n\t\t39897: 24013,\r\n\t\t39898: 24019,\r\n\t\t39899: 24018,\r\n\t\t39900: 24022,\r\n\t\t39901: 24027,\r\n\t\t39902: 24043,\r\n\t\t39903: 24050,\r\n\t\t39904: 24053,\r\n\t\t39905: 24075,\r\n\t\t39906: 24090,\r\n\t\t39907: 24089,\r\n\t\t39908: 24081,\r\n\t\t39909: 24091,\r\n\t\t39910: 24118,\r\n\t\t39911: 24119,\r\n\t\t39912: 24132,\r\n\t\t39913: 24131,\r\n\t\t39914: 24128,\r\n\t\t39915: 24142,\r\n\t\t39916: 24151,\r\n\t\t39917: 24148,\r\n\t\t39918: 24159,\r\n\t\t39919: 24162,\r\n\t\t39920: 24164,\r\n\t\t39921: 24135,\r\n\t\t39922: 24181,\r\n\t\t39923: 24182,\r\n\t\t39924: 24186,\r\n\t\t39925: 40636,\r\n\t\t39926: 24191,\r\n\t\t39927: 24224,\r\n\t\t39928: 24257,\r\n\t\t39929: 24258,\r\n\t\t39930: 24264,\r\n\t\t39931: 24272,\r\n\t\t39932: 24271,\r\n\t\t40000: 24278,\r\n\t\t40001: 24291,\r\n\t\t40002: 24285,\r\n\t\t40003: 24282,\r\n\t\t40004: 24283,\r\n\t\t40005: 24290,\r\n\t\t40006: 24289,\r\n\t\t40007: 24296,\r\n\t\t40008: 24297,\r\n\t\t40009: 24300,\r\n\t\t40010: 24305,\r\n\t\t40011: 24307,\r\n\t\t40012: 24304,\r\n\t\t40013: 24308,\r\n\t\t40014: 24312,\r\n\t\t40015: 24318,\r\n\t\t40016: 24323,\r\n\t\t40017: 24329,\r\n\t\t40018: 24413,\r\n\t\t40019: 24412,\r\n\t\t40020: 24331,\r\n\t\t40021: 24337,\r\n\t\t40022: 24342,\r\n\t\t40023: 24361,\r\n\t\t40024: 24365,\r\n\t\t40025: 24376,\r\n\t\t40026: 24385,\r\n\t\t40027: 24392,\r\n\t\t40028: 24396,\r\n\t\t40029: 24398,\r\n\t\t40030: 24367,\r\n\t\t40031: 24401,\r\n\t\t40032: 24406,\r\n\t\t40033: 24407,\r\n\t\t40034: 24409,\r\n\t\t40035: 24417,\r\n\t\t40036: 24429,\r\n\t\t40037: 24435,\r\n\t\t40038: 24439,\r\n\t\t40039: 24451,\r\n\t\t40040: 24450,\r\n\t\t40041: 24447,\r\n\t\t40042: 24458,\r\n\t\t40043: 24456,\r\n\t\t40044: 24465,\r\n\t\t40045: 24455,\r\n\t\t40046: 24478,\r\n\t\t40047: 24473,\r\n\t\t40048: 24472,\r\n\t\t40049: 24480,\r\n\t\t40050: 24488,\r\n\t\t40051: 24493,\r\n\t\t40052: 24508,\r\n\t\t40053: 24534,\r\n\t\t40054: 24571,\r\n\t\t40055: 24548,\r\n\t\t40056: 24568,\r\n\t\t40057: 24561,\r\n\t\t40058: 24541,\r\n\t\t40059: 24755,\r\n\t\t40060: 24575,\r\n\t\t40061: 24609,\r\n\t\t40062: 24672,\r\n\t\t40064: 24601,\r\n\t\t40065: 24592,\r\n\t\t40066: 24617,\r\n\t\t40067: 24590,\r\n\t\t40068: 24625,\r\n\t\t40069: 24603,\r\n\t\t40070: 24597,\r\n\t\t40071: 24619,\r\n\t\t40072: 24614,\r\n\t\t40073: 24591,\r\n\t\t40074: 24634,\r\n\t\t40075: 24666,\r\n\t\t40076: 24641,\r\n\t\t40077: 24682,\r\n\t\t40078: 24695,\r\n\t\t40079: 24671,\r\n\t\t40080: 24650,\r\n\t\t40081: 24646,\r\n\t\t40082: 24653,\r\n\t\t40083: 24675,\r\n\t\t40084: 24643,\r\n\t\t40085: 24676,\r\n\t\t40086: 24642,\r\n\t\t40087: 24684,\r\n\t\t40088: 24683,\r\n\t\t40089: 24665,\r\n\t\t40090: 24705,\r\n\t\t40091: 24717,\r\n\t\t40092: 24807,\r\n\t\t40093: 24707,\r\n\t\t40094: 24730,\r\n\t\t40095: 24708,\r\n\t\t40096: 24731,\r\n\t\t40097: 24726,\r\n\t\t40098: 24727,\r\n\t\t40099: 24722,\r\n\t\t40100: 24743,\r\n\t\t40101: 24715,\r\n\t\t40102: 24801,\r\n\t\t40103: 24760,\r\n\t\t40104: 24800,\r\n\t\t40105: 24787,\r\n\t\t40106: 24756,\r\n\t\t40107: 24560,\r\n\t\t40108: 24765,\r\n\t\t40109: 24774,\r\n\t\t40110: 24757,\r\n\t\t40111: 24792,\r\n\t\t40112: 24909,\r\n\t\t40113: 24853,\r\n\t\t40114: 24838,\r\n\t\t40115: 24822,\r\n\t\t40116: 24823,\r\n\t\t40117: 24832,\r\n\t\t40118: 24820,\r\n\t\t40119: 24826,\r\n\t\t40120: 24835,\r\n\t\t40121: 24865,\r\n\t\t40122: 24827,\r\n\t\t40123: 24817,\r\n\t\t40124: 24845,\r\n\t\t40125: 24846,\r\n\t\t40126: 24903,\r\n\t\t40127: 24894,\r\n\t\t40128: 24872,\r\n\t\t40129: 24871,\r\n\t\t40130: 24906,\r\n\t\t40131: 24895,\r\n\t\t40132: 24892,\r\n\t\t40133: 24876,\r\n\t\t40134: 24884,\r\n\t\t40135: 24893,\r\n\t\t40136: 24898,\r\n\t\t40137: 24900,\r\n\t\t40138: 24947,\r\n\t\t40139: 24951,\r\n\t\t40140: 24920,\r\n\t\t40141: 24921,\r\n\t\t40142: 24922,\r\n\t\t40143: 24939,\r\n\t\t40144: 24948,\r\n\t\t40145: 24943,\r\n\t\t40146: 24933,\r\n\t\t40147: 24945,\r\n\t\t40148: 24927,\r\n\t\t40149: 24925,\r\n\t\t40150: 24915,\r\n\t\t40151: 24949,\r\n\t\t40152: 24985,\r\n\t\t40153: 24982,\r\n\t\t40154: 24967,\r\n\t\t40155: 25004,\r\n\t\t40156: 24980,\r\n\t\t40157: 24986,\r\n\t\t40158: 24970,\r\n\t\t40159: 24977,\r\n\t\t40160: 25003,\r\n\t\t40161: 25006,\r\n\t\t40162: 25036,\r\n\t\t40163: 25034,\r\n\t\t40164: 25033,\r\n\t\t40165: 25079,\r\n\t\t40166: 25032,\r\n\t\t40167: 25027,\r\n\t\t40168: 25030,\r\n\t\t40169: 25018,\r\n\t\t40170: 25035,\r\n\t\t40171: 32633,\r\n\t\t40172: 25037,\r\n\t\t40173: 25062,\r\n\t\t40174: 25059,\r\n\t\t40175: 25078,\r\n\t\t40176: 25082,\r\n\t\t40177: 25076,\r\n\t\t40178: 25087,\r\n\t\t40179: 25085,\r\n\t\t40180: 25084,\r\n\t\t40181: 25086,\r\n\t\t40182: 25088,\r\n\t\t40183: 25096,\r\n\t\t40184: 25097,\r\n\t\t40185: 25101,\r\n\t\t40186: 25100,\r\n\t\t40187: 25108,\r\n\t\t40188: 25115,\r\n\t\t40256: 25118,\r\n\t\t40257: 25121,\r\n\t\t40258: 25130,\r\n\t\t40259: 25134,\r\n\t\t40260: 25136,\r\n\t\t40261: 25138,\r\n\t\t40262: 25139,\r\n\t\t40263: 25153,\r\n\t\t40264: 25166,\r\n\t\t40265: 25182,\r\n\t\t40266: 25187,\r\n\t\t40267: 25179,\r\n\t\t40268: 25184,\r\n\t\t40269: 25192,\r\n\t\t40270: 25212,\r\n\t\t40271: 25218,\r\n\t\t40272: 25225,\r\n\t\t40273: 25214,\r\n\t\t40274: 25234,\r\n\t\t40275: 25235,\r\n\t\t40276: 25238,\r\n\t\t40277: 25300,\r\n\t\t40278: 25219,\r\n\t\t40279: 25236,\r\n\t\t40280: 25303,\r\n\t\t40281: 25297,\r\n\t\t40282: 25275,\r\n\t\t40283: 25295,\r\n\t\t40284: 25343,\r\n\t\t40285: 25286,\r\n\t\t40286: 25812,\r\n\t\t40287: 25288,\r\n\t\t40288: 25308,\r\n\t\t40289: 25292,\r\n\t\t40290: 25290,\r\n\t\t40291: 25282,\r\n\t\t40292: 25287,\r\n\t\t40293: 25243,\r\n\t\t40294: 25289,\r\n\t\t40295: 25356,\r\n\t\t40296: 25326,\r\n\t\t40297: 25329,\r\n\t\t40298: 25383,\r\n\t\t40299: 25346,\r\n\t\t40300: 25352,\r\n\t\t40301: 25327,\r\n\t\t40302: 25333,\r\n\t\t40303: 25424,\r\n\t\t40304: 25406,\r\n\t\t40305: 25421,\r\n\t\t40306: 25628,\r\n\t\t40307: 25423,\r\n\t\t40308: 25494,\r\n\t\t40309: 25486,\r\n\t\t40310: 25472,\r\n\t\t40311: 25515,\r\n\t\t40312: 25462,\r\n\t\t40313: 25507,\r\n\t\t40314: 25487,\r\n\t\t40315: 25481,\r\n\t\t40316: 25503,\r\n\t\t40317: 25525,\r\n\t\t40318: 25451,\r\n\t\t40320: 25449,\r\n\t\t40321: 25534,\r\n\t\t40322: 25577,\r\n\t\t40323: 25536,\r\n\t\t40324: 25542,\r\n\t\t40325: 25571,\r\n\t\t40326: 25545,\r\n\t\t40327: 25554,\r\n\t\t40328: 25590,\r\n\t\t40329: 25540,\r\n\t\t40330: 25622,\r\n\t\t40331: 25652,\r\n\t\t40332: 25606,\r\n\t\t40333: 25619,\r\n\t\t40334: 25638,\r\n\t\t40335: 25654,\r\n\t\t40336: 25885,\r\n\t\t40337: 25623,\r\n\t\t40338: 25640,\r\n\t\t40339: 25615,\r\n\t\t40340: 25703,\r\n\t\t40341: 25711,\r\n\t\t40342: 25718,\r\n\t\t40343: 25678,\r\n\t\t40344: 25898,\r\n\t\t40345: 25749,\r\n\t\t40346: 25747,\r\n\t\t40347: 25765,\r\n\t\t40348: 25769,\r\n\t\t40349: 25736,\r\n\t\t40350: 25788,\r\n\t\t40351: 25818,\r\n\t\t40352: 25810,\r\n\t\t40353: 25797,\r\n\t\t40354: 25799,\r\n\t\t40355: 25787,\r\n\t\t40356: 25816,\r\n\t\t40357: 25794,\r\n\t\t40358: 25841,\r\n\t\t40359: 25831,\r\n\t\t40360: 33289,\r\n\t\t40361: 25824,\r\n\t\t40362: 25825,\r\n\t\t40363: 25260,\r\n\t\t40364: 25827,\r\n\t\t40365: 25839,\r\n\t\t40366: 25900,\r\n\t\t40367: 25846,\r\n\t\t40368: 25844,\r\n\t\t40369: 25842,\r\n\t\t40370: 25850,\r\n\t\t40371: 25856,\r\n\t\t40372: 25853,\r\n\t\t40373: 25880,\r\n\t\t40374: 25884,\r\n\t\t40375: 25861,\r\n\t\t40376: 25892,\r\n\t\t40377: 25891,\r\n\t\t40378: 25899,\r\n\t\t40379: 25908,\r\n\t\t40380: 25909,\r\n\t\t40381: 25911,\r\n\t\t40382: 25910,\r\n\t\t40383: 25912,\r\n\t\t40384: 30027,\r\n\t\t40385: 25928,\r\n\t\t40386: 25942,\r\n\t\t40387: 25941,\r\n\t\t40388: 25933,\r\n\t\t40389: 25944,\r\n\t\t40390: 25950,\r\n\t\t40391: 25949,\r\n\t\t40392: 25970,\r\n\t\t40393: 25976,\r\n\t\t40394: 25986,\r\n\t\t40395: 25987,\r\n\t\t40396: 35722,\r\n\t\t40397: 26011,\r\n\t\t40398: 26015,\r\n\t\t40399: 26027,\r\n\t\t40400: 26039,\r\n\t\t40401: 26051,\r\n\t\t40402: 26054,\r\n\t\t40403: 26049,\r\n\t\t40404: 26052,\r\n\t\t40405: 26060,\r\n\t\t40406: 26066,\r\n\t\t40407: 26075,\r\n\t\t40408: 26073,\r\n\t\t40409: 26080,\r\n\t\t40410: 26081,\r\n\t\t40411: 26097,\r\n\t\t40412: 26482,\r\n\t\t40413: 26122,\r\n\t\t40414: 26115,\r\n\t\t40415: 26107,\r\n\t\t40416: 26483,\r\n\t\t40417: 26165,\r\n\t\t40418: 26166,\r\n\t\t40419: 26164,\r\n\t\t40420: 26140,\r\n\t\t40421: 26191,\r\n\t\t40422: 26180,\r\n\t\t40423: 26185,\r\n\t\t40424: 26177,\r\n\t\t40425: 26206,\r\n\t\t40426: 26205,\r\n\t\t40427: 26212,\r\n\t\t40428: 26215,\r\n\t\t40429: 26216,\r\n\t\t40430: 26207,\r\n\t\t40431: 26210,\r\n\t\t40432: 26224,\r\n\t\t40433: 26243,\r\n\t\t40434: 26248,\r\n\t\t40435: 26254,\r\n\t\t40436: 26249,\r\n\t\t40437: 26244,\r\n\t\t40438: 26264,\r\n\t\t40439: 26269,\r\n\t\t40440: 26305,\r\n\t\t40441: 26297,\r\n\t\t40442: 26313,\r\n\t\t40443: 26302,\r\n\t\t40444: 26300,\r\n\t\t40512: 26308,\r\n\t\t40513: 26296,\r\n\t\t40514: 26326,\r\n\t\t40515: 26330,\r\n\t\t40516: 26336,\r\n\t\t40517: 26175,\r\n\t\t40518: 26342,\r\n\t\t40519: 26345,\r\n\t\t40520: 26352,\r\n\t\t40521: 26357,\r\n\t\t40522: 26359,\r\n\t\t40523: 26383,\r\n\t\t40524: 26390,\r\n\t\t40525: 26398,\r\n\t\t40526: 26406,\r\n\t\t40527: 26407,\r\n\t\t40528: 38712,\r\n\t\t40529: 26414,\r\n\t\t40530: 26431,\r\n\t\t40531: 26422,\r\n\t\t40532: 26433,\r\n\t\t40533: 26424,\r\n\t\t40534: 26423,\r\n\t\t40535: 26438,\r\n\t\t40536: 26462,\r\n\t\t40537: 26464,\r\n\t\t40538: 26457,\r\n\t\t40539: 26467,\r\n\t\t40540: 26468,\r\n\t\t40541: 26505,\r\n\t\t40542: 26480,\r\n\t\t40543: 26537,\r\n\t\t40544: 26492,\r\n\t\t40545: 26474,\r\n\t\t40546: 26508,\r\n\t\t40547: 26507,\r\n\t\t40548: 26534,\r\n\t\t40549: 26529,\r\n\t\t40550: 26501,\r\n\t\t40551: 26551,\r\n\t\t40552: 26607,\r\n\t\t40553: 26548,\r\n\t\t40554: 26604,\r\n\t\t40555: 26547,\r\n\t\t40556: 26601,\r\n\t\t40557: 26552,\r\n\t\t40558: 26596,\r\n\t\t40559: 26590,\r\n\t\t40560: 26589,\r\n\t\t40561: 26594,\r\n\t\t40562: 26606,\r\n\t\t40563: 26553,\r\n\t\t40564: 26574,\r\n\t\t40565: 26566,\r\n\t\t40566: 26599,\r\n\t\t40567: 27292,\r\n\t\t40568: 26654,\r\n\t\t40569: 26694,\r\n\t\t40570: 26665,\r\n\t\t40571: 26688,\r\n\t\t40572: 26701,\r\n\t\t40573: 26674,\r\n\t\t40574: 26702,\r\n\t\t40576: 26803,\r\n\t\t40577: 26667,\r\n\t\t40578: 26713,\r\n\t\t40579: 26723,\r\n\t\t40580: 26743,\r\n\t\t40581: 26751,\r\n\t\t40582: 26783,\r\n\t\t40583: 26767,\r\n\t\t40584: 26797,\r\n\t\t40585: 26772,\r\n\t\t40586: 26781,\r\n\t\t40587: 26779,\r\n\t\t40588: 26755,\r\n\t\t40589: 27310,\r\n\t\t40590: 26809,\r\n\t\t40591: 26740,\r\n\t\t40592: 26805,\r\n\t\t40593: 26784,\r\n\t\t40594: 26810,\r\n\t\t40595: 26895,\r\n\t\t40596: 26765,\r\n\t\t40597: 26750,\r\n\t\t40598: 26881,\r\n\t\t40599: 26826,\r\n\t\t40600: 26888,\r\n\t\t40601: 26840,\r\n\t\t40602: 26914,\r\n\t\t40603: 26918,\r\n\t\t40604: 26849,\r\n\t\t40605: 26892,\r\n\t\t40606: 26829,\r\n\t\t40607: 26836,\r\n\t\t40608: 26855,\r\n\t\t40609: 26837,\r\n\t\t40610: 26934,\r\n\t\t40611: 26898,\r\n\t\t40612: 26884,\r\n\t\t40613: 26839,\r\n\t\t40614: 26851,\r\n\t\t40615: 26917,\r\n\t\t40616: 26873,\r\n\t\t40617: 26848,\r\n\t\t40618: 26863,\r\n\t\t40619: 26920,\r\n\t\t40620: 26922,\r\n\t\t40621: 26906,\r\n\t\t40622: 26915,\r\n\t\t40623: 26913,\r\n\t\t40624: 26822,\r\n\t\t40625: 27001,\r\n\t\t40626: 26999,\r\n\t\t40627: 26972,\r\n\t\t40628: 27000,\r\n\t\t40629: 26987,\r\n\t\t40630: 26964,\r\n\t\t40631: 27006,\r\n\t\t40632: 26990,\r\n\t\t40633: 26937,\r\n\t\t40634: 26996,\r\n\t\t40635: 26941,\r\n\t\t40636: 26969,\r\n\t\t40637: 26928,\r\n\t\t40638: 26977,\r\n\t\t40639: 26974,\r\n\t\t40640: 26973,\r\n\t\t40641: 27009,\r\n\t\t40642: 26986,\r\n\t\t40643: 27058,\r\n\t\t40644: 27054,\r\n\t\t40645: 27088,\r\n\t\t40646: 27071,\r\n\t\t40647: 27073,\r\n\t\t40648: 27091,\r\n\t\t40649: 27070,\r\n\t\t40650: 27086,\r\n\t\t40651: 23528,\r\n\t\t40652: 27082,\r\n\t\t40653: 27101,\r\n\t\t40654: 27067,\r\n\t\t40655: 27075,\r\n\t\t40656: 27047,\r\n\t\t40657: 27182,\r\n\t\t40658: 27025,\r\n\t\t40659: 27040,\r\n\t\t40660: 27036,\r\n\t\t40661: 27029,\r\n\t\t40662: 27060,\r\n\t\t40663: 27102,\r\n\t\t40664: 27112,\r\n\t\t40665: 27138,\r\n\t\t40666: 27163,\r\n\t\t40667: 27135,\r\n\t\t40668: 27402,\r\n\t\t40669: 27129,\r\n\t\t40670: 27122,\r\n\t\t40671: 27111,\r\n\t\t40672: 27141,\r\n\t\t40673: 27057,\r\n\t\t40674: 27166,\r\n\t\t40675: 27117,\r\n\t\t40676: 27156,\r\n\t\t40677: 27115,\r\n\t\t40678: 27146,\r\n\t\t40679: 27154,\r\n\t\t40680: 27329,\r\n\t\t40681: 27171,\r\n\t\t40682: 27155,\r\n\t\t40683: 27204,\r\n\t\t40684: 27148,\r\n\t\t40685: 27250,\r\n\t\t40686: 27190,\r\n\t\t40687: 27256,\r\n\t\t40688: 27207,\r\n\t\t40689: 27234,\r\n\t\t40690: 27225,\r\n\t\t40691: 27238,\r\n\t\t40692: 27208,\r\n\t\t40693: 27192,\r\n\t\t40694: 27170,\r\n\t\t40695: 27280,\r\n\t\t40696: 27277,\r\n\t\t40697: 27296,\r\n\t\t40698: 27268,\r\n\t\t40699: 27298,\r\n\t\t40700: 27299,\r\n\t\t40768: 27287,\r\n\t\t40769: 34327,\r\n\t\t40770: 27323,\r\n\t\t40771: 27331,\r\n\t\t40772: 27330,\r\n\t\t40773: 27320,\r\n\t\t40774: 27315,\r\n\t\t40775: 27308,\r\n\t\t40776: 27358,\r\n\t\t40777: 27345,\r\n\t\t40778: 27359,\r\n\t\t40779: 27306,\r\n\t\t40780: 27354,\r\n\t\t40781: 27370,\r\n\t\t40782: 27387,\r\n\t\t40783: 27397,\r\n\t\t40784: 34326,\r\n\t\t40785: 27386,\r\n\t\t40786: 27410,\r\n\t\t40787: 27414,\r\n\t\t40788: 39729,\r\n\t\t40789: 27423,\r\n\t\t40790: 27448,\r\n\t\t40791: 27447,\r\n\t\t40792: 30428,\r\n\t\t40793: 27449,\r\n\t\t40794: 39150,\r\n\t\t40795: 27463,\r\n\t\t40796: 27459,\r\n\t\t40797: 27465,\r\n\t\t40798: 27472,\r\n\t\t40799: 27481,\r\n\t\t40800: 27476,\r\n\t\t40801: 27483,\r\n\t\t40802: 27487,\r\n\t\t40803: 27489,\r\n\t\t40804: 27512,\r\n\t\t40805: 27513,\r\n\t\t40806: 27519,\r\n\t\t40807: 27520,\r\n\t\t40808: 27524,\r\n\t\t40809: 27523,\r\n\t\t40810: 27533,\r\n\t\t40811: 27544,\r\n\t\t40812: 27541,\r\n\t\t40813: 27550,\r\n\t\t40814: 27556,\r\n\t\t40815: 27562,\r\n\t\t40816: 27563,\r\n\t\t40817: 27567,\r\n\t\t40818: 27570,\r\n\t\t40819: 27569,\r\n\t\t40820: 27571,\r\n\t\t40821: 27575,\r\n\t\t40822: 27580,\r\n\t\t40823: 27590,\r\n\t\t40824: 27595,\r\n\t\t40825: 27603,\r\n\t\t40826: 27615,\r\n\t\t40827: 27628,\r\n\t\t40828: 27627,\r\n\t\t40829: 27635,\r\n\t\t40830: 27631,\r\n\t\t40832: 40638,\r\n\t\t40833: 27656,\r\n\t\t40834: 27667,\r\n\t\t40835: 27668,\r\n\t\t40836: 27675,\r\n\t\t40837: 27684,\r\n\t\t40838: 27683,\r\n\t\t40839: 27742,\r\n\t\t40840: 27733,\r\n\t\t40841: 27746,\r\n\t\t40842: 27754,\r\n\t\t40843: 27778,\r\n\t\t40844: 27789,\r\n\t\t40845: 27802,\r\n\t\t40846: 27777,\r\n\t\t40847: 27803,\r\n\t\t40848: 27774,\r\n\t\t40849: 27752,\r\n\t\t40850: 27763,\r\n\t\t40851: 27794,\r\n\t\t40852: 27792,\r\n\t\t40853: 27844,\r\n\t\t40854: 27889,\r\n\t\t40855: 27859,\r\n\t\t40856: 27837,\r\n\t\t40857: 27863,\r\n\t\t40858: 27845,\r\n\t\t40859: 27869,\r\n\t\t40860: 27822,\r\n\t\t40861: 27825,\r\n\t\t40862: 27838,\r\n\t\t40863: 27834,\r\n\t\t40864: 27867,\r\n\t\t40865: 27887,\r\n\t\t40866: 27865,\r\n\t\t40867: 27882,\r\n\t\t40868: 27935,\r\n\t\t40869: 34893,\r\n\t\t40870: 27958,\r\n\t\t40871: 27947,\r\n\t\t40872: 27965,\r\n\t\t40873: 27960,\r\n\t\t40874: 27929,\r\n\t\t40875: 27957,\r\n\t\t40876: 27955,\r\n\t\t40877: 27922,\r\n\t\t40878: 27916,\r\n\t\t40879: 28003,\r\n\t\t40880: 28051,\r\n\t\t40881: 28004,\r\n\t\t40882: 27994,\r\n\t\t40883: 28025,\r\n\t\t40884: 27993,\r\n\t\t40885: 28046,\r\n\t\t40886: 28053,\r\n\t\t40887: 28644,\r\n\t\t40888: 28037,\r\n\t\t40889: 28153,\r\n\t\t40890: 28181,\r\n\t\t40891: 28170,\r\n\t\t40892: 28085,\r\n\t\t40893: 28103,\r\n\t\t40894: 28134,\r\n\t\t40895: 28088,\r\n\t\t40896: 28102,\r\n\t\t40897: 28140,\r\n\t\t40898: 28126,\r\n\t\t40899: 28108,\r\n\t\t40900: 28136,\r\n\t\t40901: 28114,\r\n\t\t40902: 28101,\r\n\t\t40903: 28154,\r\n\t\t40904: 28121,\r\n\t\t40905: 28132,\r\n\t\t40906: 28117,\r\n\t\t40907: 28138,\r\n\t\t40908: 28142,\r\n\t\t40909: 28205,\r\n\t\t40910: 28270,\r\n\t\t40911: 28206,\r\n\t\t40912: 28185,\r\n\t\t40913: 28274,\r\n\t\t40914: 28255,\r\n\t\t40915: 28222,\r\n\t\t40916: 28195,\r\n\t\t40917: 28267,\r\n\t\t40918: 28203,\r\n\t\t40919: 28278,\r\n\t\t40920: 28237,\r\n\t\t40921: 28191,\r\n\t\t40922: 28227,\r\n\t\t40923: 28218,\r\n\t\t40924: 28238,\r\n\t\t40925: 28196,\r\n\t\t40926: 28415,\r\n\t\t40927: 28189,\r\n\t\t40928: 28216,\r\n\t\t40929: 28290,\r\n\t\t40930: 28330,\r\n\t\t40931: 28312,\r\n\t\t40932: 28361,\r\n\t\t40933: 28343,\r\n\t\t40934: 28371,\r\n\t\t40935: 28349,\r\n\t\t40936: 28335,\r\n\t\t40937: 28356,\r\n\t\t40938: 28338,\r\n\t\t40939: 28372,\r\n\t\t40940: 28373,\r\n\t\t40941: 28303,\r\n\t\t40942: 28325,\r\n\t\t40943: 28354,\r\n\t\t40944: 28319,\r\n\t\t40945: 28481,\r\n\t\t40946: 28433,\r\n\t\t40947: 28748,\r\n\t\t40948: 28396,\r\n\t\t40949: 28408,\r\n\t\t40950: 28414,\r\n\t\t40951: 28479,\r\n\t\t40952: 28402,\r\n\t\t40953: 28465,\r\n\t\t40954: 28399,\r\n\t\t40955: 28466,\r\n\t\t40956: 28364,\r\n\t\t57408: 28478,\r\n\t\t57409: 28435,\r\n\t\t57410: 28407,\r\n\t\t57411: 28550,\r\n\t\t57412: 28538,\r\n\t\t57413: 28536,\r\n\t\t57414: 28545,\r\n\t\t57415: 28544,\r\n\t\t57416: 28527,\r\n\t\t57417: 28507,\r\n\t\t57418: 28659,\r\n\t\t57419: 28525,\r\n\t\t57420: 28546,\r\n\t\t57421: 28540,\r\n\t\t57422: 28504,\r\n\t\t57423: 28558,\r\n\t\t57424: 28561,\r\n\t\t57425: 28610,\r\n\t\t57426: 28518,\r\n\t\t57427: 28595,\r\n\t\t57428: 28579,\r\n\t\t57429: 28577,\r\n\t\t57430: 28580,\r\n\t\t57431: 28601,\r\n\t\t57432: 28614,\r\n\t\t57433: 28586,\r\n\t\t57434: 28639,\r\n\t\t57435: 28629,\r\n\t\t57436: 28652,\r\n\t\t57437: 28628,\r\n\t\t57438: 28632,\r\n\t\t57439: 28657,\r\n\t\t57440: 28654,\r\n\t\t57441: 28635,\r\n\t\t57442: 28681,\r\n\t\t57443: 28683,\r\n\t\t57444: 28666,\r\n\t\t57445: 28689,\r\n\t\t57446: 28673,\r\n\t\t57447: 28687,\r\n\t\t57448: 28670,\r\n\t\t57449: 28699,\r\n\t\t57450: 28698,\r\n\t\t57451: 28532,\r\n\t\t57452: 28701,\r\n\t\t57453: 28696,\r\n\t\t57454: 28703,\r\n\t\t57455: 28720,\r\n\t\t57456: 28734,\r\n\t\t57457: 28722,\r\n\t\t57458: 28753,\r\n\t\t57459: 28771,\r\n\t\t57460: 28825,\r\n\t\t57461: 28818,\r\n\t\t57462: 28847,\r\n\t\t57463: 28913,\r\n\t\t57464: 28844,\r\n\t\t57465: 28856,\r\n\t\t57466: 28851,\r\n\t\t57467: 28846,\r\n\t\t57468: 28895,\r\n\t\t57469: 28875,\r\n\t\t57470: 28893,\r\n\t\t57472: 28889,\r\n\t\t57473: 28937,\r\n\t\t57474: 28925,\r\n\t\t57475: 28956,\r\n\t\t57476: 28953,\r\n\t\t57477: 29029,\r\n\t\t57478: 29013,\r\n\t\t57479: 29064,\r\n\t\t57480: 29030,\r\n\t\t57481: 29026,\r\n\t\t57482: 29004,\r\n\t\t57483: 29014,\r\n\t\t57484: 29036,\r\n\t\t57485: 29071,\r\n\t\t57486: 29179,\r\n\t\t57487: 29060,\r\n\t\t57488: 29077,\r\n\t\t57489: 29096,\r\n\t\t57490: 29100,\r\n\t\t57491: 29143,\r\n\t\t57492: 29113,\r\n\t\t57493: 29118,\r\n\t\t57494: 29138,\r\n\t\t57495: 29129,\r\n\t\t57496: 29140,\r\n\t\t57497: 29134,\r\n\t\t57498: 29152,\r\n\t\t57499: 29164,\r\n\t\t57500: 29159,\r\n\t\t57501: 29173,\r\n\t\t57502: 29180,\r\n\t\t57503: 29177,\r\n\t\t57504: 29183,\r\n\t\t57505: 29197,\r\n\t\t57506: 29200,\r\n\t\t57507: 29211,\r\n\t\t57508: 29224,\r\n\t\t57509: 29229,\r\n\t\t57510: 29228,\r\n\t\t57511: 29232,\r\n\t\t57512: 29234,\r\n\t\t57513: 29243,\r\n\t\t57514: 29244,\r\n\t\t57515: 29247,\r\n\t\t57516: 29248,\r\n\t\t57517: 29254,\r\n\t\t57518: 29259,\r\n\t\t57519: 29272,\r\n\t\t57520: 29300,\r\n\t\t57521: 29310,\r\n\t\t57522: 29314,\r\n\t\t57523: 29313,\r\n\t\t57524: 29319,\r\n\t\t57525: 29330,\r\n\t\t57526: 29334,\r\n\t\t57527: 29346,\r\n\t\t57528: 29351,\r\n\t\t57529: 29369,\r\n\t\t57530: 29362,\r\n\t\t57531: 29379,\r\n\t\t57532: 29382,\r\n\t\t57533: 29380,\r\n\t\t57534: 29390,\r\n\t\t57535: 29394,\r\n\t\t57536: 29410,\r\n\t\t57537: 29408,\r\n\t\t57538: 29409,\r\n\t\t57539: 29433,\r\n\t\t57540: 29431,\r\n\t\t57541: 20495,\r\n\t\t57542: 29463,\r\n\t\t57543: 29450,\r\n\t\t57544: 29468,\r\n\t\t57545: 29462,\r\n\t\t57546: 29469,\r\n\t\t57547: 29492,\r\n\t\t57548: 29487,\r\n\t\t57549: 29481,\r\n\t\t57550: 29477,\r\n\t\t57551: 29502,\r\n\t\t57552: 29518,\r\n\t\t57553: 29519,\r\n\t\t57554: 40664,\r\n\t\t57555: 29527,\r\n\t\t57556: 29546,\r\n\t\t57557: 29544,\r\n\t\t57558: 29552,\r\n\t\t57559: 29560,\r\n\t\t57560: 29557,\r\n\t\t57561: 29563,\r\n\t\t57562: 29562,\r\n\t\t57563: 29640,\r\n\t\t57564: 29619,\r\n\t\t57565: 29646,\r\n\t\t57566: 29627,\r\n\t\t57567: 29632,\r\n\t\t57568: 29669,\r\n\t\t57569: 29678,\r\n\t\t57570: 29662,\r\n\t\t57571: 29858,\r\n\t\t57572: 29701,\r\n\t\t57573: 29807,\r\n\t\t57574: 29733,\r\n\t\t57575: 29688,\r\n\t\t57576: 29746,\r\n\t\t57577: 29754,\r\n\t\t57578: 29781,\r\n\t\t57579: 29759,\r\n\t\t57580: 29791,\r\n\t\t57581: 29785,\r\n\t\t57582: 29761,\r\n\t\t57583: 29788,\r\n\t\t57584: 29801,\r\n\t\t57585: 29808,\r\n\t\t57586: 29795,\r\n\t\t57587: 29802,\r\n\t\t57588: 29814,\r\n\t\t57589: 29822,\r\n\t\t57590: 29835,\r\n\t\t57591: 29854,\r\n\t\t57592: 29863,\r\n\t\t57593: 29898,\r\n\t\t57594: 29903,\r\n\t\t57595: 29908,\r\n\t\t57596: 29681,\r\n\t\t57664: 29920,\r\n\t\t57665: 29923,\r\n\t\t57666: 29927,\r\n\t\t57667: 29929,\r\n\t\t57668: 29934,\r\n\t\t57669: 29938,\r\n\t\t57670: 29936,\r\n\t\t57671: 29937,\r\n\t\t57672: 29944,\r\n\t\t57673: 29943,\r\n\t\t57674: 29956,\r\n\t\t57675: 29955,\r\n\t\t57676: 29957,\r\n\t\t57677: 29964,\r\n\t\t57678: 29966,\r\n\t\t57679: 29965,\r\n\t\t57680: 29973,\r\n\t\t57681: 29971,\r\n\t\t57682: 29982,\r\n\t\t57683: 29990,\r\n\t\t57684: 29996,\r\n\t\t57685: 30012,\r\n\t\t57686: 30020,\r\n\t\t57687: 30029,\r\n\t\t57688: 30026,\r\n\t\t57689: 30025,\r\n\t\t57690: 30043,\r\n\t\t57691: 30022,\r\n\t\t57692: 30042,\r\n\t\t57693: 30057,\r\n\t\t57694: 30052,\r\n\t\t57695: 30055,\r\n\t\t57696: 30059,\r\n\t\t57697: 30061,\r\n\t\t57698: 30072,\r\n\t\t57699: 30070,\r\n\t\t57700: 30086,\r\n\t\t57701: 30087,\r\n\t\t57702: 30068,\r\n\t\t57703: 30090,\r\n\t\t57704: 30089,\r\n\t\t57705: 30082,\r\n\t\t57706: 30100,\r\n\t\t57707: 30106,\r\n\t\t57708: 30109,\r\n\t\t57709: 30117,\r\n\t\t57710: 30115,\r\n\t\t57711: 30146,\r\n\t\t57712: 30131,\r\n\t\t57713: 30147,\r\n\t\t57714: 30133,\r\n\t\t57715: 30141,\r\n\t\t57716: 30136,\r\n\t\t57717: 30140,\r\n\t\t57718: 30129,\r\n\t\t57719: 30157,\r\n\t\t57720: 30154,\r\n\t\t57721: 30162,\r\n\t\t57722: 30169,\r\n\t\t57723: 30179,\r\n\t\t57724: 30174,\r\n\t\t57725: 30206,\r\n\t\t57726: 30207,\r\n\t\t57728: 30204,\r\n\t\t57729: 30209,\r\n\t\t57730: 30192,\r\n\t\t57731: 30202,\r\n\t\t57732: 30194,\r\n\t\t57733: 30195,\r\n\t\t57734: 30219,\r\n\t\t57735: 30221,\r\n\t\t57736: 30217,\r\n\t\t57737: 30239,\r\n\t\t57738: 30247,\r\n\t\t57739: 30240,\r\n\t\t57740: 30241,\r\n\t\t57741: 30242,\r\n\t\t57742: 30244,\r\n\t\t57743: 30260,\r\n\t\t57744: 30256,\r\n\t\t57745: 30267,\r\n\t\t57746: 30279,\r\n\t\t57747: 30280,\r\n\t\t57748: 30278,\r\n\t\t57749: 30300,\r\n\t\t57750: 30296,\r\n\t\t57751: 30305,\r\n\t\t57752: 30306,\r\n\t\t57753: 30312,\r\n\t\t57754: 30313,\r\n\t\t57755: 30314,\r\n\t\t57756: 30311,\r\n\t\t57757: 30316,\r\n\t\t57758: 30320,\r\n\t\t57759: 30322,\r\n\t\t57760: 30326,\r\n\t\t57761: 30328,\r\n\t\t57762: 30332,\r\n\t\t57763: 30336,\r\n\t\t57764: 30339,\r\n\t\t57765: 30344,\r\n\t\t57766: 30347,\r\n\t\t57767: 30350,\r\n\t\t57768: 30358,\r\n\t\t57769: 30355,\r\n\t\t57770: 30361,\r\n\t\t57771: 30362,\r\n\t\t57772: 30384,\r\n\t\t57773: 30388,\r\n\t\t57774: 30392,\r\n\t\t57775: 30393,\r\n\t\t57776: 30394,\r\n\t\t57777: 30402,\r\n\t\t57778: 30413,\r\n\t\t57779: 30422,\r\n\t\t57780: 30418,\r\n\t\t57781: 30430,\r\n\t\t57782: 30433,\r\n\t\t57783: 30437,\r\n\t\t57784: 30439,\r\n\t\t57785: 30442,\r\n\t\t57786: 34351,\r\n\t\t57787: 30459,\r\n\t\t57788: 30472,\r\n\t\t57789: 30471,\r\n\t\t57790: 30468,\r\n\t\t57791: 30505,\r\n\t\t57792: 30500,\r\n\t\t57793: 30494,\r\n\t\t57794: 30501,\r\n\t\t57795: 30502,\r\n\t\t57796: 30491,\r\n\t\t57797: 30519,\r\n\t\t57798: 30520,\r\n\t\t57799: 30535,\r\n\t\t57800: 30554,\r\n\t\t57801: 30568,\r\n\t\t57802: 30571,\r\n\t\t57803: 30555,\r\n\t\t57804: 30565,\r\n\t\t57805: 30591,\r\n\t\t57806: 30590,\r\n\t\t57807: 30585,\r\n\t\t57808: 30606,\r\n\t\t57809: 30603,\r\n\t\t57810: 30609,\r\n\t\t57811: 30624,\r\n\t\t57812: 30622,\r\n\t\t57813: 30640,\r\n\t\t57814: 30646,\r\n\t\t57815: 30649,\r\n\t\t57816: 30655,\r\n\t\t57817: 30652,\r\n\t\t57818: 30653,\r\n\t\t57819: 30651,\r\n\t\t57820: 30663,\r\n\t\t57821: 30669,\r\n\t\t57822: 30679,\r\n\t\t57823: 30682,\r\n\t\t57824: 30684,\r\n\t\t57825: 30691,\r\n\t\t57826: 30702,\r\n\t\t57827: 30716,\r\n\t\t57828: 30732,\r\n\t\t57829: 30738,\r\n\t\t57830: 31014,\r\n\t\t57831: 30752,\r\n\t\t57832: 31018,\r\n\t\t57833: 30789,\r\n\t\t57834: 30862,\r\n\t\t57835: 30836,\r\n\t\t57836: 30854,\r\n\t\t57837: 30844,\r\n\t\t57838: 30874,\r\n\t\t57839: 30860,\r\n\t\t57840: 30883,\r\n\t\t57841: 30901,\r\n\t\t57842: 30890,\r\n\t\t57843: 30895,\r\n\t\t57844: 30929,\r\n\t\t57845: 30918,\r\n\t\t57846: 30923,\r\n\t\t57847: 30932,\r\n\t\t57848: 30910,\r\n\t\t57849: 30908,\r\n\t\t57850: 30917,\r\n\t\t57851: 30922,\r\n\t\t57852: 30956,\r\n\t\t57920: 30951,\r\n\t\t57921: 30938,\r\n\t\t57922: 30973,\r\n\t\t57923: 30964,\r\n\t\t57924: 30983,\r\n\t\t57925: 30994,\r\n\t\t57926: 30993,\r\n\t\t57927: 31001,\r\n\t\t57928: 31020,\r\n\t\t57929: 31019,\r\n\t\t57930: 31040,\r\n\t\t57931: 31072,\r\n\t\t57932: 31063,\r\n\t\t57933: 31071,\r\n\t\t57934: 31066,\r\n\t\t57935: 31061,\r\n\t\t57936: 31059,\r\n\t\t57937: 31098,\r\n\t\t57938: 31103,\r\n\t\t57939: 31114,\r\n\t\t57940: 31133,\r\n\t\t57941: 31143,\r\n\t\t57942: 40779,\r\n\t\t57943: 31146,\r\n\t\t57944: 31150,\r\n\t\t57945: 31155,\r\n\t\t57946: 31161,\r\n\t\t57947: 31162,\r\n\t\t57948: 31177,\r\n\t\t57949: 31189,\r\n\t\t57950: 31207,\r\n\t\t57951: 31212,\r\n\t\t57952: 31201,\r\n\t\t57953: 31203,\r\n\t\t57954: 31240,\r\n\t\t57955: 31245,\r\n\t\t57956: 31256,\r\n\t\t57957: 31257,\r\n\t\t57958: 31264,\r\n\t\t57959: 31263,\r\n\t\t57960: 31104,\r\n\t\t57961: 31281,\r\n\t\t57962: 31291,\r\n\t\t57963: 31294,\r\n\t\t57964: 31287,\r\n\t\t57965: 31299,\r\n\t\t57966: 31319,\r\n\t\t57967: 31305,\r\n\t\t57968: 31329,\r\n\t\t57969: 31330,\r\n\t\t57970: 31337,\r\n\t\t57971: 40861,\r\n\t\t57972: 31344,\r\n\t\t57973: 31353,\r\n\t\t57974: 31357,\r\n\t\t57975: 31368,\r\n\t\t57976: 31383,\r\n\t\t57977: 31381,\r\n\t\t57978: 31384,\r\n\t\t57979: 31382,\r\n\t\t57980: 31401,\r\n\t\t57981: 31432,\r\n\t\t57982: 31408,\r\n\t\t57984: 31414,\r\n\t\t57985: 31429,\r\n\t\t57986: 31428,\r\n\t\t57987: 31423,\r\n\t\t57988: 36995,\r\n\t\t57989: 31431,\r\n\t\t57990: 31434,\r\n\t\t57991: 31437,\r\n\t\t57992: 31439,\r\n\t\t57993: 31445,\r\n\t\t57994: 31443,\r\n\t\t57995: 31449,\r\n\t\t57996: 31450,\r\n\t\t57997: 31453,\r\n\t\t57998: 31457,\r\n\t\t57999: 31458,\r\n\t\t58000: 31462,\r\n\t\t58001: 31469,\r\n\t\t58002: 31472,\r\n\t\t58003: 31490,\r\n\t\t58004: 31503,\r\n\t\t58005: 31498,\r\n\t\t58006: 31494,\r\n\t\t58007: 31539,\r\n\t\t58008: 31512,\r\n\t\t58009: 31513,\r\n\t\t58010: 31518,\r\n\t\t58011: 31541,\r\n\t\t58012: 31528,\r\n\t\t58013: 31542,\r\n\t\t58014: 31568,\r\n\t\t58015: 31610,\r\n\t\t58016: 31492,\r\n\t\t58017: 31565,\r\n\t\t58018: 31499,\r\n\t\t58019: 31564,\r\n\t\t58020: 31557,\r\n\t\t58021: 31605,\r\n\t\t58022: 31589,\r\n\t\t58023: 31604,\r\n\t\t58024: 31591,\r\n\t\t58025: 31600,\r\n\t\t58026: 31601,\r\n\t\t58027: 31596,\r\n\t\t58028: 31598,\r\n\t\t58029: 31645,\r\n\t\t58030: 31640,\r\n\t\t58031: 31647,\r\n\t\t58032: 31629,\r\n\t\t58033: 31644,\r\n\t\t58034: 31642,\r\n\t\t58035: 31627,\r\n\t\t58036: 31634,\r\n\t\t58037: 31631,\r\n\t\t58038: 31581,\r\n\t\t58039: 31641,\r\n\t\t58040: 31691,\r\n\t\t58041: 31681,\r\n\t\t58042: 31692,\r\n\t\t58043: 31695,\r\n\t\t58044: 31668,\r\n\t\t58045: 31686,\r\n\t\t58046: 31709,\r\n\t\t58047: 31721,\r\n\t\t58048: 31761,\r\n\t\t58049: 31764,\r\n\t\t58050: 31718,\r\n\t\t58051: 31717,\r\n\t\t58052: 31840,\r\n\t\t58053: 31744,\r\n\t\t58054: 31751,\r\n\t\t58055: 31763,\r\n\t\t58056: 31731,\r\n\t\t58057: 31735,\r\n\t\t58058: 31767,\r\n\t\t58059: 31757,\r\n\t\t58060: 31734,\r\n\t\t58061: 31779,\r\n\t\t58062: 31783,\r\n\t\t58063: 31786,\r\n\t\t58064: 31775,\r\n\t\t58065: 31799,\r\n\t\t58066: 31787,\r\n\t\t58067: 31805,\r\n\t\t58068: 31820,\r\n\t\t58069: 31811,\r\n\t\t58070: 31828,\r\n\t\t58071: 31823,\r\n\t\t58072: 31808,\r\n\t\t58073: 31824,\r\n\t\t58074: 31832,\r\n\t\t58075: 31839,\r\n\t\t58076: 31844,\r\n\t\t58077: 31830,\r\n\t\t58078: 31845,\r\n\t\t58079: 31852,\r\n\t\t58080: 31861,\r\n\t\t58081: 31875,\r\n\t\t58082: 31888,\r\n\t\t58083: 31908,\r\n\t\t58084: 31917,\r\n\t\t58085: 31906,\r\n\t\t58086: 31915,\r\n\t\t58087: 31905,\r\n\t\t58088: 31912,\r\n\t\t58089: 31923,\r\n\t\t58090: 31922,\r\n\t\t58091: 31921,\r\n\t\t58092: 31918,\r\n\t\t58093: 31929,\r\n\t\t58094: 31933,\r\n\t\t58095: 31936,\r\n\t\t58096: 31941,\r\n\t\t58097: 31938,\r\n\t\t58098: 31960,\r\n\t\t58099: 31954,\r\n\t\t58100: 31964,\r\n\t\t58101: 31970,\r\n\t\t58102: 39739,\r\n\t\t58103: 31983,\r\n\t\t58104: 31986,\r\n\t\t58105: 31988,\r\n\t\t58106: 31990,\r\n\t\t58107: 31994,\r\n\t\t58108: 32006,\r\n\t\t58176: 32002,\r\n\t\t58177: 32028,\r\n\t\t58178: 32021,\r\n\t\t58179: 32010,\r\n\t\t58180: 32069,\r\n\t\t58181: 32075,\r\n\t\t58182: 32046,\r\n\t\t58183: 32050,\r\n\t\t58184: 32063,\r\n\t\t58185: 32053,\r\n\t\t58186: 32070,\r\n\t\t58187: 32115,\r\n\t\t58188: 32086,\r\n\t\t58189: 32078,\r\n\t\t58190: 32114,\r\n\t\t58191: 32104,\r\n\t\t58192: 32110,\r\n\t\t58193: 32079,\r\n\t\t58194: 32099,\r\n\t\t58195: 32147,\r\n\t\t58196: 32137,\r\n\t\t58197: 32091,\r\n\t\t58198: 32143,\r\n\t\t58199: 32125,\r\n\t\t58200: 32155,\r\n\t\t58201: 32186,\r\n\t\t58202: 32174,\r\n\t\t58203: 32163,\r\n\t\t58204: 32181,\r\n\t\t58205: 32199,\r\n\t\t58206: 32189,\r\n\t\t58207: 32171,\r\n\t\t58208: 32317,\r\n\t\t58209: 32162,\r\n\t\t58210: 32175,\r\n\t\t58211: 32220,\r\n\t\t58212: 32184,\r\n\t\t58213: 32159,\r\n\t\t58214: 32176,\r\n\t\t58215: 32216,\r\n\t\t58216: 32221,\r\n\t\t58217: 32228,\r\n\t\t58218: 32222,\r\n\t\t58219: 32251,\r\n\t\t58220: 32242,\r\n\t\t58221: 32225,\r\n\t\t58222: 32261,\r\n\t\t58223: 32266,\r\n\t\t58224: 32291,\r\n\t\t58225: 32289,\r\n\t\t58226: 32274,\r\n\t\t58227: 32305,\r\n\t\t58228: 32287,\r\n\t\t58229: 32265,\r\n\t\t58230: 32267,\r\n\t\t58231: 32290,\r\n\t\t58232: 32326,\r\n\t\t58233: 32358,\r\n\t\t58234: 32315,\r\n\t\t58235: 32309,\r\n\t\t58236: 32313,\r\n\t\t58237: 32323,\r\n\t\t58238: 32311,\r\n\t\t58240: 32306,\r\n\t\t58241: 32314,\r\n\t\t58242: 32359,\r\n\t\t58243: 32349,\r\n\t\t58244: 32342,\r\n\t\t58245: 32350,\r\n\t\t58246: 32345,\r\n\t\t58247: 32346,\r\n\t\t58248: 32377,\r\n\t\t58249: 32362,\r\n\t\t58250: 32361,\r\n\t\t58251: 32380,\r\n\t\t58252: 32379,\r\n\t\t58253: 32387,\r\n\t\t58254: 32213,\r\n\t\t58255: 32381,\r\n\t\t58256: 36782,\r\n\t\t58257: 32383,\r\n\t\t58258: 32392,\r\n\t\t58259: 32393,\r\n\t\t58260: 32396,\r\n\t\t58261: 32402,\r\n\t\t58262: 32400,\r\n\t\t58263: 32403,\r\n\t\t58264: 32404,\r\n\t\t58265: 32406,\r\n\t\t58266: 32398,\r\n\t\t58267: 32411,\r\n\t\t58268: 32412,\r\n\t\t58269: 32568,\r\n\t\t58270: 32570,\r\n\t\t58271: 32581,\r\n\t\t58272: 32588,\r\n\t\t58273: 32589,\r\n\t\t58274: 32590,\r\n\t\t58275: 32592,\r\n\t\t58276: 32593,\r\n\t\t58277: 32597,\r\n\t\t58278: 32596,\r\n\t\t58279: 32600,\r\n\t\t58280: 32607,\r\n\t\t58281: 32608,\r\n\t\t58282: 32616,\r\n\t\t58283: 32617,\r\n\t\t58284: 32615,\r\n\t\t58285: 32632,\r\n\t\t58286: 32642,\r\n\t\t58287: 32646,\r\n\t\t58288: 32643,\r\n\t\t58289: 32648,\r\n\t\t58290: 32647,\r\n\t\t58291: 32652,\r\n\t\t58292: 32660,\r\n\t\t58293: 32670,\r\n\t\t58294: 32669,\r\n\t\t58295: 32666,\r\n\t\t58296: 32675,\r\n\t\t58297: 32687,\r\n\t\t58298: 32690,\r\n\t\t58299: 32697,\r\n\t\t58300: 32686,\r\n\t\t58301: 32694,\r\n\t\t58302: 32696,\r\n\t\t58303: 35697,\r\n\t\t58304: 32709,\r\n\t\t58305: 32710,\r\n\t\t58306: 32714,\r\n\t\t58307: 32725,\r\n\t\t58308: 32724,\r\n\t\t58309: 32737,\r\n\t\t58310: 32742,\r\n\t\t58311: 32745,\r\n\t\t58312: 32755,\r\n\t\t58313: 32761,\r\n\t\t58314: 39132,\r\n\t\t58315: 32774,\r\n\t\t58316: 32772,\r\n\t\t58317: 32779,\r\n\t\t58318: 32786,\r\n\t\t58319: 32792,\r\n\t\t58320: 32793,\r\n\t\t58321: 32796,\r\n\t\t58322: 32801,\r\n\t\t58323: 32808,\r\n\t\t58324: 32831,\r\n\t\t58325: 32827,\r\n\t\t58326: 32842,\r\n\t\t58327: 32838,\r\n\t\t58328: 32850,\r\n\t\t58329: 32856,\r\n\t\t58330: 32858,\r\n\t\t58331: 32863,\r\n\t\t58332: 32866,\r\n\t\t58333: 32872,\r\n\t\t58334: 32883,\r\n\t\t58335: 32882,\r\n\t\t58336: 32880,\r\n\t\t58337: 32886,\r\n\t\t58338: 32889,\r\n\t\t58339: 32893,\r\n\t\t58340: 32895,\r\n\t\t58341: 32900,\r\n\t\t58342: 32902,\r\n\t\t58343: 32901,\r\n\t\t58344: 32923,\r\n\t\t58345: 32915,\r\n\t\t58346: 32922,\r\n\t\t58347: 32941,\r\n\t\t58348: 20880,\r\n\t\t58349: 32940,\r\n\t\t58350: 32987,\r\n\t\t58351: 32997,\r\n\t\t58352: 32985,\r\n\t\t58353: 32989,\r\n\t\t58354: 32964,\r\n\t\t58355: 32986,\r\n\t\t58356: 32982,\r\n\t\t58357: 33033,\r\n\t\t58358: 33007,\r\n\t\t58359: 33009,\r\n\t\t58360: 33051,\r\n\t\t58361: 33065,\r\n\t\t58362: 33059,\r\n\t\t58363: 33071,\r\n\t\t58364: 33099,\r\n\t\t58432: 38539,\r\n\t\t58433: 33094,\r\n\t\t58434: 33086,\r\n\t\t58435: 33107,\r\n\t\t58436: 33105,\r\n\t\t58437: 33020,\r\n\t\t58438: 33137,\r\n\t\t58439: 33134,\r\n\t\t58440: 33125,\r\n\t\t58441: 33126,\r\n\t\t58442: 33140,\r\n\t\t58443: 33155,\r\n\t\t58444: 33160,\r\n\t\t58445: 33162,\r\n\t\t58446: 33152,\r\n\t\t58447: 33154,\r\n\t\t58448: 33184,\r\n\t\t58449: 33173,\r\n\t\t58450: 33188,\r\n\t\t58451: 33187,\r\n\t\t58452: 33119,\r\n\t\t58453: 33171,\r\n\t\t58454: 33193,\r\n\t\t58455: 33200,\r\n\t\t58456: 33205,\r\n\t\t58457: 33214,\r\n\t\t58458: 33208,\r\n\t\t58459: 33213,\r\n\t\t58460: 33216,\r\n\t\t58461: 33218,\r\n\t\t58462: 33210,\r\n\t\t58463: 33225,\r\n\t\t58464: 33229,\r\n\t\t58465: 33233,\r\n\t\t58466: 33241,\r\n\t\t58467: 33240,\r\n\t\t58468: 33224,\r\n\t\t58469: 33242,\r\n\t\t58470: 33247,\r\n\t\t58471: 33248,\r\n\t\t58472: 33255,\r\n\t\t58473: 33274,\r\n\t\t58474: 33275,\r\n\t\t58475: 33278,\r\n\t\t58476: 33281,\r\n\t\t58477: 33282,\r\n\t\t58478: 33285,\r\n\t\t58479: 33287,\r\n\t\t58480: 33290,\r\n\t\t58481: 33293,\r\n\t\t58482: 33296,\r\n\t\t58483: 33302,\r\n\t\t58484: 33321,\r\n\t\t58485: 33323,\r\n\t\t58486: 33336,\r\n\t\t58487: 33331,\r\n\t\t58488: 33344,\r\n\t\t58489: 33369,\r\n\t\t58490: 33368,\r\n\t\t58491: 33373,\r\n\t\t58492: 33370,\r\n\t\t58493: 33375,\r\n\t\t58494: 33380,\r\n\t\t58496: 33378,\r\n\t\t58497: 33384,\r\n\t\t58498: 33386,\r\n\t\t58499: 33387,\r\n\t\t58500: 33326,\r\n\t\t58501: 33393,\r\n\t\t58502: 33399,\r\n\t\t58503: 33400,\r\n\t\t58504: 33406,\r\n\t\t58505: 33421,\r\n\t\t58506: 33426,\r\n\t\t58507: 33451,\r\n\t\t58508: 33439,\r\n\t\t58509: 33467,\r\n\t\t58510: 33452,\r\n\t\t58511: 33505,\r\n\t\t58512: 33507,\r\n\t\t58513: 33503,\r\n\t\t58514: 33490,\r\n\t\t58515: 33524,\r\n\t\t58516: 33523,\r\n\t\t58517: 33530,\r\n\t\t58518: 33683,\r\n\t\t58519: 33539,\r\n\t\t58520: 33531,\r\n\t\t58521: 33529,\r\n\t\t58522: 33502,\r\n\t\t58523: 33542,\r\n\t\t58524: 33500,\r\n\t\t58525: 33545,\r\n\t\t58526: 33497,\r\n\t\t58527: 33589,\r\n\t\t58528: 33588,\r\n\t\t58529: 33558,\r\n\t\t58530: 33586,\r\n\t\t58531: 33585,\r\n\t\t58532: 33600,\r\n\t\t58533: 33593,\r\n\t\t58534: 33616,\r\n\t\t58535: 33605,\r\n\t\t58536: 33583,\r\n\t\t58537: 33579,\r\n\t\t58538: 33559,\r\n\t\t58539: 33560,\r\n\t\t58540: 33669,\r\n\t\t58541: 33690,\r\n\t\t58542: 33706,\r\n\t\t58543: 33695,\r\n\t\t58544: 33698,\r\n\t\t58545: 33686,\r\n\t\t58546: 33571,\r\n\t\t58547: 33678,\r\n\t\t58548: 33671,\r\n\t\t58549: 33674,\r\n\t\t58550: 33660,\r\n\t\t58551: 33717,\r\n\t\t58552: 33651,\r\n\t\t58553: 33653,\r\n\t\t58554: 33696,\r\n\t\t58555: 33673,\r\n\t\t58556: 33704,\r\n\t\t58557: 33780,\r\n\t\t58558: 33811,\r\n\t\t58559: 33771,\r\n\t\t58560: 33742,\r\n\t\t58561: 33789,\r\n\t\t58562: 33795,\r\n\t\t58563: 33752,\r\n\t\t58564: 33803,\r\n\t\t58565: 33729,\r\n\t\t58566: 33783,\r\n\t\t58567: 33799,\r\n\t\t58568: 33760,\r\n\t\t58569: 33778,\r\n\t\t58570: 33805,\r\n\t\t58571: 33826,\r\n\t\t58572: 33824,\r\n\t\t58573: 33725,\r\n\t\t58574: 33848,\r\n\t\t58575: 34054,\r\n\t\t58576: 33787,\r\n\t\t58577: 33901,\r\n\t\t58578: 33834,\r\n\t\t58579: 33852,\r\n\t\t58580: 34138,\r\n\t\t58581: 33924,\r\n\t\t58582: 33911,\r\n\t\t58583: 33899,\r\n\t\t58584: 33965,\r\n\t\t58585: 33902,\r\n\t\t58586: 33922,\r\n\t\t58587: 33897,\r\n\t\t58588: 33862,\r\n\t\t58589: 33836,\r\n\t\t58590: 33903,\r\n\t\t58591: 33913,\r\n\t\t58592: 33845,\r\n\t\t58593: 33994,\r\n\t\t58594: 33890,\r\n\t\t58595: 33977,\r\n\t\t58596: 33983,\r\n\t\t58597: 33951,\r\n\t\t58598: 34009,\r\n\t\t58599: 33997,\r\n\t\t58600: 33979,\r\n\t\t58601: 34010,\r\n\t\t58602: 34000,\r\n\t\t58603: 33985,\r\n\t\t58604: 33990,\r\n\t\t58605: 34006,\r\n\t\t58606: 33953,\r\n\t\t58607: 34081,\r\n\t\t58608: 34047,\r\n\t\t58609: 34036,\r\n\t\t58610: 34071,\r\n\t\t58611: 34072,\r\n\t\t58612: 34092,\r\n\t\t58613: 34079,\r\n\t\t58614: 34069,\r\n\t\t58615: 34068,\r\n\t\t58616: 34044,\r\n\t\t58617: 34112,\r\n\t\t58618: 34147,\r\n\t\t58619: 34136,\r\n\t\t58620: 34120,\r\n\t\t58688: 34113,\r\n\t\t58689: 34306,\r\n\t\t58690: 34123,\r\n\t\t58691: 34133,\r\n\t\t58692: 34176,\r\n\t\t58693: 34212,\r\n\t\t58694: 34184,\r\n\t\t58695: 34193,\r\n\t\t58696: 34186,\r\n\t\t58697: 34216,\r\n\t\t58698: 34157,\r\n\t\t58699: 34196,\r\n\t\t58700: 34203,\r\n\t\t58701: 34282,\r\n\t\t58702: 34183,\r\n\t\t58703: 34204,\r\n\t\t58704: 34167,\r\n\t\t58705: 34174,\r\n\t\t58706: 34192,\r\n\t\t58707: 34249,\r\n\t\t58708: 34234,\r\n\t\t58709: 34255,\r\n\t\t58710: 34233,\r\n\t\t58711: 34256,\r\n\t\t58712: 34261,\r\n\t\t58713: 34269,\r\n\t\t58714: 34277,\r\n\t\t58715: 34268,\r\n\t\t58716: 34297,\r\n\t\t58717: 34314,\r\n\t\t58718: 34323,\r\n\t\t58719: 34315,\r\n\t\t58720: 34302,\r\n\t\t58721: 34298,\r\n\t\t58722: 34310,\r\n\t\t58723: 34338,\r\n\t\t58724: 34330,\r\n\t\t58725: 34352,\r\n\t\t58726: 34367,\r\n\t\t58727: 34381,\r\n\t\t58728: 20053,\r\n\t\t58729: 34388,\r\n\t\t58730: 34399,\r\n\t\t58731: 34407,\r\n\t\t58732: 34417,\r\n\t\t58733: 34451,\r\n\t\t58734: 34467,\r\n\t\t58735: 34473,\r\n\t\t58736: 34474,\r\n\t\t58737: 34443,\r\n\t\t58738: 34444,\r\n\t\t58739: 34486,\r\n\t\t58740: 34479,\r\n\t\t58741: 34500,\r\n\t\t58742: 34502,\r\n\t\t58743: 34480,\r\n\t\t58744: 34505,\r\n\t\t58745: 34851,\r\n\t\t58746: 34475,\r\n\t\t58747: 34516,\r\n\t\t58748: 34526,\r\n\t\t58749: 34537,\r\n\t\t58750: 34540,\r\n\t\t58752: 34527,\r\n\t\t58753: 34523,\r\n\t\t58754: 34543,\r\n\t\t58755: 34578,\r\n\t\t58756: 34566,\r\n\t\t58757: 34568,\r\n\t\t58758: 34560,\r\n\t\t58759: 34563,\r\n\t\t58760: 34555,\r\n\t\t58761: 34577,\r\n\t\t58762: 34569,\r\n\t\t58763: 34573,\r\n\t\t58764: 34553,\r\n\t\t58765: 34570,\r\n\t\t58766: 34612,\r\n\t\t58767: 34623,\r\n\t\t58768: 34615,\r\n\t\t58769: 34619,\r\n\t\t58770: 34597,\r\n\t\t58771: 34601,\r\n\t\t58772: 34586,\r\n\t\t58773: 34656,\r\n\t\t58774: 34655,\r\n\t\t58775: 34680,\r\n\t\t58776: 34636,\r\n\t\t58777: 34638,\r\n\t\t58778: 34676,\r\n\t\t58779: 34647,\r\n\t\t58780: 34664,\r\n\t\t58781: 34670,\r\n\t\t58782: 34649,\r\n\t\t58783: 34643,\r\n\t\t58784: 34659,\r\n\t\t58785: 34666,\r\n\t\t58786: 34821,\r\n\t\t58787: 34722,\r\n\t\t58788: 34719,\r\n\t\t58789: 34690,\r\n\t\t58790: 34735,\r\n\t\t58791: 34763,\r\n\t\t58792: 34749,\r\n\t\t58793: 34752,\r\n\t\t58794: 34768,\r\n\t\t58795: 38614,\r\n\t\t58796: 34731,\r\n\t\t58797: 34756,\r\n\t\t58798: 34739,\r\n\t\t58799: 34759,\r\n\t\t58800: 34758,\r\n\t\t58801: 34747,\r\n\t\t58802: 34799,\r\n\t\t58803: 34802,\r\n\t\t58804: 34784,\r\n\t\t58805: 34831,\r\n\t\t58806: 34829,\r\n\t\t58807: 34814,\r\n\t\t58808: 34806,\r\n\t\t58809: 34807,\r\n\t\t58810: 34830,\r\n\t\t58811: 34770,\r\n\t\t58812: 34833,\r\n\t\t58813: 34838,\r\n\t\t58814: 34837,\r\n\t\t58815: 34850,\r\n\t\t58816: 34849,\r\n\t\t58817: 34865,\r\n\t\t58818: 34870,\r\n\t\t58819: 34873,\r\n\t\t58820: 34855,\r\n\t\t58821: 34875,\r\n\t\t58822: 34884,\r\n\t\t58823: 34882,\r\n\t\t58824: 34898,\r\n\t\t58825: 34905,\r\n\t\t58826: 34910,\r\n\t\t58827: 34914,\r\n\t\t58828: 34923,\r\n\t\t58829: 34945,\r\n\t\t58830: 34942,\r\n\t\t58831: 34974,\r\n\t\t58832: 34933,\r\n\t\t58833: 34941,\r\n\t\t58834: 34997,\r\n\t\t58835: 34930,\r\n\t\t58836: 34946,\r\n\t\t58837: 34967,\r\n\t\t58838: 34962,\r\n\t\t58839: 34990,\r\n\t\t58840: 34969,\r\n\t\t58841: 34978,\r\n\t\t58842: 34957,\r\n\t\t58843: 34980,\r\n\t\t58844: 34992,\r\n\t\t58845: 35007,\r\n\t\t58846: 34993,\r\n\t\t58847: 35011,\r\n\t\t58848: 35012,\r\n\t\t58849: 35028,\r\n\t\t58850: 35032,\r\n\t\t58851: 35033,\r\n\t\t58852: 35037,\r\n\t\t58853: 35065,\r\n\t\t58854: 35074,\r\n\t\t58855: 35068,\r\n\t\t58856: 35060,\r\n\t\t58857: 35048,\r\n\t\t58858: 35058,\r\n\t\t58859: 35076,\r\n\t\t58860: 35084,\r\n\t\t58861: 35082,\r\n\t\t58862: 35091,\r\n\t\t58863: 35139,\r\n\t\t58864: 35102,\r\n\t\t58865: 35109,\r\n\t\t58866: 35114,\r\n\t\t58867: 35115,\r\n\t\t58868: 35137,\r\n\t\t58869: 35140,\r\n\t\t58870: 35131,\r\n\t\t58871: 35126,\r\n\t\t58872: 35128,\r\n\t\t58873: 35148,\r\n\t\t58874: 35101,\r\n\t\t58875: 35168,\r\n\t\t58876: 35166,\r\n\t\t58944: 35174,\r\n\t\t58945: 35172,\r\n\t\t58946: 35181,\r\n\t\t58947: 35178,\r\n\t\t58948: 35183,\r\n\t\t58949: 35188,\r\n\t\t58950: 35191,\r\n\t\t58951: 35198,\r\n\t\t58952: 35203,\r\n\t\t58953: 35208,\r\n\t\t58954: 35210,\r\n\t\t58955: 35219,\r\n\t\t58956: 35224,\r\n\t\t58957: 35233,\r\n\t\t58958: 35241,\r\n\t\t58959: 35238,\r\n\t\t58960: 35244,\r\n\t\t58961: 35247,\r\n\t\t58962: 35250,\r\n\t\t58963: 35258,\r\n\t\t58964: 35261,\r\n\t\t58965: 35263,\r\n\t\t58966: 35264,\r\n\t\t58967: 35290,\r\n\t\t58968: 35292,\r\n\t\t58969: 35293,\r\n\t\t58970: 35303,\r\n\t\t58971: 35316,\r\n\t\t58972: 35320,\r\n\t\t58973: 35331,\r\n\t\t58974: 35350,\r\n\t\t58975: 35344,\r\n\t\t58976: 35340,\r\n\t\t58977: 35355,\r\n\t\t58978: 35357,\r\n\t\t58979: 35365,\r\n\t\t58980: 35382,\r\n\t\t58981: 35393,\r\n\t\t58982: 35419,\r\n\t\t58983: 35410,\r\n\t\t58984: 35398,\r\n\t\t58985: 35400,\r\n\t\t58986: 35452,\r\n\t\t58987: 35437,\r\n\t\t58988: 35436,\r\n\t\t58989: 35426,\r\n\t\t58990: 35461,\r\n\t\t58991: 35458,\r\n\t\t58992: 35460,\r\n\t\t58993: 35496,\r\n\t\t58994: 35489,\r\n\t\t58995: 35473,\r\n\t\t58996: 35493,\r\n\t\t58997: 35494,\r\n\t\t58998: 35482,\r\n\t\t58999: 35491,\r\n\t\t59000: 35524,\r\n\t\t59001: 35533,\r\n\t\t59002: 35522,\r\n\t\t59003: 35546,\r\n\t\t59004: 35563,\r\n\t\t59005: 35571,\r\n\t\t59006: 35559,\r\n\t\t59008: 35556,\r\n\t\t59009: 35569,\r\n\t\t59010: 35604,\r\n\t\t59011: 35552,\r\n\t\t59012: 35554,\r\n\t\t59013: 35575,\r\n\t\t59014: 35550,\r\n\t\t59015: 35547,\r\n\t\t59016: 35596,\r\n\t\t59017: 35591,\r\n\t\t59018: 35610,\r\n\t\t59019: 35553,\r\n\t\t59020: 35606,\r\n\t\t59021: 35600,\r\n\t\t59022: 35607,\r\n\t\t59023: 35616,\r\n\t\t59024: 35635,\r\n\t\t59025: 38827,\r\n\t\t59026: 35622,\r\n\t\t59027: 35627,\r\n\t\t59028: 35646,\r\n\t\t59029: 35624,\r\n\t\t59030: 35649,\r\n\t\t59031: 35660,\r\n\t\t59032: 35663,\r\n\t\t59033: 35662,\r\n\t\t59034: 35657,\r\n\t\t59035: 35670,\r\n\t\t59036: 35675,\r\n\t\t59037: 35674,\r\n\t\t59038: 35691,\r\n\t\t59039: 35679,\r\n\t\t59040: 35692,\r\n\t\t59041: 35695,\r\n\t\t59042: 35700,\r\n\t\t59043: 35709,\r\n\t\t59044: 35712,\r\n\t\t59045: 35724,\r\n\t\t59046: 35726,\r\n\t\t59047: 35730,\r\n\t\t59048: 35731,\r\n\t\t59049: 35734,\r\n\t\t59050: 35737,\r\n\t\t59051: 35738,\r\n\t\t59052: 35898,\r\n\t\t59053: 35905,\r\n\t\t59054: 35903,\r\n\t\t59055: 35912,\r\n\t\t59056: 35916,\r\n\t\t59057: 35918,\r\n\t\t59058: 35920,\r\n\t\t59059: 35925,\r\n\t\t59060: 35938,\r\n\t\t59061: 35948,\r\n\t\t59062: 35960,\r\n\t\t59063: 35962,\r\n\t\t59064: 35970,\r\n\t\t59065: 35977,\r\n\t\t59066: 35973,\r\n\t\t59067: 35978,\r\n\t\t59068: 35981,\r\n\t\t59069: 35982,\r\n\t\t59070: 35988,\r\n\t\t59071: 35964,\r\n\t\t59072: 35992,\r\n\t\t59073: 25117,\r\n\t\t59074: 36013,\r\n\t\t59075: 36010,\r\n\t\t59076: 36029,\r\n\t\t59077: 36018,\r\n\t\t59078: 36019,\r\n\t\t59079: 36014,\r\n\t\t59080: 36022,\r\n\t\t59081: 36040,\r\n\t\t59082: 36033,\r\n\t\t59083: 36068,\r\n\t\t59084: 36067,\r\n\t\t59085: 36058,\r\n\t\t59086: 36093,\r\n\t\t59087: 36090,\r\n\t\t59088: 36091,\r\n\t\t59089: 36100,\r\n\t\t59090: 36101,\r\n\t\t59091: 36106,\r\n\t\t59092: 36103,\r\n\t\t59093: 36111,\r\n\t\t59094: 36109,\r\n\t\t59095: 36112,\r\n\t\t59096: 40782,\r\n\t\t59097: 36115,\r\n\t\t59098: 36045,\r\n\t\t59099: 36116,\r\n\t\t59100: 36118,\r\n\t\t59101: 36199,\r\n\t\t59102: 36205,\r\n\t\t59103: 36209,\r\n\t\t59104: 36211,\r\n\t\t59105: 36225,\r\n\t\t59106: 36249,\r\n\t\t59107: 36290,\r\n\t\t59108: 36286,\r\n\t\t59109: 36282,\r\n\t\t59110: 36303,\r\n\t\t59111: 36314,\r\n\t\t59112: 36310,\r\n\t\t59113: 36300,\r\n\t\t59114: 36315,\r\n\t\t59115: 36299,\r\n\t\t59116: 36330,\r\n\t\t59117: 36331,\r\n\t\t59118: 36319,\r\n\t\t59119: 36323,\r\n\t\t59120: 36348,\r\n\t\t59121: 36360,\r\n\t\t59122: 36361,\r\n\t\t59123: 36351,\r\n\t\t59124: 36381,\r\n\t\t59125: 36382,\r\n\t\t59126: 36368,\r\n\t\t59127: 36383,\r\n\t\t59128: 36418,\r\n\t\t59129: 36405,\r\n\t\t59130: 36400,\r\n\t\t59131: 36404,\r\n\t\t59132: 36426,\r\n\t\t59200: 36423,\r\n\t\t59201: 36425,\r\n\t\t59202: 36428,\r\n\t\t59203: 36432,\r\n\t\t59204: 36424,\r\n\t\t59205: 36441,\r\n\t\t59206: 36452,\r\n\t\t59207: 36448,\r\n\t\t59208: 36394,\r\n\t\t59209: 36451,\r\n\t\t59210: 36437,\r\n\t\t59211: 36470,\r\n\t\t59212: 36466,\r\n\t\t59213: 36476,\r\n\t\t59214: 36481,\r\n\t\t59215: 36487,\r\n\t\t59216: 36485,\r\n\t\t59217: 36484,\r\n\t\t59218: 36491,\r\n\t\t59219: 36490,\r\n\t\t59220: 36499,\r\n\t\t59221: 36497,\r\n\t\t59222: 36500,\r\n\t\t59223: 36505,\r\n\t\t59224: 36522,\r\n\t\t59225: 36513,\r\n\t\t59226: 36524,\r\n\t\t59227: 36528,\r\n\t\t59228: 36550,\r\n\t\t59229: 36529,\r\n\t\t59230: 36542,\r\n\t\t59231: 36549,\r\n\t\t59232: 36552,\r\n\t\t59233: 36555,\r\n\t\t59234: 36571,\r\n\t\t59235: 36579,\r\n\t\t59236: 36604,\r\n\t\t59237: 36603,\r\n\t\t59238: 36587,\r\n\t\t59239: 36606,\r\n\t\t59240: 36618,\r\n\t\t59241: 36613,\r\n\t\t59242: 36629,\r\n\t\t59243: 36626,\r\n\t\t59244: 36633,\r\n\t\t59245: 36627,\r\n\t\t59246: 36636,\r\n\t\t59247: 36639,\r\n\t\t59248: 36635,\r\n\t\t59249: 36620,\r\n\t\t59250: 36646,\r\n\t\t59251: 36659,\r\n\t\t59252: 36667,\r\n\t\t59253: 36665,\r\n\t\t59254: 36677,\r\n\t\t59255: 36674,\r\n\t\t59256: 36670,\r\n\t\t59257: 36684,\r\n\t\t59258: 36681,\r\n\t\t59259: 36678,\r\n\t\t59260: 36686,\r\n\t\t59261: 36695,\r\n\t\t59262: 36700,\r\n\t\t59264: 36706,\r\n\t\t59265: 36707,\r\n\t\t59266: 36708,\r\n\t\t59267: 36764,\r\n\t\t59268: 36767,\r\n\t\t59269: 36771,\r\n\t\t59270: 36781,\r\n\t\t59271: 36783,\r\n\t\t59272: 36791,\r\n\t\t59273: 36826,\r\n\t\t59274: 36837,\r\n\t\t59275: 36834,\r\n\t\t59276: 36842,\r\n\t\t59277: 36847,\r\n\t\t59278: 36999,\r\n\t\t59279: 36852,\r\n\t\t59280: 36869,\r\n\t\t59281: 36857,\r\n\t\t59282: 36858,\r\n\t\t59283: 36881,\r\n\t\t59284: 36885,\r\n\t\t59285: 36897,\r\n\t\t59286: 36877,\r\n\t\t59287: 36894,\r\n\t\t59288: 36886,\r\n\t\t59289: 36875,\r\n\t\t59290: 36903,\r\n\t\t59291: 36918,\r\n\t\t59292: 36917,\r\n\t\t59293: 36921,\r\n\t\t59294: 36856,\r\n\t\t59295: 36943,\r\n\t\t59296: 36944,\r\n\t\t59297: 36945,\r\n\t\t59298: 36946,\r\n\t\t59299: 36878,\r\n\t\t59300: 36937,\r\n\t\t59301: 36926,\r\n\t\t59302: 36950,\r\n\t\t59303: 36952,\r\n\t\t59304: 36958,\r\n\t\t59305: 36968,\r\n\t\t59306: 36975,\r\n\t\t59307: 36982,\r\n\t\t59308: 38568,\r\n\t\t59309: 36978,\r\n\t\t59310: 36994,\r\n\t\t59311: 36989,\r\n\t\t59312: 36993,\r\n\t\t59313: 36992,\r\n\t\t59314: 37002,\r\n\t\t59315: 37001,\r\n\t\t59316: 37007,\r\n\t\t59317: 37032,\r\n\t\t59318: 37039,\r\n\t\t59319: 37041,\r\n\t\t59320: 37045,\r\n\t\t59321: 37090,\r\n\t\t59322: 37092,\r\n\t\t59323: 25160,\r\n\t\t59324: 37083,\r\n\t\t59325: 37122,\r\n\t\t59326: 37138,\r\n\t\t59327: 37145,\r\n\t\t59328: 37170,\r\n\t\t59329: 37168,\r\n\t\t59330: 37194,\r\n\t\t59331: 37206,\r\n\t\t59332: 37208,\r\n\t\t59333: 37219,\r\n\t\t59334: 37221,\r\n\t\t59335: 37225,\r\n\t\t59336: 37235,\r\n\t\t59337: 37234,\r\n\t\t59338: 37259,\r\n\t\t59339: 37257,\r\n\t\t59340: 37250,\r\n\t\t59341: 37282,\r\n\t\t59342: 37291,\r\n\t\t59343: 37295,\r\n\t\t59344: 37290,\r\n\t\t59345: 37301,\r\n\t\t59346: 37300,\r\n\t\t59347: 37306,\r\n\t\t59348: 37312,\r\n\t\t59349: 37313,\r\n\t\t59350: 37321,\r\n\t\t59351: 37323,\r\n\t\t59352: 37328,\r\n\t\t59353: 37334,\r\n\t\t59354: 37343,\r\n\t\t59355: 37345,\r\n\t\t59356: 37339,\r\n\t\t59357: 37372,\r\n\t\t59358: 37365,\r\n\t\t59359: 37366,\r\n\t\t59360: 37406,\r\n\t\t59361: 37375,\r\n\t\t59362: 37396,\r\n\t\t59363: 37420,\r\n\t\t59364: 37397,\r\n\t\t59365: 37393,\r\n\t\t59366: 37470,\r\n\t\t59367: 37463,\r\n\t\t59368: 37445,\r\n\t\t59369: 37449,\r\n\t\t59370: 37476,\r\n\t\t59371: 37448,\r\n\t\t59372: 37525,\r\n\t\t59373: 37439,\r\n\t\t59374: 37451,\r\n\t\t59375: 37456,\r\n\t\t59376: 37532,\r\n\t\t59377: 37526,\r\n\t\t59378: 37523,\r\n\t\t59379: 37531,\r\n\t\t59380: 37466,\r\n\t\t59381: 37583,\r\n\t\t59382: 37561,\r\n\t\t59383: 37559,\r\n\t\t59384: 37609,\r\n\t\t59385: 37647,\r\n\t\t59386: 37626,\r\n\t\t59387: 37700,\r\n\t\t59388: 37678,\r\n\t\t59456: 37657,\r\n\t\t59457: 37666,\r\n\t\t59458: 37658,\r\n\t\t59459: 37667,\r\n\t\t59460: 37690,\r\n\t\t59461: 37685,\r\n\t\t59462: 37691,\r\n\t\t59463: 37724,\r\n\t\t59464: 37728,\r\n\t\t59465: 37756,\r\n\t\t59466: 37742,\r\n\t\t59467: 37718,\r\n\t\t59468: 37808,\r\n\t\t59469: 37804,\r\n\t\t59470: 37805,\r\n\t\t59471: 37780,\r\n\t\t59472: 37817,\r\n\t\t59473: 37846,\r\n\t\t59474: 37847,\r\n\t\t59475: 37864,\r\n\t\t59476: 37861,\r\n\t\t59477: 37848,\r\n\t\t59478: 37827,\r\n\t\t59479: 37853,\r\n\t\t59480: 37840,\r\n\t\t59481: 37832,\r\n\t\t59482: 37860,\r\n\t\t59483: 37914,\r\n\t\t59484: 37908,\r\n\t\t59485: 37907,\r\n\t\t59486: 37891,\r\n\t\t59487: 37895,\r\n\t\t59488: 37904,\r\n\t\t59489: 37942,\r\n\t\t59490: 37931,\r\n\t\t59491: 37941,\r\n\t\t59492: 37921,\r\n\t\t59493: 37946,\r\n\t\t59494: 37953,\r\n\t\t59495: 37970,\r\n\t\t59496: 37956,\r\n\t\t59497: 37979,\r\n\t\t59498: 37984,\r\n\t\t59499: 37986,\r\n\t\t59500: 37982,\r\n\t\t59501: 37994,\r\n\t\t59502: 37417,\r\n\t\t59503: 38000,\r\n\t\t59504: 38005,\r\n\t\t59505: 38007,\r\n\t\t59506: 38013,\r\n\t\t59507: 37978,\r\n\t\t59508: 38012,\r\n\t\t59509: 38014,\r\n\t\t59510: 38017,\r\n\t\t59511: 38015,\r\n\t\t59512: 38274,\r\n\t\t59513: 38279,\r\n\t\t59514: 38282,\r\n\t\t59515: 38292,\r\n\t\t59516: 38294,\r\n\t\t59517: 38296,\r\n\t\t59518: 38297,\r\n\t\t59520: 38304,\r\n\t\t59521: 38312,\r\n\t\t59522: 38311,\r\n\t\t59523: 38317,\r\n\t\t59524: 38332,\r\n\t\t59525: 38331,\r\n\t\t59526: 38329,\r\n\t\t59527: 38334,\r\n\t\t59528: 38346,\r\n\t\t59529: 28662,\r\n\t\t59530: 38339,\r\n\t\t59531: 38349,\r\n\t\t59532: 38348,\r\n\t\t59533: 38357,\r\n\t\t59534: 38356,\r\n\t\t59535: 38358,\r\n\t\t59536: 38364,\r\n\t\t59537: 38369,\r\n\t\t59538: 38373,\r\n\t\t59539: 38370,\r\n\t\t59540: 38433,\r\n\t\t59541: 38440,\r\n\t\t59542: 38446,\r\n\t\t59543: 38447,\r\n\t\t59544: 38466,\r\n\t\t59545: 38476,\r\n\t\t59546: 38479,\r\n\t\t59547: 38475,\r\n\t\t59548: 38519,\r\n\t\t59549: 38492,\r\n\t\t59550: 38494,\r\n\t\t59551: 38493,\r\n\t\t59552: 38495,\r\n\t\t59553: 38502,\r\n\t\t59554: 38514,\r\n\t\t59555: 38508,\r\n\t\t59556: 38541,\r\n\t\t59557: 38552,\r\n\t\t59558: 38549,\r\n\t\t59559: 38551,\r\n\t\t59560: 38570,\r\n\t\t59561: 38567,\r\n\t\t59562: 38577,\r\n\t\t59563: 38578,\r\n\t\t59564: 38576,\r\n\t\t59565: 38580,\r\n\t\t59566: 38582,\r\n\t\t59567: 38584,\r\n\t\t59568: 38585,\r\n\t\t59569: 38606,\r\n\t\t59570: 38603,\r\n\t\t59571: 38601,\r\n\t\t59572: 38605,\r\n\t\t59573: 35149,\r\n\t\t59574: 38620,\r\n\t\t59575: 38669,\r\n\t\t59576: 38613,\r\n\t\t59577: 38649,\r\n\t\t59578: 38660,\r\n\t\t59579: 38662,\r\n\t\t59580: 38664,\r\n\t\t59581: 38675,\r\n\t\t59582: 38670,\r\n\t\t59583: 38673,\r\n\t\t59584: 38671,\r\n\t\t59585: 38678,\r\n\t\t59586: 38681,\r\n\t\t59587: 38692,\r\n\t\t59588: 38698,\r\n\t\t59589: 38704,\r\n\t\t59590: 38713,\r\n\t\t59591: 38717,\r\n\t\t59592: 38718,\r\n\t\t59593: 38724,\r\n\t\t59594: 38726,\r\n\t\t59595: 38728,\r\n\t\t59596: 38722,\r\n\t\t59597: 38729,\r\n\t\t59598: 38748,\r\n\t\t59599: 38752,\r\n\t\t59600: 38756,\r\n\t\t59601: 38758,\r\n\t\t59602: 38760,\r\n\t\t59603: 21202,\r\n\t\t59604: 38763,\r\n\t\t59605: 38769,\r\n\t\t59606: 38777,\r\n\t\t59607: 38789,\r\n\t\t59608: 38780,\r\n\t\t59609: 38785,\r\n\t\t59610: 38778,\r\n\t\t59611: 38790,\r\n\t\t59612: 38795,\r\n\t\t59613: 38799,\r\n\t\t59614: 38800,\r\n\t\t59615: 38812,\r\n\t\t59616: 38824,\r\n\t\t59617: 38822,\r\n\t\t59618: 38819,\r\n\t\t59619: 38835,\r\n\t\t59620: 38836,\r\n\t\t59621: 38851,\r\n\t\t59622: 38854,\r\n\t\t59623: 38856,\r\n\t\t59624: 38859,\r\n\t\t59625: 38876,\r\n\t\t59626: 38893,\r\n\t\t59627: 40783,\r\n\t\t59628: 38898,\r\n\t\t59629: 31455,\r\n\t\t59630: 38902,\r\n\t\t59631: 38901,\r\n\t\t59632: 38927,\r\n\t\t59633: 38924,\r\n\t\t59634: 38968,\r\n\t\t59635: 38948,\r\n\t\t59636: 38945,\r\n\t\t59637: 38967,\r\n\t\t59638: 38973,\r\n\t\t59639: 38982,\r\n\t\t59640: 38991,\r\n\t\t59641: 38987,\r\n\t\t59642: 39019,\r\n\t\t59643: 39023,\r\n\t\t59644: 39024,\r\n\t\t59712: 39025,\r\n\t\t59713: 39028,\r\n\t\t59714: 39027,\r\n\t\t59715: 39082,\r\n\t\t59716: 39087,\r\n\t\t59717: 39089,\r\n\t\t59718: 39094,\r\n\t\t59719: 39108,\r\n\t\t59720: 39107,\r\n\t\t59721: 39110,\r\n\t\t59722: 39145,\r\n\t\t59723: 39147,\r\n\t\t59724: 39171,\r\n\t\t59725: 39177,\r\n\t\t59726: 39186,\r\n\t\t59727: 39188,\r\n\t\t59728: 39192,\r\n\t\t59729: 39201,\r\n\t\t59730: 39197,\r\n\t\t59731: 39198,\r\n\t\t59732: 39204,\r\n\t\t59733: 39200,\r\n\t\t59734: 39212,\r\n\t\t59735: 39214,\r\n\t\t59736: 39229,\r\n\t\t59737: 39230,\r\n\t\t59738: 39234,\r\n\t\t59739: 39241,\r\n\t\t59740: 39237,\r\n\t\t59741: 39248,\r\n\t\t59742: 39243,\r\n\t\t59743: 39249,\r\n\t\t59744: 39250,\r\n\t\t59745: 39244,\r\n\t\t59746: 39253,\r\n\t\t59747: 39319,\r\n\t\t59748: 39320,\r\n\t\t59749: 39333,\r\n\t\t59750: 39341,\r\n\t\t59751: 39342,\r\n\t\t59752: 39356,\r\n\t\t59753: 39391,\r\n\t\t59754: 39387,\r\n\t\t59755: 39389,\r\n\t\t59756: 39384,\r\n\t\t59757: 39377,\r\n\t\t59758: 39405,\r\n\t\t59759: 39406,\r\n\t\t59760: 39409,\r\n\t\t59761: 39410,\r\n\t\t59762: 39419,\r\n\t\t59763: 39416,\r\n\t\t59764: 39425,\r\n\t\t59765: 39439,\r\n\t\t59766: 39429,\r\n\t\t59767: 39394,\r\n\t\t59768: 39449,\r\n\t\t59769: 39467,\r\n\t\t59770: 39479,\r\n\t\t59771: 39493,\r\n\t\t59772: 39490,\r\n\t\t59773: 39488,\r\n\t\t59774: 39491,\r\n\t\t59776: 39486,\r\n\t\t59777: 39509,\r\n\t\t59778: 39501,\r\n\t\t59779: 39515,\r\n\t\t59780: 39511,\r\n\t\t59781: 39519,\r\n\t\t59782: 39522,\r\n\t\t59783: 39525,\r\n\t\t59784: 39524,\r\n\t\t59785: 39529,\r\n\t\t59786: 39531,\r\n\t\t59787: 39530,\r\n\t\t59788: 39597,\r\n\t\t59789: 39600,\r\n\t\t59790: 39612,\r\n\t\t59791: 39616,\r\n\t\t59792: 39631,\r\n\t\t59793: 39633,\r\n\t\t59794: 39635,\r\n\t\t59795: 39636,\r\n\t\t59796: 39646,\r\n\t\t59797: 39647,\r\n\t\t59798: 39650,\r\n\t\t59799: 39651,\r\n\t\t59800: 39654,\r\n\t\t59801: 39663,\r\n\t\t59802: 39659,\r\n\t\t59803: 39662,\r\n\t\t59804: 39668,\r\n\t\t59805: 39665,\r\n\t\t59806: 39671,\r\n\t\t59807: 39675,\r\n\t\t59808: 39686,\r\n\t\t59809: 39704,\r\n\t\t59810: 39706,\r\n\t\t59811: 39711,\r\n\t\t59812: 39714,\r\n\t\t59813: 39715,\r\n\t\t59814: 39717,\r\n\t\t59815: 39719,\r\n\t\t59816: 39720,\r\n\t\t59817: 39721,\r\n\t\t59818: 39722,\r\n\t\t59819: 39726,\r\n\t\t59820: 39727,\r\n\t\t59821: 39730,\r\n\t\t59822: 39748,\r\n\t\t59823: 39747,\r\n\t\t59824: 39759,\r\n\t\t59825: 39757,\r\n\t\t59826: 39758,\r\n\t\t59827: 39761,\r\n\t\t59828: 39768,\r\n\t\t59829: 39796,\r\n\t\t59830: 39827,\r\n\t\t59831: 39811,\r\n\t\t59832: 39825,\r\n\t\t59833: 39830,\r\n\t\t59834: 39831,\r\n\t\t59835: 39839,\r\n\t\t59836: 39840,\r\n\t\t59837: 39848,\r\n\t\t59838: 39860,\r\n\t\t59839: 39872,\r\n\t\t59840: 39882,\r\n\t\t59841: 39865,\r\n\t\t59842: 39878,\r\n\t\t59843: 39887,\r\n\t\t59844: 39889,\r\n\t\t59845: 39890,\r\n\t\t59846: 39907,\r\n\t\t59847: 39906,\r\n\t\t59848: 39908,\r\n\t\t59849: 39892,\r\n\t\t59850: 39905,\r\n\t\t59851: 39994,\r\n\t\t59852: 39922,\r\n\t\t59853: 39921,\r\n\t\t59854: 39920,\r\n\t\t59855: 39957,\r\n\t\t59856: 39956,\r\n\t\t59857: 39945,\r\n\t\t59858: 39955,\r\n\t\t59859: 39948,\r\n\t\t59860: 39942,\r\n\t\t59861: 39944,\r\n\t\t59862: 39954,\r\n\t\t59863: 39946,\r\n\t\t59864: 39940,\r\n\t\t59865: 39982,\r\n\t\t59866: 39963,\r\n\t\t59867: 39973,\r\n\t\t59868: 39972,\r\n\t\t59869: 39969,\r\n\t\t59870: 39984,\r\n\t\t59871: 40007,\r\n\t\t59872: 39986,\r\n\t\t59873: 40006,\r\n\t\t59874: 39998,\r\n\t\t59875: 40026,\r\n\t\t59876: 40032,\r\n\t\t59877: 40039,\r\n\t\t59878: 40054,\r\n\t\t59879: 40056,\r\n\t\t59880: 40167,\r\n\t\t59881: 40172,\r\n\t\t59882: 40176,\r\n\t\t59883: 40201,\r\n\t\t59884: 40200,\r\n\t\t59885: 40171,\r\n\t\t59886: 40195,\r\n\t\t59887: 40198,\r\n\t\t59888: 40234,\r\n\t\t59889: 40230,\r\n\t\t59890: 40367,\r\n\t\t59891: 40227,\r\n\t\t59892: 40223,\r\n\t\t59893: 40260,\r\n\t\t59894: 40213,\r\n\t\t59895: 40210,\r\n\t\t59896: 40257,\r\n\t\t59897: 40255,\r\n\t\t59898: 40254,\r\n\t\t59899: 40262,\r\n\t\t59900: 40264,\r\n\t\t59968: 40285,\r\n\t\t59969: 40286,\r\n\t\t59970: 40292,\r\n\t\t59971: 40273,\r\n\t\t59972: 40272,\r\n\t\t59973: 40281,\r\n\t\t59974: 40306,\r\n\t\t59975: 40329,\r\n\t\t59976: 40327,\r\n\t\t59977: 40363,\r\n\t\t59978: 40303,\r\n\t\t59979: 40314,\r\n\t\t59980: 40346,\r\n\t\t59981: 40356,\r\n\t\t59982: 40361,\r\n\t\t59983: 40370,\r\n\t\t59984: 40388,\r\n\t\t59985: 40385,\r\n\t\t59986: 40379,\r\n\t\t59987: 40376,\r\n\t\t59988: 40378,\r\n\t\t59989: 40390,\r\n\t\t59990: 40399,\r\n\t\t59991: 40386,\r\n\t\t59992: 40409,\r\n\t\t59993: 40403,\r\n\t\t59994: 40440,\r\n\t\t59995: 40422,\r\n\t\t59996: 40429,\r\n\t\t59997: 40431,\r\n\t\t59998: 40445,\r\n\t\t59999: 40474,\r\n\t\t60000: 40475,\r\n\t\t60001: 40478,\r\n\t\t60002: 40565,\r\n\t\t60003: 40569,\r\n\t\t60004: 40573,\r\n\t\t60005: 40577,\r\n\t\t60006: 40584,\r\n\t\t60007: 40587,\r\n\t\t60008: 40588,\r\n\t\t60009: 40594,\r\n\t\t60010: 40597,\r\n\t\t60011: 40593,\r\n\t\t60012: 40605,\r\n\t\t60013: 40613,\r\n\t\t60014: 40617,\r\n\t\t60015: 40632,\r\n\t\t60016: 40618,\r\n\t\t60017: 40621,\r\n\t\t60018: 38753,\r\n\t\t60019: 40652,\r\n\t\t60020: 40654,\r\n\t\t60021: 40655,\r\n\t\t60022: 40656,\r\n\t\t60023: 40660,\r\n\t\t60024: 40668,\r\n\t\t60025: 40670,\r\n\t\t60026: 40669,\r\n\t\t60027: 40672,\r\n\t\t60028: 40677,\r\n\t\t60029: 40680,\r\n\t\t60030: 40687,\r\n\t\t60032: 40692,\r\n\t\t60033: 40694,\r\n\t\t60034: 40695,\r\n\t\t60035: 40697,\r\n\t\t60036: 40699,\r\n\t\t60037: 40700,\r\n\t\t60038: 40701,\r\n\t\t60039: 40711,\r\n\t\t60040: 40712,\r\n\t\t60041: 30391,\r\n\t\t60042: 40725,\r\n\t\t60043: 40737,\r\n\t\t60044: 40748,\r\n\t\t60045: 40766,\r\n\t\t60046: 40778,\r\n\t\t60047: 40786,\r\n\t\t60048: 40788,\r\n\t\t60049: 40803,\r\n\t\t60050: 40799,\r\n\t\t60051: 40800,\r\n\t\t60052: 40801,\r\n\t\t60053: 40806,\r\n\t\t60054: 40807,\r\n\t\t60055: 40812,\r\n\t\t60056: 40810,\r\n\t\t60057: 40823,\r\n\t\t60058: 40818,\r\n\t\t60059: 40822,\r\n\t\t60060: 40853,\r\n\t\t60061: 40860,\r\n\t\t60062: 40864,\r\n\t\t60063: 22575,\r\n\t\t60064: 27079,\r\n\t\t60065: 36953,\r\n\t\t60066: 29796,\r\n\t\t60067: 20956,\r\n\t\t60068: 29081,\r\n\t\t60736: 32394,\r\n\t\t60737: 35100,\r\n\t\t60738: 37704,\r\n\t\t60739: 37512,\r\n\t\t60740: 34012,\r\n\t\t60741: 20425,\r\n\t\t60742: 28859,\r\n\t\t60743: 26161,\r\n\t\t60744: 26824,\r\n\t\t60745: 37625,\r\n\t\t60746: 26363,\r\n\t\t60747: 24389,\r\n\t\t60748: 20008,\r\n\t\t60749: 20193,\r\n\t\t60750: 20220,\r\n\t\t60751: 20224,\r\n\t\t60752: 20227,\r\n\t\t60753: 20281,\r\n\t\t60754: 20310,\r\n\t\t60755: 20370,\r\n\t\t60756: 20362,\r\n\t\t60757: 20378,\r\n\t\t60758: 20372,\r\n\t\t60759: 20429,\r\n\t\t60760: 20544,\r\n\t\t60761: 20514,\r\n\t\t60762: 20479,\r\n\t\t60763: 20510,\r\n\t\t60764: 20550,\r\n\t\t60765: 20592,\r\n\t\t60766: 20546,\r\n\t\t60767: 20628,\r\n\t\t60768: 20724,\r\n\t\t60769: 20696,\r\n\t\t60770: 20810,\r\n\t\t60771: 20836,\r\n\t\t60772: 20893,\r\n\t\t60773: 20926,\r\n\t\t60774: 20972,\r\n\t\t60775: 21013,\r\n\t\t60776: 21148,\r\n\t\t60777: 21158,\r\n\t\t60778: 21184,\r\n\t\t60779: 21211,\r\n\t\t60780: 21248,\r\n\t\t60781: 21255,\r\n\t\t60782: 21284,\r\n\t\t60783: 21362,\r\n\t\t60784: 21395,\r\n\t\t60785: 21426,\r\n\t\t60786: 21469,\r\n\t\t60787: 64014,\r\n\t\t60788: 21660,\r\n\t\t60789: 21642,\r\n\t\t60790: 21673,\r\n\t\t60791: 21759,\r\n\t\t60792: 21894,\r\n\t\t60793: 22361,\r\n\t\t60794: 22373,\r\n\t\t60795: 22444,\r\n\t\t60796: 22472,\r\n\t\t60797: 22471,\r\n\t\t60798: 64015,\r\n\t\t60800: 64016,\r\n\t\t60801: 22686,\r\n\t\t60802: 22706,\r\n\t\t60803: 22795,\r\n\t\t60804: 22867,\r\n\t\t60805: 22875,\r\n\t\t60806: 22877,\r\n\t\t60807: 22883,\r\n\t\t60808: 22948,\r\n\t\t60809: 22970,\r\n\t\t60810: 23382,\r\n\t\t60811: 23488,\r\n\t\t60812: 29999,\r\n\t\t60813: 23512,\r\n\t\t60814: 23532,\r\n\t\t60815: 23582,\r\n\t\t60816: 23718,\r\n\t\t60817: 23738,\r\n\t\t60818: 23797,\r\n\t\t60819: 23847,\r\n\t\t60820: 23891,\r\n\t\t60821: 64017,\r\n\t\t60822: 23874,\r\n\t\t60823: 23917,\r\n\t\t60824: 23992,\r\n\t\t60825: 23993,\r\n\t\t60826: 24016,\r\n\t\t60827: 24353,\r\n\t\t60828: 24372,\r\n\t\t60829: 24423,\r\n\t\t60830: 24503,\r\n\t\t60831: 24542,\r\n\t\t60832: 24669,\r\n\t\t60833: 24709,\r\n\t\t60834: 24714,\r\n\t\t60835: 24798,\r\n\t\t60836: 24789,\r\n\t\t60837: 24864,\r\n\t\t60838: 24818,\r\n\t\t60839: 24849,\r\n\t\t60840: 24887,\r\n\t\t60841: 24880,\r\n\t\t60842: 24984,\r\n\t\t60843: 25107,\r\n\t\t60844: 25254,\r\n\t\t60845: 25589,\r\n\t\t60846: 25696,\r\n\t\t60847: 25757,\r\n\t\t60848: 25806,\r\n\t\t60849: 25934,\r\n\t\t60850: 26112,\r\n\t\t60851: 26133,\r\n\t\t60852: 26171,\r\n\t\t60853: 26121,\r\n\t\t60854: 26158,\r\n\t\t60855: 26142,\r\n\t\t60856: 26148,\r\n\t\t60857: 26213,\r\n\t\t60858: 26199,\r\n\t\t60859: 26201,\r\n\t\t60860: 64018,\r\n\t\t60861: 26227,\r\n\t\t60862: 26265,\r\n\t\t60863: 26272,\r\n\t\t60864: 26290,\r\n\t\t60865: 26303,\r\n\t\t60866: 26362,\r\n\t\t60867: 26382,\r\n\t\t60868: 63785,\r\n\t\t60869: 26470,\r\n\t\t60870: 26555,\r\n\t\t60871: 26706,\r\n\t\t60872: 26560,\r\n\t\t60873: 26625,\r\n\t\t60874: 26692,\r\n\t\t60875: 26831,\r\n\t\t60876: 64019,\r\n\t\t60877: 26984,\r\n\t\t60878: 64020,\r\n\t\t60879: 27032,\r\n\t\t60880: 27106,\r\n\t\t60881: 27184,\r\n\t\t60882: 27243,\r\n\t\t60883: 27206,\r\n\t\t60884: 27251,\r\n\t\t60885: 27262,\r\n\t\t60886: 27362,\r\n\t\t60887: 27364,\r\n\t\t60888: 27606,\r\n\t\t60889: 27711,\r\n\t\t60890: 27740,\r\n\t\t60891: 27782,\r\n\t\t60892: 27759,\r\n\t\t60893: 27866,\r\n\t\t60894: 27908,\r\n\t\t60895: 28039,\r\n\t\t60896: 28015,\r\n\t\t60897: 28054,\r\n\t\t60898: 28076,\r\n\t\t60899: 28111,\r\n\t\t60900: 28152,\r\n\t\t60901: 28146,\r\n\t\t60902: 28156,\r\n\t\t60903: 28217,\r\n\t\t60904: 28252,\r\n\t\t60905: 28199,\r\n\t\t60906: 28220,\r\n\t\t60907: 28351,\r\n\t\t60908: 28552,\r\n\t\t60909: 28597,\r\n\t\t60910: 28661,\r\n\t\t60911: 28677,\r\n\t\t60912: 28679,\r\n\t\t60913: 28712,\r\n\t\t60914: 28805,\r\n\t\t60915: 28843,\r\n\t\t60916: 28943,\r\n\t\t60917: 28932,\r\n\t\t60918: 29020,\r\n\t\t60919: 28998,\r\n\t\t60920: 28999,\r\n\t\t60921: 64021,\r\n\t\t60922: 29121,\r\n\t\t60923: 29182,\r\n\t\t60924: 29361,\r\n\t\t60992: 29374,\r\n\t\t60993: 29476,\r\n\t\t60994: 64022,\r\n\t\t60995: 29559,\r\n\t\t60996: 29629,\r\n\t\t60997: 29641,\r\n\t\t60998: 29654,\r\n\t\t60999: 29667,\r\n\t\t61000: 29650,\r\n\t\t61001: 29703,\r\n\t\t61002: 29685,\r\n\t\t61003: 29734,\r\n\t\t61004: 29738,\r\n\t\t61005: 29737,\r\n\t\t61006: 29742,\r\n\t\t61007: 29794,\r\n\t\t61008: 29833,\r\n\t\t61009: 29855,\r\n\t\t61010: 29953,\r\n\t\t61011: 30063,\r\n\t\t61012: 30338,\r\n\t\t61013: 30364,\r\n\t\t61014: 30366,\r\n\t\t61015: 30363,\r\n\t\t61016: 30374,\r\n\t\t61017: 64023,\r\n\t\t61018: 30534,\r\n\t\t61019: 21167,\r\n\t\t61020: 30753,\r\n\t\t61021: 30798,\r\n\t\t61022: 30820,\r\n\t\t61023: 30842,\r\n\t\t61024: 31024,\r\n\t\t61025: 64024,\r\n\t\t61026: 64025,\r\n\t\t61027: 64026,\r\n\t\t61028: 31124,\r\n\t\t61029: 64027,\r\n\t\t61030: 31131,\r\n\t\t61031: 31441,\r\n\t\t61032: 31463,\r\n\t\t61033: 64028,\r\n\t\t61034: 31467,\r\n\t\t61035: 31646,\r\n\t\t61036: 64029,\r\n\t\t61037: 32072,\r\n\t\t61038: 32092,\r\n\t\t61039: 32183,\r\n\t\t61040: 32160,\r\n\t\t61041: 32214,\r\n\t\t61042: 32338,\r\n\t\t61043: 32583,\r\n\t\t61044: 32673,\r\n\t\t61045: 64030,\r\n\t\t61046: 33537,\r\n\t\t61047: 33634,\r\n\t\t61048: 33663,\r\n\t\t61049: 33735,\r\n\t\t61050: 33782,\r\n\t\t61051: 33864,\r\n\t\t61052: 33972,\r\n\t\t61053: 34131,\r\n\t\t61054: 34137,\r\n\t\t61056: 34155,\r\n\t\t61057: 64031,\r\n\t\t61058: 34224,\r\n\t\t61059: 64032,\r\n\t\t61060: 64033,\r\n\t\t61061: 34823,\r\n\t\t61062: 35061,\r\n\t\t61063: 35346,\r\n\t\t61064: 35383,\r\n\t\t61065: 35449,\r\n\t\t61066: 35495,\r\n\t\t61067: 35518,\r\n\t\t61068: 35551,\r\n\t\t61069: 64034,\r\n\t\t61070: 35574,\r\n\t\t61071: 35667,\r\n\t\t61072: 35711,\r\n\t\t61073: 36080,\r\n\t\t61074: 36084,\r\n\t\t61075: 36114,\r\n\t\t61076: 36214,\r\n\t\t61077: 64035,\r\n\t\t61078: 36559,\r\n\t\t61079: 64036,\r\n\t\t61080: 64037,\r\n\t\t61081: 36967,\r\n\t\t61082: 37086,\r\n\t\t61083: 64038,\r\n\t\t61084: 37141,\r\n\t\t61085: 37159,\r\n\t\t61086: 37338,\r\n\t\t61087: 37335,\r\n\t\t61088: 37342,\r\n\t\t61089: 37357,\r\n\t\t61090: 37358,\r\n\t\t61091: 37348,\r\n\t\t61092: 37349,\r\n\t\t61093: 37382,\r\n\t\t61094: 37392,\r\n\t\t61095: 37386,\r\n\t\t61096: 37434,\r\n\t\t61097: 37440,\r\n\t\t61098: 37436,\r\n\t\t61099: 37454,\r\n\t\t61100: 37465,\r\n\t\t61101: 37457,\r\n\t\t61102: 37433,\r\n\t\t61103: 37479,\r\n\t\t61104: 37543,\r\n\t\t61105: 37495,\r\n\t\t61106: 37496,\r\n\t\t61107: 37607,\r\n\t\t61108: 37591,\r\n\t\t61109: 37593,\r\n\t\t61110: 37584,\r\n\t\t61111: 64039,\r\n\t\t61112: 37589,\r\n\t\t61113: 37600,\r\n\t\t61114: 37587,\r\n\t\t61115: 37669,\r\n\t\t61116: 37665,\r\n\t\t61117: 37627,\r\n\t\t61118: 64040,\r\n\t\t61119: 37662,\r\n\t\t61120: 37631,\r\n\t\t61121: 37661,\r\n\t\t61122: 37634,\r\n\t\t61123: 37744,\r\n\t\t61124: 37719,\r\n\t\t61125: 37796,\r\n\t\t61126: 37830,\r\n\t\t61127: 37854,\r\n\t\t61128: 37880,\r\n\t\t61129: 37937,\r\n\t\t61130: 37957,\r\n\t\t61131: 37960,\r\n\t\t61132: 38290,\r\n\t\t61133: 63964,\r\n\t\t61134: 64041,\r\n\t\t61135: 38557,\r\n\t\t61136: 38575,\r\n\t\t61137: 38707,\r\n\t\t61138: 38715,\r\n\t\t61139: 38723,\r\n\t\t61140: 38733,\r\n\t\t61141: 38735,\r\n\t\t61142: 38737,\r\n\t\t61143: 38741,\r\n\t\t61144: 38999,\r\n\t\t61145: 39013,\r\n\t\t61146: 64042,\r\n\t\t61147: 64043,\r\n\t\t61148: 39207,\r\n\t\t61149: 64044,\r\n\t\t61150: 39326,\r\n\t\t61151: 39502,\r\n\t\t61152: 39641,\r\n\t\t61153: 39644,\r\n\t\t61154: 39797,\r\n\t\t61155: 39794,\r\n\t\t61156: 39823,\r\n\t\t61157: 39857,\r\n\t\t61158: 39867,\r\n\t\t61159: 39936,\r\n\t\t61160: 40304,\r\n\t\t61161: 40299,\r\n\t\t61162: 64045,\r\n\t\t61163: 40473,\r\n\t\t61164: 40657,\r\n\t\t61167: 8560,\r\n\t\t61168: 8561,\r\n\t\t61169: 8562,\r\n\t\t61170: 8563,\r\n\t\t61171: 8564,\r\n\t\t61172: 8565,\r\n\t\t61173: 8566,\r\n\t\t61174: 8567,\r\n\t\t61175: 8568,\r\n\t\t61176: 8569,\r\n\t\t61177: 65506,\r\n\t\t61178: 65508,\r\n\t\t61179: 65287,\r\n\t\t61180: 65282,\r\n\t\t61504: 57344,\r\n\t\t61505: 57345,\r\n\t\t61506: 57346,\r\n\t\t61507: 57347,\r\n\t\t61508: 57348,\r\n\t\t61509: 57349,\r\n\t\t61510: 57350,\r\n\t\t61511: 57351,\r\n\t\t61512: 57352,\r\n\t\t61513: 57353,\r\n\t\t61514: 57354,\r\n\t\t61515: 57355,\r\n\t\t61516: 57356,\r\n\t\t61517: 57357,\r\n\t\t61518: 57358,\r\n\t\t61519: 57359,\r\n\t\t61520: 57360,\r\n\t\t61521: 57361,\r\n\t\t61522: 57362,\r\n\t\t61523: 57363,\r\n\t\t61524: 57364,\r\n\t\t61525: 57365,\r\n\t\t61526: 57366,\r\n\t\t61527: 57367,\r\n\t\t61528: 57368,\r\n\t\t61529: 57369,\r\n\t\t61530: 57370,\r\n\t\t61531: 57371,\r\n\t\t61532: 57372,\r\n\t\t61533: 57373,\r\n\t\t61534: 57374,\r\n\t\t61535: 57375,\r\n\t\t61536: 57376,\r\n\t\t61537: 57377,\r\n\t\t61538: 57378,\r\n\t\t61539: 57379,\r\n\t\t61540: 57380,\r\n\t\t61541: 57381,\r\n\t\t61542: 57382,\r\n\t\t61543: 57383,\r\n\t\t61544: 57384,\r\n\t\t61545: 57385,\r\n\t\t61546: 57386,\r\n\t\t61547: 57387,\r\n\t\t61548: 57388,\r\n\t\t61549: 57389,\r\n\t\t61550: 57390,\r\n\t\t61551: 57391,\r\n\t\t61552: 57392,\r\n\t\t61553: 57393,\r\n\t\t61554: 57394,\r\n\t\t61555: 57395,\r\n\t\t61556: 57396,\r\n\t\t61557: 57397,\r\n\t\t61558: 57398,\r\n\t\t61559: 57399,\r\n\t\t61560: 57400,\r\n\t\t61561: 57401,\r\n\t\t61562: 57402,\r\n\t\t61563: 57403,\r\n\t\t61564: 57404,\r\n\t\t61565: 57405,\r\n\t\t61566: 57406,\r\n\t\t61568: 57407,\r\n\t\t61569: 57408,\r\n\t\t61570: 57409,\r\n\t\t61571: 57410,\r\n\t\t61572: 57411,\r\n\t\t61573: 57412,\r\n\t\t61574: 57413,\r\n\t\t61575: 57414,\r\n\t\t61576: 57415,\r\n\t\t61577: 57416,\r\n\t\t61578: 57417,\r\n\t\t61579: 57418,\r\n\t\t61580: 57419,\r\n\t\t61581: 57420,\r\n\t\t61582: 57421,\r\n\t\t61583: 57422,\r\n\t\t61584: 57423,\r\n\t\t61585: 57424,\r\n\t\t61586: 57425,\r\n\t\t61587: 57426,\r\n\t\t61588: 57427,\r\n\t\t61589: 57428,\r\n\t\t61590: 57429,\r\n\t\t61591: 57430,\r\n\t\t61592: 57431,\r\n\t\t61593: 57432,\r\n\t\t61594: 57433,\r\n\t\t61595: 57434,\r\n\t\t61596: 57435,\r\n\t\t61597: 57436,\r\n\t\t61598: 57437,\r\n\t\t61599: 57438,\r\n\t\t61600: 57439,\r\n\t\t61601: 57440,\r\n\t\t61602: 57441,\r\n\t\t61603: 57442,\r\n\t\t61604: 57443,\r\n\t\t61605: 57444,\r\n\t\t61606: 57445,\r\n\t\t61607: 57446,\r\n\t\t61608: 57447,\r\n\t\t61609: 57448,\r\n\t\t61610: 57449,\r\n\t\t61611: 57450,\r\n\t\t61612: 57451,\r\n\t\t61613: 57452,\r\n\t\t61614: 57453,\r\n\t\t61615: 57454,\r\n\t\t61616: 57455,\r\n\t\t61617: 57456,\r\n\t\t61618: 57457,\r\n\t\t61619: 57458,\r\n\t\t61620: 57459,\r\n\t\t61621: 57460,\r\n\t\t61622: 57461,\r\n\t\t61623: 57462,\r\n\t\t61624: 57463,\r\n\t\t61625: 57464,\r\n\t\t61626: 57465,\r\n\t\t61627: 57466,\r\n\t\t61628: 57467,\r\n\t\t61629: 57468,\r\n\t\t61630: 57469,\r\n\t\t61631: 57470,\r\n\t\t61632: 57471,\r\n\t\t61633: 57472,\r\n\t\t61634: 57473,\r\n\t\t61635: 57474,\r\n\t\t61636: 57475,\r\n\t\t61637: 57476,\r\n\t\t61638: 57477,\r\n\t\t61639: 57478,\r\n\t\t61640: 57479,\r\n\t\t61641: 57480,\r\n\t\t61642: 57481,\r\n\t\t61643: 57482,\r\n\t\t61644: 57483,\r\n\t\t61645: 57484,\r\n\t\t61646: 57485,\r\n\t\t61647: 57486,\r\n\t\t61648: 57487,\r\n\t\t61649: 57488,\r\n\t\t61650: 57489,\r\n\t\t61651: 57490,\r\n\t\t61652: 57491,\r\n\t\t61653: 57492,\r\n\t\t61654: 57493,\r\n\t\t61655: 57494,\r\n\t\t61656: 57495,\r\n\t\t61657: 57496,\r\n\t\t61658: 57497,\r\n\t\t61659: 57498,\r\n\t\t61660: 57499,\r\n\t\t61661: 57500,\r\n\t\t61662: 57501,\r\n\t\t61663: 57502,\r\n\t\t61664: 57503,\r\n\t\t61665: 57504,\r\n\t\t61666: 57505,\r\n\t\t61667: 57506,\r\n\t\t61668: 57507,\r\n\t\t61669: 57508,\r\n\t\t61670: 57509,\r\n\t\t61671: 57510,\r\n\t\t61672: 57511,\r\n\t\t61673: 57512,\r\n\t\t61674: 57513,\r\n\t\t61675: 57514,\r\n\t\t61676: 57515,\r\n\t\t61677: 57516,\r\n\t\t61678: 57517,\r\n\t\t61679: 57518,\r\n\t\t61680: 57519,\r\n\t\t61681: 57520,\r\n\t\t61682: 57521,\r\n\t\t61683: 57522,\r\n\t\t61684: 57523,\r\n\t\t61685: 57524,\r\n\t\t61686: 57525,\r\n\t\t61687: 57526,\r\n\t\t61688: 57527,\r\n\t\t61689: 57528,\r\n\t\t61690: 57529,\r\n\t\t61691: 57530,\r\n\t\t61692: 57531,\r\n\t\t61760: 57532,\r\n\t\t61761: 57533,\r\n\t\t61762: 57534,\r\n\t\t61763: 57535,\r\n\t\t61764: 57536,\r\n\t\t61765: 57537,\r\n\t\t61766: 57538,\r\n\t\t61767: 57539,\r\n\t\t61768: 57540,\r\n\t\t61769: 57541,\r\n\t\t61770: 57542,\r\n\t\t61771: 57543,\r\n\t\t61772: 57544,\r\n\t\t61773: 57545,\r\n\t\t61774: 57546,\r\n\t\t61775: 57547,\r\n\t\t61776: 57548,\r\n\t\t61777: 57549,\r\n\t\t61778: 57550,\r\n\t\t61779: 57551,\r\n\t\t61780: 57552,\r\n\t\t61781: 57553,\r\n\t\t61782: 57554,\r\n\t\t61783: 57555,\r\n\t\t61784: 57556,\r\n\t\t61785: 57557,\r\n\t\t61786: 57558,\r\n\t\t61787: 57559,\r\n\t\t61788: 57560,\r\n\t\t61789: 57561,\r\n\t\t61790: 57562,\r\n\t\t61791: 57563,\r\n\t\t61792: 57564,\r\n\t\t61793: 57565,\r\n\t\t61794: 57566,\r\n\t\t61795: 57567,\r\n\t\t61796: 57568,\r\n\t\t61797: 57569,\r\n\t\t61798: 57570,\r\n\t\t61799: 57571,\r\n\t\t61800: 57572,\r\n\t\t61801: 57573,\r\n\t\t61802: 57574,\r\n\t\t61803: 57575,\r\n\t\t61804: 57576,\r\n\t\t61805: 57577,\r\n\t\t61806: 57578,\r\n\t\t61807: 57579,\r\n\t\t61808: 57580,\r\n\t\t61809: 57581,\r\n\t\t61810: 57582,\r\n\t\t61811: 57583,\r\n\t\t61812: 57584,\r\n\t\t61813: 57585,\r\n\t\t61814: 57586,\r\n\t\t61815: 57587,\r\n\t\t61816: 57588,\r\n\t\t61817: 57589,\r\n\t\t61818: 57590,\r\n\t\t61819: 57591,\r\n\t\t61820: 57592,\r\n\t\t61821: 57593,\r\n\t\t61822: 57594,\r\n\t\t61824: 57595,\r\n\t\t61825: 57596,\r\n\t\t61826: 57597,\r\n\t\t61827: 57598,\r\n\t\t61828: 57599,\r\n\t\t61829: 57600,\r\n\t\t61830: 57601,\r\n\t\t61831: 57602,\r\n\t\t61832: 57603,\r\n\t\t61833: 57604,\r\n\t\t61834: 57605,\r\n\t\t61835: 57606,\r\n\t\t61836: 57607,\r\n\t\t61837: 57608,\r\n\t\t61838: 57609,\r\n\t\t61839: 57610,\r\n\t\t61840: 57611,\r\n\t\t61841: 57612,\r\n\t\t61842: 57613,\r\n\t\t61843: 57614,\r\n\t\t61844: 57615,\r\n\t\t61845: 57616,\r\n\t\t61846: 57617,\r\n\t\t61847: 57618,\r\n\t\t61848: 57619,\r\n\t\t61849: 57620,\r\n\t\t61850: 57621,\r\n\t\t61851: 57622,\r\n\t\t61852: 57623,\r\n\t\t61853: 57624,\r\n\t\t61854: 57625,\r\n\t\t61855: 57626,\r\n\t\t61856: 57627,\r\n\t\t61857: 57628,\r\n\t\t61858: 57629,\r\n\t\t61859: 57630,\r\n\t\t61860: 57631,\r\n\t\t61861: 57632,\r\n\t\t61862: 57633,\r\n\t\t61863: 57634,\r\n\t\t61864: 57635,\r\n\t\t61865: 57636,\r\n\t\t61866: 57637,\r\n\t\t61867: 57638,\r\n\t\t61868: 57639,\r\n\t\t61869: 57640,\r\n\t\t61870: 57641,\r\n\t\t61871: 57642,\r\n\t\t61872: 57643,\r\n\t\t61873: 57644,\r\n\t\t61874: 57645,\r\n\t\t61875: 57646,\r\n\t\t61876: 57647,\r\n\t\t61877: 57648,\r\n\t\t61878: 57649,\r\n\t\t61879: 57650,\r\n\t\t61880: 57651,\r\n\t\t61881: 57652,\r\n\t\t61882: 57653,\r\n\t\t61883: 57654,\r\n\t\t61884: 57655,\r\n\t\t61885: 57656,\r\n\t\t61886: 57657,\r\n\t\t61887: 57658,\r\n\t\t61888: 57659,\r\n\t\t61889: 57660,\r\n\t\t61890: 57661,\r\n\t\t61891: 57662,\r\n\t\t61892: 57663,\r\n\t\t61893: 57664,\r\n\t\t61894: 57665,\r\n\t\t61895: 57666,\r\n\t\t61896: 57667,\r\n\t\t61897: 57668,\r\n\t\t61898: 57669,\r\n\t\t61899: 57670,\r\n\t\t61900: 57671,\r\n\t\t61901: 57672,\r\n\t\t61902: 57673,\r\n\t\t61903: 57674,\r\n\t\t61904: 57675,\r\n\t\t61905: 57676,\r\n\t\t61906: 57677,\r\n\t\t61907: 57678,\r\n\t\t61908: 57679,\r\n\t\t61909: 57680,\r\n\t\t61910: 57681,\r\n\t\t61911: 57682,\r\n\t\t61912: 57683,\r\n\t\t61913: 57684,\r\n\t\t61914: 57685,\r\n\t\t61915: 57686,\r\n\t\t61916: 57687,\r\n\t\t61917: 57688,\r\n\t\t61918: 57689,\r\n\t\t61919: 57690,\r\n\t\t61920: 57691,\r\n\t\t61921: 57692,\r\n\t\t61922: 57693,\r\n\t\t61923: 57694,\r\n\t\t61924: 57695,\r\n\t\t61925: 57696,\r\n\t\t61926: 57697,\r\n\t\t61927: 57698,\r\n\t\t61928: 57699,\r\n\t\t61929: 57700,\r\n\t\t61930: 57701,\r\n\t\t61931: 57702,\r\n\t\t61932: 57703,\r\n\t\t61933: 57704,\r\n\t\t61934: 57705,\r\n\t\t61935: 57706,\r\n\t\t61936: 57707,\r\n\t\t61937: 57708,\r\n\t\t61938: 57709,\r\n\t\t61939: 57710,\r\n\t\t61940: 57711,\r\n\t\t61941: 57712,\r\n\t\t61942: 57713,\r\n\t\t61943: 57714,\r\n\t\t61944: 57715,\r\n\t\t61945: 57716,\r\n\t\t61946: 57717,\r\n\t\t61947: 57718,\r\n\t\t61948: 57719,\r\n\t\t62016: 57720,\r\n\t\t62017: 57721,\r\n\t\t62018: 57722,\r\n\t\t62019: 57723,\r\n\t\t62020: 57724,\r\n\t\t62021: 57725,\r\n\t\t62022: 57726,\r\n\t\t62023: 57727,\r\n\t\t62024: 57728,\r\n\t\t62025: 57729,\r\n\t\t62026: 57730,\r\n\t\t62027: 57731,\r\n\t\t62028: 57732,\r\n\t\t62029: 57733,\r\n\t\t62030: 57734,\r\n\t\t62031: 57735,\r\n\t\t62032: 57736,\r\n\t\t62033: 57737,\r\n\t\t62034: 57738,\r\n\t\t62035: 57739,\r\n\t\t62036: 57740,\r\n\t\t62037: 57741,\r\n\t\t62038: 57742,\r\n\t\t62039: 57743,\r\n\t\t62040: 57744,\r\n\t\t62041: 57745,\r\n\t\t62042: 57746,\r\n\t\t62043: 57747,\r\n\t\t62044: 57748,\r\n\t\t62045: 57749,\r\n\t\t62046: 57750,\r\n\t\t62047: 57751,\r\n\t\t62048: 57752,\r\n\t\t62049: 57753,\r\n\t\t62050: 57754,\r\n\t\t62051: 57755,\r\n\t\t62052: 57756,\r\n\t\t62053: 57757,\r\n\t\t62054: 57758,\r\n\t\t62055: 57759,\r\n\t\t62056: 57760,\r\n\t\t62057: 57761,\r\n\t\t62058: 57762,\r\n\t\t62059: 57763,\r\n\t\t62060: 57764,\r\n\t\t62061: 57765,\r\n\t\t62062: 57766,\r\n\t\t62063: 57767,\r\n\t\t62064: 57768,\r\n\t\t62065: 57769,\r\n\t\t62066: 57770,\r\n\t\t62067: 57771,\r\n\t\t62068: 57772,\r\n\t\t62069: 57773,\r\n\t\t62070: 57774,\r\n\t\t62071: 57775,\r\n\t\t62072: 57776,\r\n\t\t62073: 57777,\r\n\t\t62074: 57778,\r\n\t\t62075: 57779,\r\n\t\t62076: 57780,\r\n\t\t62077: 57781,\r\n\t\t62078: 57782,\r\n\t\t62080: 57783,\r\n\t\t62081: 57784,\r\n\t\t62082: 57785,\r\n\t\t62083: 57786,\r\n\t\t62084: 57787,\r\n\t\t62085: 57788,\r\n\t\t62086: 57789,\r\n\t\t62087: 57790,\r\n\t\t62088: 57791,\r\n\t\t62089: 57792,\r\n\t\t62090: 57793,\r\n\t\t62091: 57794,\r\n\t\t62092: 57795,\r\n\t\t62093: 57796,\r\n\t\t62094: 57797,\r\n\t\t62095: 57798,\r\n\t\t62096: 57799,\r\n\t\t62097: 57800,\r\n\t\t62098: 57801,\r\n\t\t62099: 57802,\r\n\t\t62100: 57803,\r\n\t\t62101: 57804,\r\n\t\t62102: 57805,\r\n\t\t62103: 57806,\r\n\t\t62104: 57807,\r\n\t\t62105: 57808,\r\n\t\t62106: 57809,\r\n\t\t62107: 57810,\r\n\t\t62108: 57811,\r\n\t\t62109: 57812,\r\n\t\t62110: 57813,\r\n\t\t62111: 57814,\r\n\t\t62112: 57815,\r\n\t\t62113: 57816,\r\n\t\t62114: 57817,\r\n\t\t62115: 57818,\r\n\t\t62116: 57819,\r\n\t\t62117: 57820,\r\n\t\t62118: 57821,\r\n\t\t62119: 57822,\r\n\t\t62120: 57823,\r\n\t\t62121: 57824,\r\n\t\t62122: 57825,\r\n\t\t62123: 57826,\r\n\t\t62124: 57827,\r\n\t\t62125: 57828,\r\n\t\t62126: 57829,\r\n\t\t62127: 57830,\r\n\t\t62128: 57831,\r\n\t\t62129: 57832,\r\n\t\t62130: 57833,\r\n\t\t62131: 57834,\r\n\t\t62132: 57835,\r\n\t\t62133: 57836,\r\n\t\t62134: 57837,\r\n\t\t62135: 57838,\r\n\t\t62136: 57839,\r\n\t\t62137: 57840,\r\n\t\t62138: 57841,\r\n\t\t62139: 57842,\r\n\t\t62140: 57843,\r\n\t\t62141: 57844,\r\n\t\t62142: 57845,\r\n\t\t62143: 57846,\r\n\t\t62144: 57847,\r\n\t\t62145: 57848,\r\n\t\t62146: 57849,\r\n\t\t62147: 57850,\r\n\t\t62148: 57851,\r\n\t\t62149: 57852,\r\n\t\t62150: 57853,\r\n\t\t62151: 57854,\r\n\t\t62152: 57855,\r\n\t\t62153: 57856,\r\n\t\t62154: 57857,\r\n\t\t62155: 57858,\r\n\t\t62156: 57859,\r\n\t\t62157: 57860,\r\n\t\t62158: 57861,\r\n\t\t62159: 57862,\r\n\t\t62160: 57863,\r\n\t\t62161: 57864,\r\n\t\t62162: 57865,\r\n\t\t62163: 57866,\r\n\t\t62164: 57867,\r\n\t\t62165: 57868,\r\n\t\t62166: 57869,\r\n\t\t62167: 57870,\r\n\t\t62168: 57871,\r\n\t\t62169: 57872,\r\n\t\t62170: 57873,\r\n\t\t62171: 57874,\r\n\t\t62172: 57875,\r\n\t\t62173: 57876,\r\n\t\t62174: 57877,\r\n\t\t62175: 57878,\r\n\t\t62176: 57879,\r\n\t\t62177: 57880,\r\n\t\t62178: 57881,\r\n\t\t62179: 57882,\r\n\t\t62180: 57883,\r\n\t\t62181: 57884,\r\n\t\t62182: 57885,\r\n\t\t62183: 57886,\r\n\t\t62184: 57887,\r\n\t\t62185: 57888,\r\n\t\t62186: 57889,\r\n\t\t62187: 57890,\r\n\t\t62188: 57891,\r\n\t\t62189: 57892,\r\n\t\t62190: 57893,\r\n\t\t62191: 57894,\r\n\t\t62192: 57895,\r\n\t\t62193: 57896,\r\n\t\t62194: 57897,\r\n\t\t62195: 57898,\r\n\t\t62196: 57899,\r\n\t\t62197: 57900,\r\n\t\t62198: 57901,\r\n\t\t62199: 57902,\r\n\t\t62200: 57903,\r\n\t\t62201: 57904,\r\n\t\t62202: 57905,\r\n\t\t62203: 57906,\r\n\t\t62204: 57907,\r\n\t\t62272: 57908,\r\n\t\t62273: 57909,\r\n\t\t62274: 57910,\r\n\t\t62275: 57911,\r\n\t\t62276: 57912,\r\n\t\t62277: 57913,\r\n\t\t62278: 57914,\r\n\t\t62279: 57915,\r\n\t\t62280: 57916,\r\n\t\t62281: 57917,\r\n\t\t62282: 57918,\r\n\t\t62283: 57919,\r\n\t\t62284: 57920,\r\n\t\t62285: 57921,\r\n\t\t62286: 57922,\r\n\t\t62287: 57923,\r\n\t\t62288: 57924,\r\n\t\t62289: 57925,\r\n\t\t62290: 57926,\r\n\t\t62291: 57927,\r\n\t\t62292: 57928,\r\n\t\t62293: 57929,\r\n\t\t62294: 57930,\r\n\t\t62295: 57931,\r\n\t\t62296: 57932,\r\n\t\t62297: 57933,\r\n\t\t62298: 57934,\r\n\t\t62299: 57935,\r\n\t\t62300: 57936,\r\n\t\t62301: 57937,\r\n\t\t62302: 57938,\r\n\t\t62303: 57939,\r\n\t\t62304: 57940,\r\n\t\t62305: 57941,\r\n\t\t62306: 57942,\r\n\t\t62307: 57943,\r\n\t\t62308: 57944,\r\n\t\t62309: 57945,\r\n\t\t62310: 57946,\r\n\t\t62311: 57947,\r\n\t\t62312: 57948,\r\n\t\t62313: 57949,\r\n\t\t62314: 57950,\r\n\t\t62315: 57951,\r\n\t\t62316: 57952,\r\n\t\t62317: 57953,\r\n\t\t62318: 57954,\r\n\t\t62319: 57955,\r\n\t\t62320: 57956,\r\n\t\t62321: 57957,\r\n\t\t62322: 57958,\r\n\t\t62323: 57959,\r\n\t\t62324: 57960,\r\n\t\t62325: 57961,\r\n\t\t62326: 57962,\r\n\t\t62327: 57963,\r\n\t\t62328: 57964,\r\n\t\t62329: 57965,\r\n\t\t62330: 57966,\r\n\t\t62331: 57967,\r\n\t\t62332: 57968,\r\n\t\t62333: 57969,\r\n\t\t62334: 57970,\r\n\t\t62336: 57971,\r\n\t\t62337: 57972,\r\n\t\t62338: 57973,\r\n\t\t62339: 57974,\r\n\t\t62340: 57975,\r\n\t\t62341: 57976,\r\n\t\t62342: 57977,\r\n\t\t62343: 57978,\r\n\t\t62344: 57979,\r\n\t\t62345: 57980,\r\n\t\t62346: 57981,\r\n\t\t62347: 57982,\r\n\t\t62348: 57983,\r\n\t\t62349: 57984,\r\n\t\t62350: 57985,\r\n\t\t62351: 57986,\r\n\t\t62352: 57987,\r\n\t\t62353: 57988,\r\n\t\t62354: 57989,\r\n\t\t62355: 57990,\r\n\t\t62356: 57991,\r\n\t\t62357: 57992,\r\n\t\t62358: 57993,\r\n\t\t62359: 57994,\r\n\t\t62360: 57995,\r\n\t\t62361: 57996,\r\n\t\t62362: 57997,\r\n\t\t62363: 57998,\r\n\t\t62364: 57999,\r\n\t\t62365: 58000,\r\n\t\t62366: 58001,\r\n\t\t62367: 58002,\r\n\t\t62368: 58003,\r\n\t\t62369: 58004,\r\n\t\t62370: 58005,\r\n\t\t62371: 58006,\r\n\t\t62372: 58007,\r\n\t\t62373: 58008,\r\n\t\t62374: 58009,\r\n\t\t62375: 58010,\r\n\t\t62376: 58011,\r\n\t\t62377: 58012,\r\n\t\t62378: 58013,\r\n\t\t62379: 58014,\r\n\t\t62380: 58015,\r\n\t\t62381: 58016,\r\n\t\t62382: 58017,\r\n\t\t62383: 58018,\r\n\t\t62384: 58019,\r\n\t\t62385: 58020,\r\n\t\t62386: 58021,\r\n\t\t62387: 58022,\r\n\t\t62388: 58023,\r\n\t\t62389: 58024,\r\n\t\t62390: 58025,\r\n\t\t62391: 58026,\r\n\t\t62392: 58027,\r\n\t\t62393: 58028,\r\n\t\t62394: 58029,\r\n\t\t62395: 58030,\r\n\t\t62396: 58031,\r\n\t\t62397: 58032,\r\n\t\t62398: 58033,\r\n\t\t62399: 58034,\r\n\t\t62400: 58035,\r\n\t\t62401: 58036,\r\n\t\t62402: 58037,\r\n\t\t62403: 58038,\r\n\t\t62404: 58039,\r\n\t\t62405: 58040,\r\n\t\t62406: 58041,\r\n\t\t62407: 58042,\r\n\t\t62408: 58043,\r\n\t\t62409: 58044,\r\n\t\t62410: 58045,\r\n\t\t62411: 58046,\r\n\t\t62412: 58047,\r\n\t\t62413: 58048,\r\n\t\t62414: 58049,\r\n\t\t62415: 58050,\r\n\t\t62416: 58051,\r\n\t\t62417: 58052,\r\n\t\t62418: 58053,\r\n\t\t62419: 58054,\r\n\t\t62420: 58055,\r\n\t\t62421: 58056,\r\n\t\t62422: 58057,\r\n\t\t62423: 58058,\r\n\t\t62424: 58059,\r\n\t\t62425: 58060,\r\n\t\t62426: 58061,\r\n\t\t62427: 58062,\r\n\t\t62428: 58063,\r\n\t\t62429: 58064,\r\n\t\t62430: 58065,\r\n\t\t62431: 58066,\r\n\t\t62432: 58067,\r\n\t\t62433: 58068,\r\n\t\t62434: 58069,\r\n\t\t62435: 58070,\r\n\t\t62436: 58071,\r\n\t\t62437: 58072,\r\n\t\t62438: 58073,\r\n\t\t62439: 58074,\r\n\t\t62440: 58075,\r\n\t\t62441: 58076,\r\n\t\t62442: 58077,\r\n\t\t62443: 58078,\r\n\t\t62444: 58079,\r\n\t\t62445: 58080,\r\n\t\t62446: 58081,\r\n\t\t62447: 58082,\r\n\t\t62448: 58083,\r\n\t\t62449: 58084,\r\n\t\t62450: 58085,\r\n\t\t62451: 58086,\r\n\t\t62452: 58087,\r\n\t\t62453: 58088,\r\n\t\t62454: 58089,\r\n\t\t62455: 58090,\r\n\t\t62456: 58091,\r\n\t\t62457: 58092,\r\n\t\t62458: 58093,\r\n\t\t62459: 58094,\r\n\t\t62460: 58095,\r\n\t\t62528: 58096,\r\n\t\t62529: 58097,\r\n\t\t62530: 58098,\r\n\t\t62531: 58099,\r\n\t\t62532: 58100,\r\n\t\t62533: 58101,\r\n\t\t62534: 58102,\r\n\t\t62535: 58103,\r\n\t\t62536: 58104,\r\n\t\t62537: 58105,\r\n\t\t62538: 58106,\r\n\t\t62539: 58107,\r\n\t\t62540: 58108,\r\n\t\t62541: 58109,\r\n\t\t62542: 58110,\r\n\t\t62543: 58111,\r\n\t\t62544: 58112,\r\n\t\t62545: 58113,\r\n\t\t62546: 58114,\r\n\t\t62547: 58115,\r\n\t\t62548: 58116,\r\n\t\t62549: 58117,\r\n\t\t62550: 58118,\r\n\t\t62551: 58119,\r\n\t\t62552: 58120,\r\n\t\t62553: 58121,\r\n\t\t62554: 58122,\r\n\t\t62555: 58123,\r\n\t\t62556: 58124,\r\n\t\t62557: 58125,\r\n\t\t62558: 58126,\r\n\t\t62559: 58127,\r\n\t\t62560: 58128,\r\n\t\t62561: 58129,\r\n\t\t62562: 58130,\r\n\t\t62563: 58131,\r\n\t\t62564: 58132,\r\n\t\t62565: 58133,\r\n\t\t62566: 58134,\r\n\t\t62567: 58135,\r\n\t\t62568: 58136,\r\n\t\t62569: 58137,\r\n\t\t62570: 58138,\r\n\t\t62571: 58139,\r\n\t\t62572: 58140,\r\n\t\t62573: 58141,\r\n\t\t62574: 58142,\r\n\t\t62575: 58143,\r\n\t\t62576: 58144,\r\n\t\t62577: 58145,\r\n\t\t62578: 58146,\r\n\t\t62579: 58147,\r\n\t\t62580: 58148,\r\n\t\t62581: 58149,\r\n\t\t62582: 58150,\r\n\t\t62583: 58151,\r\n\t\t62584: 58152,\r\n\t\t62585: 58153,\r\n\t\t62586: 58154,\r\n\t\t62587: 58155,\r\n\t\t62588: 58156,\r\n\t\t62589: 58157,\r\n\t\t62590: 58158,\r\n\t\t62592: 58159,\r\n\t\t62593: 58160,\r\n\t\t62594: 58161,\r\n\t\t62595: 58162,\r\n\t\t62596: 58163,\r\n\t\t62597: 58164,\r\n\t\t62598: 58165,\r\n\t\t62599: 58166,\r\n\t\t62600: 58167,\r\n\t\t62601: 58168,\r\n\t\t62602: 58169,\r\n\t\t62603: 58170,\r\n\t\t62604: 58171,\r\n\t\t62605: 58172,\r\n\t\t62606: 58173,\r\n\t\t62607: 58174,\r\n\t\t62608: 58175,\r\n\t\t62609: 58176,\r\n\t\t62610: 58177,\r\n\t\t62611: 58178,\r\n\t\t62612: 58179,\r\n\t\t62613: 58180,\r\n\t\t62614: 58181,\r\n\t\t62615: 58182,\r\n\t\t62616: 58183,\r\n\t\t62617: 58184,\r\n\t\t62618: 58185,\r\n\t\t62619: 58186,\r\n\t\t62620: 58187,\r\n\t\t62621: 58188,\r\n\t\t62622: 58189,\r\n\t\t62623: 58190,\r\n\t\t62624: 58191,\r\n\t\t62625: 58192,\r\n\t\t62626: 58193,\r\n\t\t62627: 58194,\r\n\t\t62628: 58195,\r\n\t\t62629: 58196,\r\n\t\t62630: 58197,\r\n\t\t62631: 58198,\r\n\t\t62632: 58199,\r\n\t\t62633: 58200,\r\n\t\t62634: 58201,\r\n\t\t62635: 58202,\r\n\t\t62636: 58203,\r\n\t\t62637: 58204,\r\n\t\t62638: 58205,\r\n\t\t62639: 58206,\r\n\t\t62640: 58207,\r\n\t\t62641: 58208,\r\n\t\t62642: 58209,\r\n\t\t62643: 58210,\r\n\t\t62644: 58211,\r\n\t\t62645: 58212,\r\n\t\t62646: 58213,\r\n\t\t62647: 58214,\r\n\t\t62648: 58215,\r\n\t\t62649: 58216,\r\n\t\t62650: 58217,\r\n\t\t62651: 58218,\r\n\t\t62652: 58219,\r\n\t\t62653: 58220,\r\n\t\t62654: 58221,\r\n\t\t62655: 58222,\r\n\t\t62656: 58223,\r\n\t\t62657: 58224,\r\n\t\t62658: 58225,\r\n\t\t62659: 58226,\r\n\t\t62660: 58227,\r\n\t\t62661: 58228,\r\n\t\t62662: 58229,\r\n\t\t62663: 58230,\r\n\t\t62664: 58231,\r\n\t\t62665: 58232,\r\n\t\t62666: 58233,\r\n\t\t62667: 58234,\r\n\t\t62668: 58235,\r\n\t\t62669: 58236,\r\n\t\t62670: 58237,\r\n\t\t62671: 58238,\r\n\t\t62672: 58239,\r\n\t\t62673: 58240,\r\n\t\t62674: 58241,\r\n\t\t62675: 58242,\r\n\t\t62676: 58243,\r\n\t\t62677: 58244,\r\n\t\t62678: 58245,\r\n\t\t62679: 58246,\r\n\t\t62680: 58247,\r\n\t\t62681: 58248,\r\n\t\t62682: 58249,\r\n\t\t62683: 58250,\r\n\t\t62684: 58251,\r\n\t\t62685: 58252,\r\n\t\t62686: 58253,\r\n\t\t62687: 58254,\r\n\t\t62688: 58255,\r\n\t\t62689: 58256,\r\n\t\t62690: 58257,\r\n\t\t62691: 58258,\r\n\t\t62692: 58259,\r\n\t\t62693: 58260,\r\n\t\t62694: 58261,\r\n\t\t62695: 58262,\r\n\t\t62696: 58263,\r\n\t\t62697: 58264,\r\n\t\t62698: 58265,\r\n\t\t62699: 58266,\r\n\t\t62700: 58267,\r\n\t\t62701: 58268,\r\n\t\t62702: 58269,\r\n\t\t62703: 58270,\r\n\t\t62704: 58271,\r\n\t\t62705: 58272,\r\n\t\t62706: 58273,\r\n\t\t62707: 58274,\r\n\t\t62708: 58275,\r\n\t\t62709: 58276,\r\n\t\t62710: 58277,\r\n\t\t62711: 58278,\r\n\t\t62712: 58279,\r\n\t\t62713: 58280,\r\n\t\t62714: 58281,\r\n\t\t62715: 58282,\r\n\t\t62716: 58283,\r\n\t\t62784: 58284,\r\n\t\t62785: 58285,\r\n\t\t62786: 58286,\r\n\t\t62787: 58287,\r\n\t\t62788: 58288,\r\n\t\t62789: 58289,\r\n\t\t62790: 58290,\r\n\t\t62791: 58291,\r\n\t\t62792: 58292,\r\n\t\t62793: 58293,\r\n\t\t62794: 58294,\r\n\t\t62795: 58295,\r\n\t\t62796: 58296,\r\n\t\t62797: 58297,\r\n\t\t62798: 58298,\r\n\t\t62799: 58299,\r\n\t\t62800: 58300,\r\n\t\t62801: 58301,\r\n\t\t62802: 58302,\r\n\t\t62803: 58303,\r\n\t\t62804: 58304,\r\n\t\t62805: 58305,\r\n\t\t62806: 58306,\r\n\t\t62807: 58307,\r\n\t\t62808: 58308,\r\n\t\t62809: 58309,\r\n\t\t62810: 58310,\r\n\t\t62811: 58311,\r\n\t\t62812: 58312,\r\n\t\t62813: 58313,\r\n\t\t62814: 58314,\r\n\t\t62815: 58315,\r\n\t\t62816: 58316,\r\n\t\t62817: 58317,\r\n\t\t62818: 58318,\r\n\t\t62819: 58319,\r\n\t\t62820: 58320,\r\n\t\t62821: 58321,\r\n\t\t62822: 58322,\r\n\t\t62823: 58323,\r\n\t\t62824: 58324,\r\n\t\t62825: 58325,\r\n\t\t62826: 58326,\r\n\t\t62827: 58327,\r\n\t\t62828: 58328,\r\n\t\t62829: 58329,\r\n\t\t62830: 58330,\r\n\t\t62831: 58331,\r\n\t\t62832: 58332,\r\n\t\t62833: 58333,\r\n\t\t62834: 58334,\r\n\t\t62835: 58335,\r\n\t\t62836: 58336,\r\n\t\t62837: 58337,\r\n\t\t62838: 58338,\r\n\t\t62839: 58339,\r\n\t\t62840: 58340,\r\n\t\t62841: 58341,\r\n\t\t62842: 58342,\r\n\t\t62843: 58343,\r\n\t\t62844: 58344,\r\n\t\t62845: 58345,\r\n\t\t62846: 58346,\r\n\t\t62848: 58347,\r\n\t\t62849: 58348,\r\n\t\t62850: 58349,\r\n\t\t62851: 58350,\r\n\t\t62852: 58351,\r\n\t\t62853: 58352,\r\n\t\t62854: 58353,\r\n\t\t62855: 58354,\r\n\t\t62856: 58355,\r\n\t\t62857: 58356,\r\n\t\t62858: 58357,\r\n\t\t62859: 58358,\r\n\t\t62860: 58359,\r\n\t\t62861: 58360,\r\n\t\t62862: 58361,\r\n\t\t62863: 58362,\r\n\t\t62864: 58363,\r\n\t\t62865: 58364,\r\n\t\t62866: 58365,\r\n\t\t62867: 58366,\r\n\t\t62868: 58367,\r\n\t\t62869: 58368,\r\n\t\t62870: 58369,\r\n\t\t62871: 58370,\r\n\t\t62872: 58371,\r\n\t\t62873: 58372,\r\n\t\t62874: 58373,\r\n\t\t62875: 58374,\r\n\t\t62876: 58375,\r\n\t\t62877: 58376,\r\n\t\t62878: 58377,\r\n\t\t62879: 58378,\r\n\t\t62880: 58379,\r\n\t\t62881: 58380,\r\n\t\t62882: 58381,\r\n\t\t62883: 58382,\r\n\t\t62884: 58383,\r\n\t\t62885: 58384,\r\n\t\t62886: 58385,\r\n\t\t62887: 58386,\r\n\t\t62888: 58387,\r\n\t\t62889: 58388,\r\n\t\t62890: 58389,\r\n\t\t62891: 58390,\r\n\t\t62892: 58391,\r\n\t\t62893: 58392,\r\n\t\t62894: 58393,\r\n\t\t62895: 58394,\r\n\t\t62896: 58395,\r\n\t\t62897: 58396,\r\n\t\t62898: 58397,\r\n\t\t62899: 58398,\r\n\t\t62900: 58399,\r\n\t\t62901: 58400,\r\n\t\t62902: 58401,\r\n\t\t62903: 58402,\r\n\t\t62904: 58403,\r\n\t\t62905: 58404,\r\n\t\t62906: 58405,\r\n\t\t62907: 58406,\r\n\t\t62908: 58407,\r\n\t\t62909: 58408,\r\n\t\t62910: 58409,\r\n\t\t62911: 58410,\r\n\t\t62912: 58411,\r\n\t\t62913: 58412,\r\n\t\t62914: 58413,\r\n\t\t62915: 58414,\r\n\t\t62916: 58415,\r\n\t\t62917: 58416,\r\n\t\t62918: 58417,\r\n\t\t62919: 58418,\r\n\t\t62920: 58419,\r\n\t\t62921: 58420,\r\n\t\t62922: 58421,\r\n\t\t62923: 58422,\r\n\t\t62924: 58423,\r\n\t\t62925: 58424,\r\n\t\t62926: 58425,\r\n\t\t62927: 58426,\r\n\t\t62928: 58427,\r\n\t\t62929: 58428,\r\n\t\t62930: 58429,\r\n\t\t62931: 58430,\r\n\t\t62932: 58431,\r\n\t\t62933: 58432,\r\n\t\t62934: 58433,\r\n\t\t62935: 58434,\r\n\t\t62936: 58435,\r\n\t\t62937: 58436,\r\n\t\t62938: 58437,\r\n\t\t62939: 58438,\r\n\t\t62940: 58439,\r\n\t\t62941: 58440,\r\n\t\t62942: 58441,\r\n\t\t62943: 58442,\r\n\t\t62944: 58443,\r\n\t\t62945: 58444,\r\n\t\t62946: 58445,\r\n\t\t62947: 58446,\r\n\t\t62948: 58447,\r\n\t\t62949: 58448,\r\n\t\t62950: 58449,\r\n\t\t62951: 58450,\r\n\t\t62952: 58451,\r\n\t\t62953: 58452,\r\n\t\t62954: 58453,\r\n\t\t62955: 58454,\r\n\t\t62956: 58455,\r\n\t\t62957: 58456,\r\n\t\t62958: 58457,\r\n\t\t62959: 58458,\r\n\t\t62960: 58459,\r\n\t\t62961: 58460,\r\n\t\t62962: 58461,\r\n\t\t62963: 58462,\r\n\t\t62964: 58463,\r\n\t\t62965: 58464,\r\n\t\t62966: 58465,\r\n\t\t62967: 58466,\r\n\t\t62968: 58467,\r\n\t\t62969: 58468,\r\n\t\t62970: 58469,\r\n\t\t62971: 58470,\r\n\t\t62972: 58471,\r\n\t\t63040: 58472,\r\n\t\t63041: 58473,\r\n\t\t63042: 58474,\r\n\t\t63043: 58475,\r\n\t\t63044: 58476,\r\n\t\t63045: 58477,\r\n\t\t63046: 58478,\r\n\t\t63047: 58479,\r\n\t\t63048: 58480,\r\n\t\t63049: 58481,\r\n\t\t63050: 58482,\r\n\t\t63051: 58483,\r\n\t\t63052: 58484,\r\n\t\t63053: 58485,\r\n\t\t63054: 58486,\r\n\t\t63055: 58487,\r\n\t\t63056: 58488,\r\n\t\t63057: 58489,\r\n\t\t63058: 58490,\r\n\t\t63059: 58491,\r\n\t\t63060: 58492,\r\n\t\t63061: 58493,\r\n\t\t63062: 58494,\r\n\t\t63063: 58495,\r\n\t\t63064: 58496,\r\n\t\t63065: 58497,\r\n\t\t63066: 58498,\r\n\t\t63067: 58499,\r\n\t\t63068: 58500,\r\n\t\t63069: 58501,\r\n\t\t63070: 58502,\r\n\t\t63071: 58503,\r\n\t\t63072: 58504,\r\n\t\t63073: 58505,\r\n\t\t63074: 58506,\r\n\t\t63075: 58507,\r\n\t\t63076: 58508,\r\n\t\t63077: 58509,\r\n\t\t63078: 58510,\r\n\t\t63079: 58511,\r\n\t\t63080: 58512,\r\n\t\t63081: 58513,\r\n\t\t63082: 58514,\r\n\t\t63083: 58515,\r\n\t\t63084: 58516,\r\n\t\t63085: 58517,\r\n\t\t63086: 58518,\r\n\t\t63087: 58519,\r\n\t\t63088: 58520,\r\n\t\t63089: 58521,\r\n\t\t63090: 58522,\r\n\t\t63091: 58523,\r\n\t\t63092: 58524,\r\n\t\t63093: 58525,\r\n\t\t63094: 58526,\r\n\t\t63095: 58527,\r\n\t\t63096: 58528,\r\n\t\t63097: 58529,\r\n\t\t63098: 58530,\r\n\t\t63099: 58531,\r\n\t\t63100: 58532,\r\n\t\t63101: 58533,\r\n\t\t63102: 58534,\r\n\t\t63104: 58535,\r\n\t\t63105: 58536,\r\n\t\t63106: 58537,\r\n\t\t63107: 58538,\r\n\t\t63108: 58539,\r\n\t\t63109: 58540,\r\n\t\t63110: 58541,\r\n\t\t63111: 58542,\r\n\t\t63112: 58543,\r\n\t\t63113: 58544,\r\n\t\t63114: 58545,\r\n\t\t63115: 58546,\r\n\t\t63116: 58547,\r\n\t\t63117: 58548,\r\n\t\t63118: 58549,\r\n\t\t63119: 58550,\r\n\t\t63120: 58551,\r\n\t\t63121: 58552,\r\n\t\t63122: 58553,\r\n\t\t63123: 58554,\r\n\t\t63124: 58555,\r\n\t\t63125: 58556,\r\n\t\t63126: 58557,\r\n\t\t63127: 58558,\r\n\t\t63128: 58559,\r\n\t\t63129: 58560,\r\n\t\t63130: 58561,\r\n\t\t63131: 58562,\r\n\t\t63132: 58563,\r\n\t\t63133: 58564,\r\n\t\t63134: 58565,\r\n\t\t63135: 58566,\r\n\t\t63136: 58567,\r\n\t\t63137: 58568,\r\n\t\t63138: 58569,\r\n\t\t63139: 58570,\r\n\t\t63140: 58571,\r\n\t\t63141: 58572,\r\n\t\t63142: 58573,\r\n\t\t63143: 58574,\r\n\t\t63144: 58575,\r\n\t\t63145: 58576,\r\n\t\t63146: 58577,\r\n\t\t63147: 58578,\r\n\t\t63148: 58579,\r\n\t\t63149: 58580,\r\n\t\t63150: 58581,\r\n\t\t63151: 58582,\r\n\t\t63152: 58583,\r\n\t\t63153: 58584,\r\n\t\t63154: 58585,\r\n\t\t63155: 58586,\r\n\t\t63156: 58587,\r\n\t\t63157: 58588,\r\n\t\t63158: 58589,\r\n\t\t63159: 58590,\r\n\t\t63160: 58591,\r\n\t\t63161: 58592,\r\n\t\t63162: 58593,\r\n\t\t63163: 58594,\r\n\t\t63164: 58595,\r\n\t\t63165: 58596,\r\n\t\t63166: 58597,\r\n\t\t63167: 58598,\r\n\t\t63168: 58599,\r\n\t\t63169: 58600,\r\n\t\t63170: 58601,\r\n\t\t63171: 58602,\r\n\t\t63172: 58603,\r\n\t\t63173: 58604,\r\n\t\t63174: 58605,\r\n\t\t63175: 58606,\r\n\t\t63176: 58607,\r\n\t\t63177: 58608,\r\n\t\t63178: 58609,\r\n\t\t63179: 58610,\r\n\t\t63180: 58611,\r\n\t\t63181: 58612,\r\n\t\t63182: 58613,\r\n\t\t63183: 58614,\r\n\t\t63184: 58615,\r\n\t\t63185: 58616,\r\n\t\t63186: 58617,\r\n\t\t63187: 58618,\r\n\t\t63188: 58619,\r\n\t\t63189: 58620,\r\n\t\t63190: 58621,\r\n\t\t63191: 58622,\r\n\t\t63192: 58623,\r\n\t\t63193: 58624,\r\n\t\t63194: 58625,\r\n\t\t63195: 58626,\r\n\t\t63196: 58627,\r\n\t\t63197: 58628,\r\n\t\t63198: 58629,\r\n\t\t63199: 58630,\r\n\t\t63200: 58631,\r\n\t\t63201: 58632,\r\n\t\t63202: 58633,\r\n\t\t63203: 58634,\r\n\t\t63204: 58635,\r\n\t\t63205: 58636,\r\n\t\t63206: 58637,\r\n\t\t63207: 58638,\r\n\t\t63208: 58639,\r\n\t\t63209: 58640,\r\n\t\t63210: 58641,\r\n\t\t63211: 58642,\r\n\t\t63212: 58643,\r\n\t\t63213: 58644,\r\n\t\t63214: 58645,\r\n\t\t63215: 58646,\r\n\t\t63216: 58647,\r\n\t\t63217: 58648,\r\n\t\t63218: 58649,\r\n\t\t63219: 58650,\r\n\t\t63220: 58651,\r\n\t\t63221: 58652,\r\n\t\t63222: 58653,\r\n\t\t63223: 58654,\r\n\t\t63224: 58655,\r\n\t\t63225: 58656,\r\n\t\t63226: 58657,\r\n\t\t63227: 58658,\r\n\t\t63228: 58659,\r\n\t\t63296: 58660,\r\n\t\t63297: 58661,\r\n\t\t63298: 58662,\r\n\t\t63299: 58663,\r\n\t\t63300: 58664,\r\n\t\t63301: 58665,\r\n\t\t63302: 58666,\r\n\t\t63303: 58667,\r\n\t\t63304: 58668,\r\n\t\t63305: 58669,\r\n\t\t63306: 58670,\r\n\t\t63307: 58671,\r\n\t\t63308: 58672,\r\n\t\t63309: 58673,\r\n\t\t63310: 58674,\r\n\t\t63311: 58675,\r\n\t\t63312: 58676,\r\n\t\t63313: 58677,\r\n\t\t63314: 58678,\r\n\t\t63315: 58679,\r\n\t\t63316: 58680,\r\n\t\t63317: 58681,\r\n\t\t63318: 58682,\r\n\t\t63319: 58683,\r\n\t\t63320: 58684,\r\n\t\t63321: 58685,\r\n\t\t63322: 58686,\r\n\t\t63323: 58687,\r\n\t\t63324: 58688,\r\n\t\t63325: 58689,\r\n\t\t63326: 58690,\r\n\t\t63327: 58691,\r\n\t\t63328: 58692,\r\n\t\t63329: 58693,\r\n\t\t63330: 58694,\r\n\t\t63331: 58695,\r\n\t\t63332: 58696,\r\n\t\t63333: 58697,\r\n\t\t63334: 58698,\r\n\t\t63335: 58699,\r\n\t\t63336: 58700,\r\n\t\t63337: 58701,\r\n\t\t63338: 58702,\r\n\t\t63339: 58703,\r\n\t\t63340: 58704,\r\n\t\t63341: 58705,\r\n\t\t63342: 58706,\r\n\t\t63343: 58707,\r\n\t\t63344: 58708,\r\n\t\t63345: 58709,\r\n\t\t63346: 58710,\r\n\t\t63347: 58711,\r\n\t\t63348: 58712,\r\n\t\t63349: 58713,\r\n\t\t63350: 58714,\r\n\t\t63351: 58715,\r\n\t\t63352: 58716,\r\n\t\t63353: 58717,\r\n\t\t63354: 58718,\r\n\t\t63355: 58719,\r\n\t\t63356: 58720,\r\n\t\t63357: 58721,\r\n\t\t63358: 58722,\r\n\t\t63360: 58723,\r\n\t\t63361: 58724,\r\n\t\t63362: 58725,\r\n\t\t63363: 58726,\r\n\t\t63364: 58727,\r\n\t\t63365: 58728,\r\n\t\t63366: 58729,\r\n\t\t63367: 58730,\r\n\t\t63368: 58731,\r\n\t\t63369: 58732,\r\n\t\t63370: 58733,\r\n\t\t63371: 58734,\r\n\t\t63372: 58735,\r\n\t\t63373: 58736,\r\n\t\t63374: 58737,\r\n\t\t63375: 58738,\r\n\t\t63376: 58739,\r\n\t\t63377: 58740,\r\n\t\t63378: 58741,\r\n\t\t63379: 58742,\r\n\t\t63380: 58743,\r\n\t\t63381: 58744,\r\n\t\t63382: 58745,\r\n\t\t63383: 58746,\r\n\t\t63384: 58747,\r\n\t\t63385: 58748,\r\n\t\t63386: 58749,\r\n\t\t63387: 58750,\r\n\t\t63388: 58751,\r\n\t\t63389: 58752,\r\n\t\t63390: 58753,\r\n\t\t63391: 58754,\r\n\t\t63392: 58755,\r\n\t\t63393: 58756,\r\n\t\t63394: 58757,\r\n\t\t63395: 58758,\r\n\t\t63396: 58759,\r\n\t\t63397: 58760,\r\n\t\t63398: 58761,\r\n\t\t63399: 58762,\r\n\t\t63400: 58763,\r\n\t\t63401: 58764,\r\n\t\t63402: 58765,\r\n\t\t63403: 58766,\r\n\t\t63404: 58767,\r\n\t\t63405: 58768,\r\n\t\t63406: 58769,\r\n\t\t63407: 58770,\r\n\t\t63408: 58771,\r\n\t\t63409: 58772,\r\n\t\t63410: 58773,\r\n\t\t63411: 58774,\r\n\t\t63412: 58775,\r\n\t\t63413: 58776,\r\n\t\t63414: 58777,\r\n\t\t63415: 58778,\r\n\t\t63416: 58779,\r\n\t\t63417: 58780,\r\n\t\t63418: 58781,\r\n\t\t63419: 58782,\r\n\t\t63420: 58783,\r\n\t\t63421: 58784,\r\n\t\t63422: 58785,\r\n\t\t63423: 58786,\r\n\t\t63424: 58787,\r\n\t\t63425: 58788,\r\n\t\t63426: 58789,\r\n\t\t63427: 58790,\r\n\t\t63428: 58791,\r\n\t\t63429: 58792,\r\n\t\t63430: 58793,\r\n\t\t63431: 58794,\r\n\t\t63432: 58795,\r\n\t\t63433: 58796,\r\n\t\t63434: 58797,\r\n\t\t63435: 58798,\r\n\t\t63436: 58799,\r\n\t\t63437: 58800,\r\n\t\t63438: 58801,\r\n\t\t63439: 58802,\r\n\t\t63440: 58803,\r\n\t\t63441: 58804,\r\n\t\t63442: 58805,\r\n\t\t63443: 58806,\r\n\t\t63444: 58807,\r\n\t\t63445: 58808,\r\n\t\t63446: 58809,\r\n\t\t63447: 58810,\r\n\t\t63448: 58811,\r\n\t\t63449: 58812,\r\n\t\t63450: 58813,\r\n\t\t63451: 58814,\r\n\t\t63452: 58815,\r\n\t\t63453: 58816,\r\n\t\t63454: 58817,\r\n\t\t63455: 58818,\r\n\t\t63456: 58819,\r\n\t\t63457: 58820,\r\n\t\t63458: 58821,\r\n\t\t63459: 58822,\r\n\t\t63460: 58823,\r\n\t\t63461: 58824,\r\n\t\t63462: 58825,\r\n\t\t63463: 58826,\r\n\t\t63464: 58827,\r\n\t\t63465: 58828,\r\n\t\t63466: 58829,\r\n\t\t63467: 58830,\r\n\t\t63468: 58831,\r\n\t\t63469: 58832,\r\n\t\t63470: 58833,\r\n\t\t63471: 58834,\r\n\t\t63472: 58835,\r\n\t\t63473: 58836,\r\n\t\t63474: 58837,\r\n\t\t63475: 58838,\r\n\t\t63476: 58839,\r\n\t\t63477: 58840,\r\n\t\t63478: 58841,\r\n\t\t63479: 58842,\r\n\t\t63480: 58843,\r\n\t\t63481: 58844,\r\n\t\t63482: 58845,\r\n\t\t63483: 58846,\r\n\t\t63484: 58847,\r\n\t\t63552: 58848,\r\n\t\t63553: 58849,\r\n\t\t63554: 58850,\r\n\t\t63555: 58851,\r\n\t\t63556: 58852,\r\n\t\t63557: 58853,\r\n\t\t63558: 58854,\r\n\t\t63559: 58855,\r\n\t\t63560: 58856,\r\n\t\t63561: 58857,\r\n\t\t63562: 58858,\r\n\t\t63563: 58859,\r\n\t\t63564: 58860,\r\n\t\t63565: 58861,\r\n\t\t63566: 58862,\r\n\t\t63567: 58863,\r\n\t\t63568: 58864,\r\n\t\t63569: 58865,\r\n\t\t63570: 58866,\r\n\t\t63571: 58867,\r\n\t\t63572: 58868,\r\n\t\t63573: 58869,\r\n\t\t63574: 58870,\r\n\t\t63575: 58871,\r\n\t\t63576: 58872,\r\n\t\t63577: 58873,\r\n\t\t63578: 58874,\r\n\t\t63579: 58875,\r\n\t\t63580: 58876,\r\n\t\t63581: 58877,\r\n\t\t63582: 58878,\r\n\t\t63583: 58879,\r\n\t\t63584: 58880,\r\n\t\t63585: 58881,\r\n\t\t63586: 58882,\r\n\t\t63587: 58883,\r\n\t\t63588: 58884,\r\n\t\t63589: 58885,\r\n\t\t63590: 58886,\r\n\t\t63591: 58887,\r\n\t\t63592: 58888,\r\n\t\t63593: 58889,\r\n\t\t63594: 58890,\r\n\t\t63595: 58891,\r\n\t\t63596: 58892,\r\n\t\t63597: 58893,\r\n\t\t63598: 58894,\r\n\t\t63599: 58895,\r\n\t\t63600: 58896,\r\n\t\t63601: 58897,\r\n\t\t63602: 58898,\r\n\t\t63603: 58899,\r\n\t\t63604: 58900,\r\n\t\t63605: 58901,\r\n\t\t63606: 58902,\r\n\t\t63607: 58903,\r\n\t\t63608: 58904,\r\n\t\t63609: 58905,\r\n\t\t63610: 58906,\r\n\t\t63611: 58907,\r\n\t\t63612: 58908,\r\n\t\t63613: 58909,\r\n\t\t63614: 58910,\r\n\t\t63616: 58911,\r\n\t\t63617: 58912,\r\n\t\t63618: 58913,\r\n\t\t63619: 58914,\r\n\t\t63620: 58915,\r\n\t\t63621: 58916,\r\n\t\t63622: 58917,\r\n\t\t63623: 58918,\r\n\t\t63624: 58919,\r\n\t\t63625: 58920,\r\n\t\t63626: 58921,\r\n\t\t63627: 58922,\r\n\t\t63628: 58923,\r\n\t\t63629: 58924,\r\n\t\t63630: 58925,\r\n\t\t63631: 58926,\r\n\t\t63632: 58927,\r\n\t\t63633: 58928,\r\n\t\t63634: 58929,\r\n\t\t63635: 58930,\r\n\t\t63636: 58931,\r\n\t\t63637: 58932,\r\n\t\t63638: 58933,\r\n\t\t63639: 58934,\r\n\t\t63640: 58935,\r\n\t\t63641: 58936,\r\n\t\t63642: 58937,\r\n\t\t63643: 58938,\r\n\t\t63644: 58939,\r\n\t\t63645: 58940,\r\n\t\t63646: 58941,\r\n\t\t63647: 58942,\r\n\t\t63648: 58943,\r\n\t\t63649: 58944,\r\n\t\t63650: 58945,\r\n\t\t63651: 58946,\r\n\t\t63652: 58947,\r\n\t\t63653: 58948,\r\n\t\t63654: 58949,\r\n\t\t63655: 58950,\r\n\t\t63656: 58951,\r\n\t\t63657: 58952,\r\n\t\t63658: 58953,\r\n\t\t63659: 58954,\r\n\t\t63660: 58955,\r\n\t\t63661: 58956,\r\n\t\t63662: 58957,\r\n\t\t63663: 58958,\r\n\t\t63664: 58959,\r\n\t\t63665: 58960,\r\n\t\t63666: 58961,\r\n\t\t63667: 58962,\r\n\t\t63668: 58963,\r\n\t\t63669: 58964,\r\n\t\t63670: 58965,\r\n\t\t63671: 58966,\r\n\t\t63672: 58967,\r\n\t\t63673: 58968,\r\n\t\t63674: 58969,\r\n\t\t63675: 58970,\r\n\t\t63676: 58971,\r\n\t\t63677: 58972,\r\n\t\t63678: 58973,\r\n\t\t63679: 58974,\r\n\t\t63680: 58975,\r\n\t\t63681: 58976,\r\n\t\t63682: 58977,\r\n\t\t63683: 58978,\r\n\t\t63684: 58979,\r\n\t\t63685: 58980,\r\n\t\t63686: 58981,\r\n\t\t63687: 58982,\r\n\t\t63688: 58983,\r\n\t\t63689: 58984,\r\n\t\t63690: 58985,\r\n\t\t63691: 58986,\r\n\t\t63692: 58987,\r\n\t\t63693: 58988,\r\n\t\t63694: 58989,\r\n\t\t63695: 58990,\r\n\t\t63696: 58991,\r\n\t\t63697: 58992,\r\n\t\t63698: 58993,\r\n\t\t63699: 58994,\r\n\t\t63700: 58995,\r\n\t\t63701: 58996,\r\n\t\t63702: 58997,\r\n\t\t63703: 58998,\r\n\t\t63704: 58999,\r\n\t\t63705: 59000,\r\n\t\t63706: 59001,\r\n\t\t63707: 59002,\r\n\t\t63708: 59003,\r\n\t\t63709: 59004,\r\n\t\t63710: 59005,\r\n\t\t63711: 59006,\r\n\t\t63712: 59007,\r\n\t\t63713: 59008,\r\n\t\t63714: 59009,\r\n\t\t63715: 59010,\r\n\t\t63716: 59011,\r\n\t\t63717: 59012,\r\n\t\t63718: 59013,\r\n\t\t63719: 59014,\r\n\t\t63720: 59015,\r\n\t\t63721: 59016,\r\n\t\t63722: 59017,\r\n\t\t63723: 59018,\r\n\t\t63724: 59019,\r\n\t\t63725: 59020,\r\n\t\t63726: 59021,\r\n\t\t63727: 59022,\r\n\t\t63728: 59023,\r\n\t\t63729: 59024,\r\n\t\t63730: 59025,\r\n\t\t63731: 59026,\r\n\t\t63732: 59027,\r\n\t\t63733: 59028,\r\n\t\t63734: 59029,\r\n\t\t63735: 59030,\r\n\t\t63736: 59031,\r\n\t\t63737: 59032,\r\n\t\t63738: 59033,\r\n\t\t63739: 59034,\r\n\t\t63740: 59035,\r\n\t\t64064: 8560,\r\n\t\t64065: 8561,\r\n\t\t64066: 8562,\r\n\t\t64067: 8563,\r\n\t\t64068: 8564,\r\n\t\t64069: 8565,\r\n\t\t64070: 8566,\r\n\t\t64071: 8567,\r\n\t\t64072: 8568,\r\n\t\t64073: 8569,\r\n\t\t64074: 8544,\r\n\t\t64075: 8545,\r\n\t\t64076: 8546,\r\n\t\t64077: 8547,\r\n\t\t64078: 8548,\r\n\t\t64079: 8549,\r\n\t\t64080: 8550,\r\n\t\t64081: 8551,\r\n\t\t64082: 8552,\r\n\t\t64083: 8553,\r\n\t\t64084: 65506,\r\n\t\t64085: 65508,\r\n\t\t64086: 65287,\r\n\t\t64087: 65282,\r\n\t\t64088: 12849,\r\n\t\t64089: 8470,\r\n\t\t64090: 8481,\r\n\t\t64091: 8757,\r\n\t\t64092: 32394,\r\n\t\t64093: 35100,\r\n\t\t64094: 37704,\r\n\t\t64095: 37512,\r\n\t\t64096: 34012,\r\n\t\t64097: 20425,\r\n\t\t64098: 28859,\r\n\t\t64099: 26161,\r\n\t\t64100: 26824,\r\n\t\t64101: 37625,\r\n\t\t64102: 26363,\r\n\t\t64103: 24389,\r\n\t\t64104: 20008,\r\n\t\t64105: 20193,\r\n\t\t64106: 20220,\r\n\t\t64107: 20224,\r\n\t\t64108: 20227,\r\n\t\t64109: 20281,\r\n\t\t64110: 20310,\r\n\t\t64111: 20370,\r\n\t\t64112: 20362,\r\n\t\t64113: 20378,\r\n\t\t64114: 20372,\r\n\t\t64115: 20429,\r\n\t\t64116: 20544,\r\n\t\t64117: 20514,\r\n\t\t64118: 20479,\r\n\t\t64119: 20510,\r\n\t\t64120: 20550,\r\n\t\t64121: 20592,\r\n\t\t64122: 20546,\r\n\t\t64123: 20628,\r\n\t\t64124: 20724,\r\n\t\t64125: 20696,\r\n\t\t64126: 20810,\r\n\t\t64128: 20836,\r\n\t\t64129: 20893,\r\n\t\t64130: 20926,\r\n\t\t64131: 20972,\r\n\t\t64132: 21013,\r\n\t\t64133: 21148,\r\n\t\t64134: 21158,\r\n\t\t64135: 21184,\r\n\t\t64136: 21211,\r\n\t\t64137: 21248,\r\n\t\t64138: 21255,\r\n\t\t64139: 21284,\r\n\t\t64140: 21362,\r\n\t\t64141: 21395,\r\n\t\t64142: 21426,\r\n\t\t64143: 21469,\r\n\t\t64144: 64014,\r\n\t\t64145: 21660,\r\n\t\t64146: 21642,\r\n\t\t64147: 21673,\r\n\t\t64148: 21759,\r\n\t\t64149: 21894,\r\n\t\t64150: 22361,\r\n\t\t64151: 22373,\r\n\t\t64152: 22444,\r\n\t\t64153: 22472,\r\n\t\t64154: 22471,\r\n\t\t64155: 64015,\r\n\t\t64156: 64016,\r\n\t\t64157: 22686,\r\n\t\t64158: 22706,\r\n\t\t64159: 22795,\r\n\t\t64160: 22867,\r\n\t\t64161: 22875,\r\n\t\t64162: 22877,\r\n\t\t64163: 22883,\r\n\t\t64164: 22948,\r\n\t\t64165: 22970,\r\n\t\t64166: 23382,\r\n\t\t64167: 23488,\r\n\t\t64168: 29999,\r\n\t\t64169: 23512,\r\n\t\t64170: 23532,\r\n\t\t64171: 23582,\r\n\t\t64172: 23718,\r\n\t\t64173: 23738,\r\n\t\t64174: 23797,\r\n\t\t64175: 23847,\r\n\t\t64176: 23891,\r\n\t\t64177: 64017,\r\n\t\t64178: 23874,\r\n\t\t64179: 23917,\r\n\t\t64180: 23992,\r\n\t\t64181: 23993,\r\n\t\t64182: 24016,\r\n\t\t64183: 24353,\r\n\t\t64184: 24372,\r\n\t\t64185: 24423,\r\n\t\t64186: 24503,\r\n\t\t64187: 24542,\r\n\t\t64188: 24669,\r\n\t\t64189: 24709,\r\n\t\t64190: 24714,\r\n\t\t64191: 24798,\r\n\t\t64192: 24789,\r\n\t\t64193: 24864,\r\n\t\t64194: 24818,\r\n\t\t64195: 24849,\r\n\t\t64196: 24887,\r\n\t\t64197: 24880,\r\n\t\t64198: 24984,\r\n\t\t64199: 25107,\r\n\t\t64200: 25254,\r\n\t\t64201: 25589,\r\n\t\t64202: 25696,\r\n\t\t64203: 25757,\r\n\t\t64204: 25806,\r\n\t\t64205: 25934,\r\n\t\t64206: 26112,\r\n\t\t64207: 26133,\r\n\t\t64208: 26171,\r\n\t\t64209: 26121,\r\n\t\t64210: 26158,\r\n\t\t64211: 26142,\r\n\t\t64212: 26148,\r\n\t\t64213: 26213,\r\n\t\t64214: 26199,\r\n\t\t64215: 26201,\r\n\t\t64216: 64018,\r\n\t\t64217: 26227,\r\n\t\t64218: 26265,\r\n\t\t64219: 26272,\r\n\t\t64220: 26290,\r\n\t\t64221: 26303,\r\n\t\t64222: 26362,\r\n\t\t64223: 26382,\r\n\t\t64224: 63785,\r\n\t\t64225: 26470,\r\n\t\t64226: 26555,\r\n\t\t64227: 26706,\r\n\t\t64228: 26560,\r\n\t\t64229: 26625,\r\n\t\t64230: 26692,\r\n\t\t64231: 26831,\r\n\t\t64232: 64019,\r\n\t\t64233: 26984,\r\n\t\t64234: 64020,\r\n\t\t64235: 27032,\r\n\t\t64236: 27106,\r\n\t\t64237: 27184,\r\n\t\t64238: 27243,\r\n\t\t64239: 27206,\r\n\t\t64240: 27251,\r\n\t\t64241: 27262,\r\n\t\t64242: 27362,\r\n\t\t64243: 27364,\r\n\t\t64244: 27606,\r\n\t\t64245: 27711,\r\n\t\t64246: 27740,\r\n\t\t64247: 27782,\r\n\t\t64248: 27759,\r\n\t\t64249: 27866,\r\n\t\t64250: 27908,\r\n\t\t64251: 28039,\r\n\t\t64252: 28015,\r\n\t\t64320: 28054,\r\n\t\t64321: 28076,\r\n\t\t64322: 28111,\r\n\t\t64323: 28152,\r\n\t\t64324: 28146,\r\n\t\t64325: 28156,\r\n\t\t64326: 28217,\r\n\t\t64327: 28252,\r\n\t\t64328: 28199,\r\n\t\t64329: 28220,\r\n\t\t64330: 28351,\r\n\t\t64331: 28552,\r\n\t\t64332: 28597,\r\n\t\t64333: 28661,\r\n\t\t64334: 28677,\r\n\t\t64335: 28679,\r\n\t\t64336: 28712,\r\n\t\t64337: 28805,\r\n\t\t64338: 28843,\r\n\t\t64339: 28943,\r\n\t\t64340: 28932,\r\n\t\t64341: 29020,\r\n\t\t64342: 28998,\r\n\t\t64343: 28999,\r\n\t\t64344: 64021,\r\n\t\t64345: 29121,\r\n\t\t64346: 29182,\r\n\t\t64347: 29361,\r\n\t\t64348: 29374,\r\n\t\t64349: 29476,\r\n\t\t64350: 64022,\r\n\t\t64351: 29559,\r\n\t\t64352: 29629,\r\n\t\t64353: 29641,\r\n\t\t64354: 29654,\r\n\t\t64355: 29667,\r\n\t\t64356: 29650,\r\n\t\t64357: 29703,\r\n\t\t64358: 29685,\r\n\t\t64359: 29734,\r\n\t\t64360: 29738,\r\n\t\t64361: 29737,\r\n\t\t64362: 29742,\r\n\t\t64363: 29794,\r\n\t\t64364: 29833,\r\n\t\t64365: 29855,\r\n\t\t64366: 29953,\r\n\t\t64367: 30063,\r\n\t\t64368: 30338,\r\n\t\t64369: 30364,\r\n\t\t64370: 30366,\r\n\t\t64371: 30363,\r\n\t\t64372: 30374,\r\n\t\t64373: 64023,\r\n\t\t64374: 30534,\r\n\t\t64375: 21167,\r\n\t\t64376: 30753,\r\n\t\t64377: 30798,\r\n\t\t64378: 30820,\r\n\t\t64379: 30842,\r\n\t\t64380: 31024,\r\n\t\t64381: 64024,\r\n\t\t64382: 64025,\r\n\t\t64384: 64026,\r\n\t\t64385: 31124,\r\n\t\t64386: 64027,\r\n\t\t64387: 31131,\r\n\t\t64388: 31441,\r\n\t\t64389: 31463,\r\n\t\t64390: 64028,\r\n\t\t64391: 31467,\r\n\t\t64392: 31646,\r\n\t\t64393: 64029,\r\n\t\t64394: 32072,\r\n\t\t64395: 32092,\r\n\t\t64396: 32183,\r\n\t\t64397: 32160,\r\n\t\t64398: 32214,\r\n\t\t64399: 32338,\r\n\t\t64400: 32583,\r\n\t\t64401: 32673,\r\n\t\t64402: 64030,\r\n\t\t64403: 33537,\r\n\t\t64404: 33634,\r\n\t\t64405: 33663,\r\n\t\t64406: 33735,\r\n\t\t64407: 33782,\r\n\t\t64408: 33864,\r\n\t\t64409: 33972,\r\n\t\t64410: 34131,\r\n\t\t64411: 34137,\r\n\t\t64412: 34155,\r\n\t\t64413: 64031,\r\n\t\t64414: 34224,\r\n\t\t64415: 64032,\r\n\t\t64416: 64033,\r\n\t\t64417: 34823,\r\n\t\t64418: 35061,\r\n\t\t64419: 35346,\r\n\t\t64420: 35383,\r\n\t\t64421: 35449,\r\n\t\t64422: 35495,\r\n\t\t64423: 35518,\r\n\t\t64424: 35551,\r\n\t\t64425: 64034,\r\n\t\t64426: 35574,\r\n\t\t64427: 35667,\r\n\t\t64428: 35711,\r\n\t\t64429: 36080,\r\n\t\t64430: 36084,\r\n\t\t64431: 36114,\r\n\t\t64432: 36214,\r\n\t\t64433: 64035,\r\n\t\t64434: 36559,\r\n\t\t64435: 64036,\r\n\t\t64436: 64037,\r\n\t\t64437: 36967,\r\n\t\t64438: 37086,\r\n\t\t64439: 64038,\r\n\t\t64440: 37141,\r\n\t\t64441: 37159,\r\n\t\t64442: 37338,\r\n\t\t64443: 37335,\r\n\t\t64444: 37342,\r\n\t\t64445: 37357,\r\n\t\t64446: 37358,\r\n\t\t64447: 37348,\r\n\t\t64448: 37349,\r\n\t\t64449: 37382,\r\n\t\t64450: 37392,\r\n\t\t64451: 37386,\r\n\t\t64452: 37434,\r\n\t\t64453: 37440,\r\n\t\t64454: 37436,\r\n\t\t64455: 37454,\r\n\t\t64456: 37465,\r\n\t\t64457: 37457,\r\n\t\t64458: 37433,\r\n\t\t64459: 37479,\r\n\t\t64460: 37543,\r\n\t\t64461: 37495,\r\n\t\t64462: 37496,\r\n\t\t64463: 37607,\r\n\t\t64464: 37591,\r\n\t\t64465: 37593,\r\n\t\t64466: 37584,\r\n\t\t64467: 64039,\r\n\t\t64468: 37589,\r\n\t\t64469: 37600,\r\n\t\t64470: 37587,\r\n\t\t64471: 37669,\r\n\t\t64472: 37665,\r\n\t\t64473: 37627,\r\n\t\t64474: 64040,\r\n\t\t64475: 37662,\r\n\t\t64476: 37631,\r\n\t\t64477: 37661,\r\n\t\t64478: 37634,\r\n\t\t64479: 37744,\r\n\t\t64480: 37719,\r\n\t\t64481: 37796,\r\n\t\t64482: 37830,\r\n\t\t64483: 37854,\r\n\t\t64484: 37880,\r\n\t\t64485: 37937,\r\n\t\t64486: 37957,\r\n\t\t64487: 37960,\r\n\t\t64488: 38290,\r\n\t\t64489: 63964,\r\n\t\t64490: 64041,\r\n\t\t64491: 38557,\r\n\t\t64492: 38575,\r\n\t\t64493: 38707,\r\n\t\t64494: 38715,\r\n\t\t64495: 38723,\r\n\t\t64496: 38733,\r\n\t\t64497: 38735,\r\n\t\t64498: 38737,\r\n\t\t64499: 38741,\r\n\t\t64500: 38999,\r\n\t\t64501: 39013,\r\n\t\t64502: 64042,\r\n\t\t64503: 64043,\r\n\t\t64504: 39207,\r\n\t\t64505: 64044,\r\n\t\t64506: 39326,\r\n\t\t64507: 39502,\r\n\t\t64508: 39641,\r\n\t\t64576: 39644,\r\n\t\t64577: 39797,\r\n\t\t64578: 39794,\r\n\t\t64579: 39823,\r\n\t\t64580: 39857,\r\n\t\t64581: 39867,\r\n\t\t64582: 39936,\r\n\t\t64583: 40304,\r\n\t\t64584: 40299,\r\n\t\t64585: 64045,\r\n\t\t64586: 40473,\r\n\t\t64587: 40657\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahiro / https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction DataViewEx( buffer, littleEndian ) {\r\n\r\n\t\tthis.dv = new DataView( buffer );\r\n\t\tthis.offset = 0;\r\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\r\n\t\tthis.encoder = new CharsetEncoder();\r\n\r\n\t}\r\n\r\n\tDataViewEx.prototype = {\r\n\r\n\t\tconstructor: DataViewEx,\r\n\r\n\t\tgetInt8: function () {\r\n\r\n\t\t\tvar value = this.dv.getInt8( this.offset );\r\n\t\t\tthis.offset += 1;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetInt8Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getInt8() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetUint8: function () {\r\n\r\n\t\t\tvar value = this.dv.getUint8( this.offset );\r\n\t\t\tthis.offset += 1;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetUint8Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getUint8() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\r\n\t\tgetInt16: function () {\r\n\r\n\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\r\n\t\t\tthis.offset += 2;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetInt16Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getInt16() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetUint16: function () {\r\n\r\n\t\t\tvar value = this.dv.getUint16( this.offset, this.littleEndian );\r\n\t\t\tthis.offset += 2;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetUint16Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getUint16() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetInt32: function () {\r\n\r\n\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\r\n\t\t\tthis.offset += 4;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetInt32Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getInt32() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetUint32: function () {\r\n\r\n\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\r\n\t\t\tthis.offset += 4;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetUint32Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getUint32() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetFloat32: function () {\r\n\r\n\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\r\n\t\t\tthis.offset += 4;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetFloat32Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getFloat32() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetFloat64: function () {\r\n\r\n\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\r\n\t\t\tthis.offset += 8;\r\n\t\t\treturn value;\r\n\r\n\t\t},\r\n\r\n\t\tgetFloat64Array: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getFloat64() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetIndex: function ( type, isUnsigned ) {\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn ( isUnsigned === true ) ? this.getUint8() : this.getInt8();\r\n\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn ( isUnsigned === true ) ? this.getUint16() : this.getInt16();\r\n\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\treturn this.getInt32(); // No Uint32\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow 'unknown number type ' + type + ' exception.';\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetIndexArray: function ( type, size, isUnsigned ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\t\ta.push( this.getIndex( type, isUnsigned ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a;\r\n\r\n\t\t},\r\n\r\n\t\tgetChars: function ( size ) {\r\n\r\n\t\t\tvar str = '';\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tvar value = this.getUint8();\r\n\t\t\t\tsize --;\r\n\r\n\t\t\t\tif ( value === 0 ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstr += String.fromCharCode( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tthis.getUint8();\r\n\t\t\t\tsize --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn str;\r\n\r\n\t\t},\r\n\r\n\t\tgetSjisStringsAsUnicode: function ( size ) {\r\n\r\n\t\t\tvar a = [];\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tvar value = this.getUint8();\r\n\t\t\t\tsize --;\r\n\r\n\t\t\t\tif ( value === 0 ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ta.push( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tthis.getUint8();\r\n\t\t\t\tsize --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.encoder.s2u( new Uint8Array( a ) );\r\n\r\n\t\t},\r\n\r\n\t\tgetUnicodeStrings: function ( size ) {\r\n\r\n\t\t\tvar str = '';\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tvar value = this.getUint16();\r\n\t\t\t\tsize -= 2;\r\n\r\n\t\t\t\tif ( value === 0 ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstr += String.fromCharCode( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tthis.getUint8();\r\n\t\t\t\tsize --;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn str;\r\n\r\n\t\t},\r\n\r\n\t\tgetTextBuffer: function () {\r\n\r\n\t\t\tvar size = this.getUint32();\r\n\t\t\treturn this.getUnicodeStrings( size );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahiro / https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction DataCreationHelper() {\r\n\t}\r\n\r\n\tDataCreationHelper.prototype = {\r\n\r\n\t\tconstructor: DataCreationHelper,\r\n\r\n\t\tleftToRightVector3: function ( v ) {\r\n\r\n\t\t\tv[ 2 ] = - v[ 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tleftToRightQuaternion: function ( q ) {\r\n\r\n\t\t\tq[ 0 ] = - q[ 0 ];\r\n\t\t\tq[ 1 ] = - q[ 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tleftToRightEuler: function ( r ) {\r\n\r\n\t\t\tr[ 0 ] = - r[ 0 ];\r\n\t\t\tr[ 1 ] = - r[ 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tleftToRightIndexOrder: function ( p ) {\r\n\r\n\t\t\tvar tmp = p[ 2 ];\r\n\t\t\tp[ 2 ] = p[ 0 ];\r\n\t\t\tp[ 0 ] = tmp;\r\n\r\n\t\t},\r\n\r\n\t\tleftToRightVector3Range: function ( v1, v2 ) {\r\n\r\n\t\t\tvar tmp = - v2[ 2 ];\r\n\t\t\tv2[ 2 ] = - v1[ 2 ];\r\n\t\t\tv1[ 2 ] = tmp;\r\n\r\n\t\t},\r\n\r\n\t\tleftToRightEulerRange: function ( r1, r2 ) {\r\n\r\n\t\t\tvar tmp1 = - r2[ 0 ];\r\n\t\t\tvar tmp2 = - r2[ 1 ];\r\n\t\t\tr2[ 0 ] = - r1[ 0 ];\r\n\t\t\tr2[ 1 ] = - r1[ 1 ];\r\n\t\t\tr1[ 0 ] = tmp1;\r\n\t\t\tr1[ 1 ] = tmp2;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahiro / https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction Parser() {\r\n\t}\r\n\r\n\tParser.prototype.parsePmd = function ( buffer, leftToRight ) {\r\n\r\n\t\tvar pmd = {};\r\n\t\tvar dv = new DataViewEx( buffer );\r\n\r\n\t\tpmd.metadata = {};\r\n\t\tpmd.metadata.format = 'pmd';\r\n\t\tpmd.metadata.coordinateSystem = 'left';\r\n\r\n\t\tvar parseHeader = function () {\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.magic = dv.getChars( 3 );\r\n\r\n\t\t\tif ( metadata.magic !== 'Pmd' ) {\r\n\r\n\t\t\t\tthrow 'PMD file magic is not Pmd, but ' + metadata.magic;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmetadata.version = dv.getFloat32();\r\n\t\t\tmetadata.modelName = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\tmetadata.comment = dv.getSjisStringsAsUnicode( 256 );\r\n\r\n\t\t};\r\n\r\n\t\tvar parseVertices = function () {\r\n\r\n\t\t\tvar parseVertex = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.normal = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.uv = dv.getFloat32Array( 2 );\r\n\t\t\t\tp.skinIndices = dv.getUint16Array( 2 );\r\n\t\t\t\tp.skinWeights = [ dv.getUint8() / 100 ];\r\n\t\t\t\tp.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );\r\n\t\t\t\tp.edgeFlag = dv.getUint8();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.vertexCount = dv.getUint32();\r\n\r\n\t\t\tpmd.vertices = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.vertexCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.vertices.push( parseVertex() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseFaces = function () {\r\n\r\n\t\t\tvar parseFace = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.indices = dv.getUint16Array( 3 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.faceCount = dv.getUint32() / 3;\r\n\r\n\t\t\tpmd.faces = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.faceCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.faces.push( parseFace() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMaterials = function () {\r\n\r\n\t\t\tvar parseMaterial = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.diffuse = dv.getFloat32Array( 4 );\r\n\t\t\t\tp.shininess = dv.getFloat32();\r\n\t\t\t\tp.specular = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.ambient = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.toonIndex = dv.getInt8();\r\n\t\t\t\tp.edgeFlag = dv.getUint8();\r\n\t\t\t\tp.faceCount = dv.getUint32() / 3;\r\n\t\t\t\tp.fileName = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.materialCount = dv.getUint32();\r\n\r\n\t\t\tpmd.materials = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.materialCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.materials.push( parseMaterial() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseBones = function () {\r\n\r\n\t\t\tvar parseBone = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\tp.parentIndex = dv.getInt16();\r\n\t\t\t\tp.tailIndex = dv.getInt16();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\t\t\t\tp.ikIndex = dv.getInt16();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.boneCount = dv.getUint16();\r\n\r\n\t\t\tpmd.bones = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.boneCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.bones.push( parseBone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseIks = function () {\r\n\r\n\t\t\tvar parseIk = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.target = dv.getUint16();\r\n\t\t\t\tp.effector = dv.getUint16();\r\n\t\t\t\tp.linkCount = dv.getUint8();\r\n\t\t\t\tp.iteration = dv.getUint16();\r\n\t\t\t\tp.maxAngle = dv.getFloat32();\r\n\r\n\t\t\t\tp.links = [];\r\n\t\t\t\tfor ( var i = 0; i < p.linkCount; i ++ ) {\r\n\r\n\t\t\t\t\tvar link = {};\r\n\t\t\t\t\tlink.index = dv.getUint16();\r\n\t\t\t\t\tp.links.push( link );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.ikCount = dv.getUint16();\r\n\r\n\t\t\tpmd.iks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.ikCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.iks.push( parseIk() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMorphs = function () {\r\n\r\n\t\t\tvar parseMorph = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\tp.elementCount = dv.getUint32();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\r\n\t\t\t\tp.elements = [];\r\n\t\t\t\tfor ( var i = 0; i < p.elementCount; i ++ ) {\r\n\r\n\t\t\t\t\tp.elements.push( {\r\n\t\t\t\t\t\tindex: dv.getUint32(),\r\n\t\t\t\t\t\tposition: dv.getFloat32Array( 3 )\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.morphCount = dv.getUint16();\r\n\r\n\t\t\tpmd.morphs = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.morphCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.morphs.push( parseMorph() );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMorphFrames = function () {\r\n\r\n\t\t\tvar parseMorphFrame = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.index = dv.getUint16();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.morphFrameCount = dv.getUint8();\r\n\r\n\t\t\tpmd.morphFrames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.morphFrameCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.morphFrames.push( parseMorphFrame() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseBoneFrameNames = function () {\r\n\r\n\t\t\tvar parseBoneFrameName = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 50 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.boneFrameNameCount = dv.getUint8();\r\n\r\n\t\t\tpmd.boneFrameNames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.boneFrameNameCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.boneFrameNames.push( parseBoneFrameName() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseBoneFrames = function () {\r\n\r\n\t\t\tvar parseBoneFrame = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.boneIndex = dv.getInt16();\r\n\t\t\t\tp.frameIndex = dv.getUint8();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.boneFrameCount = dv.getUint32();\r\n\r\n\t\t\tpmd.boneFrames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.boneFrameCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.boneFrames.push( parseBoneFrame() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseEnglishHeader = function () {\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.englishCompatibility = dv.getUint8();\r\n\r\n\t\t\tif ( metadata.englishCompatibility > 0 ) {\r\n\r\n\t\t\t\tmetadata.englishModelName = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\tmetadata.englishComment = dv.getSjisStringsAsUnicode( 256 );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseEnglishBoneNames = function () {\r\n\r\n\t\t\tvar parseEnglishBoneName = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\r\n\t\t\tif ( metadata.englishCompatibility === 0 ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpmd.englishBoneNames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.boneCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.englishBoneNames.push( parseEnglishBoneName() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseEnglishMorphNames = function () {\r\n\r\n\t\t\tvar parseEnglishMorphName = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\r\n\t\t\tif ( metadata.englishCompatibility === 0 ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpmd.englishMorphNames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.morphCount - 1; i ++ ) {\r\n\r\n\t\t\t\tpmd.englishMorphNames.push( parseEnglishMorphName() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseEnglishBoneFrameNames = function () {\r\n\r\n\t\t\tvar parseEnglishBoneFrameName = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 50 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\r\n\t\t\tif ( metadata.englishCompatibility === 0 ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpmd.englishBoneFrameNames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.boneFrameNameCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.englishBoneFrameNames.push( parseEnglishBoneFrameName() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseToonTextures = function () {\r\n\r\n\t\t\tvar parseToonTexture = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.fileName = dv.getSjisStringsAsUnicode( 100 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tpmd.toonTextures = [];\r\n\r\n\t\t\tfor ( var i = 0; i < 10; i ++ ) {\r\n\r\n\t\t\t\tpmd.toonTextures.push( parseToonTexture() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseRigidBodies = function () {\r\n\r\n\t\t\tvar parseRigidBody = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\tp.boneIndex = dv.getInt16();\r\n\t\t\t\tp.groupIndex = dv.getUint8();\r\n\t\t\t\tp.groupTarget = dv.getUint16();\r\n\t\t\t\tp.shapeType = dv.getUint8();\r\n\t\t\t\tp.width = dv.getFloat32();\r\n\t\t\t\tp.height = dv.getFloat32();\r\n\t\t\t\tp.depth = dv.getFloat32();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotation = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.weight = dv.getFloat32();\r\n\t\t\t\tp.positionDamping = dv.getFloat32();\r\n\t\t\t\tp.rotationDamping = dv.getFloat32();\r\n\t\t\t\tp.restitution = dv.getFloat32();\r\n\t\t\t\tp.friction = dv.getFloat32();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.rigidBodyCount = dv.getUint32();\r\n\r\n\t\t\tpmd.rigidBodies = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.rigidBodyCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.rigidBodies.push( parseRigidBody() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseConstraints = function () {\r\n\r\n\t\t\tvar parseConstraint = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getSjisStringsAsUnicode( 20 );\r\n\t\t\t\tp.rigidBodyIndex1 = dv.getUint32();\r\n\t\t\t\tp.rigidBodyIndex2 = dv.getUint32();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotation = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.translationLimitation1 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.translationLimitation2 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotationLimitation1 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotationLimitation2 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.springPosition = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.springRotation = dv.getFloat32Array( 3 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmd.metadata;\r\n\t\t\tmetadata.constraintCount = dv.getUint32();\r\n\r\n\t\t\tpmd.constraints = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.constraintCount; i ++ ) {\r\n\r\n\t\t\t\tpmd.constraints.push( parseConstraint() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tparseHeader();\r\n\t\tparseVertices();\r\n\t\tparseFaces();\r\n\t\tparseMaterials();\r\n\t\tparseBones();\r\n\t\tparseIks();\r\n\t\tparseMorphs();\r\n\t\tparseMorphFrames();\r\n\t\tparseBoneFrameNames();\r\n\t\tparseBoneFrames();\r\n\t\tparseEnglishHeader();\r\n\t\tparseEnglishBoneNames();\r\n\t\tparseEnglishMorphNames();\r\n\t\tparseEnglishBoneFrameNames();\r\n\t\tparseToonTextures();\r\n\t\tparseRigidBodies();\r\n\t\tparseConstraints();\r\n\r\n\t\tif ( leftToRight === true ) this.leftToRightModel( pmd );\r\n\r\n\t\t// console.log( pmd ); // for console debug\r\n\r\n\t\treturn pmd;\r\n\r\n\t};\r\n\r\n\tParser.prototype.parsePmx = function ( buffer, leftToRight ) {\r\n\r\n\t\tvar pmx = {};\r\n\t\tvar dv = new DataViewEx( buffer );\r\n\r\n\t\tpmx.metadata = {};\r\n\t\tpmx.metadata.format = 'pmx';\r\n\t\tpmx.metadata.coordinateSystem = 'left';\r\n\r\n\t\tvar parseHeader = function () {\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.magic = dv.getChars( 4 );\r\n\r\n\t\t\t// Note: don't remove the last blank space.\r\n\t\t\tif ( metadata.magic !== 'PMX ' ) {\r\n\r\n\t\t\t\tthrow 'PMX file magic is not PMX , but ' + metadata.magic;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmetadata.version = dv.getFloat32();\r\n\r\n\t\t\tif ( metadata.version !== 2.0 && metadata.version !== 2.1 ) {\r\n\r\n\t\t\t\tthrow 'PMX version ' + metadata.version + ' is not supported.';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmetadata.headerSize = dv.getUint8();\r\n\t\t\tmetadata.encoding = dv.getUint8();\r\n\t\t\tmetadata.additionalUvNum = dv.getUint8();\r\n\t\t\tmetadata.vertexIndexSize = dv.getUint8();\r\n\t\t\tmetadata.textureIndexSize = dv.getUint8();\r\n\t\t\tmetadata.materialIndexSize = dv.getUint8();\r\n\t\t\tmetadata.boneIndexSize = dv.getUint8();\r\n\t\t\tmetadata.morphIndexSize = dv.getUint8();\r\n\t\t\tmetadata.rigidBodyIndexSize = dv.getUint8();\r\n\t\t\tmetadata.modelName = dv.getTextBuffer();\r\n\t\t\tmetadata.englishModelName = dv.getTextBuffer();\r\n\t\t\tmetadata.comment = dv.getTextBuffer();\r\n\t\t\tmetadata.englishComment = dv.getTextBuffer();\r\n\r\n\t\t};\r\n\r\n\t\tvar parseVertices = function () {\r\n\r\n\t\t\tvar parseVertex = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.normal = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.uv = dv.getFloat32Array( 2 );\r\n\r\n\t\t\t\tp.auvs = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < pmx.metadata.additionalUvNum; i ++ ) {\r\n\r\n\t\t\t\t\tp.auvs.push( dv.getFloat32Array( 4 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.type = dv.getUint8();\r\n\r\n\t\t\t\tvar indexSize = metadata.boneIndexSize;\r\n\r\n\t\t\t\tif ( p.type === 0 ) { // BDEF1\r\n\r\n\t\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 1 );\r\n\t\t\t\t\tp.skinWeights = [ 1.0 ];\r\n\r\n\t\t\t\t} else if ( p.type === 1 ) { // BDEF2\r\n\r\n\t\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 2 );\r\n\t\t\t\t\tp.skinWeights = dv.getFloat32Array( 1 );\r\n\t\t\t\t\tp.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );\r\n\r\n\t\t\t\t} else if ( p.type === 2 ) { // BDEF4\r\n\r\n\t\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 4 );\r\n\t\t\t\t\tp.skinWeights = dv.getFloat32Array( 4 );\r\n\r\n\t\t\t\t} else if ( p.type === 3 ) { // SDEF\r\n\r\n\t\t\t\t\tp.skinIndices = dv.getIndexArray( indexSize, 2 );\r\n\t\t\t\t\tp.skinWeights = dv.getFloat32Array( 1 );\r\n\t\t\t\t\tp.skinWeights.push( 1.0 - p.skinWeights[ 0 ] );\r\n\r\n\t\t\t\t\tp.skinC = dv.getFloat32Array( 3 );\r\n\t\t\t\t\tp.skinR0 = dv.getFloat32Array( 3 );\r\n\t\t\t\t\tp.skinR1 = dv.getFloat32Array( 3 );\r\n\r\n\t\t\t\t\t// SDEF is not supported yet and is handled as BDEF2 so far.\r\n\t\t\t\t\t// TODO: SDEF support\r\n\t\t\t\t\tp.type = 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow 'unsupport bone type ' + p.type + ' exception.';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.edgeRatio = dv.getFloat32();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.vertexCount = dv.getUint32();\r\n\r\n\t\t\tpmx.vertices = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.vertexCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.vertices.push( parseVertex() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseFaces = function () {\r\n\r\n\t\t\tvar parseFace = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.indices = dv.getIndexArray( metadata.vertexIndexSize, 3, true );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.faceCount = dv.getUint32() / 3;\r\n\r\n\t\t\tpmx.faces = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.faceCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.faces.push( parseFace() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseTextures = function () {\r\n\r\n\t\t\tvar parseTexture = function () {\r\n\r\n\t\t\t\treturn dv.getTextBuffer();\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.textureCount = dv.getUint32();\r\n\r\n\t\t\tpmx.textures = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.textureCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.textures.push( parseTexture() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMaterials = function () {\r\n\r\n\t\t\tvar parseMaterial = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getTextBuffer();\r\n\t\t\t\tp.englishName = dv.getTextBuffer();\r\n\t\t\t\tp.diffuse = dv.getFloat32Array( 4 );\r\n\t\t\t\tp.specular = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.shininess = dv.getFloat32();\r\n\t\t\t\tp.ambient = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.flag = dv.getUint8();\r\n\t\t\t\tp.edgeColor = dv.getFloat32Array( 4 );\r\n\t\t\t\tp.edgeSize = dv.getFloat32();\r\n\t\t\t\tp.textureIndex = dv.getIndex( pmx.metadata.textureIndexSize );\r\n\t\t\t\tp.envTextureIndex = dv.getIndex( pmx.metadata.textureIndexSize );\r\n\t\t\t\tp.envFlag = dv.getUint8();\r\n\t\t\t\tp.toonFlag = dv.getUint8();\r\n\r\n\t\t\t\tif ( p.toonFlag === 0 ) {\r\n\r\n\t\t\t\t\tp.toonIndex = dv.getIndex( pmx.metadata.textureIndexSize );\r\n\r\n\t\t\t\t} else if ( p.toonFlag === 1 ) {\r\n\r\n\t\t\t\t\tp.toonIndex = dv.getInt8();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow 'unknown toon flag ' + p.toonFlag + ' exception.';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.comment = dv.getTextBuffer();\r\n\t\t\t\tp.faceCount = dv.getUint32() / 3;\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.materialCount = dv.getUint32();\r\n\r\n\t\t\tpmx.materials = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.materialCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.materials.push( parseMaterial() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseBones = function () {\r\n\r\n\t\t\tvar parseBone = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getTextBuffer();\r\n\t\t\t\tp.englishName = dv.getTextBuffer();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\t\t\t\tp.transformationClass = dv.getUint32();\r\n\t\t\t\tp.flag = dv.getUint16();\r\n\r\n\t\t\t\tif ( p.flag & 0x1 ) {\r\n\r\n\t\t\t\t\tp.connectIndex = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp.offsetPosition = dv.getFloat32Array( 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p.flag & 0x100 || p.flag & 0x200 ) {\r\n\r\n\t\t\t\t\t// Note: I don't think Grant is an appropriate name\r\n\t\t\t\t\t//       but I found that some English translated MMD tools use this term\r\n\t\t\t\t\t//       so I've named it Grant so far.\r\n\t\t\t\t\t//       I'd rename to more appropriate name from Grant later.\r\n\t\t\t\t\tvar grant = {};\r\n\r\n\t\t\t\t\tgrant.isLocal = ( p.flag & 0x80 ) !== 0 ? true : false;\r\n\t\t\t\t\tgrant.affectRotation = ( p.flag & 0x100 ) !== 0 ? true : false;\r\n\t\t\t\t\tgrant.affectPosition = ( p.flag & 0x200 ) !== 0 ? true : false;\r\n\t\t\t\t\tgrant.parentIndex = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\t\t\t\t\tgrant.ratio = dv.getFloat32();\r\n\r\n\t\t\t\t\tp.grant = grant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p.flag & 0x400 ) {\r\n\r\n\t\t\t\t\tp.fixAxis = dv.getFloat32Array( 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p.flag & 0x800 ) {\r\n\r\n\t\t\t\t\tp.localXVector = dv.getFloat32Array( 3 );\r\n\t\t\t\t\tp.localZVector = dv.getFloat32Array( 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p.flag & 0x2000 ) {\r\n\r\n\t\t\t\t\tp.key = dv.getUint32();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p.flag & 0x20 ) {\r\n\r\n\t\t\t\t\tvar ik = {};\r\n\r\n\t\t\t\t\tik.effector = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\t\t\t\t\tik.target = null;\r\n\t\t\t\t\tik.iteration = dv.getUint32();\r\n\t\t\t\t\tik.maxAngle = dv.getFloat32();\r\n\t\t\t\t\tik.linkCount = dv.getUint32();\r\n\t\t\t\t\tik.links = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < ik.linkCount; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar link = {};\r\n\t\t\t\t\t\tlink.index = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\t\t\t\t\t\tlink.angleLimitation = dv.getUint8();\r\n\r\n\t\t\t\t\t\tif ( link.angleLimitation === 1 ) {\r\n\r\n\t\t\t\t\t\t\tlink.lowerLimitationAngle = dv.getFloat32Array( 3 );\r\n\t\t\t\t\t\t\tlink.upperLimitationAngle = dv.getFloat32Array( 3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tik.links.push( link );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tp.ik = ik;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.boneCount = dv.getUint32();\r\n\r\n\t\t\tpmx.bones = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.boneCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.bones.push( parseBone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMorphs = function () {\r\n\r\n\t\t\tvar parseMorph = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getTextBuffer();\r\n\t\t\t\tp.englishName = dv.getTextBuffer();\r\n\t\t\t\tp.panel = dv.getUint8();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\t\t\t\tp.elementCount = dv.getUint32();\r\n\t\t\t\tp.elements = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < p.elementCount; i ++ ) {\r\n\r\n\t\t\t\t\tif ( p.type === 0 ) { // group morph\r\n\r\n\t\t\t\t\t\tvar m = {};\r\n\t\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.morphIndexSize );\r\n\t\t\t\t\t\tm.ratio = dv.getFloat32();\r\n\t\t\t\t\t\tp.elements.push( m );\r\n\r\n\t\t\t\t\t} else if ( p.type === 1 ) { // vertex morph\r\n\r\n\t\t\t\t\t\tvar m = {};\r\n\t\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );\r\n\t\t\t\t\t\tm.position = dv.getFloat32Array( 3 );\r\n\t\t\t\t\t\tp.elements.push( m );\r\n\r\n\t\t\t\t\t} else if ( p.type === 2 ) { // bone morph\r\n\r\n\t\t\t\t\t\tvar m = {};\r\n\t\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\t\t\t\t\t\tm.position = dv.getFloat32Array( 3 );\r\n\t\t\t\t\t\tm.rotation = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tp.elements.push( m );\r\n\r\n\t\t\t\t\t} else if ( p.type === 3 ) { // uv morph\r\n\r\n\t\t\t\t\t\tvar m = {};\r\n\t\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.vertexIndexSize, true );\r\n\t\t\t\t\t\tm.uv = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tp.elements.push( m );\r\n\r\n\t\t\t\t\t} else if ( p.type === 4 ) { // additional uv1\r\n\r\n\t\t\t\t\t\t// TODO: implement\r\n\r\n\t\t\t\t\t} else if ( p.type === 5 ) { // additional uv2\r\n\r\n\t\t\t\t\t\t// TODO: implement\r\n\r\n\t\t\t\t\t} else if ( p.type === 6 ) { // additional uv3\r\n\r\n\t\t\t\t\t\t// TODO: implement\r\n\r\n\t\t\t\t\t} else if ( p.type === 7 ) { // additional uv4\r\n\r\n\t\t\t\t\t\t// TODO: implement\r\n\r\n\t\t\t\t\t} else if ( p.type === 8 ) { // material morph\r\n\r\n\t\t\t\t\t\tvar m = {};\r\n\t\t\t\t\t\tm.index = dv.getIndex( pmx.metadata.materialIndexSize );\r\n\t\t\t\t\t\tm.type = dv.getUint8();\r\n\t\t\t\t\t\tm.diffuse = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tm.specular = dv.getFloat32Array( 3 );\r\n\t\t\t\t\t\tm.shininess = dv.getFloat32();\r\n\t\t\t\t\t\tm.ambient = dv.getFloat32Array( 3 );\r\n\t\t\t\t\t\tm.edgeColor = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tm.edgeSize = dv.getFloat32();\r\n\t\t\t\t\t\tm.textureColor = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tm.sphereTextureColor = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tm.toonColor = dv.getFloat32Array( 4 );\r\n\t\t\t\t\t\tp.elements.push( m );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.morphCount = dv.getUint32();\r\n\r\n\t\t\tpmx.morphs = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.morphCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.morphs.push( parseMorph() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseFrames = function () {\r\n\r\n\t\t\tvar parseFrame = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getTextBuffer();\r\n\t\t\t\tp.englishName = dv.getTextBuffer();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\t\t\t\tp.elementCount = dv.getUint32();\r\n\t\t\t\tp.elements = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < p.elementCount; i ++ ) {\r\n\r\n\t\t\t\t\tvar e = {};\r\n\t\t\t\t\te.target = dv.getUint8();\r\n\t\t\t\t\te.index = ( e.target === 0 ) ? dv.getIndex( pmx.metadata.boneIndexSize ) : dv.getIndex( pmx.metadata.morphIndexSize );\r\n\t\t\t\t\tp.elements.push( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.frameCount = dv.getUint32();\r\n\r\n\t\t\tpmx.frames = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.frameCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.frames.push( parseFrame() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseRigidBodies = function () {\r\n\r\n\t\t\tvar parseRigidBody = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getTextBuffer();\r\n\t\t\t\tp.englishName = dv.getTextBuffer();\r\n\t\t\t\tp.boneIndex = dv.getIndex( pmx.metadata.boneIndexSize );\r\n\t\t\t\tp.groupIndex = dv.getUint8();\r\n\t\t\t\tp.groupTarget = dv.getUint16();\r\n\t\t\t\tp.shapeType = dv.getUint8();\r\n\t\t\t\tp.width = dv.getFloat32();\r\n\t\t\t\tp.height = dv.getFloat32();\r\n\t\t\t\tp.depth = dv.getFloat32();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotation = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.weight = dv.getFloat32();\r\n\t\t\t\tp.positionDamping = dv.getFloat32();\r\n\t\t\t\tp.rotationDamping = dv.getFloat32();\r\n\t\t\t\tp.restitution = dv.getFloat32();\r\n\t\t\t\tp.friction = dv.getFloat32();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.rigidBodyCount = dv.getUint32();\r\n\r\n\t\t\tpmx.rigidBodies = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.rigidBodyCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.rigidBodies.push( parseRigidBody() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseConstraints = function () {\r\n\r\n\t\t\tvar parseConstraint = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.name = dv.getTextBuffer();\r\n\t\t\t\tp.englishName = dv.getTextBuffer();\r\n\t\t\t\tp.type = dv.getUint8();\r\n\t\t\t\tp.rigidBodyIndex1 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );\r\n\t\t\t\tp.rigidBodyIndex2 = dv.getIndex( pmx.metadata.rigidBodyIndexSize );\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotation = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.translationLimitation1 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.translationLimitation2 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotationLimitation1 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotationLimitation2 = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.springPosition = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.springRotation = dv.getFloat32Array( 3 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = pmx.metadata;\r\n\t\t\tmetadata.constraintCount = dv.getUint32();\r\n\r\n\t\t\tpmx.constraints = [];\r\n\r\n\t\t\tfor ( var i = 0; i < metadata.constraintCount; i ++ ) {\r\n\r\n\t\t\t\tpmx.constraints.push( parseConstraint() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tparseHeader();\r\n\t\tparseVertices();\r\n\t\tparseFaces();\r\n\t\tparseTextures();\r\n\t\tparseMaterials();\r\n\t\tparseBones();\r\n\t\tparseMorphs();\r\n\t\tparseFrames();\r\n\t\tparseRigidBodies();\r\n\t\tparseConstraints();\r\n\r\n\t\tif ( leftToRight === true ) this.leftToRightModel( pmx );\r\n\r\n\t\t// console.log( pmx ); // for console debug\r\n\r\n\t\treturn pmx;\r\n\r\n\t};\r\n\r\n\tParser.prototype.parseVmd = function ( buffer, leftToRight ) {\r\n\r\n\t\tvar vmd = {};\r\n\t\tvar dv = new DataViewEx( buffer );\r\n\r\n\t\tvmd.metadata = {};\r\n\t\tvmd.metadata.coordinateSystem = 'left';\r\n\r\n\t\tvar parseHeader = function () {\r\n\r\n\t\t\tvar metadata = vmd.metadata;\r\n\t\t\tmetadata.magic = dv.getChars( 30 );\r\n\r\n\t\t\tif ( metadata.magic !== 'Vocaloid Motion Data 0002' ) {\r\n\r\n\t\t\t\tthrow 'VMD file magic is not Vocaloid Motion Data 0002, but ' + metadata.magic;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmetadata.name = dv.getSjisStringsAsUnicode( 20 );\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMotions = function () {\r\n\r\n\t\t\tvar parseMotion = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.boneName = dv.getSjisStringsAsUnicode( 15 );\r\n\t\t\t\tp.frameNum = dv.getUint32();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotation = dv.getFloat32Array( 4 );\r\n\t\t\t\tp.interpolation = dv.getUint8Array( 64 );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = vmd.metadata;\r\n\t\t\tmetadata.motionCount = dv.getUint32();\r\n\r\n\t\t\tvmd.motions = [];\r\n\t\t\tfor ( var i = 0; i < metadata.motionCount; i ++ ) {\r\n\r\n\t\t\t\tvmd.motions.push( parseMotion() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseMorphs = function () {\r\n\r\n\t\t\tvar parseMorph = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.morphName = dv.getSjisStringsAsUnicode( 15 );\r\n\t\t\t\tp.frameNum = dv.getUint32();\r\n\t\t\t\tp.weight = dv.getFloat32();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = vmd.metadata;\r\n\t\t\tmetadata.morphCount = dv.getUint32();\r\n\r\n\t\t\tvmd.morphs = [];\r\n\t\t\tfor ( var i = 0; i < metadata.morphCount; i ++ ) {\r\n\r\n\t\t\t\tvmd.morphs.push( parseMorph() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar parseCameras = function () {\r\n\r\n\t\t\tvar parseCamera = function () {\r\n\r\n\t\t\t\tvar p = {};\r\n\t\t\t\tp.frameNum = dv.getUint32();\r\n\t\t\t\tp.distance = dv.getFloat32();\r\n\t\t\t\tp.position = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.rotation = dv.getFloat32Array( 3 );\r\n\t\t\t\tp.interpolation = dv.getUint8Array( 24 );\r\n\t\t\t\tp.fov = dv.getUint32();\r\n\t\t\t\tp.perspective = dv.getUint8();\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar metadata = vmd.metadata;\r\n\t\t\tmetadata.cameraCount = dv.getUint32();\r\n\r\n\t\t\tvmd.cameras = [];\r\n\t\t\tfor ( var i = 0; i < metadata.cameraCount; i ++ ) {\r\n\r\n\t\t\t\tvmd.cameras.push( parseCamera() );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tparseHeader();\r\n\t\tparseMotions();\r\n\t\tparseMorphs();\r\n\t\tparseCameras();\r\n\r\n\t\tif ( leftToRight === true ) this.leftToRightVmd( vmd );\r\n\r\n\t\t// console.log( vmd ); // for console debug\r\n\r\n\t\treturn vmd;\r\n\r\n\t};\r\n\r\n\tParser.prototype.parseVpd = function ( text, leftToRight ) {\r\n\r\n\t\tvar vpd = {};\r\n\r\n\t\tvpd.metadata = {};\r\n\t\tvpd.metadata.coordinateSystem = 'left';\r\n\r\n\t\tvpd.bones = [];\r\n\r\n\t\tvar commentPatternG = /\\/\\/\\w*(\\r|\\n|\\r\\n)/g;\r\n\t\tvar newlinePattern = /\\r|\\n|\\r\\n/;\r\n\r\n\t\tvar lines = text.replace( commentPatternG, '' ).split( newlinePattern );\r\n\r\n\t\tfunction throwError() {\r\n\r\n\t\t\tthrow 'the file seems not vpd file.';\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkMagic() {\r\n\r\n\t\t\tif ( lines[ 0 ] !== 'Vocaloid Pose Data file' ) {\r\n\r\n\t\t\t\tthrowError();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseHeader() {\r\n\r\n\t\t\tif ( lines.length < 4 ) {\r\n\r\n\t\t\t\tthrowError();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvpd.metadata.parentFile = lines[ 2 ];\r\n\t\t\tvpd.metadata.boneCount = parseInt( lines[ 3 ] );\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBones() {\r\n\r\n\t\t\tvar boneHeaderPattern = /^\\s*(Bone[0-9]+)\\s*\\{\\s*(.*)$/;\r\n\t\t\tvar boneVectorPattern = /^\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*;/;\r\n\t\t\tvar boneQuaternionPattern = /^\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*,\\s*(-?[0-9]+\\.[0-9]+)\\s*;/;\r\n\t\t\tvar boneFooterPattern = /^\\s*}/;\r\n\r\n\t\t\tvar bones = vpd.bones;\r\n\t\t\tvar n = null;\r\n\t\t\tvar v = null;\r\n\t\t\tvar q = null;\r\n\r\n\t\t\tfor ( var i = 4; i < lines.length; i ++ ) {\r\n\r\n\t\t\t\tvar line = lines[ i ];\r\n\r\n\t\t\t\tvar result;\r\n\r\n\t\t\t\tresult = line.match( boneHeaderPattern );\r\n\r\n\t\t\t\tif ( result !== null ) {\r\n\r\n\t\t\t\t\tif ( n !== null ) {\r\n\r\n\t\t\t\t\t\tthrowError();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tn = result[ 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = line.match( boneVectorPattern );\r\n\r\n\t\t\t\tif ( result !== null ) {\r\n\r\n\t\t\t\t\tif ( v !== null ) {\r\n\r\n\t\t\t\t\t\tthrowError();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tv = [\r\n\r\n\t\t\t\t\t\tparseFloat( result[ 1 ] ),\r\n\t\t\t\t\t\tparseFloat( result[ 2 ] ),\r\n\t\t\t\t\t\tparseFloat( result[ 3 ] )\r\n\r\n\t\t\t\t\t];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = line.match( boneQuaternionPattern );\r\n\r\n\t\t\t\tif ( result !== null ) {\r\n\r\n\t\t\t\t\tif ( q !== null ) {\r\n\r\n\t\t\t\t\t\tthrowError();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tq = [\r\n\r\n\t\t\t\t\t\tparseFloat( result[ 1 ] ),\r\n\t\t\t\t\t\tparseFloat( result[ 2 ] ),\r\n\t\t\t\t\t\tparseFloat( result[ 3 ] ),\r\n\t\t\t\t\t\tparseFloat( result[ 4 ] )\r\n\r\n\t\t\t\t\t];\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = line.match( boneFooterPattern );\r\n\r\n\t\t\t\tif ( result !== null ) {\r\n\r\n\t\t\t\t\tif ( n === null || v === null || q === null ) {\r\n\r\n\t\t\t\t\t\tthrowError();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbones.push( {\r\n\r\n\t\t\t\t\t\tname: n,\r\n\t\t\t\t\t\ttranslation: v,\r\n\t\t\t\t\t\tquaternion: q\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tn = null;\r\n\t\t\t\t\tv = null;\r\n\t\t\t\t\tq = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( n !== null || v !== null || q !== null ) {\r\n\r\n\t\t\t\tthrowError();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcheckMagic();\r\n\t\tparseHeader();\r\n\t\tparseBones();\r\n\r\n\t\tif ( leftToRight === true ) this.leftToRightVpd( vpd );\r\n\r\n\t\t// console.log( vpd );  // for console debug\r\n\r\n\t\treturn vpd;\r\n\r\n\t};\r\n\r\n\tParser.prototype.mergeVmds = function ( vmds ) {\r\n\r\n\t\tvar v = {};\r\n\t\tv.metadata = {};\r\n\t\tv.metadata.name = vmds[ 0 ].metadata.name;\r\n\t\tv.metadata.coordinateSystem = vmds[ 0 ].metadata.coordinateSystem;\r\n\t\tv.metadata.motionCount = 0;\r\n\t\tv.metadata.morphCount = 0;\r\n\t\tv.metadata.cameraCount = 0;\r\n\t\tv.motions = [];\r\n\t\tv.morphs = [];\r\n\t\tv.cameras = [];\r\n\r\n\t\tfor ( var i = 0; i < vmds.length; i ++ ) {\r\n\r\n\t\t\tvar v2 = vmds[ i ];\r\n\r\n\t\t\tv.metadata.motionCount += v2.metadata.motionCount;\r\n\t\t\tv.metadata.morphCount += v2.metadata.morphCount;\r\n\t\t\tv.metadata.cameraCount += v2.metadata.cameraCount;\r\n\r\n\t\t\tfor ( var j = 0; j < v2.metadata.motionCount; j ++ ) {\r\n\r\n\t\t\t\tv.motions.push( v2.motions[ j ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < v2.metadata.morphCount; j ++ ) {\r\n\r\n\t\t\t\tv.morphs.push( v2.morphs[ j ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < v2.metadata.cameraCount; j ++ ) {\r\n\r\n\t\t\t\tv.cameras.push( v2.cameras[ j ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn v;\r\n\r\n\t};\r\n\r\n\tParser.prototype.leftToRightModel = function ( model ) {\r\n\r\n\t\tif ( model.metadata.coordinateSystem === 'right' ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tmodel.metadata.coordinateSystem = 'right';\r\n\r\n\t\tvar helper = new DataCreationHelper();\r\n\r\n\t\tfor ( var i = 0; i < model.metadata.vertexCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( model.vertices[ i ].position );\r\n\t\t\thelper.leftToRightVector3( model.vertices[ i ].normal );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < model.metadata.faceCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightIndexOrder( model.faces[ i ].indices );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < model.metadata.boneCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( model.bones[ i ].position );\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: support other morph for PMX\r\n\t\tfor ( var i = 0; i < model.metadata.morphCount; i ++ ) {\r\n\r\n\t\t\tvar m = model.morphs[ i ];\r\n\r\n\t\t\tif ( model.metadata.format === 'pmx' && m.type !== 1 ) {\r\n\r\n\t\t\t\t// TODO: implement\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < m.elements.length; j ++ ) {\r\n\r\n\t\t\t\thelper.leftToRightVector3( m.elements[ j ].position );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < model.metadata.rigidBodyCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( model.rigidBodies[ i ].position );\r\n\t\t\thelper.leftToRightEuler( model.rigidBodies[ i ].rotation );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < model.metadata.constraintCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( model.constraints[ i ].position );\r\n\t\t\thelper.leftToRightEuler( model.constraints[ i ].rotation );\r\n\t\t\thelper.leftToRightVector3Range( model.constraints[ i ].translationLimitation1, model.constraints[ i ].translationLimitation2 );\r\n\t\t\thelper.leftToRightEulerRange( model.constraints[ i ].rotationLimitation1, model.constraints[ i ].rotationLimitation2 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tParser.prototype.leftToRightVmd = function ( vmd ) {\r\n\r\n\t\tif ( vmd.metadata.coordinateSystem === 'right' ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvmd.metadata.coordinateSystem = 'right';\r\n\r\n\t\tvar helper = new DataCreationHelper();\r\n\r\n\t\tfor ( var i = 0; i < vmd.metadata.motionCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( vmd.motions[ i ].position );\r\n\t\t\thelper.leftToRightQuaternion( vmd.motions[ i ].rotation );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < vmd.metadata.cameraCount; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( vmd.cameras[ i ].position );\r\n\t\t\thelper.leftToRightEuler( vmd.cameras[ i ].rotation );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tParser.prototype.leftToRightVpd = function ( vpd ) {\r\n\r\n\t\tif ( vpd.metadata.coordinateSystem === 'right' ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvpd.metadata.coordinateSystem = 'right';\r\n\r\n\t\tvar helper = new DataCreationHelper();\r\n\r\n\t\tfor ( var i = 0; i < vpd.bones.length; i ++ ) {\r\n\r\n\t\t\thelper.leftToRightVector3( vpd.bones[ i ].translation );\r\n\t\t\thelper.leftToRightQuaternion( vpd.bones[ i ].quaternion );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar MMDParser = { CharsetEncoder, Parser };\r\n\r\n\treturn MMDParser;\r\n\r\n});\ndefine('skylark-threejs-ex/exporters/MMDExporter',[\n    \"skylark-threejs\",\n    '../utils/mmdparser'\n], function (THREE, MMDParser) {\n    'use strict';\n    var MMDExporter = function () {\n        var u2sTable;\n        function unicodeToShiftjis(str) {\n            if (u2sTable === undefined) {\n                var encoder = new MMDParser.CharsetEncoder();\n                var table = encoder.s2uTable;\n                u2sTable = {};\n                var keys = Object.keys(table);\n                for (var i = 0, il = keys.length; i < il; i++) {\n                    var key = keys[i];\n                    var value = table[key];\n                    key = parseInt(key);\n                    u2sTable[value] = key;\n                }\n            }\n            var array = [];\n            for (var i = 0, il = str.length; i < il; i++) {\n                var code = str.charCodeAt(i);\n                var value = u2sTable[code];\n                if (value === undefined) {\n                    throw 'cannot convert charcode 0x' + code.toString(16);\n                } else if (value > 255) {\n                    array.push(value >> 8 & 255);\n                    array.push(value & 255);\n                } else {\n                    array.push(value & 255);\n                }\n            }\n            return new Uint8Array(array);\n        }\n        function getBindBones(skin) {\n            var poseSkin = skin.clone();\n            poseSkin.pose();\n            return poseSkin.skeleton.bones;\n        }\n        this.parseVpd = function (skin, outputShiftJis, useOriginalBones) {\n            if (skin.isSkinnedMesh !== true) {\n                console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n                return null;\n            }\n            function toStringsFromNumber(num) {\n                if (Math.abs(num) < 0.000001)\n                    num = 0;\n                var a = num.toString();\n                if (a.indexOf('.') === -1) {\n                    a += '.';\n                }\n                a += '000000';\n                var index = a.indexOf('.');\n                var d = a.slice(0, index);\n                var p = a.slice(index + 1, index + 7);\n                return d + '.' + p;\n            }\n            function toStringsFromArray(array) {\n                var a = [];\n                for (var i = 0, il = array.length; i < il; i++) {\n                    a.push(toStringsFromNumber(array[i]));\n                }\n                return a.join(',');\n            }\n            skin.updateMatrixWorld(true);\n            var bones = skin.skeleton.bones;\n            var bones2 = getBindBones(skin);\n            var position = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            var quaternion2 = new THREE.Quaternion();\n            var matrix = new THREE.Matrix4();\n            var array = [];\n            array.push('Vocaloid Pose Data file');\n            array.push('');\n            array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n            array.push(bones.length + ';');\n            array.push('');\n            for (var i = 0, il = bones.length; i < il; i++) {\n                var bone = bones[i];\n                var bone2 = bones2[i];\n                if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n                    matrix.fromArray(bone.userData.ik.originalMatrix);\n                } else {\n                    matrix.copy(bone.matrix);\n                }\n                position.setFromMatrixPosition(matrix);\n                quaternion.setFromRotationMatrix(matrix);\n                var pArray = position.sub(bone2.position).toArray();\n                var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n                pArray[2] = -pArray[2];\n                qArray[0] = -qArray[0];\n                qArray[1] = -qArray[1];\n                array.push('Bone' + i + '{' + bone.name);\n                array.push('  ' + toStringsFromArray(pArray) + ';');\n                array.push('  ' + toStringsFromArray(qArray) + ';');\n                array.push('}');\n                array.push('');\n            }\n            array.push('');\n            var lines = array.join('\\n');\n            return outputShiftJis === true ? unicodeToShiftjis(lines) : lines;\n        };\n    };\n    return MMDExporter;\n});\ndefine('skylark-threejs-ex/exporters/OBJExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var OBJExporter = function () {\n    };\n    OBJExporter.prototype = {\n        constructor: OBJExporter,\n        parse: function (object) {\n            var output = '';\n            var indexVertex = 0;\n            var indexVertexUvs = 0;\n            var indexNormals = 0;\n            var vertex = new THREE.Vector3();\n            var normal = new THREE.Vector3();\n            var uv = new THREE.Vector2();\n            var i, j, k, l, m, face = [];\n            var parseMesh = function (mesh) {\n                var nbVertex = 0;\n                var nbNormals = 0;\n                var nbVertexUvs = 0;\n                var geometry = mesh.geometry;\n                var normalMatrixWorld = new THREE.Matrix3();\n                if (geometry instanceof THREE.Geometry) {\n                    geometry = new THREE.BufferGeometry().setFromObject(mesh);\n                }\n                if (geometry instanceof THREE.BufferGeometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var indices = geometry.getIndex();\n                    output += 'o ' + mesh.name + '\\n';\n                    if (mesh.material && mesh.material.name) {\n                        output += 'usemtl ' + mesh.material.name + '\\n';\n                    }\n                    if (vertices !== undefined) {\n                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n                            vertex.x = vertices.getX(i);\n                            vertex.y = vertices.getY(i);\n                            vertex.z = vertices.getZ(i);\n                            vertex.applyMatrix4(mesh.matrixWorld);\n                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n                        }\n                    }\n                    if (uvs !== undefined) {\n                        for (i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n                            uv.x = uvs.getX(i);\n                            uv.y = uvs.getY(i);\n                            output += 'vt ' + uv.x + ' ' + uv.y + '\\n';\n                        }\n                    }\n                    if (normals !== undefined) {\n                        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                        for (i = 0, l = normals.count; i < l; i++, nbNormals++) {\n                            normal.x = normals.getX(i);\n                            normal.y = normals.getY(i);\n                            normal.z = normals.getZ(i);\n                            normal.applyMatrix3(normalMatrixWorld).normalize();\n                            output += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n                        }\n                    }\n                    if (indices !== null) {\n                        for (i = 0, l = indices.count; i < l; i += 3) {\n                            for (m = 0; m < 3; m++) {\n                                j = indices.getX(i + m) + 1;\n                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');\n                            }\n                            output += 'f ' + face.join(' ') + '\\n';\n                        }\n                    } else {\n                        for (i = 0, l = vertices.count; i < l; i += 3) {\n                            for (m = 0; m < 3; m++) {\n                                j = i + m + 1;\n                                face[m] = indexVertex + j + (normals || uvs ? '/' + (uvs ? indexVertexUvs + j : '') + (normals ? '/' + (indexNormals + j) : '') : '');\n                            }\n                            output += 'f ' + face.join(' ') + '\\n';\n                        }\n                    }\n                } else {\n                    console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry);\n                }\n                indexVertex += nbVertex;\n                indexVertexUvs += nbVertexUvs;\n                indexNormals += nbNormals;\n            };\n            var parseLine = function (line) {\n                var nbVertex = 0;\n                var geometry = line.geometry;\n                var type = line.type;\n                if (geometry instanceof THREE.Geometry) {\n                    geometry = new THREE.BufferGeometry().setFromObject(line);\n                }\n                if (geometry instanceof THREE.BufferGeometry) {\n                    var vertices = geometry.getAttribute('position');\n                    output += 'o ' + line.name + '\\n';\n                    if (vertices !== undefined) {\n                        for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n                            vertex.x = vertices.getX(i);\n                            vertex.y = vertices.getY(i);\n                            vertex.z = vertices.getZ(i);\n                            vertex.applyMatrix4(line.matrixWorld);\n                            output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n                        }\n                    }\n                    if (type === 'Line') {\n                        output += 'l ';\n                        for (j = 1, l = vertices.count; j <= l; j++) {\n                            output += indexVertex + j + ' ';\n                        }\n                        output += '\\n';\n                    }\n                    if (type === 'LineSegments') {\n                        for (j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n                            output += 'l ' + (indexVertex + j) + ' ' + (indexVertex + k) + '\\n';\n                        }\n                    }\n                } else {\n                    console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry);\n                }\n                indexVertex += nbVertex;\n            };\n            object.traverse(function (child) {\n                if (child instanceof THREE.Mesh) {\n                    parseMesh(child);\n                }\n                if (child instanceof THREE.Line) {\n                    parseLine(child);\n                }\n            });\n            return output;\n        }\n    };\n\n    return OBJExporter;\n});\ndefine('skylark-threejs-ex/exporters/PLYExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var PLYExporter = function () {\n    };\n    PLYExporter.prototype = {\n        constructor: PLYExporter,\n        parse: function (object, onDone, options) {\n            if (onDone && typeof onDone === 'object') {\n                console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n                options = onDone;\n                onDone = undefined;\n            }\n            function traverseMeshes(cb) {\n                object.traverse(function (child) {\n                    if (child.isMesh === true) {\n                        var mesh = child;\n                        var geometry = mesh.geometry;\n                        if (geometry.isGeometry === true) {\n                            geometry = geomToBufferGeom.get(geometry);\n                        }\n                        if (geometry.isBufferGeometry === true) {\n                            if (geometry.getAttribute('position') !== undefined) {\n                                cb(mesh, geometry);\n                            }\n                        }\n                    }\n                });\n            }\n            var defaultOptions = {\n                binary: false,\n                excludeAttributes: [],\n                littleEndian: false\n            };\n            options = Object.assign(defaultOptions, options);\n            var excludeAttributes = options.excludeAttributes;\n            var geomToBufferGeom = new WeakMap();\n            var includeNormals = false;\n            var includeColors = false;\n            var includeUVs = false;\n            var vertexCount = 0;\n            var faceCount = 0;\n            object.traverse(function (child) {\n                if (child.isMesh === true) {\n                    var mesh = child;\n                    var geometry = mesh.geometry;\n                    if (geometry.isGeometry === true) {\n                        var bufferGeometry = geomToBufferGeom.get(geometry) || new THREE.BufferGeometry().setFromObject(mesh);\n                        geomToBufferGeom.set(geometry, bufferGeometry);\n                        geometry = bufferGeometry;\n                    }\n                    if (geometry.isBufferGeometry === true) {\n                        var vertices = geometry.getAttribute('position');\n                        var normals = geometry.getAttribute('normal');\n                        var uvs = geometry.getAttribute('uv');\n                        var colors = geometry.getAttribute('color');\n                        var indices = geometry.getIndex();\n                        if (vertices === undefined) {\n                            return;\n                        }\n                        vertexCount += vertices.count;\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n                        if (normals !== undefined)\n                            includeNormals = true;\n                        if (uvs !== undefined)\n                            includeUVs = true;\n                        if (colors !== undefined)\n                            includeColors = true;\n                    }\n                }\n            });\n            var includeIndices = excludeAttributes.indexOf('index') === -1;\n            includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;\n            includeColors = includeColors && excludeAttributes.indexOf('color') === -1;\n            includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;\n            if (includeIndices && faceCount !== Math.floor(faceCount)) {\n                console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\n                return null;\n            }\n            var indexByteCount = 4;\n            var header = 'ply\\n' + `format ${ options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii' } 1.0\\n` + `element vertex ${ vertexCount }\\n` + 'property float x\\n' + 'property float y\\n' + 'property float z\\n';\n            if (includeNormals === true) {\n                header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\n            }\n            if (includeUVs === true) {\n                header += 'property float s\\n' + 'property float t\\n';\n            }\n            if (includeColors === true) {\n                header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\n            }\n            if (includeIndices === true) {\n                header += `element face ${ faceCount }\\n` + `property list uchar int vertex_index\\n`;\n            }\n            header += 'end_header\\n';\n            var vertex = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            var result = null;\n            if (options.binary === true) {\n                var headerBin = new TextEncoder().encode(header);\n                var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\n                var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n                var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n                new Uint8Array(output.buffer).set(headerBin, 0);\n                var vOffset = headerBin.length;\n                var fOffset = headerBin.length + vertexListLength;\n                var writtenVertices = 0;\n                traverseMeshes(function (mesh, geometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var colors = geometry.getAttribute('color');\n                    var indices = geometry.getIndex();\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                    for (var i = 0, l = vertices.count; i < l; i++) {\n                        vertex.x = vertices.getX(i);\n                        vertex.y = vertices.getY(i);\n                        vertex.z = vertices.getZ(i);\n                        vertex.applyMatrix4(mesh.matrixWorld);\n                        output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                        vOffset += 4;\n                        output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                        vOffset += 4;\n                        output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                        vOffset += 4;\n                        if (includeNormals === true) {\n                            if (normals != null) {\n                                vertex.x = normals.getX(i);\n                                vertex.y = normals.getY(i);\n                                vertex.z = normals.getZ(i);\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                                output.setFloat32(vOffset, vertex.x, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, vertex.y, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, vertex.z, options.littleEndian);\n                                vOffset += 4;\n                            } else {\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                            }\n                        }\n                        if (includeUVs === true) {\n                            if (uvs != null) {\n                                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n                                vOffset += 4;\n                            } else if (includeUVs !== false) {\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                                output.setFloat32(vOffset, 0, options.littleEndian);\n                                vOffset += 4;\n                            }\n                        }\n                        if (includeColors === true) {\n                            if (colors != null) {\n                                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n                                vOffset += 1;\n                                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n                                vOffset += 1;\n                                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n                                vOffset += 1;\n                            } else {\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                                output.setUint8(vOffset, 255);\n                                vOffset += 1;\n                            }\n                        }\n                    }\n                    if (includeIndices === true) {\n                        if (indices !== null) {\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\n                                output.setUint8(fOffset, 3);\n                                fOffset += 1;\n                                output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n                                fOffset += indexByteCount;\n                            }\n                        } else {\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\n                                output.setUint8(fOffset, 3);\n                                fOffset += 1;\n                                output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n                                fOffset += indexByteCount;\n                                output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n                                fOffset += indexByteCount;\n                            }\n                        }\n                    }\n                    writtenVertices += vertices.count;\n                });\n                result = output.buffer;\n            } else {\n                var writtenVertices = 0;\n                var vertexList = '';\n                var faceList = '';\n                traverseMeshes(function (mesh, geometry) {\n                    var vertices = geometry.getAttribute('position');\n                    var normals = geometry.getAttribute('normal');\n                    var uvs = geometry.getAttribute('uv');\n                    var colors = geometry.getAttribute('color');\n                    var indices = geometry.getIndex();\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n                    for (var i = 0, l = vertices.count; i < l; i++) {\n                        vertex.x = vertices.getX(i);\n                        vertex.y = vertices.getY(i);\n                        vertex.z = vertices.getZ(i);\n                        vertex.applyMatrix4(mesh.matrixWorld);\n                        var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n                        if (includeNormals === true) {\n                            if (normals != null) {\n                                vertex.x = normals.getX(i);\n                                vertex.y = normals.getY(i);\n                                vertex.z = normals.getZ(i);\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\n                                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\n                            } else {\n                                line += ' 0 0 0';\n                            }\n                        }\n                        if (includeUVs === true) {\n                            if (uvs != null) {\n                                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\n                            } else if (includeUVs !== false) {\n                                line += ' 0 0';\n                            }\n                        }\n                        if (includeColors === true) {\n                            if (colors != null) {\n                                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\n                            } else {\n                                line += ' 255 255 255';\n                            }\n                        }\n                        vertexList += line + '\\n';\n                    }\n                    if (includeIndices === true) {\n                        if (indices !== null) {\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\n                                faceList += `3 ${ indices.getX(i + 0) + writtenVertices }`;\n                                faceList += ` ${ indices.getX(i + 1) + writtenVertices }`;\n                                faceList += ` ${ indices.getX(i + 2) + writtenVertices }\\n`;\n                            }\n                        } else {\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\n                                faceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\\n`;\n                            }\n                        }\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n                    }\n                    writtenVertices += vertices.count;\n                });\n                result = `${ header }${ vertexList }${ includeIndices ? `${ faceList }\\n` : '\\n' }`;\n            }\n            if (typeof onDone === 'function')\n                requestAnimationFrame(() => onDone(result));\n            return result;\n        }\n    };\n    \n    return PLYExporter;\n});\ndefine('skylark-threejs-ex/exporters/STLExporter',[\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var STLExporter = function () {\n    };\n    STLExporter.prototype = {\n        constructor: STLExporter,\n        parse: function () {\n            var vector = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            return function parse(scene, options) {\n                if (options === undefined)\n                    options = {};\n                var binary = options.binary !== undefined ? options.binary : false;\n                var objects = [];\n                var triangles = 0;\n                scene.traverse(function (object) {\n                    if (object.isMesh) {\n                        var geometry = object.geometry;\n                        if (geometry.isBufferGeometry) {\n                            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n                        }\n                        if (geometry.isGeometry) {\n                            triangles += geometry.faces.length;\n                            objects.push({\n                                geometry: geometry,\n                                matrixWorld: object.matrixWorld\n                            });\n                        }\n                    }\n                });\n                if (binary) {\n                    var offset = 80;\n                    var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n                    var arrayBuffer = new ArrayBuffer(bufferLength);\n                    var output = new DataView(arrayBuffer);\n                    output.setUint32(offset, triangles, true);\n                    offset += 4;\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output.setFloat32(offset, vector.x, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.y, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.z, true);\n                            offset += 4;\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output.setFloat32(offset, vector.x, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.y, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.z, true);\n                                offset += 4;\n                            }\n                            output.setUint16(offset, 0, true);\n                            offset += 2;\n                        }\n                    }\n                    return output;\n                } else {\n                    var output = '';\n                    output += 'solid exported\\n';\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output += '\\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            output += '\\t\\touter loop\\n';\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output += '\\t\\t\\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            }\n                            output += '\\t\\tendloop\\n';\n                            output += '\\tendfacet\\n';\n                        }\n                    }\n                    output += 'endsolid exported\\n';\n                    return output;\n                }\n            };\n        }()\n    };\n    return STLExporter;\n});\ndefine('skylark-threejs-ex/main',[\r\n\t\"skylark-threejs\",\r\n\r\n\t\"./shaders/CopyShader\",\r\n\t\"./shaders/BokehShader\",\r\n\t\"./shaders/SAOShader\",\r\n\t\"./shaders/DepthLimitedBlurShader\",\r\n\t\"./shaders/UnpackDepthRGBAShader\",\r\n\t\"./shaders/ConvolutionShader\",\r\n\t\"./shaders/LuminosityHighPassShader\",\r\n\t\"./shaders/FXAAShader\",\r\n\t\"./shaders/SSAOShader\",\r\n\t\"./shaders/FilmShader\",\r\n\t\"./shaders/DotScreenShader\",\r\n\t\"./shaders/LuminosityShader\",\r\n\t\"./shaders/SobelOperatorShader\",\r\n\t\"./shaders/ColorifyShader\",\r\n\t\"./shaders/ToneMapShader\",\r\n\t\"./shaders/TechnicolorShader\",\r\n\t\"./shaders/HueSaturationShader\",\r\n\r\n\t\"./postprocessing/EffectComposer\",\r\n\t\"./postprocessing/RenderPass\",\r\n\t\"./postprocessing/ShaderPass\",\r\n\t\"./postprocessing/MaskPass\",\r\n\r\n\t\"./curves/NURBSCurve\",\r\n\t\"./curves/NURBSSurface\",\r\n\t\"./curves/NURBSUtils\",\r\n\r\n\t\"./objects/Lensflare\",\r\n\t\"./objects/Reflector\",\r\n\t\"./objects/Refractor\",\r\n\r\n\t\"./loaders/TTFLoader\",\r\n//\t\"./loaders/LoaderSupport\",\r\n\t\"./loaders/3MFLoader\",\r\n\t\"./loaders/AMFLoader\",\r\n\t\"./loaders/AssimpJSONLoader\",\r\n\t\"./loaders/AssimpLoader\",\r\n\t\"./loaders/AWDLoader\",\r\n\t\"./loaders/BabylonLoader\",\r\n\t\"./loaders/ColladaLoader\",\r\n\t\"./loaders/DRACOLoader\",\r\n\t\"./loaders/FBXLoader\",\r\n\t\"./loaders/GCodeLoader\",\r\n\t\"./loaders/GLTFLoader\",\r\n\t\"./loaders/MTLLoader\",\r\n\t\"./loaders/OBJLoader\",\r\n\t\"./loaders/OBJLoader2\",\r\n\t\"./loaders/PCDLoader\",\r\n\t\"./loaders/PLYLoader\",\r\n\t\"./loaders/PRWMLoader\",\r\n\t\"./loaders/STLLoader\",\r\n\t\"./loaders/SVGLoader\",\r\n\t\"./loaders/TDSLoader\",\r\n\t\"./loaders/VRMLLoader\",\r\n\t\"./loaders/VTKLoader\",\r\n\t\"./loaders/XLoader\",\r\n\t\"./loaders/DDSLoader\",\r\n\t\"./loaders/PVRLoader\",\r\n\t\"./loaders/TGALoader\",\r\n\t\"./loaders/KTXLoader\",\r\n\r\n\t\"./modifiers/SimplifyModifier\",\r\n\t\"./modifiers/SubdivisionModifier\",\r\n\r\n\t\"./exporters/ColladaExporter\",\r\n\t\"./exporters/DRACOExporter\",\r\n\t\"./exporters/GLTFExporter\",\r\n\t\"./exporters/MMDExporter\",\r\n\t\"./exporters/OBJExporter\",\r\n\t\"./exporters/PLYExporter\",\r\n\t\"./exporters/STLExporter\"\r\n\r\n],function(THREE){\r\n\treturn THREE;\r\n});\ndefine('skylark-threejs-ex', ['skylark-threejs-ex/main'], function (main) { return main; });\n\n"]}