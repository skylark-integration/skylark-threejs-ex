/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../threex"],function(e,r){"use strict";var t=function(r,t){e.Mesh.call(this,r);var o=this,i=void 0!==(t=t||{}).textureWidth?t.textureWidth:512,a=void 0!==t.textureHeight?t.textureHeight:512,n=void 0!==t.clipBias?t.clipBias:0,l=void 0!==t.alpha?t.alpha:1,s=void 0!==t.time?t.time:0,c=void 0!==t.waterNormals?t.waterNormals:null,u=void 0!==t.sunDirection?t.sunDirection:new e.Vector3(.70707,.70707,0),m=new e.Color(void 0!==t.sunColor?t.sunColor:16777215),d=new e.Color(void 0!==t.waterColor?t.waterColor:8355711),v=void 0!==t.eye?t.eye:new e.Vector3(0,0,0),f=void 0!==t.distortionScale?t.distortionScale:20,p=void 0!==t.side?t.side:e.FrontSide,x=void 0!==t.fog&&t.fog,g=new e.Plane,w=new e.Vector3,h=new e.Vector3,y=new e.Vector3,C=new e.Matrix4,M=new e.Vector3(0,0,-1),S=new e.Vector4,_=new e.Vector3,b=new e.Vector3,D=new e.Vector4,P=new e.Matrix4,L=new e.PerspectiveCamera,V={minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBFormat,stencilBuffer:!1},z=new e.WebGLRenderTarget(i,a,V);e.MathUtils.isPowerOfTwo(i)&&e.MathUtils.isPowerOfTwo(a)||(z.texture.generateMipmaps=!1);var N={uniforms:e.UniformsUtils.merge([e.UniformsLib.fog,e.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new e.Matrix4},sunColor:{value:new e.Color(8355711)},sunDirection:{value:new e.Vector3(.70707,.70707,0)},eye:{value:new e.Vector3},waterColor:{value:new e.Color(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","#include <common>","#include <fog_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;","#include <logdepthbuf_vertex>","#include <fog_vertex>","#include <shadowmap_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}","#include <common>","#include <packing>","#include <bsdfs>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <lights_pars_begin>","#include <shadowmap_pars_fragment>","#include <shadowmask_pars_fragment>","void main() {","#include <logdepthbuf_fragment>","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );","#include <tonemapping_fragment>","#include <fog_fragment>","}"].join("\n")},W=new e.ShaderMaterial({fragmentShader:N.fragmentShader,vertexShader:N.vertexShader,uniforms:e.UniformsUtils.clone(N.uniforms),lights:!0,side:p,fog:x});W.uniforms.mirrorSampler.value=z.texture,W.uniforms.textureMatrix.value=P,W.uniforms.alpha.value=l,W.uniforms.time.value=s,W.uniforms.normalSampler.value=c,W.uniforms.sunColor.value=m,W.uniforms.waterColor.value=d,W.uniforms.sunDirection.value=u,W.uniforms.distortionScale.value=f,W.uniforms.eye.value=v,o.material=W,o.onBeforeRender=function(e,r,t){if(h.setFromMatrixPosition(o.matrixWorld),y.setFromMatrixPosition(t.matrixWorld),C.extractRotation(o.matrixWorld),w.set(0,0,1),w.applyMatrix4(C),_.subVectors(h,y),!(_.dot(w)>0)){_.reflect(w).negate(),_.add(h),C.extractRotation(t.matrixWorld),M.set(0,0,-1),M.applyMatrix4(C),M.add(y),b.subVectors(h,M),b.reflect(w).negate(),b.add(h),L.position.copy(_),L.up.set(0,1,0),L.up.applyMatrix4(C),L.up.reflect(w),L.lookAt(b),L.far=t.far,L.updateMatrixWorld(),L.projectionMatrix.copy(t.projectionMatrix),P.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),P.multiply(L.projectionMatrix),P.multiply(L.matrixWorldInverse),g.setFromNormalAndCoplanarPoint(w,h),g.applyMatrix4(L.matrixWorldInverse),S.set(g.normal.x,g.normal.y,g.normal.z,g.constant);var i=L.projectionMatrix;D.x=(Math.sign(S.x)+i.elements[8])/i.elements[0],D.y=(Math.sign(S.y)+i.elements[9])/i.elements[5],D.z=-1,D.w=(1+i.elements[10])/i.elements[14],S.multiplyScalar(2/S.dot(D)),i.elements[2]=S.x,i.elements[6]=S.y,i.elements[10]=S.z+1-n,i.elements[14]=S.w,v.setFromMatrixPosition(t.matrixWorld);var a=e.getRenderTarget(),l=e.xr.enabled,s=e.shadowMap.autoUpdate;o.visible=!1,e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(z),!1===e.autoClear&&e.clear(),e.render(r,L),o.visible=!0,e.xr.enabled=l,e.shadowMap.autoUpdate=s,e.setRenderTarget(a);var c=t.viewport;void 0!==c&&e.state.viewport(c)}}};return(t.prototype=Object.create(e.Mesh.prototype)).constructor=t,r.objects.Water=t});
//# sourceMappingURL=../sourcemaps/objects/Water.js.map
