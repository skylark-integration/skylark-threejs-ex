/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(e){var i,t,r;return e.Lensflare=function(){e.Mesh.call(this,e.Lensflare.Geometry,new e.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;var i=new e.Vector3,t=new e.Vector3,r=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);r.minFilter=e.NearestFilter,r.magFilter=e.NearestFilter,r.wrapS=e.ClampToEdgeWrapping,r.wrapT=e.ClampToEdgeWrapping;var n=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);n.minFilter=e.NearestFilter,n.magFilter=e.NearestFilter,n.wrapS=e.ClampToEdgeWrapping,n.wrapT=e.ClampToEdgeWrapping;var o=e.Lensflare.Geometry,a=new e.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","void main() {","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","void main() {","\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!1}),s=new e.RawShaderMaterial({uniforms:{map:{value:r},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","\tvUV = uv;","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","varying vec2 vUV;","void main() {","\tgl_FragColor = texture2D( map, vUV );","}"].join("\n"),depthTest:!1,depthWrite:!1,transparent:!1}),l=new e.Mesh(o,a),c=[],u=e.LensflareElement.Shader,v=new e.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:n},color:{value:new e.Color(16777215)},scale:{value:new e.Vector2},screenPosition:{value:new e.Vector3}},vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:e.AdditiveBlending,transparent:!0,depthWrite:!1}),p=new e.Mesh(o,v);this.addElement=function(e){c.push(e)};var f=new e.Vector2,m=new e.Vector2,d=new e.Box2,y=new e.Vector4;this.onBeforeRender=function(e,u,h){e.getCurrentViewport(y);var x=y.w/y.z,g=y.z/2,w=y.w/2,b=16/y.w;if(f.set(b*x,b),d.min.set(y.x,y.y),d.max.set(y.x+(y.z-16),y.y+(y.w-16)),t.setFromMatrixPosition(this.matrixWorld),t.applyMatrix4(h.matrixWorldInverse),!(t.z>0)&&(i.copy(t).applyMatrix4(h.projectionMatrix),m.x=y.x+i.x*g+g-8,m.y=y.y+i.y*w+w-8,d.containsPoint(m))){e.copyFramebufferToTexture(m,r),(F=a.uniforms).scale.value=f,F.screenPosition.value=i,e.renderBufferDirect(h,null,o,a,l,null),e.copyFramebufferToTexture(m,n),(F=s.uniforms).scale.value=f,F.screenPosition.value=i,e.renderBufferDirect(h,null,o,s,l,null);for(var M=2*-i.x,P=2*-i.y,V=0,D=c.length;V<D;V++){var F,S=c[V];(F=v.uniforms).color.value.copy(S.color),F.map.value=S.texture,F.screenPosition.value.x=i.x+M*S.distance,F.screenPosition.value.y=i.y+P*S.distance;b=S.size/y.w,x=y.w/y.z;F.scale.value.set(b*x,b),v.uniformsNeedUpdate=!0,e.renderBufferDirect(h,null,o,v,p,null)}}},this.dispose=function(){a.dispose(),s.dispose(),v.dispose(),r.dispose(),n.dispose();for(var e=0,i=c.length;e<i;e++)c[e].texture.dispose()}},e.Lensflare.prototype=Object.create(e.Mesh.prototype),e.Lensflare.prototype.constructor=e.Lensflare,e.Lensflare.prototype.isLensflare=!0,e.LensflareElement=function(i,t,r,n){this.texture=i,this.size=t||1,this.distance=r||0,this.color=n||new e.Color(16777215)},e.LensflareElement.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform sampler2D occlusionMap;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","\tvUV = uv;","\tvec2 pos = position.xy;","\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","\tvVisibility =        visibility.r / 9.0;","\tvVisibility *= 1.0 - visibility.g / 9.0;","\tvVisibility *=       visibility.b / 9.0;","\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","\tvec4 texture = texture2D( map, vUV );","\ttexture.a *= vVisibility;","\tgl_FragColor = texture;","\tgl_FragColor.rgb *= color;","}"].join("\n")},e.Lensflare.Geometry=(i=new e.BufferGeometry,t=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),r=new e.InterleavedBuffer(t,5),i.setIndex([0,1,2,0,2,3]),i.setAttribute("position",new e.InterleavedBufferAttribute(r,3,0,!1)),i.setAttribute("uv",new e.InterleavedBufferAttribute(r,2,3,!1)),i),e.Lensflare});
//# sourceMappingURL=../sourcemaps/objects/Lensflare.js.map
