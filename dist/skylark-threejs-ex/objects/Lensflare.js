/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../threex"],function(e,r){"use strict";var t,n,i,a=function(){e.Mesh.call(this,a.Geometry,new e.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;var r=new e.Vector3,t=new e.Vector3,n=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);n.minFilter=e.NearestFilter,n.magFilter=e.NearestFilter,n.wrapS=e.ClampToEdgeWrapping,n.wrapT=e.ClampToEdgeWrapping;var i=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);i.minFilter=e.NearestFilter,i.magFilter=e.NearestFilter,i.wrapS=e.ClampToEdgeWrapping,i.wrapT=e.ClampToEdgeWrapping;var o=a.Geometry,s=new e.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","void main() {","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","void main() {","\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!1}),l=new e.RawShaderMaterial({uniforms:{map:{value:n},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","\tvUV = uv;","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","varying vec2 vUV;","void main() {","\tgl_FragColor = texture2D( map, vUV );","}"].join("\n"),depthTest:!1,depthWrite:!1,transparent:!1}),u=new e.Mesh(o,s),c=[],p=LensflareElement.Shader,v=new e.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:i},color:{value:new e.Color(16777215)},scale:{value:new e.Vector2},screenPosition:{value:new e.Vector3}},vertexShader:p.vertexShader,fragmentShader:p.fragmentShader,blending:e.AdditiveBlending,transparent:!0,depthWrite:!1}),d=new e.Mesh(o,v);this.addElement=function(e){c.push(e)};var f=new e.Vector2,m=new e.Vector2,h=new e.Box2,w=new e.Vector4;this.onBeforeRender=function(e,a,p){e.getCurrentViewport(w);var y=w.w/w.z,x=w.z/2,g=w.w/2,P=16/w.w;if(f.set(P*y,P),h.min.set(w.x,w.y),h.max.set(w.x+(w.z-16),w.y+(w.w-16)),t.setFromMatrixPosition(this.matrixWorld),t.applyMatrix4(p.matrixWorldInverse),!(t.z>0)&&(r.copy(t).applyMatrix4(p.projectionMatrix),m.x=w.x+r.x*x+x-8,m.y=w.y+r.y*g+g-8,h.containsPoint(m))){e.copyFramebufferToTexture(m,n),(B=s.uniforms).scale.value=f,B.screenPosition.value=r,e.renderBufferDirect(p,null,o,s,u,null),e.copyFramebufferToTexture(m,i),(B=l.uniforms).scale.value=f,B.screenPosition.value=r,e.renderBufferDirect(p,null,o,l,u,null);for(var F=2*-r.x,M=2*-r.y,S=0,T=c.length;S<T;S++){var B,b=c[S];(B=v.uniforms).color.value.copy(b.color),B.map.value=b.texture,B.screenPosition.value.x=r.x+F*b.distance,B.screenPosition.value.y=r.y+M*b.distance;P=b.size/w.w,y=w.w/w.z;B.scale.value.set(P*y,P),v.uniformsNeedUpdate=!0,e.renderBufferDirect(p,null,o,v,d,null)}}},this.dispose=function(){s.dispose(),l.dispose(),v.dispose(),n.dispose(),i.dispose();for(var e=0,r=c.length;e<r;e++)c[e].texture.dispose()}};return a.prototype=Object.create(e.Mesh.prototype),a.prototype.constructor=a,a.prototype.isLensflare=!0,a.Geometry=(t=new e.BufferGeometry,n=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),i=new e.InterleavedBuffer(n,5),t.setIndex([0,1,2,0,2,3]),t.setAttribute("position",new e.InterleavedBufferAttribute(i,3,0,!1)),t.setAttribute("uv",new e.InterleavedBufferAttribute(i,2,3,!1)),t),r.objects.Lensflare=a});
//# sourceMappingURL=../sourcemaps/objects/Lensflare.js.map
