/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../threex","./LensflareElement"],function(e,r,t){"use strict";var n,i,a,o=function(){e.Mesh.call(this,o.Geometry,new e.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;var r=new e.Vector3,n=new e.Vector3,i=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);i.minFilter=e.NearestFilter,i.magFilter=e.NearestFilter,i.wrapS=e.ClampToEdgeWrapping,i.wrapT=e.ClampToEdgeWrapping;var a=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);a.minFilter=e.NearestFilter,a.magFilter=e.NearestFilter,a.wrapS=e.ClampToEdgeWrapping,a.wrapT=e.ClampToEdgeWrapping;var s=o.Geometry,l=new e.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","void main() {","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","void main() {","\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!1}),u=new e.RawShaderMaterial({uniforms:{map:{value:i},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","\tvUV = uv;","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","varying vec2 vUV;","void main() {","\tgl_FragColor = texture2D( map, vUV );","}"].join("\n"),depthTest:!1,depthWrite:!1,transparent:!1}),c=new e.Mesh(s,l),p=[],v=t.Shader,d=new e.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:a},color:{value:new e.Color(16777215)},scale:{value:new e.Vector2},screenPosition:{value:new e.Vector3}},vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,blending:e.AdditiveBlending,transparent:!0,depthWrite:!1}),f=new e.Mesh(s,d);this.addElement=function(e){p.push(e)};var m=new e.Vector2,h=new e.Vector2,w=new e.Box2,y=new e.Vector4;this.onBeforeRender=function(e,t,o){e.getCurrentViewport(y);var v=y.w/y.z,x=y.z/2,g=y.w/2,P=16/y.w;if(m.set(P*v,P),w.min.set(y.x,y.y),w.max.set(y.x+(y.z-16),y.y+(y.w-16)),n.setFromMatrixPosition(this.matrixWorld),n.applyMatrix4(o.matrixWorldInverse),!(n.z>0)&&(r.copy(n).applyMatrix4(o.projectionMatrix),h.x=y.x+r.x*x+x-8,h.y=y.y+r.y*g+g-8,w.containsPoint(h))){e.copyFramebufferToTexture(h,i),(B=l.uniforms).scale.value=m,B.screenPosition.value=r,e.renderBufferDirect(o,null,s,l,c,null),e.copyFramebufferToTexture(h,a),(B=u.uniforms).scale.value=m,B.screenPosition.value=r,e.renderBufferDirect(o,null,s,u,c,null);for(var F=2*-r.x,M=2*-r.y,S=0,T=p.length;S<T;S++){var B,b=p[S];(B=d.uniforms).color.value.copy(b.color),B.map.value=b.texture,B.screenPosition.value.x=r.x+F*b.distance,B.screenPosition.value.y=r.y+M*b.distance;P=b.size/y.w,v=y.w/y.z;B.scale.value.set(P*v,P),d.uniformsNeedUpdate=!0,e.renderBufferDirect(o,null,s,d,f,null)}}},this.dispose=function(){l.dispose(),u.dispose(),d.dispose(),i.dispose(),a.dispose();for(var e=0,r=p.length;e<r;e++)p[e].texture.dispose()}};return o.prototype=Object.create(e.Mesh.prototype),o.prototype.constructor=o,o.prototype.isLensflare=!0,o.Geometry=(n=new e.BufferGeometry,i=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),a=new e.InterleavedBuffer(i,5),n.setIndex([0,1,2,0,2,3]),n.setAttribute("position",new e.InterleavedBufferAttribute(a,3,0,!1)),n.setAttribute("uv",new e.InterleavedBufferAttribute(a,2,3,!1)),n),r.objects.Lensflare=o});
//# sourceMappingURL=../sourcemaps/objects/Lensflare.js.map
