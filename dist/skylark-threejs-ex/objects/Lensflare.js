/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(e){"use strict";var r=function(){e.Mesh.call(this,r.Geometry,new e.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;var t=new e.Vector3,n=new e.Vector3,i=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);i.minFilter=e.NearestFilter,i.magFilter=e.NearestFilter,i.wrapS=e.ClampToEdgeWrapping,i.wrapT=e.ClampToEdgeWrapping;var a=new e.DataTexture(new Uint8Array(768),16,16,e.RGBFormat);a.minFilter=e.NearestFilter,a.magFilter=e.NearestFilter,a.wrapS=e.ClampToEdgeWrapping,a.wrapT=e.ClampToEdgeWrapping;var o=r.Geometry,s=new e.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","void main() {","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","void main() {","\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );","}"].join("\n"),depthTest:!0,depthWrite:!1,transparent:!1}),l=new e.RawShaderMaterial({uniforms:{map:{value:i},scale:{value:null},screenPosition:{value:null}},vertexShader:["precision highp float;","uniform vec3 screenPosition;","uniform vec2 scale;","attribute vec3 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","\tvUV = uv;","\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","uniform sampler2D map;","varying vec2 vUV;","void main() {","\tgl_FragColor = texture2D( map, vUV );","}"].join("\n"),depthTest:!1,depthWrite:!1,transparent:!1}),c=new e.Mesh(o,s),p=[],u=LensflareElement.Shader,v=new e.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:a},color:{value:new e.Color(16777215)},scale:{value:new e.Vector2},screenPosition:{value:new e.Vector3}},vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:e.AdditiveBlending,transparent:!0,depthWrite:!1}),d=new e.Mesh(o,v);this.addElement=function(e){p.push(e)};var m=new e.Vector2,f=new e.Vector2,h=new e.Box2,w=new e.Vector4;this.onBeforeRender=function(e,r,u){e.getCurrentViewport(w);var g=w.w/w.z,x=w.z/2,y=w.w/2,P=16/w.w;if(m.set(P*g,P),h.min.set(w.x,w.y),h.max.set(w.x+(w.z-16),w.y+(w.w-16)),n.setFromMatrixPosition(this.matrixWorld),n.applyMatrix4(u.matrixWorldInverse),!(n.z>0)&&(t.copy(n).applyMatrix4(u.projectionMatrix),f.x=w.x+t.x*x+x-8,f.y=w.y+t.y*y+y-8,h.containsPoint(f))){e.copyFramebufferToTexture(f,i),(V=s.uniforms).scale.value=m,V.screenPosition.value=t,e.renderBufferDirect(u,null,o,s,c,null),e.copyFramebufferToTexture(f,a),(V=l.uniforms).scale.value=m,V.screenPosition.value=t,e.renderBufferDirect(u,null,o,l,c,null);for(var F=2*-t.x,M=2*-t.y,S=0,T=p.length;S<T;S++){var V,B=p[S];(V=v.uniforms).color.value.copy(B.color),V.map.value=B.texture,V.screenPosition.value.x=t.x+F*B.distance,V.screenPosition.value.y=t.y+M*B.distance;P=B.size/w.w,g=w.w/w.z;V.scale.value.set(P*g,P),v.uniformsNeedUpdate=!0,e.renderBufferDirect(u,null,o,v,d,null)}}},this.dispose=function(){s.dispose(),l.dispose(),v.dispose(),i.dispose(),a.dispose();for(var e=0,r=p.length;e<r;e++)p[e].texture.dispose()}};return r.prototype=Object.create(e.Mesh.prototype),r.prototype.constructor=r,r.prototype.isLensflare=!0,r});
//# sourceMappingURL=../sourcemaps/objects/Lensflare.js.map
