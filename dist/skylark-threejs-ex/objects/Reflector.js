/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(e){return e.Reflector=function(r,t){e.Mesh.call(this,r),this.type="Reflector";var a=this,o=void 0!==(t=t||{}).color?new e.Color(t.color):new e.Color(8355711),n=t.textureWidth||512,i=t.textureHeight||512,l=t.clipBias||0,s=t.shader||e.Reflector.ReflectorShader,c=void 0!==t.recursion?t.recursion:0,d=void 0!==t.encoding?t.encoding:e.LinearEncoding,u=new e.Plane,v=new e.Vector3,f=new e.Vector3,m=new e.Vector3,p=new e.Matrix4,x=new e.Vector3(0,0,-1),b=new e.Vector4,M=new e.Vector3,g=new e.Vector3,h=new e.Vector4,w=new e.Matrix4,y=new e.PerspectiveCamera,R={minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBFormat,stencilBuffer:!1,encoding:d},U=new e.WebGLRenderTarget(n,i,R);e.MathUtils.isPowerOfTwo(n)&&e.MathUtils.isPowerOfTwo(i)||(U.texture.generateMipmaps=!1);var V=new e.ShaderMaterial({uniforms:e.UniformsUtils.clone(s.uniforms),fragmentShader:s.fragmentShader,vertexShader:s.vertexShader});V.uniforms.tDiffuse.value=U.texture,V.uniforms.color.value=o,V.uniforms.textureMatrix.value=w,this.material=V,this.onBeforeRender=function(e,r,t){if("recursion"in t.userData){if(t.userData.recursion===c)return;t.userData.recursion++}if(f.setFromMatrixPosition(a.matrixWorld),m.setFromMatrixPosition(t.matrixWorld),p.extractRotation(a.matrixWorld),v.set(0,0,1),v.applyMatrix4(p),M.subVectors(f,m),!(M.dot(v)>0)){M.reflect(v).negate(),M.add(f),p.extractRotation(t.matrixWorld),x.set(0,0,-1),x.applyMatrix4(p),x.add(m),g.subVectors(f,x),g.reflect(v).negate(),g.add(f),y.position.copy(M),y.up.set(0,1,0),y.up.applyMatrix4(p),y.up.reflect(v),y.lookAt(g),y.far=t.far,y.updateMatrixWorld(),y.projectionMatrix.copy(t.projectionMatrix),y.userData.recursion=0,w.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),w.multiply(y.projectionMatrix),w.multiply(y.matrixWorldInverse),w.multiply(a.matrixWorld),u.setFromNormalAndCoplanarPoint(v,f),u.applyMatrix4(y.matrixWorldInverse),b.set(u.normal.x,u.normal.y,u.normal.z,u.constant);var o=y.projectionMatrix;h.x=(Math.sign(b.x)+o.elements[8])/o.elements[0],h.y=(Math.sign(b.y)+o.elements[9])/o.elements[5],h.z=-1,h.w=(1+o.elements[10])/o.elements[14],b.multiplyScalar(2/b.dot(h)),o.elements[2]=b.x,o.elements[6]=b.y,o.elements[10]=b.z+1-l,o.elements[14]=b.w,a.visible=!1;var n=e.getRenderTarget(),i=e.xr.enabled,s=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(U),!1===e.autoClear&&e.clear(),e.render(r,y),e.xr.enabled=i,e.shadowMap.autoUpdate=s,e.setRenderTarget(n);var d=t.viewport;void 0!==d&&e.state.viewport(d),a.visible=!0}},this.getRenderTarget=function(){return U}},e.Reflector.prototype=Object.create(e.Mesh.prototype),e.Reflector.prototype.constructor=e.Reflector,e.Reflector.ReflectorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")},e.Reflector});
//# sourceMappingURL=../sourcemaps/objects/Reflector.js.map
