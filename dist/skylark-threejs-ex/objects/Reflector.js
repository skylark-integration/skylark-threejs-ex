/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(e){"use strict";var r=function(t,a){e.Mesh.call(this,t),this.type="Reflector";var o=this,n=void 0!==(a=a||{}).color?new e.Color(a.color):new e.Color(8355711),i=a.textureWidth||512,l=a.textureHeight||512,s=a.clipBias||0,d=a.shader||r.ReflectorShader,c=void 0!==a.recursion?a.recursion:0,u=void 0!==a.encoding?a.encoding:e.LinearEncoding,v=new e.Plane,m=new e.Vector3,p=new e.Vector3,x=new e.Vector3,f=new e.Matrix4,b=new e.Vector3(0,0,-1),M=new e.Vector4,g=new e.Vector3,h=new e.Vector3,w=new e.Vector4,y=new e.Matrix4,R=new e.PerspectiveCamera,U={minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBFormat,stencilBuffer:!1,encoding:u},V=new e.WebGLRenderTarget(i,l,U);e.MathUtils.isPowerOfTwo(i)&&e.MathUtils.isPowerOfTwo(l)||(V.texture.generateMipmaps=!1);var j=new e.ShaderMaterial({uniforms:e.UniformsUtils.clone(d.uniforms),fragmentShader:d.fragmentShader,vertexShader:d.vertexShader});j.uniforms.tDiffuse.value=V.texture,j.uniforms.color.value=n,j.uniforms.textureMatrix.value=y,this.material=j,this.onBeforeRender=function(e,r,t){if("recursion"in t.userData){if(t.userData.recursion===c)return;t.userData.recursion++}if(p.setFromMatrixPosition(o.matrixWorld),x.setFromMatrixPosition(t.matrixWorld),f.extractRotation(o.matrixWorld),m.set(0,0,1),m.applyMatrix4(f),g.subVectors(p,x),!(g.dot(m)>0)){g.reflect(m).negate(),g.add(p),f.extractRotation(t.matrixWorld),b.set(0,0,-1),b.applyMatrix4(f),b.add(x),h.subVectors(p,b),h.reflect(m).negate(),h.add(p),R.position.copy(g),R.up.set(0,1,0),R.up.applyMatrix4(f),R.up.reflect(m),R.lookAt(h),R.far=t.far,R.updateMatrixWorld(),R.projectionMatrix.copy(t.projectionMatrix),R.userData.recursion=0,y.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),y.multiply(R.projectionMatrix),y.multiply(R.matrixWorldInverse),y.multiply(o.matrixWorld),v.setFromNormalAndCoplanarPoint(m,p),v.applyMatrix4(R.matrixWorldInverse),M.set(v.normal.x,v.normal.y,v.normal.z,v.constant);var a=R.projectionMatrix;w.x=(Math.sign(M.x)+a.elements[8])/a.elements[0],w.y=(Math.sign(M.y)+a.elements[9])/a.elements[5],w.z=-1,w.w=(1+a.elements[10])/a.elements[14],M.multiplyScalar(2/M.dot(w)),a.elements[2]=M.x,a.elements[6]=M.y,a.elements[10]=M.z+1-s,a.elements[14]=M.w,o.visible=!1;var n=e.getRenderTarget(),i=e.xr.enabled,l=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(V),!1===e.autoClear&&e.clear(),e.render(r,R),e.xr.enabled=i,e.shadowMap.autoUpdate=l,e.setRenderTarget(n);var d=t.viewport;void 0!==d&&e.state.viewport(d),o.visible=!0}},this.getRenderTarget=function(){return V}};return r.prototype=Object.create(e.Mesh.prototype),r.prototype.constructor=r,r.ReflectorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")},r});
//# sourceMappingURL=../sourcemaps/objects/Reflector.js.map
