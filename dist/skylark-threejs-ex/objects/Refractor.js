/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(e){"use strict";var r=function(t,a){e.Mesh.call(this,t),this.type="Refractor";var n=this,o=void 0!==(a=a||{}).color?new e.Color(a.color):new e.Color(8355711),i=a.textureWidth||512,l=a.textureHeight||512,s=a.clipBias||0,c=a.shader||r.RefractorShader,d=void 0!==a.encoding?a.encoding:e.LinearEncoding,u=new e.PerspectiveCamera;u.matrixAutoUpdate=!1,u.userData.refractor=!0;var m=new e.Plane,v=new e.Matrix4,f={minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBFormat,stencilBuffer:!1,encoding:d},x=new e.WebGLRenderTarget(i,l,f);e.MathUtils.isPowerOfTwo(i)&&e.MathUtils.isPowerOfTwo(l)||(x.texture.generateMipmaps=!1),this.material=new e.ShaderMaterial({uniforms:e.UniformsUtils.clone(c.uniforms),vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,transparent:!0}),this.material.uniforms.color.value=o,this.material.uniforms.tDiffuse.value=x.texture,this.material.uniforms.textureMatrix.value=v;var p,b,h,w,g,y,M,W,U=(p=new e.Vector3,b=new e.Vector3,h=new e.Matrix4,w=new e.Vector3,g=new e.Vector3,function(e){return p.setFromMatrixPosition(n.matrixWorld),b.setFromMatrixPosition(e.matrixWorld),w.subVectors(p,b),h.extractRotation(n.matrixWorld),g.set(0,0,1),g.applyMatrix4(h),w.dot(g)<0}),R=function(){var r=new e.Vector3,t=new e.Vector3,a=new e.Quaternion,o=new e.Vector3;return function(){n.matrixWorld.decompose(t,a,o),r.set(0,0,1).applyQuaternion(a).normalize(),r.negate(),m.setFromNormalAndCoplanarPoint(r,t)}}(),V=(y=new e.Plane,M=new e.Vector4,W=new e.Vector4,function(e){u.matrixWorld.copy(e.matrixWorld),u.matrixWorldInverse.getInverse(u.matrixWorld),u.projectionMatrix.copy(e.projectionMatrix),u.far=e.far,y.copy(m),y.applyMatrix4(u.matrixWorldInverse),M.set(y.normal.x,y.normal.y,y.normal.z,y.constant);var r=u.projectionMatrix;W.x=(Math.sign(M.x)+r.elements[8])/r.elements[0],W.y=(Math.sign(M.y)+r.elements[9])/r.elements[5],W.z=-1,W.w=(1+r.elements[10])/r.elements[14],M.multiplyScalar(2/M.dot(W)),r.elements[2]=M.x,r.elements[6]=M.y,r.elements[10]=M.z+1-s,r.elements[14]=M.w});this.onBeforeRender=function(e,r,t){!0!==t.userData.refractor&&!0!=!U(t)&&(R(),function(e){v.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),v.multiply(e.projectionMatrix),v.multiply(e.matrixWorldInverse),v.multiply(n.matrixWorld)}(t),V(t),function(e,r,t){n.visible=!1;var a=e.getRenderTarget(),o=e.xr.enabled,i=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(x),!1===e.autoClear&&e.clear(),e.render(r,u),e.xr.enabled=o,e.shadowMap.autoUpdate=i,e.setRenderTarget(a);var l=t.viewport;void 0!==l&&e.state.viewport(l),n.visible=!0}(e,r,t))},this.getRenderTarget=function(){return x}};return r.prototype=Object.create(e.Mesh.prototype),r.prototype.constructor=r,r.RefractorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:["uniform mat4 textureMatrix;","varying vec4 vUv;","void main() {","\tvUv = textureMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform vec3 color;","uniform sampler2D tDiffuse;","varying vec4 vUv;","float blendOverlay( float base, float blend ) {","\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );","}","vec3 blendOverlay( vec3 base, vec3 blend ) {","\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );","}","void main() {","\tvec4 base = texture2DProj( tDiffuse, vUv );","\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );","}"].join("\n")},r});
//# sourceMappingURL=../sourcemaps/objects/Refractor.js.map
