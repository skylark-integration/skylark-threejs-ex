/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","./Reflector","./Refractor"],function(e,t,r){return e.Water=function(t,r){e.Mesh.call(this,t),this.type="Water";var o=this,a=void 0!==(r=r||{}).color?new e.Color(r.color):new e.Color(16777215),i=r.textureWidth||512,l=r.textureHeight||512,n=r.clipBias||0,f=r.flowDirection||new e.Vector2(1,0),c=r.flowSpeed||.03,v=r.reflectivity||.02,u=r.scale||1,m=r.shader||e.Water.WaterShader,p=void 0!==r.encoding?r.encoding:e.LinearEncoding,s=new e.TextureLoader,d=r.flowMap||void 0,g=r.normalMap0||s.load("textures/water/Water_1_M_Normal.jpg"),x=r.normalMap1||s.load("textures/water/Water_2_M_Normal.jpg"),y=.15,h=.5*y,w=new e.Matrix4,M=new e.Clock;if(void 0!==e.Reflector)if(void 0!==e.Refractor){var R=new e.Reflector(t,{textureWidth:i,textureHeight:l,clipBias:n,encoding:p}),W=new e.Refractor(t,{textureWidth:i,textureHeight:l,clipBias:n,encoding:p});R.matrixAutoUpdate=!1,W.matrixAutoUpdate=!1,this.material=new e.ShaderMaterial({uniforms:e.UniformsUtils.merge([e.UniformsLib.fog,m.uniforms]),vertexShader:m.vertexShader,fragmentShader:m.fragmentShader,transparent:!0,fog:!0}),void 0!==d?(this.material.defines.USE_FLOWMAP="",this.material.uniforms.tFlowMap={type:"t",value:d}):this.material.uniforms.flowDirection={type:"v2",value:f},g.wrapS=g.wrapT=e.RepeatWrapping,x.wrapS=x.wrapT=e.RepeatWrapping,this.material.uniforms.tReflectionMap.value=R.getRenderTarget().texture,this.material.uniforms.tRefractionMap.value=W.getRenderTarget().texture,this.material.uniforms.tNormalMap0.value=g,this.material.uniforms.tNormalMap1.value=x,this.material.uniforms.color.value=a,this.material.uniforms.reflectivity.value=v,this.material.uniforms.textureMatrix.value=w,this.material.uniforms.config.value.x=0,this.material.uniforms.config.value.y=h,this.material.uniforms.config.value.z=h,this.material.uniforms.config.value.w=u,this.onBeforeRender=function(e,t,r){var a,i;!function(e){w.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),w.multiply(e.projectionMatrix),w.multiply(e.matrixWorldInverse),w.multiply(o.matrixWorld)}(r),a=M.getDelta(),(i=o.material.uniforms.config).value.x+=c*a,i.value.y=i.value.x+h,i.value.x>=y?(i.value.x=0,i.value.y=h):i.value.y>=y&&(i.value.y=i.value.y-y),o.visible=!1,R.matrixWorld.copy(o.matrixWorld),W.matrixWorld.copy(o.matrixWorld),R.onBeforeRender(e,t,r),W.onBeforeRender(e,t,r),o.visible=!0}}else console.error("THREE.Water: Required component THREE.Refractor not found.");else console.error("THREE.Water: Required component THREE.Reflector not found.")},e.Water.prototype=Object.create(e.Mesh.prototype),e.Water.prototype.constructor=e.Water,e.Water.WaterShader={uniforms:{color:{type:"c",value:null},reflectivity:{type:"f",value:0},tReflectionMap:{type:"t",value:null},tRefractionMap:{type:"t",value:null},tNormalMap0:{type:"t",value:null},tNormalMap1:{type:"t",value:null},textureMatrix:{type:"m4",value:null},config:{type:"v4",value:new e.Vector4}},vertexShader:["#include <common>","#include <fog_pars_vertex>","#include <logdepthbuf_pars_vertex>","uniform mat4 textureMatrix;","varying vec4 vCoord;","varying vec2 vUv;","varying vec3 vToEye;","void main() {","\tvUv = uv;","\tvCoord = textureMatrix * vec4( position, 1.0 );","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvToEye = cameraPosition - worldPosition.xyz;","\tvec4 mvPosition =  viewMatrix * worldPosition;","\tgl_Position = projectionMatrix * mvPosition;","\t#include <logdepthbuf_vertex>","\t#include <fog_vertex>","}"].join("\n"),fragmentShader:["#include <common>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","uniform sampler2D tReflectionMap;","uniform sampler2D tRefractionMap;","uniform sampler2D tNormalMap0;","uniform sampler2D tNormalMap1;","#ifdef USE_FLOWMAP","\tuniform sampler2D tFlowMap;","#else","\tuniform vec2 flowDirection;","#endif","uniform vec3 color;","uniform float reflectivity;","uniform vec4 config;","varying vec4 vCoord;","varying vec2 vUv;","varying vec3 vToEye;","void main() {","\t#include <logdepthbuf_fragment>","\tfloat flowMapOffset0 = config.x;","\tfloat flowMapOffset1 = config.y;","\tfloat halfCycle = config.z;","\tfloat scale = config.w;","\tvec3 toEye = normalize( vToEye );","\tvec2 flow;","\t#ifdef USE_FLOWMAP","\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;","\t#else","\t\tflow = flowDirection;","\t#endif","\tflow.x *= - 1.0;","\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );","\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );","\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;","\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );","\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );","\tfloat theta = max( dot( toEye, normal ), 0.0 );","\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 coord = vCoord.xyz / vCoord.w;","\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;","\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );","\tvec4 refractColor = texture2D( tRefractionMap, uv );","\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );","\t#include <tonemapping_fragment>","\t#include <encodings_fragment>","\t#include <fog_fragment>","}"].join("\n")},e.Water});
//# sourceMappingURL=../sourcemaps/objects/Water2.js.map
