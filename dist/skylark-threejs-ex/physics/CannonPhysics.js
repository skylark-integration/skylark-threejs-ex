/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../threex"],function(e,n){"use strict";function t(e,n,t,r){var a=n.x,s=n.y,i=n.z,o=n.w,c=a+a,N=s+s,h=i+i,p=a*c,u=a*N,d=a*h,v=s*N,y=s*h,f=i*h,w=o*c,M=o*N,l=o*h;t[r+0]=1-(v+f),t[r+1]=u+l,t[r+2]=d-M,t[r+3]=0,t[r+4]=u-l,t[r+5]=1-(p+f),t[r+6]=y+w,t[r+7]=0,t[r+8]=d+M,t[r+9]=y-w,t[r+10]=1-(p+v),t[r+11]=0,t[r+12]=e.x,t[r+13]=e.y,t[r+14]=e.z,t[r+15]=1}return n.physics.CannonPhysics=function(){var e=60,n=1/e,r=new CANNON.World;r.gravity.set(0,-9.8,0),r.broadphase=new CANNON.SAPBroadphase(r);var a=[],s=new WeakMap,i=0;return setInterval(function(){var o=performance.now();if(i>0){var c=(o-i)/1e3;r.step(n,c,e)}i=o;for(var N=0,h=a.length;N<h;N++){var p=a[N];if(p.isInstancedMesh){for(var u=p.instanceMatrix.array,d=s.get(p),v=0;v<d.length;v++)t((y=d[v]).position,y.quaternion,u,16*v);p.instanceMatrix.needsUpdate=!0}else if(p.isMesh){var y=s.get(p);p.position.copy(y.position),p.quaternion.copy(y.quaternion)}}},1e3/e),{addMesh:function(e,n=0){var t=function(e){var n=e.parameters;switch(e.type){case"BoxBufferGeometry":var t=new CANNON.Vec3;return t.x=void 0!==n.width?n.width/2:.5,t.y=void 0!==n.height?n.height/2:.5,t.z=void 0!==n.depth?n.depth/2:.5,new CANNON.Box(t);case"PlaneBufferGeometry":return new CANNON.Plane;case"SphereBufferGeometry":var r=n.radius;return new CANNON.Sphere(r)}return null}(e.geometry);null!==t&&(e.isInstancedMesh?function(e,n,t){for(var i=e.instanceMatrix.array,o=[],c=0;c<e.count;c++){var N=16*c,h=new CANNON.Vec3;h.set(i[N+12],i[N+13],i[N+14]);var p=new CANNON.Body({position:h,mass:n,shape:t});r.addBody(p),o.push(p)}n>0&&(e.instanceMatrix.setUsage(35048),a.push(e),s.set(e,o))}(e,n,t):e.isMesh&&function(e,n,t){var i=new CANNON.Vec3;i.copy(e.position);var o=new CANNON.Quaternion;o.copy(e.quaternion);var c=new CANNON.Body({position:i,quaternion:o,mass:n,shape:t});r.addBody(c),n>0&&(a.push(e),s.set(e,c))}(e,n,t))},setMeshPosition:function(e,n,t=0){e.isInstancedMesh?s.get(e)[t].position.copy(n):e.isMesh&&s.get(e).position.copy(n)}}}});
//# sourceMappingURL=../sourcemaps/physics/CannonPhysics.js.map
