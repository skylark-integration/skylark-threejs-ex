/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(e){"use strict";return function(){var n,r=((n=new e.RawShaderMaterial({uniforms:{roughnessMap:{value:null},normalMap:{value:null},texelSize:{value:new e.Vector2(1,1)}},vertexShader:"\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4( position, 1.0 );\n}\n              ",fragmentShader:"\nprecision mediump float;\nprecision mediump int;\nvarying vec2 vUv;\nuniform sampler2D roughnessMap;\nuniform sampler2D normalMap;\nuniform vec2 texelSize;\n\n#define ENVMAP_TYPE_CUBE_UV\nvec4 envMapTexelToLinear(vec4 a){return a;}\n#include <cube_uv_reflection_fragment>\n\nfloat roughnessToVariance(float roughness) {\n  float variance = 0.0;\n  if (roughness >= r1) {\n    variance = (r0 - roughness) * (v1 - v0) / (r0 - r1) + v0;\n  } else if (roughness >= r4) {\n    variance = (r1 - roughness) * (v4 - v1) / (r1 - r4) + v1;\n  } else if (roughness >= r5) {\n    variance = (r4 - roughness) * (v5 - v4) / (r4 - r5) + v4;\n  } else {\n    float roughness2 = roughness * roughness;\n    variance = 1.79 * roughness2 * roughness2;\n  }\n  return variance;\n}\nfloat varianceToRoughness(float variance) {\n  float roughness = 0.0;\n  if (variance >= v1) {\n    roughness = (v0 - variance) * (r1 - r0) / (v0 - v1) + r0;\n  } else if (variance >= v4) {\n    roughness = (v1 - variance) * (r4 - r1) / (v1 - v4) + r1;\n  } else if (variance >= v5) {\n    roughness = (v4 - variance) * (r5 - r4) / (v4 - v5) + r4;\n  } else {\n    roughness = pow(0.559 * variance, 0.25);// 0.559 = 1.0 / 1.79\n  }\n  return roughness;\n}\n\nvoid main() {\n    gl_FragColor = texture2D(roughnessMap, vUv, -1.0);\n    if (texelSize.x == 0.0) return;\n    float roughness = gl_FragColor.g;\n    float variance = roughnessToVariance(roughness);\n    vec3 avgNormal;\n    for (float x = -1.0; x < 2.0; x += 2.0) {\n    for (float y = -1.0; y < 2.0; y += 2.0) {\n        vec2 uv = vUv + vec2(x, y) * 0.25 * texelSize;\n        avgNormal += normalize(texture2D(normalMap, uv, -1.0).xyz - 0.5);\n    }\n    }\n    variance += 1.0 - 0.25 * length(avgNormal);\n    gl_FragColor.g = varianceToRoughness(variance);\n}\n              ",blending:e.NoBlending,depthTest:!1,depthWrite:!1})).type="RoughnessMipmapper",n),a=new e.Scene;a.add(new e.Mesh(new e.PlaneBufferGeometry(2,2),r));var s=new e.OrthographicCamera(0,1,0,1,0,1),o=null,i=null,t=function(e){(i=e).compile(a,s)};return t.prototype={constructor:t,generateMipmaps:function(n){var{roughnessMap:t,normalMap:u}=n;if(null!=t&&null!=u&&t.generateMipmaps&&!n.userData.roughnessUpdated){n.userData.roughnessUpdated=!0;var v=Math.max(t.image.width,u.image.width),l=Math.max(t.image.height,u.image.height);if(e.MathUtils.isPowerOfTwo(v)&&e.MathUtils.isPowerOfTwo(l)){var g=i.getRenderTarget(),h=i.autoClear;if(i.autoClear=!1,null!=o&&o.width===v&&o.height===l||(null!=o&&o.dispose(),(o=new e.WebGLRenderTarget(v,l,{depthBuffer:!1,stencilBuffer:!1})).scissorTest=!0),v!==t.image.width||l!==t.image.height){var p=new e.WebGLRenderTarget(v,l,{minFilter:e.LinearMipMapLinearFilter,depthBuffer:!1,stencilBuffer:!1});p.texture.generateMipmaps=!0,i.setRenderTarget(p),n.roughnessMap=p.texture,n.metalnessMap==t&&(n.metalnessMap=n.roughnessMap),n.aoMap==t&&(n.aoMap=n.roughnessMap)}r.uniforms.roughnessMap.value=t,r.uniforms.normalMap.value=u;for(var c=new e.Vector2(0,0),f=r.uniforms.texelSize.value,m=0;v>=1&&l>=1;++m,v/=2,l/=2)f.set(1/v,1/l),0==m&&f.set(0,0),o.viewport.set(c.x,c.y,v,l),o.scissor.set(c.x,c.y,v,l),i.setRenderTarget(o),i.render(a,s),i.copyFramebufferToTexture(c,n.roughnessMap,m),r.uniforms.roughnessMap.value=n.roughnessMap;t!==n.roughnessMap&&t.dispose(),i.setRenderTarget(g),i.autoClear=h}}},dispose:function(){r.dispose(),a.children[0].geometry.dispose(),null!=o&&o.dispose()}},t}()});
//# sourceMappingURL=../sourcemaps/utils/RoughnessMipmapper.js.map
