/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(t){"use strict";return function(){var e=new t.Frustum,r=new t.Vector3,o=new t.Vector3,a=new t.Vector3,n=new t.Vector3,i=new t.Vector3,s=new t.Vector3,c=new t.Vector3,h=new t.Vector3,p=new t.Vector3,m=new t.Vector3,l=new t.Vector3,u=new t.Vector3,d=new t.Vector3,y=new t.Vector3;function P(e,r,o){this.camera=e,this.scene=r,this.startPoint=new t.Vector3,this.endPoint=new t.Vector3,this.collection=[],this.deep=o||Number.MAX_VALUE}return P.prototype.select=function(t,r){return this.startPoint=t||this.startPoint,this.endPoint=r||this.endPoint,this.collection=[],this.updateFrustum(this.startPoint,this.endPoint),this.searchChildInFrustum(e,this.scene),this.collection},P.prototype.updateFrustum=function(t,r){if(t=t||this.startPoint,r=r||this.endPoint,this.camera.updateProjectionMatrix(),this.camera.updateMatrixWorld(),this.camera.isPerspectiveCamera)o.copy(t),o.x=Math.min(t.x,r.x),o.y=Math.max(t.y,r.y),r.x=Math.max(t.x,r.x),r.y=Math.min(t.y,r.y),a.copy(this.camera.position),n.copy(o),i.set(r.x,o.y,0),s.copy(r),c.set(o.x,r.y,0),n.unproject(this.camera),i.unproject(this.camera),s.unproject(this.camera),c.unproject(this.camera),u.copy(n).sub(a),d.copy(i).sub(a),y.copy(s).sub(a),u.normalize(),d.normalize(),y.normalize(),u.multiplyScalar(this.deep),d.multiplyScalar(this.deep),y.multiplyScalar(this.deep),u.add(a),d.add(a),y.add(a),(P=e.planes)[0].setFromCoplanarPoints(a,n,i),P[1].setFromCoplanarPoints(a,i,s),P[2].setFromCoplanarPoints(s,c,a),P[3].setFromCoplanarPoints(c,n,a),P[4].setFromCoplanarPoints(i,s,c),P[5].setFromCoplanarPoints(y,d,u),P[5].normal.multiplyScalar(-1);else if(this.camera.isOrthographicCamera){t.equals(r)&&r.addScalar(Number.EPSILON);var P,x=Math.min(t.x,r.x),F=Math.max(t.y,r.y),w=Math.max(t.x,r.x),C=Math.min(t.y,r.y);n.set(x,F,-1),i.set(w,F,-1),s.set(w,C,-1),c.set(x,C,-1),h.set(x,F,1),p.set(w,F,1),m.set(w,C,1),l.set(x,C,1),n.unproject(this.camera),i.unproject(this.camera),s.unproject(this.camera),c.unproject(this.camera),h.unproject(this.camera),p.unproject(this.camera),m.unproject(this.camera),l.unproject(this.camera),(P=e.planes)[0].setFromCoplanarPoints(n,h,p),P[1].setFromCoplanarPoints(i,p,m),P[2].setFromCoplanarPoints(m,l,c),P[3].setFromCoplanarPoints(l,h,n),P[4].setFromCoplanarPoints(i,s,c),P[5].setFromCoplanarPoints(m,p,h),P[5].normal.multiplyScalar(-1)}else console.error("THREE.SelectionBox: Unsupported camera type.")},P.prototype.searchChildInFrustum=function(t,e){if((e.isMesh||e.isLine||e.isPoints)&&void 0!==e.material&&(null===e.geometry.boundingSphere&&e.geometry.computeBoundingSphere(),r.copy(e.geometry.boundingSphere.center),r.applyMatrix4(e.matrixWorld),t.containsPoint(r)&&this.collection.push(e)),e.children.length>0)for(var o=0;o<e.children.length;o++)this.searchChildInFrustum(t,e.children[o])},P}()});
//# sourceMappingURL=../sourcemaps/interactive/SelectionBox.js.map
