/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../shaders/CopyShader","./Pass"],function(e){return e.SSAARenderPass=function(r,t,a,s){e.Pass.call(this),this.scene=r,this.camera=t,this.sampleLevel=4,this.unbiased=!0,this.clearColor=void 0!==a?a:0,this.clearAlpha=void 0!==s?s:0,void 0===e.CopyShader&&console.error("THREE.SSAARenderPass relies on THREE.CopyShader");var i=e.CopyShader;this.copyUniforms=e.UniformsUtils.clone(i.uniforms),this.copyMaterial=new e.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,premultipliedAlpha:!0,transparent:!0,blending:e.AdditiveBlending,depthTest:!1,depthWrite:!1}),this.fsQuad=new e.Pass.FullScreenQuad(this.copyMaterial)},e.SSAARenderPass.prototype=Object.assign(Object.create(e.Pass.prototype),{constructor:e.SSAARenderPass,dispose:function(){this.sampleRenderTarget&&(this.sampleRenderTarget.dispose(),this.sampleRenderTarget=null)},setSize:function(e,r){this.sampleRenderTarget&&this.sampleRenderTarget.setSize(e,r)},render:function(r,t,a){this.sampleRenderTarget||(this.sampleRenderTarget=new e.WebGLRenderTarget(a.width,a.height,{minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBAFormat}),this.sampleRenderTarget.texture.name="SSAARenderPass.sample");var s=e.SSAARenderPass.JitterVectors[Math.max(0,Math.min(this.sampleLevel,5))],i=r.autoClear;r.autoClear=!1;var n=r.getClearColor().getHex(),l=r.getClearAlpha(),h=1/s.length;this.copyUniforms.tDiffuse.value=this.sampleRenderTarget.texture;for(var o=a.width,d=a.height,c=0;c<s.length;c++){var p=s[c];this.camera.setViewOffset&&this.camera.setViewOffset(o,d,.0625*p[0],.0625*p[1],o,d);var m=h;if(this.unbiased)m+=1/32*((c+.5)/s.length-.5);this.copyUniforms.opacity.value=m,r.setClearColor(this.clearColor,this.clearAlpha),r.setRenderTarget(this.sampleRenderTarget),r.clear(),r.render(this.scene,this.camera),r.setRenderTarget(this.renderToScreen?null:t),0===c&&(r.setClearColor(0,0),r.clear()),this.fsQuad.render(r)}this.camera.clearViewOffset&&this.camera.clearViewOffset(),r.autoClear=i,r.setClearColor(n,l)}}),e.SSAARenderPass.JitterVectors=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]],e.SSAARenderPass});
//# sourceMappingURL=../sourcemaps/postprocessing/SSAARenderPass.js.map
