/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","./Pass","../shaders/CopyShader"],function(e,t,r){"use strict";var a=function(a,s,i,l){t.call(this),this.scene=a,this.camera=s,this.sampleLevel=4,this.unbiased=!0,this.clearColor=void 0!==i?i:0,this.clearAlpha=void 0!==l?l:0,void 0===r&&console.error("SSAARenderPass relies on CopyShader");var n=r;this.copyUniforms=e.UniformsUtils.clone(n.uniforms),this.copyMaterial=new e.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,premultipliedAlpha:!0,transparent:!0,blending:e.AdditiveBlending,depthTest:!1,depthWrite:!1}),this.fsQuad=new t.FullScreenQuad(this.copyMaterial)};return a.prototype=Object.assign(Object.create(t.prototype),{constructor:a,dispose:function(){this.sampleRenderTarget&&(this.sampleRenderTarget.dispose(),this.sampleRenderTarget=null)},setSize:function(e,t){this.sampleRenderTarget&&this.sampleRenderTarget.setSize(e,t)},render:function(t,r,s){this.sampleRenderTarget||(this.sampleRenderTarget=new e.WebGLRenderTarget(s.width,s.height,{minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBAFormat}),this.sampleRenderTarget.texture.name="SSAARenderPass.sample");var i=a.JitterVectors[Math.max(0,Math.min(this.sampleLevel,5))],l=t.autoClear;t.autoClear=!1;var n=t.getClearColor().getHex(),h=t.getClearAlpha(),o=1/i.length;this.copyUniforms.tDiffuse.value=this.sampleRenderTarget.texture;for(var d=s.width,c=s.height,p=0;p<i.length;p++){var m=i[p];this.camera.setViewOffset&&this.camera.setViewOffset(d,c,.0625*m[0],.0625*m[1],d,c);var f=o;if(this.unbiased)f+=1/32*((p+.5)/i.length-.5);this.copyUniforms.opacity.value=f,t.setClearColor(this.clearColor,this.clearAlpha),t.setRenderTarget(this.sampleRenderTarget),t.clear(),t.render(this.scene,this.camera),t.setRenderTarget(this.renderToScreen?null:r),0===p&&(t.setClearColor(0,0),t.clear()),this.fsQuad.render(t)}this.camera.clearViewOffset&&this.camera.clearViewOffset(),t.autoClear=l,t.setClearColor(n,h)}}),a.JitterVectors=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]],a});
//# sourceMappingURL=../sourcemaps/postprocessing/SSAARenderPass.js.map
