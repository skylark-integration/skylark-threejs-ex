/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["../core/TempNode","../inputs/FloatNode","../core/FunctionNode","../accessors/NormalNode","../accessors/PositionNode"],function(e,t,o,r,a){"use strict";function d(o,r){e.call(this,"v3"),this.value=o,this.scale=r||new t(1),this.toNormalMap=!1}var s;return d.Nodes={dHdxy_fwd:s=new o(["vec2 dHdxy_fwd( sampler2D bumpMap, vec2 vUv, float bumpScale ) {","\tvec2 dSTdx = dFdx( vUv );","\tvec2 dSTdy = dFdy( vUv );","\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;","\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;","\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;","\treturn vec2( dBx, dBy );","}"].join("\n"),null,{derivatives:!0}),perturbNormalArb:new o(["vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {","\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );","\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );","\tvec3 vN = surf_norm;","\tvec3 R1 = cross( vSigmaY, vN );","\tvec3 R2 = cross( vN, vSigmaX );","\tfloat fDet = dot( vSigmaX, R1 );","\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );","\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );","\treturn normalize( abs( fDet ) * surf_norm - vGrad );","}"].join("\n"),[s],{derivatives:!0}),bumpToNormal:new o(["vec3 bumpToNormal( sampler2D bumpMap, vec2 uv, float scale ) {","\tvec2 dSTdx = dFdx( uv );","\tvec2 dSTdy = dFdy( uv );","\tfloat Hll = texture2D( bumpMap, uv ).x;","\tfloat dBx = texture2D( bumpMap, uv + dSTdx ).x - Hll;","\tfloat dBy = texture2D( bumpMap, uv + dSTdy ).x - Hll;","\treturn vec3( .5 - ( dBx * scale ), .5 - ( dBy * scale ), 1.0 );","}"].join("\n"),null,{derivatives:!0})},d.prototype=Object.create(e.prototype),d.prototype.constructor=d,d.prototype.nodeType="BumpMap",d.prototype.generate=function(e,t){if(e.isShader("fragment")){if(this.toNormalMap){var o=e.include(d.Nodes.bumpToNormal);return e.format(o+"( "+this.value.build(e,"sampler2D")+", "+this.value.uv.build(e,"v2")+", "+this.scale.build(e,"f")+" )",this.getType(e),t)}var s=e.include(d.Nodes.dHdxy_fwd),u=e.include(d.Nodes.perturbNormalArb);this.normal=this.normal||new r,this.position=this.position||new a(a.VIEW);var l=s+"( "+this.value.build(e,"sampler2D")+", "+this.value.uv.build(e,"v2")+", "+this.scale.build(e,"f")+" )";return e.format(u+"( -"+this.position.build(e,"v3")+", "+this.normal.build(e,"v3")+", "+l+" )",this.getType(e),t)}return console.warn("THREE.BumpMapNode is not compatible with "+e.shader+" shader."),e.format("vec3( 0.0 )",this.getType(e),t)},d.prototype.copy=function(t){return e.prototype.copy.call(this,t),this.value=t.value,this.scale=t.scale,this},d.prototype.toJSON=function(e){var t=this.getJSONNode(e);return t||((t=this.createJSONNode(e)).value=this.value.toJSON(e).uuid,t.scale=this.scale.toJSON(e).uuid),t},d});
//# sourceMappingURL=../../sourcemaps/nodes/misc/BumpMapNode.js.map
