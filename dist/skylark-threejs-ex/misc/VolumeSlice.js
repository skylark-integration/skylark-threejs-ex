/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(t){"use strict";var e=function(e,i,s){var a=this;this.volume=e,i=i||0,Object.defineProperty(this,"index",{get:function(){return i},set:function(t){return i=t,a.geometryNeedsUpdate=!0,i}}),this.axis=s||"z",this.canvas=document.createElement("canvas"),this.canvasBuffer=document.createElement("canvas"),this.updateGeometry();var h=new t.Texture(this.canvas);h.minFilter=t.LinearFilter,h.wrapS=h.wrapT=t.ClampToEdgeWrapping;var r=new t.MeshBasicMaterial({map:h,side:t.DoubleSide,transparent:!0});this.mesh=new t.Mesh(this.geometry,r),this.mesh.matrixAutoUpdate=!1,this.geometryNeedsUpdate=!0,this.repaint()};return e.prototype={constructor:e,repaint:function(){this.geometryNeedsUpdate&&this.updateGeometry();var t=this.iLength,e=this.jLength,i=this.sliceAccess,s=this.volume,a=this.canvasBuffer,h=this.ctxBuffer,r=h.getImageData(0,0,t,e),n=r.data,o=s.data,c=s.upperThreshold,d=s.lowerThreshold,m=s.windowLow,p=s.windowHigh,g=0;if("label"===s.dataType)for(var l=0;l<e;l++)for(var u=0;u<t;u++){var f=o[i(u,l)];f=f>=this.colorMap.length?f%this.colorMap.length+1:f;var v=this.colorMap[f];n[4*g]=v>>24&255,n[4*g+1]=v>>16&255,n[4*g+2]=v>>8&255,n[4*g+3]=255&v,g++}else for(l=0;l<e;l++)for(u=0;u<t;u++){var y=o[i(u,l)],x=255;x=c>=y&&d<=y?x:0,y=(y=Math.floor(255*(y-m)/(p-m)))>255?255:y<0?0:0|y,n[4*g]=y,n[4*g+1]=y,n[4*g+2]=y,n[4*g+3]=x,g++}h.putImageData(r,0,0),this.ctx.drawImage(a,0,0,t,e,0,0,this.canvas.width,this.canvas.height),this.mesh.material.map.needsUpdate=!0},updateGeometry:function(){var e=this.volume.extractPerpendicularPlane(this.axis,this.index);this.sliceAccess=e.sliceAccess,this.jLength=e.jLength,this.iLength=e.iLength,this.matrix=e.matrix,this.canvas.width=e.planeWidth,this.canvas.height=e.planeHeight,this.canvasBuffer.width=this.iLength,this.canvasBuffer.height=this.jLength,this.ctx=this.canvas.getContext("2d"),this.ctxBuffer=this.canvasBuffer.getContext("2d"),this.geometry&&this.geometry.dispose(),this.geometry=new t.PlaneBufferGeometry(e.planeWidth,e.planeHeight),this.mesh&&(this.mesh.geometry=this.geometry,this.mesh.matrix.identity(),this.mesh.applyMatrix4(this.matrix)),this.geometryNeedsUpdate=!1}},e});
//# sourceMappingURL=../sourcemaps/misc/VolumeSlice.js.map
