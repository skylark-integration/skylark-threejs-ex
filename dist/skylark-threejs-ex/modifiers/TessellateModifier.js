/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../threex"],function(e,r){"use strict";var o=function(e){this.maxEdgeLength=e};return o.prototype.modify=function(r){for(var o,l=[],t=[],c=this.maxEdgeLength*this.maxEdgeLength,s=0,n=r.faceVertexUvs.length;s<n;s++)t[s]=[];for(s=0,n=r.faces.length;s<n;s++){var v=r.faces[s];if(v instanceof e.Face3){var a=v.a,x=v.b,f=v.c,i=r.vertices[a],p=r.vertices[x],h=r.vertices[f],m=i.distanceToSquared(p),y=p.distanceToSquared(h),C=i.distanceToSquared(h);if(m>c||y>c||C>c){var N=r.vertices.length,g=v.clone(),d=v.clone();if(m>=y&&m>=C){if((u=i.clone()).lerp(p,.5),g.a=a,g.b=N,g.c=f,d.a=N,d.b=x,d.c=f,3===v.vertexNormals.length)(b=v.vertexNormals[0].clone()).lerp(v.vertexNormals[1],.5),g.vertexNormals[1].copy(b),d.vertexNormals[0].copy(b);if(3===v.vertexColors.length)(U=v.vertexColors[0].clone()).lerp(v.vertexColors[1],.5),g.vertexColors[1].copy(U),d.vertexColors[0].copy(U);o=0}else if(y>=m&&y>=C){if((u=p.clone()).lerp(h,.5),g.a=a,g.b=x,g.c=N,d.a=N,d.b=f,d.c=a,3===v.vertexNormals.length)(b=v.vertexNormals[1].clone()).lerp(v.vertexNormals[2],.5),g.vertexNormals[2].copy(b),d.vertexNormals[0].copy(b),d.vertexNormals[1].copy(v.vertexNormals[2]),d.vertexNormals[2].copy(v.vertexNormals[0]);if(3===v.vertexColors.length)(U=v.vertexColors[1].clone()).lerp(v.vertexColors[2],.5),g.vertexColors[2].copy(U),d.vertexColors[0].copy(U),d.vertexColors[1].copy(v.vertexColors[2]),d.vertexColors[2].copy(v.vertexColors[0]);o=1}else{var u,b,U;if((u=i.clone()).lerp(h,.5),g.a=a,g.b=x,g.c=N,d.a=N,d.b=x,d.c=f,3===v.vertexNormals.length)(b=v.vertexNormals[0].clone()).lerp(v.vertexNormals[2],.5),g.vertexNormals[2].copy(b),d.vertexNormals[0].copy(b);if(3===v.vertexColors.length)(U=v.vertexColors[0].clone()).lerp(v.vertexColors[2],.5),g.vertexColors[2].copy(U),d.vertexColors[0].copy(U);o=2}l.push(g,d),r.vertices.push(u);for(var V=0,T=r.faceVertexUvs.length;V<T;V++)if(r.faceVertexUvs[V].length){var q=r.faceVertexUvs[V][s],E=q[0],L=q[1],S=q[2];if(0===o){(F=E.clone()).lerp(L,.5);var k=[E.clone(),F.clone(),S.clone()],j=[F.clone(),L.clone(),S.clone()]}else if(1===o){(F=L.clone()).lerp(S,.5);k=[E.clone(),L.clone(),F.clone()],j=[F.clone(),S.clone(),E.clone()]}else{var F;(F=E.clone()).lerp(S,.5);k=[E.clone(),L.clone(),F.clone()],j=[F.clone(),L.clone(),S.clone()]}t[V].push(k,j)}}else{l.push(v);for(V=0,T=r.faceVertexUvs.length;V<T;V++)t[V].push(r.faceVertexUvs[V][s])}}}r.faces=l,r.faceVertexUvs=t},r.modifiers.TessellateModifier=o});
//# sourceMappingURL=../sourcemaps/modifiers/TessellateModifier.js.map
