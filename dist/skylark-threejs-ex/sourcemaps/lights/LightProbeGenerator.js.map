{"version":3,"sources":["lights/LightProbeGenerator.js"],"names":["define","THREE","threex","LightProbeGenerator","fromCubeTexture","cubeTexture","norm","lengthSq","weight","totalWeight","coord","Vector3","dir","color","Color","shBasis","sh","SphericalHarmonics3","shCoefficients","coefficients","faceIndex","image","width","height","canvas","document","createElement","context","getContext","drawImage","imageData","getImageData","data","imageWidth","pixelSize","i","il","length","setRGB","convertColorToLinear","encoding","pixelIndex","col","row","Math","floor","set","sqrt","copy","normalize","getBasisAt","j","x","r","y","g","z","b","PI","LightProbe","fromCubeRenderTarget","renderer","cubeRenderTarget","Uint8Array","readRenderTargetPixels","texture","sRGBEncoding","convertSRGBToLinear","LinearEncoding","console","warn","lights"],"mappings":"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","file":"../../lights/LightProbeGenerator.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var LightProbeGenerator = {\r\n        fromCubeTexture: function (cubeTexture) {\r\n            var norm, lengthSq, weight, totalWeight = 0;\r\n            var coord = new THREE.Vector3();\r\n            var dir = new THREE.Vector3();\r\n            var color = new THREE.Color();\r\n            var shBasis = [\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            ];\r\n            var sh = new THREE.SphericalHarmonics3();\r\n            var shCoefficients = sh.coefficients;\r\n            for (var faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n                var image = cubeTexture.image[faceIndex];\r\n                var width = image.width;\r\n                var height = image.height;\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                var context = canvas.getContext('2d');\r\n                context.drawImage(image, 0, 0, width, height);\r\n                var imageData = context.getImageData(0, 0, width, height);\r\n                var data = imageData.data;\r\n                var imageWidth = imageData.width;\r\n                var pixelSize = 2 / imageWidth;\r\n                for (var i = 0, il = data.length; i < il; i += 4) {\r\n                    color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\r\n                    convertColorToLinear(color, cubeTexture.encoding);\r\n                    var pixelIndex = i / 4;\r\n                    var col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\r\n                    var row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\r\n                    switch (faceIndex) {\r\n                    case 0:\r\n                        coord.set(-1, row, -col);\r\n                        break;\r\n                    case 1:\r\n                        coord.set(1, row, col);\r\n                        break;\r\n                    case 2:\r\n                        coord.set(-col, 1, -row);\r\n                        break;\r\n                    case 3:\r\n                        coord.set(-col, -1, row);\r\n                        break;\r\n                    case 4:\r\n                        coord.set(-col, row, 1);\r\n                        break;\r\n                    case 5:\r\n                        coord.set(col, row, -1);\r\n                        break;\r\n                    }\r\n                    lengthSq = coord.lengthSq();\r\n                    weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\r\n                    totalWeight += weight;\r\n                    dir.copy(coord).normalize();\r\n                    THREE.SphericalHarmonics3.getBasisAt(dir, shBasis);\r\n                    for (var j = 0; j < 9; j++) {\r\n                        shCoefficients[j].x += shBasis[j] * color.r * weight;\r\n                        shCoefficients[j].y += shBasis[j] * color.g * weight;\r\n                        shCoefficients[j].z += shBasis[j] * color.b * weight;\r\n                    }\r\n                }\r\n            }\r\n            norm = 4 * Math.PI / totalWeight;\r\n            for (var j = 0; j < 9; j++) {\r\n                shCoefficients[j].x *= norm;\r\n                shCoefficients[j].y *= norm;\r\n                shCoefficients[j].z *= norm;\r\n            }\r\n            return new THREE.LightProbe(sh);\r\n        },\r\n        fromCubeRenderTarget: function (renderer, cubeRenderTarget) {\r\n            var norm, lengthSq, weight, totalWeight = 0;\r\n            var coord = new THREE.Vector3();\r\n            var dir = new THREE.Vector3();\r\n            var color = new THREE.Color();\r\n            var shBasis = [\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            ];\r\n            var sh = new THREE.SphericalHarmonics3();\r\n            var shCoefficients = sh.coefficients;\r\n            for (var faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n                var imageWidth = cubeRenderTarget.width;\r\n                var data = new Uint8Array(imageWidth * imageWidth * 4);\r\n                renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\r\n                var pixelSize = 2 / imageWidth;\r\n                for (var i = 0, il = data.length; i < il; i += 4) {\r\n                    color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\r\n                    convertColorToLinear(color, cubeRenderTarget.texture.encoding);\r\n                    var pixelIndex = i / 4;\r\n                    var col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\r\n                    var row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\r\n                    switch (faceIndex) {\r\n                    case 0:\r\n                        coord.set(1, row, -col);\r\n                        break;\r\n                    case 1:\r\n                        coord.set(-1, row, col);\r\n                        break;\r\n                    case 2:\r\n                        coord.set(col, 1, -row);\r\n                        break;\r\n                    case 3:\r\n                        coord.set(col, -1, row);\r\n                        break;\r\n                    case 4:\r\n                        coord.set(col, row, 1);\r\n                        break;\r\n                    case 5:\r\n                        coord.set(-col, row, -1);\r\n                        break;\r\n                    }\r\n                    lengthSq = coord.lengthSq();\r\n                    weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\r\n                    totalWeight += weight;\r\n                    dir.copy(coord).normalize();\r\n                    THREE.SphericalHarmonics3.getBasisAt(dir, shBasis);\r\n                    for (var j = 0; j < 9; j++) {\r\n                        shCoefficients[j].x += shBasis[j] * color.r * weight;\r\n                        shCoefficients[j].y += shBasis[j] * color.g * weight;\r\n                        shCoefficients[j].z += shBasis[j] * color.b * weight;\r\n                    }\r\n                }\r\n            }\r\n            norm = 4 * Math.PI / totalWeight;\r\n            for (var j = 0; j < 9; j++) {\r\n                shCoefficients[j].x *= norm;\r\n                shCoefficients[j].y *= norm;\r\n                shCoefficients[j].z *= norm;\r\n            }\r\n            return new THREE.LightProbe(sh);\r\n        }\r\n    };\r\n    var convertColorToLinear = function (color, encoding) {\r\n        switch (encoding) {\r\n        case THREE.sRGBEncoding:\r\n            color.convertSRGBToLinear();\r\n            break;\r\n        case THREE.LinearEncoding:\r\n            break;\r\n        default:\r\n            console.warn('WARNING: LightProbeGenerator convertColorToLinear() encountered an unsupported encoding.');\r\n            break;\r\n        }\r\n        return color;\r\n    };\r\n    \r\n    return threex.lights.LightProbeGenerator = LightProbeGenerator;\r\n});"]}