{"version":3,"sources":["nodes/math/CondNode.js"],"names":["define","TempNode","CondNode","a","b","op","ifNode","elseNode","call","this","EQUAL","NOT_EQUAL","GREATER","GREATER_EQUAL","LESS","LESS_EQUAL","prototype","Object","create","constructor","nodeType","getType","builder","ifType","elseType","getTypeLength","getCondType","generate","output","code","type","condType","build","ifCode","elseCode","join","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,oBACD,SACCC,GAEA,aACA,SAASC,EAASC,EAAGC,EAAGC,EAAIC,EAAQC,GAChCN,EAASO,KAAKC,MACdA,KAAKN,EAAIA,EACTM,KAAKL,EAAIA,EACTK,KAAKJ,GAAKA,EACVI,KAAKH,OAASA,EACdG,KAAKF,SAAWA,EAqEpB,OAnEAL,EAASQ,MAAQ,KACjBR,EAASS,UAAY,KACrBT,EAASU,QAAU,IACnBV,EAASW,cAAgB,KACzBX,EAASY,KAAO,IAChBZ,EAASa,WAAa,KACtBb,EAASc,UAAYC,OAAOC,OAAOjB,EAASe,WAC5Cd,EAASc,UAAUG,YAAcjB,EACjCA,EAASc,UAAUI,SAAW,OAC9BlB,EAASc,UAAUK,QAAU,SAAUC,GACnC,GAAIb,KAAKH,OAAQ,CACb,IAAIiB,EAASd,KAAKH,OAAOe,QAAQC,GAC7BE,EAAWf,KAAKF,SAASc,QAAQC,GACrC,OAAIA,EAAQG,cAAcD,GAAYF,EAAQG,cAAcF,GACjDC,EAEJD,EAEX,MAAO,KAEXrB,EAASc,UAAUU,YAAc,SAAUJ,GACvC,OAAIA,EAAQG,cAAchB,KAAKL,EAAEiB,QAAQC,IAAYA,EAAQG,cAAchB,KAAKN,EAAEkB,QAAQC,IAC/Eb,KAAKL,EAAEiB,QAAQC,GAEnBb,KAAKN,EAAEkB,QAAQC,IAE1BpB,EAASc,UAAUW,SAAW,SAAUL,EAASM,GAC7C,IAAkJC,EAA9IC,EAAOrB,KAAKY,QAAQC,GAAUS,EAAWtB,KAAKiB,YAAYJ,GAAUnB,EAAIM,KAAKN,EAAE6B,MAAMV,EAASS,GAAW3B,EAAIK,KAAKL,EAAE4B,MAAMV,EAASS,GACvI,GAAItB,KAAKH,OAAQ,CACb,IAAI2B,EAASxB,KAAKH,OAAO0B,MAAMV,EAASQ,GAAOI,EAAWzB,KAAKF,SAASyB,MAAMV,EAASQ,GACvFD,EAAO,MACH1B,EACAM,KAAKJ,GACLD,EACA,IACA6B,EACA,IACAC,GACFC,KAAK,KAAO,UAEdN,EAAO,KAAO1B,EAAI,IAAMM,KAAKJ,GAAK,IAAMD,EAAI,KAEhD,OAAOkB,EAAQc,OAAOP,EAAMpB,KAAKY,QAAQC,GAAUM,IAEvD1B,EAASc,UAAUqB,KAAO,SAAUC,GAOhC,OANArC,EAASe,UAAUqB,KAAK7B,KAAKC,KAAM6B,GACnC7B,KAAKN,EAAImC,EAAOnC,EAChBM,KAAKL,EAAIkC,EAAOlC,EAChBK,KAAKJ,GAAKiC,EAAOjC,GACjBI,KAAKH,OAASgC,EAAOhC,OACrBG,KAAKF,SAAW+B,EAAO/B,SAChBE,MAEXP,EAASc,UAAUuB,OAAS,SAAUC,GAClC,IAAIC,EAAOhC,KAAKiC,YAAYF,GAW5B,OAVKC,KACDA,EAAOhC,KAAKkC,eAAeH,IACtBrC,EAAIM,KAAKN,EAAEoC,OAAOC,GAAMI,KAC7BH,EAAKrC,EAAIK,KAAKL,EAAEmC,OAAOC,GAAMI,KAC7BH,EAAKpC,GAAKI,KAAKJ,GACXoC,EAAKnC,SACLmC,EAAKnC,OAASG,KAAKH,OAAOiC,OAAOC,GAAMI,MACvCH,EAAKlC,WACLkC,EAAKlC,SAAWE,KAAKF,SAASgC,OAAOC,GAAMI,OAE5CH,GAEJvC","file":"../../../nodes/math/CondNode.js","sourcesContent":["define([\n    '../core/TempNode'\n], function (\n    TempNode\n) {\n    'use strict';\n    function CondNode(a, b, op, ifNode, elseNode) {\n        TempNode.call(this);\n        this.a = a;\n        this.b = b;\n        this.op = op;\n        this.ifNode = ifNode;\n        this.elseNode = elseNode;\n    }\n    CondNode.EQUAL = '==';\n    CondNode.NOT_EQUAL = '!=';\n    CondNode.GREATER = '>';\n    CondNode.GREATER_EQUAL = '>=';\n    CondNode.LESS = '<';\n    CondNode.LESS_EQUAL = '<=';\n    CondNode.prototype = Object.create(TempNode.prototype);\n    CondNode.prototype.constructor = CondNode;\n    CondNode.prototype.nodeType = 'Cond';\n    CondNode.prototype.getType = function (builder) {\n        if (this.ifNode) {\n            var ifType = this.ifNode.getType(builder);\n            var elseType = this.elseNode.getType(builder);\n            if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n                return elseType;\n            }\n            return ifType;\n        }\n        return 'b';\n    };\n    CondNode.prototype.getCondType = function (builder) {\n        if (builder.getTypeLength(this.b.getType(builder)) > builder.getTypeLength(this.a.getType(builder))) {\n            return this.b.getType(builder);\n        }\n        return this.a.getType(builder);\n    };\n    CondNode.prototype.generate = function (builder, output) {\n        var type = this.getType(builder), condType = this.getCondType(builder), a = this.a.build(builder, condType), b = this.b.build(builder, condType), code;\n        if (this.ifNode) {\n            var ifCode = this.ifNode.build(builder, type), elseCode = this.elseNode.build(builder, type);\n            code = '( ' + [\n                a,\n                this.op,\n                b,\n                '?',\n                ifCode,\n                ':',\n                elseCode\n            ].join(' ') + ' )';\n        } else {\n            code = '( ' + a + ' ' + this.op + ' ' + b + ' )';\n        }\n        return builder.format(code, this.getType(builder), output);\n    };\n    CondNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.a = source.a;\n        this.b = source.b;\n        this.op = source.op;\n        this.ifNode = source.ifNode;\n        this.elseNode = source.elseNode;\n        return this;\n    };\n    CondNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.a = this.a.toJSON(meta).uuid;\n            data.b = this.b.toJSON(meta).uuid;\n            data.op = this.op;\n            if (data.ifNode)\n                data.ifNode = this.ifNode.toJSON(meta).uuid;\n            if (data.elseNode)\n                data.elseNode = this.elseNode.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return CondNode;\n});"]}