{"version":3,"sources":["nodes/math/OperatorNode.js"],"names":["define","TempNode","OperatorNode","a","b","op","call","this","ADD","SUB","MUL","DIV","prototype","Object","create","constructor","nodeType","getType","builder","isTypeMatrix","getTypeLength","generate","output","type","build","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,oBACD,SACCC,GAEA,aACA,SAASC,EAAaC,EAAGC,EAAGC,GACxBJ,EAASK,KAAKC,MACdA,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,GAAKA,EAwCd,OAtCAH,EAAaM,IAAM,IACnBN,EAAaO,IAAM,IACnBP,EAAaQ,IAAM,IACnBR,EAAaS,IAAM,IACnBT,EAAaU,UAAYC,OAAOC,OAAOb,EAASW,WAChDV,EAAaU,UAAUG,YAAcb,EACrCA,EAAaU,UAAUI,SAAW,WAClCd,EAAaU,UAAUK,QAAU,SAAUC,GACvC,IAAIf,EAAII,KAAKJ,EAAEc,QAAQC,GAAUd,EAAIG,KAAKH,EAAEa,QAAQC,GACpD,OAAIA,EAAQC,aAAahB,GACd,KACAe,EAAQE,cAAchB,GAAKc,EAAQE,cAAcjB,GACjDC,EAEJD,GAEXD,EAAaU,UAAUS,SAAW,SAAUH,EAASI,GACjD,IAAIC,EAAOhB,KAAKU,QAAQC,GACpBf,EAAII,KAAKJ,EAAEqB,MAAMN,EAASK,GAAOnB,EAAIG,KAAKH,EAAEoB,MAAMN,EAASK,GAC/D,OAAOL,EAAQO,OAAO,KAAOtB,EAAI,IAAMI,KAAKF,GAAK,IAAMD,EAAI,KAAMmB,EAAMD,IAE3EpB,EAAaU,UAAUc,KAAO,SAAUC,GAKpC,OAJA1B,EAASW,UAAUc,KAAKpB,KAAKC,KAAMoB,GACnCpB,KAAKJ,EAAIwB,EAAOxB,EAChBI,KAAKH,EAAIuB,EAAOvB,EAChBG,KAAKF,GAAKsB,EAAOtB,GACVE,MAEXL,EAAaU,UAAUgB,OAAS,SAAUC,GACtC,IAAIC,EAAOvB,KAAKwB,YAAYF,GAO5B,OANKC,KACDA,EAAOvB,KAAKyB,eAAeH,IACtB1B,EAAII,KAAKJ,EAAEyB,OAAOC,GAAMI,KAC7BH,EAAK1B,EAAIG,KAAKH,EAAEwB,OAAOC,GAAMI,KAC7BH,EAAKzB,GAAKE,KAAKF,IAEZyB,GAEJ5B","file":"../../../nodes/math/OperatorNode.js","sourcesContent":["define([\r\n    '../core/TempNode'\r\n], function (\r\n    TempNode\r\n) {\r\n    'use strict';\r\n    function OperatorNode(a, b, op) {\r\n        TempNode.call(this);\r\n        this.a = a;\r\n        this.b = b;\r\n        this.op = op;\r\n    }\r\n    OperatorNode.ADD = '+';\r\n    OperatorNode.SUB = '-';\r\n    OperatorNode.MUL = '*';\r\n    OperatorNode.DIV = '/';\r\n    OperatorNode.prototype = Object.create(TempNode.prototype);\r\n    OperatorNode.prototype.constructor = OperatorNode;\r\n    OperatorNode.prototype.nodeType = 'Operator';\r\n    OperatorNode.prototype.getType = function (builder) {\r\n        var a = this.a.getType(builder), b = this.b.getType(builder);\r\n        if (builder.isTypeMatrix(a)) {\r\n            return 'v4';\r\n        } else if (builder.getTypeLength(b) > builder.getTypeLength(a)) {\r\n            return b;\r\n        }\r\n        return a;\r\n    };\r\n    OperatorNode.prototype.generate = function (builder, output) {\r\n        var type = this.getType(builder);\r\n        var a = this.a.build(builder, type), b = this.b.build(builder, type);\r\n        return builder.format('( ' + a + ' ' + this.op + ' ' + b + ' )', type, output);\r\n    };\r\n    OperatorNode.prototype.copy = function (source) {\r\n        TempNode.prototype.copy.call(this, source);\r\n        this.a = source.a;\r\n        this.b = source.b;\r\n        this.op = source.op;\r\n        return this;\r\n    };\r\n    OperatorNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.a = this.a.toJSON(meta).uuid;\r\n            data.b = this.b.toJSON(meta).uuid;\r\n            data.op = this.op;\r\n        }\r\n        return data;\r\n    };\r\n    return OperatorNode;\r\n});"]}