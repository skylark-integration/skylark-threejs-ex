{"version":3,"sources":["nodes/math/OperatorNode.js"],"names":["define","TempNode","OperatorNode","a","b","op","call","this","ADD","SUB","MUL","DIV","prototype","Object","create","constructor","nodeType","getType","builder","isTypeMatrix","getTypeLength","generate","output","type","build","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,oBACD,SACCC,GAEA,aACA,SAASC,EAAaC,EAAGC,EAAGC,GACxBJ,EAASK,KAAKC,MACdA,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,GAAKA,EAwCd,OAtCAH,EAAaM,IAAM,IACnBN,EAAaO,IAAM,IACnBP,EAAaQ,IAAM,IACnBR,EAAaS,IAAM,IACnBT,EAAaU,UAAYC,OAAOC,OAAOb,EAASW,WAChDV,EAAaU,UAAUG,YAAcb,EACrCA,EAAaU,UAAUI,SAAW,WAClCd,EAAaU,UAAUK,QAAU,SAAUC,GACvC,IAAIf,EAAII,KAAKJ,EAAEc,QAAQC,GAAUd,EAAIG,KAAKH,EAAEa,QAAQC,GACpD,OAAIA,EAAQC,aAAahB,GACd,KACAe,EAAQE,cAAchB,GAAKc,EAAQE,cAAcjB,GACjDC,EAEJD,GAEXD,EAAaU,UAAUS,SAAW,SAAUH,EAASI,GACjD,IAAIC,EAAOhB,KAAKU,QAAQC,GACpBf,EAAII,KAAKJ,EAAEqB,MAAMN,EAASK,GAAOnB,EAAIG,KAAKH,EAAEoB,MAAMN,EAASK,GAC/D,OAAOL,EAAQO,OAAO,KAAOtB,EAAI,IAAMI,KAAKF,GAAK,IAAMD,EAAI,KAAMmB,EAAMD,IAE3EpB,EAAaU,UAAUc,KAAO,SAAUC,GAKpC,OAJA1B,EAASW,UAAUc,KAAKpB,KAAKC,KAAMoB,GACnCpB,KAAKJ,EAAIwB,EAAOxB,EAChBI,KAAKH,EAAIuB,EAAOvB,EAChBG,KAAKF,GAAKsB,EAAOtB,GACVE,MAEXL,EAAaU,UAAUgB,OAAS,SAAUC,GACtC,IAAIC,EAAOvB,KAAKwB,YAAYF,GAO5B,OANKC,KACDA,EAAOvB,KAAKyB,eAAeH,IACtB1B,EAAII,KAAKJ,EAAEyB,OAAOC,GAAMI,KAC7BH,EAAK1B,EAAIG,KAAKH,EAAEwB,OAAOC,GAAMI,KAC7BH,EAAKzB,GAAKE,KAAKF,IAEZyB,GAEJ5B","file":"../../../nodes/math/OperatorNode.js","sourcesContent":["define([\n    '../core/TempNode'\n], function (\n    TempNode\n) {\n    'use strict';\n    function OperatorNode(a, b, op) {\n        TempNode.call(this);\n        this.a = a;\n        this.b = b;\n        this.op = op;\n    }\n    OperatorNode.ADD = '+';\n    OperatorNode.SUB = '-';\n    OperatorNode.MUL = '*';\n    OperatorNode.DIV = '/';\n    OperatorNode.prototype = Object.create(TempNode.prototype);\n    OperatorNode.prototype.constructor = OperatorNode;\n    OperatorNode.prototype.nodeType = 'Operator';\n    OperatorNode.prototype.getType = function (builder) {\n        var a = this.a.getType(builder), b = this.b.getType(builder);\n        if (builder.isTypeMatrix(a)) {\n            return 'v4';\n        } else if (builder.getTypeLength(b) > builder.getTypeLength(a)) {\n            return b;\n        }\n        return a;\n    };\n    OperatorNode.prototype.generate = function (builder, output) {\n        var type = this.getType(builder);\n        var a = this.a.build(builder, type), b = this.b.build(builder, type);\n        return builder.format('( ' + a + ' ' + this.op + ' ' + b + ' )', type, output);\n    };\n    OperatorNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.a = source.a;\n        this.b = source.b;\n        this.op = source.op;\n        return this;\n    };\n    OperatorNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.a = this.a.toJSON(meta).uuid;\n            data.b = this.b.toJSON(meta).uuid;\n            data.op = this.op;\n        }\n        return data;\n    };\n    return OperatorNode;\n});"]}