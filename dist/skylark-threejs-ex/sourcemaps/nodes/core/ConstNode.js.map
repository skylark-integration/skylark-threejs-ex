{"version":3,"sources":["nodes/core/ConstNode.js"],"names":["define","TempNode","declarationRegexp","ConstNode","src","useDefine","call","this","parse","PI","PI2","RECIPROCAL_PI","RECIPROCAL_PI2","LOG2","EPSILON","prototype","Object","create","constructor","nodeType","getType","builder","getTypeByFormat","type","name","value","match","charAt","length","build","output","include","format","generate","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,cACD,SAAUC,GACT,aACA,IAAIC,EAAoB,mDACxB,SAASC,EAAUC,EAAKC,GACpBJ,EAASK,KAAKC,MACdA,KAAKC,MAAMJ,GAAOD,EAAUM,GAAIJ,GAgEpC,OA9DAF,EAAUM,GAAK,KACfN,EAAUO,IAAM,MAChBP,EAAUQ,cAAgB,gBAC1BR,EAAUS,eAAiB,iBAC3BT,EAAUU,KAAO,OACjBV,EAAUW,QAAU,UACpBX,EAAUY,UAAYC,OAAOC,OAAOhB,EAASc,WAC7CZ,EAAUY,UAAUG,YAAcf,EAClCA,EAAUY,UAAUI,SAAW,QAC/BhB,EAAUY,UAAUK,QAAU,SAAUC,GACpC,OAAOA,EAAQC,gBAAgBf,KAAKgB,OAExCpB,EAAUY,UAAUP,MAAQ,SAAUJ,EAAKC,GACvCE,KAAKH,IAAMA,GAAO,GAClB,IAAIoB,EAAMD,EAAME,EAAQ,GACpBC,EAAQnB,KAAKH,IAAIsB,MAAMxB,GAC3BK,KAAKF,UAAYA,GAAoC,MAAvBE,KAAKH,IAAIuB,OAAO,GAC1CD,GAASA,EAAME,OAAS,GACxBL,EAAOG,EAAM,GACbF,EAAOE,EAAM,GACbD,EAAQC,EAAM,KAEdF,EAAOjB,KAAKH,IACZmB,EAAO,KAEXhB,KAAKiB,KAAOA,EACZjB,KAAKgB,KAAOA,EACZhB,KAAKkB,MAAQA,GAEjBtB,EAAUY,UAAUc,MAAQ,SAAUR,EAASS,GAC3C,MAAe,WAAXA,GAUAT,EAAQU,QAAQxB,MACTc,EAAQW,OAAOzB,KAAKiB,KAAMjB,KAAKa,QAAQC,GAAUS,IAVpDvB,KAAKkB,MACDlB,KAAKF,UACE,WAAaE,KAAKiB,KAAO,IAAMjB,KAAKkB,MAExC,SAAWlB,KAAKgB,KAAO,IAAMhB,KAAKiB,KAAO,MAAQjB,KAAKkB,MAAQ,IAC9DlB,KAAKF,UACLE,KAAKH,SADT,GAQfD,EAAUY,UAAUkB,SAAW,SAAUZ,EAASS,GAC9C,OAAOT,EAAQW,OAAOzB,KAAKiB,KAAMjB,KAAKa,QAAQC,GAAUS,IAE5D3B,EAAUY,UAAUmB,KAAO,SAAUC,GAGjC,OAFAlC,EAASc,UAAUmB,KAAK5B,KAAKC,KAAM4B,GACnC5B,KAAKC,MAAM2B,EAAO/B,IAAK+B,EAAO9B,WACvBE,MAEXJ,EAAUY,UAAUqB,OAAS,SAAUC,GACnC,IAAIC,EAAO/B,KAAKgC,YAAYF,GAO5B,OANKC,KACDA,EAAO/B,KAAKiC,eAAeH,IACtBjC,IAAMG,KAAKH,KACO,IAAnBkC,EAAKjC,YACLiC,EAAKjC,WAAY,IAElBiC,GAEJnC","file":"../../../nodes/core/ConstNode.js","sourcesContent":["define([\n    './TempNode'\n], function (TempNode) {\n    'use strict';\n    var declarationRegexp = /^([a-z_0-9]+)\\s([a-z_0-9]+)\\s?\\=?\\s?(.*?)(\\;|$)/i;\n    function ConstNode(src, useDefine) {\n        TempNode.call(this);\n        this.parse(src || ConstNode.PI, useDefine);\n    }\n    ConstNode.PI = 'PI';\n    ConstNode.PI2 = 'PI2';\n    ConstNode.RECIPROCAL_PI = 'RECIPROCAL_PI';\n    ConstNode.RECIPROCAL_PI2 = 'RECIPROCAL_PI2';\n    ConstNode.LOG2 = 'LOG2';\n    ConstNode.EPSILON = 'EPSILON';\n    ConstNode.prototype = Object.create(TempNode.prototype);\n    ConstNode.prototype.constructor = ConstNode;\n    ConstNode.prototype.nodeType = 'Const';\n    ConstNode.prototype.getType = function (builder) {\n        return builder.getTypeByFormat(this.type);\n    };\n    ConstNode.prototype.parse = function (src, useDefine) {\n        this.src = src || '';\n        var name, type, value = '';\n        var match = this.src.match(declarationRegexp);\n        this.useDefine = useDefine || this.src.charAt(0) === '#';\n        if (match && match.length > 1) {\n            type = match[1];\n            name = match[2];\n            value = match[3];\n        } else {\n            name = this.src;\n            type = 'f';\n        }\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    };\n    ConstNode.prototype.build = function (builder, output) {\n        if (output === 'source') {\n            if (this.value) {\n                if (this.useDefine) {\n                    return '#define ' + this.name + ' ' + this.value;\n                }\n                return 'const ' + this.type + ' ' + this.name + ' = ' + this.value + ';';\n            } else if (this.useDefine) {\n                return this.src;\n            }\n        } else {\n            builder.include(this);\n            return builder.format(this.name, this.getType(builder), output);\n        }\n    };\n    ConstNode.prototype.generate = function (builder, output) {\n        return builder.format(this.name, this.getType(builder), output);\n    };\n    ConstNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.parse(source.src, source.useDefine);\n        return this;\n    };\n    ConstNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.src = this.src;\n            if (data.useDefine === true)\n                data.useDefine = true;\n        }\n        return data;\n    };\n    return ConstNode;\n});"]}