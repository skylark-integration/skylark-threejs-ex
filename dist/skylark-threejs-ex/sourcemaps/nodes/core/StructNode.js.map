{"version":3,"sources":["nodes/core/StructNode.js"],"names":["define","TempNode","declarationRegexp","propertiesRegexp","StructNode","src","call","this","parse","prototype","Object","create","constructor","nodeType","getType","builder","getTypeByFormat","name","getInputByName","i","inputs","length","generate","output","format","declaration","exec","match","properties","push","type","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,cACD,SAAUC,GACT,aACA,IAAIC,EAAoB,8CAA+CC,EAAmB,+BAC1F,SAASC,EAAWC,GAChBJ,EAASK,KAAKC,MACdA,KAAKC,MAAMH,GAiDf,OA/CAD,EAAWK,UAAYC,OAAOC,OAAOV,EAASQ,WAC9CL,EAAWK,UAAUG,YAAcR,EACnCA,EAAWK,UAAUI,SAAW,SAChCT,EAAWK,UAAUK,QAAU,SAAUC,GACrC,OAAOA,EAAQC,gBAAgBT,KAAKU,OAExCb,EAAWK,UAAUS,eAAiB,SAAUD,GAE5C,IADA,IAAIE,EAAIZ,KAAKa,OAAOC,OACbF,KACH,GAAIZ,KAAKa,OAAOD,GAAGF,OAASA,EACxB,OAAOV,KAAKa,OAAOD,IAI/Bf,EAAWK,UAAUa,SAAW,SAAUP,EAASQ,GAC/C,MAAe,WAAXA,EACOhB,KAAKF,IAAM,IAEXU,EAAQS,OAAO,KAAOjB,KAAKF,IAAM,KAAME,KAAKO,QAAQC,GAAUQ,IAG7EnB,EAAWK,UAAUD,MAAQ,SAAUH,GACnCE,KAAKF,IAAMA,GAAO,GAClBE,KAAKa,UACL,IAAIK,EAAcvB,EAAkBwB,KAAKnB,KAAKF,KAC9C,GAAIoB,EAAa,CAEb,IADA,IAAiCE,EAA7BC,EAAaH,EAAY,GACtBE,EAAQxB,EAAiBuB,KAAKE,IACjCrB,KAAKa,OAAOS,MACRC,KAAMH,EAAM,GACZV,KAAMU,EAAM,KAGpBpB,KAAKU,KAAOQ,EAAY,QAExBlB,KAAKU,KAAO,GAEhBV,KAAKuB,KAAOvB,KAAKU,MAErBb,EAAWK,UAAUsB,OAAS,SAAUC,GACpC,IAAIC,EAAO1B,KAAK2B,YAAYF,GAK5B,OAJKC,KACDA,EAAO1B,KAAK4B,eAAeH,IACtB3B,IAAME,KAAKF,KAEb4B,GAEJ7B","file":"../../../nodes/core/StructNode.js","sourcesContent":["define([\r\n    './TempNode'\r\n], function (TempNode) {\r\n    'use strict';\r\n    var declarationRegexp = /^struct\\s*([a-z_0-9]+)\\s*{\\s*((.|\\n)*?)}/img, propertiesRegexp = /\\s*(\\w*?)\\s*(\\w*?)(\\=|\\;)/img;\r\n    function StructNode(src) {\r\n        TempNode.call(this);\r\n        this.parse(src);\r\n    }\r\n    StructNode.prototype = Object.create(TempNode.prototype);\r\n    StructNode.prototype.constructor = StructNode;\r\n    StructNode.prototype.nodeType = 'Struct';\r\n    StructNode.prototype.getType = function (builder) {\r\n        return builder.getTypeByFormat(this.name);\r\n    };\r\n    StructNode.prototype.getInputByName = function (name) {\r\n        var i = this.inputs.length;\r\n        while (i--) {\r\n            if (this.inputs[i].name === name) {\r\n                return this.inputs[i];\r\n            }\r\n        }\r\n    };\r\n    StructNode.prototype.generate = function (builder, output) {\r\n        if (output === 'source') {\r\n            return this.src + ';';\r\n        } else {\r\n            return builder.format('( ' + this.src + ' )', this.getType(builder), output);\r\n        }\r\n    };\r\n    StructNode.prototype.parse = function (src) {\r\n        this.src = src || '';\r\n        this.inputs = [];\r\n        var declaration = declarationRegexp.exec(this.src);\r\n        if (declaration) {\r\n            var properties = declaration[2], match;\r\n            while (match = propertiesRegexp.exec(properties)) {\r\n                this.inputs.push({\r\n                    type: match[1],\r\n                    name: match[2]\r\n                });\r\n            }\r\n            this.name = declaration[1];\r\n        } else {\r\n            this.name = '';\r\n        }\r\n        this.type = this.name;\r\n    };\r\n    StructNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.src = this.src;\r\n        }\r\n        return data;\r\n    };\r\n    return StructNode;\r\n});"]}