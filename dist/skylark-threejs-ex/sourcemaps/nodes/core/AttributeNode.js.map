{"version":3,"sources":["nodes/core/AttributeNode.js"],"names":["define","Node","AttributeNode","name","type","call","this","prototype","Object","create","constructor","nodeType","getAttributeType","builder","getConstructorFromLength","getType","getTypeByFormat","generate","output","attribute","getAttribute","isShader","varying","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,UACD,SAAUC,GACT,aACA,SAASC,EAAcC,EAAMC,GACzBH,EAAKI,KAAKC,KAAMF,GAChBE,KAAKH,KAAOA,EA8BhB,OA5BAD,EAAcK,UAAYC,OAAOC,OAAOR,EAAKM,WAC7CL,EAAcK,UAAUG,YAAcR,EACtCA,EAAcK,UAAUI,SAAW,YACnCT,EAAcK,UAAUK,iBAAmB,SAAUC,GACjD,MAA4B,iBAAdP,KAAKF,KAAoBS,EAAQC,yBAAyBR,KAAKF,MAAQE,KAAKF,MAE9FF,EAAcK,UAAUQ,QAAU,SAAUF,GACxC,IAAIT,EAAOE,KAAKM,iBAAiBC,GACjC,OAAOA,EAAQG,gBAAgBZ,IAEnCF,EAAcK,UAAUU,SAAW,SAAUJ,EAASK,GAClD,IAAId,EAAOE,KAAKM,iBAAiBC,GAC7BM,EAAYN,EAAQO,aAAad,KAAKH,KAAMC,GAAOD,EAAOU,EAAQQ,SAAS,UAAYf,KAAKH,KAAOgB,EAAUG,QAAQnB,KACzH,OAAOU,EAAQU,OAAOpB,EAAMG,KAAKS,QAAQF,GAAUK,IAEvDhB,EAAcK,UAAUiB,KAAO,SAAUC,GAGrC,OAFAxB,EAAKM,UAAUiB,KAAKnB,KAAKC,KAAMmB,GAC/BnB,KAAKF,KAAOqB,EAAOrB,KACZE,MAEXJ,EAAcK,UAAUmB,OAAS,SAAUC,GACvC,IAAIC,EAAOtB,KAAKuB,YAAYF,GAK5B,OAJKC,KACDA,EAAOtB,KAAKwB,eAAeH,IACtBvB,KAAOE,KAAKF,MAEdwB,GAEJ1B","file":"../../../nodes/core/AttributeNode.js","sourcesContent":["define([\n    './Node'\n], function (Node) {\n    'use strict';\n    function AttributeNode(name, type) {\n        Node.call(this, type);\n        this.name = name;\n    }\n    AttributeNode.prototype = Object.create(Node.prototype);\n    AttributeNode.prototype.constructor = AttributeNode;\n    AttributeNode.prototype.nodeType = 'Attribute';\n    AttributeNode.prototype.getAttributeType = function (builder) {\n        return typeof this.type === 'number' ? builder.getConstructorFromLength(this.type) : this.type;\n    };\n    AttributeNode.prototype.getType = function (builder) {\n        var type = this.getAttributeType(builder);\n        return builder.getTypeByFormat(type);\n    };\n    AttributeNode.prototype.generate = function (builder, output) {\n        var type = this.getAttributeType(builder);\n        var attribute = builder.getAttribute(this.name, type), name = builder.isShader('vertex') ? this.name : attribute.varying.name;\n        return builder.format(name, this.getType(builder), output);\n    };\n    AttributeNode.prototype.copy = function (source) {\n        Node.prototype.copy.call(this, source);\n        this.type = source.type;\n        return this;\n    };\n    AttributeNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.type = this.type;\n        }\n        return data;\n    };\n    return AttributeNode;\n});"]}