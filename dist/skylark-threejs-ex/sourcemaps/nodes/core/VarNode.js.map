{"version":3,"sources":["nodes/core/VarNode.js"],"names":["define","Node","VarNode","type","value","call","this","prototype","Object","create","constructor","nodeType","getType","builder","getTypeByFormat","generate","output","varying","getVar","uuid","isShader","addNodeCode","name","build","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,UACD,SAAUC,GACT,aACA,SAASC,EAAQC,EAAMC,GACnBH,EAAKI,KAAKC,KAAMH,GAChBG,KAAKF,MAAQA,EA+BjB,OA7BAF,EAAQK,UAAYC,OAAOC,OAAOR,EAAKM,WACvCL,EAAQK,UAAUG,YAAcR,EAChCA,EAAQK,UAAUI,SAAW,MAC7BT,EAAQK,UAAUK,QAAU,SAAUC,GAClC,OAAOA,EAAQC,gBAAgBR,KAAKH,OAExCD,EAAQK,UAAUQ,SAAW,SAAUF,EAASG,GAC5C,IAAIC,EAAUJ,EAAQK,OAAOZ,KAAKa,KAAMb,KAAKH,MAI7C,OAHIG,KAAKF,OAASS,EAAQO,SAAS,WAC/BP,EAAQQ,YAAYJ,EAAQK,KAAO,MAAQhB,KAAKF,MAAMmB,MAAMV,EAASP,KAAKM,QAAQC,IAAY,KAE3FA,EAAQW,OAAOP,EAAQK,KAAMhB,KAAKM,QAAQC,GAAUG,IAE/Dd,EAAQK,UAAUkB,KAAO,SAAUC,GAI/B,OAHAzB,EAAKM,UAAUkB,KAAKpB,KAAKC,KAAMoB,GAC/BpB,KAAKH,KAAOuB,EAAOvB,KACnBG,KAAKF,MAAQsB,EAAOtB,MACbE,MAEXJ,EAAQK,UAAUoB,OAAS,SAAUC,GACjC,IAAIC,EAAOvB,KAAKwB,YAAYF,GAO5B,OANKC,KACDA,EAAOvB,KAAKyB,eAAeH,IACtBzB,KAAOG,KAAKH,KACbG,KAAKF,QACLyB,EAAKzB,MAAQE,KAAKF,MAAMuB,OAAOC,GAAMT,OAEtCU,GAEJ3B","file":"../../../nodes/core/VarNode.js","sourcesContent":["define([\r\n    './Node'\r\n], function (Node) {\r\n    'use strict';\r\n    function VarNode(type, value) {\r\n        Node.call(this, type);\r\n        this.value = value;\r\n    }\r\n    VarNode.prototype = Object.create(Node.prototype);\r\n    VarNode.prototype.constructor = VarNode;\r\n    VarNode.prototype.nodeType = 'Var';\r\n    VarNode.prototype.getType = function (builder) {\r\n        return builder.getTypeByFormat(this.type);\r\n    };\r\n    VarNode.prototype.generate = function (builder, output) {\r\n        var varying = builder.getVar(this.uuid, this.type);\r\n        if (this.value && builder.isShader('vertex')) {\r\n            builder.addNodeCode(varying.name + ' = ' + this.value.build(builder, this.getType(builder)) + ';');\r\n        }\r\n        return builder.format(varying.name, this.getType(builder), output);\r\n    };\r\n    VarNode.prototype.copy = function (source) {\r\n        Node.prototype.copy.call(this, source);\r\n        this.type = source.type;\r\n        this.value = source.value;\r\n        return this;\r\n    };\r\n    VarNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.type = this.type;\r\n            if (this.value)\r\n                data.value = this.value.toJSON(meta).uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return VarNode ;\r\n});"]}