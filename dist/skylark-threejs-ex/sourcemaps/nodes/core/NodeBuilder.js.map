{"version":3,"sources":["nodes/core/NodeBuilder.js"],"names":["define","THREE","NodeUniform","NodeUtils","NodeLib","FunctionNode","ConstNode","StructNode","Vector2Node","Vector3Node","Vector4Node","TextureNode","CubeTextureNode","elements","constructors","convertFormatToType","float","vec2","vec3","vec4","mat4","int","bool","convertTypeToFormat","t","tc","b","i","f","c","v2","v3","v4","m3","m4","NodeBuilder","this","slots","caches","contexts","keywords","nodeData","requires","uv","color","lights","fog","includes","consts","functions","structs","attributes","prefixCode","join","parsCode","vertex","fragment","code","nodeCode","resultCode","finalCode","inputs","uniforms","list","vars","varying","defines","extensions","updaters","nodes","analyzing","prototype","constructor","build","buildShader","length","uvIndex","addVaryCode","addVertexParsCode","addVertexFinalCode","position","worldPosition","normal","worldNormal","shader","node","setShader","setMaterial","material","renderer","mergeDefines","addFlow","slot","cache","context","addSlot","addCache","addContext","removeFlow","removeSlot","removeCache","removeContext","name","push","pop","Object","assign","extra","addVertexCode","addCode","addFragmentCode","addVertexNodeCode","addNodeCode","addFragmentNodeCode","clearNodeCode","clearVertexNodeCode","clearFragmentNodeCode","addFinalCode","addFragmentFinalCode","addParsCode","addFragmentParsCode","isCache","indexOf","isSlot","value","undefined","require","isDefined","getVar","uuid","type","ns","prefix","label","getVars","data","index","getTempVar","getAttribute","getCode","getVarListCode","getIncludesCode","l","nVar","formatType","getFormatByType","Error","getNodeData","isNode","createUniform","needsUpdate","uniform","createVertexUniform","createFragmentUniform","include","parent","source","includesStruct","get","included","deps","src","colorToVectorProperties","replace","colorToVector","getIncludes","sortByPosition","a","sort","getConstructorFromLength","len","isTypeMatrix","format","test","getTypeLength","parseInt","substr","getTypeFromLength","findNode","arguments","nodeCandidate","resolve","isTexture","mapping","CubeReflectionMapping","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","TextureCubeNode","isVector2","isVector3","isVector4","from","to","getTypeByFormat","getUuid","useCache","getElementByIndex","getIndexByElement","elm","isShader","mergeUniform","getTextureEncodingFromMap","map","encoding","isWebGLRenderTarget","console","warn","texture","LinearEncoding","gamma","GammaEncoding"],"mappings":"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","file":"../../../nodes/core/NodeBuilder.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    './NodeUniform',\r\n    './NodeUtils',\r\n    './NodeLib',\r\n    './FunctionNode',\r\n    './ConstNode',\r\n    './StructNode',\r\n    '../inputs/Vector2Node',\r\n    '../inputs/Vector3Node',\r\n    '../inputs/Vector4Node',\r\n    '../inputs/TextureNode',\r\n    '../inputs/CubeTextureNode',\r\n    '../misc/TextureCubeNode'\r\n], function (\r\n    THREE, \r\n    NodeUniform, \r\n    NodeUtils, \r\n    NodeLib, \r\n    FunctionNode, \r\n    ConstNode, \r\n    StructNode, \r\n    Vector2Node, \r\n    Vector3Node, \r\n    Vector4Node, \r\n    TextureNode, \r\n    CubeTextureNode, \r\n    TextureNode\r\n) {\r\n    'use strict';\r\n    var elements = NodeUtils.elements, constructors = [\r\n            'float',\r\n            'vec2',\r\n            'vec3',\r\n            'vec4'\r\n        ], convertFormatToType = {\r\n            float: 'f',\r\n            vec2: 'v2',\r\n            vec3: 'v3',\r\n            vec4: 'v4',\r\n            mat4: 'v4',\r\n            int: 'i',\r\n            bool: 'b'\r\n        }, convertTypeToFormat = {\r\n            t: 'sampler2D',\r\n            tc: 'samplerCube',\r\n            b: 'bool',\r\n            i: 'int',\r\n            f: 'float',\r\n            c: 'vec3',\r\n            v2: 'vec2',\r\n            v3: 'vec3',\r\n            v4: 'vec4',\r\n            m3: 'mat3',\r\n            m4: 'mat4'\r\n        };\r\n    function NodeBuilder() {\r\n        this.slots = [];\r\n        this.caches = [];\r\n        this.contexts = [];\r\n        this.keywords = {};\r\n        this.nodeData = {};\r\n        this.requires = {\r\n            uv: [],\r\n            color: [],\r\n            lights: false,\r\n            fog: false\r\n        };\r\n        this.includes = {\r\n            consts: [],\r\n            functions: [],\r\n            structs: []\r\n        };\r\n        this.attributes = {};\r\n        this.prefixCode = [\r\n            '#ifdef TEXTURE_LOD_EXT',\r\n            '\\t#define texCube(a, b) textureCube(a, b)',\r\n            '\\t#define texCubeBias(a, b, c) textureCubeLodEXT(a, b, c)',\r\n            '\\t#define tex2D(a, b) texture2D(a, b)',\r\n            '\\t#define tex2DBias(a, b, c) texture2DLodEXT(a, b, c)',\r\n            '#else',\r\n            '\\t#define texCube(a, b) textureCube(a, b)',\r\n            '\\t#define texCubeBias(a, b, c) textureCube(a, b, c)',\r\n            '\\t#define tex2D(a, b) texture2D(a, b)',\r\n            '\\t#define tex2DBias(a, b, c) texture2D(a, b, c)',\r\n            '#endif',\r\n            '#include <packing>',\r\n            '#include <common>'\r\n        ].join('\\n');\r\n        this.parsCode = {\r\n            vertex: '',\r\n            fragment: ''\r\n        };\r\n        this.code = {\r\n            vertex: '',\r\n            fragment: ''\r\n        };\r\n        this.nodeCode = {\r\n            vertex: '',\r\n            fragment: ''\r\n        };\r\n        this.resultCode = {\r\n            vertex: '',\r\n            fragment: ''\r\n        };\r\n        this.finalCode = {\r\n            vertex: '',\r\n            fragment: ''\r\n        };\r\n        this.inputs = {\r\n            uniforms: {\r\n                list: [],\r\n                vertex: [],\r\n                fragment: []\r\n            },\r\n            vars: {\r\n                varying: [],\r\n                vertex: [],\r\n                fragment: []\r\n            }\r\n        };\r\n        this.defines = {};\r\n        this.uniforms = {};\r\n        this.extensions = {};\r\n        this.updaters = [];\r\n        this.nodes = [];\r\n        this.analyzing = false;\r\n    }\r\n    NodeBuilder.prototype = {\r\n        constructor: NodeBuilder,\r\n        build: function (vertex, fragment) {\r\n            this.buildShader('vertex', vertex);\r\n            this.buildShader('fragment', fragment);\r\n            for (var i = 0; i < this.requires.uv.length; i++) {\r\n                if (this.requires.uv[i]) {\r\n                    var uvIndex = i > 0 ? i + 1 : '';\r\n                    this.addVaryCode('varying vec2 vUv' + uvIndex + ';');\r\n                    if (i > 0) {\r\n                        this.addVertexParsCode('attribute vec2 uv' + uvIndex + ';');\r\n                    }\r\n                    this.addVertexFinalCode('vUv' + uvIndex + ' = uv' + uvIndex + ';');\r\n                }\r\n            }\r\n            if (this.requires.color[0]) {\r\n                this.addVaryCode('varying vec4 vColor;');\r\n                this.addVertexParsCode('attribute vec4 color;');\r\n                this.addVertexFinalCode('vColor = color;');\r\n            }\r\n            if (this.requires.color[1]) {\r\n                this.addVaryCode('varying vec4 vColor2;');\r\n                this.addVertexParsCode('attribute vec4 color2;');\r\n                this.addVertexFinalCode('vColor2 = color2;');\r\n            }\r\n            if (this.requires.position) {\r\n                this.addVaryCode('varying vec3 vPosition;');\r\n                this.addVertexFinalCode('vPosition = transformed;');\r\n            }\r\n            if (this.requires.worldPosition) {\r\n                this.addVaryCode('varying vec3 vWPosition;');\r\n                this.addVertexFinalCode('vWPosition = ( modelMatrix * vec4( transformed, 1.0 ) ).xyz;');\r\n            }\r\n            if (this.requires.normal) {\r\n                this.addVaryCode('varying vec3 vObjectNormal;');\r\n                this.addVertexFinalCode('vObjectNormal = normal;');\r\n            }\r\n            if (this.requires.worldNormal) {\r\n                this.addVaryCode('varying vec3 vWNormal;');\r\n                this.addVertexFinalCode('vWNormal = inverseTransformDirection( transformedNormal, viewMatrix ).xyz;');\r\n            }\r\n            return this;\r\n        },\r\n        buildShader: function (shader, node) {\r\n            this.resultCode[shader] = node.build(this.setShader(shader), 'v4');\r\n        },\r\n        setMaterial: function (material, renderer) {\r\n            this.material = material;\r\n            this.renderer = renderer;\r\n            this.requires.lights = material.lights;\r\n            this.requires.fog = material.fog;\r\n            this.mergeDefines(material.defines);\r\n            return this;\r\n        },\r\n        addFlow: function (slot, cache, context) {\r\n            return this.addSlot(slot).addCache(cache).addContext(context);\r\n        },\r\n        removeFlow: function () {\r\n            return this.removeSlot().removeCache().removeContext();\r\n        },\r\n        addCache: function (name) {\r\n            this.cache = name || '';\r\n            this.caches.push(this.cache);\r\n            return this;\r\n        },\r\n        removeCache: function () {\r\n            this.caches.pop();\r\n            this.cache = this.caches[this.caches.length - 1] || '';\r\n            return this;\r\n        },\r\n        addContext: function (context) {\r\n            this.context = Object.assign({}, this.context, context);\r\n            this.context.extra = this.context.extra || {};\r\n            this.contexts.push(this.context);\r\n            return this;\r\n        },\r\n        removeContext: function () {\r\n            this.contexts.pop();\r\n            this.context = this.contexts[this.contexts.length - 1] || {};\r\n            return this;\r\n        },\r\n        addSlot: function (name) {\r\n            this.slot = name || '';\r\n            this.slots.push(this.slot);\r\n            return this;\r\n        },\r\n        removeSlot: function () {\r\n            this.slots.pop();\r\n            this.slot = this.slots[this.slots.length - 1] || '';\r\n            return this;\r\n        },\r\n        addVertexCode: function (code) {\r\n            this.addCode(code, 'vertex');\r\n        },\r\n        addFragmentCode: function (code) {\r\n            this.addCode(code, 'fragment');\r\n        },\r\n        addCode: function (code, shader) {\r\n            this.code[shader || this.shader] += code + '\\n';\r\n        },\r\n        addVertexNodeCode: function (code) {\r\n            this.addNodeCode(code, 'vertex');\r\n        },\r\n        addFragmentNodeCode: function (code) {\r\n            this.addNodeCode(code, 'fragment');\r\n        },\r\n        addNodeCode: function (code, shader) {\r\n            this.nodeCode[shader || this.shader] += code + '\\n';\r\n        },\r\n        clearNodeCode: function (shader) {\r\n            shader = shader || this.shader;\r\n            var code = this.nodeCode[shader];\r\n            this.nodeCode[shader] = '';\r\n            return code;\r\n        },\r\n        clearVertexNodeCode: function () {\r\n            return this.clearNodeCode('vertex');\r\n        },\r\n        clearFragmentNodeCode: function () {\r\n            return this.clearNodeCode('fragment');\r\n        },\r\n        addVertexFinalCode: function (code) {\r\n            this.addFinalCode(code, 'vertex');\r\n        },\r\n        addFragmentFinalCode: function (code) {\r\n            this.addFinalCode(code, 'fragment');\r\n        },\r\n        addFinalCode: function (code, shader) {\r\n            this.finalCode[shader || this.shader] += code + '\\n';\r\n        },\r\n        addVertexParsCode: function (code) {\r\n            this.addParsCode(code, 'vertex');\r\n        },\r\n        addFragmentParsCode: function (code) {\r\n            this.addParsCode(code, 'fragment');\r\n        },\r\n        addParsCode: function (code, shader) {\r\n            this.parsCode[shader || this.shader] += code + '\\n';\r\n        },\r\n        addVaryCode: function (code) {\r\n            this.addVertexParsCode(code);\r\n            this.addFragmentParsCode(code);\r\n        },\r\n        isCache: function (name) {\r\n            return this.caches.indexOf(name) !== -1;\r\n        },\r\n        isSlot: function (name) {\r\n            return this.slots.indexOf(name) !== -1;\r\n        },\r\n        define: function (name, value) {\r\n            this.defines[name] = value === undefined ? 1 : value;\r\n        },\r\n        require: function (name) {\r\n            this.requires[name] = true;\r\n        },\r\n        isDefined: function (name) {\r\n            return this.defines[name] !== undefined;\r\n        },\r\n        getVar: function (uuid, type, ns, shader = 'varying', prefix = 'V', label = '') {\r\n            var vars = this.getVars(shader), data = vars[uuid];\r\n            if (!data) {\r\n                var index = vars.length, name = ns ? ns : 'node' + prefix + index + (label ? '_' + label : '');\r\n                data = {\r\n                    name: name,\r\n                    type: type\r\n                };\r\n                vars.push(data);\r\n                vars[uuid] = data;\r\n            }\r\n            return data;\r\n        },\r\n        getTempVar: function (uuid, type, ns, label) {\r\n            return this.getVar(uuid, type, ns, this.shader, 'T', label);\r\n        },\r\n        getAttribute: function (name, type) {\r\n            if (!this.attributes[name]) {\r\n                var varying = this.getVar(name, type);\r\n                this.addVertexParsCode('attribute ' + type + ' ' + name + ';');\r\n                this.addVertexFinalCode(varying.name + ' = ' + name + ';');\r\n                this.attributes[name] = {\r\n                    varying: varying,\r\n                    name: name,\r\n                    type: type\r\n                };\r\n            }\r\n            return this.attributes[name];\r\n        },\r\n        getCode: function (shader) {\r\n            return [\r\n                this.prefixCode,\r\n                this.parsCode[shader],\r\n                this.getVarListCode(this.getVars('varying'), 'varying'),\r\n                this.getVarListCode(this.inputs.uniforms[shader], 'uniform'),\r\n                this.getIncludesCode('consts', shader),\r\n                this.getIncludesCode('structs', shader),\r\n                this.getIncludesCode('functions', shader),\r\n                'void main() {',\r\n                this.getVarListCode(this.getVars(shader)),\r\n                this.code[shader],\r\n                this.resultCode[shader],\r\n                this.finalCode[shader],\r\n                '}'\r\n            ].join('\\n');\r\n        },\r\n        getVarListCode: function (vars, prefix) {\r\n            prefix = prefix || '';\r\n            var code = '';\r\n            for (var i = 0, l = vars.length; i < l; ++i) {\r\n                var nVar = vars[i], type = nVar.type, name = nVar.name;\r\n                var formatType = this.getFormatByType(type);\r\n                if (formatType === undefined) {\r\n                    throw new Error('Node pars ' + formatType + ' not found.');\r\n                }\r\n                code += prefix + ' ' + formatType + ' ' + name + ';\\n';\r\n            }\r\n            return code;\r\n        },\r\n        getVars: function (shader) {\r\n            return this.inputs.vars[shader || this.shader];\r\n        },\r\n        getNodeData: function (node) {\r\n            var uuid = node.isNode ? node.uuid : node;\r\n            return this.nodeData[uuid] = this.nodeData[uuid] || {};\r\n        },\r\n        createUniform: function (shader, type, node, ns, needsUpdate, label) {\r\n            var uniforms = this.inputs.uniforms, index = uniforms.list.length;\r\n            var uniform = new NodeUniform({\r\n                type: type,\r\n                name: ns ? ns : 'nodeU' + index + (label ? '_' + label : ''),\r\n                node: node,\r\n                needsUpdate: needsUpdate\r\n            });\r\n            uniforms.list.push(uniform);\r\n            uniforms[shader].push(uniform);\r\n            uniforms[shader][uniform.name] = uniform;\r\n            this.uniforms[uniform.name] = uniform;\r\n            return uniform;\r\n        },\r\n        createVertexUniform: function (type, node, ns, needsUpdate, label) {\r\n            return this.createUniform('vertex', type, node, ns, needsUpdate, label);\r\n        },\r\n        createFragmentUniform: function (type, node, ns, needsUpdate, label) {\r\n            return this.createUniform('fragment', type, node, ns, needsUpdate, label);\r\n        },\r\n        include: function (node, parent, source) {\r\n            var includesStruct;\r\n            node = typeof node === 'string' ? NodeLib.get(node) : node;\r\n            if (this.context.include === false) {\r\n                return node.name;\r\n            }\r\n            if (node instanceof FunctionNode) {\r\n                includesStruct = this.includes.functions;\r\n            } else if (node instanceof ConstNode) {\r\n                includesStruct = this.includes.consts;\r\n            } else if (node instanceof StructNode) {\r\n                includesStruct = this.includes.structs;\r\n            }\r\n            var includes = includesStruct[this.shader] = includesStruct[this.shader] || [];\r\n            if (node) {\r\n                var included = includes[node.name];\r\n                if (!included) {\r\n                    included = includes[node.name] = {\r\n                        node: node,\r\n                        deps: []\r\n                    };\r\n                    includes.push(included);\r\n                    included.src = node.build(this, 'source');\r\n                }\r\n                if (node instanceof FunctionNode && parent && includes[parent.name] && includes[parent.name].deps.indexOf(node) == -1) {\r\n                    includes[parent.name].deps.push(node);\r\n                    if (node.includes && node.includes.length) {\r\n                        var i = 0;\r\n                        do {\r\n                            this.include(node.includes[i++], parent);\r\n                        } while (i < node.includes.length);\r\n                    }\r\n                }\r\n                if (source) {\r\n                    included.src = source;\r\n                }\r\n                return node.name;\r\n            } else {\r\n                throw new Error('Include not found.');\r\n            }\r\n        },\r\n        colorToVectorProperties: function (color) {\r\n            return color.replace('r', 'x').replace('g', 'y').replace('b', 'z').replace('a', 'w');\r\n        },\r\n        colorToVector: function (color) {\r\n            return color.replace(/c/g, 'v3');\r\n        },\r\n        getIncludes: function (type, shader) {\r\n            return this.includes[type][shader || this.shader];\r\n        },\r\n        getIncludesCode: function () {\r\n            function sortByPosition(a, b) {\r\n                return a.deps.length - b.deps.length;\r\n            }\r\n            return function getIncludesCode(type, shader) {\r\n                var includes = this.getIncludes(type, shader);\r\n                if (!includes)\r\n                    return '';\r\n                var code = '', includes = includes.sort(sortByPosition);\r\n                for (var i = 0; i < includes.length; i++) {\r\n                    if (includes[i].src)\r\n                        code += includes[i].src + '\\n';\r\n                }\r\n                return code;\r\n            };\r\n        }(),\r\n        getConstructorFromLength: function (len) {\r\n            return constructors[len - 1];\r\n        },\r\n        isTypeMatrix: function (format) {\r\n            return /^m/.test(format);\r\n        },\r\n        getTypeLength: function (type) {\r\n            if (type === 'f')\r\n                return 1;\r\n            return parseInt(this.colorToVector(type).substr(1));\r\n        },\r\n        getTypeFromLength: function (len) {\r\n            if (len === 1)\r\n                return 'f';\r\n            return 'v' + len;\r\n        },\r\n        findNode: function () {\r\n            for (var i = 0; i < arguments.length; i++) {\r\n                var nodeCandidate = arguments[i];\r\n                if (nodeCandidate !== undefined && nodeCandidate.isNode) {\r\n                    return nodeCandidate;\r\n                }\r\n            }\r\n        },\r\n        resolve: function () {\r\n            for (var i = 0; i < arguments.length; i++) {\r\n                var nodeCandidate = arguments[i];\r\n                if (nodeCandidate !== undefined) {\r\n                    if (nodeCandidate.isNode) {\r\n                        return nodeCandidate;\r\n                    } else if (nodeCandidate.isTexture) {\r\n                        switch (nodeCandidate.mapping) {\r\n                        case THREE.CubeReflectionMapping:\r\n                        case THREE.CubeRefractionMapping:\r\n                            return new CubeTextureNode(nodeCandidate);\r\n                            break;\r\n                        case THREE.CubeUVReflectionMapping:\r\n                        case THREE.CubeUVRefractionMapping:\r\n                            return new TextureCubeNode(new TextureNode(nodeCandidate));\r\n                            break;\r\n                        default:\r\n                            return new TextureNode(nodeCandidate);\r\n                        }\r\n                    } else if (nodeCandidate.isVector2) {\r\n                        return new Vector2Node(nodeCandidate);\r\n                    } else if (nodeCandidate.isVector3) {\r\n                        return new Vector3Node(nodeCandidate);\r\n                    } else if (nodeCandidate.isVector4) {\r\n                        return new Vector4Node(nodeCandidate);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        format: function (code, from, to) {\r\n            var typeToType = this.colorToVector(to + ' <- ' + from);\r\n            switch (typeToType) {\r\n            case 'f <- v2':\r\n                return code + '.x';\r\n            case 'f <- v3':\r\n                return code + '.x';\r\n            case 'f <- v4':\r\n                return code + '.x';\r\n            case 'f <- i':\r\n            case 'f <- b':\r\n                return 'float( ' + code + ' )';\r\n            case 'v2 <- f':\r\n                return 'vec2( ' + code + ' )';\r\n            case 'v2 <- v3':\r\n                return code + '.xy';\r\n            case 'v2 <- v4':\r\n                return code + '.xy';\r\n            case 'v2 <- i':\r\n            case 'v2 <- b':\r\n                return 'vec2( float( ' + code + ' ) )';\r\n            case 'v3 <- f':\r\n                return 'vec3( ' + code + ' )';\r\n            case 'v3 <- v2':\r\n                return 'vec3( ' + code + ', 0.0 )';\r\n            case 'v3 <- v4':\r\n                return code + '.xyz';\r\n            case 'v3 <- i':\r\n            case 'v3 <- b':\r\n                return 'vec2( float( ' + code + ' ) )';\r\n            case 'v4 <- f':\r\n                return 'vec4( ' + code + ' )';\r\n            case 'v4 <- v2':\r\n                return 'vec4( ' + code + ', 0.0, 1.0 )';\r\n            case 'v4 <- v3':\r\n                return 'vec4( ' + code + ', 1.0 )';\r\n            case 'v4 <- i':\r\n            case 'v4 <- b':\r\n                return 'vec4( float( ' + code + ' ) )';\r\n            case 'i <- f':\r\n            case 'i <- b':\r\n                return 'int( ' + code + ' )';\r\n            case 'i <- v2':\r\n                return 'int( ' + code + '.x )';\r\n            case 'i <- v3':\r\n                return 'int( ' + code + '.x )';\r\n            case 'i <- v4':\r\n                return 'int( ' + code + '.x )';\r\n            case 'b <- f':\r\n                return '( ' + code + ' != 0.0 )';\r\n            case 'b <- v2':\r\n                return '( ' + code + ' != vec2( 0.0 ) )';\r\n            case 'b <- v3':\r\n                return '( ' + code + ' != vec3( 0.0 ) )';\r\n            case 'b <- v4':\r\n                return '( ' + code + ' != vec4( 0.0 ) )';\r\n            case 'b <- i':\r\n                return '( ' + code + ' != 0 )';\r\n            }\r\n            return code;\r\n        },\r\n        getTypeByFormat: function (format) {\r\n            return convertFormatToType[format] || format;\r\n        },\r\n        getFormatByType: function (type) {\r\n            return convertTypeToFormat[type] || type;\r\n        },\r\n        getUuid: function (uuid, useCache) {\r\n            useCache = useCache !== undefined ? useCache : true;\r\n            if (useCache && this.cache)\r\n                uuid = this.cache + '-' + uuid;\r\n            return uuid;\r\n        },\r\n        getElementByIndex: function (index) {\r\n            return elements[index];\r\n        },\r\n        getIndexByElement: function (elm) {\r\n            return elements.indexOf(elm);\r\n        },\r\n        isShader: function (shader) {\r\n            return this.shader === shader;\r\n        },\r\n        setShader: function (shader) {\r\n            this.shader = shader;\r\n            return this;\r\n        },\r\n        mergeDefines: function (defines) {\r\n            for (var name in defines) {\r\n                this.defines[name] = defines[name];\r\n            }\r\n            return this.defines;\r\n        },\r\n        mergeUniform: function (uniforms) {\r\n            for (var name in uniforms) {\r\n                this.uniforms[name] = uniforms[name];\r\n            }\r\n            return this.uniforms;\r\n        },\r\n        getTextureEncodingFromMap: function (map) {\r\n            var encoding;\r\n            if (!map) {\r\n                encoding = THREE.LinearEncoding;\r\n            } else if (map.isTexture) {\r\n                encoding = map.encoding;\r\n            } else if (map.isWebGLRenderTarget) {\r\n                console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\r\n                encoding = map.texture.encoding;\r\n            }\r\n            if (encoding === THREE.LinearEncoding && this.context.gamma) {\r\n                encoding = THREE.GammaEncoding;\r\n            }\r\n            return encoding;\r\n        }\r\n    };\r\n    return NodeBuilder;\r\n});"]}