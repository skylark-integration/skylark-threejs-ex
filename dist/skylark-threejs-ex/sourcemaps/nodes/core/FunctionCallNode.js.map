{"version":3,"sources":["nodes/core/FunctionCallNode.js"],"names":["define","TempNode","FunctionCallNode","func","inputs","call","this","setFunction","prototype","Object","create","constructor","nodeType","value","getFunction","getType","builder","generate","output","type","code","build","params","i","length","inpt","param","name","push","getTypeByFormat","join","format","copy","source","prop","toJSON","meta","data","getJSONNode","createJSONNode","uuid","node"],"mappings":";;;;;;;AAAAA,QACI,cACD,SAAUC,GACT,aACA,SAASC,EAAiBC,EAAMC,GAC5BH,EAASI,KAAKC,MACdA,KAAKC,YAAYJ,EAAMC,GAiD3B,OA/CAF,EAAiBM,UAAYC,OAAOC,OAAOT,EAASO,WACpDN,EAAiBM,UAAUG,YAAcT,EACzCA,EAAiBM,UAAUI,SAAW,eACtCV,EAAiBM,UAAUD,YAAc,SAAUJ,EAAMC,GACrDE,KAAKO,MAAQV,EACbG,KAAKF,OAASA,OAElBF,EAAiBM,UAAUM,YAAc,WACrC,OAAOR,KAAKO,OAEhBX,EAAiBM,UAAUO,QAAU,SAAUC,GAC3C,OAAOV,KAAKO,MAAME,QAAQC,IAE9Bd,EAAiBM,UAAUS,SAAW,SAAUD,EAASE,GAGrD,IAFA,IAAIC,EAAOb,KAAKS,QAAQC,GAAUb,EAAOG,KAAKO,MAC1CO,EAAOjB,EAAKkB,MAAML,EAASE,GAAU,KAAMI,KACtCC,EAAI,EAAGA,EAAIpB,EAAKC,OAAOoB,OAAQD,IAAK,CACzC,IAAIE,EAAOtB,EAAKC,OAAOmB,GAAIG,EAAQpB,KAAKF,OAAOmB,IAAMjB,KAAKF,OAAOqB,EAAKE,MACtEL,EAAOM,KAAKF,EAAML,MAAML,EAASA,EAAQa,gBAAgBJ,EAAKN,QAGlE,OADAC,GAAQE,EAAOQ,KAAK,MAAQ,KACrBd,EAAQe,OAAOX,EAAMD,EAAMD,IAEtChB,EAAiBM,UAAUwB,KAAO,SAAUC,GAExC,IAAK,IAAIC,KADTjC,EAASO,UAAUwB,KAAK3B,KAAKC,KAAM2B,GAClBA,EAAO7B,OACpBE,KAAKF,OAAO8B,GAAQD,EAAO7B,OAAO8B,GAGtC,OADA5B,KAAKO,MAAQoB,EAAOpB,MACbP,MAEXJ,EAAiBM,UAAU2B,OAAS,SAAUC,GAC1C,IAAIC,EAAO/B,KAAKgC,YAAYF,GAC5B,IAAKC,EAAM,CACP,IAAIlC,EAAOG,KAAKO,MAGhB,IAFAwB,EAAO/B,KAAKiC,eAAeH,IACtBvB,MAAQP,KAAKO,MAAMsB,OAAOC,GAAMI,KACjCrC,EAAKC,OAAOoB,OAAQ,CACpBa,EAAKjC,UACL,IAAK,IAAImB,EAAI,EAAGA,EAAIpB,EAAKC,OAAOoB,OAAQD,IAAK,CACzC,IAAIE,EAAOtB,EAAKC,OAAOmB,GAAIkB,EAAOnC,KAAKF,OAAOmB,IAAMjB,KAAKF,OAAOqB,EAAKE,MACrEU,EAAKjC,OAAOqB,EAAKE,MAAQc,EAAKN,OAAOC,GAAMI,OAIvD,OAAOH,GAEJnC","file":"../../../nodes/core/FunctionCallNode.js","sourcesContent":["define([\n    './TempNode'\n], function (TempNode) {\n    'use strict';\n    function FunctionCallNode(func, inputs) {\n        TempNode.call(this);\n        this.setFunction(func, inputs);\n    }\n    FunctionCallNode.prototype = Object.create(TempNode.prototype);\n    FunctionCallNode.prototype.constructor = FunctionCallNode;\n    FunctionCallNode.prototype.nodeType = 'FunctionCall';\n    FunctionCallNode.prototype.setFunction = function (func, inputs) {\n        this.value = func;\n        this.inputs = inputs || [];\n    };\n    FunctionCallNode.prototype.getFunction = function () {\n        return this.value;\n    };\n    FunctionCallNode.prototype.getType = function (builder) {\n        return this.value.getType(builder);\n    };\n    FunctionCallNode.prototype.generate = function (builder, output) {\n        var type = this.getType(builder), func = this.value;\n        var code = func.build(builder, output) + '( ', params = [];\n        for (var i = 0; i < func.inputs.length; i++) {\n            var inpt = func.inputs[i], param = this.inputs[i] || this.inputs[inpt.name];\n            params.push(param.build(builder, builder.getTypeByFormat(inpt.type)));\n        }\n        code += params.join(', ') + ' )';\n        return builder.format(code, type, output);\n    };\n    FunctionCallNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        for (var prop in source.inputs) {\n            this.inputs[prop] = source.inputs[prop];\n        }\n        this.value = source.value;\n        return this;\n    };\n    FunctionCallNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            var func = this.value;\n            data = this.createJSONNode(meta);\n            data.value = this.value.toJSON(meta).uuid;\n            if (func.inputs.length) {\n                data.inputs = {};\n                for (var i = 0; i < func.inputs.length; i++) {\n                    var inpt = func.inputs[i], node = this.inputs[i] || this.inputs[inpt.name];\n                    data.inputs[inpt.name] = node.toJSON(meta).uuid;\n                }\n            }\n        }\n        return data;\n    };\n    return FunctionCallNode;\n});"]}