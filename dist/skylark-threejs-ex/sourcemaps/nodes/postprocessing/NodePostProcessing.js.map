{"version":3,"sources":["nodes/postprocessing/NodePostProcessing.js"],"names":["define","THREE","NodeMaterial","ScreenNode","NodePostProcessing","renderer","renderTarget","undefined","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getDrawingBufferSize","Vector2","WebGLRenderTarget","width","height","this","output","material","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","needsUpdate","prototype","constructor","render","frame","dispose","fragment","value","build","uniforms","renderTexture","texture","setRenderer","setRenderTexture","setRenderTarget","updateNode","setPixelRatio","getSize","setSize","pixelRatio","getPixelRatio","copy","source","toJSON","meta","nodes","post","uuid","data","type","name","JSON","stringify","userData"],"mappings":";;;;;;;AAAAA,QACI,kBACA,4BACA,wBACD,SACCC,EACAC,EACAC,GAEA,aACA,SAASC,EAAmBC,EAAUC,GAClC,QAAqBC,IAAjBD,EAA4B,CAC5B,IAAIE,GACAC,UAAWR,EAAMS,aACjBC,UAAWV,EAAMS,aACjBE,OAAQX,EAAMY,WACdC,eAAe,GAEfC,EAAOV,EAASW,qBAAqB,IAAIf,EAAMgB,SACnDX,EAAe,IAAIL,EAAMiB,kBAAkBH,EAAKI,MAAOJ,EAAKK,OAAQZ,GAExEa,KAAKhB,SAAWA,EAChBgB,KAAKf,aAAeA,EACpBe,KAAKC,OAAS,IAAInB,EAClBkB,KAAKE,SAAW,IAAIrB,EACpBmB,KAAKG,OAAS,IAAIvB,EAAMwB,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GAC5DJ,KAAKK,MAAQ,IAAIzB,EAAM0B,MACvBN,KAAKO,KAAO,IAAI3B,EAAM4B,KAAK,IAAI5B,EAAM6B,oBAAoB,EAAG,GAAIT,KAAKE,UACrEF,KAAKO,KAAKG,eAAgB,EAC1BV,KAAKK,MAAMM,IAAIX,KAAKO,MACpBP,KAAKY,aAAc,EAyDvB,OAvDA7B,EAAmB8B,WACfC,YAAa/B,EACbgC,OAAQ,SAAUV,EAAOF,EAAQa,GACzBhB,KAAKY,cACLZ,KAAKE,SAASe,UACdjB,KAAKE,SAASgB,SAASC,MAAQnB,KAAKC,OACpCD,KAAKE,SAASkB,QACVpB,KAAKE,SAASmB,SAASC,gBACvBtB,KAAKE,SAASmB,SAASC,cAAcH,MAAQnB,KAAKf,aAAasC,SAEnEvB,KAAKY,aAAc,GAEvBI,EAAMQ,YAAYxB,KAAKhB,UAAUyC,iBAAiBzB,KAAKf,aAAasC,SACpEvB,KAAKhB,SAAS0C,gBAAgB1B,KAAKf,cACnCe,KAAKhB,SAAS+B,OAAOV,EAAOF,GAC5Ba,EAAMW,WAAW3B,KAAKE,UACtBF,KAAKhB,SAAS0C,gBAAgB,MAC9B1B,KAAKhB,SAAS+B,OAAOf,KAAKK,MAAOL,KAAKG,SAE1CyB,cAAe,SAAUT,GACrBnB,KAAKhB,SAAS4C,cAAcT,GAC5B,IAAIzB,EAAOM,KAAKhB,SAAS6C,QAAQ,IAAIjD,EAAMgB,SAC3CI,KAAK8B,QAAQpC,EAAKI,MAAOJ,EAAKK,SAElC+B,QAAS,SAAUhC,EAAOC,GACtB,IAAIgC,EAAa/B,KAAKhB,SAASgD,gBAC/BhC,KAAKf,aAAa6C,QAAQhC,EAAQiC,EAAYhC,EAASgC,GACvD/B,KAAKhB,SAAS8C,QAAQhC,EAAOC,IAEjCkC,KAAM,SAAUC,GAEZ,OADAlC,KAAKC,OAASiC,EAAOjC,OACdD,MAEXmC,OAAQ,SAAUC,GAOd,SAN4BlD,IAATkD,GAAsC,iBAATA,KAE5CA,GAASC,WAETD,IAASA,EAAKE,OACdF,EAAKE,UACJF,EAAKE,KAAKtC,KAAKuC,MAAO,CACvB,IAAIC,KACJA,EAAKD,KAAOvC,KAAKuC,KACjBC,EAAKC,KAAO,qBACZL,EAAKE,KAAKtC,KAAKuC,MAAQC,EACL,KAAdxC,KAAK0C,OACLF,EAAKE,KAAO1C,KAAK0C,MACiB,OAAlCC,KAAKC,UAAU5C,KAAK6C,YACpBL,EAAKK,SAAW7C,KAAK6C,UACzBL,EAAKvC,OAASD,KAAKC,OAAOkC,OAAOC,GAAMG,KAG3C,OADAH,EAAKE,KAAOtC,KAAKuC,KACVH,IAGRrD","file":"../../../nodes/postprocessing/NodePostProcessing.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    '../materials/NodeMaterial',\r\n    '../inputs/ScreenNode'\r\n], function (\r\n    THREE, \r\n    NodeMaterial, \r\n    ScreenNode\r\n) {\r\n    'use strict';\r\n    function NodePostProcessing(renderer, renderTarget) {\r\n        if (renderTarget === undefined) {\r\n            var parameters = {\r\n                minFilter: THREE.LinearFilter,\r\n                magFilter: THREE.LinearFilter,\r\n                format: THREE.RGBAFormat,\r\n                stencilBuffer: false\r\n            };\r\n            var size = renderer.getDrawingBufferSize(new THREE.Vector2());\r\n            renderTarget = new THREE.WebGLRenderTarget(size.width, size.height, parameters);\r\n        }\r\n        this.renderer = renderer;\r\n        this.renderTarget = renderTarget;\r\n        this.output = new ScreenNode();\r\n        this.material = new NodeMaterial();\r\n        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n        this.scene = new THREE.Scene();\r\n        this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), this.material);\r\n        this.quad.frustumCulled = false;\r\n        this.scene.add(this.quad);\r\n        this.needsUpdate = true;\r\n    }\r\n    NodePostProcessing.prototype = {\r\n        constructor: NodePostProcessing,\r\n        render: function (scene, camera, frame) {\r\n            if (this.needsUpdate) {\r\n                this.material.dispose();\r\n                this.material.fragment.value = this.output;\r\n                this.material.build();\r\n                if (this.material.uniforms.renderTexture) {\r\n                    this.material.uniforms.renderTexture.value = this.renderTarget.texture;\r\n                }\r\n                this.needsUpdate = false;\r\n            }\r\n            frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);\r\n            this.renderer.setRenderTarget(this.renderTarget);\r\n            this.renderer.render(scene, camera);\r\n            frame.updateNode(this.material);\r\n            this.renderer.setRenderTarget(null);\r\n            this.renderer.render(this.scene, this.camera);\r\n        },\r\n        setPixelRatio: function (value) {\r\n            this.renderer.setPixelRatio(value);\r\n            var size = this.renderer.getSize(new THREE.Vector2());\r\n            this.setSize(size.width, size.height);\r\n        },\r\n        setSize: function (width, height) {\r\n            var pixelRatio = this.renderer.getPixelRatio();\r\n            this.renderTarget.setSize(width * pixelRatio, height * pixelRatio);\r\n            this.renderer.setSize(width, height);\r\n        },\r\n        copy: function (source) {\r\n            this.output = source.output;\r\n            return this;\r\n        },\r\n        toJSON: function (meta) {\r\n            var isRootObject = meta === undefined || typeof meta === 'string';\r\n            if (isRootObject) {\r\n                meta = { nodes: {} };\r\n            }\r\n            if (meta && !meta.post)\r\n                meta.post = {};\r\n            if (!meta.post[this.uuid]) {\r\n                var data = {};\r\n                data.uuid = this.uuid;\r\n                data.type = 'NodePostProcessing';\r\n                meta.post[this.uuid] = data;\r\n                if (this.name !== '')\r\n                    data.name = this.name;\r\n                if (JSON.stringify(this.userData) !== '{}')\r\n                    data.userData = this.userData;\r\n                data.output = this.output.toJSON(meta).uuid;\r\n            }\r\n            meta.post = this.uuid;\r\n            return meta;\r\n        }\r\n    };\r\n    return NodePostProcessing;\r\n});"]}