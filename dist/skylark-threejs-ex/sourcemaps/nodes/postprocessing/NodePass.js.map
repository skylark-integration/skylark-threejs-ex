{"version":3,"sources":["nodes/postprocessing/NodePass.js"],"names":["define","THREE","ShaderPass","NodeMaterial","ScreenNode","NodePass","call","this","name","uuid","MathUtils","generateUUID","userData","textureID","input","material","needsUpdate","prototype","Object","create","constructor","render","dispose","fragment","value","uniforms","apply","arguments","copy","source","toJSON","meta","undefined","nodes","passes","data","type","JSON","stringify","pass"],"mappings":";;;;;;;AAAAA,QACI,kBACA,kCACA,4BACA,wBACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,SAASC,IACLH,EAAWI,KAAKC,MAChBA,KAAKC,KAAO,GACZD,KAAKE,KAAOR,EAAMS,UAAUC,eAC5BJ,KAAKK,YACLL,KAAKM,UAAY,gBACjBN,KAAKO,MAAQ,IAAIV,EACjBG,KAAKQ,SAAW,IAAIZ,EACpBI,KAAKS,aAAc,EAsCvB,OApCAX,EAASY,UAAYC,OAAOC,OAAOjB,EAAWe,WAC9CZ,EAASY,UAAUG,YAAcf,EACjCA,EAASY,UAAUI,OAAS,WACpBd,KAAKS,cACLT,KAAKQ,SAASO,UACdf,KAAKQ,SAASQ,SAASC,MAAQjB,KAAKO,MACpCP,KAAKS,aAAc,GAEvBT,KAAKkB,SAAWlB,KAAKQ,SAASU,SAC9BvB,EAAWe,UAAUI,OAAOK,MAAMnB,KAAMoB,YAE5CtB,EAASY,UAAUW,KAAO,SAAUC,GAEhC,OADAtB,KAAKO,MAAQe,EAAOf,MACbP,MAEXF,EAASY,UAAUa,OAAS,SAAUC,GAOlC,SAN4BC,IAATD,GAAsC,iBAATA,KAE5CA,GAASE,WAETF,IAASA,EAAKG,SACdH,EAAKG,YACJH,EAAKG,OAAO3B,KAAKE,MAAO,CACzB,IAAI0B,KACJA,EAAK1B,KAAOF,KAAKE,KACjB0B,EAAKC,KAAO,WACZL,EAAKG,OAAO3B,KAAKE,MAAQ0B,EACP,KAAd5B,KAAKC,OACL2B,EAAK3B,KAAOD,KAAKC,MACiB,OAAlC6B,KAAKC,UAAU/B,KAAKK,YACpBuB,EAAKvB,SAAWL,KAAKK,UACzBuB,EAAKrB,MAAQP,KAAKO,MAAMgB,OAAOC,GAAMtB,KAGzC,OADAsB,EAAKQ,KAAOhC,KAAKE,KACVsB,GAEJ1B","file":"../../../nodes/postprocessing/NodePass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    '../../postprocessing/ShaderPass',\r\n    '../materials/NodeMaterial',\r\n    '../inputs/ScreenNode'\r\n], function (\r\n    THREE, \r\n    ShaderPass, \r\n    NodeMaterial, \r\n    ScreenNode\r\n) {\r\n    'use strict';\r\n    function NodePass() {\r\n        ShaderPass.call(this);\r\n        this.name = '';\r\n        this.uuid = THREE.MathUtils.generateUUID();\r\n        this.userData = {};\r\n        this.textureID = 'renderTexture';\r\n        this.input = new ScreenNode();\r\n        this.material = new NodeMaterial();\r\n        this.needsUpdate = true;\r\n    }\r\n    NodePass.prototype = Object.create(ShaderPass.prototype);\r\n    NodePass.prototype.constructor = NodePass;\r\n    NodePass.prototype.render = function () {\r\n        if (this.needsUpdate) {\r\n            this.material.dispose();\r\n            this.material.fragment.value = this.input;\r\n            this.needsUpdate = false;\r\n        }\r\n        this.uniforms = this.material.uniforms;\r\n        ShaderPass.prototype.render.apply(this, arguments);\r\n    };\r\n    NodePass.prototype.copy = function (source) {\r\n        this.input = source.input;\r\n        return this;\r\n    };\r\n    NodePass.prototype.toJSON = function (meta) {\r\n        var isRootObject = meta === undefined || typeof meta === 'string';\r\n        if (isRootObject) {\r\n            meta = { nodes: {} };\r\n        }\r\n        if (meta && !meta.passes)\r\n            meta.passes = {};\r\n        if (!meta.passes[this.uuid]) {\r\n            var data = {};\r\n            data.uuid = this.uuid;\r\n            data.type = 'NodePass';\r\n            meta.passes[this.uuid] = data;\r\n            if (this.name !== '')\r\n                data.name = this.name;\r\n            if (JSON.stringify(this.userData) !== '{}')\r\n                data.userData = this.userData;\r\n            data.input = this.input.toJSON(meta).uuid;\r\n        }\r\n        meta.pass = this.uuid;\r\n        return meta;\r\n    };\r\n    return NodePass;\r\n});"]}