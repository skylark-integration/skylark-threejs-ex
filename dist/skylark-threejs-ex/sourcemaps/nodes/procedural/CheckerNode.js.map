{"version":3,"sources":["nodes/procedural/CheckerNode.js"],"names":["define","TempNode","FunctionNode","UVNode","CheckerNode","uv","call","this","prototype","Object","create","constructor","nodeType","Nodes","checker","join","generate","builder","output","snoise","include","format","build","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,uBACA,uBACD,SACCC,EACAC,EACAC,GAEA,aACA,SAASC,EAAYC,GACjBJ,EAASK,KAAKC,KAAM,KACpBA,KAAKF,GAAKA,GAAM,IAAIF,EAiCxB,OA/BAC,EAAYI,UAAYC,OAAOC,OAAOT,EAASO,WAC/CJ,EAAYI,UAAUG,YAAcP,EACpCA,EAAYI,UAAUI,SAAW,QACjCR,EAAYS,OASCC,QARK,IAAIZ,GACd,6BACA,8BACA,+BACA,wCACA,2BACA,KACFa,KAAK,QAGXX,EAAYI,UAAUQ,SAAW,SAAUC,EAASC,GAChD,IAAIC,EAASF,EAAQG,QAAQhB,EAAYS,MAAMC,SAC/C,OAAOG,EAAQI,OAAOF,EAAS,KAAOZ,KAAKF,GAAGiB,MAAML,EAAS,MAAQ,KAAMV,KAAKgB,QAAQN,GAAUC,IAEtGd,EAAYI,UAAUgB,KAAO,SAAUC,GAGnC,OAFAxB,EAASO,UAAUgB,KAAKlB,KAAKC,KAAMkB,GACnClB,KAAKF,GAAKoB,EAAOpB,GACVE,MAEXH,EAAYI,UAAUkB,OAAS,SAAUC,GACrC,IAAIC,EAAOrB,KAAKsB,YAAYF,GAK5B,OAJKC,KACDA,EAAOrB,KAAKuB,eAAeH,IACtBtB,GAAKE,KAAKF,GAAGqB,OAAOC,GAAMI,MAE5BH,GAEJxB","file":"../../../nodes/procedural/CheckerNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/FunctionNode',\n    '../accessors/UVNode'\n], function (\n    TempNode, \n    FunctionNode, \n    UVNode\n) {\n    'use strict';\n    function CheckerNode(uv) {\n        TempNode.call(this, 'f');\n        this.uv = uv || new UVNode();\n    }\n    CheckerNode.prototype = Object.create(TempNode.prototype);\n    CheckerNode.prototype.constructor = CheckerNode;\n    CheckerNode.prototype.nodeType = 'Noise';\n    CheckerNode.Nodes = function () {\n        var checker = new FunctionNode([\n            'float checker( vec2 uv ) {',\n            '\\tfloat cx = floor( uv.x );',\n            '\\tfloat cy = floor( uv.y ); ',\n            '\\tfloat result = mod( cx + cy, 2.0 );',\n            '\\treturn sign( result );',\n            '}'\n        ].join('\\n'));\n        return { checker: checker };\n    }();\n    CheckerNode.prototype.generate = function (builder, output) {\n        var snoise = builder.include(CheckerNode.Nodes.checker);\n        return builder.format(snoise + '( ' + this.uv.build(builder, 'v2') + ' )', this.getType(builder), output);\n    };\n    CheckerNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.uv = source.uv;\n        return this;\n    };\n    CheckerNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.uv = this.uv.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return CheckerNode;\n});"]}