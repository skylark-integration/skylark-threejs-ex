{"version":3,"sources":["nodes/procedural/NoiseNode.js"],"names":["define","TempNode","FunctionNode","UVNode","NoiseNode","uv","call","this","prototype","Object","create","constructor","nodeType","Nodes","snoise","join","generate","builder","output","include","format","build","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,uBACA,uBACD,SACCC,EACAC,EACAC,GAEA,aACA,SAASC,EAAUC,GACfJ,EAASK,KAAKC,KAAM,KACpBA,KAAKF,GAAKA,GAAM,IAAIF,EA8BxB,OA5BAC,EAAUI,UAAYC,OAAOC,OAAOT,EAASO,WAC7CJ,EAAUI,UAAUG,YAAcP,EAClCA,EAAUI,UAAUI,SAAW,QAC/BR,EAAUS,OAMGC,OALI,IAAIZ,GACb,0BACA,+EACA,KACFa,KAAK,QAGXX,EAAUI,UAAUQ,SAAW,SAAUC,EAASC,GAC9C,IAAIJ,EAASG,EAAQE,QAAQf,EAAUS,MAAMC,QAC7C,OAAOG,EAAQG,OAAON,EAAS,KAAOP,KAAKF,GAAGgB,MAAMJ,EAAS,MAAQ,KAAMV,KAAKe,QAAQL,GAAUC,IAEtGd,EAAUI,UAAUe,KAAO,SAAUC,GAGjC,OAFAvB,EAASO,UAAUe,KAAKjB,KAAKC,KAAMiB,GACnCjB,KAAKF,GAAKmB,EAAOnB,GACVE,MAEXH,EAAUI,UAAUiB,OAAS,SAAUC,GACnC,IAAIC,EAAOpB,KAAKqB,YAAYF,GAK5B,OAJKC,KACDA,EAAOpB,KAAKsB,eAAeH,IACtBrB,GAAKE,KAAKF,GAAGoB,OAAOC,GAAMI,MAE5BH,GAEJvB","file":"../../../nodes/procedural/NoiseNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/FunctionNode',\n    '../accessors/UVNode'\n], function (\n    TempNode, \n    FunctionNode, \n    UVNode\n) {\n    'use strict';\n    function NoiseNode(uv) {\n        TempNode.call(this, 'f');\n        this.uv = uv || new UVNode();\n    }\n    NoiseNode.prototype = Object.create(TempNode.prototype);\n    NoiseNode.prototype.constructor = NoiseNode;\n    NoiseNode.prototype.nodeType = 'Noise';\n    NoiseNode.Nodes = function () {\n        var snoise = new FunctionNode([\n            'float snoise(vec2 co) {',\n            '\\treturn fract( sin( dot( co.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );',\n            '}'\n        ].join('\\n'));\n        return { snoise: snoise };\n    }();\n    NoiseNode.prototype.generate = function (builder, output) {\n        var snoise = builder.include(NoiseNode.Nodes.snoise);\n        return builder.format(snoise + '( ' + this.uv.build(builder, 'v2') + ' )', this.getType(builder), output);\n    };\n    NoiseNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.uv = source.uv;\n        return this;\n    };\n    NoiseNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.uv = this.uv.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return NoiseNode;\n});"]}