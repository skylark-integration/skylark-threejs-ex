{"version":3,"sources":["nodes/inputs/RTTNode.js"],"names":["define","THREE","NodeBuilder","NodeMaterial","TextureNode","RTTNode","width","height","input","options","this","clear","undefined","renderTarget","WebGLRenderTarget","material","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","render","call","texture","prototype","Object","create","constructor","nodeType","build","builder","output","uuid","rttBuilder","nodes","updaters","fragment","value","updateFramesaveTo","frame","saveTo","saveToCurrent","saveToMaterial","dispose","saveToScene","renderer","setRenderTarget","updateFrame","uniforms","renderTexture","console","warn","copy","source","toJSON","meta","data","getJSONNode"],"mappings":"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","file":"../../../nodes/inputs/RTTNode.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../core/NodeBuilder',\n    '../materials/NodeMaterial',\n    './TextureNode'\n], function (\n    THREE, \n    NodeBuilder, \n    NodeMaterial, \n    TextureNode\n) {\n    'use strict';\n    function RTTNode(width, height, input, options) {\n        options = options || {};\n        this.input = input;\n        this.clear = options.clear !== undefined ? options.clear : true;\n        this.renderTarget = new THREE.WebGLRenderTarget(width, height, options);\n        this.material = new NodeMaterial();\n        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        this.scene = new THREE.Scene();\n        this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), this.material);\n        this.quad.frustumCulled = false;\n        this.scene.add(this.quad);\n        this.render = true;\n        TextureNode.call(this, this.renderTarget.texture);\n    }\n    RTTNode.prototype = Object.create(TextureNode.prototype);\n    RTTNode.prototype.constructor = RTTNode;\n    RTTNode.prototype.nodeType = 'RTT';\n    RTTNode.prototype.build = function (builder, output, uuid) {\n        var rttBuilder = new NodeBuilder();\n        rttBuilder.nodes = builder.nodes;\n        rttBuilder.updaters = builder.updaters;\n        this.material.fragment.value = this.input;\n        this.material.build({ builder: rttBuilder });\n        return TextureNode.prototype.build.call(this, builder, output, uuid);\n    };\n    RTTNode.prototype.updateFramesaveTo = function (frame) {\n        this.saveTo.render = false;\n        if (this.saveTo !== this.saveToCurrent) {\n            if (this.saveToMaterial)\n                this.saveToMaterial.dispose();\n            var material = new NodeMaterial();\n            material.fragment.value = this;\n            material.build();\n            var scene = new THREE.Scene();\n            var quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), material);\n            quad.frustumCulled = false;\n            scene.add(quad);\n            this.saveToScene = scene;\n            this.saveToMaterial = material;\n        }\n        this.saveToCurrent = this.saveTo;\n        frame.renderer.setRenderTarget(this.saveTo.renderTarget);\n        if (this.saveTo.clear)\n            frame.renderer.clear();\n        frame.renderer.render(this.saveToScene, this.camera);\n    };\n    RTTNode.prototype.updateFrame = function (frame) {\n        if (frame.renderer) {\n            if (this.saveTo && this.saveTo.render === false) {\n                this.updateFramesaveTo(frame);\n            }\n            if (this.render) {\n                if (this.material.uniforms.renderTexture) {\n                    this.material.uniforms.renderTexture.value = frame.renderTexture;\n                }\n                frame.renderer.setRenderTarget(this.renderTarget);\n                if (this.clear)\n                    frame.renderer.clear();\n                frame.renderer.render(this.scene, this.camera);\n            }\n            if (this.saveTo && this.saveTo.render === true) {\n                this.updateFramesaveTo(frame);\n            }\n        } else {\n            console.warn('RTTNode need a renderer in NodeFrame');\n        }\n    };\n    RTTNode.prototype.copy = function (source) {\n        TextureNode.prototype.copy.call(this, source);\n        this.saveTo = source.saveTo;\n        return this;\n    };\n    RTTNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = TextureNode.prototype.toJSON.call(this, meta);\n            if (this.saveTo)\n                data.saveTo = this.saveTo.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return RTTNode;\n});"]}