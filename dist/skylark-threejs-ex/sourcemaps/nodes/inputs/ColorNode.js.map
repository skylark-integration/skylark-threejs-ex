{"version":3,"sources":["nodes/inputs/ColorNode.js"],"names":["define","THREE","InputNode","NodeUtils","ColorNode","color","g","b","call","this","value","Color","prototype","Object","create","constructor","nodeType","addShortcuts","generateReadonly","builder","output","uuid","type","format","r","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","readonly"],"mappings":";;;;;;;AAAAA,QACI,kBACA,oBACA,qBACD,SAAUC,EAAOC,EAAWC,GAC3B,aACA,SAASC,EAAUC,EAAOC,EAAGC,GACzBL,EAAUM,KAAKC,KAAM,KACrBA,KAAKC,MAAQL,aAAiBJ,EAAMU,MAAQN,EAAQ,IAAIJ,EAAMU,MAAMN,GAAS,EAAGC,EAAGC,GA8BvF,OA5BAH,EAAUQ,UAAYC,OAAOC,OAAOZ,EAAUU,WAC9CR,EAAUQ,UAAUG,YAAcX,EAClCA,EAAUQ,UAAUI,SAAW,QAC/Bb,EAAUc,aAAab,EAAUQ,UAAW,SACxC,IACA,IACA,MAEJR,EAAUQ,UAAUM,iBAAmB,SAAUC,EAASC,EAAQC,EAAMC,GACpE,OAAOH,EAAQI,OAAO,SAAWd,KAAKe,EAAI,KAAOf,KAAKH,EAAI,KAAOG,KAAKF,EAAI,KAAMe,EAAMF,IAE1FhB,EAAUQ,UAAUa,KAAO,SAAUC,GAGjC,OAFAxB,EAAUU,UAAUa,KAAKjB,KAAKC,KAAMiB,GACpCjB,KAAKC,MAAMe,KAAKC,GACTjB,MAEXL,EAAUQ,UAAUe,OAAS,SAAUC,GACnC,IAAIC,EAAOpB,KAAKqB,YAAYF,GAS5B,OARKC,KACDA,EAAOpB,KAAKsB,eAAeH,IACtBJ,EAAIf,KAAKe,EACdK,EAAKvB,EAAIG,KAAKH,EACduB,EAAKtB,EAAIE,KAAKF,GACQ,IAAlBE,KAAKuB,WACLH,EAAKG,UAAW,IAEjBH,GAEJzB","file":"../../../nodes/inputs/ColorNode.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    '../core/InputNode',\r\n    '../core/NodeUtils'\r\n], function (THREE, InputNode, NodeUtils) {\r\n    'use strict';\r\n    function ColorNode(color, g, b) {\r\n        InputNode.call(this, 'c');\r\n        this.value = color instanceof THREE.Color ? color : new THREE.Color(color || 0, g, b);\r\n    }\r\n    ColorNode.prototype = Object.create(InputNode.prototype);\r\n    ColorNode.prototype.constructor = ColorNode;\r\n    ColorNode.prototype.nodeType = 'Color';\r\n    NodeUtils.addShortcuts(ColorNode.prototype, 'value', [\r\n        'r',\r\n        'g',\r\n        'b'\r\n    ]);\r\n    ColorNode.prototype.generateReadonly = function (builder, output, uuid, type) {\r\n        return builder.format('vec3( ' + this.r + ', ' + this.g + ', ' + this.b + ' )', type, output);\r\n    };\r\n    ColorNode.prototype.copy = function (source) {\r\n        InputNode.prototype.copy.call(this, source);\r\n        this.value.copy(source);\r\n        return this;\r\n    };\r\n    ColorNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.r = this.r;\r\n            data.g = this.g;\r\n            data.b = this.b;\r\n            if (this.readonly === true)\r\n                data.readonly = true;\r\n        }\r\n        return data;\r\n    };\r\n    return ColorNode;\r\n});"]}