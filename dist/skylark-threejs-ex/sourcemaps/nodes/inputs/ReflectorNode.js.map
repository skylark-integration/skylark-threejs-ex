{"version":3,"sources":["nodes/inputs/ReflectorNode.js"],"names":["define","TempNode","InputNode","PositionNode","OperatorNode","TextureNode","Matrix4Node","ReflectorNode","mirror","call","this","setMirror","prototype","Object","create","constructor","nodeType","textureMatrix","material","uniforms","value","localPosition","LOCAL","uv","MUL","uvResult","ADD","texture","tDiffuse","generate","builder","output","isShader","a","offset","build","format","type","console","warn","shader","copy","source","scope","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,oBACA,4BACA,uBACA,gBACA,iBACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,aACA,SAASC,EAAcC,GACnBP,EAASQ,KAAKC,KAAM,MAChBF,GACAE,KAAKC,UAAUH,GAyCvB,OAvCAD,EAAcK,UAAYC,OAAOC,OAAOb,EAASW,WACjDL,EAAcK,UAAUG,YAAcR,EACtCA,EAAcK,UAAUI,SAAW,YACnCT,EAAcK,UAAUD,UAAY,SAAUH,GAC1CE,KAAKF,OAASA,EACdE,KAAKO,cAAgB,IAAIX,EAAYI,KAAKF,OAAOU,SAASC,SAASF,cAAcG,OACjFV,KAAKW,cAAgB,IAAIlB,EAAaA,EAAamB,OACnDZ,KAAKa,GAAK,IAAInB,EAAaM,KAAKO,cAAeP,KAAKW,cAAejB,EAAaoB,KAChFd,KAAKe,SAAW,IAAIrB,EAAa,KAAMM,KAAKa,GAAInB,EAAasB,KAC7DhB,KAAKiB,QAAU,IAAItB,EAAYK,KAAKF,OAAOU,SAASC,SAASS,SAASR,MAAOV,KAAKa,GAAI,MAAM,IAEhGhB,EAAcK,UAAUiB,SAAW,SAAUC,EAASC,GAClD,OAAID,EAAQE,SAAS,aACjBtB,KAAKe,SAASQ,EAAIvB,KAAKwB,OACvBxB,KAAKiB,QAAQJ,GAAKb,KAAKwB,OAASxB,KAAKe,SAAWf,KAAKa,GACtC,cAAXQ,EACOrB,KAAKiB,QAAQQ,MAAML,EAASC,GAEhCD,EAAQM,OAAO1B,KAAKiB,QAAQQ,MAAML,EAASpB,KAAK2B,MAAO3B,KAAK2B,KAAMN,KAEzEO,QAAQC,KAAK,8CAAgDT,EAAQU,OAAS,YACvEV,EAAQM,OAAO,cAAe1B,KAAK2B,KAAMN,KAGxDxB,EAAcK,UAAU6B,KAAO,SAAUC,GAGrC,OAFAxC,EAAUU,UAAU6B,KAAKhC,KAAKC,KAAMgC,GACpChC,KAAKiC,MAAMnC,OAASkC,EAAOlC,OACpBE,MAEXH,EAAcK,UAAUgC,OAAS,SAAUC,GACvC,IAAIC,EAAOpC,KAAKqC,YAAYF,GAO5B,OANKC,KACDA,EAAOpC,KAAKsC,eAAeH,IACtBrC,OAASE,KAAKF,OAAOyC,KACtBvC,KAAKwB,SACLY,EAAKZ,OAASxB,KAAKwB,OAAOU,OAAOC,GAAMI,OAExCH,GAEJvC","file":"../../../nodes/inputs/ReflectorNode.js","sourcesContent":["define([\r\n    '../core/TempNode',\r\n    '../core/InputNode',\r\n    '../accessors/PositionNode',\r\n    '../math/OperatorNode',\r\n    './TextureNode',\r\n    './Matrix4Node'\r\n], function (\r\n    TempNode, \r\n    InputNode, \r\n    PositionNode, \r\n    OperatorNode, \r\n    TextureNode, \r\n    Matrix4Node\r\n) {\r\n    'use strict';\r\n    function ReflectorNode(mirror) {\r\n        TempNode.call(this, 'v4');\r\n        if (mirror)\r\n            this.setMirror(mirror);\r\n    }\r\n    ReflectorNode.prototype = Object.create(TempNode.prototype);\r\n    ReflectorNode.prototype.constructor = ReflectorNode;\r\n    ReflectorNode.prototype.nodeType = 'Reflector';\r\n    ReflectorNode.prototype.setMirror = function (mirror) {\r\n        this.mirror = mirror;\r\n        this.textureMatrix = new Matrix4Node(this.mirror.material.uniforms.textureMatrix.value);\r\n        this.localPosition = new PositionNode(PositionNode.LOCAL);\r\n        this.uv = new OperatorNode(this.textureMatrix, this.localPosition, OperatorNode.MUL);\r\n        this.uvResult = new OperatorNode(null, this.uv, OperatorNode.ADD);\r\n        this.texture = new TextureNode(this.mirror.material.uniforms.tDiffuse.value, this.uv, null, true);\r\n    };\r\n    ReflectorNode.prototype.generate = function (builder, output) {\r\n        if (builder.isShader('fragment')) {\r\n            this.uvResult.a = this.offset;\r\n            this.texture.uv = this.offset ? this.uvResult : this.uv;\r\n            if (output === 'sampler2D') {\r\n                return this.texture.build(builder, output);\r\n            }\r\n            return builder.format(this.texture.build(builder, this.type), this.type, output);\r\n        } else {\r\n            console.warn('THREE.ReflectorNode is not compatible with ' + builder.shader + ' shader.');\r\n            return builder.format('vec4( 0.0 )', this.type, output);\r\n        }\r\n    };\r\n    ReflectorNode.prototype.copy = function (source) {\r\n        InputNode.prototype.copy.call(this, source);\r\n        this.scope.mirror = source.mirror;\r\n        return this;\r\n    };\r\n    ReflectorNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.mirror = this.mirror.uuid;\r\n            if (this.offset)\r\n                data.offset = this.offset.toJSON(meta).uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return ReflectorNode;\r\n});"]}