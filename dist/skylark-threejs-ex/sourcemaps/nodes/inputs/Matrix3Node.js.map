{"version":3,"sources":["nodes/inputs/Matrix3Node.js"],"names":["define","THREE","InputNode","Matrix3Node","matrix","call","this","value","Matrix3","prototype","Object","create","constructor","nodeType","defineProperties","elements","set","val","get","generateReadonly","builder","output","uuid","type","format","join","copy","source","fromArray","toJSON","meta","data","getJSONNode","createJSONNode","concat"],"mappings":";;;;;;;AAAAA,QACI,kBACA,qBACD,SAAUC,EAAOC,GAChB,aACA,SAASC,EAAYC,GACjBF,EAAUG,KAAKC,KAAM,MACrBA,KAAKC,MAAQH,GAAU,IAAIH,EAAMO,QA+BrC,OA7BAL,EAAYM,UAAYC,OAAOC,OAAOT,EAAUO,WAChDN,EAAYM,UAAUG,YAAcT,EACpCA,EAAYM,UAAUI,SAAW,UACjCH,OAAOI,iBAAiBX,EAAYM,WAChCM,UACIC,IAAK,SAAUC,GACXX,KAAKC,MAAMQ,SAAWE,GAE1BC,IAAK,WACD,OAAOZ,KAAKC,MAAMQ,aAI9BZ,EAAYM,UAAUU,iBAAmB,SAAUC,EAASC,EAAQC,EAAMC,GACtE,OAAOH,EAAQI,OAAO,SAAWlB,KAAKC,MAAMQ,SAASU,KAAK,MAAQ,KAAMF,EAAMF,IAElFlB,EAAYM,UAAUiB,KAAO,SAAUC,GAGnC,OAFAzB,EAAUO,UAAUiB,KAAKrB,KAAKC,KAAMqB,GACpCrB,KAAKC,MAAMqB,UAAUD,EAAOZ,UACrBT,MAEXH,EAAYM,UAAUoB,OAAS,SAAUC,GACrC,IAAIC,EAAOzB,KAAK0B,YAAYF,GAK5B,OAJKC,KACDA,EAAOzB,KAAK2B,eAAeH,IACtBf,SAAWT,KAAKC,MAAMQ,SAASmB,UAEjCH,GAEJ5B","file":"../../../nodes/inputs/Matrix3Node.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../core/InputNode'\n], function (THREE, InputNode) {\n    'use strict';\n    function Matrix3Node(matrix) {\n        InputNode.call(this, 'm3');\n        this.value = matrix || new THREE.Matrix3();\n    }\n    Matrix3Node.prototype = Object.create(InputNode.prototype);\n    Matrix3Node.prototype.constructor = Matrix3Node;\n    Matrix3Node.prototype.nodeType = 'Matrix3';\n    Object.defineProperties(Matrix3Node.prototype, {\n        elements: {\n            set: function (val) {\n                this.value.elements = val;\n            },\n            get: function () {\n                return this.value.elements;\n            }\n        }\n    });\n    Matrix3Node.prototype.generateReadonly = function (builder, output, uuid, type) {\n        return builder.format('mat3( ' + this.value.elements.join(', ') + ' )', type, output);\n    };\n    Matrix3Node.prototype.copy = function (source) {\n        InputNode.prototype.copy.call(this, source);\n        this.value.fromArray(source.elements);\n        return this;\n    };\n    Matrix3Node.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.elements = this.value.elements.concat();\n        }\n        return data;\n    };\n    return Matrix3Node;\n});"]}