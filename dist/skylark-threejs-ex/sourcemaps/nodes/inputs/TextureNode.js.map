{"version":3,"sources":["nodes/inputs/TextureNode.js"],"names":["define","InputNode","UVNode","ColorSpaceNode","ExpressionNode","TextureNode","value","uv","bias","project","call","this","shared","undefined","prototype","Object","create","constructor","nodeType","getTexture","builder","output","generate","uuid","method","code","tex","build","context","setTexture","include","isShader","ignoreCache","outputType","getType","addContext","colorSpace","fromDecoding","getTextureEncodingFromMap","input","parse","removeContext","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,oBACA,sBACA,0BACA,0BACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,SAASC,EAAYC,EAAOC,EAAIC,EAAMC,GAClCR,EAAUS,KAAKC,KAAM,MAAQC,QAAQ,IACrCD,KAAKL,MAAQA,EACbK,KAAKJ,GAAKA,GAAM,IAAIL,EACpBS,KAAKH,KAAOA,EACZG,KAAKF,aAAsBI,IAAZJ,GAAwBA,EA8D3C,OA5DAJ,EAAYS,UAAYC,OAAOC,OAAOf,EAAUa,WAChDT,EAAYS,UAAUG,YAAcZ,EACpCA,EAAYS,UAAUI,SAAW,UACjCb,EAAYS,UAAUK,WAAa,SAAUC,EAASC,GAClD,OAAOpB,EAAUa,UAAUQ,SAASZ,KAAKC,KAAMS,EAASC,EAAQV,KAAKL,MAAMiB,KAAM,MAErFlB,EAAYS,UAAUQ,SAAW,SAAUF,EAASC,GAChD,GAAe,cAAXA,EACA,OAAOV,KAAKQ,WAAWC,EAASC,GAEpC,IAIIG,EAAQC,EAJRC,EAAMf,KAAKQ,WAAWC,EAASC,GAASd,EAAKI,KAAKJ,GAAGoB,MAAMP,EAAST,KAAKF,QAAU,KAAO,MAAOD,EAAOG,KAAKH,KAAOG,KAAKH,KAAKmB,MAAMP,EAAS,UAAOP,OAC3IA,IAATL,GAAsBY,EAAQQ,QAAQpB,OACtCA,EAAOY,EAAQQ,QAAQpB,KAAKqB,WAAWlB,MAAMgB,MAAMP,EAAS,MAI5DI,EADAb,KAAKF,QACI,gBAEAD,EAAO,YAAc,QAE9BiB,EADAjB,EACOgB,EAAS,KAAOE,EAAM,KAAOnB,EAAK,KAAOC,EAAO,KAEhDgB,EAAS,KAAOE,EAAM,KAAOnB,EAAK,KAC7C,IAAIqB,GACAE,QAASV,EAAQW,SAAS,UAC1BC,aAAa,GAEbC,EAAatB,KAAKuB,QAAQd,GAO9B,OANAA,EAAQe,WAAWP,GACnBjB,KAAKyB,WAAazB,KAAKyB,YAAc,IAAIjC,EAAe,IAAIC,EAAe,GAAI6B,IAC/EtB,KAAKyB,WAAWC,aAAajB,EAAQkB,0BAA0B3B,KAAKL,QACpEK,KAAKyB,WAAWG,MAAMC,MAAMf,GAC5BA,EAAOd,KAAKyB,WAAWT,MAAMP,EAASa,GACtCb,EAAQqB,gBACDrB,EAAQsB,OAAOjB,EAAMQ,EAAYZ,IAE5ChB,EAAYS,UAAU6B,KAAO,SAAUC,GASnC,OARA3C,EAAUa,UAAU6B,KAAKjC,KAAKC,KAAMiC,GAChCA,EAAOtC,QACPK,KAAKL,MAAQsC,EAAOtC,OACxBK,KAAKJ,GAAKqC,EAAOrC,GACbqC,EAAOpC,OACPG,KAAKH,KAAOoC,EAAOpC,WACAK,IAAnB+B,EAAOnC,UACPE,KAAKF,QAAUmC,EAAOnC,SACnBE,MAEXN,EAAYS,UAAU+B,OAAS,SAAUC,GACrC,IAAIC,EAAOpC,KAAKqC,YAAYF,GAU5B,OATKC,IACDA,EAAOpC,KAAKsC,eAAeH,GACvBnC,KAAKL,QACLyC,EAAKzC,MAAQK,KAAKL,MAAMiB,MAC5BwB,EAAKxC,GAAKI,KAAKJ,GAAGsC,OAAOC,GAAMvB,KAC/BwB,EAAKtC,QAAUE,KAAKF,QAChBE,KAAKH,OACLuC,EAAKvC,KAAOG,KAAKH,KAAKqC,OAAOC,GAAMvB,OAEpCwB,GAEJ1C","file":"../../../nodes/inputs/TextureNode.js","sourcesContent":["define([\n    '../core/InputNode',\n    '../accessors/UVNode',\n    '../utils/ColorSpaceNode',\n    '../core/ExpressionNode'\n], function (\n    InputNode, \n    UVNode, \n    ColorSpaceNode, \n    ExpressionNode\n) {\n    'use strict';\n    function TextureNode(value, uv, bias, project) {\n        InputNode.call(this, 'v4', { shared: true });\n        this.value = value;\n        this.uv = uv || new UVNode();\n        this.bias = bias;\n        this.project = project !== undefined ? project : false;\n    }\n    TextureNode.prototype = Object.create(InputNode.prototype);\n    TextureNode.prototype.constructor = TextureNode;\n    TextureNode.prototype.nodeType = 'Texture';\n    TextureNode.prototype.getTexture = function (builder, output) {\n        return InputNode.prototype.generate.call(this, builder, output, this.value.uuid, 't');\n    };\n    TextureNode.prototype.generate = function (builder, output) {\n        if (output === 'sampler2D') {\n            return this.getTexture(builder, output);\n        }\n        var tex = this.getTexture(builder, output), uv = this.uv.build(builder, this.project ? 'v4' : 'v2'), bias = this.bias ? this.bias.build(builder, 'f') : undefined;\n        if (bias === undefined && builder.context.bias) {\n            bias = builder.context.bias.setTexture(this).build(builder, 'f');\n        }\n        var method, code;\n        if (this.project)\n            method = 'texture2DProj';\n        else\n            method = bias ? 'tex2DBias' : 'tex2D';\n        if (bias)\n            code = method + '( ' + tex + ', ' + uv + ', ' + bias + ' )';\n        else\n            code = method + '( ' + tex + ', ' + uv + ' )';\n        var context = {\n            include: builder.isShader('vertex'),\n            ignoreCache: true\n        };\n        var outputType = this.getType(builder);\n        builder.addContext(context);\n        this.colorSpace = this.colorSpace || new ColorSpaceNode(new ExpressionNode('', outputType));\n        this.colorSpace.fromDecoding(builder.getTextureEncodingFromMap(this.value));\n        this.colorSpace.input.parse(code);\n        code = this.colorSpace.build(builder, outputType);\n        builder.removeContext();\n        return builder.format(code, outputType, output);\n    };\n    TextureNode.prototype.copy = function (source) {\n        InputNode.prototype.copy.call(this, source);\n        if (source.value)\n            this.value = source.value;\n        this.uv = source.uv;\n        if (source.bias)\n            this.bias = source.bias;\n        if (source.project !== undefined)\n            this.project = source.project;\n        return this;\n    };\n    TextureNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            if (this.value)\n                data.value = this.value.uuid;\n            data.uv = this.uv.toJSON(meta).uuid;\n            data.project = this.project;\n            if (this.bias)\n                data.bias = this.bias.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return TextureNode;\n});"]}