{"version":3,"sources":["nodes/inputs/CubeTextureNode.js"],"names":["define","InputNode","ReflectNode","ColorSpaceNode","ExpressionNode","CubeTextureNode","value","uv","bias","call","this","shared","prototype","Object","create","constructor","nodeType","getTexture","builder","output","generate","uuid","code","cubetex","build","undefined","context","setTexture","include","isShader","ignoreCache","outputType","getType","addContext","colorSpace","fromDecoding","getTextureEncodingFromMap","input","parse","removeContext","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,oBACA,2BACA,0BACA,0BACD,SAAUC,EAAWC,EAAaC,EAAgBC,GACjD,aACA,SAASC,EAAgBC,EAAOC,EAAIC,GAChCP,EAAUQ,KAAKC,KAAM,MAAQC,QAAQ,IACrCD,KAAKJ,MAAQA,EACbI,KAAKH,GAAKA,GAAM,IAAIL,EACpBQ,KAAKF,KAAOA,EAwDhB,OAtDAH,EAAgBO,UAAYC,OAAOC,OAAOb,EAAUW,WACpDP,EAAgBO,UAAUG,YAAcV,EACxCA,EAAgBO,UAAUI,SAAW,cACrCX,EAAgBO,UAAUK,WAAa,SAAUC,EAASC,GACtD,OAAOlB,EAAUW,UAAUQ,SAASX,KAAKC,KAAMQ,EAASC,EAAQT,KAAKJ,MAAMe,KAAM,OAErFhB,EAAgBO,UAAUQ,SAAW,SAAUF,EAASC,GACpD,GAAe,gBAAXA,EACA,OAAOT,KAAKO,WAAWC,EAASC,GAEpC,IAMIG,EANAC,EAAUb,KAAKO,WAAWC,EAASC,GACnCZ,EAAKG,KAAKH,GAAGiB,MAAMN,EAAS,MAC5BV,EAAOE,KAAKF,KAAOE,KAAKF,KAAKgB,MAAMN,EAAS,UAAOO,OAC1CA,IAATjB,GAAsBU,EAAQQ,QAAQlB,OACtCA,EAAOU,EAAQQ,QAAQlB,KAAKmB,WAAWjB,MAAMc,MAAMN,EAAS,MAI5DI,EADAd,EACO,gBAAkBe,EAAU,KAAOhB,EAAK,KAAOC,EAAO,KAEtD,YAAce,EAAU,KAAOhB,EAAK,KAC/C,IAAImB,GACAE,QAASV,EAAQW,SAAS,UAC1BC,aAAa,GAEbC,EAAarB,KAAKsB,QAAQd,GAO9B,OANAA,EAAQe,WAAWP,GACnBhB,KAAKwB,WAAaxB,KAAKwB,YAAc,IAAI/B,EAAe,IAAIC,EAAe,GAAI2B,IAC/ErB,KAAKwB,WAAWC,aAAajB,EAAQkB,0BAA0B1B,KAAKJ,QACpEI,KAAKwB,WAAWG,MAAMC,MAAMhB,GAC5BA,EAAOZ,KAAKwB,WAAWV,MAAMN,EAASa,GACtCb,EAAQqB,gBACDrB,EAAQsB,OAAOlB,EAAMS,EAAYZ,IAE5Cd,EAAgBO,UAAU6B,KAAO,SAAUC,GAOvC,OANAzC,EAAUW,UAAU6B,KAAKhC,KAAKC,KAAMgC,GAChCA,EAAOpC,QACPI,KAAKJ,MAAQoC,EAAOpC,OACxBI,KAAKH,GAAKmC,EAAOnC,GACbmC,EAAOlC,OACPE,KAAKF,KAAOkC,EAAOlC,MAChBE,MAEXL,EAAgBO,UAAU+B,OAAS,SAAUC,GACzC,IAAIC,EAAOnC,KAAKoC,YAAYF,GAQ5B,OAPKC,KACDA,EAAOnC,KAAKqC,eAAeH,IACtBtC,MAAQI,KAAKJ,MAAMe,KACxBwB,EAAKtC,GAAKG,KAAKH,GAAGoC,OAAOC,GAAMvB,KAC3BX,KAAKF,OACLqC,EAAKrC,KAAOE,KAAKF,KAAKmC,OAAOC,GAAMvB,OAEpCwB,GAEJxC","file":"../../../nodes/inputs/CubeTextureNode.js","sourcesContent":["define([\r\n    '../core/InputNode',\r\n    '../accessors/ReflectNode',\r\n    '../utils/ColorSpaceNode',\r\n    '../core/ExpressionNode'\r\n], function (InputNode, ReflectNode, ColorSpaceNode, ExpressionNode) {\r\n    'use strict';\r\n    function CubeTextureNode(value, uv, bias) {\r\n        InputNode.call(this, 'v4', { shared: true });\r\n        this.value = value;\r\n        this.uv = uv || new ReflectNode();\r\n        this.bias = bias;\r\n    }\r\n    CubeTextureNode.prototype = Object.create(InputNode.prototype);\r\n    CubeTextureNode.prototype.constructor = CubeTextureNode;\r\n    CubeTextureNode.prototype.nodeType = 'CubeTexture';\r\n    CubeTextureNode.prototype.getTexture = function (builder, output) {\r\n        return InputNode.prototype.generate.call(this, builder, output, this.value.uuid, 'tc');\r\n    };\r\n    CubeTextureNode.prototype.generate = function (builder, output) {\r\n        if (output === 'samplerCube') {\r\n            return this.getTexture(builder, output);\r\n        }\r\n        var cubetex = this.getTexture(builder, output);\r\n        var uv = this.uv.build(builder, 'v3');\r\n        var bias = this.bias ? this.bias.build(builder, 'f') : undefined;\r\n        if (bias === undefined && builder.context.bias) {\r\n            bias = builder.context.bias.setTexture(this).build(builder, 'f');\r\n        }\r\n        var code;\r\n        if (bias)\r\n            code = 'texCubeBias( ' + cubetex + ', ' + uv + ', ' + bias + ' )';\r\n        else\r\n            code = 'texCube( ' + cubetex + ', ' + uv + ' )';\r\n        var context = {\r\n            include: builder.isShader('vertex'),\r\n            ignoreCache: true\r\n        };\r\n        var outputType = this.getType(builder);\r\n        builder.addContext(context);\r\n        this.colorSpace = this.colorSpace || new ColorSpaceNode(new ExpressionNode('', outputType));\r\n        this.colorSpace.fromDecoding(builder.getTextureEncodingFromMap(this.value));\r\n        this.colorSpace.input.parse(code);\r\n        code = this.colorSpace.build(builder, outputType);\r\n        builder.removeContext();\r\n        return builder.format(code, outputType, output);\r\n    };\r\n    CubeTextureNode.prototype.copy = function (source) {\r\n        InputNode.prototype.copy.call(this, source);\r\n        if (source.value)\r\n            this.value = source.value;\r\n        this.uv = source.uv;\r\n        if (source.bias)\r\n            this.bias = source.bias;\r\n        return this;\r\n    };\r\n    CubeTextureNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.value = this.value.uuid;\r\n            data.uv = this.uv.toJSON(meta).uuid;\r\n            if (this.bias)\r\n                data.bias = this.bias.toJSON(meta).uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return CubeTextureNode;\r\n});"]}