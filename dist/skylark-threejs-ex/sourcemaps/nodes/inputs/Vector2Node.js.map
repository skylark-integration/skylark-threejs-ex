{"version":3,"sources":["nodes/inputs/Vector2Node.js"],"names":["define","THREE","InputNode","NodeUtils","Vector2Node","x","y","call","this","value","Vector2","prototype","Object","create","constructor","nodeType","addShortcuts","generateReadonly","builder","output","uuid","type","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","readonly"],"mappings":";;;;;;;AAAAA,QACI,kBACA,oBACA,qBACD,SACCC,EACAC,EACAC,GAEA,aACA,SAASC,EAAYC,EAAGC,GACpBJ,EAAUK,KAAKC,KAAM,MACrBA,KAAKC,MAAQJ,aAAaJ,EAAMS,QAAUL,EAAI,IAAIJ,EAAMS,QAAQL,EAAGC,GA4BvE,OA1BAF,EAAYO,UAAYC,OAAOC,OAAOX,EAAUS,WAChDP,EAAYO,UAAUG,YAAcV,EACpCA,EAAYO,UAAUI,SAAW,UACjCZ,EAAUa,aAAaZ,EAAYO,UAAW,SAC1C,IACA,MAEJP,EAAYO,UAAUM,iBAAmB,SAAUC,EAASC,EAAQC,EAAMC,GACtE,OAAOH,EAAQI,OAAO,SAAWd,KAAKH,EAAI,KAAOG,KAAKF,EAAI,KAAMe,EAAMF,IAE1Ef,EAAYO,UAAUY,KAAO,SAAUC,GAGnC,OAFAtB,EAAUS,UAAUY,KAAKhB,KAAKC,KAAMgB,GACpChB,KAAKC,MAAMc,KAAKC,GACThB,MAEXJ,EAAYO,UAAUc,OAAS,SAAUC,GACrC,IAAIC,EAAOnB,KAAKoB,YAAYF,GAQ5B,OAPKC,KACDA,EAAOnB,KAAKqB,eAAeH,IACtBrB,EAAIG,KAAKH,EACdsB,EAAKrB,EAAIE,KAAKF,GACQ,IAAlBE,KAAKsB,WACLH,EAAKG,UAAW,IAEjBH,GAEJvB","file":"../../../nodes/inputs/Vector2Node.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../core/InputNode',\n    '../core/NodeUtils'\n], function (\n    THREE, \n    InputNode, \n    NodeUtils\n) {\n    'use strict';\n    function Vector2Node(x, y) {\n        InputNode.call(this, 'v2');\n        this.value = x instanceof THREE.Vector2 ? x : new THREE.Vector2(x, y);\n    }\n    Vector2Node.prototype = Object.create(InputNode.prototype);\n    Vector2Node.prototype.constructor = Vector2Node;\n    Vector2Node.prototype.nodeType = 'Vector2';\n    NodeUtils.addShortcuts(Vector2Node.prototype, 'value', [\n        'x',\n        'y'\n    ]);\n    Vector2Node.prototype.generateReadonly = function (builder, output, uuid, type) {\n        return builder.format('vec2( ' + this.x + ', ' + this.y + ' )', type, output);\n    };\n    Vector2Node.prototype.copy = function (source) {\n        InputNode.prototype.copy.call(this, source);\n        this.value.copy(source);\n        return this;\n    };\n    Vector2Node.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.x = this.x;\n            data.y = this.y;\n            if (this.readonly === true)\n                data.readonly = true;\n        }\n        return data;\n    };\n    return Vector2Node;\n});"]}