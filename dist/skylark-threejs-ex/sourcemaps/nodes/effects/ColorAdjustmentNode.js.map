{"version":3,"sources":["nodes/effects/ColorAdjustmentNode.js"],"names":["define","TempNode","FunctionNode","LuminanceNode","ColorAdjustmentNode","rgb","adjustment","method","call","this","SATURATION","Nodes","hue","join","saturation","luminance","vibrance","HUE","VIBRANCE","BRIGHTNESS","CONTRAST","prototype","Object","create","constructor","nodeType","generate","builder","output","build","format","getType","include","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,uBACA,mBACD,SACCC,EACAC,EACAC,GAEA,aACA,SAASC,EAAoBC,EAAKC,EAAYC,GAC1CN,EAASO,KAAKC,KAAM,MACpBA,KAAKJ,IAAMA,EACXI,KAAKH,WAAaA,EAClBG,KAAKF,OAASA,GAAUH,EAAoBM,WAuEhD,OArEAN,EAAoBO,OA0BZC,IAzBM,IAAIV,GACV,yCACA,oHACA,iGACA,+BACA,iDACA,wDACA,yEACA,KACFW,KAAK,OAiBHC,WAhBa,IAAIZ,GACjB,gDACA,+CACA,8CACA,KACFW,KAAK,OAAQV,EAAcQ,MAAMI,YAY/BC,SAXW,IAAId,GACf,8CACA,mDACA,8CACA,sDACA,wCACA,KACFW,KAAK,QAOXT,EAAoBM,WAAa,aACjCN,EAAoBa,IAAM,MAC1Bb,EAAoBc,SAAW,WAC/Bd,EAAoBe,WAAa,aACjCf,EAAoBgB,SAAW,WAC/BhB,EAAoBiB,UAAYC,OAAOC,OAAOtB,EAASoB,WACvDjB,EAAoBiB,UAAUG,YAAcpB,EAC5CA,EAAoBiB,UAAUI,SAAW,kBACzCrB,EAAoBiB,UAAUK,SAAW,SAAUC,EAASC,GACxD,IAAIvB,EAAMI,KAAKJ,IAAIwB,MAAMF,EAAS,MAAOrB,EAAaG,KAAKH,WAAWuB,MAAMF,EAAS,KACrF,OAAQlB,KAAKF,QACb,KAAKH,EAAoBe,WACrB,OAAOQ,EAAQG,OAAO,KAAOzB,EAAM,MAAQC,EAAa,KAAMG,KAAKsB,QAAQJ,GAAUC,GAEzF,KAAKxB,EAAoBgB,SACrB,OAAOO,EAAQG,OAAO,KAAOzB,EAAM,MAAQC,EAAa,KAAMG,KAAKsB,QAAQJ,GAAUC,GAGzF,IAAIrB,EAASoB,EAAQK,QAAQ5B,EAAoBO,MAAMF,KAAKF,SAC5D,OAAOoB,EAAQG,OAAOvB,EAAS,KAAOF,EAAM,KAAOC,EAAa,KAAMG,KAAKsB,QAAQJ,GAAUC,IAEjGxB,EAAoBiB,UAAUY,KAAO,SAAUC,GAK3C,OAJAjC,EAASoB,UAAUY,KAAKzB,KAAKC,KAAMyB,GACnCzB,KAAKJ,IAAM6B,EAAO7B,IAClBI,KAAKH,WAAa4B,EAAO5B,WACzBG,KAAKF,OAAS2B,EAAO3B,OACdE,MAEXL,EAAoBiB,UAAUc,OAAS,SAAUC,GAC7C,IAAIC,EAAO5B,KAAK6B,YAAYF,GAO5B,OANKC,KACDA,EAAO5B,KAAK8B,eAAeH,IACtB/B,IAAMI,KAAKJ,IAAI8B,OAAOC,GAAMI,KACjCH,EAAK/B,WAAaG,KAAKH,WAAW6B,OAAOC,GAAMI,KAC/CH,EAAK9B,OAASE,KAAKF,QAEhB8B,GAEJjC","file":"../../../nodes/effects/ColorAdjustmentNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/FunctionNode',\n    './LuminanceNode'\n], function (\n    TempNode, \n    FunctionNode, \n    LuminanceNode\n) {\n    'use strict';\n    function ColorAdjustmentNode(rgb, adjustment, method) {\n        TempNode.call(this, 'v3');\n        this.rgb = rgb;\n        this.adjustment = adjustment;\n        this.method = method || ColorAdjustmentNode.SATURATION;\n    }\n    ColorAdjustmentNode.Nodes = function () {\n        var hue = new FunctionNode([\n            'vec3 hue(vec3 rgb, float adjustment) {',\n            '\\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);',\n            '\\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);',\n            '\\tvec3 yiq = RGBtoYIQ * rgb;',\n            '\\tfloat hue = atan(yiq.z, yiq.y) + adjustment;',\n            '\\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);',\n            '\\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));',\n            '}'\n        ].join('\\n'));\n        var saturation = new FunctionNode([\n            'vec3 saturation(vec3 rgb, float adjustment) {',\n            '\\tvec3 intensity = vec3( luminance( rgb ) );',\n            '\\treturn mix( intensity, rgb, adjustment );',\n            '}'\n        ].join('\\n'), [LuminanceNode.Nodes.luminance]);\n        var vibrance = new FunctionNode([\n            'vec3 vibrance(vec3 rgb, float adjustment) {',\n            '\\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;',\n            '\\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));',\n            '\\tfloat amt = (mx - average) * (-3.0 * adjustment);',\n            '\\treturn mix(rgb.rgb, vec3(mx), amt);',\n            '}'\n        ].join('\\n'));\n        return {\n            hue: hue,\n            saturation: saturation,\n            vibrance: vibrance\n        };\n    }();\n    ColorAdjustmentNode.SATURATION = 'saturation';\n    ColorAdjustmentNode.HUE = 'hue';\n    ColorAdjustmentNode.VIBRANCE = 'vibrance';\n    ColorAdjustmentNode.BRIGHTNESS = 'brightness';\n    ColorAdjustmentNode.CONTRAST = 'contrast';\n    ColorAdjustmentNode.prototype = Object.create(TempNode.prototype);\n    ColorAdjustmentNode.prototype.constructor = ColorAdjustmentNode;\n    ColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\n    ColorAdjustmentNode.prototype.generate = function (builder, output) {\n        var rgb = this.rgb.build(builder, 'v3'), adjustment = this.adjustment.build(builder, 'f');\n        switch (this.method) {\n        case ColorAdjustmentNode.BRIGHTNESS:\n            return builder.format('( ' + rgb + ' + ' + adjustment + ' )', this.getType(builder), output);\n            break;\n        case ColorAdjustmentNode.CONTRAST:\n            return builder.format('( ' + rgb + ' * ' + adjustment + ' )', this.getType(builder), output);\n            break;\n        }\n        var method = builder.include(ColorAdjustmentNode.Nodes[this.method]);\n        return builder.format(method + '( ' + rgb + ', ' + adjustment + ' )', this.getType(builder), output);\n    };\n    ColorAdjustmentNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.rgb = source.rgb;\n        this.adjustment = source.adjustment;\n        this.method = source.method;\n        return this;\n    };\n    ColorAdjustmentNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.rgb = this.rgb.toJSON(meta).uuid;\n            data.adjustment = this.adjustment.toJSON(meta).uuid;\n            data.method = this.method;\n        }\n        return data;\n    };\n    return ColorAdjustmentNode;\n});"]}