{"version":3,"sources":["nodes/materials/nodes/PhongNode.js"],"names":["define","THREE","Node","ColorNode","FloatNode","PhongNode","call","this","color","specular","shininess","prototype","Object","create","constructor","nodeType","build","builder","code","requires","lights","isShader","position","analyzeAndFlow","cache","undefined","mergeUniform","UniformsUtils","merge","UniformsLib","fog","addParsCode","join","output","push","result","mask","analyze","slot","alpha","normal","light","ao","ambient","shadow","emissive","environment","environmentAlpha","flow","transparent","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","file":"../../../../nodes/materials/nodes/PhongNode.js","sourcesContent":["define([\n    'skylark-threejs',\n    '../../core/Node',\n    '../../inputs/ColorNode',\n    '../../inputs/FloatNode'\n], function (\n    THREE, \n    Node, \n    ColorNode, \n    FloatNode\n) {\n    'use strict';\n    function PhongNode() {\n        Node.call(this);\n        this.color = new ColorNode(15658734);\n        this.specular = new ColorNode(1118481);\n        this.shininess = new FloatNode(30);\n    }\n    PhongNode.prototype = Object.create(Node.prototype);\n    PhongNode.prototype.constructor = PhongNode;\n    PhongNode.prototype.nodeType = 'Phong';\n    PhongNode.prototype.build = function (builder) {\n        var code;\n        builder.define('PHONG');\n        builder.requires.lights = true;\n        if (builder.isShader('vertex')) {\n            var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', { cache: 'position' }) : undefined;\n            builder.mergeUniform(THREE.UniformsUtils.merge([\n                THREE.UniformsLib.fog,\n                THREE.UniformsLib.lights\n            ]));\n            builder.addParsCode([\n                'varying vec3 vViewPosition;',\n                '#ifndef FLAT_SHADED',\n                '\\tvarying vec3 vNormal;',\n                '#endif',\n                '#include <fog_pars_vertex>',\n                '#include <morphtarget_pars_vertex>',\n                '#include <skinning_pars_vertex>',\n                '#include <shadowmap_pars_vertex>',\n                '#include <logdepthbuf_pars_vertex>',\n                '#include <clipping_planes_pars_vertex>'\n            ].join('\\n'));\n            var output = [\n                '#include <beginnormal_vertex>',\n                '#include <morphnormal_vertex>',\n                '#include <skinbase_vertex>',\n                '#include <skinnormal_vertex>',\n                '#include <defaultnormal_vertex>',\n                '#ifndef FLAT_SHADED',\n                '\\tvNormal = normalize( transformedNormal );',\n                '#endif',\n                '#include <begin_vertex>'\n            ];\n            if (position) {\n                output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\n            }\n            output.push('\\t#include <morphtarget_vertex>', '\\t#include <skinning_vertex>', '\\t#include <project_vertex>', '\\t#include <fog_vertex>', '\\t#include <logdepthbuf_vertex>', '\\t#include <clipping_planes_vertex>', '\\tvViewPosition = - mvPosition.xyz;', '\\t#include <worldpos_vertex>', '\\t#include <shadowmap_vertex>', '\\t#include <fog_vertex>');\n            code = output.join('\\n');\n        } else {\n            if (this.mask)\n                this.mask.analyze(builder);\n            this.color.analyze(builder, { slot: 'color' });\n            this.specular.analyze(builder);\n            this.shininess.analyze(builder);\n            if (this.alpha)\n                this.alpha.analyze(builder);\n            if (this.normal)\n                this.normal.analyze(builder);\n            if (this.light)\n                this.light.analyze(builder, { cache: 'light' });\n            if (this.ao)\n                this.ao.analyze(builder);\n            if (this.ambient)\n                this.ambient.analyze(builder);\n            if (this.shadow)\n                this.shadow.analyze(builder);\n            if (this.emissive)\n                this.emissive.analyze(builder, { slot: 'emissive' });\n            if (this.environment)\n                this.environment.analyze(builder, { slot: 'environment' });\n            if (this.environmentAlpha && this.environment)\n                this.environmentAlpha.analyze(builder);\n            var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\n            var color = this.color.flow(builder, 'c', { slot: 'color' });\n            var specular = this.specular.flow(builder, 'c');\n            var shininess = this.shininess.flow(builder, 'f');\n            var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\n            var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\n            var light = this.light ? this.light.flow(builder, 'v3', { cache: 'light' }) : undefined;\n            var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\n            var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\n            var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\n            var emissive = this.emissive ? this.emissive.flow(builder, 'c', { slot: 'emissive' }) : undefined;\n            var environment = this.environment ? this.environment.flow(builder, 'c', { slot: 'environment' }) : undefined;\n            var environmentAlpha = this.environmentAlpha && this.environment ? this.environmentAlpha.flow(builder, 'f') : undefined;\n            builder.requires.transparent = alpha !== undefined;\n            builder.addParsCode([\n                '#include <fog_pars_fragment>',\n                '#include <bsdfs>',\n                '#include <lights_pars_begin>',\n                '#include <lights_phong_pars_fragment>',\n                '#include <shadowmap_pars_fragment>',\n                '#include <logdepthbuf_pars_fragment>'\n            ].join('\\n'));\n            var output = [\n                '#include <normal_fragment_begin>',\n                '\\tBlinnPhongMaterial material;'\n            ];\n            if (mask) {\n                output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\n            }\n            output.push(color.code, '\\tvec3 diffuseColor = ' + color.result + ';', '\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', specular.code, '\\tvec3 specular = ' + specular.result + ';', shininess.code, '\\tfloat shininess = max( 0.0001, ' + shininess.result + ' );', '\\tfloat specularStrength = 1.0;');\n            if (alpha) {\n                output.push(alpha.code, '#ifdef ALPHATEST', 'if ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\n            }\n            if (normal) {\n                output.push(normal.code, 'normal = ' + normal.result + ';');\n            }\n            output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor') + ';');\n            output.push('material.specularColor = specular;', 'material.specularShininess = shininess;', 'material.specularStrength = specularStrength;', '#include <lights_fragment_begin>', '#include <lights_fragment_end>');\n            if (light) {\n                output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';');\n                output.push('reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\n            }\n            if (ao) {\n                output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';');\n            }\n            if (ambient) {\n                output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\n            }\n            if (shadow) {\n                output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\n            }\n            if (emissive) {\n                output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\n            }\n            output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular;');\n            if (environment) {\n                output.push(environment.code);\n                if (environmentAlpha) {\n                    output.push(environmentAlpha.code, 'outgoingLight = mix( outgoingLight, ' + environment.result + ', ' + environmentAlpha.result + ' );');\n                } else {\n                    output.push('outgoingLight = ' + environment.result + ';');\n                }\n            }\n            if (alpha) {\n                output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\n            } else {\n                output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\n            }\n            output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>');\n            code = output.join('\\n');\n        }\n        return code;\n    };\n    PhongNode.prototype.copy = function (source) {\n        Node.prototype.copy.call(this, source);\n        if (source.position)\n            this.position = source.position;\n        this.color = source.color;\n        this.specular = source.specular;\n        this.shininess = source.shininess;\n        if (source.mask)\n            this.mask = source.mask;\n        if (source.alpha)\n            this.alpha = source.alpha;\n        if (source.normal)\n            this.normal = source.normal;\n        if (source.light)\n            this.light = source.light;\n        if (source.shadow)\n            this.shadow = source.shadow;\n        if (source.ao)\n            this.ao = source.ao;\n        if (source.emissive)\n            this.emissive = source.emissive;\n        if (source.ambient)\n            this.ambient = source.ambient;\n        if (source.environment)\n            this.environment = source.environment;\n        if (source.environmentAlpha)\n            this.environmentAlpha = source.environmentAlpha;\n        return this;\n    };\n    PhongNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            if (this.position)\n                data.position = this.position.toJSON(meta).uuid;\n            data.color = this.color.toJSON(meta).uuid;\n            data.specular = this.specular.toJSON(meta).uuid;\n            data.shininess = this.shininess.toJSON(meta).uuid;\n            if (this.mask)\n                data.mask = this.mask.toJSON(meta).uuid;\n            if (this.alpha)\n                data.alpha = this.alpha.toJSON(meta).uuid;\n            if (this.normal)\n                data.normal = this.normal.toJSON(meta).uuid;\n            if (this.light)\n                data.light = this.light.toJSON(meta).uuid;\n            if (this.ao)\n                data.ao = this.ao.toJSON(meta).uuid;\n            if (this.ambient)\n                data.ambient = this.ambient.toJSON(meta).uuid;\n            if (this.shadow)\n                data.shadow = this.shadow.toJSON(meta).uuid;\n            if (this.emissive)\n                data.emissive = this.emissive.toJSON(meta).uuid;\n            if (this.environment)\n                data.environment = this.environment.toJSON(meta).uuid;\n            if (this.environmentAlpha)\n                data.environmentAlpha = this.environmentAlpha.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return PhongNode;\n});"]}