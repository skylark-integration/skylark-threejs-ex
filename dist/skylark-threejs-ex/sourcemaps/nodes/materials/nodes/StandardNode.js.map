{"version":3,"sources":["nodes/materials/nodes/StandardNode.js"],"names":["define","THREE","Node","ExpressionNode","ColorNode","FloatNode","SpecularMIPLevelNode","StandardNode","call","this","color","roughness","metalness","prototype","Object","create","constructor","nodeType","build","builder","code","useClearcoat","clearcoat","clearcoatRoughness","clearCoatNormal","requires","lights","extensions","derivatives","shaderTextureLOD","isShader","position","analyzeAndFlow","cache","undefined","mergeUniform","UniformsUtils","merge","UniformsLib","fog","LTC_1","uniforms","ltc_1","value","ltc_2","addParsCode","join","output","push","result","specularRoughness","contextEnvironment","bias","viewNormal","worldNormal","gamma","contextGammaOnly","contextClearcoatEnvironment","mask","analyze","slot","context","alpha","normal","clearcoatNormal","reflectivity","light","ao","ambient","shadow","emissive","environment","irradiance","sheen","flow","radiance","clearcoatEnv","transparent","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","file":"../../../../nodes/materials/nodes/StandardNode.js","sourcesContent":["define([\r\n    'skylark-threejs',\r\n    '../../core/Node',\r\n    '../../core/ExpressionNode',\r\n    '../../inputs/ColorNode',\r\n    '../../inputs/FloatNode',\r\n    '../../utils/SpecularMIPLevelNode'\r\n], function (\r\n    THREE, \r\n    Node, \r\n    ExpressionNode, \r\n    ColorNode, \r\n    FloatNode, \r\n    SpecularMIPLevelNode\r\n) {\r\n    'use strict';\r\n    function StandardNode() {\r\n        Node.call(this);\r\n        this.color = new ColorNode(16777215);\r\n        this.roughness = new FloatNode(1);\r\n        this.metalness = new FloatNode(0);\r\n    }\r\n    StandardNode.prototype = Object.create(Node.prototype);\r\n    StandardNode.prototype.constructor = StandardNode;\r\n    StandardNode.prototype.nodeType = 'Standard';\r\n    StandardNode.prototype.build = function (builder) {\r\n        var code;\r\n        builder.define('STANDARD');\r\n        var useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\r\n        if (useClearcoat) {\r\n            builder.define('CLEARCOAT');\r\n        }\r\n        builder.requires.lights = true;\r\n        builder.extensions.derivatives = true;\r\n        builder.extensions.shaderTextureLOD = true;\r\n        if (builder.isShader('vertex')) {\r\n            var position = this.position ? this.position.analyzeAndFlow(builder, 'v3', { cache: 'position' }) : undefined;\r\n            builder.mergeUniform(THREE.UniformsUtils.merge([\r\n                THREE.UniformsLib.fog,\r\n                THREE.UniformsLib.lights\r\n            ]));\r\n            if (THREE.UniformsLib.LTC_1) {\r\n                builder.uniforms.ltc_1 = { value: undefined };\r\n                builder.uniforms.ltc_2 = { value: undefined };\r\n            }\r\n            builder.addParsCode([\r\n                'varying vec3 vViewPosition;',\r\n                '#ifndef FLAT_SHADED',\r\n                '\\tvarying vec3 vNormal;',\r\n                '#endif',\r\n                '#include <fog_pars_vertex>',\r\n                '#include <morphtarget_pars_vertex>',\r\n                '#include <skinning_pars_vertex>',\r\n                '#include <shadowmap_pars_vertex>',\r\n                '#include <logdepthbuf_pars_vertex>',\r\n                '#include <clipping_planes_pars_vertex>'\r\n            ].join('\\n'));\r\n            var output = [\r\n                '#include <beginnormal_vertex>',\r\n                '#include <morphnormal_vertex>',\r\n                '#include <skinbase_vertex>',\r\n                '#include <skinnormal_vertex>',\r\n                '#include <defaultnormal_vertex>',\r\n                '#ifndef FLAT_SHADED',\r\n                '\\tvNormal = normalize( transformedNormal );',\r\n                '#endif',\r\n                '#include <begin_vertex>'\r\n            ];\r\n            if (position) {\r\n                output.push(position.code, position.result ? 'transformed = ' + position.result + ';' : '');\r\n            }\r\n            output.push('#include <morphtarget_vertex>', '#include <skinning_vertex>', '#include <project_vertex>', '#include <fog_vertex>', '#include <logdepthbuf_vertex>', '#include <clipping_planes_vertex>', '\\tvViewPosition = - mvPosition.xyz;', '#include <worldpos_vertex>', '#include <shadowmap_vertex>');\r\n            code = output.join('\\n');\r\n        } else {\r\n            var specularRoughness = new ExpressionNode('material.specularRoughness', 'f');\r\n            var clearcoatRoughness = new ExpressionNode('material.clearcoatRoughness', 'f');\r\n            var contextEnvironment = {\r\n                roughness: specularRoughness,\r\n                bias: new SpecularMIPLevelNode(specularRoughness),\r\n                viewNormal: new ExpressionNode('normal', 'v3'),\r\n                worldNormal: new ExpressionNode('inverseTransformDirection( geometry.normal, viewMatrix )', 'v3'),\r\n                gamma: true\r\n            };\r\n            var contextGammaOnly = { gamma: true };\r\n            var contextClearcoatEnvironment = {\r\n                roughness: clearcoatRoughness,\r\n                bias: new SpecularMIPLevelNode(clearcoatRoughness),\r\n                viewNormal: new ExpressionNode('clearcoatNormal', 'v3'),\r\n                worldNormal: new ExpressionNode('inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3'),\r\n                gamma: true\r\n            };\r\n            if (this.mask)\r\n                this.mask.analyze(builder);\r\n            this.color.analyze(builder, {\r\n                slot: 'color',\r\n                context: contextGammaOnly\r\n            });\r\n            this.roughness.analyze(builder);\r\n            this.metalness.analyze(builder);\r\n            if (this.alpha)\r\n                this.alpha.analyze(builder);\r\n            if (this.normal)\r\n                this.normal.analyze(builder);\r\n            if (this.clearcoat)\r\n                this.clearcoat.analyze(builder);\r\n            if (this.clearcoatRoughness)\r\n                this.clearcoatRoughness.analyze(builder);\r\n            if (this.clearcoatNormal)\r\n                this.clearcoatNormal.analyze(builder);\r\n            if (this.reflectivity)\r\n                this.reflectivity.analyze(builder);\r\n            if (this.light)\r\n                this.light.analyze(builder, { cache: 'light' });\r\n            if (this.ao)\r\n                this.ao.analyze(builder);\r\n            if (this.ambient)\r\n                this.ambient.analyze(builder);\r\n            if (this.shadow)\r\n                this.shadow.analyze(builder);\r\n            if (this.emissive)\r\n                this.emissive.analyze(builder, { slot: 'emissive' });\r\n            if (this.environment) {\r\n                this.environment.analyze(builder, {\r\n                    cache: 'radiance',\r\n                    context: contextEnvironment,\r\n                    slot: 'radiance'\r\n                });\r\n                if (builder.requires.irradiance) {\r\n                    this.environment.analyze(builder, {\r\n                        cache: 'irradiance',\r\n                        context: contextEnvironment,\r\n                        slot: 'irradiance'\r\n                    });\r\n                }\r\n            }\r\n            if (this.sheen)\r\n                this.sheen.analyze(builder);\r\n            var mask = this.mask ? this.mask.flow(builder, 'b') : undefined;\r\n            var color = this.color.flow(builder, 'c', {\r\n                slot: 'color',\r\n                context: contextGammaOnly\r\n            });\r\n            var roughness = this.roughness.flow(builder, 'f');\r\n            var metalness = this.metalness.flow(builder, 'f');\r\n            var alpha = this.alpha ? this.alpha.flow(builder, 'f') : undefined;\r\n            var normal = this.normal ? this.normal.flow(builder, 'v3') : undefined;\r\n            var clearcoat = this.clearcoat ? this.clearcoat.flow(builder, 'f') : undefined;\r\n            var clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow(builder, 'f') : undefined;\r\n            var clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow(builder, 'v3') : undefined;\r\n            var reflectivity = this.reflectivity ? this.reflectivity.flow(builder, 'f') : undefined;\r\n            var light = this.light ? this.light.flow(builder, 'v3', { cache: 'light' }) : undefined;\r\n            var ao = this.ao ? this.ao.flow(builder, 'f') : undefined;\r\n            var ambient = this.ambient ? this.ambient.flow(builder, 'c') : undefined;\r\n            var shadow = this.shadow ? this.shadow.flow(builder, 'c') : undefined;\r\n            var emissive = this.emissive ? this.emissive.flow(builder, 'c', { slot: 'emissive' }) : undefined;\r\n            var environment;\r\n            if (this.environment) {\r\n                environment = {\r\n                    radiance: this.environment.flow(builder, 'c', {\r\n                        cache: 'radiance',\r\n                        context: contextEnvironment,\r\n                        slot: 'radiance'\r\n                    })\r\n                };\r\n                if (builder.requires.irradiance) {\r\n                    environment.irradiance = this.environment.flow(builder, 'c', {\r\n                        cache: 'irradiance',\r\n                        context: contextEnvironment,\r\n                        slot: 'irradiance'\r\n                    });\r\n                }\r\n            }\r\n            var clearcoatEnv = useClearcoat && environment ? this.environment.flow(builder, 'c', {\r\n                cache: 'clearcoat',\r\n                context: contextClearcoatEnvironment,\r\n                slot: 'environment'\r\n            }) : undefined;\r\n            var sheen = this.sheen ? this.sheen.flow(builder, 'c') : undefined;\r\n            builder.requires.transparent = alpha !== undefined;\r\n            builder.addParsCode([\r\n                'varying vec3 vViewPosition;',\r\n                '#ifndef FLAT_SHADED',\r\n                '\\tvarying vec3 vNormal;',\r\n                '#endif',\r\n                '#include <dithering_pars_fragment>',\r\n                '#include <fog_pars_fragment>',\r\n                '#include <bsdfs>',\r\n                '#include <lights_pars_begin>',\r\n                '#include <lights_physical_pars_fragment>',\r\n                '#include <shadowmap_pars_fragment>',\r\n                '#include <logdepthbuf_pars_fragment>'\r\n            ].join('\\n'));\r\n            var output = [\r\n                '#include <clipping_planes_fragment>',\r\n                '\\t#include <normal_fragment_begin>',\r\n                '\\t#include <clearcoat_normal_fragment_begin>',\r\n                '\\tPhysicalMaterial material;',\r\n                '\\tmaterial.diffuseColor = vec3( 1.0 );'\r\n            ];\r\n            if (mask) {\r\n                output.push(mask.code, 'if ( ! ' + mask.result + ' ) discard;');\r\n            }\r\n            output.push(color.code, '\\tvec3 diffuseColor = ' + color.result + ';', '\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );', '#include <logdepthbuf_fragment>', roughness.code, '\\tfloat roughnessFactor = ' + roughness.result + ';', metalness.code, '\\tfloat metalnessFactor = ' + metalness.result + ';');\r\n            if (alpha) {\r\n                output.push(alpha.code, '#ifdef ALPHATEST', '\\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;', '#endif');\r\n            }\r\n            if (normal) {\r\n                output.push(normal.code, 'normal = ' + normal.result + ';');\r\n            }\r\n            if (clearcoatNormal) {\r\n                output.push(clearcoatNormal.code, 'clearcoatNormal = ' + clearcoatNormal.result + ';');\r\n            }\r\n            output.push('vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );', 'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );');\r\n            output.push('material.diffuseColor = ' + (light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )') + ';', 'material.specularRoughness = max( roughnessFactor, 0.0525 );', 'material.specularRoughness += geometryRoughness;', 'material.specularRoughness = min( material.specularRoughness, 1.0 );', 'material.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );');\r\n            if (clearcoat) {\r\n                output.push(clearcoat.code, 'material.clearcoat = saturate( ' + clearcoat.result + ' );');\r\n            } else if (useClearcoat) {\r\n                output.push('material.clearcoat = 0.0;');\r\n            }\r\n            if (clearcoatRoughness) {\r\n                output.push(clearcoatRoughness.code, 'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );', 'material.clearcoatRoughness += geometryRoughness;', 'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );');\r\n            } else if (useClearcoat) {\r\n                output.push('material.clearcoatRoughness = 0.0;');\r\n            }\r\n            if (sheen) {\r\n                output.push('material.sheenColor = ' + sheen.result + ';');\r\n            }\r\n            if (reflectivity) {\r\n                output.push(reflectivity.code, 'material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );');\r\n            } else {\r\n                output.push('material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );');\r\n            }\r\n            output.push('#include <lights_fragment_begin>');\r\n            if (light) {\r\n                output.push(light.code, 'reflectedLight.directDiffuse = ' + light.result + ';');\r\n                output.push('diffuseColor *= 1.0 - metalnessFactor;', 'reflectedLight.directDiffuse *= diffuseColor;', 'reflectedLight.indirectDiffuse *= diffuseColor;');\r\n            }\r\n            if (ao) {\r\n                output.push(ao.code, 'reflectedLight.indirectDiffuse *= ' + ao.result + ';', 'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );', 'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.specularRoughness );');\r\n            }\r\n            if (ambient) {\r\n                output.push(ambient.code, 'reflectedLight.indirectDiffuse += ' + ambient.result + ';');\r\n            }\r\n            if (shadow) {\r\n                output.push(shadow.code, 'reflectedLight.directDiffuse *= ' + shadow.result + ';', 'reflectedLight.directSpecular *= ' + shadow.result + ';');\r\n            }\r\n            if (emissive) {\r\n                output.push(emissive.code, 'reflectedLight.directDiffuse += ' + emissive.result + ';');\r\n            }\r\n            if (environment) {\r\n                output.push(environment.radiance.code);\r\n                if (builder.requires.irradiance) {\r\n                    output.push(environment.irradiance.code);\r\n                }\r\n                if (clearcoatEnv) {\r\n                    output.push(clearcoatEnv.code, 'clearcoatRadiance += ' + clearcoatEnv.result + ';');\r\n                }\r\n                output.push('radiance += ' + environment.radiance.result + ';');\r\n                if (builder.requires.irradiance) {\r\n                    output.push('iblIrradiance += PI * ' + environment.irradiance.result + ';');\r\n                }\r\n            }\r\n            output.push('#include <lights_fragment_end>');\r\n            output.push('vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;');\r\n            if (alpha) {\r\n                output.push('gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );');\r\n            } else {\r\n                output.push('gl_FragColor = vec4( outgoingLight, 1.0 );');\r\n            }\r\n            output.push('#include <tonemapping_fragment>', '#include <encodings_fragment>', '#include <fog_fragment>', '#include <premultiplied_alpha_fragment>', '#include <dithering_fragment>');\r\n            code = output.join('\\n');\r\n        }\r\n        return code;\r\n    };\r\n    StandardNode.prototype.copy = function (source) {\r\n        Node.prototype.copy.call(this, source);\r\n        if (source.position)\r\n            this.position = source.position;\r\n        this.color = source.color;\r\n        this.roughness = source.roughness;\r\n        this.metalness = source.metalness;\r\n        if (source.mask)\r\n            this.mask = source.mask;\r\n        if (source.alpha)\r\n            this.alpha = source.alpha;\r\n        if (source.normal)\r\n            this.normal = source.normal;\r\n        if (source.clearcoat)\r\n            this.clearcoat = source.clearcoat;\r\n        if (source.clearcoatRoughness)\r\n            this.clearcoatRoughness = source.clearcoatRoughness;\r\n        if (source.clearcoatNormal)\r\n            this.clearcoatNormal = source.clearcoatNormal;\r\n        if (source.reflectivity)\r\n            this.reflectivity = source.reflectivity;\r\n        if (source.light)\r\n            this.light = source.light;\r\n        if (source.shadow)\r\n            this.shadow = source.shadow;\r\n        if (source.ao)\r\n            this.ao = source.ao;\r\n        if (source.emissive)\r\n            this.emissive = source.emissive;\r\n        if (source.ambient)\r\n            this.ambient = source.ambient;\r\n        if (source.environment)\r\n            this.environment = source.environment;\r\n        if (source.sheen)\r\n            this.sheen = source.sheen;\r\n        return this;\r\n    };\r\n    StandardNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            if (this.position)\r\n                data.position = this.position.toJSON(meta).uuid;\r\n            data.color = this.color.toJSON(meta).uuid;\r\n            data.roughness = this.roughness.toJSON(meta).uuid;\r\n            data.metalness = this.metalness.toJSON(meta).uuid;\r\n            if (this.mask)\r\n                data.mask = this.mask.toJSON(meta).uuid;\r\n            if (this.alpha)\r\n                data.alpha = this.alpha.toJSON(meta).uuid;\r\n            if (this.normal)\r\n                data.normal = this.normal.toJSON(meta).uuid;\r\n            if (this.clearcoat)\r\n                data.clearcoat = this.clearcoat.toJSON(meta).uuid;\r\n            if (this.clearcoatRoughness)\r\n                data.clearcoatRoughness = this.clearcoatRoughness.toJSON(meta).uuid;\r\n            if (this.clearcoatNormal)\r\n                data.clearcoatNormal = this.clearcoatNormal.toJSON(meta).uuid;\r\n            if (this.reflectivity)\r\n                data.reflectivity = this.reflectivity.toJSON(meta).uuid;\r\n            if (this.light)\r\n                data.light = this.light.toJSON(meta).uuid;\r\n            if (this.shadow)\r\n                data.shadow = this.shadow.toJSON(meta).uuid;\r\n            if (this.ao)\r\n                data.ao = this.ao.toJSON(meta).uuid;\r\n            if (this.emissive)\r\n                data.emissive = this.emissive.toJSON(meta).uuid;\r\n            if (this.ambient)\r\n                data.ambient = this.ambient.toJSON(meta).uuid;\r\n            if (this.environment)\r\n                data.environment = this.environment.toJSON(meta).uuid;\r\n            if (this.sheen)\r\n                data.sheen = this.sheen.toJSON(meta).uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return StandardNode;\r\n});"]}