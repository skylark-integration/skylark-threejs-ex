{"version":3,"sources":["nodes/materials/nodes/MeshStandardNode.js"],"names":["define","THREE","StandardNode","PropertyNode","OperatorNode","SwitchNode","NormalMapNode","MeshStandardNode","call","this","properties","color","Color","roughness","metalness","normalScale","Vector2","inputs","prototype","Object","create","constructor","nodeType","build","builder","props","isShader","findNode","map","resolve","MUL","roughnessMap","metalnessMap","normalMap","normal","scale","undefined","environment","envMap","toJSON","meta","data","getJSONNode","createJSONNode","console","warn"],"mappings":";;;;;;;AAAAA,QACI,kBACA,iBACA,4BACA,0BACA,yBACA,4BACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,aACA,SAASC,IACLL,EAAaM,KAAKC,MAClBA,KAAKC,YACDC,MAAO,IAAIV,EAAMW,MAAM,UACvBC,UAAW,GACXC,UAAW,GACXC,YAAa,IAAId,EAAMe,QAAQ,EAAG,IAEtCP,KAAKQ,QACDN,MAAO,IAAIR,EAAaM,KAAKC,WAAY,QAAS,KAClDG,UAAW,IAAIV,EAAaM,KAAKC,WAAY,YAAa,KAC1DI,UAAW,IAAIX,EAAaM,KAAKC,WAAY,YAAa,KAC1DK,YAAa,IAAIZ,EAAaM,KAAKC,WAAY,cAAe,OAiCtE,OA9BAH,EAAiBW,UAAYC,OAAOC,OAAOlB,EAAagB,WACxDX,EAAiBW,UAAUG,YAAcd,EACzCA,EAAiBW,UAAUI,SAAW,eACtCf,EAAiBW,UAAUK,MAAQ,SAAUC,GACzC,IAAIC,EAAQhB,KAAKC,WAAYO,EAASR,KAAKQ,OAC3C,GAAIO,EAAQE,SAAS,YAAa,CAC9B,IAAIf,EAAQa,EAAQG,SAASF,EAAMd,MAAOM,EAAON,OAAQiB,EAAMJ,EAAQK,QAAQJ,EAAMG,KACrFnB,KAAKE,MAAQiB,EAAM,IAAIxB,EAAaO,EAAOiB,EAAKxB,EAAa0B,KAAOnB,EACpE,IAAIE,EAAYW,EAAQG,SAASF,EAAMZ,UAAWI,EAAOJ,WAAYkB,EAAeP,EAAQK,QAAQJ,EAAMM,cAC1GtB,KAAKI,UAAYkB,EAAe,IAAI3B,EAAaS,EAAW,IAAIR,EAAW0B,EAAc,KAAM3B,EAAa0B,KAAOjB,EACnH,IAAIC,EAAYU,EAAQG,SAASF,EAAMX,UAAWG,EAAOH,WAAYkB,EAAeR,EAAQK,QAAQJ,EAAMO,cAC1GvB,KAAKK,UAAYkB,EAAe,IAAI5B,EAAaU,EAAW,IAAIT,EAAW2B,EAAc,KAAM5B,EAAa0B,KAAOhB,EAC/GW,EAAMQ,WACNxB,KAAKyB,OAAS,IAAI5B,EAAckB,EAAQK,QAAQJ,EAAMQ,YACtDxB,KAAKyB,OAAOC,MAAQX,EAAQG,SAASF,EAAMV,YAAaE,EAAOF,cAE/DN,KAAKyB,YAASE,EAElB3B,KAAK4B,YAAcb,EAAQK,QAAQJ,EAAMa,QAE7C,OAAOpC,EAAagB,UAAUK,MAAMf,KAAKC,KAAMe,IAEnDjB,EAAiBW,UAAUqB,OAAS,SAAUC,GAC1C,IAAIC,EAAOhC,KAAKiC,YAAYF,GAK5B,OAJKC,IACDA,EAAOhC,KAAKkC,eAAeH,GAC3BI,QAAQC,KAAK,6BAA8BpC,OAExCgC,GAEJlC","file":"../../../../nodes/materials/nodes/MeshStandardNode.js","sourcesContent":["define([\r\n    'skylark-threejs',\r\n    './StandardNode',\r\n    '../../inputs/PropertyNode',\r\n    '../../math/OperatorNode',\r\n    '../../utils/SwitchNode',\r\n    '../../misc/NormalMapNode'\r\n], function (\r\n    THREE, \r\n    StandardNode, \r\n    PropertyNode, \r\n    OperatorNode, \r\n    SwitchNode, \r\n    NormalMapNode\r\n) {\r\n    'use strict';\r\n    function MeshStandardNode() {\r\n        StandardNode.call(this);\r\n        this.properties = {\r\n            color: new THREE.Color(16777215),\r\n            roughness: 0.5,\r\n            metalness: 0.5,\r\n            normalScale: new THREE.Vector2(1, 1)\r\n        };\r\n        this.inputs = {\r\n            color: new PropertyNode(this.properties, 'color', 'c'),\r\n            roughness: new PropertyNode(this.properties, 'roughness', 'f'),\r\n            metalness: new PropertyNode(this.properties, 'metalness', 'f'),\r\n            normalScale: new PropertyNode(this.properties, 'normalScale', 'v2')\r\n        };\r\n    }\r\n    MeshStandardNode.prototype = Object.create(StandardNode.prototype);\r\n    MeshStandardNode.prototype.constructor = MeshStandardNode;\r\n    MeshStandardNode.prototype.nodeType = 'MeshStandard';\r\n    MeshStandardNode.prototype.build = function (builder) {\r\n        var props = this.properties, inputs = this.inputs;\r\n        if (builder.isShader('fragment')) {\r\n            var color = builder.findNode(props.color, inputs.color), map = builder.resolve(props.map);\r\n            this.color = map ? new OperatorNode(color, map, OperatorNode.MUL) : color;\r\n            var roughness = builder.findNode(props.roughness, inputs.roughness), roughnessMap = builder.resolve(props.roughnessMap);\r\n            this.roughness = roughnessMap ? new OperatorNode(roughness, new SwitchNode(roughnessMap, 'g'), OperatorNode.MUL) : roughness;\r\n            var metalness = builder.findNode(props.metalness, inputs.metalness), metalnessMap = builder.resolve(props.metalnessMap);\r\n            this.metalness = metalnessMap ? new OperatorNode(metalness, new SwitchNode(metalnessMap, 'b'), OperatorNode.MUL) : metalness;\r\n            if (props.normalMap) {\r\n                this.normal = new NormalMapNode(builder.resolve(props.normalMap));\r\n                this.normal.scale = builder.findNode(props.normalScale, inputs.normalScale);\r\n            } else {\r\n                this.normal = undefined;\r\n            }\r\n            this.environment = builder.resolve(props.envMap);\r\n        }\r\n        return StandardNode.prototype.build.call(this, builder);\r\n    };\r\n    MeshStandardNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            console.warn('.toJSON not implemented in', this);\r\n        }\r\n        return data;\r\n    };\r\n    return MeshStandardNode;\r\n});"]}