{"version":3,"sources":["nodes/materials/NodeMaterial.js"],"names":["define","THREE","NodeBuilder","ColorNode","PositionNode","RawNode","NodeMaterial","vertex","fragment","ShaderMaterial","call","this","self","PROJECTION","updaters","onBeforeCompile","shader","renderer","materialProperties","properties","get","version","__version","build","uniforms","vertexShader","fragmentShader","toString","needsCompile","prototype","Object","create","constructor","type","isNodeMaterial","defineProperties","needsUpdate","set","value","updateFrame","frame","i","length","updateNode","params","builder","setMaterial","getCode","defines","extensions","fog","requires","lights","transparent","blending","NormalBlending","copy","source","uuid","name","undefined","userData","JSON","parse","stringify","toJSON","meta","nodes","materials","data","size","sizeAttenuation","flatShading","side","FrontSide","vertexColors","NoColors","depthFunc","LessEqualDepth","depthTest","depthWrite","linewidth","dashSize","gapSize","scale","dithering","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","alphaTest","premultipliedAlpha","morphTargets","skinning","visible","material"],"mappings":";;;;;;;AAAAA,QACI,kBACA,sBACA,sBACA,4BACA,mBACD,SACCC,EACAC,EACAC,EACAC,EACAC,GAEA,aACA,SAASC,EAAaC,EAAQC,GAC1BP,EAAMQ,eAAeC,KAAKC,MAC1B,IAAIC,EAAOD,KACXA,KAAKJ,OAASA,GAAU,IAAIF,EAAQ,IAAID,EAAaA,EAAaS,aAClEF,KAAKH,SAAWA,GAAY,IAAIH,EAAQ,IAAIF,EAAU,WACtDQ,KAAKG,YACLH,KAAKI,gBAAkB,SAAUC,EAAQC,GACrC,IAAIC,EAAqBD,EAASE,WAAWC,IAAIT,MAC7CA,KAAKU,UAAYH,EAAmBI,YACpCX,KAAKY,OAAQN,SAAUA,IACvBD,EAAOQ,SAAWb,KAAKa,SACvBR,EAAOS,aAAed,KAAKc,aAC3BT,EAAOU,eAAiBf,KAAKe,iBAGrCf,KAAKI,gBAAgBY,SAAW,WAC5B,OAAOf,EAAKgB,cA8HpB,OA3HAtB,EAAauB,UAAYC,OAAOC,OAAO9B,EAAMQ,eAAeoB,WAC5DvB,EAAauB,UAAUG,YAAc1B,EACrCA,EAAauB,UAAUI,KAAO,eAC9B3B,EAAauB,UAAUK,gBAAiB,EACxCJ,OAAOK,iBAAiB7B,EAAauB,WACjCV,YACIC,IAAK,WACD,OAAOT,KAAKH,SAASW,aAG7BiB,aACIC,IAAK,SAAUC,IACG,IAAVA,GACA3B,KAAKU,UACTV,KAAKiB,aAAeU,GAExBlB,IAAK,WACD,OAAOT,KAAKiB,iBAIxBtB,EAAauB,UAAUU,YAAc,SAAUC,GAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAI9B,KAAKG,SAAS4B,SAAUD,EACxCD,EAAMG,WAAWhC,KAAKG,SAAS2B,KAGvCnC,EAAauB,UAAUN,MAAQ,SAAUqB,GAErC,IAAIC,GADJD,EAASA,OACYC,SAAW,IAAI3C,EAYpC,OAXA2C,EAAQC,YAAYnC,KAAMiC,EAAO3B,UACjC4B,EAAQtB,MAAMZ,KAAKJ,OAAQI,KAAKH,UAChCG,KAAKc,aAAeoB,EAAQE,QAAQ,UACpCpC,KAAKe,eAAiBmB,EAAQE,QAAQ,YACtCpC,KAAKqC,QAAUH,EAAQG,QACvBrC,KAAKa,SAAWqB,EAAQrB,SACxBb,KAAKsC,WAAaJ,EAAQI,WAC1BtC,KAAKG,SAAW+B,EAAQ/B,SACxBH,KAAKuC,IAAML,EAAQM,SAASD,IAC5BvC,KAAKyC,OAASP,EAAQM,SAASC,OAC/BzC,KAAK0C,YAAcR,EAAQM,SAASE,aAAe1C,KAAK2C,SAAWrD,EAAMsD,eAClE5C,MAEXL,EAAauB,UAAU2B,KAAO,SAAUC,GACpC,IAAIC,EAAO/C,KAAK+C,KAChB,IAAK,IAAIC,KAAQF,EACb9C,KAAKgD,GAAQF,EAAOE,GAMxB,OAJAhD,KAAK+C,KAAOA,OACYE,IAApBH,EAAOI,WACPlD,KAAKkD,SAAWC,KAAKC,MAAMD,KAAKE,UAAUP,EAAOI,YAE9ClD,MAEXL,EAAauB,UAAUoC,OAAS,SAAUC,GAOtC,SAN4BN,IAATM,GAAsC,iBAATA,KAE5CA,GAASC,WAETD,IAASA,EAAKE,YACdF,EAAKE,eACJF,EAAKE,UAAUzD,KAAK+C,MAAO,CAC5B,IAAIW,KACJA,EAAKX,KAAO/C,KAAK+C,KACjBW,EAAKpC,KAAOtB,KAAKsB,KACjBiC,EAAKE,UAAUC,EAAKX,MAAQW,EACV,KAAd1D,KAAKgD,OACLU,EAAKV,KAAOhD,KAAKgD,WACHC,IAAdjD,KAAK2D,OACLD,EAAKC,KAAO3D,KAAK2D,WACQV,IAAzBjD,KAAK4D,kBACLF,EAAKE,gBAAkB5D,KAAK4D,iBAC5B5D,KAAK2C,WAAarD,EAAMsD,iBACxBc,EAAKf,SAAW3C,KAAK2C,WACA,IAArB3C,KAAK6D,cACLH,EAAKG,YAAc7D,KAAK6D,aACxB7D,KAAK8D,OAASxE,EAAMyE,YACpBL,EAAKI,KAAO9D,KAAK8D,MACjB9D,KAAKgE,eAAiB1E,EAAM2E,WAC5BP,EAAKM,aAAehE,KAAKgE,cACzBhE,KAAKkE,YAAc5E,EAAM6E,iBACzBT,EAAKQ,UAAYlE,KAAKkE,YACH,IAAnBlE,KAAKoE,YACLV,EAAKU,UAAYpE,KAAKoE,YACF,IAApBpE,KAAKqE,aACLX,EAAKW,WAAarE,KAAKqE,YACJ,IAAnBrE,KAAKsE,YACLZ,EAAKY,UAAYtE,KAAKsE,gBACJrB,IAAlBjD,KAAKuE,WACLb,EAAKa,SAAWvE,KAAKuE,eACJtB,IAAjBjD,KAAKwE,UACLd,EAAKc,QAAUxE,KAAKwE,cACLvB,IAAfjD,KAAKyE,QACLf,EAAKe,MAAQzE,KAAKyE,QACC,IAAnBzE,KAAK0E,YACLhB,EAAKgB,WAAY,IACE,IAAnB1E,KAAK2E,YACLjB,EAAKiB,UAAY3E,KAAK2E,WACtB3E,KAAK4E,mBAAqB,IAC1BlB,EAAKkB,mBAAqB5E,KAAK4E,oBACL,UAA1B5E,KAAK6E,mBACLnB,EAAKmB,iBAAmB7E,KAAK6E,kBACF,UAA3B7E,KAAK8E,oBACLpB,EAAKoB,kBAAoB9E,KAAK8E,mBAC9B9E,KAAK+E,UAAY,IACjBrB,EAAKqB,UAAY/E,KAAK+E,YACM,IAA5B/E,KAAKgF,qBACLtB,EAAKsB,mBAAqBhF,KAAKgF,qBACT,IAAtBhF,KAAKiF,eACLvB,EAAKuB,cAAe,IACF,IAAlBjF,KAAKkF,WACLxB,EAAKwB,UAAW,IACC,IAAjBlF,KAAKmF,UACLzB,EAAKyB,SAAU,GACmB,OAAlChC,KAAKE,UAAUrD,KAAKkD,YACpBQ,EAAKR,SAAWlD,KAAKkD,UACzBQ,EAAKnB,IAAMvC,KAAKuC,IAChBmB,EAAKjB,OAASzC,KAAKyC,OACnBiB,EAAK9D,OAASI,KAAKJ,OAAO0D,OAAOC,GAAMR,KACvCW,EAAK7D,SAAWG,KAAKH,SAASyD,OAAOC,GAAMR,KAG/C,OADAQ,EAAK6B,SAAWpF,KAAK+C,KACdQ,GAEJ5D","file":"../../../nodes/materials/NodeMaterial.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    '../core/NodeBuilder',\r\n    '../inputs/ColorNode',\r\n    '../accessors/PositionNode',\r\n    './nodes/RawNode'\r\n], function (\r\n    THREE, \r\n    NodeBuilder, \r\n    ColorNode, \r\n    PositionNode, \r\n    RawNode\r\n) {\r\n    'use strict';\r\n    function NodeMaterial(vertex, fragment) {\r\n        THREE.ShaderMaterial.call(this);\r\n        var self = this;\r\n        this.vertex = vertex || new RawNode(new PositionNode(PositionNode.PROJECTION));\r\n        this.fragment = fragment || new RawNode(new ColorNode(16711680));\r\n        this.updaters = [];\r\n        this.onBeforeCompile = function (shader, renderer) {\r\n            var materialProperties = renderer.properties.get(this);\r\n            if (this.version !== materialProperties.__version) {\r\n                this.build({ renderer: renderer });\r\n                shader.uniforms = this.uniforms;\r\n                shader.vertexShader = this.vertexShader;\r\n                shader.fragmentShader = this.fragmentShader;\r\n            }\r\n        };\r\n        this.onBeforeCompile.toString = function () {\r\n            return self.needsCompile;\r\n        };\r\n    }\r\n    NodeMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\r\n    NodeMaterial.prototype.constructor = NodeMaterial;\r\n    NodeMaterial.prototype.type = 'NodeMaterial';\r\n    NodeMaterial.prototype.isNodeMaterial = true;\r\n    Object.defineProperties(NodeMaterial.prototype, {\r\n        properties: {\r\n            get: function () {\r\n                return this.fragment.properties;\r\n            }\r\n        },\r\n        needsUpdate: {\r\n            set: function (value) {\r\n                if (value === true)\r\n                    this.version++;\r\n                this.needsCompile = value;\r\n            },\r\n            get: function () {\r\n                return this.needsCompile;\r\n            }\r\n        }\r\n    });\r\n    NodeMaterial.prototype.updateFrame = function (frame) {\r\n        for (var i = 0; i < this.updaters.length; ++i) {\r\n            frame.updateNode(this.updaters[i]);\r\n        }\r\n    };\r\n    NodeMaterial.prototype.build = function (params) {\r\n        params = params || {};\r\n        var builder = params.builder || new NodeBuilder();\r\n        builder.setMaterial(this, params.renderer);\r\n        builder.build(this.vertex, this.fragment);\r\n        this.vertexShader = builder.getCode('vertex');\r\n        this.fragmentShader = builder.getCode('fragment');\r\n        this.defines = builder.defines;\r\n        this.uniforms = builder.uniforms;\r\n        this.extensions = builder.extensions;\r\n        this.updaters = builder.updaters;\r\n        this.fog = builder.requires.fog;\r\n        this.lights = builder.requires.lights;\r\n        this.transparent = builder.requires.transparent || this.blending > THREE.NormalBlending;\r\n        return this;\r\n    };\r\n    NodeMaterial.prototype.copy = function (source) {\r\n        var uuid = this.uuid;\r\n        for (var name in source) {\r\n            this[name] = source[name];\r\n        }\r\n        this.uuid = uuid;\r\n        if (source.userData !== undefined) {\r\n            this.userData = JSON.parse(JSON.stringify(source.userData));\r\n        }\r\n        return this;\r\n    };\r\n    NodeMaterial.prototype.toJSON = function (meta) {\r\n        var isRootObject = meta === undefined || typeof meta === 'string';\r\n        if (isRootObject) {\r\n            meta = { nodes: {} };\r\n        }\r\n        if (meta && !meta.materials)\r\n            meta.materials = {};\r\n        if (!meta.materials[this.uuid]) {\r\n            var data = {};\r\n            data.uuid = this.uuid;\r\n            data.type = this.type;\r\n            meta.materials[data.uuid] = data;\r\n            if (this.name !== '')\r\n                data.name = this.name;\r\n            if (this.size !== undefined)\r\n                data.size = this.size;\r\n            if (this.sizeAttenuation !== undefined)\r\n                data.sizeAttenuation = this.sizeAttenuation;\r\n            if (this.blending !== THREE.NormalBlending)\r\n                data.blending = this.blending;\r\n            if (this.flatShading === true)\r\n                data.flatShading = this.flatShading;\r\n            if (this.side !== THREE.FrontSide)\r\n                data.side = this.side;\r\n            if (this.vertexColors !== THREE.NoColors)\r\n                data.vertexColors = this.vertexColors;\r\n            if (this.depthFunc !== THREE.LessEqualDepth)\r\n                data.depthFunc = this.depthFunc;\r\n            if (this.depthTest === false)\r\n                data.depthTest = this.depthTest;\r\n            if (this.depthWrite === false)\r\n                data.depthWrite = this.depthWrite;\r\n            if (this.linewidth !== 1)\r\n                data.linewidth = this.linewidth;\r\n            if (this.dashSize !== undefined)\r\n                data.dashSize = this.dashSize;\r\n            if (this.gapSize !== undefined)\r\n                data.gapSize = this.gapSize;\r\n            if (this.scale !== undefined)\r\n                data.scale = this.scale;\r\n            if (this.dithering === true)\r\n                data.dithering = true;\r\n            if (this.wireframe === true)\r\n                data.wireframe = this.wireframe;\r\n            if (this.wireframeLinewidth > 1)\r\n                data.wireframeLinewidth = this.wireframeLinewidth;\r\n            if (this.wireframeLinecap !== 'round')\r\n                data.wireframeLinecap = this.wireframeLinecap;\r\n            if (this.wireframeLinejoin !== 'round')\r\n                data.wireframeLinejoin = this.wireframeLinejoin;\r\n            if (this.alphaTest > 0)\r\n                data.alphaTest = this.alphaTest;\r\n            if (this.premultipliedAlpha === true)\r\n                data.premultipliedAlpha = this.premultipliedAlpha;\r\n            if (this.morphTargets === true)\r\n                data.morphTargets = true;\r\n            if (this.skinning === true)\r\n                data.skinning = true;\r\n            if (this.visible === false)\r\n                data.visible = false;\r\n            if (JSON.stringify(this.userData) !== '{}')\r\n                data.userData = this.userData;\r\n            data.fog = this.fog;\r\n            data.lights = this.lights;\r\n            data.vertex = this.vertex.toJSON(meta).uuid;\r\n            data.fragment = this.fragment.toJSON(meta).uuid;\r\n        }\r\n        meta.material = this.uuid;\r\n        return meta;\r\n    };\r\n    return NodeMaterial;\r\n});"]}