{"version":3,"sources":["nodes/utils/ColorSpaceNode.js"],"names":["define","THREE","TempNode","ConstNode","FloatNode","FunctionNode","ExpressionNode","ColorSpaceNode","input","method","call","this","LINEAR_TO_LINEAR","LinearToLinear","GammaToLinear","LinearToGamma","sRGBToLinear","LinearTosRGB","RGBEToLinear","LinearToRGBE","RGBMToLinear","LinearToRGBM","RGBDToLinear","LinearToRGBD","cLogLuvM","LinearToLogLuv","cLogLuvInverseM","Nodes","join","LogLuvToLinear","GAMMA_TO_LINEAR","LINEAR_TO_GAMMA","SRGB_TO_LINEAR","LINEAR_TO_SRGB","RGBE_TO_LINEAR","LINEAR_TO_RGBE","RGBM_TO_LINEAR","LINEAR_TO_RGBM","RGBD_TO_LINEAR","LINEAR_TO_RGBD","LINEAR_TO_LOG_LUV","LOG_LUV_TO_LINEAR","getEncodingComponents","encoding","LinearEncoding","sRGBEncoding","RGBEEncoding","RGBM7Encoding","setReadonly","RGBM16Encoding","RGBDEncoding","GammaEncoding","prototype","Object","create","constructor","nodeType","generate","builder","output","build","outputType","getType","methodNode","include","format","inputs","length","factor","fromEncoding","components","fromDecoding","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","file":"../../../nodes/utils/ColorSpaceNode.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../core/TempNode',\n    '../core/ConstNode',\n    '../inputs/FloatNode',\n    '../core/FunctionNode',\n    '../core/ExpressionNode'\n], function (\n    THREE, \n    TempNode, \n    ConstNode, \n    FloatNode, \n    FunctionNode, \n    ExpressionNode\n) {\n    'use strict';\n    function ColorSpaceNode(input, method) {\n         TempNode.call(this, 'v4');\n        this.input = input;\n        this.method = method || ColorSpaceNode.LINEAR_TO_LINEAR;\n    }\n    ColorSpaceNode.Nodes = function () {\n        var LinearToLinear = new FunctionNode([\n            'vec4 LinearToLinear( in vec4 value ) {',\n            '\\treturn value;',\n            '}'\n        ].join('\\n'));\n        var GammaToLinear = new FunctionNode([\n            'vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {',\n            '\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );',\n            '}'\n        ].join('\\n'));\n        var LinearToGamma = new FunctionNode([\n            'vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {',\n            '\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );',\n            '}'\n        ].join('\\n'));\n        var sRGBToLinear = new FunctionNode([\n            'vec4 sRGBToLinear( in vec4 value ) {',\n            '\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );',\n            '}'\n        ].join('\\n'));\n        var LinearTosRGB = new FunctionNode([\n            'vec4 LinearTosRGB( in vec4 value ) {',\n            '\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );',\n            '}'\n        ].join('\\n'));\n        var RGBEToLinear = new FunctionNode([\n            'vec4 RGBEToLinear( in vec4 value ) {',\n            '\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );',\n            '}'\n        ].join('\\n'));\n        var LinearToRGBE = new FunctionNode([\n            'vec4 LinearToRGBE( in vec4 value ) {',\n            '\\tfloat maxComponent = max( max( value.r, value.g ), value.b );',\n            '\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );',\n            '\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );',\n            '}'\n        ].join('\\n'));\n        var RGBMToLinear = new FunctionNode([\n            'vec3 RGBMToLinear( in vec4 value, in float maxRange ) {',\n            '\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );',\n            '}'\n        ].join('\\n'));\n        var LinearToRGBM = new FunctionNode([\n            'vec3 LinearToRGBM( in vec4 value, in float maxRange ) {',\n            '\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );',\n            '\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );',\n            '\\tM            = ceil( M * 255.0 ) / 255.0;',\n            '\\treturn vec4( value.rgb / ( M * maxRange ), M );',\n            '}'\n        ].join('\\n'));\n        var RGBDToLinear = new FunctionNode([\n            'vec3 RGBDToLinear( in vec4 value, in float maxRange ) {',\n            '\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );',\n            '}'\n        ].join('\\n'));\n        var LinearToRGBD = new FunctionNode([\n            'vec3 LinearToRGBD( in vec4 value, in float maxRange ) {',\n            '\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );',\n            '\\tfloat D      = max( maxRange / maxRGB, 1.0 );',\n            '\\tD            = clamp( floor( D ) / 255.0, 0.0, 1.0 );',\n            '\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );',\n            '}'\n        ].join('\\n'));\n        var cLogLuvM = new  ConstNode('const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );');\n        var LinearToLogLuv = new FunctionNode([\n            'vec4 LinearToLogLuv( in vec4 value ) {',\n            '\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;',\n            '\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));',\n            '\\tvec4 vResult;',\n            '\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;',\n            '\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;',\n            '\\tvResult.w = fract(Le);',\n            '\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;',\n            '\\treturn vResult;',\n            '}'\n        ].join('\\n'), [cLogLuvM]);\n        var cLogLuvInverseM = new  ConstNode('const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );');\n        var LogLuvToLinear = new FunctionNode([\n            'vec4 LogLuvToLinear( in vec4 value ) {',\n            '\\tfloat Le = value.z * 255.0 + value.w;',\n            '\\tvec3 Xp_Y_XYZp;',\n            '\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);',\n            '\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;',\n            '\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;',\n            '\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;',\n            '\\treturn vec4( max(vRGB, 0.0), 1.0 );',\n            '}'\n        ].join('\\n'), [cLogLuvInverseM]);\n        return {\n            LinearToLinear: LinearToLinear,\n            GammaToLinear: GammaToLinear,\n            LinearToGamma: LinearToGamma,\n            sRGBToLinear: sRGBToLinear,\n            LinearTosRGB: LinearTosRGB,\n            RGBEToLinear: RGBEToLinear,\n            LinearToRGBE: LinearToRGBE,\n            RGBMToLinear: RGBMToLinear,\n            LinearToRGBM: LinearToRGBM,\n            RGBDToLinear: RGBDToLinear,\n            LinearToRGBD: LinearToRGBD,\n            cLogLuvM: cLogLuvM,\n            LinearToLogLuv: LinearToLogLuv,\n            cLogLuvInverseM: cLogLuvInverseM,\n            LogLuvToLinear: LogLuvToLinear\n        };\n    }();\n    ColorSpaceNode.LINEAR_TO_LINEAR = 'LinearToLinear';\n    ColorSpaceNode.GAMMA_TO_LINEAR = 'GammaToLinear';\n    ColorSpaceNode.LINEAR_TO_GAMMA = 'LinearToGamma';\n    ColorSpaceNode.SRGB_TO_LINEAR = 'sRGBToLinear';\n    ColorSpaceNode.LINEAR_TO_SRGB = 'LinearTosRGB';\n    ColorSpaceNode.RGBE_TO_LINEAR = 'RGBEToLinear';\n    ColorSpaceNode.LINEAR_TO_RGBE = 'LinearToRGBE';\n    ColorSpaceNode.RGBM_TO_LINEAR = 'RGBMToLinear';\n    ColorSpaceNode.LINEAR_TO_RGBM = 'LinearToRGBM';\n    ColorSpaceNode.RGBD_TO_LINEAR = 'RGBDToLinear';\n    ColorSpaceNode.LINEAR_TO_RGBD = 'LinearToRGBD';\n    ColorSpaceNode.LINEAR_TO_LOG_LUV = 'LinearToLogLuv';\n    ColorSpaceNode.LOG_LUV_TO_LINEAR = 'LogLuvToLinear';\n    ColorSpaceNode.getEncodingComponents = function (encoding) {\n        switch (encoding) {\n        case THREE.LinearEncoding:\n            return ['Linear'];\n        case THREE.sRGBEncoding:\n            return ['sRGB'];\n        case THREE.RGBEEncoding:\n            return ['RGBE'];\n        case THREE.RGBM7Encoding:\n            return [\n                'RGBM',\n                new  FloatNode(7).setReadonly(true)\n            ];\n        case THREE.RGBM16Encoding:\n            return [\n                'RGBM',\n                new FloatNode(16).setReadonly(true)\n            ];\n        case THREE.RGBDEncoding:\n            return [\n                'RGBD',\n                new FloatNode(256).setReadonly(true)\n            ];\n        case THREE.GammaEncoding:\n            return [\n                'Gamma',\n                new ExpressionNode('float( GAMMA_FACTOR )', 'f')\n            ];\n        }\n    };\n    ColorSpaceNode.prototype = Object.create(TempNode.prototype);\n    ColorSpaceNode.prototype.constructor = ColorSpaceNode;\n    ColorSpaceNode.prototype.nodeType = 'ColorSpace';\n    ColorSpaceNode.prototype.generate = function (builder, output) {\n        var input = this.input.build(builder, 'v4');\n        var outputType = this.getType(builder);\n        var methodNode = ColorSpaceNode.Nodes[this.method];\n        var method = builder.include(methodNode);\n        if (method === ColorSpaceNode.LINEAR_TO_LINEAR) {\n            return builder.format(input, outputType, output);\n        } else {\n            if (methodNode.inputs.length === 2) {\n                var factor = this.factor.build(builder, 'f');\n                return builder.format(method + '( ' + input + ', ' + factor + ' )', outputType, output);\n            } else {\n                return builder.format(method + '( ' + input + ' )', outputType, output);\n            }\n        }\n    };\n    ColorSpaceNode.prototype.fromEncoding = function (encoding) {\n        var components = ColorSpaceNode.getEncodingComponents(encoding);\n        this.method = 'LinearTo' + components[0];\n        this.factor = components[1];\n    };\n    ColorSpaceNode.prototype.fromDecoding = function (encoding) {\n        var components = ColorSpaceNode.getEncodingComponents(encoding);\n        this.method = components[0] + 'ToLinear';\n        this.factor = components[1];\n    };\n    ColorSpaceNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.input = source.input;\n        this.method = source.method;\n        return this;\n    };\n    ColorSpaceNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.input = this.input.toJSON(meta).uuid;\n            data.method = this.method;\n        }\n        return data;\n    };\n    return ColorSpaceNode;\n});"]}