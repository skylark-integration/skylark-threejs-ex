{"version":3,"sources":["nodes/utils/JoinNode.js"],"names":["define","TempNode","NodeUtils","inputs","elements","JoinNode","x","y","z","w","call","this","prototype","Object","create","constructor","nodeType","getNumElements","i","length","undefined","Math","max","getType","builder","getTypeFromLength","generate","output","type","outputs","elm","push","build","code","getConstructorFromLength","join","format","copy","source","prop","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAASD,EAAUE,SACvB,SAASC,EAASC,EAAGC,EAAGC,EAAGC,GACvBR,EAASS,KAAKC,KAAM,KACpBA,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EAiDb,OA/CAJ,EAASO,UAAYC,OAAOC,OAAOb,EAASW,WAC5CP,EAASO,UAAUG,YAAcV,EACjCA,EAASO,UAAUI,SAAW,OAC9BX,EAASO,UAAUK,eAAiB,WAEhC,IADA,IAAIC,EAAIf,EAAOgB,OACRD,KACH,QAAwBE,IAApBT,KAAKR,EAAOe,IAAmB,GAC7BA,EACF,MAGR,OAAOG,KAAKC,IAAIJ,EAAG,IAEvBb,EAASO,UAAUW,QAAU,SAAUC,GACnC,OAAOA,EAAQC,kBAAkBd,KAAKM,mBAE1CZ,EAASO,UAAUc,SAAW,SAAUF,EAASG,GAE7C,IADA,IAAIC,EAAOjB,KAAKY,QAAQC,GAAUL,EAASR,KAAKM,iBAAkBY,KACzDX,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,IAAIY,EAAMnB,KAAKR,EAAOe,IACtBW,EAAQE,KAAKD,EAAMA,EAAIE,MAAMR,EAAS,KAAO,OAEjD,IAAIS,GAAQd,EAAS,EAAIK,EAAQU,yBAAyBf,GAAU,IAAM,KAAOU,EAAQM,KAAK,MAAQ,KACtG,OAAOX,EAAQY,OAAOH,EAAML,EAAMD,IAEtCtB,EAASO,UAAUyB,KAAO,SAAUC,GAEhC,IAAK,IAAIC,KADTtC,EAASW,UAAUyB,KAAK3B,KAAKC,KAAM2B,GAClBA,EAAOnC,OACpBQ,KAAK4B,GAAQD,EAAOnC,OAAOoC,GAE/B,OAAO5B,MAEXN,EAASO,UAAU4B,OAAS,SAAUC,GAClC,IAAIC,EAAO/B,KAAKgC,YAAYF,GAC5B,IAAKC,EAAM,EACPA,EAAO/B,KAAKiC,eAAeH,IACtBtC,UAEL,IADA,IAAIgB,EAASR,KAAKM,iBACTC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,IAAIY,EAAMnB,KAAKR,EAAOe,IAClBY,IACAY,EAAKvC,OAAOA,EAAOe,IAAMY,EAAIU,OAAOC,GAAMI,OAItD,OAAOH,GAEJrC","file":"../../../nodes/utils/JoinNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/NodeUtils'\n], function (\n    TempNode, \n    NodeUtils\n) {\n    'use strict';\n    var inputs = NodeUtils.elements;\n    function JoinNode(x, y, z, w) {\n        TempNode.call(this, 'f');\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    JoinNode.prototype = Object.create(TempNode.prototype);\n    JoinNode.prototype.constructor = JoinNode;\n    JoinNode.prototype.nodeType = 'Join';\n    JoinNode.prototype.getNumElements = function () {\n        var i = inputs.length;\n        while (i--) {\n            if (this[inputs[i]] !== undefined) {\n                ++i;\n                break;\n            }\n        }\n        return Math.max(i, 2);\n    };\n    JoinNode.prototype.getType = function (builder) {\n        return builder.getTypeFromLength(this.getNumElements());\n    };\n    JoinNode.prototype.generate = function (builder, output) {\n        var type = this.getType(builder), length = this.getNumElements(), outputs = [];\n        for (var i = 0; i < length; i++) {\n            var elm = this[inputs[i]];\n            outputs.push(elm ? elm.build(builder, 'f') : '0.0');\n        }\n        var code = (length > 1 ? builder.getConstructorFromLength(length) : '') + '( ' + outputs.join(', ') + ' )';\n        return builder.format(code, type, output);\n    };\n    JoinNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        for (var prop in source.inputs) {\n            this[prop] = source.inputs[prop];\n        }\n        return this;\n    };\n    JoinNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.inputs = {};\n            var length = this.getNumElements();\n            for (var i = 0; i < length; i++) {\n                var elm = this[inputs[i]];\n                if (elm) {\n                    data.inputs[inputs[i]] = elm.toJSON(meta).uuid;\n                }\n            }\n        }\n        return data;\n    };\n    return JoinNode;\n});"]}