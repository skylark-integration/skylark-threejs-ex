{"version":3,"sources":["nodes/utils/JoinNode.js"],"names":["define","TempNode","NodeUtils","inputs","elements","JoinNode","x","y","z","w","call","this","prototype","Object","create","constructor","nodeType","getNumElements","i","length","undefined","Math","max","getType","builder","getTypeFromLength","generate","output","type","outputs","elm","push","build","code","getConstructorFromLength","join","format","copy","source","prop","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,qBACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAASD,EAAUE,SACvB,SAASC,EAASC,EAAGC,EAAGC,EAAGC,GACvBR,EAASS,KAAKC,KAAM,KACpBA,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EAiDb,OA/CAJ,EAASO,UAAYC,OAAOC,OAAOb,EAASW,WAC5CP,EAASO,UAAUG,YAAcV,EACjCA,EAASO,UAAUI,SAAW,OAC9BX,EAASO,UAAUK,eAAiB,WAEhC,IADA,IAAIC,EAAIf,EAAOgB,OACRD,KACH,QAAwBE,IAApBT,KAAKR,EAAOe,IAAmB,GAC7BA,EACF,MAGR,OAAOG,KAAKC,IAAIJ,EAAG,IAEvBb,EAASO,UAAUW,QAAU,SAAUC,GACnC,OAAOA,EAAQC,kBAAkBd,KAAKM,mBAE1CZ,EAASO,UAAUc,SAAW,SAAUF,EAASG,GAE7C,IADA,IAAIC,EAAOjB,KAAKY,QAAQC,GAAUL,EAASR,KAAKM,iBAAkBY,KACzDX,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,IAAIY,EAAMnB,KAAKR,EAAOe,IACtBW,EAAQE,KAAKD,EAAMA,EAAIE,MAAMR,EAAS,KAAO,OAEjD,IAAIS,GAAQd,EAAS,EAAIK,EAAQU,yBAAyBf,GAAU,IAAM,KAAOU,EAAQM,KAAK,MAAQ,KACtG,OAAOX,EAAQY,OAAOH,EAAML,EAAMD,IAEtCtB,EAASO,UAAUyB,KAAO,SAAUC,GAEhC,IAAK,IAAIC,KADTtC,EAASW,UAAUyB,KAAK3B,KAAKC,KAAM2B,GAClBA,EAAOnC,OACpBQ,KAAK4B,GAAQD,EAAOnC,OAAOoC,GAE/B,OAAO5B,MAEXN,EAASO,UAAU4B,OAAS,SAAUC,GAClC,IAAIC,EAAO/B,KAAKgC,YAAYF,GAC5B,IAAKC,EAAM,EACPA,EAAO/B,KAAKiC,eAAeH,IACtBtC,UAEL,IADA,IAAIgB,EAASR,KAAKM,iBACTC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,IAAIY,EAAMnB,KAAKR,EAAOe,IAClBY,IACAY,EAAKvC,OAAOA,EAAOe,IAAMY,EAAIU,OAAOC,GAAMI,OAItD,OAAOH,GAEJrC","file":"../../../nodes/utils/JoinNode.js","sourcesContent":["define([\r\n    '../core/TempNode',\r\n    '../core/NodeUtils'\r\n], function (\r\n    TempNode, \r\n    NodeUtils\r\n) {\r\n    'use strict';\r\n    var inputs = NodeUtils.elements;\r\n    function JoinNode(x, y, z, w) {\r\n        TempNode.call(this, 'f');\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n    JoinNode.prototype = Object.create(TempNode.prototype);\r\n    JoinNode.prototype.constructor = JoinNode;\r\n    JoinNode.prototype.nodeType = 'Join';\r\n    JoinNode.prototype.getNumElements = function () {\r\n        var i = inputs.length;\r\n        while (i--) {\r\n            if (this[inputs[i]] !== undefined) {\r\n                ++i;\r\n                break;\r\n            }\r\n        }\r\n        return Math.max(i, 2);\r\n    };\r\n    JoinNode.prototype.getType = function (builder) {\r\n        return builder.getTypeFromLength(this.getNumElements());\r\n    };\r\n    JoinNode.prototype.generate = function (builder, output) {\r\n        var type = this.getType(builder), length = this.getNumElements(), outputs = [];\r\n        for (var i = 0; i < length; i++) {\r\n            var elm = this[inputs[i]];\r\n            outputs.push(elm ? elm.build(builder, 'f') : '0.0');\r\n        }\r\n        var code = (length > 1 ? builder.getConstructorFromLength(length) : '') + '( ' + outputs.join(', ') + ' )';\r\n        return builder.format(code, type, output);\r\n    };\r\n    JoinNode.prototype.copy = function (source) {\r\n        TempNode.prototype.copy.call(this, source);\r\n        for (var prop in source.inputs) {\r\n            this[prop] = source.inputs[prop];\r\n        }\r\n        return this;\r\n    };\r\n    JoinNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.inputs = {};\r\n            var length = this.getNumElements();\r\n            for (var i = 0; i < length; i++) {\r\n                var elm = this[inputs[i]];\r\n                if (elm) {\r\n                    data.inputs[inputs[i]] = elm.toJSON(meta).uuid;\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    };\r\n    return JoinNode;\r\n});"]}