{"version":3,"sources":["nodes/utils/SpecularMIPLevelNode.js"],"names":["define","TempNode","FunctionNode","MaxMIPLevelNode","SpecularMIPLevelNode","roughness","texture","call","this","maxMIPLevel","undefined","Nodes","getSpecularMIPLevel","join","prototype","Object","create","constructor","nodeType","setTexture","generate","builder","output","isShader","include","format","build","type","console","warn","shader","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,mBACA,uBACA,qBACD,SACCC,EACAC,EACAC,GAEA,aACA,SAASC,EAAqBC,EAAWC,GACrCL,EAASM,KAAKC,KAAM,KACpBA,KAAKH,UAAYA,EACjBG,KAAKF,QAAUA,EACfE,KAAKC,iBAAcC,EA6CvB,OA3CAN,EAAqBO,OAQRC,oBAPiB,IAAIV,GAC1B,4FACA,oEACA,+DACA,6DACA,KACFW,KAAK,QAGXT,EAAqBU,UAAYC,OAAOC,OAAOf,EAASa,WACxDV,EAAqBU,UAAUG,YAAcb,EAC7CA,EAAqBU,UAAUI,SAAW,mBAC1Cd,EAAqBU,UAAUK,WAAa,SAAUb,GAElD,OADAE,KAAKF,QAAUA,EACRE,MAEXJ,EAAqBU,UAAUM,SAAW,SAAUC,EAASC,GACzD,GAAID,EAAQE,SAAS,YAAa,CAC9Bf,KAAKC,YAAcD,KAAKC,aAAe,IAAIN,EAC3CK,KAAKC,YAAYH,QAAUE,KAAKF,QAChC,IAAIM,EAAsBS,EAAQG,QAAQpB,EAAqBO,MAAMC,qBACrE,OAAOS,EAAQI,OAAOb,EAAsB,KAAOJ,KAAKH,UAAUqB,MAAML,EAAS,KAAO,KAAOb,KAAKC,YAAYiB,MAAML,EAAS,KAAO,KAAMb,KAAKmB,KAAML,GAGvJ,OADAM,QAAQC,KAAK,qDAAuDR,EAAQS,OAAS,YAC9ET,EAAQI,OAAO,MAAOjB,KAAKmB,KAAML,IAGhDlB,EAAqBU,UAAUiB,KAAO,SAAUC,GAI5C,OAHA/B,EAASa,UAAUiB,KAAKxB,KAAKC,KAAMwB,GACnCxB,KAAKF,QAAU0B,EAAO1B,QACtBE,KAAKH,UAAY2B,EAAO3B,UACjBG,MAEXJ,EAAqBU,UAAUmB,OAAS,SAAUC,GAC9C,IAAIC,EAAO3B,KAAK4B,YAAYF,GAM5B,OALKC,KACDA,EAAO3B,KAAK6B,eAAeH,IACtB5B,QAAUE,KAAKF,QACpB6B,EAAK9B,UAAYG,KAAKH,WAEnB8B,GAEJ/B","file":"../../../nodes/utils/SpecularMIPLevelNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/FunctionNode',\n    './MaxMIPLevelNode'\n], function (\n    TempNode, \n    FunctionNode, \n    MaxMIPLevelNode\n) {\n    'use strict';\n    function SpecularMIPLevelNode(roughness, texture) {\n        TempNode.call(this, 'f');\n        this.roughness = roughness;\n        this.texture = texture;\n        this.maxMIPLevel = undefined;\n    }\n    SpecularMIPLevelNode.Nodes = function () {\n        var getSpecularMIPLevel = new FunctionNode([\n            'float getSpecularMIPLevel( const in float roughness, const in float maxMIPLevelScalar ) {',\n            '\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );',\n            '\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );',\n            '\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );',\n            '}'\n        ].join('\\n'));\n        return { getSpecularMIPLevel: getSpecularMIPLevel };\n    }();\n    SpecularMIPLevelNode.prototype = Object.create(TempNode.prototype);\n    SpecularMIPLevelNode.prototype.constructor = SpecularMIPLevelNode;\n    SpecularMIPLevelNode.prototype.nodeType = 'SpecularMIPLevel';\n    SpecularMIPLevelNode.prototype.setTexture = function (texture) {\n        this.texture = texture;\n        return this;\n    };\n    SpecularMIPLevelNode.prototype.generate = function (builder, output) {\n        if (builder.isShader('fragment')) {\n            this.maxMIPLevel = this.maxMIPLevel || new MaxMIPLevelNode();\n            this.maxMIPLevel.texture = this.texture;\n            var getSpecularMIPLevel = builder.include(SpecularMIPLevelNode.Nodes.getSpecularMIPLevel);\n            return builder.format(getSpecularMIPLevel + '( ' + this.roughness.build(builder, 'f') + ', ' + this.maxMIPLevel.build(builder, 'f') + ' )', this.type, output);\n        } else {\n            console.warn('THREE.SpecularMIPLevelNode is not compatible with ' + builder.shader + ' shader.');\n            return builder.format('0.0', this.type, output);\n        }\n    };\n    SpecularMIPLevelNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.texture = source.texture;\n        this.roughness = source.roughness;\n        return this;\n    };\n    SpecularMIPLevelNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.texture = this.texture;\n            data.roughness = this.roughness;\n        }\n        return data;\n    };\n    return SpecularMIPLevelNode;\n});"]}