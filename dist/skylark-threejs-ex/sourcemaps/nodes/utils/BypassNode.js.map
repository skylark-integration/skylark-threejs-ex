{"version":3,"sources":["nodes/utils/BypassNode.js"],"names":["define","Node","BypassNode","code","value","call","this","prototype","Object","create","constructor","nodeType","getType","builder","isShader","generate","output","build","addNodeCode","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,gBACD,SACCC,GAEA,aACA,SAASC,EAAWC,EAAMC,GACtBH,EAAKI,KAAKC,MACVA,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EAwCjB,OAtCAF,EAAWK,UAAYC,OAAOC,OAAOR,EAAKM,WAC1CL,EAAWK,UAAUG,YAAcR,EACnCA,EAAWK,UAAUI,SAAW,SAChCT,EAAWK,UAAUK,QAAU,SAAUC,GACrC,OAAIP,KAAKF,MACEE,KAAKF,MAAMQ,QAAQC,GACnBA,EAAQC,SAAS,YACjB,IAEJ,QAEXZ,EAAWK,UAAUQ,SAAW,SAAUF,EAASG,GAC/C,IAAIb,EAAOG,KAAKH,KAAKc,MAAMJ,EAASG,GAAU,IAE9C,OADAH,EAAQK,YAAYf,GAChBU,EAAQC,SAAS,UACbR,KAAKF,MACEE,KAAKF,MAAMa,MAAMJ,EAASG,QADrC,EAIOV,KAAKF,MAAQE,KAAKF,MAAMa,MAAMJ,EAASG,GAAUH,EAAQM,OAAO,MAAO,IAAKH,IAG3Fd,EAAWK,UAAUa,KAAO,SAAUC,GAIlC,OAHApB,EAAKM,UAAUa,KAAKf,KAAKC,KAAMe,GAC/Bf,KAAKH,KAAOkB,EAAOlB,KACnBG,KAAKF,MAAQiB,EAAOjB,MACbE,MAEXJ,EAAWK,UAAUe,OAAS,SAAUC,GACpC,IAAIC,EAAOlB,KAAKmB,YAAYF,GAO5B,OANKC,KACDA,EAAOlB,KAAKoB,eAAeH,IACtBpB,KAAOG,KAAKH,KAAKmB,OAAOC,GAAMI,KAC/BrB,KAAKF,QACLoB,EAAKpB,MAAQE,KAAKF,MAAMkB,OAAOC,GAAMI,OAEtCH,GAEJtB","file":"../../../nodes/utils/BypassNode.js","sourcesContent":["define([\n    '../core/Node'\n], function (\n    Node\n) {\n    'use strict';\n    function BypassNode(code, value) {\n        Node.call(this);\n        this.code = code;\n        this.value = value;\n    }\n    BypassNode.prototype = Object.create(Node.prototype);\n    BypassNode.prototype.constructor = BypassNode;\n    BypassNode.prototype.nodeType = 'Bypass';\n    BypassNode.prototype.getType = function (builder) {\n        if (this.value) {\n            return this.value.getType(builder);\n        } else if (builder.isShader('fragment')) {\n            return 'f';\n        }\n        return 'void';\n    };\n    BypassNode.prototype.generate = function (builder, output) {\n        var code = this.code.build(builder, output) + ';';\n        builder.addNodeCode(code);\n        if (builder.isShader('vertex')) {\n            if (this.value) {\n                return this.value.build(builder, output);\n            }\n        } else {\n            return this.value ? this.value.build(builder, output) : builder.format('0.0', 'f', output);\n        }\n    };\n    BypassNode.prototype.copy = function (source) {\n        Node.prototype.copy.call(this, source);\n        this.code = source.code;\n        this.value = source.value;\n        return this;\n    };\n    BypassNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.code = this.code.toJSON(meta).uuid;\n            if (this.value)\n                data.value = this.value.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return BypassNode;\n});"]}