{"version":3,"sources":["nodes/utils/BypassNode.js"],"names":["define","Node","BypassNode","code","value","call","this","prototype","Object","create","constructor","nodeType","getType","builder","isShader","generate","output","build","addNodeCode","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,gBACD,SACCC,GAEA,aACA,SAASC,EAAWC,EAAMC,GACtBH,EAAKI,KAAKC,MACVA,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EAwCjB,OAtCAF,EAAWK,UAAYC,OAAOC,OAAOR,EAAKM,WAC1CL,EAAWK,UAAUG,YAAcR,EACnCA,EAAWK,UAAUI,SAAW,SAChCT,EAAWK,UAAUK,QAAU,SAAUC,GACrC,OAAIP,KAAKF,MACEE,KAAKF,MAAMQ,QAAQC,GACnBA,EAAQC,SAAS,YACjB,IAEJ,QAEXZ,EAAWK,UAAUQ,SAAW,SAAUF,EAASG,GAC/C,IAAIb,EAAOG,KAAKH,KAAKc,MAAMJ,EAASG,GAAU,IAE9C,OADAH,EAAQK,YAAYf,GAChBU,EAAQC,SAAS,UACbR,KAAKF,MACEE,KAAKF,MAAMa,MAAMJ,EAASG,QADrC,EAIOV,KAAKF,MAAQE,KAAKF,MAAMa,MAAMJ,EAASG,GAAUH,EAAQM,OAAO,MAAO,IAAKH,IAG3Fd,EAAWK,UAAUa,KAAO,SAAUC,GAIlC,OAHApB,EAAKM,UAAUa,KAAKf,KAAKC,KAAMe,GAC/Bf,KAAKH,KAAOkB,EAAOlB,KACnBG,KAAKF,MAAQiB,EAAOjB,MACbE,MAEXJ,EAAWK,UAAUe,OAAS,SAAUC,GACpC,IAAIC,EAAOlB,KAAKmB,YAAYF,GAO5B,OANKC,KACDA,EAAOlB,KAAKoB,eAAeH,IACtBpB,KAAOG,KAAKH,KAAKmB,OAAOC,GAAMI,KAC/BrB,KAAKF,QACLoB,EAAKpB,MAAQE,KAAKF,MAAMkB,OAAOC,GAAMI,OAEtCH,GAEJtB","file":"../../../nodes/utils/BypassNode.js","sourcesContent":["define([\r\n    '../core/Node'\r\n], function (\r\n    Node\r\n) {\r\n    'use strict';\r\n    function BypassNode(code, value) {\r\n        Node.call(this);\r\n        this.code = code;\r\n        this.value = value;\r\n    }\r\n    BypassNode.prototype = Object.create(Node.prototype);\r\n    BypassNode.prototype.constructor = BypassNode;\r\n    BypassNode.prototype.nodeType = 'Bypass';\r\n    BypassNode.prototype.getType = function (builder) {\r\n        if (this.value) {\r\n            return this.value.getType(builder);\r\n        } else if (builder.isShader('fragment')) {\r\n            return 'f';\r\n        }\r\n        return 'void';\r\n    };\r\n    BypassNode.prototype.generate = function (builder, output) {\r\n        var code = this.code.build(builder, output) + ';';\r\n        builder.addNodeCode(code);\r\n        if (builder.isShader('vertex')) {\r\n            if (this.value) {\r\n                return this.value.build(builder, output);\r\n            }\r\n        } else {\r\n            return this.value ? this.value.build(builder, output) : builder.format('0.0', 'f', output);\r\n        }\r\n    };\r\n    BypassNode.prototype.copy = function (source) {\r\n        Node.prototype.copy.call(this, source);\r\n        this.code = source.code;\r\n        this.value = source.value;\r\n        return this;\r\n    };\r\n    BypassNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.code = this.code.toJSON(meta).uuid;\r\n            if (this.value)\r\n                data.value = this.value.toJSON(meta).uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return BypassNode;\r\n});"]}