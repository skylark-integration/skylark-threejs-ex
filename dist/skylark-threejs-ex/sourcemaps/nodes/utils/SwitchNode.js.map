{"version":3,"sources":["nodes/utils/SwitchNode.js"],"names":["define","Node","SwitchNode","node","components","call","this","prototype","Object","create","constructor","nodeType","getType","builder","getTypeFromLength","length","generate","output","type","build","inputLength","getTypeLength","i","outputLength","colorToVectorProperties","len","Math","max","getIndexByElement","charAt","idx","getElementByIndex","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,gBACD,SACCC,GAEA,aACA,SAASC,EAAWC,EAAMC,GACtBH,EAAKI,KAAKC,MACVA,KAAKH,KAAOA,EACZG,KAAKF,WAAaA,GAAc,IA6CpC,OA3CAF,EAAWK,UAAYC,OAAOC,OAAOR,EAAKM,WAC1CL,EAAWK,UAAUG,YAAcR,EACnCA,EAAWK,UAAUI,SAAW,SAChCT,EAAWK,UAAUK,QAAU,SAAUC,GACrC,OAAOA,EAAQC,kBAAkBR,KAAKF,WAAWW,SAErDb,EAAWK,UAAUS,SAAW,SAAUH,EAASI,GAC/C,IAAIC,EAAOZ,KAAKH,KAAKS,QAAQC,GAAUV,EAAOG,KAAKH,KAAKgB,MAAMN,EAASK,GAAOE,EAAcP,EAAQQ,cAAcH,GAAQ,EAC1H,GAAIE,EAAc,EAAG,CACjB,IACIE,EADAC,EAAe,EAAGnB,EAAaS,EAAQW,wBAAwBlB,KAAKF,YACjEqB,EAAMrB,EAAWW,OACxB,IAAKO,EAAI,EAAGA,EAAIG,EAAKH,IACjBC,EAAeG,KAAKC,IAAIJ,EAAcV,EAAQe,kBAAkBxB,EAAWyB,OAAOP,KAKtF,IAHIC,EAAeH,IACfG,EAAeH,GACnBjB,GAAQ,IACHmB,EAAI,EAAGA,EAAIG,EAAKH,IAAK,CACtB,IAAIQ,EAAMjB,EAAQe,kBAAkBxB,EAAWyB,OAAOP,IAClDQ,EAAMP,IACNO,EAAMP,GACVpB,GAAQU,EAAQkB,kBAAkBD,GAEtC,OAAOjB,EAAQmB,OAAO7B,EAAMG,KAAKM,QAAQC,GAAUI,GAEnD,OAAOJ,EAAQmB,OAAO7B,EAAMe,EAAMD,IAG1Cf,EAAWK,UAAU0B,KAAO,SAAUC,GAIlC,OAHAjC,EAAKM,UAAU0B,KAAK5B,KAAKC,KAAM4B,GAC/B5B,KAAKH,KAAO+B,EAAO/B,KACnBG,KAAKF,WAAa8B,EAAO9B,WAClBE,MAEXJ,EAAWK,UAAU4B,OAAS,SAAUC,GACpC,IAAIC,EAAO/B,KAAKgC,YAAYF,GAM5B,OALKC,KACDA,EAAO/B,KAAKiC,eAAeH,IACtBjC,KAAOG,KAAKH,KAAKgC,OAAOC,GAAMI,KACnCH,EAAKjC,WAAaE,KAAKF,YAEpBiC,GAEJnC","file":"../../../nodes/utils/SwitchNode.js","sourcesContent":["define([\n    '../core/Node'\n], function (\n    Node\n) {\n    'use strict';\n    function SwitchNode(node, components) {\n        Node.call(this);\n        this.node = node;\n        this.components = components || 'x';\n    }\n    SwitchNode.prototype = Object.create(Node.prototype);\n    SwitchNode.prototype.constructor = SwitchNode;\n    SwitchNode.prototype.nodeType = 'Switch';\n    SwitchNode.prototype.getType = function (builder) {\n        return builder.getTypeFromLength(this.components.length);\n    };\n    SwitchNode.prototype.generate = function (builder, output) {\n        var type = this.node.getType(builder), node = this.node.build(builder, type), inputLength = builder.getTypeLength(type) - 1;\n        if (inputLength > 0) {\n            var outputLength = 0, components = builder.colorToVectorProperties(this.components);\n            var i, len = components.length;\n            for (i = 0; i < len; i++) {\n                outputLength = Math.max(outputLength, builder.getIndexByElement(components.charAt(i)));\n            }\n            if (outputLength > inputLength)\n                outputLength = inputLength;\n            node += '.';\n            for (i = 0; i < len; i++) {\n                var idx = builder.getIndexByElement(components.charAt(i));\n                if (idx > outputLength)\n                    idx = outputLength;\n                node += builder.getElementByIndex(idx);\n            }\n            return builder.format(node, this.getType(builder), output);\n        } else {\n            return builder.format(node, type, output);\n        }\n    };\n    SwitchNode.prototype.copy = function (source) {\n        Node.prototype.copy.call(this, source);\n        this.node = source.node;\n        this.components = source.components;\n        return this;\n    };\n    SwitchNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.node = this.node.toJSON(meta).uuid;\n            data.components = this.components;\n        }\n        return data;\n    };\n    return SwitchNode;\n});"]}