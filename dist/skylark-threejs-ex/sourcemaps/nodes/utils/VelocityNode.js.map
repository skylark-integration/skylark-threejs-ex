{"version":3,"sources":["nodes/utils/VelocityNode.js"],"names":["define","THREE","Vector3Node","VelocityNode","target","params","call","this","velocity","Vector3","setTarget","setParams","prototype","Object","create","constructor","nodeType","getReadonly","type","moment","speed","springVelocity","lastVelocity","position","oldPosition","getWorldPosition","clone","updateFrameVelocity","subVectors","copy","updateFrame","frame","deltaFps","delta","fps","spring","Math","pow","damping","multiplyScalar","exp","add","value","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid","JSON","parse","stringify"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACD,SACCC,EACAC,GAEA,aACA,SAASC,EAAaC,EAAQC,GAC1BH,EAAYI,KAAKC,MACjBA,KAAKF,UACLE,KAAKC,SAAW,IAAIP,EAAMQ,QAC1BF,KAAKG,UAAUN,GACfG,KAAKI,UAAUN,GAmFnB,OAjFAF,EAAaS,UAAYC,OAAOC,OAAOZ,EAAYU,WACnDT,EAAaS,UAAUG,YAAcZ,EACrCA,EAAaS,UAAUI,SAAW,WAClCb,EAAaS,UAAUK,YAAc,WACjC,OAAO,GAEXd,EAAaS,UAAUD,UAAY,SAAUN,GACzC,OAAQE,KAAKF,OAAOa,MACpB,IAAK,iBACMX,KAAKY,cACLZ,KAAKa,aACLb,KAAKc,sBACLd,KAAKe,aAIhB,OADAf,KAAKF,OAASA,MACNE,KAAKF,OAAOa,MACpB,IAAK,UACDX,KAAKY,OAAS,IAAIlB,EAAMQ,QACxBF,KAAKa,MAAQ,IAAInB,EAAMQ,QACvBF,KAAKc,eAAiB,IAAIpB,EAAMQ,QAChCF,KAAKe,aAAe,IAAIrB,EAAMQ,UAItCN,EAAaS,UAAUF,UAAY,SAAUN,GACrCG,KAAKH,gBACEG,KAAKgB,gBACLhB,KAAKiB,aAEhBjB,KAAKH,OAASA,EACVA,IACAG,KAAKgB,SAAWnB,EAAOqB,iBAAiBlB,KAAKgB,UAAY,IAAItB,EAAMQ,SACnEF,KAAKiB,YAAcjB,KAAKgB,SAASG,UAGzCvB,EAAaS,UAAUe,oBAAsB,WACrCpB,KAAKH,SACLG,KAAKgB,SAAWhB,KAAKH,OAAOqB,iBAAiBlB,KAAKgB,UAAY,IAAItB,EAAMQ,SACxEF,KAAKC,SAASoB,WAAWrB,KAAKgB,SAAUhB,KAAKiB,aAC7CjB,KAAKiB,YAAYK,KAAKtB,KAAKgB,YAGnCpB,EAAaS,UAAUkB,YAAc,SAAUC,GAE3C,OADAxB,KAAKoB,oBAAoBI,GACjBxB,KAAKF,OAAOa,MACpB,IAAK,UACD,IAAIc,EAAWD,EAAME,OAAS1B,KAAKF,OAAO6B,KAAO,IAC7CC,EAASC,KAAKC,IAAI9B,KAAKF,OAAO8B,OAAQH,GAAWM,EAAUF,KAAKC,IAAI9B,KAAKF,OAAOiC,QAASN,GAC7FzB,KAAKC,SAAS+B,eAAeH,KAAKI,KAAKjC,KAAKF,OAAOiC,QAAUN,IAC7DzB,KAAKC,SAASiC,IAAIlC,KAAKc,gBACvBd,KAAKC,SAASiC,IAAIlC,KAAKa,MAAMmB,eAAeD,GAASC,eAAe,EAAIJ,IACxE5B,KAAKa,MAAMQ,WAAWrB,KAAKC,SAAUD,KAAKe,cAC1Cf,KAAKc,eAAeoB,IAAIlC,KAAKa,OAC7Bb,KAAKc,eAAekB,eAAeJ,GACnC5B,KAAKY,OAAOsB,IAAIlC,KAAKc,gBACrBd,KAAKY,OAAOoB,eAAeD,GAC3B/B,KAAKe,aAAaO,KAAKtB,KAAKC,UAC5BD,KAAKmC,MAAMb,KAAKtB,KAAKY,QACrB,MACJ,QACIZ,KAAKmC,MAAMb,KAAKtB,KAAKC,YAG7BL,EAAaS,UAAUiB,KAAO,SAAUc,GAKpC,OAJAzC,EAAYU,UAAUiB,KAAKvB,KAAKC,KAAMoC,GAClCA,EAAOvC,QACPG,KAAKG,UAAUiC,EAAOvC,QAC1BG,KAAKI,UAAUgC,EAAOtC,QACfE,MAEXJ,EAAaS,UAAUgC,OAAS,SAAUC,GACtC,IAAIC,EAAOvC,KAAKwC,YAAYF,GAO5B,OANKC,IACDA,EAAOvC,KAAKyC,eAAeH,GACvBtC,KAAKH,SACL0C,EAAK1C,OAASG,KAAKH,OAAO6C,MAC9BH,EAAKzC,OAAS6C,KAAKC,MAAMD,KAAKE,UAAU7C,KAAKF,UAE1CyC,GAEJ3C","file":"../../../nodes/utils/VelocityNode.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    '../inputs/Vector3Node'\r\n], function (\r\n    THREE, \r\n    Vector3Node\r\n) {\r\n    'use strict';\r\n    function VelocityNode(target, params) {\r\n        Vector3Node.call(this);\r\n        this.params = {};\r\n        this.velocity = new THREE.Vector3();\r\n        this.setTarget(target);\r\n        this.setParams(params);\r\n    }\r\n    VelocityNode.prototype = Object.create(Vector3Node.prototype);\r\n    VelocityNode.prototype.constructor = VelocityNode;\r\n    VelocityNode.prototype.nodeType = 'Velocity';\r\n    VelocityNode.prototype.getReadonly = function () {\r\n        return false;\r\n    };\r\n    VelocityNode.prototype.setParams = function (params) {\r\n        switch (this.params.type) {\r\n        case 'elastic':\r\n            delete this.moment;\r\n            delete this.speed;\r\n            delete this.springVelocity;\r\n            delete this.lastVelocity;\r\n            break;\r\n        }\r\n        this.params = params || {};\r\n        switch (this.params.type) {\r\n        case 'elastic':\r\n            this.moment = new THREE.Vector3();\r\n            this.speed = new THREE.Vector3();\r\n            this.springVelocity = new THREE.Vector3();\r\n            this.lastVelocity = new THREE.Vector3();\r\n            break;\r\n        }\r\n    };\r\n    VelocityNode.prototype.setTarget = function (target) {\r\n        if (this.target) {\r\n            delete this.position;\r\n            delete this.oldPosition;\r\n        }\r\n        this.target = target;\r\n        if (target) {\r\n            this.position = target.getWorldPosition(this.position || new THREE.Vector3());\r\n            this.oldPosition = this.position.clone();\r\n        }\r\n    };\r\n    VelocityNode.prototype.updateFrameVelocity = function () {\r\n        if (this.target) {\r\n            this.position = this.target.getWorldPosition(this.position || new THREE.Vector3());\r\n            this.velocity.subVectors(this.position, this.oldPosition);\r\n            this.oldPosition.copy(this.position);\r\n        }\r\n    };\r\n    VelocityNode.prototype.updateFrame = function (frame) {\r\n        this.updateFrameVelocity(frame);\r\n        switch (this.params.type) {\r\n        case 'elastic':\r\n            var deltaFps = frame.delta * (this.params.fps || 60);\r\n            var spring = Math.pow(this.params.spring, deltaFps), damping = Math.pow(this.params.damping, deltaFps);\r\n            this.velocity.multiplyScalar(Math.exp(-this.params.damping * deltaFps));\r\n            this.velocity.add(this.springVelocity);\r\n            this.velocity.add(this.speed.multiplyScalar(damping).multiplyScalar(1 - spring));\r\n            this.speed.subVectors(this.velocity, this.lastVelocity);\r\n            this.springVelocity.add(this.speed);\r\n            this.springVelocity.multiplyScalar(spring);\r\n            this.moment.add(this.springVelocity);\r\n            this.moment.multiplyScalar(damping);\r\n            this.lastVelocity.copy(this.velocity);\r\n            this.value.copy(this.moment);\r\n            break;\r\n        default:\r\n            this.value.copy(this.velocity);\r\n        }\r\n    };\r\n    VelocityNode.prototype.copy = function (source) {\r\n        Vector3Node.prototype.copy.call(this, source);\r\n        if (source.target)\r\n            this.setTarget(source.target);\r\n        this.setParams(source.params);\r\n        return this;\r\n    };\r\n    VelocityNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            if (this.target)\r\n                data.target = this.target.uuid;\r\n            data.params = JSON.parse(JSON.stringify(this.params));\r\n        }\r\n        return data;\r\n    };\r\n    return VelocityNode;\r\n});"]}