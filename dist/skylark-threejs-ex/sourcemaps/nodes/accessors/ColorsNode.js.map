{"version":3,"sources":["nodes/accessors/ColorsNode.js"],"names":["define","TempNode","vertexDict","fragmentDict","ColorsNode","index","call","this","shared","prototype","Object","create","constructor","nodeType","generate","builder","output","requires","color","result","isShader","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":";;;;;;;AAAAA,QACI,oBACD,SAAUC,GACT,aACA,IAAIC,GACI,QACA,UACDC,GACC,SACA,WAER,SAASC,EAAWC,GAChBJ,EAASK,KAAKC,KAAM,MAAQC,QAAQ,IACpCD,KAAKF,MAAQA,GAAS,EAuB1B,OArBAD,EAAWK,UAAYC,OAAOC,OAAOV,EAASQ,WAC9CL,EAAWK,UAAUG,YAAcR,EACnCA,EAAWK,UAAUI,SAAW,SAChCT,EAAWK,UAAUK,SAAW,SAAUC,EAASC,GAC/CD,EAAQE,SAASC,MAAMX,KAAKF,QAAS,EACrC,IAAIc,EAASJ,EAAQK,SAAS,UAAYlB,EAAWK,KAAKF,OAASF,EAAaI,KAAKF,OACrF,OAAOU,EAAQM,OAAOF,EAAQZ,KAAKe,QAAQP,GAAUC,IAEzDZ,EAAWK,UAAUc,KAAO,SAAUC,GAGlC,OAFAvB,EAASQ,UAAUc,KAAKjB,KAAKC,KAAMiB,GACnCjB,KAAKF,MAAQmB,EAAOnB,MACbE,MAEXH,EAAWK,UAAUgB,OAAS,SAAUC,GACpC,IAAIC,EAAOpB,KAAKqB,YAAYF,GAK5B,OAJKC,KACDA,EAAOpB,KAAKsB,eAAeH,IACtBrB,MAAQE,KAAKF,OAEfsB,GAEJvB","file":"../../../nodes/accessors/ColorsNode.js","sourcesContent":["define([\n    '../core/TempNode'\n], function (TempNode) {\n    'use strict';\n    var vertexDict = [\n            'color',\n            'color2'\n        ], fragmentDict = [\n            'vColor',\n            'vColor2'\n        ];\n    function ColorsNode(index) {\n        TempNode.call(this, 'v4', { shared: false });\n        this.index = index || 0;\n    }\n    ColorsNode.prototype = Object.create(TempNode.prototype);\n    ColorsNode.prototype.constructor = ColorsNode;\n    ColorsNode.prototype.nodeType = 'Colors';\n    ColorsNode.prototype.generate = function (builder, output) {\n        builder.requires.color[this.index] = true;\n        var result = builder.isShader('vertex') ? vertexDict[this.index] : fragmentDict[this.index];\n        return builder.format(result, this.getType(builder), output);\n    };\n    ColorsNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.index = source.index;\n        return this;\n    };\n    ColorsNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.index = this.index;\n        }\n        return data;\n    };\n    return ColorsNode;\n});"]}