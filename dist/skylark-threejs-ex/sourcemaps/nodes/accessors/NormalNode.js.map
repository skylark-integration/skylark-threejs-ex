{"version":3,"sources":["nodes/accessors/NormalNode.js"],"names":["define","TempNode","NodeLib","NormalNode","scope","call","this","VIEW","LOCAL","WORLD","prototype","Object","create","constructor","nodeType","getShared","build","builder","output","uuid","ns","contextNormal","context","generate","result","isShader","requires","normal","worldNormal","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","addKeyword","NORMAL"],"mappings":";;;;;;;AAAAA,QACI,mBACA,mBACD,SAAUC,EAAUC,GACnB,aACA,SAASC,EAAWC,GAChBH,EAASI,KAAKC,KAAM,MACpBA,KAAKF,MAAQA,GAASD,EAAWI,KAoErC,OAlEAJ,EAAWK,MAAQ,QACnBL,EAAWM,MAAQ,QACnBN,EAAWI,KAAO,OAClBJ,EAAWO,UAAYC,OAAOC,OAAOX,EAASS,WAC9CP,EAAWO,UAAUG,YAAcV,EACnCA,EAAWO,UAAUI,SAAW,SAChCX,EAAWO,UAAUK,UAAY,WAC7B,OAAOT,KAAKF,QAAUD,EAAWM,OAErCN,EAAWO,UAAUM,MAAQ,SAAUC,EAASC,EAAQC,EAAMC,GAC1D,IAAIC,EAAgBJ,EAAQK,QAAQhB,KAAKF,MAAQ,UACjD,OAAIiB,EACOA,EAAcL,MAAMC,EAASC,EAAQC,EAAMC,GAE/CnB,EAASS,UAAUM,MAAMX,KAAKC,KAAMW,EAASC,EAAQC,IAEhEhB,EAAWO,UAAUa,SAAW,SAAUN,EAASC,GAC/C,IAAIM,EACJ,OAAQlB,KAAKF,OACb,KAAKD,EAAWI,KAERiB,EADAP,EAAQQ,SAAS,UACR,oBAEA,iBACb,MACJ,KAAKtB,EAAWK,MACRS,EAAQQ,SAAS,UACjBD,EAAS,gBAETP,EAAQS,SAASC,QAAS,EAC1BH,EAAS,iBAEb,MACJ,KAAKrB,EAAWM,MACRQ,EAAQQ,SAAS,UACjBD,EAAS,kEAETP,EAAQS,SAASE,aAAc,EAC/BJ,EAAS,YAIjB,OAAOP,EAAQY,OAAOL,EAAQlB,KAAKwB,QAAQb,GAAUC,IAEzDf,EAAWO,UAAUqB,KAAO,SAAUC,GAGlC,OAFA/B,EAASS,UAAUqB,KAAK1B,KAAKC,KAAM0B,GACnC1B,KAAKF,MAAQ4B,EAAO5B,MACbE,MAEXH,EAAWO,UAAUuB,OAAS,SAAUC,GACpC,IAAIC,EAAO7B,KAAK8B,YAAYF,GAK5B,OAJKC,KACDA,EAAO7B,KAAK+B,eAAeH,IACtB9B,MAAQE,KAAKF,OAEf+B,GAEXjC,EAAQoC,WAAW,aAAc,WAC7B,OAAO,IAAInC,EAAWA,EAAWI,QAErCL,EAAQoC,WAAW,cAAe,WAC9B,OAAO,IAAInC,EAAWA,EAAWoC,UAErCrC,EAAQoC,WAAW,cAAe,WAC9B,OAAO,IAAInC,EAAWA,EAAWM,SAE9BN","file":"../../../nodes/accessors/NormalNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/NodeLib'\n], function (TempNode, NodeLib) {\n    'use strict';\n    function NormalNode(scope) {\n        TempNode.call(this, 'v3');\n        this.scope = scope || NormalNode.VIEW;\n    }\n    NormalNode.LOCAL = 'local';\n    NormalNode.WORLD = 'world';\n    NormalNode.VIEW = 'view';\n    NormalNode.prototype = Object.create(TempNode.prototype);\n    NormalNode.prototype.constructor = NormalNode;\n    NormalNode.prototype.nodeType = 'Normal';\n    NormalNode.prototype.getShared = function () {\n        return this.scope === NormalNode.WORLD;\n    };\n    NormalNode.prototype.build = function (builder, output, uuid, ns) {\n        var contextNormal = builder.context[this.scope + 'Normal'];\n        if (contextNormal) {\n            return contextNormal.build(builder, output, uuid, ns);\n        }\n        return TempNode.prototype.build.call(this, builder, output, uuid);\n    };\n    NormalNode.prototype.generate = function (builder, output) {\n        var result;\n        switch (this.scope) {\n        case NormalNode.VIEW:\n            if (builder.isShader('vertex'))\n                result = 'transformedNormal';\n            else\n                result = 'geometryNormal';\n            break;\n        case NormalNode.LOCAL:\n            if (builder.isShader('vertex')) {\n                result = 'objectNormal';\n            } else {\n                builder.requires.normal = true;\n                result = 'vObjectNormal';\n            }\n            break;\n        case NormalNode.WORLD:\n            if (builder.isShader('vertex')) {\n                result = 'inverseTransformDirection( transformedNormal, viewMatrix ).xyz';\n            } else {\n                builder.requires.worldNormal = true;\n                result = 'vWNormal';\n            }\n            break;\n        }\n        return builder.format(result, this.getType(builder), output);\n    };\n    NormalNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.scope = source.scope;\n        return this;\n    };\n    NormalNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.scope = this.scope;\n        }\n        return data;\n    };\n    NodeLib.addKeyword('viewNormal', function () {\n        return new NormalNode(NormalNode.VIEW);\n    });\n    NodeLib.addKeyword('localNormal', function () {\n        return new NormalNode(NormalNode.NORMAL);\n    });\n    NodeLib.addKeyword('worldNormal', function () {\n        return new NormalNode(NormalNode.WORLD);\n    });\n    return NormalNode;\n});"]}