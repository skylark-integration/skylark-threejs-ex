{"version":3,"sources":["nodes/accessors/ResolutionNode.js"],"names":["define","THREE","Vector2Node","ResolutionNode","call","this","size","Vector2","prototype","Object","create","constructor","nodeType","updateFrame","frame","renderer","getSize","pixelRatio","getPixelRatio","x","width","y","height","console","warn","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACD,SAAUC,EAAOC,GAChB,aACA,SAASC,IACLD,EAAYE,KAAKC,MACjBA,KAAKC,KAAO,IAAIL,EAAMM,QA4B1B,OA1BAJ,EAAeK,UAAYC,OAAOC,OAAOR,EAAYM,WACrDL,EAAeK,UAAUG,YAAcR,EACvCA,EAAeK,UAAUI,SAAW,aACpCT,EAAeK,UAAUK,YAAc,SAAUC,GAC7C,GAAIA,EAAMC,SAAU,CAChBD,EAAMC,SAASC,QAAQX,KAAKC,MAC5B,IAAIW,EAAaH,EAAMC,SAASG,gBAChCb,KAAKc,EAAId,KAAKC,KAAKc,MAAQH,EAC3BZ,KAAKgB,EAAIhB,KAAKC,KAAKgB,OAASL,OAE5BM,QAAQC,KAAK,gDAGrBrB,EAAeK,UAAUiB,KAAO,SAAUC,GAGtC,OAFAxB,EAAYM,UAAUiB,KAAKrB,KAAKC,KAAMqB,GACtCrB,KAAKU,SAAWW,EAAOX,SAChBV,MAEXF,EAAeK,UAAUmB,OAAS,SAAUC,GACxC,IAAIC,EAAOxB,KAAKyB,YAAYF,GAK5B,OAJKC,KACDA,EAAOxB,KAAK0B,eAAeH,IACtBb,SAAWV,KAAKU,SAASiB,MAE3BH,GAEJ1B","file":"../../../nodes/accessors/ResolutionNode.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    '../inputs/Vector2Node'\r\n], function (THREE, Vector2Node) {\r\n    'use strict';\r\n    function ResolutionNode() {\r\n        Vector2Node.call(this);\r\n        this.size = new THREE.Vector2();\r\n    }\r\n    ResolutionNode.prototype = Object.create(Vector2Node.prototype);\r\n    ResolutionNode.prototype.constructor = ResolutionNode;\r\n    ResolutionNode.prototype.nodeType = 'Resolution';\r\n    ResolutionNode.prototype.updateFrame = function (frame) {\r\n        if (frame.renderer) {\r\n            frame.renderer.getSize(this.size);\r\n            var pixelRatio = frame.renderer.getPixelRatio();\r\n            this.x = this.size.width * pixelRatio;\r\n            this.y = this.size.height * pixelRatio;\r\n        } else {\r\n            console.warn('ResolutionNode need a renderer in NodeFrame');\r\n        }\r\n    };\r\n    ResolutionNode.prototype.copy = function (source) {\r\n        Vector2Node.prototype.copy.call(this, source);\r\n        this.renderer = source.renderer;\r\n        return this;\r\n    };\r\n    ResolutionNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.renderer = this.renderer.uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return ResolutionNode;\r\n});"]}