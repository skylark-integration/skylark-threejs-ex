{"version":3,"sources":["nodes/accessors/ResolutionNode.js"],"names":["define","THREE","Vector2Node","ResolutionNode","call","this","size","Vector2","prototype","Object","create","constructor","nodeType","updateFrame","frame","renderer","getSize","pixelRatio","getPixelRatio","x","width","y","height","console","warn","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACD,SAAUC,EAAOC,GAChB,aACA,SAASC,IACLD,EAAYE,KAAKC,MACjBA,KAAKC,KAAO,IAAIL,EAAMM,QA4B1B,OA1BAJ,EAAeK,UAAYC,OAAOC,OAAOR,EAAYM,WACrDL,EAAeK,UAAUG,YAAcR,EACvCA,EAAeK,UAAUI,SAAW,aACpCT,EAAeK,UAAUK,YAAc,SAAUC,GAC7C,GAAIA,EAAMC,SAAU,CAChBD,EAAMC,SAASC,QAAQX,KAAKC,MAC5B,IAAIW,EAAaH,EAAMC,SAASG,gBAChCb,KAAKc,EAAId,KAAKC,KAAKc,MAAQH,EAC3BZ,KAAKgB,EAAIhB,KAAKC,KAAKgB,OAASL,OAE5BM,QAAQC,KAAK,gDAGrBrB,EAAeK,UAAUiB,KAAO,SAAUC,GAGtC,OAFAxB,EAAYM,UAAUiB,KAAKrB,KAAKC,KAAMqB,GACtCrB,KAAKU,SAAWW,EAAOX,SAChBV,MAEXF,EAAeK,UAAUmB,OAAS,SAAUC,GACxC,IAAIC,EAAOxB,KAAKyB,YAAYF,GAK5B,OAJKC,KACDA,EAAOxB,KAAK0B,eAAeH,IACtBb,SAAWV,KAAKU,SAASiB,MAE3BH,GAEJ1B","file":"../../../nodes/accessors/ResolutionNode.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../inputs/Vector2Node'\n], function (THREE, Vector2Node) {\n    'use strict';\n    function ResolutionNode() {\n        Vector2Node.call(this);\n        this.size = new THREE.Vector2();\n    }\n    ResolutionNode.prototype = Object.create(Vector2Node.prototype);\n    ResolutionNode.prototype.constructor = ResolutionNode;\n    ResolutionNode.prototype.nodeType = 'Resolution';\n    ResolutionNode.prototype.updateFrame = function (frame) {\n        if (frame.renderer) {\n            frame.renderer.getSize(this.size);\n            var pixelRatio = frame.renderer.getPixelRatio();\n            this.x = this.size.width * pixelRatio;\n            this.y = this.size.height * pixelRatio;\n        } else {\n            console.warn('ResolutionNode need a renderer in NodeFrame');\n        }\n    };\n    ResolutionNode.prototype.copy = function (source) {\n        Vector2Node.prototype.copy.call(this, source);\n        this.renderer = source.renderer;\n        return this;\n    };\n    ResolutionNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.renderer = this.renderer.uuid;\n        }\n        return data;\n    };\n    return ResolutionNode;\n});"]}