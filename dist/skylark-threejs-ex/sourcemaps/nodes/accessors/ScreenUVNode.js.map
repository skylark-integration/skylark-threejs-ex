{"version":3,"sources":["nodes/accessors/ScreenUVNode.js"],"names":["define","TempNode","ResolutionNode","ScreenUVNode","resolution","call","this","prototype","Object","create","constructor","nodeType","generate","builder","output","result","isShader","build","console","warn","shader","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,oBACD,SAAUC,EAAUC,GACnB,aACA,SAASC,EAAaC,GAClBH,EAASI,KAAKC,KAAM,MACpBA,KAAKF,WAAaA,GAAc,IAAIF,EA4BxC,OA1BAC,EAAaI,UAAYC,OAAOC,OAAOR,EAASM,WAChDJ,EAAaI,UAAUG,YAAcP,EACrCA,EAAaI,UAAUI,SAAW,WAClCR,EAAaI,UAAUK,SAAW,SAAUC,EAASC,GACjD,IAAIC,EAOJ,OANIF,EAAQG,SAAS,YACjBD,EAAS,uBAAyBT,KAAKF,WAAWa,MAAMJ,EAAS,MAAQ,KAEzEK,QAAQC,KAAK,6CAA+CN,EAAQO,OAAS,YAC7EL,EAAS,eAENF,EAAQQ,OAAON,EAAQT,KAAKgB,QAAQT,GAAUC,IAEzDX,EAAaI,UAAUgB,KAAO,SAAUC,GAGpC,OAFAvB,EAASM,UAAUgB,KAAKlB,KAAKC,KAAMkB,GACnClB,KAAKF,WAAaoB,EAAOpB,WAClBE,MAEXH,EAAaI,UAAUkB,OAAS,SAAUC,GACtC,IAAIC,EAAOrB,KAAKsB,YAAYF,GAK5B,OAJKC,KACDA,EAAOrB,KAAKuB,eAAeH,IACtBtB,WAAaE,KAAKF,WAAWqB,OAAOC,GAAMI,MAE5CH,GAEJxB","file":"../../../nodes/accessors/ScreenUVNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    './ResolutionNode'\n], function (TempNode, ResolutionNode) {\n    'use strict';\n    function ScreenUVNode(resolution) {\n        TempNode.call(this, 'v2');\n        this.resolution = resolution || new ResolutionNode();\n    }\n    ScreenUVNode.prototype = Object.create(TempNode.prototype);\n    ScreenUVNode.prototype.constructor = ScreenUVNode;\n    ScreenUVNode.prototype.nodeType = 'ScreenUV';\n    ScreenUVNode.prototype.generate = function (builder, output) {\n        var result;\n        if (builder.isShader('fragment')) {\n            result = '( gl_FragCoord.xy / ' + this.resolution.build(builder, 'v2') + ')';\n        } else {\n            console.warn('THREE.ScreenUVNode is not compatible with ' + builder.shader + ' shader.');\n            result = 'vec2( 0.0 )';\n        }\n        return builder.format(result, this.getType(builder), output);\n    };\n    ScreenUVNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.resolution = source.resolution;\n        return this;\n    };\n    ScreenUVNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.resolution = this.resolution.toJSON(meta).uuid;\n        }\n        return data;\n    };\n    return ScreenUVNode;\n});"]}