{"version":3,"sources":["nodes/accessors/ScreenUVNode.js"],"names":["define","TempNode","ResolutionNode","ScreenUVNode","resolution","call","this","prototype","Object","create","constructor","nodeType","generate","builder","output","result","isShader","build","console","warn","shader","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":";;;;;;;AAAAA,QACI,mBACA,oBACD,SAAUC,EAAUC,GACnB,aACA,SAASC,EAAaC,GAClBH,EAASI,KAAKC,KAAM,MACpBA,KAAKF,WAAaA,GAAc,IAAIF,EA4BxC,OA1BAC,EAAaI,UAAYC,OAAOC,OAAOR,EAASM,WAChDJ,EAAaI,UAAUG,YAAcP,EACrCA,EAAaI,UAAUI,SAAW,WAClCR,EAAaI,UAAUK,SAAW,SAAUC,EAASC,GACjD,IAAIC,EAOJ,OANIF,EAAQG,SAAS,YACjBD,EAAS,uBAAyBT,KAAKF,WAAWa,MAAMJ,EAAS,MAAQ,KAEzEK,QAAQC,KAAK,6CAA+CN,EAAQO,OAAS,YAC7EL,EAAS,eAENF,EAAQQ,OAAON,EAAQT,KAAKgB,QAAQT,GAAUC,IAEzDX,EAAaI,UAAUgB,KAAO,SAAUC,GAGpC,OAFAvB,EAASM,UAAUgB,KAAKlB,KAAKC,KAAMkB,GACnClB,KAAKF,WAAaoB,EAAOpB,WAClBE,MAEXH,EAAaI,UAAUkB,OAAS,SAAUC,GACtC,IAAIC,EAAOrB,KAAKsB,YAAYF,GAK5B,OAJKC,KACDA,EAAOrB,KAAKuB,eAAeH,IACtBtB,WAAaE,KAAKF,WAAWqB,OAAOC,GAAMI,MAE5CH,GAEJxB","file":"../../../nodes/accessors/ScreenUVNode.js","sourcesContent":["define([\r\n    '../core/TempNode',\r\n    './ResolutionNode'\r\n], function (TempNode, ResolutionNode) {\r\n    'use strict';\r\n    function ScreenUVNode(resolution) {\r\n        TempNode.call(this, 'v2');\r\n        this.resolution = resolution || new ResolutionNode();\r\n    }\r\n    ScreenUVNode.prototype = Object.create(TempNode.prototype);\r\n    ScreenUVNode.prototype.constructor = ScreenUVNode;\r\n    ScreenUVNode.prototype.nodeType = 'ScreenUV';\r\n    ScreenUVNode.prototype.generate = function (builder, output) {\r\n        var result;\r\n        if (builder.isShader('fragment')) {\r\n            result = '( gl_FragCoord.xy / ' + this.resolution.build(builder, 'v2') + ')';\r\n        } else {\r\n            console.warn('THREE.ScreenUVNode is not compatible with ' + builder.shader + ' shader.');\r\n            result = 'vec2( 0.0 )';\r\n        }\r\n        return builder.format(result, this.getType(builder), output);\r\n    };\r\n    ScreenUVNode.prototype.copy = function (source) {\r\n        TempNode.prototype.copy.call(this, source);\r\n        this.resolution = source.resolution;\r\n        return this;\r\n    };\r\n    ScreenUVNode.prototype.toJSON = function (meta) {\r\n        var data = this.getJSONNode(meta);\r\n        if (!data) {\r\n            data = this.createJSONNode(meta);\r\n            data.resolution = this.resolution.toJSON(meta).uuid;\r\n        }\r\n        return data;\r\n    };\r\n    return ScreenUVNode;\r\n});"]}