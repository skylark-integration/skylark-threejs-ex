{"version":3,"sources":["nodes/accessors/CameraNode.js"],"names":["define","TempNode","FunctionNode","FloatNode","PositionNode","CameraNode","scope","camera","call","this","setScope","POSITION","setCamera","Nodes","depthColor","join","DEPTH","TO_VERTEX","prototype","Object","create","constructor","nodeType","updateFrame","undefined","onUpdateFrame","near","far","getType","type","getUnique","getShared","generate","builder","output","result","include","build","WORLD","format","value","copy","source","number","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","file":"../../../nodes/accessors/CameraNode.js","sourcesContent":["define([\n    '../core/TempNode',\n    '../core/FunctionNode',\n    '../inputs/FloatNode',\n    '../accessors/PositionNode'\n], function (TempNode, FunctionNode, FloatNode, PositionNode) {\n    'use strict';\n    function CameraNode(scope, camera) {\n        TempNode.call(this, 'v3');\n        this.setScope(scope || CameraNode.POSITION);\n        this.setCamera(camera);\n    }\n    CameraNode.Nodes = function () {\n        var depthColor = new FunctionNode([\n            'float depthColor( float mNear, float mFar ) {',\n            '\\t#ifdef USE_LOGDEPTHBUF_EXT',\n            '\\t\\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;',\n            '\\t#else',\n            '\\t\\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;',\n            '\\t#endif',\n            '\\treturn 1.0 - smoothstep( mNear, mFar, depth );',\n            '}'\n        ].join('\\n'));\n        return { depthColor: depthColor };\n    }();\n    CameraNode.POSITION = 'position';\n    CameraNode.DEPTH = 'depth';\n    CameraNode.TO_VERTEX = 'toVertex';\n    CameraNode.prototype = Object.create(TempNode.prototype);\n    CameraNode.prototype.constructor = CameraNode;\n    CameraNode.prototype.nodeType = 'Camera';\n    CameraNode.prototype.setCamera = function (camera) {\n        this.camera = camera;\n        this.updateFrame = camera !== undefined ? this.onUpdateFrame : undefined;\n    };\n    CameraNode.prototype.setScope = function (scope) {\n        switch (this.scope) {\n        case CameraNode.DEPTH:\n            delete this.near;\n            delete this.far;\n            break;\n        }\n        this.scope = scope;\n        switch (scope) {\n        case CameraNode.DEPTH:\n            var camera = this.camera;\n            this.near = new FloatNode(camera ? camera.near : 1);\n            this.far = new FloatNode(camera ? camera.far : 1200);\n            break;\n        }\n    };\n    CameraNode.prototype.getType = function () {\n        switch (this.scope) {\n        case CameraNode.DEPTH:\n            return 'f';\n        }\n        return this.type;\n    };\n    CameraNode.prototype.getUnique = function () {\n        switch (this.scope) {\n        case CameraNode.DEPTH:\n        case CameraNode.TO_VERTEX:\n            return true;\n        }\n        return false;\n    };\n    CameraNode.prototype.getShared = function () {\n        switch (this.scope) {\n        case CameraNode.POSITION:\n            return false;\n        }\n        return true;\n    };\n    CameraNode.prototype.generate = function (builder, output) {\n        var result;\n        switch (this.scope) {\n        case CameraNode.POSITION:\n            result = 'cameraPosition';\n            break;\n        case CameraNode.DEPTH:\n            var depthColor = builder.include(CameraNode.Nodes.depthColor);\n            result = depthColor + '( ' + this.near.build(builder, 'f') + ', ' + this.far.build(builder, 'f') + ' )';\n            break;\n        case CameraNode.TO_VERTEX:\n            result = 'normalize( ' + new PositionNode(PositionNode.WORLD).build(builder, 'v3') + ' - cameraPosition )';\n            break;\n        }\n        return builder.format(result, this.getType(builder), output);\n    };\n    CameraNode.prototype.onUpdateFrame = function () {\n        switch (this.scope) {\n        case CameraNode.DEPTH:\n            var camera = this.camera;\n            this.near.value = camera.near;\n            this.far.value = camera.far;\n            break;\n        }\n    };\n    CameraNode.prototype.copy = function (source) {\n        TempNode.prototype.copy.call(this, source);\n        this.setScope(source.scope);\n        if (source.camera) {\n            this.setCamera(source.camera);\n        }\n        switch (source.scope) {\n        case CameraNode.DEPTH:\n            this.near.number = source.near;\n            this.far.number = source.far;\n            break;\n        }\n        return this;\n    };\n    CameraNode.prototype.toJSON = function (meta) {\n        var data = this.getJSONNode(meta);\n        if (!data) {\n            data = this.createJSONNode(meta);\n            data.scope = this.scope;\n            if (this.camera)\n                data.camera = this.camera.uuid;\n            switch (this.scope) {\n            case CameraNode.DEPTH:\n                data.near = this.near.value;\n                data.far = this.far.value;\n                break;\n            }\n        }\n        return data;\n    };\n    return CameraNode;\n});"]}