{"version":3,"sources":["curves/NURBSCurve.js"],"names":["define","THREE","threex","NURBSUtils","NURBSCurve","degree","knots","controlPoints","startKnot","endKnot","Curve","call","this","length","i","point","Vector4","x","y","z","w","prototype","Object","create","constructor","getPoint","t","u","hpoint","calcBSplinePoint","divideScalar","Vector3","getTangent","tangent","calcNURBSDerivatives","clone","normalize","curves"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,gBACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAa,SAAUC,EAAQC,EAAOC,EAAeC,EAAWC,GAChER,EAAMS,MAAMC,KAAKC,MACjBA,KAAKP,OAASA,EACdO,KAAKN,MAAQA,EACbM,KAAKL,iBACLK,KAAKJ,UAAYA,GAAa,EAC9BI,KAAKH,QAAUA,GAAWG,KAAKN,MAAMO,OAAS,EAC9C,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAcM,SAAUC,EAAG,CAC3C,IAAIC,EAAQR,EAAcO,GAC1BF,KAAKL,cAAcO,GAAK,IAAIb,EAAMe,QAAQD,EAAME,EAAGF,EAAMG,EAAGH,EAAMI,EAAGJ,EAAMK,KAqBnF,OAlBAhB,EAAWiB,UAAYC,OAAOC,OAAOtB,EAAMS,MAAMW,YAC5BG,YAAcpB,EACnCA,EAAWiB,UAAUI,SAAW,SAAUC,GACtC,IAAIC,EAAIf,KAAKN,MAAMM,KAAKJ,WAAakB,GAAKd,KAAKN,MAAMM,KAAKH,SAAWG,KAAKN,MAAMM,KAAKJ,YACjFoB,EAASzB,EAAW0B,iBAAiBjB,KAAKP,OAAQO,KAAKN,MAAOM,KAAKL,cAAeoB,GAItF,OAHgB,GAAZC,EAAOR,GACPQ,EAAOE,aAAaF,EAAOR,GAExB,IAAInB,EAAM8B,QAAQH,EAAOX,EAAGW,EAAOV,EAAGU,EAAOT,IAExDf,EAAWiB,UAAUW,WAAa,SAAUN,GACxC,IAAIC,EAAIf,KAAKN,MAAM,GAAKoB,GAAKd,KAAKN,MAAMM,KAAKN,MAAMO,OAAS,GAAKD,KAAKN,MAAM,IAExE2B,EADO9B,EAAW+B,qBAAqBtB,KAAKP,OAAQO,KAAKN,MAAOM,KAAKL,cAAeoB,EAAG,GACxE,GAAGQ,QAEtB,OADAF,EAAQG,YACDH,GAGJ/B,EAAOmC,OAAOjC,WAAaA","file":"../../curves/NURBSCurve.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './NURBSUtils'\n], function (\n    THREE,\n    threex,\n    NURBSUtils\n) {\n    'use strict';\n    var NURBSCurve = function (degree, knots, controlPoints, startKnot, endKnot) {\n        THREE.Curve.call(this);\n        this.degree = degree;\n        this.knots = knots;\n        this.controlPoints = [];\n        this.startKnot = startKnot || 0;\n        this.endKnot = endKnot || this.knots.length - 1;\n        for (var i = 0; i < controlPoints.length; ++i) {\n            var point = controlPoints[i];\n            this.controlPoints[i] = new THREE.Vector4(point.x, point.y, point.z, point.w);\n        }\n    };\n    NURBSCurve.prototype = Object.create(THREE.Curve.prototype);\n    NURBSCurve.prototype.constructor = NURBSCurve;\n    NURBSCurve.prototype.getPoint = function (t) {\n        var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);\n        var hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n        if (hpoint.w != 1) {\n            hpoint.divideScalar(hpoint.w);\n        }\n        return new THREE.Vector3(hpoint.x, hpoint.y, hpoint.z);\n    };\n    NURBSCurve.prototype.getTangent = function (t) {\n        var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n        var ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n        var tangent = ders[1].clone();\n        tangent.normalize();\n        return tangent;\n    };\n    \n    return threex.curves.NURBSCurve = NURBSCurve;\n});"]}