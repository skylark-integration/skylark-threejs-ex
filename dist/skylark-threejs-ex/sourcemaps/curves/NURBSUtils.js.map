{"version":3,"sources":["curves/NURBSUtils.js"],"names":["define","THREE","NURBSUtils","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","this","C","Vector4","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","Vector3","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"mappings":"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","file":"../../curves/NURBSUtils.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author renej\n\t * NURBS utils\n\t *\n\t * See NURBSCurve and NURBSSurface.\n\t *\n\t **/\n\n\n\t/**************************************************************\n\t *\tNURBS Utils\n\t **************************************************************/\n\n\tTHREE.NURBSUtils = {\n\n\t\t/*\n\t\tFinds knot vector span.\n\n\t\tp : degree\n\t\tu : parametric value\n\t\tU : knot vector\n\n\t\treturns the span\n\t\t*/\n\t\tfindSpan: function ( p, u, U ) {\n\n\t\t\tvar n = U.length - p - 1;\n\n\t\t\tif ( u >= U[ n ] ) {\n\n\t\t\t\treturn n - 1;\n\n\t\t\t}\n\n\t\t\tif ( u <= U[ p ] ) {\n\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\tvar low = p;\n\t\t\tvar high = n;\n\t\t\tvar mid = Math.floor( ( low + high ) / 2 );\n\n\t\t\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\t\t\tif ( u < U[ mid ] ) {\n\n\t\t\t\t\thigh = mid;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlow = mid;\n\n\t\t\t\t}\n\n\t\t\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t\t\t}\n\n\t\t\treturn mid;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\t\tspan : span in which u lies\n\t\tu    : parametric point\n\t\tp    : degree\n\t\tU    : knot vector\n\n\t\treturns array[p+1] with basis functions values.\n\t\t*/\n\t\tcalcBasisFunctions: function ( span, u, p, U ) {\n\n\t\t\tvar N = [];\n\t\t\tvar left = [];\n\t\t\tvar right = [];\n\t\t\tN[ 0 ] = 1.0;\n\n\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\t\tvar saved = 0.0;\n\n\t\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\t\tvar temp = N[ r ] / ( rv + lv );\n\t\t\t\t\tN[ r ] = saved + rv * temp;\n\t\t\t\t\tsaved = lv * temp;\n\n\t\t\t\t }\n\n\t\t\t\t N[ j ] = saved;\n\n\t\t\t }\n\n\t\t\t return N;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\t\tp : degree of B-Spline\n\t\tU : knot vector\n\t\tP : control points (x, y, z, w)\n\t\tu : parametric point\n\n\t\treturns point for given u\n\t\t*/\n\t\tcalcBSplinePoint: function ( p, U, P, u ) {\n\n\t\t\tvar span = this.findSpan( p, u, U );\n\t\t\tvar N = this.calcBasisFunctions( span, u, p, U );\n\t\t\tvar C = new THREE.Vector4( 0, 0, 0, 0 );\n\n\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\tvar point = P[ span - p + j ];\n\t\t\t\tvar Nj = N[ j ];\n\t\t\t\tvar wNj = point.w * Nj;\n\t\t\t\tC.x += point.x * wNj;\n\t\t\t\tC.y += point.y * wNj;\n\t\t\t\tC.z += point.z * wNj;\n\t\t\t\tC.w += point.w * Nj;\n\n\t\t\t}\n\n\t\t\treturn C;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\t\tspan : span in which u lies\n\t\tu    : parametric point\n\t\tp    : degree\n\t\tn    : number of derivatives to calculate\n\t\tU    : knot vector\n\n\t\treturns array[n+1][p+1] with basis functions derivatives\n\t\t*/\n\t\tcalcBasisFunctionDerivatives: function ( span, u, p, n, U ) {\n\n\t\t\tvar zeroArr = [];\n\t\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\t\tzeroArr[ i ] = 0.0;\n\n\t\t\tvar ders = [];\n\t\t\tfor ( var i = 0; i <= n; ++ i )\n\t\t\t\tders[ i ] = zeroArr.slice( 0 );\n\n\t\t\tvar ndu = [];\n\t\t\tfor ( var i = 0; i <= p; ++ i )\n\t\t\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\t\t\tndu[ 0 ][ 0 ] = 1.0;\n\n\t\t\tvar left = zeroArr.slice( 0 );\n\t\t\tvar right = zeroArr.slice( 0 );\n\n\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\t\t\tright[ j ] = U[ span + j ] - u;\n\n\t\t\t\tvar saved = 0.0;\n\n\t\t\t\tfor ( var r = 0; r < j; ++ r ) {\n\n\t\t\t\t\tvar rv = right[ r + 1 ];\n\t\t\t\t\tvar lv = left[ j - r ];\n\t\t\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\t\t\tvar temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\t\t\tsaved = lv * temp;\n\n\t\t\t\t}\n\n\t\t\t\tndu[ j ][ j ] = saved;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t\t\t}\n\n\t\t\tfor ( var r = 0; r <= p; ++ r ) {\n\n\t\t\t\tvar s1 = 0;\n\t\t\t\tvar s2 = 1;\n\n\t\t\t\tvar a = [];\n\t\t\t\tfor ( var i = 0; i <= p; ++ i ) {\n\n\t\t\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t\t\t}\n\t\t\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\t\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\t\t\tvar d = 0.0;\n\t\t\t\t\tvar rk = r - k;\n\t\t\t\t\tvar pk = p - k;\n\n\t\t\t\t\tif ( r >= k ) {\n\n\t\t\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\t\t\tvar j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\t\t\tfor ( var j = j1; j <= j2; ++ j ) {\n\n\t\t\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( r <= pk ) {\n\n\t\t\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tders[ k ][ r ] = d;\n\n\t\t\t\t\tvar j = s1;\n\t\t\t\t\ts1 = s2;\n\t\t\t\t\ts2 = j;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar r = p;\n\n\t\t\tfor ( var k = 1; k <= n; ++ k ) {\n\n\t\t\t\tfor ( var j = 0; j <= p; ++ j ) {\n\n\t\t\t\t\tders[ k ][ j ] *= r;\n\n\t\t\t\t}\n\t\t\t\tr *= p - k;\n\n\t\t\t}\n\n\t\t\treturn ders;\n\n\t\t},\n\n\n\t\t/*\n\t\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\t\tp  : degree\n\t\t\tU  : knot vector\n\t\t\tP  : control points\n\t\t\tu  : Parametric points\n\t\t\tnd : number of derivatives\n\n\t\t\treturns array[d+1] with derivatives\n\t\t\t*/\n\t\tcalcBSplineDerivatives: function ( p, U, P, u, nd ) {\n\n\t\t\tvar du = nd < p ? nd : p;\n\t\t\tvar CK = [];\n\t\t\tvar span = this.findSpan( p, u, U );\n\t\t\tvar nders = this.calcBasisFunctionDerivatives( span, u, p, du, U );\n\t\t\tvar Pw = [];\n\n\t\t\tfor ( var i = 0; i < P.length; ++ i ) {\n\n\t\t\t\tvar point = P[ i ].clone();\n\t\t\t\tvar w = point.w;\n\n\t\t\t\tpoint.x *= w;\n\t\t\t\tpoint.y *= w;\n\t\t\t\tpoint.z *= w;\n\n\t\t\t\tPw[ i ] = point;\n\n\t\t\t}\n\t\t\tfor ( var k = 0; k <= du; ++ k ) {\n\n\t\t\t\tvar point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\t\t\tfor ( var j = 1; j <= p; ++ j ) {\n\n\t\t\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tCK[ k ] = point;\n\n\t\t\t}\n\n\t\t\tfor ( var k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\t\t\tCK[ k ] = new THREE.Vector4( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn CK;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate \"K over I\"\n\n\t\treturns k!/(i!(k-i)!)\n\t\t*/\n\t\tcalcKoverI: function ( k, i ) {\n\n\t\t\tvar nom = 1;\n\n\t\t\tfor ( var j = 2; j <= k; ++ j ) {\n\n\t\t\t\tnom *= j;\n\n\t\t\t}\n\n\t\t\tvar denom = 1;\n\n\t\t\tfor ( var j = 2; j <= i; ++ j ) {\n\n\t\t\t\tdenom *= j;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 2; j <= k - i; ++ j ) {\n\n\t\t\t\tdenom *= j;\n\n\t\t\t}\n\n\t\t\treturn nom / denom;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\t\tPders : result of function calcBSplineDerivatives\n\n\t\treturns array with derivatives for rational curve.\n\t\t*/\n\t\tcalcRationalCurveDerivatives: function ( Pders ) {\n\n\t\t\tvar nd = Pders.length;\n\t\t\tvar Aders = [];\n\t\t\tvar wders = [];\n\n\t\t\tfor ( var i = 0; i < nd; ++ i ) {\n\n\t\t\t\tvar point = Pders[ i ];\n\t\t\t\tAders[ i ] = new THREE.Vector3( point.x, point.y, point.z );\n\t\t\t\twders[ i ] = point.w;\n\n\t\t\t}\n\n\t\t\tvar CK = [];\n\n\t\t\tfor ( var k = 0; k < nd; ++ k ) {\n\n\t\t\t\tvar v = Aders[ k ].clone();\n\n\t\t\t\tfor ( var i = 1; i <= k; ++ i ) {\n\n\t\t\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( this.calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn CK;\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points in homogeneous space\n\t\tu  : parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array with derivatives.\n\t\t*/\n\t\tcalcNURBSDerivatives: function ( p, U, P, u, nd ) {\n\n\t\t\tvar Pders = this.calcBSplineDerivatives( p, U, P, u, nd );\n\t\t\treturn this.calcRationalCurveDerivatives( Pders );\n\n\t\t},\n\n\n\t\t/*\n\t\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\t\tp1, p2 : degrees of B-Spline surface\n\t\tU1, U2 : knot vectors\n\t\tP      : control points (x, y, z, w)\n\t\tu, v   : parametric values\n\n\t\treturns point for given (u, v)\n\t\t*/\n\t\tcalcSurfacePoint: function ( p, q, U, V, P, u, v, target ) {\n\n\t\t\tvar uspan = this.findSpan( p, u, U );\n\t\t\tvar vspan = this.findSpan( q, v, V );\n\t\t\tvar Nu = this.calcBasisFunctions( uspan, u, p, U );\n\t\t\tvar Nv = this.calcBasisFunctions( vspan, v, q, V );\n\t\t\tvar temp = [];\n\n\t\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\t\ttemp[ l ] = new THREE.Vector4( 0, 0, 0, 0 );\n\t\t\t\tfor ( var k = 0; k <= p; ++ k ) {\n\n\t\t\t\t\tvar point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\t\t\tvar w = point.w;\n\t\t\t\t\tpoint.x *= w;\n\t\t\t\t\tpoint.y *= w;\n\t\t\t\t\tpoint.z *= w;\n\t\t\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar Sw = new THREE.Vector4( 0, 0, 0, 0 );\n\t\t\tfor ( var l = 0; l <= q; ++ l ) {\n\n\t\t\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t\t\t}\n\n\t\t\tSw.divideScalar( Sw.w );\n\t\t\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n\t\t}\n\n\t};\n\treturn THREE.NURBSUtils;\n});\n"]}