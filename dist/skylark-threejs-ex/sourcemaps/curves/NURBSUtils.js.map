{"version":3,"sources":["curves/NURBSUtils.js"],"names":["define","THREE","threex","NURBSUtils","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","this","C","Vector4","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","Vector3","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set","curves"],"mappings":"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","file":"../../curves/NURBSUtils.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var NURBSUtils = {\r\n        findSpan: function (p, u, U) {\r\n            var n = U.length - p - 1;\r\n            if (u >= U[n]) {\r\n                return n - 1;\r\n            }\r\n            if (u <= U[p]) {\r\n                return p;\r\n            }\r\n            var low = p;\r\n            var high = n;\r\n            var mid = Math.floor((low + high) / 2);\r\n            while (u < U[mid] || u >= U[mid + 1]) {\r\n                if (u < U[mid]) {\r\n                    high = mid;\r\n                } else {\r\n                    low = mid;\r\n                }\r\n                mid = Math.floor((low + high) / 2);\r\n            }\r\n            return mid;\r\n        },\r\n        calcBasisFunctions: function (span, u, p, U) {\r\n            var N = [];\r\n            var left = [];\r\n            var right = [];\r\n            N[0] = 1;\r\n            for (var j = 1; j <= p; ++j) {\r\n                left[j] = u - U[span + 1 - j];\r\n                right[j] = U[span + j] - u;\r\n                var saved = 0;\r\n                for (var r = 0; r < j; ++r) {\r\n                    var rv = right[r + 1];\r\n                    var lv = left[j - r];\r\n                    var temp = N[r] / (rv + lv);\r\n                    N[r] = saved + rv * temp;\r\n                    saved = lv * temp;\r\n                }\r\n                N[j] = saved;\r\n            }\r\n            return N;\r\n        },\r\n        calcBSplinePoint: function (p, U, P, u) {\r\n            var span = this.findSpan(p, u, U);\r\n            var N = this.calcBasisFunctions(span, u, p, U);\r\n            var C = new THREE.Vector4(0, 0, 0, 0);\r\n            for (var j = 0; j <= p; ++j) {\r\n                var point = P[span - p + j];\r\n                var Nj = N[j];\r\n                var wNj = point.w * Nj;\r\n                C.x += point.x * wNj;\r\n                C.y += point.y * wNj;\r\n                C.z += point.z * wNj;\r\n                C.w += point.w * Nj;\r\n            }\r\n            return C;\r\n        },\r\n        calcBasisFunctionDerivatives: function (span, u, p, n, U) {\r\n            var zeroArr = [];\r\n            for (var i = 0; i <= p; ++i)\r\n                zeroArr[i] = 0;\r\n            var ders = [];\r\n            for (var i = 0; i <= n; ++i)\r\n                ders[i] = zeroArr.slice(0);\r\n            var ndu = [];\r\n            for (var i = 0; i <= p; ++i)\r\n                ndu[i] = zeroArr.slice(0);\r\n            ndu[0][0] = 1;\r\n            var left = zeroArr.slice(0);\r\n            var right = zeroArr.slice(0);\r\n            for (var j = 1; j <= p; ++j) {\r\n                left[j] = u - U[span + 1 - j];\r\n                right[j] = U[span + j] - u;\r\n                var saved = 0;\r\n                for (var r = 0; r < j; ++r) {\r\n                    var rv = right[r + 1];\r\n                    var lv = left[j - r];\r\n                    ndu[j][r] = rv + lv;\r\n                    var temp = ndu[r][j - 1] / ndu[j][r];\r\n                    ndu[r][j] = saved + rv * temp;\r\n                    saved = lv * temp;\r\n                }\r\n                ndu[j][j] = saved;\r\n            }\r\n            for (var j = 0; j <= p; ++j) {\r\n                ders[0][j] = ndu[j][p];\r\n            }\r\n            for (var r = 0; r <= p; ++r) {\r\n                var s1 = 0;\r\n                var s2 = 1;\r\n                var a = [];\r\n                for (var i = 0; i <= p; ++i) {\r\n                    a[i] = zeroArr.slice(0);\r\n                }\r\n                a[0][0] = 1;\r\n                for (var k = 1; k <= n; ++k) {\r\n                    var d = 0;\r\n                    var rk = r - k;\r\n                    var pk = p - k;\r\n                    if (r >= k) {\r\n                        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\r\n                        d = a[s2][0] * ndu[rk][pk];\r\n                    }\r\n                    var j1 = rk >= -1 ? 1 : -rk;\r\n                    var j2 = r - 1 <= pk ? k - 1 : p - r;\r\n                    for (var j = j1; j <= j2; ++j) {\r\n                        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\r\n                        d += a[s2][j] * ndu[rk + j][pk];\r\n                    }\r\n                    if (r <= pk) {\r\n                        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\r\n                        d += a[s2][k] * ndu[r][pk];\r\n                    }\r\n                    ders[k][r] = d;\r\n                    var j = s1;\r\n                    s1 = s2;\r\n                    s2 = j;\r\n                }\r\n            }\r\n            var r = p;\r\n            for (var k = 1; k <= n; ++k) {\r\n                for (var j = 0; j <= p; ++j) {\r\n                    ders[k][j] *= r;\r\n                }\r\n                r *= p - k;\r\n            }\r\n            return ders;\r\n        },\r\n        calcBSplineDerivatives: function (p, U, P, u, nd) {\r\n            var du = nd < p ? nd : p;\r\n            var CK = [];\r\n            var span = this.findSpan(p, u, U);\r\n            var nders = this.calcBasisFunctionDerivatives(span, u, p, du, U);\r\n            var Pw = [];\r\n            for (var i = 0; i < P.length; ++i) {\r\n                var point = P[i].clone();\r\n                var w = point.w;\r\n                point.x *= w;\r\n                point.y *= w;\r\n                point.z *= w;\r\n                Pw[i] = point;\r\n            }\r\n            for (var k = 0; k <= du; ++k) {\r\n                var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\r\n                for (var j = 1; j <= p; ++j) {\r\n                    point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\r\n                }\r\n                CK[k] = point;\r\n            }\r\n            for (var k = du + 1; k <= nd + 1; ++k) {\r\n                CK[k] = new THREE.Vector4(0, 0, 0);\r\n            }\r\n            return CK;\r\n        },\r\n        calcKoverI: function (k, i) {\r\n            var nom = 1;\r\n            for (var j = 2; j <= k; ++j) {\r\n                nom *= j;\r\n            }\r\n            var denom = 1;\r\n            for (var j = 2; j <= i; ++j) {\r\n                denom *= j;\r\n            }\r\n            for (var j = 2; j <= k - i; ++j) {\r\n                denom *= j;\r\n            }\r\n            return nom / denom;\r\n        },\r\n        calcRationalCurveDerivatives: function (Pders) {\r\n            var nd = Pders.length;\r\n            var Aders = [];\r\n            var wders = [];\r\n            for (var i = 0; i < nd; ++i) {\r\n                var point = Pders[i];\r\n                Aders[i] = new THREE.Vector3(point.x, point.y, point.z);\r\n                wders[i] = point.w;\r\n            }\r\n            var CK = [];\r\n            for (var k = 0; k < nd; ++k) {\r\n                var v = Aders[k].clone();\r\n                for (var i = 1; i <= k; ++i) {\r\n                    v.sub(CK[k - i].clone().multiplyScalar(this.calcKoverI(k, i) * wders[i]));\r\n                }\r\n                CK[k] = v.divideScalar(wders[0]);\r\n            }\r\n            return CK;\r\n        },\r\n        calcNURBSDerivatives: function (p, U, P, u, nd) {\r\n            var Pders = this.calcBSplineDerivatives(p, U, P, u, nd);\r\n            return this.calcRationalCurveDerivatives(Pders);\r\n        },\r\n        calcSurfacePoint: function (p, q, U, V, P, u, v, target) {\r\n            var uspan = this.findSpan(p, u, U);\r\n            var vspan = this.findSpan(q, v, V);\r\n            var Nu = this.calcBasisFunctions(uspan, u, p, U);\r\n            var Nv = this.calcBasisFunctions(vspan, v, q, V);\r\n            var temp = [];\r\n            for (var l = 0; l <= q; ++l) {\r\n                temp[l] = new THREE.Vector4(0, 0, 0, 0);\r\n                for (var k = 0; k <= p; ++k) {\r\n                    var point = P[uspan - p + k][vspan - q + l].clone();\r\n                    var w = point.w;\r\n                    point.x *= w;\r\n                    point.y *= w;\r\n                    point.z *= w;\r\n                    temp[l].add(point.multiplyScalar(Nu[k]));\r\n                }\r\n            }\r\n            var Sw = new THREE.Vector4(0, 0, 0, 0);\r\n            for (var l = 0; l <= q; ++l) {\r\n                Sw.add(temp[l].multiplyScalar(Nv[l]));\r\n            }\r\n            Sw.divideScalar(Sw.w);\r\n            target.set(Sw.x, Sw.y, Sw.z);\r\n        }\r\n    };\r\n    \r\n    return threex.curves.NURBSUtils = NURBSUtils;\r\n});"]}