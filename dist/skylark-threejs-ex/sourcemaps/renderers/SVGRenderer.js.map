{"version":3,"sources":["renderers/SVGRenderer.js"],"names":["define","THREE","SVGObject","node","Object3D","call","this","prototype","Object","create","constructor","SVGRenderer","_renderData","_elements","_lights","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_svgNode","_currentPath","_currentStyle","_this","_projector","Projector","_svg","document","createElementNS","_clipBox","Box2","_elemBox","_color","Color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","_viewMatrix","Matrix4","_viewProjectionMatrix","_svgPathPool","_pathCount","_quality","_precision","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","renderSprite","v1","element","material","scaleX","scale","x","scaleY","y","isPointsMaterial","size","path","style","isSpriteMaterial","color","getStyle","opacity","addPath","renderLine","v2","positionScreen","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","renderFace3","v3","info","render","vertices","faces","isMeshBasicMaterial","copy","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","lights","position","normal","l","ll","light","lightColor","isDirectionalLight","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","r","g","b","isPointLight","subVectors","distance","Math","min","distanceTo","calculateLight","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","setRGB","z","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","expand","pixels","idet","det","sqrt","flushPath","id","setAttribute","getPathNode","appendChild","domElement","autoClear","sortObjects","sortElements","overdraw","setQuality","quality","setClearColor","set","setPixelRatio","setSize","width","height","max","setPrecision","precision","clear","backgroundColor","scene","camera","Camera","background","isColor","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","getNormalMatrix","isAmbientLight","calculateLights","e","el","undefined","makeEmpty","RenderableSprite","RenderableLine","setFromPoints","intersectsBox","RenderableFace","traverseVisible","object","applyMatrix4","console","error"],"mappings":"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","file":"../../renderers/SVGRenderer.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"./Projector\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.SVGObject = function ( node ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.node = node;\n\n\t};\n\n\tTHREE.SVGObject.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.SVGObject.prototype.constructor = THREE.SVGObject;\n\n\tTHREE.SVGRenderer = function () {\n\n\t\tvar _this = this,\n\t\t\t_renderData, _elements, _lights,\n\t\t\t_projector = new THREE.Projector(),\n\t\t\t_svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' ),\n\t\t\t_svgWidth, _svgHeight, _svgWidthHalf, _svgHeightHalf,\n\n\t\t\t_v1, _v2, _v3,\n\n\t\t\t_clipBox = new THREE.Box2(),\n\t\t\t_elemBox = new THREE.Box2(),\n\n\t\t\t_color = new THREE.Color(),\n\t\t\t_diffuseColor = new THREE.Color(),\n\t\t\t_ambientLight = new THREE.Color(),\n\t\t\t_directionalLights = new THREE.Color(),\n\t\t\t_pointLights = new THREE.Color(),\n\t\t\t_clearColor = new THREE.Color(),\n\n\t\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t\t_centroid = new THREE.Vector3(),\n\t\t\t_normal = new THREE.Vector3(),\n\t\t\t_normalViewMatrix = new THREE.Matrix3(),\n\n\t\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t\t_svgPathPool = [],\n\t\t\t_svgNode, _pathCount = 0,\n\n\t\t\t_currentPath, _currentStyle,\n\n\t\t\t_quality = 1, _precision = null;\n\n\t\tthis.domElement = _svg;\n\n\t\tthis.autoClear = true;\n\t\tthis.sortObjects = true;\n\t\tthis.sortElements = true;\n\n\t\tthis.overdraw = 0.5;\n\n\t\tthis.info = {\n\n\t\t\trender: {\n\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setQuality = function ( quality ) {\n\n\t\t\tswitch ( quality ) {\n\n\t\t\t\tcase \"high\": _quality = 1; break;\n\t\t\t\tcase \"low\": _quality = 0; break;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setClearColor = function ( color ) {\n\n\t\t\t_clearColor.set( color );\n\n\t\t};\n\n\t\tthis.setPixelRatio = function () {};\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_svgWidth = width; _svgHeight = height;\n\t\t\t_svgWidthHalf = _svgWidth / 2; _svgHeightHalf = _svgHeight / 2;\n\n\t\t\t_svg.setAttribute( 'viewBox', ( - _svgWidthHalf ) + ' ' + ( - _svgHeightHalf ) + ' ' + _svgWidth + ' ' + _svgHeight );\n\t\t\t_svg.setAttribute( 'width', _svgWidth );\n\t\t\t_svg.setAttribute( 'height', _svgHeight );\n\n\t\t\t_clipBox.min.set( - _svgWidthHalf, - _svgHeightHalf );\n\t\t\t_clipBox.max.set( _svgWidthHalf, _svgHeightHalf );\n\n\t\t};\n\n\t\tthis.setPrecision = function ( precision ) {\n\n\t\t\t_precision = precision;\n\n\t\t};\n\n\t\tfunction removeChildNodes() {\n\n\t\t\t_pathCount = 0;\n\n\t\t\twhile ( _svg.childNodes.length > 0 ) {\n\n\t\t\t\t_svg.removeChild( _svg.childNodes[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convert( c ) {\n\n\t\t\treturn _precision !== null ? c.toFixed( _precision ) : c;\n\n\t\t}\n\n\t\tthis.clear = function () {\n\n\t\t\tremoveChildNodes();\n\t\t\t_svg.style.backgroundColor = _clearColor.getStyle();\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\t\tconsole.error( 'THREE.SVGRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background && background.isColor ) {\n\n\t\t\t\tremoveChildNodes();\n\t\t\t\t_svg.style.backgroundColor = background.getStyle();\n\n\t\t\t} else if ( this.autoClear === true ) {\n\n\t\t\t\tthis.clear();\n\n\t\t\t}\n\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t\tcalculateLights( _lights );\n\n\t\t\t // reset accumulated path\n\n\t\t\t_currentPath = '';\n\t\t\t_currentStyle = '';\n\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\t\tvar element = _elements[ e ];\n\t\t\t\tvar material = element.material;\n\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t\t_elemBox.makeEmpty();\n\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _svgWidthHalf; _v1.y *= - _svgHeightHalf;\n\n\t\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t\t_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= - _svgHeightHalf;\n\n\t\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t\t_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _svgWidthHalf; _v3.positionScreen.y *= - _svgHeightHalf;\n\n\t\t\t\t\tif ( this.overdraw > 0 ) {\n\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, this.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, this.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, this.overdraw );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tflushPath(); // just to flush last svg:path\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\t if ( object instanceof THREE.SVGObject ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\t\tif ( _vector3.z < - 1 || _vector3.z > 1 ) return;\n\n\t\t\t\t\tvar x = _vector3.x * _svgWidthHalf;\n\t\t\t\t\tvar y = - _vector3.y * _svgHeightHalf;\n\n\t\t\t\t\tvar node = object.node;\n\t\t\t\t\tnode.setAttribute( 'transform', 'translate(' + x + ',' + y + ')' );\n\n\t\t\t\t\t_svg.appendChild( node );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\tfunction calculateLights( lights ) {\n\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tvar light = lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\t_ambientLight.r += lightColor.r;\n\t\t\t\t\t_ambientLight.g += lightColor.g;\n\t\t\t\t\t_ambientLight.b += lightColor.b;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\t_directionalLights.r += lightColor.r;\n\t\t\t\t\t_directionalLights.g += lightColor.g;\n\t\t\t\t\t_directionalLights.b += lightColor.b;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\t_pointLights.r += lightColor.r;\n\t\t\t\t\t_pointLights.g += lightColor.g;\n\t\t\t\t\t_pointLights.b += lightColor.b;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction calculateLight( lights, position, normal, color ) {\n\n\t\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tvar light = lights[ l ];\n\t\t\t\tvar lightColor = light.color;\n\n\t\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.r += lightColor.r * amount;\n\t\t\t\t\tcolor.g += lightColor.g * amount;\n\t\t\t\t\tcolor.b += lightColor.b * amount;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.r += lightColor.r * amount;\n\t\t\t\t\tcolor.g += lightColor.g * amount;\n\t\t\t\t\tcolor.b += lightColor.b * amount;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderSprite( v1, element, material ) {\n\n\t\t\tvar scaleX = element.scale.x * _svgWidthHalf;\n\t\t\tvar scaleY = element.scale.y * _svgHeightHalf;\n\n\t\t\tif ( material.isPointsMaterial ) {\n\n\t\t\t\tscaleX *= material.size;\n\t\t\t\tscaleY *= material.size;\n\n\t\t\t}\n\n\t\t\tvar path = 'M' + convert( v1.x - scaleX * 0.5 ) + ',' + convert( v1.y - scaleY * 0.5 ) + 'h' + convert( scaleX ) + 'v' + convert( scaleY ) + 'h' + convert( - scaleX ) + 'z';\n\t\t\tvar style = \"\";\n\n\t\t\tif ( material.isSpriteMaterial || material.isPointsMaterial ) {\n\n\t\t\t\tstyle = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\n\n\t\t\t}\n\n\t\t\taddPath( style, path );\n\n\t\t}\n\n\t\tfunction renderLine( v1, v2, element, material ) {\n\n\t\t\tvar path = 'M' + convert( v1.positionScreen.x ) + ',' + convert( v1.positionScreen.y ) + 'L' + convert( v2.positionScreen.x ) + ',' + convert( v2.positionScreen.y );\n\n\t\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\t\tvar style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\tstyle = style + ';stroke-dasharray:' + material.dashSize + \",\" + material.gapSize;\n\n\t\t\t\t}\n\n\t\t\t\taddPath( style, path );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderFace3( v1, v2, v3, element, material ) {\n\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\n\t\t\tvar path = 'M' + convert( v1.positionScreen.x ) + ',' + convert( v1.positionScreen.y ) + 'L' + convert( v2.positionScreen.x ) + ',' + convert( v2.positionScreen.y ) + 'L' + convert( v3.positionScreen.x ) + ',' + convert( v3.positionScreen.y ) + 'z';\n\t\t\tvar style = '';\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) {\n\n\t\t\t\t_diffuseColor.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\t_color.copy( _ambientLight );\n\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\t\tcalculateLight( _lights, _centroid, element.normalModel, _color );\n\n\t\t\t\t_color.multiply( _diffuseColor ).add( material.emissive );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix ).normalize();\n\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\t}\n\n\t\t\tif ( material.wireframe ) {\n\n\t\t\t\tstyle = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n\n\t\t\t} else {\n\n\t\t\t\tstyle = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\n\n\t\t\t}\n\n\t\t\taddPath( style, path );\n\n\t\t}\n\n\t\t// Hide anti-alias gaps\n\n\t\tfunction expand( v1, v2, pixels ) {\n\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\t\tdet = x * x + y * y, idet;\n\n\t\t\tif ( det === 0 ) return;\n\n\t\t\tidet = pixels / Math.sqrt( det );\n\n\t\t\tx *= idet; y *= idet;\n\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\n\t\t}\n\n\t\tfunction addPath( style, path ) {\n\n\t\t\tif ( _currentStyle === style ) {\n\n\t\t\t\t_currentPath += path;\n\n\t\t\t} else {\n\n\t\t\t\tflushPath();\n\n\t\t\t\t_currentStyle = style;\n\t\t\t\t_currentPath = path;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction flushPath() {\n\n\t\t\tif ( _currentPath ) {\n\n\t\t\t\t_svgNode = getPathNode( _pathCount ++ );\n\t\t\t\t_svgNode.setAttribute( 'd', _currentPath );\n\t\t\t\t_svgNode.setAttribute( 'style', _currentStyle );\n\t\t\t\t_svg.appendChild( _svgNode );\n\n\t\t\t}\n\n\t\t\t_currentPath = '';\n\t\t\t_currentStyle = '';\n\n\t\t}\n\n\t\tfunction getPathNode( id ) {\n\n\t\t\tif ( _svgPathPool[ id ] == null ) {\n\n\t\t\t\t_svgPathPool[ id ] = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n\n\t\t\t\tif ( _quality == 0 ) {\n\n\t\t\t\t\t_svgPathPool[ id ].setAttribute( 'shape-rendering', 'crispEdges' ); //optimizeSpeed\n\n\t\t\t\t}\n\n\t\t\t\treturn _svgPathPool[ id ];\n\n\t\t\t}\n\n\t\t\treturn _svgPathPool[ id ];\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.SVGRenderer;\n});\n"]}