{"version":3,"sources":["renderers/Projector.js"],"names":["define","THREE","RenderableObject","this","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","Vector3","vertexNormalsModel","vertexNormalsLength","color","Color","material","uvs","Vector2","position","positionWorld","positionScreen","Vector4","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_vertex","_vertexCount","_face","_faceCount","_line","_lineCount","_sprite","_spriteCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_facePool","_facePoolLength","_linePool","_linePoolLength","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","Array","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","renderList","normals","colors","normalMatrix","projectVertex","applyMatrix4","invW","w","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","setObject","value","getNormalMatrix","matrixWorld","length","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","DoubleSide","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","addObject","getNextObjectInPool","setFromMatrixPosition","pushPoint","sprite","getNextSpriteInPool","abs","projectionMatrix","face","line","painterSort","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","setFromProjectionMatrix","projectObject","Light","Mesh","Line","Points","frustumCulled","intersectsObject","Sprite","intersectsSprite","children","l","sort","o","ol","geometry","BufferGeometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","uv","index","indices","group","materialIndex","start","count","Geometry","vertices","faces","faceVertexUvs","v","vl","targetVertex","f","fl","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","n","nl","vertexUvs","u","step","LineSegments","modelViewMatrix"],"mappings":"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","file":"../../renderers/Projector.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\n\tTHREE.RenderableObject = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableFace = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\n\t\tthis.normalModel = new THREE.Vector3();\n\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableVertex = function () {\n\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\n\t\tthis.visible = true;\n\n\t};\n\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\n\t};\n\n\t//\n\n\tTHREE.RenderableLine = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\n\t\tthis.z = 0;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.RenderableSprite = function () {\n\n\t\tthis.id = 0;\n\n\t\tthis.object = null;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\n\t\tthis.material = null;\n\t\tthis.renderOrder = 0;\n\n\t};\n\n\t//\n\n\tTHREE.Projector = function () {\n\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t\t_vector3 = new THREE.Vector3(),\n\t\t\t_vector4 = new THREE.Vector4(),\n\n\t\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t\t_boundingBox = new THREE.Box3(),\n\t\t\t_points3 = new Array( 3 ),\n\n\t\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t\t_modelMatrix,\n\t\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t\t_frustum = new THREE.Frustum(),\n\n\t\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t\t//\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function () {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t\t//\n\n\t\tvar RenderList = function () {\n\n\t\t\tvar normals = [];\n\t\t\tvar colors = [];\n\t\t\tvar uvs = [];\n\n\t\t\tvar object = null;\n\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\t\tfunction setObject( value ) {\n\n\t\t\t\tobject = value;\n\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\t\tnormals.length = 0;\n\t\t\t\tcolors.length = 0;\n\t\t\t\tuvs.length = 0;\n\n\t\t\t}\n\n\t\t\tfunction projectVertex( vertex ) {\n\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t\t}\n\n\t\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\t\tprojectVertex( _vertex );\n\n\t\t\t}\n\n\t\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t\tfunction pushColor( r, g, b ) {\n\n\t\t\t\tcolors.push( r, g, b );\n\n\t\t\t}\n\n\t\t\tfunction pushUv( x, y ) {\n\n\t\t\t\tuvs.push( x, y );\n\n\t\t\t}\n\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t\t}\n\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t\t}\n\n\t\t\tfunction pushLine( a, b ) {\n\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t\t// Clip\n\n\t\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\tif ( object.material.vertexColors ) {\n\n\t\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction pushTriangle( a, b, c, material ) {\n\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t// face normal\n\t\t\t\t\t_vector3.subVectors( v3.position, v2.position );\n\t\t\t\t\t_vector4.subVectors( v1.position, v2.position );\n\t\t\t\t\t_vector3.cross( _vector4 );\n\t\t\t\t\t_face.normalModel.copy( _vector3 );\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t\t_face.color.fromArray( colors, a * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushColor: pushColor,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t};\n\n\t\t};\n\n\t\tvar renderList = new RenderList();\n\n\t\tfunction projectObject( object ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\t\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\t\taddObject( object );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addObject( object ) {\n\n\t\t\t_object = getNextObjectInPool();\n\t\t\t_object.id = object.id;\n\t\t\t_object.object = object;\n\n\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t\t_object.z = _vector3.z;\n\t\t\t_object.renderOrder = object.renderOrder;\n\n\t\t\t_renderData.objects.push( _object );\n\n\t\t}\n\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\n\t\t\t_renderData.elements.length = 0;\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\t_frustum.setFromProjectionMatrix( _viewProjectionMatrix );\n\n\t\t\t//\n\n\t\t\t_objectCount = 0;\n\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\n\t\t\tprojectObject( scene );\n\n\t\t\tif ( sortObjects === true ) {\n\n\t\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar objects = _renderData.objects;\n\n\t\t\tfor ( var o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\t\tvar object = objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\trenderList.setObject( object );\n\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t\t_vertexCount = 0;\n\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tvar x = positions[ i ];\n\t\t\t\t\t\t\tvar y = positions[ i + 1 ];\n\t\t\t\t\t\t\tvar z = positions[ i + 2 ];\n\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphAttributes.position;\n\t\t\t\t\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\n\t\t\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t\t\tx += target.getX( i / 3 ) * influence;\n\t\t\t\t\t\t\t\t\t\ty += target.getY( i / 3 ) * influence;\n\t\t\t\t\t\t\t\t\t\tz += target.getZ( i / 3 ) * influence;\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tx += ( target.getX( i / 3 ) - positions[ i ] ) * influence;\n\t\t\t\t\t\t\t\t\t\ty += ( target.getY( i / 3 ) - positions[ i + 1 ] ) * influence;\n\t\t\t\t\t\t\t\t\t\tz += ( target.getZ( i / 3 ) - positions[ i + 2 ] ) * influence;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trenderList.pushVertex( x, y, z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t ? object.material[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors ) {\n\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t\t_vector4.set( vertex.x, vertex.y, vertex.z, 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( sortElements === true ) {\n\n\t\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t\t}\n\n\t\t\treturn _renderData;\n\n\t\t};\n\n\t\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t_vector4.z *= invW;\n\n\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t_sprite.id = object.id;\n\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t\t_sprite.object = object;\n\n\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Pools\n\n\t\tfunction getNextObjectInPool() {\n\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextVertexInPool() {\n\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\n\t\t\t}\n\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextFaceInPool() {\n\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\n\t\t\t}\n\n\t\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t\t}\n\n\t\tfunction getNextLineInPool() {\n\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++;\n\t\t\t\treturn line;\n\n\t\t\t}\n\n\t\t\treturn _linePool[ _lineCount ++ ];\n\n\t\t}\n\n\t\tfunction getNextSpriteInPool() {\n\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++;\n\t\t\t\treturn sprite;\n\n\t\t\t}\n\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t\t}\n\n\t\t//\n\n\t\tfunction painterSort( a, b ) {\n\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t\t} else if ( a.z !== b.z ) {\n\n\t\t\t\treturn b.z - a.z;\n\n\t\t\t} else if ( a.id !== b.id ) {\n\n\t\t\t\treturn a.id - b.id;\n\n\t\t\t} else {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction clipLine( s1, s2 ) {\n\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\t\tbc1near = s1.z + s1.w,\n\t\t\t\tbc2near = s2.z + s2.w,\n\t\t\t\tbc1far = - s1.z + s1.w,\n\t\t\t\tbc2far = - s2.z + s2.w;\n\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.Projector;\n});\n"]}