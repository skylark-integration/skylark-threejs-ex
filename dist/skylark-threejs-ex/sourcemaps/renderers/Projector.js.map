{"version":3,"sources":["renderers/Projector.js"],"names":["define","THREE","threex","RenderableObject","this","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","Vector3","vertexNormalsModel","vertexNormalsLength","color","Color","material","uvs","Vector2","position","positionWorld","positionScreen","Vector4","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_vertex","_vertexCount","_face","_faceCount","_line","_lineCount","_sprite","_spriteCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_facePool","_facePoolLength","_linePool","_linePoolLength","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","Array","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","renderList","normals","colors","normalMatrix","projectVertex","applyMatrix4","invW","w","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","setObject","value","getNormalMatrix","matrixWorld","length","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","DoubleSide","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","addObject","getNextObjectInPool","setFromMatrixPosition","pushPoint","sprite","getNextSpriteInPool","abs","projectionMatrix","face","line","painterSort","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","setFromProjectionMatrix","projectObject","Light","Mesh","Line","Points","frustumCulled","intersectsObject","Sprite","intersectsSprite","children","l","sort","o","ol","geometry","BufferGeometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","uv","index","indices","group","materialIndex","start","count","Geometry","vertices","faces","faceVertexUvs","v","vl","targetVertex","f","fl","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","n","nl","vertexUvs","u","step","LineSegments","modelViewMatrix","renderers"],"mappings":"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","file":"../../renderers/Projector.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var RenderableObject = function () {\r\n        this.id = 0;\r\n        this.object = null;\r\n        this.z = 0;\r\n        this.renderOrder = 0;\r\n    };\r\n    var RenderableFace = function () {\r\n        this.id = 0;\r\n        this.v1 = new RenderableVertex();\r\n        this.v2 = new RenderableVertex();\r\n        this.v3 = new RenderableVertex();\r\n        this.normalModel = new THREE.Vector3();\r\n        this.vertexNormalsModel = [\r\n            new THREE.Vector3(),\r\n            new THREE.Vector3(),\r\n            new THREE.Vector3()\r\n        ];\r\n        this.vertexNormalsLength = 0;\r\n        this.color = new THREE.Color();\r\n        this.material = null;\r\n        this.uvs = [\r\n            new THREE.Vector2(),\r\n            new THREE.Vector2(),\r\n            new THREE.Vector2()\r\n        ];\r\n        this.z = 0;\r\n        this.renderOrder = 0;\r\n    };\r\n    var RenderableVertex = function () {\r\n        this.position = new THREE.Vector3();\r\n        this.positionWorld = new THREE.Vector3();\r\n        this.positionScreen = new THREE.Vector4();\r\n        this.visible = true;\r\n    };\r\n    RenderableVertex.prototype.copy = function (vertex) {\r\n        this.positionWorld.copy(vertex.positionWorld);\r\n        this.positionScreen.copy(vertex.positionScreen);\r\n    };\r\n    var RenderableLine = function () {\r\n        this.id = 0;\r\n        this.v1 = new RenderableVertex();\r\n        this.v2 = new RenderableVertex();\r\n        this.vertexColors = [\r\n            new THREE.Color(),\r\n            new THREE.Color()\r\n        ];\r\n        this.material = null;\r\n        this.z = 0;\r\n        this.renderOrder = 0;\r\n    };\r\n    var RenderableSprite = function () {\r\n        this.id = 0;\r\n        this.object = null;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.rotation = 0;\r\n        this.scale = new THREE.Vector2();\r\n        this.material = null;\r\n        this.renderOrder = 0;\r\n    };\r\n    var Projector = function () {\r\n        var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\r\n                objects: [],\r\n                lights: [],\r\n                elements: []\r\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\r\n        this.projectVector = function (vector, camera) {\r\n            console.warn('THREE.Projector: .projectVector() is now vector.project().');\r\n            vector.project(camera);\r\n        };\r\n        this.unprojectVector = function (vector, camera) {\r\n            console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\r\n            vector.unproject(camera);\r\n        };\r\n        this.pickingRay = function () {\r\n            console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\r\n        };\r\n        var RenderList = function () {\r\n            var normals = [];\r\n            var colors = [];\r\n            var uvs = [];\r\n            var object = null;\r\n            var normalMatrix = new THREE.Matrix3();\r\n            function setObject(value) {\r\n                object = value;\r\n                normalMatrix.getNormalMatrix(object.matrixWorld);\r\n                normals.length = 0;\r\n                colors.length = 0;\r\n                uvs.length = 0;\r\n            }\r\n            function projectVertex(vertex) {\r\n                var position = vertex.position;\r\n                var positionWorld = vertex.positionWorld;\r\n                var positionScreen = vertex.positionScreen;\r\n                positionWorld.copy(position).applyMatrix4(_modelMatrix);\r\n                positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\r\n                var invW = 1 / positionScreen.w;\r\n                positionScreen.x *= invW;\r\n                positionScreen.y *= invW;\r\n                positionScreen.z *= invW;\r\n                vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\r\n            }\r\n            function pushVertex(x, y, z) {\r\n                _vertex = getNextVertexInPool();\r\n                _vertex.position.set(x, y, z);\r\n                projectVertex(_vertex);\r\n            }\r\n            function pushNormal(x, y, z) {\r\n                normals.push(x, y, z);\r\n            }\r\n            function pushColor(r, g, b) {\r\n                colors.push(r, g, b);\r\n            }\r\n            function pushUv(x, y) {\r\n                uvs.push(x, y);\r\n            }\r\n            function checkTriangleVisibility(v1, v2, v3) {\r\n                if (v1.visible === true || v2.visible === true || v3.visible === true)\r\n                    return true;\r\n                _points3[0] = v1.positionScreen;\r\n                _points3[1] = v2.positionScreen;\r\n                _points3[2] = v3.positionScreen;\r\n                return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\r\n            }\r\n            function checkBackfaceCulling(v1, v2, v3) {\r\n                return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\r\n            }\r\n            function pushLine(a, b) {\r\n                var v1 = _vertexPool[a];\r\n                var v2 = _vertexPool[b];\r\n                v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\r\n                v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\r\n                if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\r\n                    v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\r\n                    v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\r\n                    _line = getNextLineInPool();\r\n                    _line.id = object.id;\r\n                    _line.v1.copy(v1);\r\n                    _line.v2.copy(v2);\r\n                    _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\r\n                    _line.renderOrder = object.renderOrder;\r\n                    _line.material = object.material;\r\n                    if (object.material.vertexColors) {\r\n                        _line.vertexColors[0].fromArray(colors, a * 3);\r\n                        _line.vertexColors[1].fromArray(colors, b * 3);\r\n                    }\r\n                    _renderData.elements.push(_line);\r\n                }\r\n            }\r\n            function pushTriangle(a, b, c, material) {\r\n                var v1 = _vertexPool[a];\r\n                var v2 = _vertexPool[b];\r\n                var v3 = _vertexPool[c];\r\n                if (checkTriangleVisibility(v1, v2, v3) === false)\r\n                    return;\r\n                if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\r\n                    _face = getNextFaceInPool();\r\n                    _face.id = object.id;\r\n                    _face.v1.copy(v1);\r\n                    _face.v2.copy(v2);\r\n                    _face.v3.copy(v3);\r\n                    _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\r\n                    _face.renderOrder = object.renderOrder;\r\n                    _vector3.subVectors(v3.position, v2.position);\r\n                    _vector4.subVectors(v1.position, v2.position);\r\n                    _vector3.cross(_vector4);\r\n                    _face.normalModel.copy(_vector3);\r\n                    _face.normalModel.applyMatrix3(normalMatrix).normalize();\r\n                    for (var i = 0; i < 3; i++) {\r\n                        var normal = _face.vertexNormalsModel[i];\r\n                        normal.fromArray(normals, arguments[i] * 3);\r\n                        normal.applyMatrix3(normalMatrix).normalize();\r\n                        var uv = _face.uvs[i];\r\n                        uv.fromArray(uvs, arguments[i] * 2);\r\n                    }\r\n                    _face.vertexNormalsLength = 3;\r\n                    _face.material = material;\r\n                    if (material.vertexColors) {\r\n                        _face.color.fromArray(colors, a * 3);\r\n                    }\r\n                    _renderData.elements.push(_face);\r\n                }\r\n            }\r\n            return {\r\n                setObject: setObject,\r\n                projectVertex: projectVertex,\r\n                checkTriangleVisibility: checkTriangleVisibility,\r\n                checkBackfaceCulling: checkBackfaceCulling,\r\n                pushVertex: pushVertex,\r\n                pushNormal: pushNormal,\r\n                pushColor: pushColor,\r\n                pushUv: pushUv,\r\n                pushLine: pushLine,\r\n                pushTriangle: pushTriangle\r\n            };\r\n        };\r\n        var renderList = new RenderList();\r\n        function projectObject(object) {\r\n            if (object.visible === false)\r\n                return;\r\n            if (object instanceof THREE.Light) {\r\n                _renderData.lights.push(object);\r\n            } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points) {\r\n                if (object.material.visible === false)\r\n                    return;\r\n                if (object.frustumCulled === true && _frustum.intersectsObject(object) === false)\r\n                    return;\r\n                addObject(object);\r\n            } else if (object instanceof THREE.Sprite) {\r\n                if (object.material.visible === false)\r\n                    return;\r\n                if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false)\r\n                    return;\r\n                addObject(object);\r\n            }\r\n            var children = object.children;\r\n            for (var i = 0, l = children.length; i < l; i++) {\r\n                projectObject(children[i]);\r\n            }\r\n        }\r\n        function addObject(object) {\r\n            _object = getNextObjectInPool();\r\n            _object.id = object.id;\r\n            _object.object = object;\r\n            _vector3.setFromMatrixPosition(object.matrixWorld);\r\n            _vector3.applyMatrix4(_viewProjectionMatrix);\r\n            _object.z = _vector3.z;\r\n            _object.renderOrder = object.renderOrder;\r\n            _renderData.objects.push(_object);\r\n        }\r\n        this.projectScene = function (scene, camera, sortObjects, sortElements) {\r\n            _faceCount = 0;\r\n            _lineCount = 0;\r\n            _spriteCount = 0;\r\n            _renderData.elements.length = 0;\r\n            if (scene.autoUpdate === true)\r\n                scene.updateMatrixWorld();\r\n            if (camera.parent === null)\r\n                camera.updateMatrixWorld();\r\n            _viewMatrix.copy(camera.matrixWorldInverse);\r\n            _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\r\n            _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\r\n            _objectCount = 0;\r\n            _renderData.objects.length = 0;\r\n            _renderData.lights.length = 0;\r\n            projectObject(scene);\r\n            if (sortObjects === true) {\r\n                _renderData.objects.sort(painterSort);\r\n            }\r\n            var objects = _renderData.objects;\r\n            for (var o = 0, ol = objects.length; o < ol; o++) {\r\n                var object = objects[o].object;\r\n                var geometry = object.geometry;\r\n                renderList.setObject(object);\r\n                _modelMatrix = object.matrixWorld;\r\n                _vertexCount = 0;\r\n                if (object instanceof THREE.Mesh) {\r\n                    if (geometry instanceof THREE.BufferGeometry) {\r\n                        var material = object.material;\r\n                        var isMultiMaterial = Array.isArray(material);\r\n                        var attributes = geometry.attributes;\r\n                        var groups = geometry.groups;\r\n                        if (attributes.position === undefined)\r\n                            continue;\r\n                        var positions = attributes.position.array;\r\n                        for (var i = 0, l = positions.length; i < l; i += 3) {\r\n                            var x = positions[i];\r\n                            var y = positions[i + 1];\r\n                            var z = positions[i + 2];\r\n                            if (material.morphTargets === true) {\r\n                                var morphTargets = geometry.morphAttributes.position;\r\n                                var morphTargetsRelative = geometry.morphTargetsRelative;\r\n                                var morphInfluences = object.morphTargetInfluences;\r\n                                for (var t = 0, tl = morphTargets.length; t < tl; t++) {\r\n                                    var influence = morphInfluences[t];\r\n                                    if (influence === 0)\r\n                                        continue;\r\n                                    var target = morphTargets[t];\r\n                                    if (morphTargetsRelative) {\r\n                                        x += target.getX(i / 3) * influence;\r\n                                        y += target.getY(i / 3) * influence;\r\n                                        z += target.getZ(i / 3) * influence;\r\n                                    } else {\r\n                                        x += (target.getX(i / 3) - positions[i]) * influence;\r\n                                        y += (target.getY(i / 3) - positions[i + 1]) * influence;\r\n                                        z += (target.getZ(i / 3) - positions[i + 2]) * influence;\r\n                                    }\r\n                                }\r\n                            }\r\n                            renderList.pushVertex(x, y, z);\r\n                        }\r\n                        if (attributes.normal !== undefined) {\r\n                            var normals = attributes.normal.array;\r\n                            for (var i = 0, l = normals.length; i < l; i += 3) {\r\n                                renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\r\n                            }\r\n                        }\r\n                        if (attributes.color !== undefined) {\r\n                            var colors = attributes.color.array;\r\n                            for (var i = 0, l = colors.length; i < l; i += 3) {\r\n                                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\r\n                            }\r\n                        }\r\n                        if (attributes.uv !== undefined) {\r\n                            var uvs = attributes.uv.array;\r\n                            for (var i = 0, l = uvs.length; i < l; i += 2) {\r\n                                renderList.pushUv(uvs[i], uvs[i + 1]);\r\n                            }\r\n                        }\r\n                        if (geometry.index !== null) {\r\n                            var indices = geometry.index.array;\r\n                            if (groups.length > 0) {\r\n                                for (var g = 0; g < groups.length; g++) {\r\n                                    var group = groups[g];\r\n                                    material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\r\n                                    if (material === undefined)\r\n                                        continue;\r\n                                    for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\r\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (var i = 0, l = indices.length; i < l; i += 3) {\r\n                                    renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (groups.length > 0) {\r\n                                for (var g = 0; g < groups.length; g++) {\r\n                                    var group = groups[g];\r\n                                    material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\r\n                                    if (material === undefined)\r\n                                        continue;\r\n                                    for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\r\n                                        renderList.pushTriangle(i, i + 1, i + 2, material);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\r\n                                    renderList.pushTriangle(i, i + 1, i + 2, material);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (geometry instanceof THREE.Geometry) {\r\n                        var vertices = geometry.vertices;\r\n                        var faces = geometry.faces;\r\n                        var faceVertexUvs = geometry.faceVertexUvs[0];\r\n                        _normalMatrix.getNormalMatrix(_modelMatrix);\r\n                        var material = object.material;\r\n                        var isMultiMaterial = Array.isArray(material);\r\n                        for (var v = 0, vl = vertices.length; v < vl; v++) {\r\n                            var vertex = vertices[v];\r\n                            _vector3.copy(vertex);\r\n                            if (material.morphTargets === true) {\r\n                                var morphTargets = geometry.morphTargets;\r\n                                var morphInfluences = object.morphTargetInfluences;\r\n                                for (var t = 0, tl = morphTargets.length; t < tl; t++) {\r\n                                    var influence = morphInfluences[t];\r\n                                    if (influence === 0)\r\n                                        continue;\r\n                                    var target = morphTargets[t];\r\n                                    var targetVertex = target.vertices[v];\r\n                                    _vector3.x += (targetVertex.x - vertex.x) * influence;\r\n                                    _vector3.y += (targetVertex.y - vertex.y) * influence;\r\n                                    _vector3.z += (targetVertex.z - vertex.z) * influence;\r\n                                }\r\n                            }\r\n                            renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\r\n                        }\r\n                        for (var f = 0, fl = faces.length; f < fl; f++) {\r\n                            var face = faces[f];\r\n                            material = isMultiMaterial === true ? object.material[face.materialIndex] : object.material;\r\n                            if (material === undefined)\r\n                                continue;\r\n                            var side = material.side;\r\n                            var v1 = _vertexPool[face.a];\r\n                            var v2 = _vertexPool[face.b];\r\n                            var v3 = _vertexPool[face.c];\r\n                            if (renderList.checkTriangleVisibility(v1, v2, v3) === false)\r\n                                continue;\r\n                            var visible = renderList.checkBackfaceCulling(v1, v2, v3);\r\n                            if (side !== THREE.DoubleSide) {\r\n                                if (side === THREE.FrontSide && visible === false)\r\n                                    continue;\r\n                                if (side === THREE.BackSide && visible === true)\r\n                                    continue;\r\n                            }\r\n                            _face = getNextFaceInPool();\r\n                            _face.id = object.id;\r\n                            _face.v1.copy(v1);\r\n                            _face.v2.copy(v2);\r\n                            _face.v3.copy(v3);\r\n                            _face.normalModel.copy(face.normal);\r\n                            if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\r\n                                _face.normalModel.negate();\r\n                            }\r\n                            _face.normalModel.applyMatrix3(_normalMatrix).normalize();\r\n                            var faceVertexNormals = face.vertexNormals;\r\n                            for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\r\n                                var normalModel = _face.vertexNormalsModel[n];\r\n                                normalModel.copy(faceVertexNormals[n]);\r\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\r\n                                    normalModel.negate();\r\n                                }\r\n                                normalModel.applyMatrix3(_normalMatrix).normalize();\r\n                            }\r\n                            _face.vertexNormalsLength = faceVertexNormals.length;\r\n                            var vertexUvs = faceVertexUvs[f];\r\n                            if (vertexUvs !== undefined) {\r\n                                for (var u = 0; u < 3; u++) {\r\n                                    _face.uvs[u].copy(vertexUvs[u]);\r\n                                }\r\n                            }\r\n                            _face.color = face.color;\r\n                            _face.material = material;\r\n                            _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\r\n                            _face.renderOrder = object.renderOrder;\r\n                            _renderData.elements.push(_face);\r\n                        }\r\n                    }\r\n                } else if (object instanceof THREE.Line) {\r\n                    _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\r\n                    if (geometry instanceof THREE.BufferGeometry) {\r\n                        var attributes = geometry.attributes;\r\n                        if (attributes.position !== undefined) {\r\n                            var positions = attributes.position.array;\r\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\r\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\r\n                            }\r\n                            if (attributes.color !== undefined) {\r\n                                var colors = attributes.color.array;\r\n                                for (var i = 0, l = colors.length; i < l; i += 3) {\r\n                                    renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\r\n                                }\r\n                            }\r\n                            if (geometry.index !== null) {\r\n                                var indices = geometry.index.array;\r\n                                for (var i = 0, l = indices.length; i < l; i += 2) {\r\n                                    renderList.pushLine(indices[i], indices[i + 1]);\r\n                                }\r\n                            } else {\r\n                                var step = object instanceof THREE.LineSegments ? 2 : 1;\r\n                                for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\r\n                                    renderList.pushLine(i, i + 1);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (geometry instanceof THREE.Geometry) {\r\n                        var vertices = object.geometry.vertices;\r\n                        if (vertices.length === 0)\r\n                            continue;\r\n                        v1 = getNextVertexInPool();\r\n                        v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\r\n                        var step = object instanceof THREE.LineSegments ? 2 : 1;\r\n                        for (var v = 1, vl = vertices.length; v < vl; v++) {\r\n                            v1 = getNextVertexInPool();\r\n                            v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\r\n                            if ((v + 1) % step > 0)\r\n                                continue;\r\n                            v2 = _vertexPool[_vertexCount - 2];\r\n                            _clippedVertex1PositionScreen.copy(v1.positionScreen);\r\n                            _clippedVertex2PositionScreen.copy(v2.positionScreen);\r\n                            if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\r\n                                _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\r\n                                _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\r\n                                _line = getNextLineInPool();\r\n                                _line.id = object.id;\r\n                                _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\r\n                                _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\r\n                                _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\r\n                                _line.renderOrder = object.renderOrder;\r\n                                _line.material = object.material;\r\n                                if (object.material.vertexColors) {\r\n                                    _line.vertexColors[0].copy(object.geometry.colors[v]);\r\n                                    _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\r\n                                }\r\n                                _renderData.elements.push(_line);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (object instanceof THREE.Points) {\r\n                    _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\r\n                    if (geometry instanceof THREE.Geometry) {\r\n                        var vertices = object.geometry.vertices;\r\n                        for (var v = 0, vl = vertices.length; v < vl; v++) {\r\n                            var vertex = vertices[v];\r\n                            _vector4.set(vertex.x, vertex.y, vertex.z, 1);\r\n                            _vector4.applyMatrix4(_modelViewProjectionMatrix);\r\n                            pushPoint(_vector4, object, camera);\r\n                        }\r\n                    } else if (geometry instanceof THREE.BufferGeometry) {\r\n                        var attributes = geometry.attributes;\r\n                        if (attributes.position !== undefined) {\r\n                            var positions = attributes.position.array;\r\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\r\n                                _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\r\n                                _vector4.applyMatrix4(_modelViewProjectionMatrix);\r\n                                pushPoint(_vector4, object, camera);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (object instanceof THREE.Sprite) {\r\n                    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\r\n                    _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\r\n                    _vector4.applyMatrix4(_viewProjectionMatrix);\r\n                    pushPoint(_vector4, object, camera);\r\n                }\r\n            }\r\n            if (sortElements === true) {\r\n                _renderData.elements.sort(painterSort);\r\n            }\r\n            return _renderData;\r\n        };\r\n        function pushPoint(_vector4, object, camera) {\r\n            var invW = 1 / _vector4.w;\r\n            _vector4.z *= invW;\r\n            if (_vector4.z >= -1 && _vector4.z <= 1) {\r\n                _sprite = getNextSpriteInPool();\r\n                _sprite.id = object.id;\r\n                _sprite.x = _vector4.x * invW;\r\n                _sprite.y = _vector4.y * invW;\r\n                _sprite.z = _vector4.z;\r\n                _sprite.renderOrder = object.renderOrder;\r\n                _sprite.object = object;\r\n                _sprite.rotation = object.rotation;\r\n                _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\r\n                _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\r\n                _sprite.material = object.material;\r\n                _renderData.elements.push(_sprite);\r\n            }\r\n        }\r\n        function getNextObjectInPool() {\r\n            if (_objectCount === _objectPoolLength) {\r\n                var object = new RenderableObject();\r\n                _objectPool.push(object);\r\n                _objectPoolLength++;\r\n                _objectCount++;\r\n                return object;\r\n            }\r\n            return _objectPool[_objectCount++];\r\n        }\r\n        function getNextVertexInPool() {\r\n            if (_vertexCount === _vertexPoolLength) {\r\n                var vertex = new RenderableVertex();\r\n                _vertexPool.push(vertex);\r\n                _vertexPoolLength++;\r\n                _vertexCount++;\r\n                return vertex;\r\n            }\r\n            return _vertexPool[_vertexCount++];\r\n        }\r\n        function getNextFaceInPool() {\r\n            if (_faceCount === _facePoolLength) {\r\n                var face = new RenderableFace();\r\n                _facePool.push(face);\r\n                _facePoolLength++;\r\n                _faceCount++;\r\n                return face;\r\n            }\r\n            return _facePool[_faceCount++];\r\n        }\r\n        function getNextLineInPool() {\r\n            if (_lineCount === _linePoolLength) {\r\n                var line = new RenderableLine();\r\n                _linePool.push(line);\r\n                _linePoolLength++;\r\n                _lineCount++;\r\n                return line;\r\n            }\r\n            return _linePool[_lineCount++];\r\n        }\r\n        function getNextSpriteInPool() {\r\n            if (_spriteCount === _spritePoolLength) {\r\n                var sprite = new RenderableSprite();\r\n                _spritePool.push(sprite);\r\n                _spritePoolLength++;\r\n                _spriteCount++;\r\n                return sprite;\r\n            }\r\n            return _spritePool[_spriteCount++];\r\n        }\r\n        function painterSort(a, b) {\r\n            if (a.renderOrder !== b.renderOrder) {\r\n                return a.renderOrder - b.renderOrder;\r\n            } else if (a.z !== b.z) {\r\n                return b.z - a.z;\r\n            } else if (a.id !== b.id) {\r\n                return a.id - b.id;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        function clipLine(s1, s2) {\r\n            var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\r\n            if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\r\n                return true;\r\n            } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\r\n                return false;\r\n            } else {\r\n                if (bc1near < 0) {\r\n                    alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\r\n                } else if (bc2near < 0) {\r\n                    alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\r\n                }\r\n                if (bc1far < 0) {\r\n                    alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\r\n                } else if (bc2far < 0) {\r\n                    alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\r\n                }\r\n                if (alpha2 < alpha1) {\r\n                    return false;\r\n                } else {\r\n                    s1.lerp(s2, alpha1);\r\n                    s2.lerp(s1, 1 - alpha2);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Projector.RenderableObject = RenderableObject;\r\n    Projector.RenderableFace = RenderableFace;\r\n    Projector.RenderableVertex = RenderableVertex;\r\n    Projector.RenderableLine = RenderableLine;\r\n    Projector.RenderableSprite = RenderableSprite;\r\n    \r\n    return threex.renderers.Projector = Projector;\r\n});\r\n"]}