{"version":3,"sources":["math/OBB.js"],"names":["define","THREE","threex","a","c","u","Vector3","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","Matrix3","aabb","Box3","matrix","Matrix4","inverse","localRay","Ray","OBB","center","halfSize","rotation","this","Object","assign","prototype","set","copy","obb","clone","constructor","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","MathUtils","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","matrix4","matrix3","me","setFromCenterAndSize","elements","setPosition","applyMatrix4","getInverse","intersectBox","intersectsRay","getCenter","identity","equals","sx","length","sy","sz","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition","math"],"mappings":"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","file":"../../math/OBB.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var a = {\r\n        c: null,\r\n        u: [\r\n            new THREE.Vector3(),\r\n            new THREE.Vector3(),\r\n            new THREE.Vector3()\r\n        ],\r\n        e: []\r\n    };\r\n    var b = {\r\n        c: null,\r\n        u: [\r\n            new THREE.Vector3(),\r\n            new THREE.Vector3(),\r\n            new THREE.Vector3()\r\n        ],\r\n        e: []\r\n    };\r\n    var R = [\r\n        [],\r\n        [],\r\n        []\r\n    ];\r\n    var AbsR = [\r\n        [],\r\n        [],\r\n        []\r\n    ];\r\n    var t = [];\r\n    var xAxis = new THREE.Vector3();\r\n    var yAxis = new THREE.Vector3();\r\n    var zAxis = new THREE.Vector3();\r\n    var v1 = new THREE.Vector3();\r\n    var size = new THREE.Vector3();\r\n    var closestPoint = new THREE.Vector3();\r\n    var rotationMatrix = new THREE.Matrix3();\r\n    var aabb = new THREE.Box3();\r\n    var matrix = new THREE.Matrix4();\r\n    var inverse = new THREE.Matrix4();\r\n    var localRay = new THREE.Ray();\r\n    function OBB(center = new THREE.Vector3(), halfSize = new THREE.Vector3(), rotation = new THREE.Matrix3()) {\r\n        this.center = center;\r\n        this.halfSize = halfSize;\r\n        this.rotation = rotation;\r\n    }\r\n    Object.assign(OBB.prototype, {\r\n        set: function (center, halfSize, rotation) {\r\n            this.center = center;\r\n            this.halfSize = halfSize;\r\n            this.rotation = rotation;\r\n            return this;\r\n        },\r\n        copy: function (obb) {\r\n            this.center.copy(obb.center);\r\n            this.halfSize.copy(obb.halfSize);\r\n            this.rotation.copy(obb.rotation);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            return new this.constructor().copy(this);\r\n        },\r\n        getSize: function (result) {\r\n            return result.copy(this.halfSize).multiplyScalar(2);\r\n        },\r\n        clampPoint: function (point, result) {\r\n            var halfSize = this.halfSize;\r\n            v1.subVectors(point, this.center);\r\n            this.rotation.extractBasis(xAxis, yAxis, zAxis);\r\n            result.copy(this.center);\r\n            var x = THREE.MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\r\n            result.add(xAxis.multiplyScalar(x));\r\n            var y = THREE.MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\r\n            result.add(yAxis.multiplyScalar(y));\r\n            var z = THREE.MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\r\n            result.add(zAxis.multiplyScalar(z));\r\n            return result;\r\n        },\r\n        containsPoint: function (point) {\r\n            v1.subVectors(point, this.center);\r\n            this.rotation.extractBasis(xAxis, yAxis, zAxis);\r\n            return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\r\n        },\r\n        intersectsBox3: function (box3) {\r\n            return this.intersectsOBB(obb.fromBox3(box3));\r\n        },\r\n        intersectsSphere: function (sphere) {\r\n            this.clampPoint(sphere.center, closestPoint);\r\n            return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\r\n        },\r\n        intersectsOBB: function (obb, epsilon = Number.EPSILON) {\r\n            a.c = this.center;\r\n            a.e[0] = this.halfSize.x;\r\n            a.e[1] = this.halfSize.y;\r\n            a.e[2] = this.halfSize.z;\r\n            this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\r\n            b.c = obb.center;\r\n            b.e[0] = obb.halfSize.x;\r\n            b.e[1] = obb.halfSize.y;\r\n            b.e[2] = obb.halfSize.z;\r\n            obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\r\n            for (var i = 0; i < 3; i++) {\r\n                for (var j = 0; j < 3; j++) {\r\n                    R[i][j] = a.u[i].dot(b.u[j]);\r\n                }\r\n            }\r\n            v1.subVectors(b.c, a.c);\r\n            t[0] = v1.dot(a.u[0]);\r\n            t[1] = v1.dot(a.u[1]);\r\n            t[2] = v1.dot(a.u[2]);\r\n            for (var i = 0; i < 3; i++) {\r\n                for (var j = 0; j < 3; j++) {\r\n                    AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\r\n                }\r\n            }\r\n            var ra, rb;\r\n            for (var i = 0; i < 3; i++) {\r\n                ra = a.e[i];\r\n                rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\r\n                if (Math.abs(t[i]) > ra + rb)\r\n                    return false;\r\n            }\r\n            for (var i = 0; i < 3; i++) {\r\n                ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\r\n                rb = b.e[i];\r\n                if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb)\r\n                    return false;\r\n            }\r\n            ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\r\n            rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\r\n            if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb)\r\n                return false;\r\n            ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\r\n            rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\r\n            if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb)\r\n                return false;\r\n            ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\r\n            rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\r\n            if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb)\r\n                return false;\r\n            ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\r\n            rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\r\n            if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb)\r\n                return false;\r\n            ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\r\n            rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\r\n            if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb)\r\n                return false;\r\n            ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\r\n            rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\r\n            if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb)\r\n                return false;\r\n            ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\r\n            rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\r\n            if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb)\r\n                return false;\r\n            ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\r\n            rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\r\n            if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb)\r\n                return false;\r\n            ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\r\n            rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\r\n            if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb)\r\n                return false;\r\n            return true;\r\n        },\r\n        intersectsPlane: function (plane) {\r\n            this.rotation.extractBasis(xAxis, yAxis, zAxis);\r\n            const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\r\n            const d = plane.normal.dot(this.center) - plane.constant;\r\n            return Math.abs(d) <= r;\r\n        },\r\n        intersectRay: function (ray, result) {\r\n            this.getSize(size);\r\n            aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\r\n            matrix4FromRotationMatrix(matrix, this.rotation);\r\n            matrix.setPosition(this.center);\r\n            localRay.copy(ray).applyMatrix4(inverse.getInverse(matrix));\r\n            if (localRay.intersectBox(aabb, result)) {\r\n                return result.applyMatrix4(matrix);\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        intersectsRay: function (ray) {\r\n            return this.intersectRay(ray, v1) !== null;\r\n        },\r\n        fromBox3: function (box3) {\r\n            box3.getCenter(this.center);\r\n            box3.getSize(this.halfSize).multiplyScalar(0.5);\r\n            this.rotation.identity();\r\n            return this;\r\n        },\r\n        equals: function (obb) {\r\n            return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\r\n        },\r\n        applyMatrix4: function (matrix) {\r\n            var e = matrix.elements;\r\n            var sx = v1.set(e[0], e[1], e[2]).length();\r\n            var sy = v1.set(e[4], e[5], e[6]).length();\r\n            var sz = v1.set(e[8], e[9], e[10]).length();\r\n            var det = matrix.determinant();\r\n            if (det < 0)\r\n                sx = -sx;\r\n            rotationMatrix.setFromMatrix4(matrix);\r\n            var invSX = 1 / sx;\r\n            var invSY = 1 / sy;\r\n            var invSZ = 1 / sz;\r\n            rotationMatrix.elements[0] *= invSX;\r\n            rotationMatrix.elements[1] *= invSX;\r\n            rotationMatrix.elements[2] *= invSX;\r\n            rotationMatrix.elements[3] *= invSY;\r\n            rotationMatrix.elements[4] *= invSY;\r\n            rotationMatrix.elements[5] *= invSY;\r\n            rotationMatrix.elements[6] *= invSZ;\r\n            rotationMatrix.elements[7] *= invSZ;\r\n            rotationMatrix.elements[8] *= invSZ;\r\n            this.rotation.multiply(rotationMatrix);\r\n            this.halfSize.x *= sx;\r\n            this.halfSize.y *= sy;\r\n            this.halfSize.z *= sz;\r\n            v1.setFromMatrixPosition(matrix);\r\n            this.center.add(v1);\r\n            return this;\r\n        }\r\n    });\r\n    function matrix4FromRotationMatrix(matrix4, matrix3) {\r\n        var e = matrix4.elements;\r\n        var me = matrix3.elements;\r\n        e[0] = me[0];\r\n        e[1] = me[1];\r\n        e[2] = me[2];\r\n        e[3] = 0;\r\n        e[4] = me[3];\r\n        e[5] = me[4];\r\n        e[6] = me[5];\r\n        e[7] = 0;\r\n        e[8] = me[6];\r\n        e[9] = me[7];\r\n        e[10] = me[8];\r\n        e[11] = 0;\r\n        e[12] = 0;\r\n        e[13] = 0;\r\n        e[14] = 0;\r\n        e[15] = 1;\r\n    }\r\n    var obb = new OBB();\r\n\r\n    \r\n    return threex.math.OBB = OBB;\r\n});"]}