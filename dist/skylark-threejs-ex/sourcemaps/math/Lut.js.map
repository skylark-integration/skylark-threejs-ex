{"version":3,"sources":["math/Lut.js"],"names":["define","THREE","Lut","colormap","numberofcolors","this","lut","setColorMap","prototype","constructor","map","n","minV","maxV","set","value","copy","setMin","min","setMax","max","ColorMapKeywords","rainbow","step","length","i","j","minColor","Color","maxColor","color","lerp","push","getColor","alpha","colorPosition","Math","round","addColorMap","colormapName","arrayOfColors","createCanvas","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","r","g","b","putImageData","cooltowarm","blackbody","grayscale"],"mappings":"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","file":"../../math/Lut.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author daron1337 / http://daron1337.github.io/\n\t */\n\n\tTHREE.Lut = function ( colormap, numberofcolors ) {\n\n\t\tthis.lut = [];\n\t\tthis.setColorMap( colormap, numberofcolors );\n\t\treturn this;\n\n\t};\n\n\tTHREE.Lut.prototype = {\n\n\t\tconstructor: THREE.Lut,\n\n\t\tlut: [], map: [], n: 256, minV: 0, maxV: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value instanceof THREE.Lut ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMin: function ( min ) {\n\n\t\t\tthis.minV = min;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMax: function ( max ) {\n\n\t\t\tthis.maxV = max;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorMap: function ( colormap, numberofcolors ) {\n\n\t\t\tthis.map = THREE.ColorMapKeywords[ colormap ] || THREE.ColorMapKeywords.rainbow;\n\t\t\tthis.n = numberofcolors || 32;\n\n\t\t\tvar step = 1.0 / this.n;\n\n\t\t\tthis.lut.length = 0;\n\t\t\tfor ( var i = 0; i <= 1; i += step ) {\n\n\t\t\t\tfor ( var j = 0; j < this.map.length - 1; j ++ ) {\n\n\t\t\t\t\tif ( i >= this.map[ j ][ 0 ] && i < this.map[ j + 1 ][ 0 ] ) {\n\n\t\t\t\t\t\tvar min = this.map[ j ][ 0 ];\n\t\t\t\t\t\tvar max = this.map[ j + 1 ][ 0 ];\n\n\t\t\t\t\t\tvar minColor = new THREE.Color( this.map[ j ][ 1 ] );\n\t\t\t\t\t\tvar maxColor = new THREE.Color( this.map[ j + 1 ][ 1 ] );\n\n\t\t\t\t\t\tvar color = minColor.lerp( maxColor, ( i - min ) / ( max - min ) );\n\n\t\t\t\t\t\tthis.lut.push( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( lut ) {\n\n\t\t\tthis.lut = lut.lut;\n\t\t\tthis.map = lut.map;\n\t\t\tthis.n = lut.n;\n\t\t\tthis.minV = lut.minV;\n\t\t\tthis.maxV = lut.maxV;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetColor: function ( alpha ) {\n\n\t\t\tif ( alpha <= this.minV ) {\n\n\t\t\t\talpha = this.minV;\n\n\t\t\t} else if ( alpha >= this.maxV ) {\n\n\t\t\t\talpha = this.maxV;\n\n\t\t\t}\n\n\t\t\talpha = ( alpha - this.minV ) / ( this.maxV - this.minV );\n\n\t\t\tvar colorPosition = Math.round( alpha * this.n );\n\t\t\tcolorPosition == this.n ? colorPosition -= 1 : colorPosition;\n\n\t\t\treturn this.lut[ colorPosition ];\n\n\t\t},\n\n\t\taddColorMap: function ( colormapName, arrayOfColors ) {\n\n\t\t\tTHREE.ColorMapKeywords[ colormapName ] = arrayOfColors;\n\n\t\t},\n\n\t\tcreateCanvas: function () {\n\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = 1;\n\t\t\tcanvas.height = this.n;\n\n\t\t\tthis.updateCanvas( canvas );\n\n\t\t\treturn canvas;\n\n\t\t},\n\n\t\tupdateCanvas: function ( canvas ) {\n\n\t\t\tvar ctx = canvas.getContext( '2d', { alpha: false } );\n\n\t\t\tvar imageData = ctx.getImageData( 0, 0, 1, this.n );\n\n\t\t\tvar data = imageData.data;\n\n\t\t\tvar k = 0;\n\n\t\t\tvar step = 1.0 / this.n;\n\n\t\t\tfor ( var i = 1; i >= 0; i -= step ) {\n\n\t\t\t\tfor ( var j = this.map.length - 1; j >= 0; j -- ) {\n\n\t\t\t\t\tif ( i < this.map[ j ][ 0 ] && i >= this.map[ j - 1 ][ 0 ] ) {\n\n\t\t\t\t\t\tvar min = this.map[ j - 1 ][ 0 ];\n\t\t\t\t\t\tvar max = this.map[ j ][ 0 ];\n\n\t\t\t\t\t\tvar minColor = new THREE.Color( this.map[ j - 1 ][ 1 ] );\n\t\t\t\t\t\tvar maxColor = new THREE.Color( this.map[ j ][ 1 ] );\n\n\t\t\t\t\t\tvar color = minColor.lerp( maxColor, ( i - min ) / ( max - min ) );\n\n\t\t\t\t\t\tdata[ k * 4 ] = Math.round( color.r * 255 );\n\t\t\t\t\t\tdata[ k * 4 + 1 ] = Math.round( color.g * 255 );\n\t\t\t\t\t\tdata[ k * 4 + 2 ] = Math.round( color.b * 255 );\n\t\t\t\t\t\tdata[ k * 4 + 3 ] = 255;\n\n\t\t\t\t\t\tk += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tctx.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t}\n\t};\n\n\tTHREE.ColorMapKeywords = {\n\n\t\t\"rainbow\": [[ 0.0, 0x0000FF ], [ 0.2, 0x00FFFF ], [ 0.5, 0x00FF00 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFF0000 ]],\n\t\t\"cooltowarm\": [[ 0.0, 0x3C4EC2 ], [ 0.2, 0x9BBCFF ], [ 0.5, 0xDCDCDC ], [ 0.8, 0xF6A385 ], [ 1.0, 0xB40426 ]],\n\t\t\"blackbody\": [[ 0.0, 0x000000 ], [ 0.2, 0x780000 ], [ 0.5, 0xE63200 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFFFFFF ]],\n\t\t\"grayscale\": [[ 0.0, 0x000000 ], [ 0.2, 0x404040 ], [ 0.5, 0x7F7F80 ], [ 0.8, 0xBFBFBF ], [ 1.0, 0xFFFFFF ]]\n\n\t};\n\t\n\treturn THREE.Lut;\n});\n"]}