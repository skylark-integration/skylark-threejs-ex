{"version":3,"sources":["math/Lut.js"],"names":["define","THREE","threex","Lut","colormap","numberofcolors","this","lut","setColorMap","prototype","constructor","map","n","minV","maxV","set","value","copy","setMin","min","setMax","max","ColorMapKeywords","rainbow","step","length","i","j","minColor","Color","maxColor","color","lerp","push","getColor","alpha","colorPosition","Math","round","addColorMap","colormapName","arrayOfColors","createCanvas","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","r","g","b","putImageData","cooltowarm","blackbody","grayscale","math"],"mappings":"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","file":"../../math/Lut.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var Lut = function (colormap, numberofcolors) {\r\n        this.lut = [];\r\n        this.setColorMap(colormap, numberofcolors);\r\n        return this;\r\n    };\r\n    Lut.prototype = {\r\n        constructor: Lut,\r\n        lut: [],\r\n        map: [],\r\n        n: 256,\r\n        minV: 0,\r\n        maxV: 1,\r\n        set: function (value) {\r\n            if (value instanceof Lut) {\r\n                this.copy(value);\r\n            }\r\n            return this;\r\n        },\r\n        setMin: function (min) {\r\n            this.minV = min;\r\n            return this;\r\n        },\r\n        setMax: function (max) {\r\n            this.maxV = max;\r\n            return this;\r\n        },\r\n        setColorMap: function (colormap, numberofcolors) {\r\n            this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\r\n            this.n = numberofcolors || 32;\r\n            var step = 1 / this.n;\r\n            this.lut.length = 0;\r\n            for (var i = 0; i <= 1; i += step) {\r\n                for (var j = 0; j < this.map.length - 1; j++) {\r\n                    if (i >= this.map[j][0] && i < this.map[j + 1][0]) {\r\n                        var min = this.map[j][0];\r\n                        var max = this.map[j + 1][0];\r\n                        var minColor = new THREE.Color(this.map[j][1]);\r\n                        var maxColor = new THREE.Color(this.map[j + 1][1]);\r\n                        var color = minColor.lerp(maxColor, (i - min) / (max - min));\r\n                        this.lut.push(color);\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        copy: function (lut) {\r\n            this.lut = lut.lut;\r\n            this.map = lut.map;\r\n            this.n = lut.n;\r\n            this.minV = lut.minV;\r\n            this.maxV = lut.maxV;\r\n            return this;\r\n        },\r\n        getColor: function (alpha) {\r\n            if (alpha <= this.minV) {\r\n                alpha = this.minV;\r\n            } else if (alpha >= this.maxV) {\r\n                alpha = this.maxV;\r\n            }\r\n            alpha = (alpha - this.minV) / (this.maxV - this.minV);\r\n            var colorPosition = Math.round(alpha * this.n);\r\n            colorPosition == this.n ? colorPosition -= 1 : colorPosition;\r\n            return this.lut[colorPosition];\r\n        },\r\n        addColorMap: function (colormapName, arrayOfColors) {\r\n            ColorMapKeywords[colormapName] = arrayOfColors;\r\n        },\r\n        createCanvas: function () {\r\n            var canvas = document.createElement('canvas');\r\n            canvas.width = 1;\r\n            canvas.height = this.n;\r\n            this.updateCanvas(canvas);\r\n            return canvas;\r\n        },\r\n        updateCanvas: function (canvas) {\r\n            var ctx = canvas.getContext('2d', { alpha: false });\r\n            var imageData = ctx.getImageData(0, 0, 1, this.n);\r\n            var data = imageData.data;\r\n            var k = 0;\r\n            var step = 1 / this.n;\r\n            for (var i = 1; i >= 0; i -= step) {\r\n                for (var j = this.map.length - 1; j >= 0; j--) {\r\n                    if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\r\n                        var min = this.map[j - 1][0];\r\n                        var max = this.map[j][0];\r\n                        var minColor = new THREE.Color(this.map[j - 1][1]);\r\n                        var maxColor = new THREE.Color(this.map[j][1]);\r\n                        var color = minColor.lerp(maxColor, (i - min) / (max - min));\r\n                        data[k * 4] = Math.round(color.r * 255);\r\n                        data[k * 4 + 1] = Math.round(color.g * 255);\r\n                        data[k * 4 + 2] = Math.round(color.b * 255);\r\n                        data[k * 4 + 3] = 255;\r\n                        k += 1;\r\n                    }\r\n                }\r\n            }\r\n            ctx.putImageData(imageData, 0, 0);\r\n            return canvas;\r\n        }\r\n    };\r\n    var ColorMapKeywords = {\r\n        'rainbow': [\r\n            [\r\n                0,\r\n                255\r\n            ],\r\n            [\r\n                0.2,\r\n                65535\r\n            ],\r\n            [\r\n                0.5,\r\n                65280\r\n            ],\r\n            [\r\n                0.8,\r\n                16776960\r\n            ],\r\n            [\r\n                1,\r\n                16711680\r\n            ]\r\n        ],\r\n        'cooltowarm': [\r\n            [\r\n                0,\r\n                3952322\r\n            ],\r\n            [\r\n                0.2,\r\n                10206463\r\n            ],\r\n            [\r\n                0.5,\r\n                14474460\r\n            ],\r\n            [\r\n                0.8,\r\n                16163717\r\n            ],\r\n            [\r\n                1,\r\n                11797542\r\n            ]\r\n        ],\r\n        'blackbody': [\r\n            [\r\n                0,\r\n                0\r\n            ],\r\n            [\r\n                0.2,\r\n                7864320\r\n            ],\r\n            [\r\n                0.5,\r\n                15086080\r\n            ],\r\n            [\r\n                0.8,\r\n                16776960\r\n            ],\r\n            [\r\n                1,\r\n                16777215\r\n            ]\r\n        ],\r\n        'grayscale': [\r\n            [\r\n                0,\r\n                0\r\n            ],\r\n            [\r\n                0.2,\r\n                4210752\r\n            ],\r\n            [\r\n                0.5,\r\n                8355712\r\n            ],\r\n            [\r\n                0.8,\r\n                12566463\r\n            ],\r\n            [\r\n                1,\r\n                16777215\r\n            ]\r\n        ]\r\n    };\r\n    \r\n    return threex.math.Lut = Lut;\r\n});"]}