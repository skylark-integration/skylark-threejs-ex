{"version":3,"sources":["math/ConvexHull.js"],"names":["define","THREE","threex","ConvexHull","line3","plane","closestPoint","triangle","Visible","v1","Vector3","this","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","Face","normal","midpoint","area","constant","outside","mark","edge","HalfEdge","vertex","face","prev","next","twin","VertexNode","point","head","tail","Object","assign","prototype","setFromPoints","points","Array","isArray","console","error","length","makeEmpty","i","l","push","compute","setFromObject","object","updateMatrixWorld","traverse","node","geometry","undefined","isGeometry","clone","applyMatrix4","matrixWorld","isBufferGeometry","attribute","attributes","position","count","fromBufferAttribute","containsPoint","distanceToPoint","intersectRay","ray","target","tNear","Infinity","tFar","vN","origin","vD","dot","direction","t","Math","min","max","at","intersectsRay","addVertexToFace","append","insertBefore","removeVertexFromFace","remove","removeAllVerticesFromFace","start","end","removeSubList","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","distance","computeExtremes","j","minVertices","maxVertices","copy","getComponent","setComponent","Number","EPSILON","abs","x","y","z","computeInitialHull","Line3","Plane","v0","v2","v3","extremes","index","set","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","create","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","twinEdge","oppositeFace","addAdjoiningFace","horizonEdge","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","clear","cleanup","a","b","c","e0","e1","e2","Triangle","getNormal","getMidpoint","getArea","distanceTo","lengthSquared","last","insertAfter","math"],"mappings":"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","file":"../../math/ConvexHull.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var ConvexHull = function () {\r\n        var Visible = 0;\r\n        var Deleted = 1;\r\n        var v1 = new THREE.Vector3();\r\n        function ConvexHull() {\r\n            this.tolerance = -1;\r\n            this.faces = [];\r\n            this.newFaces = [];\r\n            this.assigned = new VertexList();\r\n            this.unassigned = new VertexList();\r\n            this.vertices = [];\r\n        }\r\n        Object.assign(ConvexHull.prototype, {\r\n            setFromPoints: function (points) {\r\n                if (Array.isArray(points) !== true) {\r\n                    console.error('THREE.ConvexHull: Points parameter is not an array.');\r\n                }\r\n                if (points.length < 4) {\r\n                    console.error('THREE.ConvexHull: The algorithm needs at least four points.');\r\n                }\r\n                this.makeEmpty();\r\n                for (var i = 0, l = points.length; i < l; i++) {\r\n                    this.vertices.push(new VertexNode(points[i]));\r\n                }\r\n                this.compute();\r\n                return this;\r\n            },\r\n            setFromObject: function (object) {\r\n                var points = [];\r\n                object.updateMatrixWorld(true);\r\n                object.traverse(function (node) {\r\n                    var i, l, point;\r\n                    var geometry = node.geometry;\r\n                    if (geometry !== undefined) {\r\n                        if (geometry.isGeometry) {\r\n                            var vertices = geometry.vertices;\r\n                            for (i = 0, l = vertices.length; i < l; i++) {\r\n                                point = vertices[i].clone();\r\n                                point.applyMatrix4(node.matrixWorld);\r\n                                points.push(point);\r\n                            }\r\n                        } else if (geometry.isBufferGeometry) {\r\n                            var attribute = geometry.attributes.position;\r\n                            if (attribute !== undefined) {\r\n                                for (i = 0, l = attribute.count; i < l; i++) {\r\n                                    point = new THREE.Vector3();\r\n                                    point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\r\n                                    points.push(point);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                return this.setFromPoints(points);\r\n            },\r\n            containsPoint: function (point) {\r\n                var faces = this.faces;\r\n                for (var i = 0, l = faces.length; i < l; i++) {\r\n                    var face = faces[i];\r\n                    if (face.distanceToPoint(point) > this.tolerance)\r\n                        return false;\r\n                }\r\n                return true;\r\n            },\r\n            intersectRay: function (ray, target) {\r\n                var faces = this.faces;\r\n                var tNear = -Infinity;\r\n                var tFar = Infinity;\r\n                for (var i = 0, l = faces.length; i < l; i++) {\r\n                    var face = faces[i];\r\n                    var vN = face.distanceToPoint(ray.origin);\r\n                    var vD = face.normal.dot(ray.direction);\r\n                    if (vN > 0 && vD >= 0)\r\n                        return null;\r\n                    var t = vD !== 0 ? -vN / vD : 0;\r\n                    if (t <= 0)\r\n                        continue;\r\n                    if (vD > 0) {\r\n                        tFar = Math.min(t, tFar);\r\n                    } else {\r\n                        tNear = Math.max(t, tNear);\r\n                    }\r\n                    if (tNear > tFar) {\r\n                        return null;\r\n                    }\r\n                }\r\n                if (tNear !== -Infinity) {\r\n                    ray.at(tNear, target);\r\n                } else {\r\n                    ray.at(tFar, target);\r\n                }\r\n                return target;\r\n            },\r\n            intersectsRay: function (ray) {\r\n                return this.intersectRay(ray, v1) !== null;\r\n            },\r\n            makeEmpty: function () {\r\n                this.faces = [];\r\n                this.vertices = [];\r\n                return this;\r\n            },\r\n            addVertexToFace: function (vertex, face) {\r\n                vertex.face = face;\r\n                if (face.outside === null) {\r\n                    this.assigned.append(vertex);\r\n                } else {\r\n                    this.assigned.insertBefore(face.outside, vertex);\r\n                }\r\n                face.outside = vertex;\r\n                return this;\r\n            },\r\n            removeVertexFromFace: function (vertex, face) {\r\n                if (vertex === face.outside) {\r\n                    if (vertex.next !== null && vertex.next.face === face) {\r\n                        face.outside = vertex.next;\r\n                    } else {\r\n                        face.outside = null;\r\n                    }\r\n                }\r\n                this.assigned.remove(vertex);\r\n                return this;\r\n            },\r\n            removeAllVerticesFromFace: function (face) {\r\n                if (face.outside !== null) {\r\n                    var start = face.outside;\r\n                    var end = face.outside;\r\n                    while (end.next !== null && end.next.face === face) {\r\n                        end = end.next;\r\n                    }\r\n                    this.assigned.removeSubList(start, end);\r\n                    start.prev = end.next = null;\r\n                    face.outside = null;\r\n                    return start;\r\n                }\r\n            },\r\n            deleteFaceVertices: function (face, absorbingFace) {\r\n                var faceVertices = this.removeAllVerticesFromFace(face);\r\n                if (faceVertices !== undefined) {\r\n                    if (absorbingFace === undefined) {\r\n                        this.unassigned.appendChain(faceVertices);\r\n                    } else {\r\n                        var vertex = faceVertices;\r\n                        do {\r\n                            var nextVertex = vertex.next;\r\n                            var distance = absorbingFace.distanceToPoint(vertex.point);\r\n                            if (distance > this.tolerance) {\r\n                                this.addVertexToFace(vertex, absorbingFace);\r\n                            } else {\r\n                                this.unassigned.append(vertex);\r\n                            }\r\n                            vertex = nextVertex;\r\n                        } while (vertex !== null);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            resolveUnassignedPoints: function (newFaces) {\r\n                if (this.unassigned.isEmpty() === false) {\r\n                    var vertex = this.unassigned.first();\r\n                    do {\r\n                        var nextVertex = vertex.next;\r\n                        var maxDistance = this.tolerance;\r\n                        var maxFace = null;\r\n                        for (var i = 0; i < newFaces.length; i++) {\r\n                            var face = newFaces[i];\r\n                            if (face.mark === Visible) {\r\n                                var distance = face.distanceToPoint(vertex.point);\r\n                                if (distance > maxDistance) {\r\n                                    maxDistance = distance;\r\n                                    maxFace = face;\r\n                                }\r\n                                if (maxDistance > 1000 * this.tolerance)\r\n                                    break;\r\n                            }\r\n                        }\r\n                        if (maxFace !== null) {\r\n                            this.addVertexToFace(vertex, maxFace);\r\n                        }\r\n                        vertex = nextVertex;\r\n                    } while (vertex !== null);\r\n                }\r\n                return this;\r\n            },\r\n            computeExtremes: function () {\r\n                var min = new THREE.Vector3();\r\n                var max = new THREE.Vector3();\r\n                var minVertices = [];\r\n                var maxVertices = [];\r\n                var i, l, j;\r\n                for (i = 0; i < 3; i++) {\r\n                    minVertices[i] = maxVertices[i] = this.vertices[0];\r\n                }\r\n                min.copy(this.vertices[0].point);\r\n                max.copy(this.vertices[0].point);\r\n                for (i = 0, l = this.vertices.length; i < l; i++) {\r\n                    var vertex = this.vertices[i];\r\n                    var point = vertex.point;\r\n                    for (j = 0; j < 3; j++) {\r\n                        if (point.getComponent(j) < min.getComponent(j)) {\r\n                            min.setComponent(j, point.getComponent(j));\r\n                            minVertices[j] = vertex;\r\n                        }\r\n                    }\r\n                    for (j = 0; j < 3; j++) {\r\n                        if (point.getComponent(j) > max.getComponent(j)) {\r\n                            max.setComponent(j, point.getComponent(j));\r\n                            maxVertices[j] = vertex;\r\n                        }\r\n                    }\r\n                }\r\n                this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\r\n                return {\r\n                    min: minVertices,\r\n                    max: maxVertices\r\n                };\r\n            },\r\n            computeInitialHull: function () {\r\n                var line3, plane, closestPoint;\r\n                return function computeInitialHull() {\r\n                    if (line3 === undefined) {\r\n                        line3 = new THREE.Line3();\r\n                        plane = new THREE.Plane();\r\n                        closestPoint = new THREE.Vector3();\r\n                    }\r\n                    var vertex, vertices = this.vertices;\r\n                    var extremes = this.computeExtremes();\r\n                    var min = extremes.min;\r\n                    var max = extremes.max;\r\n                    var v0, v1, v2, v3;\r\n                    var i, l, j;\r\n                    var distance, maxDistance = 0;\r\n                    var index = 0;\r\n                    for (i = 0; i < 3; i++) {\r\n                        distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\r\n                        if (distance > maxDistance) {\r\n                            maxDistance = distance;\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    v0 = min[index];\r\n                    v1 = max[index];\r\n                    maxDistance = 0;\r\n                    line3.set(v0.point, v1.point);\r\n                    for (i = 0, l = this.vertices.length; i < l; i++) {\r\n                        vertex = vertices[i];\r\n                        if (vertex !== v0 && vertex !== v1) {\r\n                            line3.closestPointToPoint(vertex.point, true, closestPoint);\r\n                            distance = closestPoint.distanceToSquared(vertex.point);\r\n                            if (distance > maxDistance) {\r\n                                maxDistance = distance;\r\n                                v2 = vertex;\r\n                            }\r\n                        }\r\n                    }\r\n                    maxDistance = -1;\r\n                    plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\r\n                    for (i = 0, l = this.vertices.length; i < l; i++) {\r\n                        vertex = vertices[i];\r\n                        if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\r\n                            distance = Math.abs(plane.distanceToPoint(vertex.point));\r\n                            if (distance > maxDistance) {\r\n                                maxDistance = distance;\r\n                                v3 = vertex;\r\n                            }\r\n                        }\r\n                    }\r\n                    var faces = [];\r\n                    if (plane.distanceToPoint(v3.point) < 0) {\r\n                        faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2));\r\n                        for (i = 0; i < 3; i++) {\r\n                            j = (i + 1) % 3;\r\n                            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\r\n                            faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\r\n                        }\r\n                    } else {\r\n                        faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0));\r\n                        for (i = 0; i < 3; i++) {\r\n                            j = (i + 1) % 3;\r\n                            faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\r\n                            faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\r\n                        }\r\n                    }\r\n                    for (i = 0; i < 4; i++) {\r\n                        this.faces.push(faces[i]);\r\n                    }\r\n                    for (i = 0, l = vertices.length; i < l; i++) {\r\n                        vertex = vertices[i];\r\n                        if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\r\n                            maxDistance = this.tolerance;\r\n                            var maxFace = null;\r\n                            for (j = 0; j < 4; j++) {\r\n                                distance = this.faces[j].distanceToPoint(vertex.point);\r\n                                if (distance > maxDistance) {\r\n                                    maxDistance = distance;\r\n                                    maxFace = this.faces[j];\r\n                                }\r\n                            }\r\n                            if (maxFace !== null) {\r\n                                this.addVertexToFace(vertex, maxFace);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                };\r\n            }(),\r\n            reindexFaces: function () {\r\n                var activeFaces = [];\r\n                for (var i = 0; i < this.faces.length; i++) {\r\n                    var face = this.faces[i];\r\n                    if (face.mark === Visible) {\r\n                        activeFaces.push(face);\r\n                    }\r\n                }\r\n                this.faces = activeFaces;\r\n                return this;\r\n            },\r\n            nextVertexToAdd: function () {\r\n                if (this.assigned.isEmpty() === false) {\r\n                    var eyeVertex, maxDistance = 0;\r\n                    var eyeFace = this.assigned.first().face;\r\n                    var vertex = eyeFace.outside;\r\n                    do {\r\n                        var distance = eyeFace.distanceToPoint(vertex.point);\r\n                        if (distance > maxDistance) {\r\n                            maxDistance = distance;\r\n                            eyeVertex = vertex;\r\n                        }\r\n                        vertex = vertex.next;\r\n                    } while (vertex !== null && vertex.face === eyeFace);\r\n                    return eyeVertex;\r\n                }\r\n            },\r\n            computeHorizon: function (eyePoint, crossEdge, face, horizon) {\r\n                this.deleteFaceVertices(face);\r\n                face.mark = Deleted;\r\n                var edge;\r\n                if (crossEdge === null) {\r\n                    edge = crossEdge = face.getEdge(0);\r\n                } else {\r\n                    edge = crossEdge.next;\r\n                }\r\n                do {\r\n                    var twinEdge = edge.twin;\r\n                    var oppositeFace = twinEdge.face;\r\n                    if (oppositeFace.mark === Visible) {\r\n                        if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\r\n                            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\r\n                        } else {\r\n                            horizon.push(edge);\r\n                        }\r\n                    }\r\n                    edge = edge.next;\r\n                } while (edge !== crossEdge);\r\n                return this;\r\n            },\r\n            addAdjoiningFace: function (eyeVertex, horizonEdge) {\r\n                var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\r\n                this.faces.push(face);\r\n                face.getEdge(-1).setTwin(horizonEdge.twin);\r\n                return face.getEdge(0);\r\n            },\r\n            addNewFaces: function (eyeVertex, horizon) {\r\n                this.newFaces = [];\r\n                var firstSideEdge = null;\r\n                var previousSideEdge = null;\r\n                for (var i = 0; i < horizon.length; i++) {\r\n                    var horizonEdge = horizon[i];\r\n                    var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\r\n                    if (firstSideEdge === null) {\r\n                        firstSideEdge = sideEdge;\r\n                    } else {\r\n                        sideEdge.next.setTwin(previousSideEdge);\r\n                    }\r\n                    this.newFaces.push(sideEdge.face);\r\n                    previousSideEdge = sideEdge;\r\n                }\r\n                firstSideEdge.next.setTwin(previousSideEdge);\r\n                return this;\r\n            },\r\n            addVertexToHull: function (eyeVertex) {\r\n                var horizon = [];\r\n                this.unassigned.clear();\r\n                this.removeVertexFromFace(eyeVertex, eyeVertex.face);\r\n                this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\r\n                this.addNewFaces(eyeVertex, horizon);\r\n                this.resolveUnassignedPoints(this.newFaces);\r\n                return this;\r\n            },\r\n            cleanup: function () {\r\n                this.assigned.clear();\r\n                this.unassigned.clear();\r\n                this.newFaces = [];\r\n                return this;\r\n            },\r\n            compute: function () {\r\n                var vertex;\r\n                this.computeInitialHull();\r\n                while ((vertex = this.nextVertexToAdd()) !== undefined) {\r\n                    this.addVertexToHull(vertex);\r\n                }\r\n                this.reindexFaces();\r\n                this.cleanup();\r\n                return this;\r\n            }\r\n        });\r\n        function Face() {\r\n            this.normal = new THREE.Vector3();\r\n            this.midpoint = new THREE.Vector3();\r\n            this.area = 0;\r\n            this.constant = 0;\r\n            this.outside = null;\r\n            this.mark = Visible;\r\n            this.edge = null;\r\n        }\r\n        Object.assign(Face, {\r\n            create: function (a, b, c) {\r\n                var face = new Face();\r\n                var e0 = new HalfEdge(a, face);\r\n                var e1 = new HalfEdge(b, face);\r\n                var e2 = new HalfEdge(c, face);\r\n                e0.next = e2.prev = e1;\r\n                e1.next = e0.prev = e2;\r\n                e2.next = e1.prev = e0;\r\n                face.edge = e0;\r\n                return face.compute();\r\n            }\r\n        });\r\n        Object.assign(Face.prototype, {\r\n            getEdge: function (i) {\r\n                var edge = this.edge;\r\n                while (i > 0) {\r\n                    edge = edge.next;\r\n                    i--;\r\n                }\r\n                while (i < 0) {\r\n                    edge = edge.prev;\r\n                    i++;\r\n                }\r\n                return edge;\r\n            },\r\n            compute: function () {\r\n                var triangle;\r\n                return function compute() {\r\n                    if (triangle === undefined)\r\n                        triangle = new THREE.Triangle();\r\n                    var a = this.edge.tail();\r\n                    var b = this.edge.head();\r\n                    var c = this.edge.next.head();\r\n                    triangle.set(a.point, b.point, c.point);\r\n                    triangle.getNormal(this.normal);\r\n                    triangle.getMidpoint(this.midpoint);\r\n                    this.area = triangle.getArea();\r\n                    this.constant = this.normal.dot(this.midpoint);\r\n                    return this;\r\n                };\r\n            }(),\r\n            distanceToPoint: function (point) {\r\n                return this.normal.dot(point) - this.constant;\r\n            }\r\n        });\r\n        function HalfEdge(vertex, face) {\r\n            this.vertex = vertex;\r\n            this.prev = null;\r\n            this.next = null;\r\n            this.twin = null;\r\n            this.face = face;\r\n        }\r\n        Object.assign(HalfEdge.prototype, {\r\n            head: function () {\r\n                return this.vertex;\r\n            },\r\n            tail: function () {\r\n                return this.prev ? this.prev.vertex : null;\r\n            },\r\n            length: function () {\r\n                var head = this.head();\r\n                var tail = this.tail();\r\n                if (tail !== null) {\r\n                    return tail.point.distanceTo(head.point);\r\n                }\r\n                return -1;\r\n            },\r\n            lengthSquared: function () {\r\n                var head = this.head();\r\n                var tail = this.tail();\r\n                if (tail !== null) {\r\n                    return tail.point.distanceToSquared(head.point);\r\n                }\r\n                return -1;\r\n            },\r\n            setTwin: function (edge) {\r\n                this.twin = edge;\r\n                edge.twin = this;\r\n                return this;\r\n            }\r\n        });\r\n        function VertexNode(point) {\r\n            this.point = point;\r\n            this.prev = null;\r\n            this.next = null;\r\n            this.face = null;\r\n        }\r\n        function VertexList() {\r\n            this.head = null;\r\n            this.tail = null;\r\n        }\r\n        Object.assign(VertexList.prototype, {\r\n            first: function () {\r\n                return this.head;\r\n            },\r\n            last: function () {\r\n                return this.tail;\r\n            },\r\n            clear: function () {\r\n                this.head = this.tail = null;\r\n                return this;\r\n            },\r\n            insertBefore: function (target, vertex) {\r\n                vertex.prev = target.prev;\r\n                vertex.next = target;\r\n                if (vertex.prev === null) {\r\n                    this.head = vertex;\r\n                } else {\r\n                    vertex.prev.next = vertex;\r\n                }\r\n                target.prev = vertex;\r\n                return this;\r\n            },\r\n            insertAfter: function (target, vertex) {\r\n                vertex.prev = target;\r\n                vertex.next = target.next;\r\n                if (vertex.next === null) {\r\n                    this.tail = vertex;\r\n                } else {\r\n                    vertex.next.prev = vertex;\r\n                }\r\n                target.next = vertex;\r\n                return this;\r\n            },\r\n            append: function (vertex) {\r\n                if (this.head === null) {\r\n                    this.head = vertex;\r\n                } else {\r\n                    this.tail.next = vertex;\r\n                }\r\n                vertex.prev = this.tail;\r\n                vertex.next = null;\r\n                this.tail = vertex;\r\n                return this;\r\n            },\r\n            appendChain: function (vertex) {\r\n                if (this.head === null) {\r\n                    this.head = vertex;\r\n                } else {\r\n                    this.tail.next = vertex;\r\n                }\r\n                vertex.prev = this.tail;\r\n                while (vertex.next !== null) {\r\n                    vertex = vertex.next;\r\n                }\r\n                this.tail = vertex;\r\n                return this;\r\n            },\r\n            remove: function (vertex) {\r\n                if (vertex.prev === null) {\r\n                    this.head = vertex.next;\r\n                } else {\r\n                    vertex.prev.next = vertex.next;\r\n                }\r\n                if (vertex.next === null) {\r\n                    this.tail = vertex.prev;\r\n                } else {\r\n                    vertex.next.prev = vertex.prev;\r\n                }\r\n                return this;\r\n            },\r\n            removeSubList: function (a, b) {\r\n                if (a.prev === null) {\r\n                    this.head = b.next;\r\n                } else {\r\n                    a.prev.next = b.next;\r\n                }\r\n                if (b.next === null) {\r\n                    this.tail = a.prev;\r\n                } else {\r\n                    b.next.prev = a.prev;\r\n                }\r\n                return this;\r\n            },\r\n            isEmpty: function () {\r\n                return this.head === null;\r\n            }\r\n        });\r\n        return ConvexHull;\r\n    }();\r\n\r\n    return threex.math.ConvexHull = ConvexHull;\r\n});"]}