{"version":3,"sources":["math/ColorConverter.js"],"names":["define","THREE","threex","hsl","ColorConverter","setHSV","color","h","s","v","MathUtils","euclideanModulo","clamp","setHSL","getHSV","target","undefined","console","warn","l","getHSL","setCMYK","c","m","y","k","r","g","b","setRGB","getCMYK","Math","max","math"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAQYC,EARRC,GACAC,OAAQ,SAAUC,EAAOC,EAAGC,EAAGC,GAI3B,OAHAF,EAAIN,EAAMS,UAAUC,gBAAgBJ,EAAG,GACvCC,EAAIP,EAAMS,UAAUE,MAAMJ,EAAG,EAAG,GAChCC,EAAIR,EAAMS,UAAUE,MAAMH,EAAG,EAAG,GACzBH,EAAMO,OAAON,EAAGC,EAAIC,IAAMF,GAAK,EAAIC,GAAKC,GAAK,EAAIF,EAAI,EAAIA,GAAQ,GAAJA,IAExEO,QACQX,KACG,SAAgBG,EAAOS,GAc1B,YAbeC,IAAXD,IACAE,QAAQC,KAAK,0DACbH,GACIR,EAAG,EACHC,EAAG,EACHW,EAAG,IAGXb,EAAMc,OAAOjB,GACbA,EAAIK,GAAKL,EAAIgB,EAAI,GAAMhB,EAAIgB,EAAI,EAAIhB,EAAIgB,EACvCJ,EAAOR,EAAIJ,EAAII,EACfQ,EAAOP,EAAI,EAAIL,EAAIK,GAAKL,EAAIgB,EAAIhB,EAAIK,GACpCO,EAAON,EAAIN,EAAIgB,EAAIhB,EAAIK,EAChBO,IAGfM,QAAS,SAAUf,EAAOgB,EAAGC,EAAGC,EAAGC,GAC/B,IAAIC,GAAK,EAAIJ,IAAM,EAAIG,GACnBE,GAAK,EAAIJ,IAAM,EAAIE,GACnBG,GAAK,EAAIJ,IAAM,EAAIC,GACvB,OAAOnB,EAAMuB,OAAOH,EAAGC,EAAGC,IAE9BE,QAAS,SAAUxB,EAAOS,QACPC,IAAXD,IACAE,QAAQC,KAAK,2DACbH,GACIO,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,IAGX,IAAIC,EAAIpB,EAAMoB,EACVC,EAAIrB,EAAMqB,EACVC,EAAItB,EAAMsB,EACVH,EAAI,EAAIM,KAAKC,IAAIN,EAAGC,EAAGC,GACvBN,GAAK,EAAII,EAAID,IAAM,EAAIA,GACvBF,GAAK,EAAII,EAAIF,IAAM,EAAIA,GACvBD,GAAK,EAAII,EAAIH,IAAM,EAAIA,GAK3B,OAJAV,EAAOO,EAAIA,EACXP,EAAOQ,EAAIA,EACXR,EAAOS,EAAIA,EACXT,EAAOU,EAAIA,EACJV,IAGf,OAAOb,EAAO+B,KAAK7B,eAAiBA","file":"../../math/ColorConverter.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var ColorConverter = {\r\n        setHSV: function (color, h, s, v) {\r\n            h = THREE.MathUtils.euclideanModulo(h, 1);\r\n            s = THREE.MathUtils.clamp(s, 0, 1);\r\n            v = THREE.MathUtils.clamp(v, 0, 1);\r\n            return color.setHSL(h, s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\r\n        },\r\n        getHSV: function () {\r\n            var hsl = {};\r\n            return function getHSV(color, target) {\r\n                if (target === undefined) {\r\n                    console.warn('THREE.ColorConverter: .getHSV() target is now required');\r\n                    target = {\r\n                        h: 0,\r\n                        s: 0,\r\n                        l: 0\r\n                    };\r\n                }\r\n                color.getHSL(hsl);\r\n                hsl.s *= hsl.l < 0.5 ? hsl.l : 1 - hsl.l;\r\n                target.h = hsl.h;\r\n                target.s = 2 * hsl.s / (hsl.l + hsl.s);\r\n                target.v = hsl.l + hsl.s;\r\n                return target;\r\n            };\r\n        }(),\r\n        setCMYK: function (color, c, m, y, k) {\r\n            var r = (1 - c) * (1 - k);\r\n            var g = (1 - m) * (1 - k);\r\n            var b = (1 - y) * (1 - k);\r\n            return color.setRGB(r, g, b);\r\n        },\r\n        getCMYK: function (color, target) {\r\n            if (target === undefined) {\r\n                console.warn('THREE.ColorConverter: .getCMYK() target is now required');\r\n                target = {\r\n                    c: 0,\r\n                    m: 0,\r\n                    y: 0,\r\n                    k: 0\r\n                };\r\n            }\r\n            var r = color.r;\r\n            var g = color.g;\r\n            var b = color.b;\r\n            var k = 1 - Math.max(r, g, b);\r\n            var c = (1 - r - k) / (1 - k);\r\n            var m = (1 - g - k) / (1 - k);\r\n            var y = (1 - b - k) / (1 - k);\r\n            target.c = c;\r\n            target.m = m;\r\n            target.y = y;\r\n            target.k = k;\r\n            return target;\r\n        }\r\n    };\r\n    return threex.math.ColorConverter = ColorConverter;\r\n});"]}