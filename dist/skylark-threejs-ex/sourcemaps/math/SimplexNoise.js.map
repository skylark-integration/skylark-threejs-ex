{"version":3,"sources":["math/SimplexNoise.js"],"names":["define","THREE","SimplexNoise","r","undefined","Math","this","grad3","grad4","p","i","floor","random","perm","simplex","prototype","dot","g","x","y","dot3","z","dot4","w","noise","xin","yin","i1","j1","s","sqrt","j","G2","t","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4"],"mappings":";;;;;;;AASAA,QACC,mBACC,SAASC,GA8YV,OAzYAA,EAAMC,aAAe,SAAWC,QAErBC,GAALD,IAAiBA,EAAIE,MAC1BC,KAAKC,QAAW,EAAG,EAAG,KAAS,EAAG,EAAG,IAAO,GAAK,EAAG,KAAS,GAAK,EAAG,IAClE,EAAG,EAAG,KAAS,EAAG,EAAG,IAAO,EAAG,GAAK,KAAS,EAAG,GAAK,IACrD,EAAG,EAAG,IAAO,GAAK,EAAG,IAAO,EAAG,GAAK,IAAO,GAAK,GAAK,IAExDD,KAAKE,QAAW,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,GAAK,IAAO,EAAG,GAAK,EAAG,IAAO,EAAG,GAAK,GAAK,IAC1E,GAAK,EAAG,EAAG,IAAO,GAAK,EAAG,GAAK,IAAO,GAAK,GAAK,EAAG,IAAO,GAAK,GAAK,GAAK,IACzE,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,GAAK,IAAO,EAAG,GAAK,EAAG,IAAO,EAAG,GAAK,GAAK,KAC/D,EAAG,EAAG,EAAG,KAAS,EAAG,EAAG,GAAK,KAAS,EAAG,GAAK,EAAG,KAAS,EAAG,GAAK,GAAK,IACzE,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,GAAK,IAAO,GAAK,EAAG,EAAG,IAAO,GAAK,EAAG,GAAK,KAC/D,EAAG,EAAG,EAAG,KAAS,EAAG,EAAG,GAAK,KAAS,GAAK,EAAG,EAAG,KAAS,GAAK,EAAG,GAAK,IACzE,EAAG,EAAG,EAAG,IAAO,EAAG,GAAK,EAAG,IAAO,GAAK,EAAG,EAAG,IAAO,GAAK,GAAK,EAAG,KAC/D,EAAG,EAAG,EAAG,KAAS,EAAG,GAAK,EAAG,KAAS,GAAK,EAAG,EAAG,KAAS,GAAK,GAAK,EAAG,IAEhFF,KAAKG,KACL,IAAM,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAEzBJ,KAAKG,EAAGC,GAAML,KAAKM,MAAoB,IAAbR,EAAES,UAI7BN,KAAKO,QACL,IAAUH,EAAI,EAAGA,EAAI,IAAKA,IAEzBJ,KAAKO,KAAMH,GAAMJ,KAAKG,EAAO,IAAJC,GAM1BJ,KAAKQ,UACF,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IACzH,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,IAAO,EAAG,EAAG,EAAG,KAI7Hb,EAAMC,aAAaa,UAAUC,IAAM,SAAWC,EAAGC,EAAGC,GAEnD,OAAOF,EAAG,GAAMC,EAAID,EAAG,GAAME,GAI9BlB,EAAMC,aAAaa,UAAUK,KAAO,SAAWH,EAAGC,EAAGC,EAAGE,GAEvD,OAAOJ,EAAG,GAAMC,EAAID,EAAG,GAAME,EAAIF,EAAG,GAAMI,GAI3CpB,EAAMC,aAAaa,UAAUO,KAAO,SAAWL,EAAGC,EAAGC,EAAGE,EAAGE,GAE1D,OAAON,EAAG,GAAMC,EAAID,EAAG,GAAME,EAAIF,EAAG,GAAMI,EAAIJ,EAAG,GAAMM,GAIxDtB,EAAMC,aAAaa,UAAUS,MAAQ,SAAWC,EAAKC,GAEpD,IAcIC,EAAIC,EAXJC,GAAMJ,EAAMC,IADP,IAAQrB,KAAKyB,KAAM,GAAQ,IAEhCpB,EAAIL,KAAKM,MAAOc,EAAMI,GACtBE,EAAI1B,KAAKM,MAAOe,EAAMG,GACtBG,GAAO,EAAM3B,KAAKyB,KAAM,IAAU,EAClCG,GAAMvB,EAAIqB,GAAMC,EAGhBE,EAAKT,GAFAf,EAAIuB,GAGTE,EAAKT,GAFAK,EAAIE,GAMRC,EAAKC,GAETR,EAAK,EAAGC,EAAK,IAMbD,EAAK,EAAGC,EAAK,GAMd,IAAIQ,EAAKF,EAAKP,EAAKK,EACfK,EAAKF,EAAKP,EAAKI,EACfM,EAAKJ,EAAK,EAAM,EAAMF,EACtBO,EAAKJ,EAAK,EAAM,EAAMH,EAEtBQ,EAAS,IAAJ9B,EACL+B,EAAS,IAAJV,EACLW,EAAMpC,KAAKO,KAAM2B,EAAKlC,KAAKO,KAAM4B,IAAS,GAC1CE,EAAMrC,KAAKO,KAAM2B,EAAKb,EAAKrB,KAAKO,KAAM4B,EAAKb,IAAS,GACpDgB,EAAMtC,KAAKO,KAAM2B,EAAK,EAAIlC,KAAKO,KAAM4B,EAAK,IAAQ,GAElDI,EAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAQ1BW,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAQ1BU,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAU9B,OAAO,KAzBFM,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKvC,KAAKU,IAAKV,KAAKC,MAAOmC,GAAOR,EAAIC,KAI5CW,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKxC,KAAKU,IAAKV,KAAKC,MAAOoC,GAAOP,EAAIC,KAI5CU,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKzC,KAAKU,IAAKV,KAAKC,MAAOqC,GAAON,EAAIC,MAUlDtC,EAAMC,aAAaa,UAAUiC,QAAU,SAAWvB,EAAKC,EAAKuB,GAE3D,IAiBItB,EAAIC,EAAIsB,EACRC,EAAIC,EAAIC,EAfRxB,GAAMJ,EAAMC,EAAMuB,IADb,EAAM,GAEXvC,EAAIL,KAAKM,MAAOc,EAAMI,GACtBE,EAAI1B,KAAKM,MAAOe,EAAMG,GACtByB,EAAIjD,KAAKM,MAAOsC,EAAMpB,GACtB0B,EAAK,EAAM,EACXtB,GAAMvB,EAAIqB,EAAIuB,GAAMC,EAIpBrB,EAAKT,GAHAf,EAAIuB,GAITE,EAAKT,GAHAK,EAAIE,GAITuB,EAAKP,GAHAK,EAAIrB,GAQRC,GAAMC,EAELA,GAAMqB,GAEV7B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAIlCnB,GAAMsB,GAEjB7B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAM7C1B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAMzClB,EAAKqB,GAET7B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAIlCnB,EAAKsB,GAEhB7B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAM7C1B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAS/C,IAAIjB,EAAKF,EAAKP,EAAK4B,EACflB,EAAKF,EAAKP,EAAK2B,EACfE,EAAKD,EAAKN,EAAKK,EACfjB,EAAKJ,EAAKiB,EAAK,EAAMI,EACrBhB,EAAKJ,EAAKiB,EAAK,EAAMG,EACrBG,EAAKF,EAAKH,EAAK,EAAME,EACrBI,EAAKzB,EAAK,EAAM,GAChB0B,EAAKzB,EAAK,EAAM,GAChB0B,EAAKL,EAAK,EAAM,GAEhBhB,EAAS,IAAJ9B,EACL+B,EAAS,IAAJV,EACL+B,EAAS,IAAJR,EACLZ,EAAMpC,KAAKO,KAAM2B,EAAKlC,KAAKO,KAAM4B,EAAKnC,KAAKO,KAAMiD,KAAW,GAC5DnB,EAAMrC,KAAKO,KAAM2B,EAAKb,EAAKrB,KAAKO,KAAM4B,EAAKb,EAAKtB,KAAKO,KAAMiD,EAAKZ,KAAW,GAC3EN,EAAMtC,KAAKO,KAAM2B,EAAKW,EAAK7C,KAAKO,KAAM4B,EAAKW,EAAK9C,KAAKO,KAAMiD,EAAKT,KAAW,GAC3EU,EAAMzD,KAAKO,KAAM2B,EAAK,EAAIlC,KAAKO,KAAM4B,EAAK,EAAInC,KAAKO,KAAMiD,EAAK,KAAU,GAExEjB,EAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAAKqB,EAAKA,EAQpCV,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKoB,EAAKA,EAQpCV,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAQpCM,EAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAUxC,OAAO,KAjCFhB,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKvC,KAAKc,KAAMd,KAAKC,MAAOmC,GAAOR,EAAIC,EAAIqB,KAIjDV,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKxC,KAAKc,KAAMd,KAAKC,MAAOoC,GAAOP,EAAIC,EAAIoB,KAIjDV,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKzC,KAAKc,KAAMd,KAAKC,MAAOqC,GAAON,EAAIC,EAAImB,KAIjDM,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAK1D,KAAKc,KAAMd,KAAKC,MAAOwD,GAAOJ,EAAIC,EAAIC,MAUvD5D,EAAMC,aAAaa,UAAUkD,QAAU,SAAW/C,EAAGC,EAAGE,EAAGE,GAG1D,IAuCII,EAAIC,EAAIsB,EAAIgB,EACZf,EAAIC,EAAIC,EAAIc,EACZC,EAAIC,EAAIC,EAAIC,EAzCZ/D,EAAQF,KAAKE,MACbM,EAAUR,KAAKQ,QACfD,EAAOP,KAAKO,KAGZ2D,GAAOnE,KAAKyB,KAAM,GAAQ,GAAQ,EAClC2C,GAAO,EAAMpE,KAAKyB,KAAM,IAAU,GAGlCD,GAAMX,EAAIC,EAAIE,EAAIE,GAAMiD,EACxB9D,EAAIL,KAAKM,MAAOO,EAAIW,GACpBE,EAAI1B,KAAKM,MAAOQ,EAAIU,GACpByB,EAAIjD,KAAKM,MAAOU,EAAIQ,GACpB6C,EAAIrE,KAAKM,MAAOY,EAAIM,GACpBI,GAAMvB,EAAIqB,EAAIuB,EAAIoB,GAAMD,EAKxBvC,EAAKhB,GAJAR,EAAIuB,GAKTE,EAAKhB,GAJAY,EAAIE,GAKTuB,EAAKnC,GAJAiC,EAAIrB,GAKT0C,EAAKpD,GAJAmD,EAAIzC,GAoBT2C,GANO1C,EAAKC,EAAO,GAAK,IACjBD,EAAKsB,EAAO,GAAK,IACjBrB,EAAKqB,EAAO,EAAI,IAChBtB,EAAKyC,EAAO,EAAI,IAChBxC,EAAKwC,EAAO,EAAI,IAChBnB,EAAKmB,EAAO,EAAI,GAwBvBvC,EAAKF,GAdTP,EAAKb,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAcfH,EACfpC,EAAKF,GAdTP,EAAKd,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAcfH,EACfhB,EAAKD,GAdTN,EAAKpC,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAcfH,EACfI,EAAKF,GAdTT,EAAKpD,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAcfH,EACfnC,EAAKJ,GAbTiB,EAAKrC,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAaf,EAAMH,EACrBlC,EAAKJ,GAbTiB,EAAKtC,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAaf,EAAMH,EACrBf,EAAKF,GAd4BH,EAAKvC,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAcpD,EAAMH,EACrBK,EAAKH,GAdTR,EAAKrD,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAcf,EAAMH,EACrBd,EAAKzB,GAbTkC,EAAKtD,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAaf,EAAMH,EACrBb,EAAKzB,GAbTkC,EAAKvD,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAaf,EAAMH,EACrBZ,EAAKL,GAbTc,EAAKxD,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAaf,EAAMH,EACrBM,EAAKJ,GAbTJ,EAAKzD,EAAS8D,GAAK,IAAO,EAAI,EAAI,GAaf,EAAMH,EACrBO,EAAK9C,EAAK,EAAM,EAAMuC,EACtBQ,EAAK9C,EAAK,EAAM,EAAMsC,EACtBS,EAAK1B,EAAK,EAAM,EAAMiB,EACtBU,EAAKR,EAAK,EAAM,EAAMF,EAEtBjC,EAAS,IAAJ9B,EACL+B,EAAS,IAAJV,EACL+B,EAAS,IAAJR,EACL8B,EAAS,IAAJV,EACLhC,EAAM7B,EAAM2B,EAAK3B,EAAM4B,EAAK5B,EAAMiD,EAAKjD,EAAMuE,MAAa,GAC1DzC,EAAM9B,EAAM2B,EAAKb,EAAKd,EAAM4B,EAAKb,EAAKf,EAAMiD,EAAKZ,EAAKrC,EAAMuE,EAAKlB,MAAa,GAC9EtB,GAAM/B,EAAM2B,EAAKW,EAAKtC,EAAM4B,EAAKW,EAAKvC,EAAMiD,EAAKT,EAAKxC,EAAMuE,EAAKjB,MAAa,GAC9EJ,GAAMlD,EAAM2B,EAAK4B,EAAKvD,EAAM4B,EAAK4B,EAAKxD,EAAMiD,EAAKQ,EAAKzD,EAAMuE,EAAKb,MAAa,GAC9Ec,GAAMxE,EAAM2B,EAAK,EAAI3B,EAAM4B,EAAK,EAAI5B,EAAMiD,EAAK,EAAIjD,EAAMuE,EAAK,MAAY,GAE1EvC,GAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAAKqB,EAAKA,EAAKmB,EAAKA,EAQ9C7B,GAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKoB,EAAKA,EAAKoB,EAAKA,EAQ9C9B,GAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAAKoB,EAAKA,EAO5Cd,GAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKkB,EAAKA,EAQhDO,GAAK,GAAMN,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EASlD,OAAO,KAvCFtC,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKvC,KAAKgB,KAAMd,EAAOkC,GAAOR,EAAIC,EAAIqB,EAAImB,KAIhD7B,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKxC,KAAKgB,KAAMd,EAAOmC,GAAOP,EAAIC,EAAIoB,EAAIoB,KAIhD9B,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKzC,KAAKgB,KAAMd,EAAOoC,IAAON,EAAIC,EAAImB,EAAIoB,KAGhDd,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAK1D,KAAKgB,KAAMd,EAAOuD,IAAOJ,EAAIC,EAAIC,EAAIkB,KAIhDO,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKhF,KAAKgB,KAAMd,EAAO6E,IAAOL,EAAIC,EAAIC,EAAIC,MAQ/ClF,EAAMC","file":"../../math/SimplexNoise.js","sourcesContent":["\t// Ported from Stefan Gustavson's java implementation\n\t// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n\t// Read Stefan's excellent paper for details on how this code works.\n\t//\n\t// Sean McCullough banksean@gmail.com\n\t//\n\t// Added 4D noise\n\t// Joshua Koo zz85nus@gmail.com\n\ndefine([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * You can pass in a random number generator object if you like.\n\t * It is assumed to have a random() method.\n\t */\n\tTHREE.SimplexNoise = function ( r ) {\n\n\t\tif ( r == undefined ) r = Math;\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\t\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t};\n\n\tTHREE.SimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t};\n\n\tTHREE.SimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t};\n\n\tTHREE.SimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t};\n\n\tTHREE.SimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\t\tvar n0, n1, n2; // Noise contributions from the three corners\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tvar i = Math.floor( xin + s );\n\t\tvar j = Math.floor( yin + s );\n\t\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tvar t = ( i + j ) * G2;\n\t\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tvar Y0 = j - t;\n\t\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\t\tvar y0 = yin - Y0;\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tvar y1 = y0 - j1 + G2;\n\t\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tvar ii = i & 255;\n\t\tvar jj = j & 255;\n\t\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\t\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\t\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t};\n\n\t// 3D simplex noise\n\tTHREE.SimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\t\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tvar F3 = 1.0 / 3.0;\n\t\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tvar i = Math.floor( xin + s );\n\t\tvar j = Math.floor( yin + s );\n\t\tvar k = Math.floor( zin + s );\n\t\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tvar t = ( i + j + k ) * G3;\n\t\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tvar Y0 = j - t;\n\t\tvar Z0 = k - t;\n\t\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tvar y0 = yin - Y0;\n\t\tvar z0 = zin - Z0;\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\t\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tvar y1 = y0 - j1 + G3;\n\t\tvar z1 = z0 - k1 + G3;\n\t\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tvar y2 = y0 - j2 + 2.0 * G3;\n\t\tvar z2 = z0 - k2 + 2.0 * G3;\n\t\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\t\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tvar ii = i & 255;\n\t\tvar jj = j & 255;\n\t\tvar kk = k & 255;\n\t\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\t\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\t\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\t\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t};\n\n\t// 4D simplex noise\n\tTHREE.SimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tvar grad4 = this.grad4;\n\t\tvar simplex = this.simplex;\n\t\tvar perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tvar i = Math.floor( x + s );\n\t\tvar j = Math.floor( y + s );\n\t\tvar k = Math.floor( z + s );\n\t\tvar l = Math.floor( w + s );\n\t\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tvar Y0 = j - t;\n\t\tvar Z0 = k - t;\n\t\tvar W0 = l - t;\n\t\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tvar y0 = y - Y0;\n\t\tvar z0 = z - Z0;\n\t\tvar w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\t\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\t\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\t\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tvar y1 = y0 - j1 + G4;\n\t\tvar z1 = z0 - k1 + G4;\n\t\tvar w1 = w0 - l1 + G4;\n\t\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tvar y2 = y0 - j2 + 2.0 * G4;\n\t\tvar z2 = z0 - k2 + 2.0 * G4;\n\t\tvar w2 = w0 - l2 + 2.0 * G4;\n\t\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tvar y3 = y0 - j3 + 3.0 * G4;\n\t\tvar z3 = z0 - k3 + 3.0 * G4;\n\t\tvar w3 = w0 - l3 + 3.0 * G4;\n\t\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\t\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\t\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tvar ii = i & 255;\n\t\tvar jj = j & 255;\n\t\tvar kk = k & 255;\n\t\tvar ll = l & 255;\n\t\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\t\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\t\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t} var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\t\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t};\n\t\n\treturn THREE.SimplexNoise;\n});\n"]}