{"version":3,"sources":["geometries/ParametricGeometries.js"],"names":["define","THREE","threex","ParametricGeometries","klein","v","u","target","x","y","z","Math","PI","cos","sin","set","plane","width","height","mobius","t","mobius3d","phi","TubeGeometry","path","segments","radius","segmentsRadius","closed","this","scope","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","Vector3","ParametricGeometry","call","i","floor","getPointAt","normal","binormal","cx","cy","copy","prototype","Object","create","Geometry","constructor","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","Curve","getPoint","optionalTarget","point","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","PlaneGeometry","depth","segmentsWidth","segmentsDepth","geometries"],"mappings":"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","file":"../../geometries/ParametricGeometries.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var ParametricGeometries = {\n        klein: function (v, u, target) {\n            u *= Math.PI;\n            v *= 2 * Math.PI;\n            u = u * 2;\n            var x, y, z;\n            if (u < Math.PI) {\n                x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n                z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n            } else {\n                x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n                z = -8 * Math.sin(u);\n            }\n            y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n            target.set(x, y, z);\n        },\n        plane: function (width, height) {\n            return function (u, v, target) {\n                var x = u * width;\n                var y = 0;\n                var z = v * height;\n                target.set(x, y, z);\n            };\n        },\n        mobius: function (u, t, target) {\n            u = u - 0.5;\n            var v = 2 * Math.PI * t;\n            var x, y, z;\n            var a = 2;\n            x = Math.cos(v) * (a + u * Math.cos(v / 2));\n            y = Math.sin(v) * (a + u * Math.cos(v / 2));\n            z = u * Math.sin(v / 2);\n            target.set(x, y, z);\n        },\n        mobius3d: function (u, t, target) {\n            u *= Math.PI;\n            t *= 2 * Math.PI;\n            u = u * 2;\n            var phi = u / 2;\n            var major = 2.25, a = 0.125, b = 0.65;\n            var x, y, z;\n            x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n            z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n            y = (major + x) * Math.sin(u);\n            x = (major + x) * Math.cos(u);\n            target.set(x, y, z);\n        }\n    };\n    ParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n        this.path = path;\n        this.segments = segments || 64;\n        this.radius = radius || 1;\n        this.segmentsRadius = segmentsRadius || 8;\n        this.closed = closed || false;\n        var scope = this, numpoints = this.segments + 1;\n        var frames = path.computeFrenetFrames(segments, closed), tangents = frames.tangents, normals = frames.normals, binormals = frames.binormals;\n        this.tangents = tangents;\n        this.normals = normals;\n        this.binormals = binormals;\n        var position = new THREE.Vector3();\n        var ParametricTube = function (u, v, target) {\n            v *= 2 * Math.PI;\n            var i = u * (numpoints - 1);\n            i = Math.floor(i);\n            path.getPointAt(u, position);\n            var normal = normals[i];\n            var binormal = binormals[i];\n            var cx = -scope.radius * Math.cos(v);\n            var cy = scope.radius * Math.sin(v);\n            position.x += cx * normal.x + cy * binormal.x;\n            position.y += cx * normal.y + cy * binormal.y;\n            position.z += cx * normal.z + cy * binormal.z;\n            target.copy(position);\n        };\n        THREE.ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n    };\n    ParametricGeometries.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);\n    ParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n    ParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n        this.radius = radius || 200;\n        this.tube = tube || 40;\n        this.segmentsT = segmentsT || 64;\n        this.segmentsR = segmentsR || 8;\n        this.p = p || 2;\n        this.q = q || 3;\n        function TorusKnotCurve() {\n            THREE.Curve.call(this);\n        }\n        TorusKnotCurve.prototype = Object.create(THREE.Curve.prototype);\n        TorusKnotCurve.prototype.constructor = TorusKnotCurve;\n        TorusKnotCurve.prototype.getPoint = function (t, optionalTarget) {\n            var point = optionalTarget || new THREE.Vector3();\n            t *= Math.PI * 2;\n            var r = 0.5;\n            var x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n            var y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n            var z = r * Math.sin(q * t);\n            return point.set(x, y, z).multiplyScalar(radius);\n        };\n        var segments = segmentsT;\n        var radiusSegments = segmentsR;\n        var extrudePath = new TorusKnotCurve();\n        ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n    };\n    ParametricGeometries.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);\n    ParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n    ParametricGeometries.SphereGeometry = function (size, u, v) {\n        function sphere(u, v, target) {\n            u *= Math.PI;\n            v *= 2 * Math.PI;\n            var x = size * Math.sin(u) * Math.cos(v);\n            var y = size * Math.sin(u) * Math.sin(v);\n            var z = size * Math.cos(u);\n            target.set(x, y, z);\n        }\n        THREE.ParametricGeometry.call(this, sphere, u, v);\n    };\n    ParametricGeometries.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);\n    ParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n    ParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n        function plane(u, v, target) {\n            var x = u * width;\n            var y = 0;\n            var z = v * depth;\n            target.set(x, y, z);\n        }\n        THREE.ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n    };\n    ParametricGeometries.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);\n    ParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\n\n    return threex.geometries.ParametricGeometries = ParametricGeometries;\n});"]}