{"version":3,"sources":["geometries/ParametricGeometries.js"],"names":["define","THREE","ParametricGeometries","klein","v","u","target","x","y","z","Math","PI","cos","sin","set","plane","width","height","mobius","t","mobius3d","phi","TubeGeometry","path","segments","radius","segmentsRadius","closed","this","scope","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","Vector3","ParametricGeometry","call","i","floor","getPointAt","normal","binormal","cx","cy","copy","prototype","Object","create","Geometry","constructor","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","Curve","getPoint","optionalTarget","point","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"mappings":"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","file":"../../geometries/ParametricGeometries.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author zz85\n\t *\n\t * Experimenting of primitive geometry creation using Surface Parametric equations\n\t *\n\t */\n\n\tTHREE.ParametricGeometries = {\n\n\t\tklein: function ( v, u, target ) {\n\n\t\t\tu *= Math.PI;\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tu = u * 2;\n\t\t\tvar x, y, z;\n\t\t\tif ( u < Math.PI ) {\n\n\t\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( u ) * Math.cos( v );\n\t\t\t\tz = - 8 * Math.sin( u ) - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( u ) * Math.cos( v );\n\n\t\t\t} else {\n\n\t\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( v + Math.PI );\n\t\t\t\tz = - 8 * Math.sin( u );\n\n\t\t\t}\n\n\t\t\ty = - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( v );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t},\n\n\t\tplane: function ( width, height ) {\n\n\t\t\treturn function ( u, v, target ) {\n\n\t\t\t\tvar x = u * width;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar z = v * height;\n\n\t\t\t\ttarget.set( x, y, z );\n\n\t\t\t};\n\n\t\t},\n\n\t\tmobius: function ( u, t, target ) {\n\n\t\t\t// flat mobius strip\n\t\t\t// http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n\t\t\tu = u - 0.5;\n\t\t\tvar v = 2 * Math.PI * t;\n\n\t\t\tvar x, y, z;\n\n\t\t\tvar a = 2;\n\n\t\t\tx = Math.cos( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\t\ty = Math.sin( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\t\tz = u * Math.sin( v / 2 );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t},\n\n\t\tmobius3d: function ( u, t, target ) {\n\n\t\t\t// volumetric mobius strip\n\n\t\t\tu *= Math.PI;\n\t\t\tt *= 2 * Math.PI;\n\n\t\t\tu = u * 2;\n\t\t\tvar phi = u / 2;\n\t\t\tvar major = 2.25, a = 0.125, b = 0.65;\n\n\t\t\tvar x, y, z;\n\n\t\t\tx = a * Math.cos( t ) * Math.cos( phi ) - b * Math.sin( t ) * Math.sin( phi );\n\t\t\tz = a * Math.cos( t ) * Math.sin( phi ) + b * Math.sin( t ) * Math.cos( phi );\n\t\t\ty = ( major + x ) * Math.sin( u );\n\t\t\tx = ( major + x ) * Math.cos( u );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t};\n\n\n\t/*********************************************\n\t *\n\t * Parametric Replacement for TubeGeometry\n\t *\n\t *********************************************/\n\n\tTHREE.ParametricGeometries.TubeGeometry = function ( path, segments, radius, segmentsRadius, closed ) {\n\n\t\tthis.path = path;\n\t\tthis.segments = segments || 64;\n\t\tthis.radius = radius || 1;\n\t\tthis.segmentsRadius = segmentsRadius || 8;\n\t\tthis.closed = closed || false;\n\n\t\tvar scope = this, numpoints = this.segments + 1;\n\n\t\tvar frames = path.computeFrenetFrames( segments, closed ),\n\t\t\ttangents = frames.tangents,\n\t\t\tnormals = frames.normals,\n\t\t\tbinormals = frames.binormals;\n\n\t\t// proxy internals\n\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\n\t\tvar position = new THREE.Vector3();\n\n\t\tvar ParametricTube = function ( u, v, target ) {\n\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tvar i = u * ( numpoints - 1 );\n\t\t\ti = Math.floor( i );\n\n\t\t\tpath.getPointAt( u, position );\n\n\t\t\tvar normal = normals[ i ];\n\t\t\tvar binormal = binormals[ i ];\n\n\t\t\tvar cx = - scope.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tvar cy = scope.radius * Math.sin( v );\n\n\t\t\tposition.x += cx * normal.x + cy * binormal.x;\n\t\t\tposition.y += cx * normal.y + cy * binormal.y;\n\t\t\tposition.z += cx * normal.z + cy * binormal.z;\n\n\t\t\ttarget.copy( position );\n\n\t\t};\n\n\t\tTHREE.ParametricGeometry.call( this, ParametricTube, segments, segmentsRadius );\n\n\t};\n\n\tTHREE.ParametricGeometries.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ParametricGeometries.TubeGeometry.prototype.constructor = THREE.ParametricGeometries.TubeGeometry;\n\n\n\t/*********************************************\n\t  *\n\t  * Parametric Replacement for TorusKnotGeometry\n\t  *\n\t  *********************************************/\n\tTHREE.ParametricGeometries.TorusKnotGeometry = function ( radius, tube, segmentsT, segmentsR, p, q ) {\n\n\t\tthis.radius = radius || 200;\n\t\tthis.tube = tube || 40;\n\t\tthis.segmentsT = segmentsT || 64;\n\t\tthis.segmentsR = segmentsR || 8;\n\t\tthis.p = p || 2;\n\t\tthis.q = q || 3;\n\n\t\tfunction TorusKnotCurve() {\n\n\t\t\tTHREE.Curve.call( this );\n\n\t\t}\n\n\t\tTorusKnotCurve.prototype = Object.create( THREE.Curve.prototype );\n\t\tTorusKnotCurve.prototype.constructor = TorusKnotCurve;\n\n\t\tTorusKnotCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\t\tvar point = optionalTarget || new THREE.Vector3();\n\n\t\t\tt *= Math.PI * 2;\n\n\t\t\tvar r = 0.5;\n\n\t\t\tvar x = ( 1 + r * Math.cos( q * t ) ) * Math.cos( p * t );\n\t\t\tvar y = ( 1 + r * Math.cos( q * t ) ) * Math.sin( p * t );\n\t\t\tvar z = r * Math.sin( q * t );\n\n\t\t\treturn point.set( x, y, z ).multiplyScalar( radius );\n\n\t\t};\n\n\t\tvar segments = segmentsT;\n\t\tvar radiusSegments = segmentsR;\n\t\tvar extrudePath = new TorusKnotCurve();\n\n\t\tTHREE.ParametricGeometries.TubeGeometry.call( this, extrudePath, segments, tube, radiusSegments, true, false );\n\n\t};\n\n\tTHREE.ParametricGeometries.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ParametricGeometries.TorusKnotGeometry.prototype.constructor = THREE.ParametricGeometries.TorusKnotGeometry;\n\n\n\t/*********************************************\n\t  *\n\t  * Parametric Replacement for SphereGeometry\n\t  *\n\t  *********************************************/\n\tTHREE.ParametricGeometries.SphereGeometry = function ( size, u, v ) {\n\n\t\tfunction sphere( u, v, target ) {\n\n\t\t\tu *= Math.PI;\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tvar x = size * Math.sin( u ) * Math.cos( v );\n\t\t\tvar y = size * Math.sin( u ) * Math.sin( v );\n\t\t\tvar z = size * Math.cos( u );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tTHREE.ParametricGeometry.call( this, sphere, u, v );\n\n\t};\n\n\tTHREE.ParametricGeometries.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ParametricGeometries.SphereGeometry.prototype.constructor = THREE.ParametricGeometries.SphereGeometry;\n\n\n\t/*********************************************\n\t  *\n\t  * Parametric Replacement for PlaneGeometry\n\t  *\n\t  *********************************************/\n\n\tTHREE.ParametricGeometries.PlaneGeometry = function ( width, depth, segmentsWidth, segmentsDepth ) {\n\n\t\tfunction plane( u, v, target ) {\n\n\t\t\tvar x = u * width;\n\t\t\tvar y = 0;\n\t\t\tvar z = v * depth;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tTHREE.ParametricGeometry.call( this, plane, segmentsWidth, segmentsDepth );\n\n\t};\n\n\tTHREE.ParametricGeometries.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ParametricGeometries.PlaneGeometry.prototype.constructor = THREE.ParametricGeometries.PlaneGeometry;\n\t\n\treturn THREE.ParametricGeometries;\n});\n"]}