{"version":3,"sources":["geometries/TeapotBufferGeometry.js"],"names":["define","THREE","TeapotBufferGeometry","size","segments","bottom","lid","body","fitLid","blinn","teapotPatches","teapotVertices","BufferGeometry","call","this","undefined","Math","max","floor","maxHeight2","trueSize","numTriangles","indices","Uint32Array","numVertices","vertices","Float32Array","normals","uvs","ms","Matrix4","set","i","r","c","tcoord","sstep","tstep","vertPerRow","s","t","sval","tval","p","v1","v2","v3","v4","g","sp","tp","dsp","dtp","mgm","vert","sdir","tdir","norm","Vector3","dsval","dtval","normOut","gmx","tmtx","vsp","Vector4","vtp","vdsp","vdtp","vsdir","vtdir","mst","clone","transpose","notDegenerate","vtx1","vtx2","vtx3","maxPatches","surfCount","vertCount","normCount","uvCount","indexCount","surf","multiplyMatrices","fromArray","applyMatrix4","dot","crossVectors","normalize","x","z","y","setIndex","BufferAttribute","setAttribute","computeBoundingSphere","prototype","Object","create","constructor"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA6sBV,OAzpBAA,EAAMC,qBAAuB,SAAWC,EAAMC,EAAUC,EAAQC,EAAKC,EAAMC,EAAQC,GAGlF,IAAIC,GAEH,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAClD,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAEzD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAChE,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAErE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAC1E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAE3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAE3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAE3E,IAAK,IAAK,IAAK,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","file":"../../geometries/TeapotBufferGeometry.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Eric Haines / http://erichaines.com/\n\t *\n\t * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n\t *\n\t * Parameters: size = 50, segments = 10, bottom = true, lid = true, body = true,\n\t *   fitLid = false, blinn = true\n\t *\n\t * size is a relative scale: I've scaled the teapot to fit vertically between -1 and 1.\n\t * Think of it as a \"radius\".\n\t * segments - number of line segments to subdivide each patch edge;\n\t *   1 is possible but gives degenerates, so two is the real minimum.\n\t * bottom - boolean, if true (default) then the bottom patches are added. Some consider\n\t *   adding the bottom heresy, so set this to \"false\" to adhere to the One True Way.\n\t * lid - to remove the lid and look inside, set to true.\n\t * body - to remove the body and leave the lid, set this and \"bottom\" to false.\n\t * fitLid - the lid is a tad small in the original. This stretches it a bit so you can't\n\t *   see the teapot's insides through the gap.\n\t * blinn - Jim Blinn scaled the original data vertically by dividing by about 1.3 to look\n\t *   nicer. If you want to see the original teapot, similar to the real-world model, set\n\t *   this to false. True by default.\n\t *   See http://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg for the original\n\t *   real-world teapot (from http://en.wikipedia.org/wiki/Utah_teapot).\n\t *\n\t * Note that the bottom (the last four patches) is not flat - blame Frank Crow, not me.\n\t *\n\t * The teapot should normally be rendered as a double sided object, since for some\n\t * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n\t *\n\t * Segments 'n' determines the number of triangles output.\n\t *   Total triangles = 32*2*n*n - 8*n    [degenerates at the top and bottom cusps are deleted]\n\t *\n\t *   size_factor   # triangles\n\t *       1          56\n\t *       2         240\n\t *       3         552\n\t *       4         992\n\t *\n\t *      10        6320\n\t *      20       25440\n\t *      30       57360\n\t *\n\t * Code converted from my ancient SPD software, http://tog.acm.org/resources/SPD/\n\t * Created for the Udacity course \"Interactive Rendering\", http://bit.ly/ericity\n\t * Lesson: https://www.udacity.com/course/viewer#!/c-cs291/l-68866048/m-106482448\n\t * YouTube video on teapot history: https://www.youtube.com/watch?v=DxMfblPzFNc\n\t *\n\t * See https://en.wikipedia.org/wiki/Utah_teapot for the history of the teapot\n\t *\n\t */\n\n\tTHREE.TeapotBufferGeometry = function ( size, segments, bottom, lid, body, fitLid, blinn ) {\n\n\t\t// 32 * 4 * 4 Bezier spline patches\n\t\tvar teapotPatches = [\n\t\t\t/*rim*/\n\t\t\t0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n\t\t\t3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27,\n\t\t\t18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39,\n\t\t\t30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12,\n\t\t\t/*body*/\n\t\t\t12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n\t\t\t15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68,\n\t\t\t27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77,\n\t\t\t39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56,\n\t\t\t56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\n\t\t\t59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104,\n\t\t\t68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113,\n\t\t\t77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92,\n\t\t\t/*handle*/\n\t\t\t120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\n\t\t\t123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132,\n\t\t\t132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154,\n\t\t\t135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68,\n\t\t\t/*spout*/\n\t\t\t161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\n\t\t\t164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173,\n\t\t\t173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,\n\t\t\t176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193,\n\t\t\t/*lid*/\n\t\t\t203, 203, 203, 203, 204, 205, 206, 207, 208, 208, 208, 208, 209, 210, 211, 212,\n\t\t\t203, 203, 203, 203, 207, 213, 214, 215, 208, 208, 208, 208, 212, 216, 217, 218,\n\t\t\t203, 203, 203, 203, 215, 219, 220, 221, 208, 208, 208, 208, 218, 222, 223, 224,\n\t\t\t203, 203, 203, 203, 221, 225, 226, 204, 208, 208, 208, 208, 224, 227, 228, 209,\n\t\t\t209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\n\t\t\t212, 216, 217, 218, 232, 241, 242, 243, 236, 244, 245, 246, 240, 247, 248, 249,\n\t\t\t218, 222, 223, 224, 243, 250, 251, 252, 246, 253, 254, 255, 249, 256, 257, 258,\n\t\t\t224, 227, 228, 209, 252, 259, 260, 229, 255, 261, 262, 233, 258, 263, 264, 237,\n\t\t\t/*bottom*/\n\t\t\t265, 265, 265, 265, 266, 267, 268, 269, 270, 271, 272, 273, 92, 119, 118, 113,\n\t\t\t265, 265, 265, 265, 269, 274, 275, 276, 273, 277, 278, 279, 113, 112, 111, 104,\n\t\t\t265, 265, 265, 265, 276, 280, 281, 282, 279, 283, 284, 285, 104, 103, 102, 95,\n\t\t\t265, 265, 265, 265, 282, 286, 287, 266, 285, 288, 289, 270, 95, 94, 93, 92\n\t\t];\n\n\t\tvar teapotVertices = [\n\t\t\t1.4, 0, 2.4,\n\t\t\t1.4, - 0.784, 2.4,\n\t\t\t0.784, - 1.4, 2.4,\n\t\t\t0, - 1.4, 2.4,\n\t\t\t1.3375, 0, 2.53125,\n\t\t\t1.3375, - 0.749, 2.53125,\n\t\t\t0.749, - 1.3375, 2.53125,\n\t\t\t0, - 1.3375, 2.53125,\n\t\t\t1.4375, 0, 2.53125,\n\t\t\t1.4375, - 0.805, 2.53125,\n\t\t\t0.805, - 1.4375, 2.53125,\n\t\t\t0, - 1.4375, 2.53125,\n\t\t\t1.5, 0, 2.4,\n\t\t\t1.5, - 0.84, 2.4,\n\t\t\t0.84, - 1.5, 2.4,\n\t\t\t0, - 1.5, 2.4,\n\t\t\t- 0.784, - 1.4, 2.4,\n\t\t\t- 1.4, - 0.784, 2.4,\n\t\t\t- 1.4, 0, 2.4,\n\t\t\t- 0.749, - 1.3375, 2.53125,\n\t\t\t- 1.3375, - 0.749, 2.53125,\n\t\t\t- 1.3375, 0, 2.53125,\n\t\t\t- 0.805, - 1.4375, 2.53125,\n\t\t\t- 1.4375, - 0.805, 2.53125,\n\t\t\t- 1.4375, 0, 2.53125,\n\t\t\t- 0.84, - 1.5, 2.4,\n\t\t\t- 1.5, - 0.84, 2.4,\n\t\t\t- 1.5, 0, 2.4,\n\t\t\t- 1.4, 0.784, 2.4,\n\t\t\t- 0.784, 1.4, 2.4,\n\t\t\t0, 1.4, 2.4,\n\t\t\t- 1.3375, 0.749, 2.53125,\n\t\t\t- 0.749, 1.3375, 2.53125,\n\t\t\t0, 1.3375, 2.53125,\n\t\t\t- 1.4375, 0.805, 2.53125,\n\t\t\t- 0.805, 1.4375, 2.53125,\n\t\t\t0, 1.4375, 2.53125,\n\t\t\t- 1.5, 0.84, 2.4,\n\t\t\t- 0.84, 1.5, 2.4,\n\t\t\t0, 1.5, 2.4,\n\t\t\t0.784, 1.4, 2.4,\n\t\t\t1.4, 0.784, 2.4,\n\t\t\t0.749, 1.3375, 2.53125,\n\t\t\t1.3375, 0.749, 2.53125,\n\t\t\t0.805, 1.4375, 2.53125,\n\t\t\t1.4375, 0.805, 2.53125,\n\t\t\t0.84, 1.5, 2.4,\n\t\t\t1.5, 0.84, 2.4,\n\t\t\t1.75, 0, 1.875,\n\t\t\t1.75, - 0.98, 1.875,\n\t\t\t0.98, - 1.75, 1.875,\n\t\t\t0, - 1.75, 1.875,\n\t\t\t2, 0, 1.35,\n\t\t\t2, - 1.12, 1.35,\n\t\t\t1.12, - 2, 1.35,\n\t\t\t0, - 2, 1.35,\n\t\t\t2, 0, 0.9,\n\t\t\t2, - 1.12, 0.9,\n\t\t\t1.12, - 2, 0.9,\n\t\t\t0, - 2, 0.9,\n\t\t\t- 0.98, - 1.75, 1.875,\n\t\t\t- 1.75, - 0.98, 1.875,\n\t\t\t- 1.75, 0, 1.875,\n\t\t\t- 1.12, - 2, 1.35,\n\t\t\t- 2, - 1.12, 1.35,\n\t\t\t- 2, 0, 1.35,\n\t\t\t- 1.12, - 2, 0.9,\n\t\t\t- 2, - 1.12, 0.9,\n\t\t\t- 2, 0, 0.9,\n\t\t\t- 1.75, 0.98, 1.875,\n\t\t\t- 0.98, 1.75, 1.875,\n\t\t\t0, 1.75, 1.875,\n\t\t\t- 2, 1.12, 1.35,\n\t\t\t- 1.12, 2, 1.35,\n\t\t\t0, 2, 1.35,\n\t\t\t- 2, 1.12, 0.9,\n\t\t\t- 1.12, 2, 0.9,\n\t\t\t0, 2, 0.9,\n\t\t\t0.98, 1.75, 1.875,\n\t\t\t1.75, 0.98, 1.875,\n\t\t\t1.12, 2, 1.35,\n\t\t\t2, 1.12, 1.35,\n\t\t\t1.12, 2, 0.9,\n\t\t\t2, 1.12, 0.9,\n\t\t\t2, 0, 0.45,\n\t\t\t2, - 1.12, 0.45,\n\t\t\t1.12, - 2, 0.45,\n\t\t\t0, - 2, 0.45,\n\t\t\t1.5, 0, 0.225,\n\t\t\t1.5, - 0.84, 0.225,\n\t\t\t0.84, - 1.5, 0.225,\n\t\t\t0, - 1.5, 0.225,\n\t\t\t1.5, 0, 0.15,\n\t\t\t1.5, - 0.84, 0.15,\n\t\t\t0.84, - 1.5, 0.15,\n\t\t\t0, - 1.5, 0.15,\n\t\t\t- 1.12, - 2, 0.45,\n\t\t\t- 2, - 1.12, 0.45,\n\t\t\t- 2, 0, 0.45,\n\t\t\t- 0.84, - 1.5, 0.225,\n\t\t\t- 1.5, - 0.84, 0.225,\n\t\t\t- 1.5, 0, 0.225,\n\t\t\t- 0.84, - 1.5, 0.15,\n\t\t\t- 1.5, - 0.84, 0.15,\n\t\t\t- 1.5, 0, 0.15,\n\t\t\t- 2, 1.12, 0.45,\n\t\t\t- 1.12, 2, 0.45,\n\t\t\t0, 2, 0.45,\n\t\t\t- 1.5, 0.84, 0.225,\n\t\t\t- 0.84, 1.5, 0.225,\n\t\t\t0, 1.5, 0.225,\n\t\t\t- 1.5, 0.84, 0.15,\n\t\t\t- 0.84, 1.5, 0.15,\n\t\t\t0, 1.5, 0.15,\n\t\t\t1.12, 2, 0.45,\n\t\t\t2, 1.12, 0.45,\n\t\t\t0.84, 1.5, 0.225,\n\t\t\t1.5, 0.84, 0.225,\n\t\t\t0.84, 1.5, 0.15,\n\t\t\t1.5, 0.84, 0.15,\n\t\t\t- 1.6, 0, 2.025,\n\t\t\t- 1.6, - 0.3, 2.025,\n\t\t\t- 1.5, - 0.3, 2.25,\n\t\t\t- 1.5, 0, 2.25,\n\t\t\t- 2.3, 0, 2.025,\n\t\t\t- 2.3, - 0.3, 2.025,\n\t\t\t- 2.5, - 0.3, 2.25,\n\t\t\t- 2.5, 0, 2.25,\n\t\t\t- 2.7, 0, 2.025,\n\t\t\t- 2.7, - 0.3, 2.025,\n\t\t\t- 3, - 0.3, 2.25,\n\t\t\t- 3, 0, 2.25,\n\t\t\t- 2.7, 0, 1.8,\n\t\t\t- 2.7, - 0.3, 1.8,\n\t\t\t- 3, - 0.3, 1.8,\n\t\t\t- 3, 0, 1.8,\n\t\t\t- 1.5, 0.3, 2.25,\n\t\t\t- 1.6, 0.3, 2.025,\n\t\t\t- 2.5, 0.3, 2.25,\n\t\t\t- 2.3, 0.3, 2.025,\n\t\t\t- 3, 0.3, 2.25,\n\t\t\t- 2.7, 0.3, 2.025,\n\t\t\t- 3, 0.3, 1.8,\n\t\t\t- 2.7, 0.3, 1.8,\n\t\t\t- 2.7, 0, 1.575,\n\t\t\t- 2.7, - 0.3, 1.575,\n\t\t\t- 3, - 0.3, 1.35,\n\t\t\t- 3, 0, 1.35,\n\t\t\t- 2.5, 0, 1.125,\n\t\t\t- 2.5, - 0.3, 1.125,\n\t\t\t- 2.65, - 0.3, 0.9375,\n\t\t\t- 2.65, 0, 0.9375,\n\t\t\t- 2, - 0.3, 0.9,\n\t\t\t- 1.9, - 0.3, 0.6,\n\t\t\t- 1.9, 0, 0.6,\n\t\t\t- 3, 0.3, 1.35,\n\t\t\t- 2.7, 0.3, 1.575,\n\t\t\t- 2.65, 0.3, 0.9375,\n\t\t\t- 2.5, 0.3, 1.125,\n\t\t\t- 1.9, 0.3, 0.6,\n\t\t\t- 2, 0.3, 0.9,\n\t\t\t1.7, 0, 1.425,\n\t\t\t1.7, - 0.66, 1.425,\n\t\t\t1.7, - 0.66, 0.6,\n\t\t\t1.7, 0, 0.6,\n\t\t\t2.6, 0, 1.425,\n\t\t\t2.6, - 0.66, 1.425,\n\t\t\t3.1, - 0.66, 0.825,\n\t\t\t3.1, 0, 0.825,\n\t\t\t2.3, 0, 2.1,\n\t\t\t2.3, - 0.25, 2.1,\n\t\t\t2.4, - 0.25, 2.025,\n\t\t\t2.4, 0, 2.025,\n\t\t\t2.7, 0, 2.4,\n\t\t\t2.7, - 0.25, 2.4,\n\t\t\t3.3, - 0.25, 2.4,\n\t\t\t3.3, 0, 2.4,\n\t\t\t1.7, 0.66, 0.6,\n\t\t\t1.7, 0.66, 1.425,\n\t\t\t3.1, 0.66, 0.825,\n\t\t\t2.6, 0.66, 1.425,\n\t\t\t2.4, 0.25, 2.025,\n\t\t\t2.3, 0.25, 2.1,\n\t\t\t3.3, 0.25, 2.4,\n\t\t\t2.7, 0.25, 2.4,\n\t\t\t2.8, 0, 2.475,\n\t\t\t2.8, - 0.25, 2.475,\n\t\t\t3.525, - 0.25, 2.49375,\n\t\t\t3.525, 0, 2.49375,\n\t\t\t2.9, 0, 2.475,\n\t\t\t2.9, - 0.15, 2.475,\n\t\t\t3.45, - 0.15, 2.5125,\n\t\t\t3.45, 0, 2.5125,\n\t\t\t2.8, 0, 2.4,\n\t\t\t2.8, - 0.15, 2.4,\n\t\t\t3.2, - 0.15, 2.4,\n\t\t\t3.2, 0, 2.4,\n\t\t\t3.525, 0.25, 2.49375,\n\t\t\t2.8, 0.25, 2.475,\n\t\t\t3.45, 0.15, 2.5125,\n\t\t\t2.9, 0.15, 2.475,\n\t\t\t3.2, 0.15, 2.4,\n\t\t\t2.8, 0.15, 2.4,\n\t\t\t0, 0, 3.15,\n\t\t\t0.8, 0, 3.15,\n\t\t\t0.8, - 0.45, 3.15,\n\t\t\t0.45, - 0.8, 3.15,\n\t\t\t0, - 0.8, 3.15,\n\t\t\t0, 0, 2.85,\n\t\t\t0.2, 0, 2.7,\n\t\t\t0.2, - 0.112, 2.7,\n\t\t\t0.112, - 0.2, 2.7,\n\t\t\t0, - 0.2, 2.7,\n\t\t\t- 0.45, - 0.8, 3.15,\n\t\t\t- 0.8, - 0.45, 3.15,\n\t\t\t- 0.8, 0, 3.15,\n\t\t\t- 0.112, - 0.2, 2.7,\n\t\t\t- 0.2, - 0.112, 2.7,\n\t\t\t- 0.2, 0, 2.7,\n\t\t\t- 0.8, 0.45, 3.15,\n\t\t\t- 0.45, 0.8, 3.15,\n\t\t\t0, 0.8, 3.15,\n\t\t\t- 0.2, 0.112, 2.7,\n\t\t\t- 0.112, 0.2, 2.7,\n\t\t\t0, 0.2, 2.7,\n\t\t\t0.45, 0.8, 3.15,\n\t\t\t0.8, 0.45, 3.15,\n\t\t\t0.112, 0.2, 2.7,\n\t\t\t0.2, 0.112, 2.7,\n\t\t\t0.4, 0, 2.55,\n\t\t\t0.4, - 0.224, 2.55,\n\t\t\t0.224, - 0.4, 2.55,\n\t\t\t0, - 0.4, 2.55,\n\t\t\t1.3, 0, 2.55,\n\t\t\t1.3, - 0.728, 2.55,\n\t\t\t0.728, - 1.3, 2.55,\n\t\t\t0, - 1.3, 2.55,\n\t\t\t1.3, 0, 2.4,\n\t\t\t1.3, - 0.728, 2.4,\n\t\t\t0.728, - 1.3, 2.4,\n\t\t\t0, - 1.3, 2.4,\n\t\t\t- 0.224, - 0.4, 2.55,\n\t\t\t- 0.4, - 0.224, 2.55,\n\t\t\t- 0.4, 0, 2.55,\n\t\t\t- 0.728, - 1.3, 2.55,\n\t\t\t- 1.3, - 0.728, 2.55,\n\t\t\t- 1.3, 0, 2.55,\n\t\t\t- 0.728, - 1.3, 2.4,\n\t\t\t- 1.3, - 0.728, 2.4,\n\t\t\t- 1.3, 0, 2.4,\n\t\t\t- 0.4, 0.224, 2.55,\n\t\t\t- 0.224, 0.4, 2.55,\n\t\t\t0, 0.4, 2.55,\n\t\t\t- 1.3, 0.728, 2.55,\n\t\t\t- 0.728, 1.3, 2.55,\n\t\t\t0, 1.3, 2.55,\n\t\t\t- 1.3, 0.728, 2.4,\n\t\t\t- 0.728, 1.3, 2.4,\n\t\t\t0, 1.3, 2.4,\n\t\t\t0.224, 0.4, 2.55,\n\t\t\t0.4, 0.224, 2.55,\n\t\t\t0.728, 1.3, 2.55,\n\t\t\t1.3, 0.728, 2.55,\n\t\t\t0.728, 1.3, 2.4,\n\t\t\t1.3, 0.728, 2.4,\n\t\t\t0, 0, 0,\n\t\t\t1.425, 0, 0,\n\t\t\t1.425, 0.798, 0,\n\t\t\t0.798, 1.425, 0,\n\t\t\t0, 1.425, 0,\n\t\t\t1.5, 0, 0.075,\n\t\t\t1.5, 0.84, 0.075,\n\t\t\t0.84, 1.5, 0.075,\n\t\t\t0, 1.5, 0.075,\n\t\t\t- 0.798, 1.425, 0,\n\t\t\t- 1.425, 0.798, 0,\n\t\t\t- 1.425, 0, 0,\n\t\t\t- 0.84, 1.5, 0.075,\n\t\t\t- 1.5, 0.84, 0.075,\n\t\t\t- 1.5, 0, 0.075,\n\t\t\t- 1.425, - 0.798, 0,\n\t\t\t- 0.798, - 1.425, 0,\n\t\t\t0, - 1.425, 0,\n\t\t\t- 1.5, - 0.84, 0.075,\n\t\t\t- 0.84, - 1.5, 0.075,\n\t\t\t0, - 1.5, 0.075,\n\t\t\t0.798, - 1.425, 0,\n\t\t\t1.425, - 0.798, 0,\n\t\t\t0.84, - 1.5, 0.075,\n\t\t\t1.5, - 0.84, 0.075\n\t\t];\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tsize = size || 50;\n\n\t\t// number of segments per patch\n\t\tsegments = segments !== undefined ? Math.max( 2, Math.floor( segments ) || 10 ) : 10;\n\n\t\t// which parts should be visible\n\t\tbottom = bottom === undefined ? true : bottom;\n\t\tlid = lid === undefined ? true : lid;\n\t\tbody = body === undefined ? true : body;\n\n\t\t// Should the lid be snug? It's not traditional, but we make it snug by default\n\t\tfitLid = fitLid === undefined ? true : fitLid;\n\n\t\t// Jim Blinn scaled the teapot down in size by about 1.3 for\n\t\t// some rendering tests. He liked the new proportions that he kept\n\t\t// the data in this form. The model was distributed with these new\n\t\t// proportions and became the norm. Trivia: comparing images of the\n\t\t// real teapot and the computer model, the ratio for the bowl of the\n\t\t// real teapot is more like 1.25, but since 1.3 is the traditional\n\t\t// value given, we use it here.\n\t\tvar blinnScale = 1.3;\n\t\tblinn = blinn === undefined ? true : blinn;\n\n\t\t// scale the size to be the real scaling factor\n\t\tvar maxHeight = 3.15 * ( blinn ? 1 : blinnScale );\n\n\t\tvar maxHeight2 = maxHeight / 2;\n\t\tvar trueSize = size / maxHeight2;\n\n\t\t// Number of elements depends on what is needed. Subtract degenerate\n\t\t// triangles at tip of bottom and lid out in advance.\n\t\tvar numTriangles = bottom ? ( 8 * segments - 4 ) * segments : 0;\n\t\tnumTriangles += lid ? ( 16 * segments - 4 ) * segments : 0;\n\t\tnumTriangles += body ? 40 * segments * segments : 0;\n\n\t\tvar indices = new Uint32Array( numTriangles * 3 );\n\n\t\tvar numVertices = bottom ? 4 : 0;\n\t\tnumVertices += lid ? 8 : 0;\n\t\tnumVertices += body ? 20 : 0;\n\t\tnumVertices *= ( segments + 1 ) * ( segments + 1 );\n\n\t\tvar vertices = new Float32Array( numVertices * 3 );\n\t\tvar normals = new Float32Array( numVertices * 3 );\n\t\tvar uvs = new Float32Array( numVertices * 2 );\n\n\t\t// Bezier form\n\t\tvar ms = new THREE.Matrix4();\n\t\tms.set(\n\t\t\t- 1.0, 3.0, - 3.0, 1.0,\n\t\t\t3.0, - 6.0, 3.0, 0.0,\n\t\t\t- 3.0, 3.0, 0.0, 0.0,\n\t\t\t1.0, 0.0, 0.0, 0.0 );\n\n\t\tvar g = [];\n\t\tvar i, r, c;\n\n\t\tvar sp = [];\n\t\tvar tp = [];\n\t\tvar dsp = [];\n\t\tvar dtp = [];\n\n\t\t// M * G * M matrix, sort of see\n\t\t// http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n\t\tvar mgm = [];\n\n\t\tvar vert = [];\n\t\tvar sdir = [];\n\t\tvar tdir = [];\n\n\t\tvar norm = new THREE.Vector3();\n\n\t\tvar tcoord;\n\n\t\tvar sstep, tstep;\n\t\tvar vertPerRow;\n\n\t\tvar s, t, sval, tval, p;\n\t\tvar dsval = 0;\n\t\tvar dtval = 0;\n\n\t\tvar normOut = new THREE.Vector3();\n\t\tvar v1, v2, v3, v4;\n\n\t\tvar gmx = new THREE.Matrix4();\n\t\tvar tmtx = new THREE.Matrix4();\n\n\t\tvar vsp = new THREE.Vector4();\n\t\tvar vtp = new THREE.Vector4();\n\t\tvar vdsp = new THREE.Vector4();\n\t\tvar vdtp = new THREE.Vector4();\n\n\t\tvar vsdir = new THREE.Vector3();\n\t\tvar vtdir = new THREE.Vector3();\n\n\t\tvar mst = ms.clone();\n\t\tmst.transpose();\n\n\t\t// internal function: test if triangle has any matching vertices;\n\t\t// if so, don't save triangle, since it won't display anything.\n\t\tvar notDegenerate = function ( vtx1, vtx2, vtx3 ) {\n\n\t\t\t// if any vertex matches, return false\n\t\t\treturn ! ( ( ( vertices[ vtx1 * 3 ] === vertices[ vtx2 * 3 ] ) &&\n\t\t\t\t\t\t ( vertices[ vtx1 * 3 + 1 ] === vertices[ vtx2 * 3 + 1 ] ) &&\n\t\t\t\t\t\t ( vertices[ vtx1 * 3 + 2 ] === vertices[ vtx2 * 3 + 2 ] ) ) ||\n\t\t\t\t\t   ( ( vertices[ vtx1 * 3 ] === vertices[ vtx3 * 3 ] ) &&\n\t\t\t\t\t\t ( vertices[ vtx1 * 3 + 1 ] === vertices[ vtx3 * 3 + 1 ] ) &&\n\t\t\t\t\t\t ( vertices[ vtx1 * 3 + 2 ] === vertices[ vtx3 * 3 + 2 ] ) ) ||\n\t\t\t\t\t   ( ( vertices[ vtx2 * 3 ] === vertices[ vtx3 * 3 ] ) &&\n\t\t\t\t\t\t ( vertices[ vtx2 * 3 + 1 ] === vertices[ vtx3 * 3 + 1 ] ) &&\n\t\t\t\t\t\t ( vertices[ vtx2 * 3 + 2 ] === vertices[ vtx3 * 3 + 2 ] ) ) );\n\n\t\t};\n\n\n\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\tmgm[ i ] = new THREE.Matrix4();\n\n\t\t}\n\n\t\tvar minPatches = body ? 0 : 20;\n\t\tvar maxPatches = bottom ? 32 : 28;\n\n\t\tvertPerRow = segments + 1;\n\n\t\tvar surfCount = 0;\n\n\t\tvar vertCount = 0;\n\t\tvar normCount = 0;\n\t\tvar uvCount = 0;\n\n\t\tvar indexCount = 0;\n\n\t\tfor ( var surf = minPatches; surf < maxPatches; surf ++ ) {\n\n\t\t\t// lid is in the middle of the data, patches 20-27,\n\t\t\t// so ignore it for this part of the loop if the lid is not desired\n\t\t\tif ( lid || ( surf < 20 || surf >= 28 ) ) {\n\n\t\t\t\t// get M * G * M matrix for x,y,z\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t// get control patches\n\t\t\t\t\tfor ( r = 0; r < 4; r ++ ) {\n\n\t\t\t\t\t\tfor ( c = 0; c < 4; c ++ ) {\n\n\t\t\t\t\t\t\t// transposed\n\t\t\t\t\t\t\tg[ c * 4 + r ] = teapotVertices[ teapotPatches[ surf * 16 + r * 4 + c ] * 3 + i ];\n\n\t\t\t\t\t\t\t// is the lid to be made larger, and is this a point on the lid\n\t\t\t\t\t\t\t// that is X or Y?\n\t\t\t\t\t\t\tif ( fitLid && ( surf >= 20 && surf < 28 ) && ( i !== 2 ) ) {\n\n\t\t\t\t\t\t\t\t// increase XY size by 7.7%, found empirically. I don't\n\t\t\t\t\t\t\t\t// increase Z so that the teapot will continue to fit in the\n\t\t\t\t\t\t\t\t// space -1 to 1 for Y (Y is up for the final model).\n\t\t\t\t\t\t\t\tg[ c * 4 + r ] *= 1.077;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n\t\t\t\t\t\t\t// data we now use. The original teapot is taller. Fix it:\n\t\t\t\t\t\t\tif ( ! blinn && ( i === 2 ) ) {\n\n\t\t\t\t\t\t\t\tg[ c * 4 + r ] *= blinnScale;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgmx.set( g[ 0 ], g[ 1 ], g[ 2 ], g[ 3 ], g[ 4 ], g[ 5 ], g[ 6 ], g[ 7 ], g[ 8 ], g[ 9 ], g[ 10 ], g[ 11 ], g[ 12 ], g[ 13 ], g[ 14 ], g[ 15 ] );\n\n\t\t\t\t\ttmtx.multiplyMatrices( gmx, ms );\n\t\t\t\t\tmgm[ i ].multiplyMatrices( mst, tmtx );\n\n\t\t\t\t}\n\n\t\t\t\t// step along, get points, and output\n\t\t\t\tfor ( sstep = 0; sstep <= segments; sstep ++ ) {\n\n\t\t\t\t\ts = sstep / segments;\n\n\t\t\t\t\tfor ( tstep = 0; tstep <= segments; tstep ++ ) {\n\n\t\t\t\t\t\tt = tstep / segments;\n\n\t\t\t\t\t\t// point from basis\n\t\t\t\t\t\t// get power vectors and their derivatives\n\t\t\t\t\t\tfor ( p = 4, sval = tval = 1.0; p --; ) {\n\n\t\t\t\t\t\t\tsp[ p ] = sval;\n\t\t\t\t\t\t\ttp[ p ] = tval;\n\t\t\t\t\t\t\tsval *= s;\n\t\t\t\t\t\t\ttval *= t;\n\n\t\t\t\t\t\t\tif ( p === 3 ) {\n\n\t\t\t\t\t\t\t\tdsp[ p ] = dtp[ p ] = 0.0;\n\t\t\t\t\t\t\t\tdsval = dtval = 1.0;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tdsp[ p ] = dsval * ( 3 - p );\n\t\t\t\t\t\t\t\tdtp[ p ] = dtval * ( 3 - p );\n\t\t\t\t\t\t\t\tdsval *= s;\n\t\t\t\t\t\t\t\tdtval *= t;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvsp.fromArray( sp );\n\t\t\t\t\t\tvtp.fromArray( tp );\n\t\t\t\t\t\tvdsp.fromArray( dsp );\n\t\t\t\t\t\tvdtp.fromArray( dtp );\n\n\t\t\t\t\t\t// do for x,y,z\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t// multiply power vectors times matrix to get value\n\t\t\t\t\t\t\ttcoord = vsp.clone();\n\t\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\t\tvert[ i ] = tcoord.dot( vtp );\n\n\t\t\t\t\t\t\t// get s and t tangent vectors\n\t\t\t\t\t\t\ttcoord = vdsp.clone();\n\t\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\t\tsdir[ i ] = tcoord.dot( vtp );\n\n\t\t\t\t\t\t\ttcoord = vsp.clone();\n\t\t\t\t\t\t\ttcoord.applyMatrix4( mgm[ i ] );\n\t\t\t\t\t\t\ttdir[ i ] = tcoord.dot( vdtp );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find normal\n\t\t\t\t\t\tvsdir.fromArray( sdir );\n\t\t\t\t\t\tvtdir.fromArray( tdir );\n\t\t\t\t\t\tnorm.crossVectors( vtdir, vsdir );\n\t\t\t\t\t\tnorm.normalize();\n\n\t\t\t\t\t\t// if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n\t\t\t\t\t\tif ( vert[ 0 ] === 0 && vert[ 1 ] === 0 ) {\n\n\t\t\t\t\t\t\t// if above the middle of the teapot, normal points up, else down\n\t\t\t\t\t\t\tnormOut.set( 0, vert[ 2 ] > maxHeight2 ? 1 : - 1, 0 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// standard output: rotate on X axis\n\t\t\t\t\t\t\tnormOut.set( norm.x, norm.z, - norm.y );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// store it all\n\t\t\t\t\t\tvertices[ vertCount ++ ] = trueSize * vert[ 0 ];\n\t\t\t\t\t\tvertices[ vertCount ++ ] = trueSize * ( vert[ 2 ] - maxHeight2 );\n\t\t\t\t\t\tvertices[ vertCount ++ ] = - trueSize * vert[ 1 ];\n\n\t\t\t\t\t\tnormals[ normCount ++ ] = normOut.x;\n\t\t\t\t\t\tnormals[ normCount ++ ] = normOut.y;\n\t\t\t\t\t\tnormals[ normCount ++ ] = normOut.z;\n\n\t\t\t\t\t\tuvs[ uvCount ++ ] = 1 - t;\n\t\t\t\t\t\tuvs[ uvCount ++ ] = 1 - s;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// save the faces\n\t\t\t\tfor ( sstep = 0; sstep < segments; sstep ++ ) {\n\n\t\t\t\t\tfor ( tstep = 0; tstep < segments; tstep ++ ) {\n\n\t\t\t\t\t\tv1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n\t\t\t\t\t\tv2 = v1 + 1;\n\t\t\t\t\t\tv3 = v2 + vertPerRow;\n\t\t\t\t\t\tv4 = v1 + vertPerRow;\n\n\t\t\t\t\t\t// Normals and UVs cannot be shared. Without clone(), you can see the consequences\n\t\t\t\t\t\t// of sharing if you call geometry.applyMatrix4( matrix ).\n\t\t\t\t\t\tif ( notDegenerate( v1, v2, v3 ) ) {\n\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v1;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v2;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v3;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( notDegenerate( v1, v3, v4 ) ) {\n\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v1;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v3;\n\t\t\t\t\t\t\tindices[ indexCount ++ ] = v4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// increment only if a surface was used\n\t\t\t\tsurfCount ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t\tthis.computeBoundingSphere();\n\n\t};\n\n\n\tTHREE.TeapotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.TeapotBufferGeometry.prototype.constructor = THREE.TeapotBufferGeometry;\n\t\n\treturn THREE.TeapotBufferGeometry;\n});\n"]}