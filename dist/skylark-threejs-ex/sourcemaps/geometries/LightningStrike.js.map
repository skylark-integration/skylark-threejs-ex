{"version":3,"sources":["geometries/LightningStrike.js"],"names":["define","THREE","threex","SimplexNoise","LightningStrike","rayParameters","BufferGeometry","call","this","type","init","copyParameters","createMesh","prototype","Object","create","constructor","isLightningStrike","RAY_INITIALIZED","RAY_UNBORN","RAY_PROPAGATING","RAY_STEADY","RAY_VANISHING","RAY_EXTINGUISHED","COS30DEG","Math","cos","PI","SIN30DEG","sin","createRandomGenerator","seeds","i","push","random","generator","currentSeed","value","getSeed","setSeed","seed","floor","dest","source","vecCopy","v","clone","sourceOffset","undefined","Vector3","destOffset","timeScale","roughness","straightness","up0","up1","radius0","radius1","radius0Factor","radius1Factor","minRadius","isEternal","birthTime","deathTime","propagationTimeFactor","vanishingTimeFactor","subrayPeriod","subrayDutyCycle","maxIterations","isStatic","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","noiseSeed","onDecideSubrayCreation","onSubrayCreation","update","time","updateMesh","subrays","endPropagationTime","state","beginVanishingTime","visible","seedGenerator","createDefaultSubrayCreationCallbacks","maxSubrays","ceil","pow","max","maxRaySegments","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","Uint32BufferAttribute","Float32BufferAttribute","setAttribute","index","usage","DynamicDrawUsage","array","drawRange","count","needsUpdate","scope","fractalRay","segment","subray","recursion","createPrism","fraction0","fraction1","addNewSubray","initSubray","pos0","copy","pos1","segmentCallback","subrayIndex","MathUtils","lerp","random1","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","length","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","sub","u","uv","vertex","lightningStrike","period","dutyCycle","phase0","phase","currentCycle","childSubraySeed","probability","childSubray","parentSeed","min","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","geometries"],"mappings":"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","file":"../../geometries/LightningStrike.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../math/SimplexNoise'\r\n], function (\r\n    THREE,\r\n    threex, \r\n    SimplexNoise\r\n) {\r\n    'use strict';\r\n    var LightningStrike = function (rayParameters) {\r\n        THREE.BufferGeometry.call(this);\r\n        this.type = 'LightningStrike';\r\n        rayParameters = rayParameters || {};\r\n        this.init(LightningStrike.copyParameters(rayParameters, rayParameters));\r\n        this.createMesh();\r\n    };\r\n    LightningStrike.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n    LightningStrike.prototype.constructor = LightningStrike;\r\n    LightningStrike.prototype.isLightningStrike = true;\r\n    LightningStrike.RAY_INITIALIZED = 0;\r\n    LightningStrike.RAY_UNBORN = 1;\r\n    LightningStrike.RAY_PROPAGATING = 2;\r\n    LightningStrike.RAY_STEADY = 3;\r\n    LightningStrike.RAY_VANISHING = 4;\r\n    LightningStrike.RAY_EXTINGUISHED = 5;\r\n    LightningStrike.COS30DEG = Math.cos(30 * Math.PI / 180);\r\n    LightningStrike.SIN30DEG = Math.sin(30 * Math.PI / 180);\r\n    LightningStrike.createRandomGenerator = function () {\r\n        var numSeeds = 2053;\r\n        var seeds = [];\r\n        for (var i = 0; i < numSeeds; i++) {\r\n            seeds.push(Math.random());\r\n        }\r\n        var generator = {\r\n            currentSeed: 0,\r\n            random: function () {\r\n                var value = seeds[generator.currentSeed];\r\n                generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\r\n                return value;\r\n            },\r\n            getSeed: function () {\r\n                return generator.currentSeed / numSeeds;\r\n            },\r\n            setSeed: function (seed) {\r\n                generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\r\n            }\r\n        };\r\n        return generator;\r\n    };\r\n    LightningStrike.copyParameters = function (dest, source) {\r\n        source = source || {};\r\n        dest = dest || {};\r\n        var vecCopy = function (v) {\r\n            if (source === dest) {\r\n                return v;\r\n            } else {\r\n                return v.clone();\r\n            }\r\n        };\r\n        dest.sourceOffset = source.sourceOffset !== undefined ? vecCopy(source.sourceOffset) : new THREE.Vector3(0, 100, 0), dest.destOffset = source.destOffset !== undefined ? vecCopy(source.destOffset) : new THREE.Vector3(0, 0, 0), dest.timeScale = source.timeScale !== undefined ? source.timeScale : 1, dest.roughness = source.roughness !== undefined ? source.roughness : 0.9, dest.straightness = source.straightness !== undefined ? source.straightness : 0.7, dest.up0 = source.up0 !== undefined ? vecCopy(source.up0) : new THREE.Vector3(0, 0, 1);\r\n        dest.up1 = source.up1 !== undefined ? vecCopy(source.up1) : new THREE.Vector3(0, 0, 1), dest.radius0 = source.radius0 !== undefined ? source.radius0 : 1, dest.radius1 = source.radius1 !== undefined ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2, dest.isEternal = source.isEternal !== undefined ? source.isEternal : source.birthTime === undefined || source.deathTime === undefined, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6;\r\n        dest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\r\n        dest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\r\n        dest.ramification = source.ramification !== undefined ? source.ramification : 5;\r\n        dest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\r\n        dest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\r\n        dest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\r\n        dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\r\n        return dest;\r\n    };\r\n    LightningStrike.prototype.update = function (time) {\r\n        if (this.isStatic)\r\n            return;\r\n        if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\r\n            this.updateMesh(time);\r\n            if (time < this.subrays[0].endPropagationTime) {\r\n                this.state = LightningStrike.RAY_PROPAGATING;\r\n            } else if (time > this.subrays[0].beginVanishingTime) {\r\n                this.state = LightningStrike.RAY_VANISHING;\r\n            } else {\r\n                this.state = LightningStrike.RAY_STEADY;\r\n            }\r\n            this.visible = true;\r\n        } else {\r\n            this.visible = false;\r\n            if (time < this.rayParameters.birthTime) {\r\n                this.state = LightningStrike.RAY_UNBORN;\r\n            } else {\r\n                this.state = LightningStrike.RAY_EXTINGUISHED;\r\n            }\r\n        }\r\n    };\r\n    LightningStrike.prototype.init = function (rayParameters) {\r\n        this.rayParameters = rayParameters;\r\n        this.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor(rayParameters.maxIterations) : 9;\r\n        rayParameters.maxIterations = this.maxIterations;\r\n        this.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\r\n        rayParameters.isStatic = this.isStatic;\r\n        this.ramification = rayParameters.ramification !== undefined ? Math.floor(rayParameters.ramification) : 5;\r\n        rayParameters.ramification = this.ramification;\r\n        this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\r\n        rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\r\n        this.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\r\n        rayParameters.recursionProbability = this.recursionProbability;\r\n        this.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\r\n        rayParameters.generateUVs = this.generateUVs;\r\n        if (rayParameters.randomGenerator !== undefined) {\r\n            this.randomGenerator = rayParameters.randomGenerator;\r\n            this.seedGenerator = rayParameters.randomGenerator;\r\n            if (rayParameters.noiseSeed !== undefined) {\r\n                this.seedGenerator.setSeed(rayParameters.noiseSeed);\r\n            }\r\n        } else {\r\n            this.randomGenerator = LightningStrike.createRandomGenerator();\r\n            this.seedGenerator = Math;\r\n        }\r\n        if (rayParameters.onDecideSubrayCreation !== undefined) {\r\n            this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\r\n        } else {\r\n            this.createDefaultSubrayCreationCallbacks();\r\n            if (rayParameters.onSubrayCreation !== undefined) {\r\n                this.onSubrayCreation = rayParameters.onSubrayCreation;\r\n            }\r\n        }\r\n        this.state = LightningStrike.RAY_INITIALIZED;\r\n        this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\r\n        rayParameters.maxSubrays = this.maxSubrays;\r\n        this.maxRaySegments = 2 * (1 << this.maxIterations);\r\n        this.subrays = [];\r\n        for (var i = 0; i < this.maxSubrays; i++) {\r\n            this.subrays.push(this.createSubray());\r\n        }\r\n        this.raySegments = [];\r\n        for (var i = 0; i < this.maxRaySegments; i++) {\r\n            this.raySegments.push(this.createSegment());\r\n        }\r\n        this.time = 0;\r\n        this.timeFraction = 0;\r\n        this.currentSegmentCallback = null;\r\n        this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\r\n        this.numSubrays = 0;\r\n        this.currentSubray = null;\r\n        this.currentSegmentIndex = 0;\r\n        this.isInitialSegment = false;\r\n        this.subrayProbability = 0;\r\n        this.currentVertex = 0;\r\n        this.currentIndex = 0;\r\n        this.currentCoordinate = 0;\r\n        this.currentUVCoordinate = 0;\r\n        this.vertices = null;\r\n        this.uvs = null;\r\n        this.indices = null;\r\n        this.positionAttribute = null;\r\n        this.uvsAttribute = null;\r\n        this.simplexX = new SimplexNoise(this.seedGenerator);\r\n        this.simplexY = new SimplexNoise(this.seedGenerator);\r\n        this.simplexZ = new SimplexNoise(this.seedGenerator);\r\n        this.forwards = new THREE.Vector3();\r\n        this.forwardsFill = new THREE.Vector3();\r\n        this.side = new THREE.Vector3();\r\n        this.down = new THREE.Vector3();\r\n        this.middlePos = new THREE.Vector3();\r\n        this.middleLinPos = new THREE.Vector3();\r\n        this.newPos = new THREE.Vector3();\r\n        this.vPos = new THREE.Vector3();\r\n        this.cross1 = new THREE.Vector3();\r\n    };\r\n    LightningStrike.prototype.createMesh = function () {\r\n        var maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\r\n        var maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\r\n        var maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\r\n        this.vertices = new Float32Array(maxVerts * 3);\r\n        this.indices = new Uint32Array(maxIndices);\r\n        if (this.generateUVs) {\r\n            this.uvs = new Float32Array(maxVerts * 2);\r\n        }\r\n        this.fillMesh(0);\r\n        this.setIndex(new THREE.Uint32BufferAttribute(this.indices, 1));\r\n        this.positionAttribute = new THREE.Float32BufferAttribute(this.vertices, 3);\r\n        this.setAttribute('position', this.positionAttribute);\r\n        if (this.generateUVs) {\r\n            this.uvsAttribute = new THREE.Float32BufferAttribute(new Float32Array(this.uvs), 2);\r\n            this.setAttribute('uv', this.uvsAttribute);\r\n        }\r\n        if (!this.isStatic) {\r\n            this.index.usage = THREE.DynamicDrawUsage;\r\n            this.positionAttribute.usage = THREE.DynamicDrawUsage;\r\n            if (this.generateUVs) {\r\n                this.uvsAttribute.usage = THREE.DynamicDrawUsage;\r\n            }\r\n        }\r\n        this.vertices = this.positionAttribute.array;\r\n        this.indices = this.index.array;\r\n        if (this.generateUVs) {\r\n            this.uvs = this.uvsAttribute.array;\r\n        }\r\n    };\r\n    LightningStrike.prototype.updateMesh = function (time) {\r\n        this.fillMesh(time);\r\n        this.drawRange.count = this.currentIndex;\r\n        this.index.needsUpdate = true;\r\n        this.positionAttribute.needsUpdate = true;\r\n        if (this.generateUVs) {\r\n            this.uvsAttribute.needsUpdate = true;\r\n        }\r\n    };\r\n    LightningStrike.prototype.fillMesh = function (time) {\r\n        var scope = this;\r\n        this.currentVertex = 0;\r\n        this.currentIndex = 0;\r\n        this.currentCoordinate = 0;\r\n        this.currentUVCoordinate = 0;\r\n        this.fractalRay(time, function fillVertices(segment) {\r\n            var subray = scope.currentSubray;\r\n            if (time < subray.birthTime) {\r\n                return;\r\n            } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\r\n                scope.createPrism(segment);\r\n                scope.onDecideSubrayCreation(segment, scope);\r\n            } else if (time < subray.endPropagationTime) {\r\n                if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\r\n                    scope.createPrism(segment);\r\n                    scope.onDecideSubrayCreation(segment, scope);\r\n                }\r\n            } else if (time < subray.beginVanishingTime) {\r\n                scope.createPrism(segment);\r\n                scope.onDecideSubrayCreation(segment, scope);\r\n            } else {\r\n                if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\r\n                    scope.createPrism(segment);\r\n                }\r\n                scope.onDecideSubrayCreation(segment, scope);\r\n            }\r\n        });\r\n    };\r\n    LightningStrike.prototype.addNewSubray = function () {\r\n        return this.subrays[this.numSubrays++];\r\n    };\r\n    LightningStrike.prototype.initSubray = function (subray, rayParameters) {\r\n        subray.pos0.copy(rayParameters.sourceOffset);\r\n        subray.pos1.copy(rayParameters.destOffset);\r\n        subray.up0.copy(rayParameters.up0);\r\n        subray.up1.copy(rayParameters.up1);\r\n        subray.radius0 = rayParameters.radius0;\r\n        subray.radius1 = rayParameters.radius1;\r\n        subray.birthTime = rayParameters.birthTime;\r\n        subray.deathTime = rayParameters.deathTime;\r\n        subray.timeScale = rayParameters.timeScale;\r\n        subray.roughness = rayParameters.roughness;\r\n        subray.straightness = rayParameters.straightness;\r\n        subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\r\n        subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\r\n        subray.maxIterations = this.maxIterations;\r\n        subray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\r\n        subray.recursion = 0;\r\n    };\r\n    LightningStrike.prototype.fractalRay = function (time, segmentCallback) {\r\n        this.time = time;\r\n        this.currentSegmentCallback = segmentCallback;\r\n        this.numSubrays = 0;\r\n        this.initSubray(this.addNewSubray(), this.rayParameters);\r\n        for (var subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\r\n            var subray = this.subrays[subrayIndex];\r\n            this.currentSubray = subray;\r\n            this.randomGenerator.setSeed(subray.seed);\r\n            subray.endPropagationTime = THREE.MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\r\n            subray.beginVanishingTime = THREE.MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\r\n            var random1 = this.randomGenerator.random;\r\n            subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\r\n            subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\r\n            this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\r\n            this.currentSegmentIndex = 0;\r\n            this.isInitialSegment = true;\r\n            var segment = this.getNewSegment();\r\n            segment.iteration = 0;\r\n            segment.pos0.copy(subray.pos0);\r\n            segment.pos1.copy(subray.pos1);\r\n            segment.linPos0.copy(subray.linPos0);\r\n            segment.linPos1.copy(subray.linPos1);\r\n            segment.up0.copy(subray.up0);\r\n            segment.up1.copy(subray.up1);\r\n            segment.radius0 = subray.radius0;\r\n            segment.radius1 = subray.radius1;\r\n            segment.fraction0 = 0;\r\n            segment.fraction1 = 1;\r\n            segment.positionVariationFactor = 1 - subray.straightness;\r\n            this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\r\n            this.fractalRayRecursive(segment);\r\n        }\r\n        this.currentSegmentCallback = null;\r\n        this.currentSubray = null;\r\n    };\r\n    LightningStrike.prototype.fractalRayRecursive = function (segment) {\r\n        if (segment.iteration >= this.currentSubray.maxIterations) {\r\n            this.currentSegmentCallback(segment);\r\n            return;\r\n        }\r\n        this.forwards.subVectors(segment.pos1, segment.pos0);\r\n        var lForwards = this.forwards.length();\r\n        if (lForwards < 0.000001) {\r\n            this.forwards.set(0, 0, 0.01);\r\n            lForwards = this.forwards.length();\r\n        }\r\n        var middleRadius = (segment.radius0 + segment.radius1) * 0.5;\r\n        var middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\r\n        var timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\r\n        this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\r\n        this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\r\n        var p = this.middleLinPos;\r\n        this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\r\n        this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\r\n        this.newPos.add(this.middlePos);\r\n        var newSegment1 = this.getNewSegment();\r\n        newSegment1.pos0.copy(segment.pos0);\r\n        newSegment1.pos1.copy(this.newPos);\r\n        newSegment1.linPos0.copy(segment.linPos0);\r\n        newSegment1.linPos1.copy(this.middleLinPos);\r\n        newSegment1.up0.copy(segment.up0);\r\n        newSegment1.up1.copy(segment.up1);\r\n        newSegment1.radius0 = segment.radius0;\r\n        newSegment1.radius1 = middleRadius;\r\n        newSegment1.fraction0 = segment.fraction0;\r\n        newSegment1.fraction1 = middleFraction;\r\n        newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\r\n        newSegment1.iteration = segment.iteration + 1;\r\n        var newSegment2 = this.getNewSegment();\r\n        newSegment2.pos0.copy(this.newPos);\r\n        newSegment2.pos1.copy(segment.pos1);\r\n        newSegment2.linPos0.copy(this.middleLinPos);\r\n        newSegment2.linPos1.copy(segment.linPos1);\r\n        this.cross1.crossVectors(segment.up0, this.forwards.normalize());\r\n        newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\r\n        newSegment2.up1.copy(segment.up1);\r\n        newSegment2.radius0 = middleRadius;\r\n        newSegment2.radius1 = segment.radius1;\r\n        newSegment2.fraction0 = middleFraction;\r\n        newSegment2.fraction1 = segment.fraction1;\r\n        newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\r\n        newSegment2.iteration = segment.iteration + 1;\r\n        this.fractalRayRecursive(newSegment1);\r\n        this.fractalRayRecursive(newSegment2);\r\n    };\r\n    LightningStrike.prototype.createPrism = function (segment) {\r\n        this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\r\n        if (this.isInitialSegment) {\r\n            this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\r\n            this.isInitialSegment = false;\r\n        }\r\n        this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\r\n        this.createPrismFaces();\r\n    };\r\n    LightningStrike.prototype.createTriangleVerticesWithoutUVs = function (pos, up, forwards, radius) {\r\n        this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\r\n        this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\r\n        var p = this.vPos;\r\n        var v = this.vertices;\r\n        p.copy(pos).sub(this.side).add(this.down);\r\n        v[this.currentCoordinate++] = p.x;\r\n        v[this.currentCoordinate++] = p.y;\r\n        v[this.currentCoordinate++] = p.z;\r\n        p.copy(pos).add(this.side).add(this.down);\r\n        v[this.currentCoordinate++] = p.x;\r\n        v[this.currentCoordinate++] = p.y;\r\n        v[this.currentCoordinate++] = p.z;\r\n        p.copy(up).multiplyScalar(radius).add(pos);\r\n        v[this.currentCoordinate++] = p.x;\r\n        v[this.currentCoordinate++] = p.y;\r\n        v[this.currentCoordinate++] = p.z;\r\n        this.currentVertex += 3;\r\n    };\r\n    LightningStrike.prototype.createTriangleVerticesWithUVs = function (pos, up, forwards, radius, u) {\r\n        this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\r\n        this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\r\n        var p = this.vPos;\r\n        var v = this.vertices;\r\n        var uv = this.uvs;\r\n        p.copy(pos).sub(this.side).add(this.down);\r\n        v[this.currentCoordinate++] = p.x;\r\n        v[this.currentCoordinate++] = p.y;\r\n        v[this.currentCoordinate++] = p.z;\r\n        uv[this.currentUVCoordinate++] = u;\r\n        uv[this.currentUVCoordinate++] = 0;\r\n        p.copy(pos).add(this.side).add(this.down);\r\n        v[this.currentCoordinate++] = p.x;\r\n        v[this.currentCoordinate++] = p.y;\r\n        v[this.currentCoordinate++] = p.z;\r\n        uv[this.currentUVCoordinate++] = u;\r\n        uv[this.currentUVCoordinate++] = 0.5;\r\n        p.copy(up).multiplyScalar(radius).add(pos);\r\n        v[this.currentCoordinate++] = p.x;\r\n        v[this.currentCoordinate++] = p.y;\r\n        v[this.currentCoordinate++] = p.z;\r\n        uv[this.currentUVCoordinate++] = u;\r\n        uv[this.currentUVCoordinate++] = 1;\r\n        this.currentVertex += 3;\r\n    };\r\n    LightningStrike.prototype.createPrismFaces = function (vertex) {\r\n        var indices = this.indices;\r\n        var vertex = this.currentVertex - 6;\r\n        indices[this.currentIndex++] = vertex + 1;\r\n        indices[this.currentIndex++] = vertex + 2;\r\n        indices[this.currentIndex++] = vertex + 5;\r\n        indices[this.currentIndex++] = vertex + 1;\r\n        indices[this.currentIndex++] = vertex + 5;\r\n        indices[this.currentIndex++] = vertex + 4;\r\n        indices[this.currentIndex++] = vertex + 0;\r\n        indices[this.currentIndex++] = vertex + 1;\r\n        indices[this.currentIndex++] = vertex + 4;\r\n        indices[this.currentIndex++] = vertex + 0;\r\n        indices[this.currentIndex++] = vertex + 4;\r\n        indices[this.currentIndex++] = vertex + 3;\r\n        indices[this.currentIndex++] = vertex + 2;\r\n        indices[this.currentIndex++] = vertex + 0;\r\n        indices[this.currentIndex++] = vertex + 3;\r\n        indices[this.currentIndex++] = vertex + 2;\r\n        indices[this.currentIndex++] = vertex + 3;\r\n        indices[this.currentIndex++] = vertex + 5;\r\n    };\r\n    LightningStrike.prototype.createDefaultSubrayCreationCallbacks = function () {\r\n        var random1 = this.randomGenerator.random;\r\n        this.onDecideSubrayCreation = function (segment, lightningStrike) {\r\n            var subray = lightningStrike.currentSubray;\r\n            var period = lightningStrike.rayParameters.subrayPeriod;\r\n            var dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\r\n            var phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : THREE.MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\r\n            var phase = lightningStrike.time - phase0;\r\n            var currentCycle = Math.floor(phase / period);\r\n            var childSubraySeed = random1() * (currentCycle + 1);\r\n            var isActive = phase % period <= dutyCycle * period;\r\n            var probability = 0;\r\n            if (isActive) {\r\n                probability = lightningStrike.subrayProbability;\r\n            }\r\n            if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\r\n                var childSubray = lightningStrike.addNewSubray();\r\n                var parentSeed = lightningStrike.randomGenerator.getSeed();\r\n                childSubray.seed = childSubraySeed;\r\n                lightningStrike.randomGenerator.setSeed(childSubraySeed);\r\n                childSubray.recursion = subray.recursion + 1;\r\n                childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\r\n                childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\r\n                childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\r\n                childSubray.up0.copy(subray.up0);\r\n                childSubray.up1.copy(subray.up1);\r\n                childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\r\n                childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\r\n                childSubray.birthTime = phase0 + currentCycle * period;\r\n                childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\r\n                if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\r\n                    childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\r\n                    childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\r\n                }\r\n                childSubray.timeScale = subray.timeScale * 2;\r\n                childSubray.roughness = subray.roughness;\r\n                childSubray.straightness = subray.straightness;\r\n                childSubray.propagationTimeFactor = subray.propagationTimeFactor;\r\n                childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\r\n                lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\r\n                lightningStrike.randomGenerator.setSeed(parentSeed);\r\n            }\r\n        };\r\n        var vec1Pos = new THREE.Vector3();\r\n        var vec2Forward = new THREE.Vector3();\r\n        var vec3Side = new THREE.Vector3();\r\n        var vec4Up = new THREE.Vector3();\r\n        this.onSubrayCreation = function (segment, parentSubray, childSubray, lightningStrike) {\r\n            lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\r\n        };\r\n        this.subrayConePosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\r\n            childSubray.pos0.copy(segment.pos0);\r\n            vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\r\n            vec2Forward.copy(vec1Pos).normalize();\r\n            vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\r\n            var length = vec1Pos.length();\r\n            vec3Side.crossVectors(parentSubray.up0, vec2Forward);\r\n            var angle = 2 * Math.PI * random1();\r\n            vec3Side.multiplyScalar(Math.cos(angle));\r\n            vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\r\n            childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\r\n        };\r\n        this.subrayCylinderPosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\r\n            childSubray.pos0.copy(segment.pos0);\r\n            vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\r\n            vec2Forward.copy(vec1Pos).normalize();\r\n            vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\r\n            var length = vec1Pos.length();\r\n            vec3Side.crossVectors(parentSubray.up0, vec2Forward);\r\n            var angle = 2 * Math.PI * random1();\r\n            vec3Side.multiplyScalar(Math.cos(angle));\r\n            vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\r\n            childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\r\n        };\r\n    };\r\n    LightningStrike.prototype.createSubray = function () {\r\n        return {\r\n            seed: 0,\r\n            maxIterations: 0,\r\n            recursion: 0,\r\n            pos0: new THREE.Vector3(),\r\n            pos1: new THREE.Vector3(),\r\n            linPos0: new THREE.Vector3(),\r\n            linPos1: new THREE.Vector3(),\r\n            up0: new THREE.Vector3(),\r\n            up1: new THREE.Vector3(),\r\n            radius0: 0,\r\n            radius1: 0,\r\n            birthTime: 0,\r\n            deathTime: 0,\r\n            timeScale: 0,\r\n            roughness: 0,\r\n            straightness: 0,\r\n            propagationTimeFactor: 0,\r\n            vanishingTimeFactor: 0,\r\n            endPropagationTime: 0,\r\n            beginVanishingTime: 0\r\n        };\r\n    };\r\n    LightningStrike.prototype.createSegment = function () {\r\n        return {\r\n            iteration: 0,\r\n            pos0: new THREE.Vector3(),\r\n            pos1: new THREE.Vector3(),\r\n            linPos0: new THREE.Vector3(),\r\n            linPos1: new THREE.Vector3(),\r\n            up0: new THREE.Vector3(),\r\n            up1: new THREE.Vector3(),\r\n            radius0: 0,\r\n            radius1: 0,\r\n            fraction0: 0,\r\n            fraction1: 0,\r\n            positionVariationFactor: 0\r\n        };\r\n    };\r\n    LightningStrike.prototype.getNewSegment = function () {\r\n        return this.raySegments[this.currentSegmentIndex++];\r\n    };\r\n    LightningStrike.prototype.copy = function (source) {\r\n        THREE.BufferGeometry.prototype.copy.call(this, source);\r\n        this.init(LightningStrike.copyParameters({}, source.rayParameters));\r\n        return this;\r\n    };\r\n    LightningStrike.prototype.clone = function () {\r\n        return new this.constructor(LightningStrike.copyParameters({}, this.rayParameters));\r\n    };\r\n\r\n    return threex.geometries.LightningStrike = LightningStrike;\r\n});"]}