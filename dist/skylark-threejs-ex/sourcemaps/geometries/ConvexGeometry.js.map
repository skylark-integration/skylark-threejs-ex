{"version":3,"sources":["geometries/ConvexGeometry.js"],"names":["define","THREE","ConvexGeometry","points","Geometry","call","this","fromBufferGeometry","ConvexBufferGeometry","mergeVertices","prototype","Object","create","constructor","BufferGeometry","vertices","normals","undefined","ConvexHull","console","error","faces","setFromPoints","i","length","face","edge","point","head","push","x","y","z","normal","next","setAttribute","Float32BufferAttribute"],"mappings":";;;;;;;AAAAA,QACC,kBACA,sBACC,SAASC,GAwEV,OAjEAA,EAAMC,eAAiB,SAAWC,GAEjCF,EAAMG,SAASC,KAAMC,MAErBA,KAAKC,mBAAoB,IAAIN,EAAMO,qBAAsBL,IACzDG,KAAKG,iBAINR,EAAMC,eAAeQ,UAAYC,OAAOC,OAAQX,EAAMG,SAASM,WAC/DT,EAAMC,eAAeQ,UAAUG,YAAcZ,EAAMC,eAInDD,EAAMO,qBAAuB,SAAWL,GAEvCF,EAAMa,eAAeT,KAAMC,MAI3B,IAAIS,KACAC,UAEsBC,IAArBhB,EAAMiB,YAEVC,QAAQC,MAAO,+EAUhB,IANA,IAIIC,GAJa,IAAIpB,EAAMiB,YAAaI,cAAenB,GAIhCkB,MAEbE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAO,CAEzC,IAAIE,EAAOJ,EAAOE,GACdG,EAAOD,EAAKC,KAIhB,EAAG,CAEF,IAAIC,EAAQD,EAAKE,OAAOD,MAExBZ,EAASc,KAAMF,EAAMG,EAAGH,EAAMI,EAAGJ,EAAMK,GACvChB,EAAQa,KAAMJ,EAAKQ,OAAOH,EAAGL,EAAKQ,OAAOF,EAAGN,EAAKQ,OAAOD,GAExDN,EAAOA,EAAKQ,WAEHR,IAASD,EAAKC,MAMzBpB,KAAK6B,aAAc,WAAY,IAAIlC,EAAMmC,uBAAwBrB,EAAU,IAC3ET,KAAK6B,aAAc,SAAU,IAAIlC,EAAMmC,uBAAwBpB,EAAS,KAIzEf,EAAMO,qBAAqBE,UAAYC,OAAOC,OAAQX,EAAMa,eAAeJ,WAC3ET,EAAMO,qBAAqBE,UAAUG,YAAcZ,EAAMO,qBAElDP,EAAMC","file":"../../geometries/ConvexGeometry.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../math/ConvexHull\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ConvexGeometry\n\n\tTHREE.ConvexGeometry = function ( points ) {\n\n\t\tTHREE.Geometry.call( this );\n\n\t\tthis.fromBufferGeometry( new THREE.ConvexBufferGeometry( points ) );\n\t\tthis.mergeVertices();\n\n\t};\n\n\tTHREE.ConvexGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ConvexGeometry.prototype.constructor = THREE.ConvexGeometry;\n\n\t// ConvexBufferGeometry\n\n\tTHREE.ConvexBufferGeometry = function ( points ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\t// buffers\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\n\t\tif ( THREE.ConvexHull === undefined ) {\n\n\t\t\tconsole.error( 'THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.ConvexHull' );\n\n\t\t}\n\n\t\tvar convexHull = new THREE.ConvexHull().setFromPoints( points );\n\n\t\t// generate vertices and normals\n\n\t\tvar faces = convexHull.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\t\t\tvar edge = face.edge;\n\n\t\t\t// we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n\t\t\tdo {\n\n\t\t\t\tvar point = edge.head().point;\n\n\t\t\t\tvertices.push( point.x, point.y, point.z );\n\t\t\t\tnormals.push( face.normal.x, face.normal.y, face.normal.z );\n\n\t\t\t\tedge = edge.next;\n\n\t\t\t} while ( edge !== face.edge );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t};\n\n\tTHREE.ConvexBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.ConvexBufferGeometry.prototype.constructor = THREE.ConvexBufferGeometry;\n\t\n\treturn THREE.ConvexGeometry;\n});\n"]}