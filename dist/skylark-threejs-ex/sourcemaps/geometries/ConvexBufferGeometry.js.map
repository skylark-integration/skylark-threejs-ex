{"version":3,"sources":["geometries/ConvexBufferGeometry.js"],"names":["define","THREE","threex","ConvexHull","ConvexBufferGeometry","points","BufferGeometry","call","this","vertices","normals","undefined","console","error","faces","setFromPoints","i","length","face","edge","point","head","push","x","y","z","normal","next","setAttribute","Float32BufferAttribute","prototype","Object","create","constructor","geometries"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,sBACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAuB,SAAUC,GACjCJ,EAAMK,eAAeC,KAAKC,MAC1B,IAAIC,KACAC,UACeC,IAAfR,GACAS,QAAQC,MAAM,yEAIlB,IAFA,IACIC,GADa,IAAIX,GAAaY,cAAcV,GACzBS,MACdE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnC,IAAIE,EAAOJ,EAAME,GACbG,EAAOD,EAAKC,KAChB,EAAG,CACC,IAAIC,EAAQD,EAAKE,OAAOD,MACxBX,EAASa,KAAKF,EAAMG,EAAGH,EAAMI,EAAGJ,EAAMK,GACtCf,EAAQY,KAAKJ,EAAKQ,OAAOH,EAAGL,EAAKQ,OAAOF,EAAGN,EAAKQ,OAAOD,GACvDN,EAAOA,EAAKQ,WACPR,IAASD,EAAKC,MAE3BX,KAAKoB,aAAa,WAAY,IAAI3B,EAAM4B,uBAAuBpB,EAAU,IACzED,KAAKoB,aAAa,SAAU,IAAI3B,EAAM4B,uBAAuBnB,EAAS,KAK1E,OAHAN,EAAqB0B,UAAYC,OAAOC,OAAO/B,EAAMK,eAAewB,YACrCG,YAAc7B,EAEtCF,EAAOgC,WAAW9B,qBAAuBA","file":"../../geometries/ConvexBufferGeometry.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../math/ConvexHull'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    ConvexHull\r\n) {\r\n    'use strict';\r\n    var ConvexBufferGeometry = function (points) {\r\n        THREE.BufferGeometry.call(this);\r\n        var vertices = [];\r\n        var normals = [];\r\n        if (ConvexHull === undefined) {\r\n            console.error('THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on ConvexHull');\r\n        }\r\n        var convexHull = new ConvexHull().setFromPoints(points);\r\n        var faces = convexHull.faces;\r\n        for (var i = 0; i < faces.length; i++) {\r\n            var face = faces[i];\r\n            var edge = face.edge;\r\n            do {\r\n                var point = edge.head().point;\r\n                vertices.push(point.x, point.y, point.z);\r\n                normals.push(face.normal.x, face.normal.y, face.normal.z);\r\n                edge = edge.next;\r\n            } while (edge !== face.edge);\r\n        }\r\n        this.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n        this.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\r\n    };\r\n    ConvexBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n    ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\r\n\r\n    return threex.geometries.ConvexBufferGeometry = ConvexBufferGeometry;\r\n});"]}