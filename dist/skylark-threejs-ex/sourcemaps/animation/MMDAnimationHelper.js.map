{"version":3,"sources":["animation/MMDAnimationHelper.js"],"names":["define","THREE","threex","CCDIKSolver","MMDPhysics","MMDAnimationHelper","params","this","meshes","camera","cameraTarget","Object3D","name","audio","audioManager","objects","WeakMap","configuration","sync","undefined","afterglow","resetPhysicsOnLoop","enabled","animation","ik","grant","physics","cameraAnimation","onBeforePhysics","sharedPhysics","masterPhysics","AudioManager","elapsedTime","currentTime","delayTime","audioDuration","buffer","duration","GrantSolver","mesh","grants","quaternion","prototype","constructor","add","object","isSkinnedMesh","_addMesh","isCamera","_setupCamera","type","Error","_setupAudio","_syncDuration","remove","_removeMesh","_clearCamera","_clearAudio","update","delta","control","i","length","_animateMesh","_updateSharedPhysics","_animateCamera","pose","vpd","resetPose","bones","skeleton","boneParams","boneNameDictionary","il","vector","Vector3","Quaternion","boneParam","boneIndex","bone","position","fromArray","translation","multiply","updateMatrixWorld","_createCCDIKSolver","saveOriginalBonesBeforeIK","createGrantSolver","enable","key","_optimizeIK","geometry","userData","MMD","indexOf","push","set","looped","_setupMeshAnimation","_setupMeshPhysics","clearCamera","_setupCameraAnimation","clearAudio","found","writeIndex","delete","get","animations","Array","isArray","mixer","AnimationMixer","clipAction","play","addEventListener","event","tracks","action","_clip","slice","ikSolver","grantSolver","world","_getMasterPhysics","_createMMDPhysics","animationWarmup","reset","warmup","_restoreBones","_saveBones","updateProjectionMatrix","up","applyQuaternion","lookAt","physicsEnabled","iks","links","j","jl","link","index","rigidBodyType","rigidBodies","constraints","max","_actions","clip","has","Math","_updatePropertyMixersBuffer","propertyMixers","_bindings","accuIndex","_accuIndex","propertyMixer","offset","valueSize","binding","getValue","backupBones","Float32Array","toArray","p","updateRigidBodies","stepSimulation","updateBones","elapsed","_shouldStopAudio","stop","_shouldStartAudio","isPlaying","startTime","parentBone","parentIndex","isLocal","affectPosition","affectRotation","slerp","ratio"],"mappings":"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","file":"../../animation/MMDAnimationHelper.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './CCDIKSolver',\n    './MMDPhysics'\n], function (\n    THREE, \n    threex,\n    CCDIKSolver, \n    MMDPhysics\n) {\n    'use strict';\n    var MMDAnimationHelper = function () {\n        function MMDAnimationHelper(params) {\n            params = params || {};\n            this.meshes = [];\n            this.camera = null;\n            this.cameraTarget = new THREE.Object3D();\n            this.cameraTarget.name = 'target';\n            this.audio = null;\n            this.audioManager = null;\n            this.objects = new WeakMap();\n            this.configuration = {\n                sync: params.sync !== undefined ? params.sync : true,\n                afterglow: params.afterglow !== undefined ? params.afterglow : 0,\n                resetPhysicsOnLoop: params.resetPhysicsOnLoop !== undefined ? params.resetPhysicsOnLoop : true\n            };\n            this.enabled = {\n                animation: true,\n                ik: true,\n                grant: true,\n                physics: true,\n                cameraAnimation: true\n            };\n            this.onBeforePhysics = function () {\n            };\n            this.sharedPhysics = false;\n            this.masterPhysics = null;\n        }\n        MMDAnimationHelper.prototype = {\n            constructor: MMDAnimationHelper,\n            add: function (object, params) {\n                params = params || {};\n                if (object.isSkinnedMesh) {\n                    this._addMesh(object, params);\n                } else if (object.isCamera) {\n                    this._setupCamera(object, params);\n                } else if (object.type === 'Audio') {\n                    this._setupAudio(object, params);\n                } else {\n                    throw new Error('THREE.MMDAnimationHelper.add: ' + 'accepts only ' + 'THREE.SkinnedMesh or ' + 'THREE.Camera or ' + 'THREE.Audio instance.');\n                }\n                if (this.configuration.sync)\n                    this._syncDuration();\n                return this;\n            },\n            remove: function (object) {\n                if (object.isSkinnedMesh) {\n                    this._removeMesh(object);\n                } else if (object.isCamera) {\n                    this._clearCamera(object);\n                } else if (object.type === 'Audio') {\n                    this._clearAudio(object);\n                } else {\n                    throw new Error('THREE.MMDAnimationHelper.remove: ' + 'accepts only ' + 'THREE.SkinnedMesh or ' + 'THREE.Camera or ' + 'THREE.Audio instance.');\n                }\n                if (this.configuration.sync)\n                    this._syncDuration();\n                return this;\n            },\n            update: function (delta) {\n                if (this.audioManager !== null)\n                    this.audioManager.control(delta);\n                for (var i = 0; i < this.meshes.length; i++) {\n                    this._animateMesh(this.meshes[i], delta);\n                }\n                if (this.sharedPhysics)\n                    this._updateSharedPhysics(delta);\n                if (this.camera !== null)\n                    this._animateCamera(this.camera, delta);\n                return this;\n            },\n            pose: function (mesh, vpd, params) {\n                params = params || {};\n                if (params.resetPose !== false)\n                    mesh.pose();\n                var bones = mesh.skeleton.bones;\n                var boneParams = vpd.bones;\n                var boneNameDictionary = {};\n                for (var i = 0, il = bones.length; i < il; i++) {\n                    boneNameDictionary[bones[i].name] = i;\n                }\n                var vector = new THREE.Vector3();\n                var quaternion = new THREE.Quaternion();\n                for (var i = 0, il = boneParams.length; i < il; i++) {\n                    var boneParam = boneParams[i];\n                    var boneIndex = boneNameDictionary[boneParam.name];\n                    if (boneIndex === undefined)\n                        continue;\n                    var bone = bones[boneIndex];\n                    bone.position.add(vector.fromArray(boneParam.translation));\n                    bone.quaternion.multiply(quaternion.fromArray(boneParam.quaternion));\n                }\n                mesh.updateMatrixWorld(true);\n                if (params.ik !== false) {\n                    this._createCCDIKSolver(mesh).update(params.saveOriginalBonesBeforeIK);\n                }\n                if (params.grant !== false) {\n                    this.createGrantSolver(mesh).update();\n                }\n                return this;\n            },\n            enable: function (key, enabled) {\n                if (this.enabled[key] === undefined) {\n                    throw new Error('THREE.MMDAnimationHelper.enable: ' + 'unknown key ' + key);\n                }\n                this.enabled[key] = enabled;\n                if (key === 'physics') {\n                    for (var i = 0, il = this.meshes.length; i < il; i++) {\n                        this._optimizeIK(this.meshes[i], enabled);\n                    }\n                }\n                return this;\n            },\n            createGrantSolver: function (mesh) {\n                return new GrantSolver(mesh, mesh.geometry.userData.MMD.grants);\n            },\n            _addMesh: function (mesh, params) {\n                if (this.meshes.indexOf(mesh) >= 0) {\n                    throw new Error('THREE.MMDAnimationHelper._addMesh: ' + \"SkinnedMesh '\" + mesh.name + \"' has already been added.\");\n                }\n                this.meshes.push(mesh);\n                this.objects.set(mesh, { looped: false });\n                this._setupMeshAnimation(mesh, params.animation);\n                if (params.physics !== false) {\n                    this._setupMeshPhysics(mesh, params);\n                }\n                return this;\n            },\n            _setupCamera: function (camera, params) {\n                if (this.camera === camera) {\n                    throw new Error('THREE.MMDAnimationHelper._setupCamera: ' + \"Camera '\" + camera.name + \"' has already been set.\");\n                }\n                if (this.camera)\n                    this.clearCamera(this.camera);\n                this.camera = camera;\n                camera.add(this.cameraTarget);\n                this.objects.set(camera, {});\n                if (params.animation !== undefined) {\n                    this._setupCameraAnimation(camera, params.animation);\n                }\n                return this;\n            },\n            _setupAudio: function (audio, params) {\n                if (this.audio === audio) {\n                    throw new Error('THREE.MMDAnimationHelper._setupAudio: ' + \"Audio '\" + audio.name + \"' has already been set.\");\n                }\n                if (this.audio)\n                    this.clearAudio(this.audio);\n                this.audio = audio;\n                this.audioManager = new AudioManager(audio, params);\n                this.objects.set(this.audioManager, { duration: this.audioManager.duration });\n                return this;\n            },\n            _removeMesh: function (mesh) {\n                var found = false;\n                var writeIndex = 0;\n                for (var i = 0, il = this.meshes.length; i < il; i++) {\n                    if (this.meshes[i] === mesh) {\n                        this.objects.delete(mesh);\n                        found = true;\n                        continue;\n                    }\n                    this.meshes[writeIndex++] = this.meshes[i];\n                }\n                if (!found) {\n                    throw new Error('THREE.MMDAnimationHelper._removeMesh: ' + \"SkinnedMesh '\" + mesh.name + \"' has not been added yet.\");\n                }\n                this.meshes.length = writeIndex;\n                return this;\n            },\n            _clearCamera: function (camera) {\n                if (camera !== this.camera) {\n                    throw new Error('THREE.MMDAnimationHelper._clearCamera: ' + \"Camera '\" + camera.name + \"' has not been set yet.\");\n                }\n                this.camera.remove(this.cameraTarget);\n                this.objects.delete(this.camera);\n                this.camera = null;\n                return this;\n            },\n            _clearAudio: function (audio) {\n                if (audio !== this.audio) {\n                    throw new Error('THREE.MMDAnimationHelper._clearAudio: ' + \"Audio '\" + audio.name + \"' has not been set yet.\");\n                }\n                this.objects.delete(this.audioManager);\n                this.audio = null;\n                this.audioManager = null;\n                return this;\n            },\n            _setupMeshAnimation: function (mesh, animation) {\n                var objects = this.objects.get(mesh);\n                if (animation !== undefined) {\n                    var animations = Array.isArray(animation) ? animation : [animation];\n                    objects.mixer = new THREE.AnimationMixer(mesh);\n                    for (var i = 0, il = animations.length; i < il; i++) {\n                        objects.mixer.clipAction(animations[i]).play();\n                    }\n                    objects.mixer.addEventListener('loop', function (event) {\n                        var tracks = event.action._clip.tracks;\n                        if (tracks.length > 0 && tracks[0].name.slice(0, 6) !== '.bones')\n                            return;\n                        objects.looped = true;\n                    });\n                }\n                objects.ikSolver = this._createCCDIKSolver(mesh);\n                objects.grantSolver = this.createGrantSolver(mesh);\n                return this;\n            },\n            _setupCameraAnimation: function (camera, animation) {\n                var animations = Array.isArray(animation) ? animation : [animation];\n                var objects = this.objects.get(camera);\n                objects.mixer = new THREE.AnimationMixer(camera);\n                for (var i = 0, il = animations.length; i < il; i++) {\n                    objects.mixer.clipAction(animations[i]).play();\n                }\n            },\n            _setupMeshPhysics: function (mesh, params) {\n                var objects = this.objects.get(mesh);\n                if (params.world === undefined && this.sharedPhysics) {\n                    var masterPhysics = this._getMasterPhysics();\n                    if (masterPhysics !== null)\n                        world = masterPhysics.world;\n                }\n                objects.physics = this._createMMDPhysics(mesh, params);\n                if (objects.mixer && params.animationWarmup !== false) {\n                    this._animateMesh(mesh, 0);\n                    objects.physics.reset();\n                }\n                objects.physics.warmup(params.warmup !== undefined ? params.warmup : 60);\n                this._optimizeIK(mesh, true);\n            },\n            _animateMesh: function (mesh, delta) {\n                var objects = this.objects.get(mesh);\n                var mixer = objects.mixer;\n                var ikSolver = objects.ikSolver;\n                var grantSolver = objects.grantSolver;\n                var physics = objects.physics;\n                var looped = objects.looped;\n                if (mixer && this.enabled.animation) {\n                    this._restoreBones(mesh);\n                    mixer.update(delta);\n                    this._saveBones(mesh);\n                    if (ikSolver && this.enabled.ik) {\n                        mesh.updateMatrixWorld(true);\n                        ikSolver.update();\n                    }\n                    if (grantSolver && this.enabled.grant) {\n                        grantSolver.update();\n                    }\n                }\n                if (looped === true && this.enabled.physics) {\n                    if (physics && this.configuration.resetPhysicsOnLoop)\n                        physics.reset();\n                    objects.looped = false;\n                }\n                if (physics && this.enabled.physics && !this.sharedPhysics) {\n                    this.onBeforePhysics(mesh);\n                    physics.update(delta);\n                }\n            },\n            _animateCamera: function (camera, delta) {\n                var mixer = this.objects.get(camera).mixer;\n                if (mixer && this.enabled.cameraAnimation) {\n                    mixer.update(delta);\n                    camera.updateProjectionMatrix();\n                    camera.up.set(0, 1, 0);\n                    camera.up.applyQuaternion(camera.quaternion);\n                    camera.lookAt(this.cameraTarget.position);\n                }\n            },\n            _optimizeIK: function (mesh, physicsEnabled) {\n                var iks = mesh.geometry.userData.MMD.iks;\n                var bones = mesh.geometry.userData.MMD.bones;\n                for (var i = 0, il = iks.length; i < il; i++) {\n                    var ik = iks[i];\n                    var links = ik.links;\n                    for (var j = 0, jl = links.length; j < jl; j++) {\n                        var link = links[j];\n                        if (physicsEnabled === true) {\n                            link.enabled = bones[link.index].rigidBodyType > 0 ? false : true;\n                        } else {\n                            link.enabled = true;\n                        }\n                    }\n                }\n            },\n            _createCCDIKSolver: function (mesh) {\n                if (CCDIKSolver === undefined) {\n                    throw new Error('THREE.MMDAnimationHelper: Import CCDIKSolver.');\n                }\n                return new CCDIKSolver(mesh, mesh.geometry.userData.MMD.iks);\n            },\n            _createMMDPhysics: function (mesh, params) {\n                if (MMDPhysics === undefined) {\n                    throw new Error('THREE.MMDPhysics: Import MMDPhysics.');\n                }\n                return new MMDPhysics(mesh, mesh.geometry.userData.MMD.rigidBodies, mesh.geometry.userData.MMD.constraints, params);\n            },\n            _syncDuration: function () {\n                var max = 0;\n                var objects = this.objects;\n                var meshes = this.meshes;\n                var camera = this.camera;\n                var audioManager = this.audioManager;\n                for (var i = 0, il = meshes.length; i < il; i++) {\n                    var mixer = this.objects.get(meshes[i]).mixer;\n                    if (mixer === undefined)\n                        continue;\n                    for (var j = 0; j < mixer._actions.length; j++) {\n                        var clip = mixer._actions[j]._clip;\n                        if (!objects.has(clip)) {\n                            objects.set(clip, { duration: clip.duration });\n                        }\n                        max = Math.max(max, objects.get(clip).duration);\n                    }\n                }\n                if (camera !== null) {\n                    var mixer = this.objects.get(camera).mixer;\n                    if (mixer !== undefined) {\n                        for (var i = 0, il = mixer._actions.length; i < il; i++) {\n                            var clip = mixer._actions[i]._clip;\n                            if (!objects.has(clip)) {\n                                objects.set(clip, { duration: clip.duration });\n                            }\n                            max = Math.max(max, objects.get(clip).duration);\n                        }\n                    }\n                }\n                if (audioManager !== null) {\n                    max = Math.max(max, objects.get(audioManager).duration);\n                }\n                max += this.configuration.afterglow;\n                for (var i = 0, il = this.meshes.length; i < il; i++) {\n                    var mixer = this.objects.get(this.meshes[i]).mixer;\n                    if (mixer === undefined)\n                        continue;\n                    for (var j = 0, jl = mixer._actions.length; j < jl; j++) {\n                        mixer._actions[j]._clip.duration = max;\n                    }\n                }\n                if (camera !== null) {\n                    var mixer = this.objects.get(camera).mixer;\n                    if (mixer !== undefined) {\n                        for (var i = 0, il = mixer._actions.length; i < il; i++) {\n                            mixer._actions[i]._clip.duration = max;\n                        }\n                    }\n                }\n                if (audioManager !== null) {\n                    audioManager.duration = max;\n                }\n            },\n            _updatePropertyMixersBuffer: function (mesh) {\n                var mixer = this.objects.get(mesh).mixer;\n                var propertyMixers = mixer._bindings;\n                var accuIndex = mixer._accuIndex;\n                for (var i = 0, il = propertyMixers.length; i < il; i++) {\n                    var propertyMixer = propertyMixers[i];\n                    var buffer = propertyMixer.buffer;\n                    var stride = propertyMixer.valueSize;\n                    var offset = (accuIndex + 1) * stride;\n                    propertyMixer.binding.getValue(buffer, offset);\n                }\n            },\n            _saveBones: function (mesh) {\n                var objects = this.objects.get(mesh);\n                var bones = mesh.skeleton.bones;\n                var backupBones = objects.backupBones;\n                if (backupBones === undefined) {\n                    backupBones = new Float32Array(bones.length * 7);\n                    objects.backupBones = backupBones;\n                }\n                for (var i = 0, il = bones.length; i < il; i++) {\n                    var bone = bones[i];\n                    bone.position.toArray(backupBones, i * 7);\n                    bone.quaternion.toArray(backupBones, i * 7 + 3);\n                }\n            },\n            _restoreBones: function (mesh) {\n                var objects = this.objects.get(mesh);\n                var backupBones = objects.backupBones;\n                if (backupBones === undefined)\n                    return;\n                var bones = mesh.skeleton.bones;\n                for (var i = 0, il = bones.length; i < il; i++) {\n                    var bone = bones[i];\n                    bone.position.fromArray(backupBones, i * 7);\n                    bone.quaternion.fromArray(backupBones, i * 7 + 3);\n                }\n            },\n            _getMasterPhysics: function () {\n                if (this.masterPhysics !== null)\n                    return this.masterPhysics;\n                for (var i = 0, il = this.meshes.length; i < il; i++) {\n                    var physics = this.meshes[i].physics;\n                    if (physics !== undefined && physics !== null) {\n                        this.masterPhysics = physics;\n                        return this.masterPhysics;\n                    }\n                }\n                return null;\n            },\n            _updateSharedPhysics: function (delta) {\n                if (this.meshes.length === 0 || !this.enabled.physics || !this.sharedPhysics)\n                    return;\n                var physics = this._getMasterPhysics();\n                if (physics === null)\n                    return;\n                for (var i = 0, il = this.meshes.length; i < il; i++) {\n                    var p = this.meshes[i].physics;\n                    if (p !== null && p !== undefined) {\n                        p.updateRigidBodies();\n                    }\n                }\n                physics.stepSimulation(delta);\n                for (var i = 0, il = this.meshes.length; i < il; i++) {\n                    var p = this.meshes[i].physics;\n                    if (p !== null && p !== undefined) {\n                        p.updateBones();\n                    }\n                }\n            }\n        };\n        function AudioManager(audio, params) {\n            params = params || {};\n            this.audio = audio;\n            this.elapsedTime = 0;\n            this.currentTime = 0;\n            this.delayTime = params.delayTime !== undefined ? params.delayTime : 0;\n            this.audioDuration = this.audio.buffer.duration;\n            this.duration = this.audioDuration + this.delayTime;\n        }\n        AudioManager.prototype = {\n            constructor: AudioManager,\n            control: function (delta) {\n                this.elapsed += delta;\n                this.currentTime += delta;\n                if (this._shouldStopAudio())\n                    this.audio.stop();\n                if (this._shouldStartAudio())\n                    this.audio.play();\n                return this;\n            },\n            _shouldStartAudio: function () {\n                if (this.audio.isPlaying)\n                    return false;\n                while (this.currentTime >= this.duration) {\n                    this.currentTime -= this.duration;\n                }\n                if (this.currentTime < this.delayTime)\n                    return false;\n                if (this.currentTime - this.delayTime > this.audioDuration)\n                    return false;\n                this.audio.startTime = this.currentTime - this.delayTime;\n                return true;\n            },\n            _shouldStopAudio: function () {\n                return this.audio.isPlaying && this.currentTime >= this.duration;\n            }\n        };\n        function GrantSolver(mesh, grants) {\n            this.mesh = mesh;\n            this.grants = grants || [];\n        }\n        GrantSolver.prototype = {\n            constructor: GrantSolver,\n            update: function () {\n                var quaternion = new THREE.Quaternion();\n                return function () {\n                    var bones = this.mesh.skeleton.bones;\n                    var grants = this.grants;\n                    for (var i = 0, il = grants.length; i < il; i++) {\n                        var grant = grants[i];\n                        var bone = bones[grant.index];\n                        var parentBone = bones[grant.parentIndex];\n                        if (grant.isLocal) {\n                            if (grant.affectPosition) {\n                            }\n                            if (grant.affectRotation) {\n                            }\n                        } else {\n                            if (grant.affectPosition) {\n                            }\n                            if (grant.affectRotation) {\n                                quaternion.set(0, 0, 0, 1);\n                                quaternion.slerp(parentBone.quaternion, grant.ratio);\n                                bone.quaternion.multiply(quaternion);\n                            }\n                        }\n                    }\n                    return this;\n                };\n            }()\n        };\n        return MMDAnimationHelper;\n    }();\n\n    return threex.animation.MMDAnimationHelper = MMDAnimationHelper;\n});"]}