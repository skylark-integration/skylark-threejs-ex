{"version":3,"sources":["animation/CCDIKSolver.js"],"names":["define","THREE","CCDIKSolver","mesh","iks","this","_valid","q","targetPos","targetVec","effectorPos","effectorVec","linkPos","invLinkQ","linkScale","axis","vector","CCDIKHelper","Object3D","call","root","matrix","copy","matrixWorld","matrixAutoUpdate","sphereGeometry","SphereBufferGeometry","targetSphereMaterial","MeshBasicMaterial","color","Color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","LineBasicMaterial","_init","prototype","constructor","update","Quaternion","Vector3","bones","skeleton","math","Math","i","il","length","ik","effector","target","setFromMatrixPosition","links","iteration","undefined","j","rotated","k","kl","link","index","enabled","limitation","rotationMin","rotationMax","decompose","inverse","subVectors","applyQuaternion","normalize","angle","dot","acos","minAngle","maxAngle","crossVectors","setFromAxisAngle","quaternion","multiply","c","w","c2","sqrt","set","x","y","z","rotation","setFromVector3","toVector3","max","min","updateMatrixWorld","createHelper","geometry","userData","MMD","link0","link1","jl","parent","console","warn","name","Object","assign","create","Matrix4","getPosition","bone","matrixWorldInv","applyMatrix4","setPositionOfBoneToAttributeArray","array","v","force","visible","offset","getInverse","targetBone","effectorBone","targetMesh","children","effectorMesh","position","linkBone","line","attributes","needsUpdate","self","createLine","Line","BufferGeometry","vertices","Float32Array","setAttribute","BufferAttribute","createLineGeometry","add","Mesh"],"mappings":"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","file":"../../animation/CCDIKSolver.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var CCDIKSolver = function () {\n        function CCDIKSolver(mesh, iks) {\n            this.mesh = mesh;\n            this.iks = iks || [];\n            this._valid();\n        }\n        CCDIKSolver.prototype = {\n            constructor: CCDIKSolver,\n            update: function () {\n                var q = new THREE.Quaternion();\n                var targetPos = new THREE.Vector3();\n                var targetVec = new THREE.Vector3();\n                var effectorPos = new THREE.Vector3();\n                var effectorVec = new THREE.Vector3();\n                var linkPos = new THREE.Vector3();\n                var invLinkQ = new THREE.Quaternion();\n                var linkScale = new THREE.Vector3();\n                var axis = new THREE.Vector3();\n                var vector = new THREE.Vector3();\n                return function update() {\n                    var bones = this.mesh.skeleton.bones;\n                    var iks = this.iks;\n                    var math = Math;\n                    for (var i = 0, il = iks.length; i < il; i++) {\n                        var ik = iks[i];\n                        var effector = bones[ik.effector];\n                        var target = bones[ik.target];\n                        targetPos.setFromMatrixPosition(target.matrixWorld);\n                        var links = ik.links;\n                        var iteration = ik.iteration !== undefined ? ik.iteration : 1;\n                        for (var j = 0; j < iteration; j++) {\n                            var rotated = false;\n                            for (var k = 0, kl = links.length; k < kl; k++) {\n                                var link = bones[links[k].index];\n                                if (links[k].enabled === false)\n                                    break;\n                                var limitation = links[k].limitation;\n                                var rotationMin = links[k].rotationMin;\n                                var rotationMax = links[k].rotationMax;\n                                link.matrixWorld.decompose(linkPos, invLinkQ, linkScale);\n                                invLinkQ.inverse();\n                                effectorPos.setFromMatrixPosition(effector.matrixWorld);\n                                effectorVec.subVectors(effectorPos, linkPos);\n                                effectorVec.applyQuaternion(invLinkQ);\n                                effectorVec.normalize();\n                                targetVec.subVectors(targetPos, linkPos);\n                                targetVec.applyQuaternion(invLinkQ);\n                                targetVec.normalize();\n                                var angle = targetVec.dot(effectorVec);\n                                if (angle > 1) {\n                                    angle = 1;\n                                } else if (angle < -1) {\n                                    angle = -1;\n                                }\n                                angle = math.acos(angle);\n                                if (angle < 0.00001)\n                                    continue;\n                                if (ik.minAngle !== undefined && angle < ik.minAngle) {\n                                    angle = ik.minAngle;\n                                }\n                                if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n                                    angle = ik.maxAngle;\n                                }\n                                axis.crossVectors(effectorVec, targetVec);\n                                axis.normalize();\n                                q.setFromAxisAngle(axis, angle);\n                                link.quaternion.multiply(q);\n                                if (limitation !== undefined) {\n                                    var c = link.quaternion.w;\n                                    if (c > 1)\n                                        c = 1;\n                                    var c2 = math.sqrt(1 - c * c);\n                                    link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n                                }\n                                if (rotationMin !== undefined) {\n                                    link.rotation.setFromVector3(link.rotation.toVector3(vector).max(rotationMin));\n                                }\n                                if (rotationMax !== undefined) {\n                                    link.rotation.setFromVector3(link.rotation.toVector3(vector).min(rotationMax));\n                                }\n                                link.updateMatrixWorld(true);\n                                rotated = true;\n                            }\n                            if (!rotated)\n                                break;\n                        }\n                    }\n                    return this;\n                };\n            }(),\n            createHelper: function () {\n                return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n            },\n            _valid: function () {\n                var iks = this.iks;\n                var bones = this.mesh.skeleton.bones;\n                for (var i = 0, il = iks.length; i < il; i++) {\n                    var ik = iks[i];\n                    var effector = bones[ik.effector];\n                    var links = ik.links;\n                    var link0, link1;\n                    link0 = effector;\n                    for (var j = 0, jl = links.length; j < jl; j++) {\n                        link1 = bones[links[j].index];\n                        if (link0.parent !== link1) {\n                            console.warn('THREE.CCDIKSolver: bone ' + link0.name + ' is not the child of bone ' + link1.name);\n                        }\n                        link0 = link1;\n                    }\n                }\n            }\n        };\n        function CCDIKHelper(mesh, iks) {\n            THREE.Object3D.call(this);\n            this.root = mesh;\n            this.iks = iks || [];\n            this.matrix.copy(mesh.matrixWorld);\n            this.matrixAutoUpdate = false;\n            this.sphereGeometry = new THREE.SphereBufferGeometry(0.25, 16, 8);\n            this.targetSphereMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(16746632),\n                depthTest: false,\n                depthWrite: false,\n                transparent: true\n            });\n            this.effectorSphereMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(8978312),\n                depthTest: false,\n                depthWrite: false,\n                transparent: true\n            });\n            this.linkSphereMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(8947967),\n                depthTest: false,\n                depthWrite: false,\n                transparent: true\n            });\n            this.lineMaterial = new THREE.LineBasicMaterial({\n                color: new THREE.Color(16711680),\n                depthTest: false,\n                depthWrite: false,\n                transparent: true\n            });\n            this._init();\n        }\n        CCDIKHelper.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n            constructor: CCDIKHelper,\n            updateMatrixWorld: function () {\n                var matrix = new THREE.Matrix4();\n                var vector = new THREE.Vector3();\n                function getPosition(bone, matrixWorldInv) {\n                    return vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n                }\n                function setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n                    var v = getPosition(bone, matrixWorldInv);\n                    array[index * 3 + 0] = v.x;\n                    array[index * 3 + 1] = v.y;\n                    array[index * 3 + 2] = v.z;\n                }\n                return function updateMatrixWorld(force) {\n                    var mesh = this.root;\n                    if (this.visible) {\n                        var offset = 0;\n                        var iks = this.iks;\n                        var bones = mesh.skeleton.bones;\n                        matrix.getInverse(mesh.matrixWorld);\n                        for (var i = 0, il = iks.length; i < il; i++) {\n                            var ik = iks[i];\n                            var targetBone = bones[ik.target];\n                            var effectorBone = bones[ik.effector];\n                            var targetMesh = this.children[offset++];\n                            var effectorMesh = this.children[offset++];\n                            targetMesh.position.copy(getPosition(targetBone, matrix));\n                            effectorMesh.position.copy(getPosition(effectorBone, matrix));\n                            for (var j = 0, jl = ik.links.length; j < jl; j++) {\n                                var link = ik.links[j];\n                                var linkBone = bones[link.index];\n                                var linkMesh = this.children[offset++];\n                                linkMesh.position.copy(getPosition(linkBone, matrix));\n                            }\n                            var line = this.children[offset++];\n                            var array = line.geometry.attributes.position.array;\n                            setPositionOfBoneToAttributeArray(array, 0, targetBone, matrix);\n                            setPositionOfBoneToAttributeArray(array, 1, effectorBone, matrix);\n                            for (var j = 0, jl = ik.links.length; j < jl; j++) {\n                                var link = ik.links[j];\n                                var linkBone = bones[link.index];\n                                setPositionOfBoneToAttributeArray(array, j + 2, linkBone, matrix);\n                            }\n                            line.geometry.attributes.position.needsUpdate = true;\n                        }\n                    }\n                    this.matrix.copy(mesh.matrixWorld);\n                    THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n                };\n            }(),\n            _init: function () {\n                var self = this;\n                var iks = this.iks;\n                function createLineGeometry(ik) {\n                    var geometry = new THREE.BufferGeometry();\n                    var vertices = new Float32Array((2 + ik.links.length) * 3);\n                    geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n                    return geometry;\n                }\n                function createTargetMesh() {\n                    return new THREE.Mesh(self.sphereGeometry, self.targetSphereMaterial);\n                }\n                function createEffectorMesh() {\n                    return new THREE.Mesh(self.sphereGeometry, self.effectorSphereMaterial);\n                }\n                function createLinkMesh() {\n                    return new THREE.Mesh(self.sphereGeometry, self.linkSphereMaterial);\n                }\n                function createLine(ik) {\n                    return new THREE.Line(createLineGeometry(ik), self.lineMaterial);\n                }\n                for (var i = 0, il = iks.length; i < il; i++) {\n                    var ik = iks[i];\n                    this.add(createTargetMesh());\n                    this.add(createEffectorMesh());\n                    for (var j = 0, jl = ik.links.length; j < jl; j++) {\n                        this.add(createLinkMesh());\n                    }\n                    this.add(createLine(ik));\n                }\n            }\n        });\n        return CCDIKSolver;\n    }();\n\n    return CCDIKSolver;\n});"]}