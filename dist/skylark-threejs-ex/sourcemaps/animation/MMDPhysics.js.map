{"version":3,"sources":["animation/MMDPhysics.js"],"names":["define","THREE","MMDPhysics","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","this","manager","ResourceManager","unitStep","undefined","maxStepNum","gravity","Vector3","copy","world","bodies","constraints","_init","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","RigidBody","body","bone","boneOffsetForm","boneOffsetFormInverse","Constraint","bodyA","bodyB","constraint","MMDPhysicsHelper","physics","Object3D","call","root","matrix","matrixWorld","matrixAutoUpdate","materials","push","MeshBasicMaterial","color","Color","wireframe","depthTest","depthWrite","opacity","transparent","position","quaternion","scale","matrixWorldInv","prototype","constructor","update","delta","parent","isNonDefaultScale","allocThreeVector3","allocThreeQuaternion","decompose","x","y","z","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","length","warmup","cycles","setGravity","btVector3","createHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","rigidBodyIndex1","rigidBodyIndex2","stepTime","stepSimulation","updateFromBone","updateBone","pop","v","allocThreeMatrix4","Matrix4","freeThreeMatrix4","m","Quaternion","q","allocThreeEuler","Euler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","bones","skeleton","Bone","shape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","generateShape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","normalize","thV","worldToLocal","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","Object","assign","create","force","visible","compose","getInverse","child","children","origin","applyMatrix4","createGeometry","param","SphereBufferGeometry","BoxBufferGeometry","radius","cylinderHeight","segmentsRadius","segmentsHeight","geometry","CylinderBufferGeometry","upperSphere","Mesh","PI","lowerSphere","updateMatrix","merge","add"],"mappings":"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","file":"../../animation/MMDPhysics.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var MMDPhysics = function () {\n        function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\n            if (typeof Ammo === 'undefined') {\n                throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo');\n            }\n            constraintParams = constraintParams || [];\n            params = params || {};\n            this.manager = new ResourceManager();\n            this.mesh = mesh;\n            this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n            this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n            this.gravity = new THREE.Vector3(0, -9.8 * 10, 0);\n            if (params.gravity !== undefined)\n                this.gravity.copy(params.gravity);\n            this.world = params.world !== undefined ? params.world : null;\n            this.bodies = [];\n            this.constraints = [];\n            this._init(mesh, rigidBodyParams, constraintParams);\n        }\n        MMDPhysics.prototype = {\n            constructor: MMDPhysics,\n            update: function (delta) {\n                var manager = this.manager;\n                var mesh = this.mesh;\n                var isNonDefaultScale = false;\n                var position = manager.allocThreeVector3();\n                var quaternion = manager.allocThreeQuaternion();\n                var scale = manager.allocThreeVector3();\n                mesh.matrixWorld.decompose(position, quaternion, scale);\n                if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n                    isNonDefaultScale = true;\n                }\n                var parent;\n                if (isNonDefaultScale) {\n                    parent = mesh.parent;\n                    if (parent !== null)\n                        mesh.parent = null;\n                    scale.copy(this.mesh.scale);\n                    mesh.scale.set(1, 1, 1);\n                    mesh.updateMatrixWorld(true);\n                }\n                this._updateRigidBodies();\n                this._stepSimulation(delta);\n                this._updateBones();\n                if (isNonDefaultScale) {\n                    if (parent !== null)\n                        mesh.parent = parent;\n                    mesh.scale.copy(scale);\n                }\n                manager.freeThreeVector3(scale);\n                manager.freeThreeQuaternion(quaternion);\n                manager.freeThreeVector3(position);\n                return this;\n            },\n            reset: function () {\n                for (var i = 0, il = this.bodies.length; i < il; i++) {\n                    this.bodies[i].reset();\n                }\n                return this;\n            },\n            warmup: function (cycles) {\n                for (var i = 0; i < cycles; i++) {\n                    this.update(1 / 60);\n                }\n                return this;\n            },\n            setGravity: function (gravity) {\n                this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n                this.gravity.copy(gravity);\n                return this;\n            },\n            createHelper: function () {\n                return new MMDPhysicsHelper(this.mesh, this);\n            },\n            _init: function (mesh, rigidBodyParams, constraintParams) {\n                var manager = this.manager;\n                var parent = mesh.parent;\n                if (parent !== null)\n                    parent = null;\n                var currentPosition = manager.allocThreeVector3();\n                var currentQuaternion = manager.allocThreeQuaternion();\n                var currentScale = manager.allocThreeVector3();\n                currentPosition.copy(mesh.position);\n                currentQuaternion.copy(mesh.quaternion);\n                currentScale.copy(mesh.scale);\n                mesh.position.set(0, 0, 0);\n                mesh.quaternion.set(0, 0, 0, 1);\n                mesh.scale.set(1, 1, 1);\n                mesh.updateMatrixWorld(true);\n                if (this.world === null) {\n                    this.world = this._createWorld();\n                    this.setGravity(this.gravity);\n                }\n                this._initRigidBodies(rigidBodyParams);\n                this._initConstraints(constraintParams);\n                if (parent !== null)\n                    mesh.parent = parent;\n                mesh.position.copy(currentPosition);\n                mesh.quaternion.copy(currentQuaternion);\n                mesh.scale.copy(currentScale);\n                mesh.updateMatrixWorld(true);\n                this.reset();\n                manager.freeThreeVector3(currentPosition);\n                manager.freeThreeQuaternion(currentQuaternion);\n                manager.freeThreeVector3(currentScale);\n            },\n            _createWorld: function () {\n                var config = new Ammo.btDefaultCollisionConfiguration();\n                var dispatcher = new Ammo.btCollisionDispatcher(config);\n                var cache = new Ammo.btDbvtBroadphase();\n                var solver = new Ammo.btSequentialImpulseConstraintSolver();\n                var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n                return world;\n            },\n            _initRigidBodies: function (rigidBodies) {\n                for (var i = 0, il = rigidBodies.length; i < il; i++) {\n                    this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n                }\n            },\n            _initConstraints: function (constraints) {\n                for (var i = 0, il = constraints.length; i < il; i++) {\n                    var params = constraints[i];\n                    var bodyA = this.bodies[params.rigidBodyIndex1];\n                    var bodyB = this.bodies[params.rigidBodyIndex2];\n                    this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n                }\n            },\n            _stepSimulation: function (delta) {\n                var unitStep = this.unitStep;\n                var stepTime = delta;\n                var maxStepNum = (delta / unitStep | 0) + 1;\n                if (stepTime < unitStep) {\n                    stepTime = unitStep;\n                    maxStepNum = 1;\n                }\n                if (maxStepNum > this.maxStepNum) {\n                    maxStepNum = this.maxStepNum;\n                }\n                this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n            },\n            _updateRigidBodies: function () {\n                for (var i = 0, il = this.bodies.length; i < il; i++) {\n                    this.bodies[i].updateFromBone();\n                }\n            },\n            _updateBones: function () {\n                for (var i = 0, il = this.bodies.length; i < il; i++) {\n                    this.bodies[i].updateBone();\n                }\n            }\n        };\n        function ResourceManager() {\n            this.threeVector3s = [];\n            this.threeMatrix4s = [];\n            this.threeQuaternions = [];\n            this.threeEulers = [];\n            this.transforms = [];\n            this.quaternions = [];\n            this.vector3s = [];\n        }\n        ResourceManager.prototype = {\n            constructor: ResourceManager,\n            allocThreeVector3: function () {\n                return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new THREE.Vector3();\n            },\n            freeThreeVector3: function (v) {\n                this.threeVector3s.push(v);\n            },\n            allocThreeMatrix4: function () {\n                return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new THREE.Matrix4();\n            },\n            freeThreeMatrix4: function (m) {\n                this.threeMatrix4s.push(m);\n            },\n            allocThreeQuaternion: function () {\n                return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new THREE.Quaternion();\n            },\n            freeThreeQuaternion: function (q) {\n                this.threeQuaternions.push(q);\n            },\n            allocThreeEuler: function () {\n                return this.threeEulers.length > 0 ? this.threeEulers.pop() : new THREE.Euler();\n            },\n            freeThreeEuler: function (e) {\n                this.threeEulers.push(e);\n            },\n            allocTransform: function () {\n                return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n            },\n            freeTransform: function (t) {\n                this.transforms.push(t);\n            },\n            allocQuaternion: function () {\n                return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n            },\n            freeQuaternion: function (q) {\n                this.quaternions.push(q);\n            },\n            allocVector3: function () {\n                return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n            },\n            freeVector3: function (v) {\n                this.vector3s.push(v);\n            },\n            setIdentity: function (t) {\n                t.setIdentity();\n            },\n            getBasis: function (t) {\n                var q = this.allocQuaternion();\n                t.getBasis().getRotation(q);\n                return q;\n            },\n            getBasisAsMatrix3: function (t) {\n                var q = this.getBasis(t);\n                var m = this.quaternionToMatrix3(q);\n                this.freeQuaternion(q);\n                return m;\n            },\n            getOrigin: function (t) {\n                return t.getOrigin();\n            },\n            setOrigin: function (t, v) {\n                t.getOrigin().setValue(v.x(), v.y(), v.z());\n            },\n            copyOrigin: function (t1, t2) {\n                var o = t2.getOrigin();\n                this.setOrigin(t1, o);\n            },\n            setBasis: function (t, q) {\n                t.setRotation(q);\n            },\n            setBasisFromMatrix3: function (t, m) {\n                var q = this.matrix3ToQuaternion(m);\n                this.setBasis(t, q);\n                this.freeQuaternion(q);\n            },\n            setOriginFromArray3: function (t, a) {\n                t.getOrigin().setValue(a[0], a[1], a[2]);\n            },\n            setOriginFromThreeVector3: function (t, v) {\n                t.getOrigin().setValue(v.x, v.y, v.z);\n            },\n            setBasisFromArray3: function (t, a) {\n                var thQ = this.allocThreeQuaternion();\n                var thE = this.allocThreeEuler();\n                thE.set(a[0], a[1], a[2]);\n                this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n                this.freeThreeEuler(thE);\n                this.freeThreeQuaternion(thQ);\n            },\n            setBasisFromThreeQuaternion: function (t, a) {\n                var q = this.allocQuaternion();\n                q.setX(a.x);\n                q.setY(a.y);\n                q.setZ(a.z);\n                q.setW(a.w);\n                this.setBasis(t, q);\n                this.freeQuaternion(q);\n            },\n            multiplyTransforms: function (t1, t2) {\n                var t = this.allocTransform();\n                this.setIdentity(t);\n                var m1 = this.getBasisAsMatrix3(t1);\n                var m2 = this.getBasisAsMatrix3(t2);\n                var o1 = this.getOrigin(t1);\n                var o2 = this.getOrigin(t2);\n                var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n                var v2 = this.addVector3(v1, o1);\n                this.setOrigin(t, v2);\n                var m3 = this.multiplyMatrices3(m1, m2);\n                this.setBasisFromMatrix3(t, m3);\n                this.freeVector3(v1);\n                this.freeVector3(v2);\n                return t;\n            },\n            inverseTransform: function (t) {\n                var t2 = this.allocTransform();\n                var m1 = this.getBasisAsMatrix3(t);\n                var o = this.getOrigin(t);\n                var m2 = this.transposeMatrix3(m1);\n                var v1 = this.negativeVector3(o);\n                var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n                this.setOrigin(t2, v2);\n                this.setBasisFromMatrix3(t2, m2);\n                this.freeVector3(v1);\n                this.freeVector3(v2);\n                return t2;\n            },\n            multiplyMatrices3: function (m1, m2) {\n                var m3 = [];\n                var v10 = this.rowOfMatrix3(m1, 0);\n                var v11 = this.rowOfMatrix3(m1, 1);\n                var v12 = this.rowOfMatrix3(m1, 2);\n                var v20 = this.columnOfMatrix3(m2, 0);\n                var v21 = this.columnOfMatrix3(m2, 1);\n                var v22 = this.columnOfMatrix3(m2, 2);\n                m3[0] = this.dotVectors3(v10, v20);\n                m3[1] = this.dotVectors3(v10, v21);\n                m3[2] = this.dotVectors3(v10, v22);\n                m3[3] = this.dotVectors3(v11, v20);\n                m3[4] = this.dotVectors3(v11, v21);\n                m3[5] = this.dotVectors3(v11, v22);\n                m3[6] = this.dotVectors3(v12, v20);\n                m3[7] = this.dotVectors3(v12, v21);\n                m3[8] = this.dotVectors3(v12, v22);\n                this.freeVector3(v10);\n                this.freeVector3(v11);\n                this.freeVector3(v12);\n                this.freeVector3(v20);\n                this.freeVector3(v21);\n                this.freeVector3(v22);\n                return m3;\n            },\n            addVector3: function (v1, v2) {\n                var v = this.allocVector3();\n                v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n                return v;\n            },\n            dotVectors3: function (v1, v2) {\n                return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n            },\n            rowOfMatrix3: function (m, i) {\n                var v = this.allocVector3();\n                v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n                return v;\n            },\n            columnOfMatrix3: function (m, i) {\n                var v = this.allocVector3();\n                v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n                return v;\n            },\n            negativeVector3: function (v) {\n                var v2 = this.allocVector3();\n                v2.setValue(-v.x(), -v.y(), -v.z());\n                return v2;\n            },\n            multiplyMatrix3ByVector3: function (m, v) {\n                var v4 = this.allocVector3();\n                var v0 = this.rowOfMatrix3(m, 0);\n                var v1 = this.rowOfMatrix3(m, 1);\n                var v2 = this.rowOfMatrix3(m, 2);\n                var x = this.dotVectors3(v0, v);\n                var y = this.dotVectors3(v1, v);\n                var z = this.dotVectors3(v2, v);\n                v4.setValue(x, y, z);\n                this.freeVector3(v0);\n                this.freeVector3(v1);\n                this.freeVector3(v2);\n                return v4;\n            },\n            transposeMatrix3: function (m) {\n                var m2 = [];\n                m2[0] = m[0];\n                m2[1] = m[3];\n                m2[2] = m[6];\n                m2[3] = m[1];\n                m2[4] = m[4];\n                m2[5] = m[7];\n                m2[6] = m[2];\n                m2[7] = m[5];\n                m2[8] = m[8];\n                return m2;\n            },\n            quaternionToMatrix3: function (q) {\n                var m = [];\n                var x = q.x();\n                var y = q.y();\n                var z = q.z();\n                var w = q.w();\n                var xx = x * x;\n                var yy = y * y;\n                var zz = z * z;\n                var xy = x * y;\n                var yz = y * z;\n                var zx = z * x;\n                var xw = x * w;\n                var yw = y * w;\n                var zw = z * w;\n                m[0] = 1 - 2 * (yy + zz);\n                m[1] = 2 * (xy - zw);\n                m[2] = 2 * (zx + yw);\n                m[3] = 2 * (xy + zw);\n                m[4] = 1 - 2 * (zz + xx);\n                m[5] = 2 * (yz - xw);\n                m[6] = 2 * (zx - yw);\n                m[7] = 2 * (yz + xw);\n                m[8] = 1 - 2 * (xx + yy);\n                return m;\n            },\n            matrix3ToQuaternion: function (m) {\n                var t = m[0] + m[4] + m[8];\n                var s, x, y, z, w;\n                if (t > 0) {\n                    s = Math.sqrt(t + 1) * 2;\n                    w = 0.25 * s;\n                    x = (m[7] - m[5]) / s;\n                    y = (m[2] - m[6]) / s;\n                    z = (m[3] - m[1]) / s;\n                } else if (m[0] > m[4] && m[0] > m[8]) {\n                    s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n                    w = (m[7] - m[5]) / s;\n                    x = 0.25 * s;\n                    y = (m[1] + m[3]) / s;\n                    z = (m[2] + m[6]) / s;\n                } else if (m[4] > m[8]) {\n                    s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n                    w = (m[2] - m[6]) / s;\n                    x = (m[1] + m[3]) / s;\n                    y = 0.25 * s;\n                    z = (m[5] + m[7]) / s;\n                } else {\n                    s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n                    w = (m[3] - m[1]) / s;\n                    x = (m[2] + m[6]) / s;\n                    y = (m[5] + m[7]) / s;\n                    z = 0.25 * s;\n                }\n                var q = this.allocQuaternion();\n                q.setX(x);\n                q.setY(y);\n                q.setZ(z);\n                q.setW(w);\n                return q;\n            }\n        };\n        function RigidBody(mesh, world, params, manager) {\n            this.mesh = mesh;\n            this.world = world;\n            this.params = params;\n            this.manager = manager;\n            this.body = null;\n            this.bone = null;\n            this.boneOffsetForm = null;\n            this.boneOffsetFormInverse = null;\n            this._init();\n        }\n        RigidBody.prototype = {\n            constructor: MMDPhysics.RigidBody,\n            reset: function () {\n                this._setTransformFromBone();\n                return this;\n            },\n            updateFromBone: function () {\n                if (this.params.boneIndex !== -1 && this.params.type === 0) {\n                    this._setTransformFromBone();\n                }\n                return this;\n            },\n            updateBone: function () {\n                if (this.params.type === 0 || this.params.boneIndex === -1) {\n                    return this;\n                }\n                this._updateBoneRotation();\n                if (this.params.type === 1) {\n                    this._updateBonePosition();\n                }\n                this.bone.updateMatrixWorld(true);\n                if (this.params.type === 2) {\n                    this._setPositionFromBone();\n                }\n                return this;\n            },\n            _init: function () {\n                function generateShape(p) {\n                    switch (p.shapeType) {\n                    case 0:\n                        return new Ammo.btSphereShape(p.width);\n                    case 1:\n                        return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n                    case 2:\n                        return new Ammo.btCapsuleShape(p.width, p.height);\n                    default:\n                        throw 'unknown shape type ' + p.shapeType;\n                    }\n                }\n                var manager = this.manager;\n                var params = this.params;\n                var bones = this.mesh.skeleton.bones;\n                var bone = params.boneIndex === -1 ? new THREE.Bone() : bones[params.boneIndex];\n                var shape = generateShape(params);\n                var weight = params.type === 0 ? 0 : params.weight;\n                var localInertia = manager.allocVector3();\n                localInertia.setValue(0, 0, 0);\n                if (weight !== 0) {\n                    shape.calculateLocalInertia(weight, localInertia);\n                }\n                var boneOffsetForm = manager.allocTransform();\n                manager.setIdentity(boneOffsetForm);\n                manager.setOriginFromArray3(boneOffsetForm, params.position);\n                manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n                var vector = manager.allocThreeVector3();\n                var boneForm = manager.allocTransform();\n                manager.setIdentity(boneForm);\n                manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n                var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n                var state = new Ammo.btDefaultMotionState(form);\n                var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n                info.set_m_friction(params.friction);\n                info.set_m_restitution(params.restitution);\n                var body = new Ammo.btRigidBody(info);\n                if (params.type === 0) {\n                    body.setCollisionFlags(body.getCollisionFlags() | 2);\n                    body.setActivationState(4);\n                }\n                body.setDamping(params.positionDamping, params.rotationDamping);\n                body.setSleepingThresholds(0, 0);\n                this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n                this.body = body;\n                this.bone = bone;\n                this.boneOffsetForm = boneOffsetForm;\n                this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n                manager.freeVector3(localInertia);\n                manager.freeTransform(form);\n                manager.freeTransform(boneForm);\n                manager.freeThreeVector3(vector);\n            },\n            _getBoneTransform: function () {\n                var manager = this.manager;\n                var p = manager.allocThreeVector3();\n                var q = manager.allocThreeQuaternion();\n                var s = manager.allocThreeVector3();\n                this.bone.matrixWorld.decompose(p, q, s);\n                var tr = manager.allocTransform();\n                manager.setOriginFromThreeVector3(tr, p);\n                manager.setBasisFromThreeQuaternion(tr, q);\n                var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n                manager.freeTransform(tr);\n                manager.freeThreeVector3(s);\n                manager.freeThreeQuaternion(q);\n                manager.freeThreeVector3(p);\n                return form;\n            },\n            _getWorldTransformForBone: function () {\n                var manager = this.manager;\n                var tr = this.body.getCenterOfMassTransform();\n                return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n            },\n            _setTransformFromBone: function () {\n                var manager = this.manager;\n                var form = this._getBoneTransform();\n                this.body.setCenterOfMassTransform(form);\n                this.body.getMotionState().setWorldTransform(form);\n                manager.freeTransform(form);\n            },\n            _setPositionFromBone: function () {\n                var manager = this.manager;\n                var form = this._getBoneTransform();\n                var tr = manager.allocTransform();\n                this.body.getMotionState().getWorldTransform(tr);\n                manager.copyOrigin(tr, form);\n                this.body.setCenterOfMassTransform(tr);\n                this.body.getMotionState().setWorldTransform(tr);\n                manager.freeTransform(tr);\n                manager.freeTransform(form);\n            },\n            _updateBoneRotation: function () {\n                var manager = this.manager;\n                var tr = this._getWorldTransformForBone();\n                var q = manager.getBasis(tr);\n                var thQ = manager.allocThreeQuaternion();\n                var thQ2 = manager.allocThreeQuaternion();\n                var thQ3 = manager.allocThreeQuaternion();\n                thQ.set(q.x(), q.y(), q.z(), q.w());\n                thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n                thQ2.conjugate();\n                thQ2.multiply(thQ);\n                thQ3.setFromRotationMatrix(this.bone.matrix);\n                this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n                manager.freeThreeQuaternion(thQ);\n                manager.freeThreeQuaternion(thQ2);\n                manager.freeThreeQuaternion(thQ3);\n                manager.freeQuaternion(q);\n                manager.freeTransform(tr);\n            },\n            _updateBonePosition: function () {\n                var manager = this.manager;\n                var tr = this._getWorldTransformForBone();\n                var thV = manager.allocThreeVector3();\n                var o = manager.getOrigin(tr);\n                thV.set(o.x(), o.y(), o.z());\n                if (this.bone.parent) {\n                    this.bone.parent.worldToLocal(thV);\n                }\n                this.bone.position.copy(thV);\n                manager.freeThreeVector3(thV);\n                manager.freeTransform(tr);\n            }\n        };\n        function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n            this.mesh = mesh;\n            this.world = world;\n            this.bodyA = bodyA;\n            this.bodyB = bodyB;\n            this.params = params;\n            this.manager = manager;\n            this.constraint = null;\n            this._init();\n        }\n        Constraint.prototype = {\n            constructor: Constraint,\n            _init: function () {\n                var manager = this.manager;\n                var params = this.params;\n                var bodyA = this.bodyA;\n                var bodyB = this.bodyB;\n                var form = manager.allocTransform();\n                manager.setIdentity(form);\n                manager.setOriginFromArray3(form, params.position);\n                manager.setBasisFromArray3(form, params.rotation);\n                var formA = manager.allocTransform();\n                var formB = manager.allocTransform();\n                bodyA.body.getMotionState().getWorldTransform(formA);\n                bodyB.body.getMotionState().getWorldTransform(formB);\n                var formInverseA = manager.inverseTransform(formA);\n                var formInverseB = manager.inverseTransform(formB);\n                var formA2 = manager.multiplyTransforms(formInverseA, form);\n                var formB2 = manager.multiplyTransforms(formInverseB, form);\n                var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n                var lll = manager.allocVector3();\n                var lul = manager.allocVector3();\n                var all = manager.allocVector3();\n                var aul = manager.allocVector3();\n                lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n                lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n                all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n                aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n                constraint.setLinearLowerLimit(lll);\n                constraint.setLinearUpperLimit(lul);\n                constraint.setAngularLowerLimit(all);\n                constraint.setAngularUpperLimit(aul);\n                for (var i = 0; i < 3; i++) {\n                    if (params.springPosition[i] !== 0) {\n                        constraint.enableSpring(i, true);\n                        constraint.setStiffness(i, params.springPosition[i]);\n                    }\n                }\n                for (var i = 0; i < 3; i++) {\n                    if (params.springRotation[i] !== 0) {\n                        constraint.enableSpring(i + 3, true);\n                        constraint.setStiffness(i + 3, params.springRotation[i]);\n                    }\n                }\n                if (constraint.setParam !== undefined) {\n                    for (var i = 0; i < 6; i++) {\n                        constraint.setParam(2, 0.475, i);\n                    }\n                }\n                this.world.addConstraint(constraint, true);\n                this.constraint = constraint;\n                manager.freeTransform(form);\n                manager.freeTransform(formA);\n                manager.freeTransform(formB);\n                manager.freeTransform(formInverseA);\n                manager.freeTransform(formInverseB);\n                manager.freeTransform(formA2);\n                manager.freeTransform(formB2);\n                manager.freeVector3(lll);\n                manager.freeVector3(lul);\n                manager.freeVector3(all);\n                manager.freeVector3(aul);\n            }\n        };\n        function MMDPhysicsHelper(mesh, physics) {\n            THREE.Object3D.call(this);\n            this.root = mesh;\n            this.physics = physics;\n            this.matrix.copy(mesh.matrixWorld);\n            this.matrixAutoUpdate = false;\n            this.materials = [];\n            this.materials.push(new THREE.MeshBasicMaterial({\n                color: new THREE.Color(16746632),\n                wireframe: true,\n                depthTest: false,\n                depthWrite: false,\n                opacity: 0.25,\n                transparent: true\n            }));\n            this.materials.push(new THREE.MeshBasicMaterial({\n                color: new THREE.Color(8978312),\n                wireframe: true,\n                depthTest: false,\n                depthWrite: false,\n                opacity: 0.25,\n                transparent: true\n            }));\n            this.materials.push(new THREE.MeshBasicMaterial({\n                color: new THREE.Color(8947967),\n                wireframe: true,\n                depthTest: false,\n                depthWrite: false,\n                opacity: 0.25,\n                transparent: true\n            }));\n            this._init();\n        }\n        MMDPhysicsHelper.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n            constructor: MMDPhysicsHelper,\n            updateMatrixWorld: function () {\n                var position = new THREE.Vector3();\n                var quaternion = new THREE.Quaternion();\n                var scale = new THREE.Vector3();\n                var matrixWorldInv = new THREE.Matrix4();\n                return function updateMatrixWorld(force) {\n                    var mesh = this.root;\n                    if (this.visible) {\n                        var bodies = this.physics.bodies;\n                        matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).getInverse(matrixWorldInv);\n                        for (var i = 0, il = bodies.length; i < il; i++) {\n                            var body = bodies[i].body;\n                            var child = this.children[i];\n                            var tr = body.getCenterOfMassTransform();\n                            var origin = tr.getOrigin();\n                            var rotation = tr.getRotation();\n                            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\n                            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n                        }\n                    }\n                    this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\n                    THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n                };\n            }(),\n            _init: function () {\n                var bodies = this.physics.bodies;\n                function createGeometry(param) {\n                    switch (param.shapeType) {\n                    case 0:\n                        return new THREE.SphereBufferGeometry(param.width, 16, 8);\n                    case 1:\n                        return new THREE.BoxBufferGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n                    case 2:\n                        return new createCapsuleGeometry(param.width, param.height, 16, 8);\n                    default:\n                        return null;\n                    }\n                }\n                function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\n                    var geometry = new THREE.CylinderBufferGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\n                    var upperSphere = new THREE.Mesh(new THREE.SphereBufferGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\n                    var lowerSphere = new THREE.Mesh(new THREE.SphereBufferGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\n                    upperSphere.position.set(0, cylinderHeight / 2, 0);\n                    lowerSphere.position.set(0, -cylinderHeight / 2, 0);\n                    upperSphere.updateMatrix();\n                    lowerSphere.updateMatrix();\n                    geometry.merge(upperSphere.geometry, upperSphere.matrix);\n                    geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\n                    return geometry;\n                }\n                for (var i = 0, il = bodies.length; i < il; i++) {\n                    var param = bodies[i].params;\n                    this.add(new THREE.Mesh(createGeometry(param), this.materials[param.type]));\n                }\n            }\n        });\n        return MMDPhysics;\n    }();\n    return  MMDPhysics ;\n});"]}