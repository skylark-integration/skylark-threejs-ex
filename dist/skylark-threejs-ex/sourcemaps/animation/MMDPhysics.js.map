{"version":3,"sources":["animation/MMDPhysics.js"],"names":["define","THREE","MMDPhysics","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","this","manager","ResourceManager","unitStep","undefined","maxStepNum","gravity","Vector3","copy","world","bodies","constraints","_init","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","RigidBody","body","bone","boneOffsetForm","boneOffsetFormInverse","Constraint","bodyA","bodyB","constraint","MMDPhysicsHelper","physics","Object3D","call","root","matrix","matrixWorld","matrixAutoUpdate","materials","push","MeshBasicMaterial","color","Color","wireframe","depthTest","depthWrite","opacity","transparent","position","quaternion","scale","matrixWorldInv","prototype","constructor","update","delta","parent","isNonDefaultScale","allocThreeVector3","allocThreeQuaternion","decompose","x","y","z","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","length","warmup","cycles","setGravity","btVector3","createHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","rigidBodyIndex1","rigidBodyIndex2","stepTime","stepSimulation","updateFromBone","updateBone","pop","v","allocThreeMatrix4","Matrix4","freeThreeMatrix4","m","Quaternion","q","allocThreeEuler","Euler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","bones","skeleton","Bone","shape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","generateShape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","normalize","thV","worldToLocal","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","Object","assign","create","force","visible","compose","getInverse","child","children","origin","applyMatrix4","createGeometry","param","SphereBufferGeometry","BoxBufferGeometry","radius","cylinderHeight","segmentsRadius","segmentsHeight","geometry","CylinderBufferGeometry","upperSphere","Mesh","PI","lowerSphere","updateMatrix","merge","add"],"mappings":"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","file":"../../animation/MMDPhysics.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author takahiro / https://github.com/takahirox\n\t *\n\t * Dependencies\n\t *  - Ammo.js https://github.com/kripken/ammo.js\n\t *\n\t * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n\t * for MMD model loaded by THREE.MMDLoader.\n\t *\n\t * TODO\n\t *  - Physics in Worker\n\t */\n\n\t/* global Ammo */\n\n\tTHREE.MMDPhysics = ( function () {\n\n\t\t/**\n\t\t * @param {THREE.SkinnedMesh} mesh\n\t\t * @param {Array<Object>} rigidBodyParams\n\t\t * @param {Array<Object>} (optional) constraintParams\n\t\t * @param {Object} params - (optional)\n\t\t * @param {Number} params.unitStep - Default is 1 / 65.\n\t\t * @param {Integer} params.maxStepNum - Default is 3.\n\t\t * @param {THREE.Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n\t\t */\n\t\tfunction MMDPhysics( mesh, rigidBodyParams, constraintParams, params ) {\n\n\t\t\tif ( typeof Ammo === 'undefined' ) {\n\n\t\t\t\tthrow new Error( 'THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js' );\n\n\t\t\t}\n\n\t\t\tconstraintParams = constraintParams || [];\n\t\t\tparams = params || {};\n\n\t\t\tthis.manager = new ResourceManager();\n\n\t\t\tthis.mesh = mesh;\n\n\t\t\t/*\n\t\t\t * I don't know why but 1/60 unitStep easily breaks models\n\t\t\t * so I set it 1/65 so far.\n\t\t\t * Don't set too small unitStep because\n\t\t\t * the smaller unitStep can make the performance worse.\n\t\t\t */\n\t\t\tthis.unitStep = ( params.unitStep !== undefined ) ? params.unitStep : 1 / 65;\n\t\t\tthis.maxStepNum = ( params.maxStepNum !== undefined ) ? params.maxStepNum : 3;\n\t\t\tthis.gravity = new THREE.Vector3( 0, - 9.8 * 10, 0 );\n\n\t\t\tif ( params.gravity !== undefined ) this.gravity.copy( params.gravity );\n\n\t\t\tthis.world = params.world !== undefined ? params.world : null; // experimental\n\n\t\t\tthis.bodies = [];\n\t\t\tthis.constraints = [];\n\n\t\t\tthis._init( mesh, rigidBodyParams, constraintParams );\n\n\t\t}\n\n\t\tMMDPhysics.prototype = {\n\n\t\t\tconstructor: MMDPhysics,\n\n\t\t\t/**\n\t\t\t * Advances Physics calculation and updates bones.\n\t\t\t *\n\t\t\t * @param {Number} delta - time in second\n\t\t\t * @return {THREE.MMDPhysics}\n\t\t\t */\n\t\t\tupdate: function ( delta ) {\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar mesh = this.mesh;\n\n\t\t\t\t// rigid bodies and constrains are for\n\t\t\t\t// mesh's world scale (1, 1, 1).\n\t\t\t\t// Convert to (1, 1, 1) if it isn't.\n\n\t\t\t\tvar isNonDefaultScale = false;\n\n\t\t\t\tvar position = manager.allocThreeVector3();\n\t\t\t\tvar quaternion = manager.allocThreeQuaternion();\n\t\t\t\tvar scale = manager.allocThreeVector3();\n\n\t\t\t\tmesh.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\tif ( scale.x !== 1 || scale.y !== 1 || scale.z !== 1 ) {\n\n\t\t\t\t\tisNonDefaultScale = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar parent;\n\n\t\t\t\tif ( isNonDefaultScale ) {\n\n\t\t\t\t\tparent = mesh.parent;\n\n\t\t\t\t\tif ( parent !== null ) mesh.parent = null;\n\n\t\t\t\t\tscale.copy( this.mesh.scale );\n\n\t\t\t\t\tmesh.scale.set( 1, 1, 1 );\n\t\t\t\t\tmesh.updateMatrixWorld( true );\n\n\t\t\t\t}\n\n\t\t\t\t// calculate physics and update bones\n\n\t\t\t\tthis._updateRigidBodies();\n\t\t\t\tthis._stepSimulation( delta );\n\t\t\t\tthis._updateBones();\n\n\t\t\t\t// restore mesh if converted above\n\n\t\t\t\tif ( isNonDefaultScale ) {\n\n\t\t\t\t\tif ( parent !== null ) mesh.parent = parent;\n\n\t\t\t\t\tmesh.scale.copy( scale );\n\n\t\t\t\t}\n\n\t\t\t\tmanager.freeThreeVector3( scale );\n\t\t\t\tmanager.freeThreeQuaternion( quaternion );\n\t\t\t\tmanager.freeThreeVector3( position );\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Resets rigid bodies transorm to current bone's.\n\t\t\t *\n\t\t\t * @return {THREE.MMDPhysics}\n\t\t\t */\n\t\t\treset: function () {\n\n\t\t\t\tfor ( var i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.bodies[ i ].reset();\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Warm ups Rigid bodies. Calculates cycles steps.\n\t\t\t *\n\t\t\t * @param {Integer} cycles\n\t\t\t * @return {THREE.MMDPhysics}\n\t\t\t */\n\t\t\twarmup: function ( cycles ) {\n\n\t\t\t\tfor ( var i = 0; i < cycles; i ++ ) {\n\n\t\t\t\t\tthis.update( 1 / 60 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets gravity.\n\t\t\t *\n\t\t\t * @param {THREE.Vector3} gravity\n\t\t\t * @return {MMDPhysicsHelper}\n\t\t\t */\n\t\t\tsetGravity: function ( gravity ) {\n\n\t\t\t\tthis.world.setGravity( new Ammo.btVector3( gravity.x, gravity.y, gravity.z ) );\n\t\t\t\tthis.gravity.copy( gravity );\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates MMDPhysicsHelper\n\t\t\t *\n\t\t\t * @return {MMDPhysicsHelper}\n\t\t\t */\n\t\t\tcreateHelper: function () {\n\n\t\t\t\treturn new MMDPhysicsHelper( this.mesh, this );\n\n\t\t\t},\n\n\t\t\t// private methods\n\n\t\t\t_init: function ( mesh, rigidBodyParams, constraintParams ) {\n\n\t\t\t\tvar manager = this.manager;\n\n\t\t\t\t// rigid body/constraint parameters are for\n\t\t\t\t// mesh's default world transform as position(0, 0, 0),\n\t\t\t\t// quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n\t\t\t\tvar parent = mesh.parent;\n\n\t\t\t\tif ( parent !== null ) parent = null;\n\n\t\t\t\tvar currentPosition = manager.allocThreeVector3();\n\t\t\t\tvar currentQuaternion = manager.allocThreeQuaternion();\n\t\t\t\tvar currentScale = manager.allocThreeVector3();\n\n\t\t\t\tcurrentPosition.copy( mesh.position );\n\t\t\t\tcurrentQuaternion.copy( mesh.quaternion );\n\t\t\t\tcurrentScale.copy( mesh.scale );\n\n\t\t\t\tmesh.position.set( 0, 0, 0 );\n\t\t\t\tmesh.quaternion.set( 0, 0, 0, 1 );\n\t\t\t\tmesh.scale.set( 1, 1, 1 );\n\n\t\t\t\tmesh.updateMatrixWorld( true );\n\n\t\t\t\tif ( this.world === null ) {\n\n\t\t\t\t\tthis.world = this._createWorld();\n\t\t\t\t\tthis.setGravity( this.gravity );\n\n\t\t\t\t}\n\n\t\t\t\tthis._initRigidBodies( rigidBodyParams );\n\t\t\t\tthis._initConstraints( constraintParams );\n\n\t\t\t\tif ( parent !== null ) mesh.parent = parent;\n\n\t\t\t\tmesh.position.copy( currentPosition );\n\t\t\t\tmesh.quaternion.copy( currentQuaternion );\n\t\t\t\tmesh.scale.copy( currentScale );\n\n\t\t\t\tmesh.updateMatrixWorld( true );\n\n\t\t\t\tthis.reset();\n\n\t\t\t\tmanager.freeThreeVector3( currentPosition );\n\t\t\t\tmanager.freeThreeQuaternion( currentQuaternion );\n\t\t\t\tmanager.freeThreeVector3( currentScale );\n\n\t\t\t},\n\n\t\t\t_createWorld: function () {\n\n\t\t\t\tvar config = new Ammo.btDefaultCollisionConfiguration();\n\t\t\t\tvar dispatcher = new Ammo.btCollisionDispatcher( config );\n\t\t\t\tvar cache = new Ammo.btDbvtBroadphase();\n\t\t\t\tvar solver = new Ammo.btSequentialImpulseConstraintSolver();\n\t\t\t\tvar world = new Ammo.btDiscreteDynamicsWorld( dispatcher, cache, solver, config );\n\t\t\t\treturn world;\n\n\t\t\t},\n\n\t\t\t_initRigidBodies: function ( rigidBodies ) {\n\n\t\t\t\tfor ( var i = 0, il = rigidBodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.bodies.push( new RigidBody(\n\t\t\t\t\t\tthis.mesh, this.world, rigidBodies[ i ], this.manager ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t_initConstraints: function ( constraints ) {\n\n\t\t\t\tfor ( var i = 0, il = constraints.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar params = constraints[ i ];\n\t\t\t\t\tvar bodyA = this.bodies[ params.rigidBodyIndex1 ];\n\t\t\t\t\tvar bodyB = this.bodies[ params.rigidBodyIndex2 ];\n\t\t\t\t\tthis.constraints.push( new Constraint(\n\t\t\t\t\t\tthis.mesh, this.world, bodyA, bodyB, params, this.manager ) );\n\n\t\t\t\t}\n\n\n\t\t\t},\n\n\t\t\t_stepSimulation: function ( delta ) {\n\n\t\t\t\tvar unitStep = this.unitStep;\n\t\t\t\tvar stepTime = delta;\n\t\t\t\tvar maxStepNum = ( ( delta / unitStep ) | 0 ) + 1;\n\n\t\t\t\tif ( stepTime < unitStep ) {\n\n\t\t\t\t\tstepTime = unitStep;\n\t\t\t\t\tmaxStepNum = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( maxStepNum > this.maxStepNum ) {\n\n\t\t\t\t\tmaxStepNum = this.maxStepNum;\n\n\t\t\t\t}\n\n\t\t\t\tthis.world.stepSimulation( stepTime, maxStepNum, unitStep );\n\n\t\t\t},\n\n\t\t\t_updateRigidBodies: function () {\n\n\t\t\t\tfor ( var i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.bodies[ i ].updateFromBone();\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t_updateBones: function () {\n\n\t\t\t\tfor ( var i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.bodies[ i ].updateBone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * This manager's responsibilies are\n\t\t *\n\t\t * 1. manage Ammo.js and Three.js object resources and\n\t\t *    improve the performance and the memory consumption by\n\t\t *    reusing objects.\n\t\t *\n\t\t * 2. provide simple Ammo object operations.\n\t\t */\n\t\tfunction ResourceManager() {\n\n\t\t\t// for Three.js\n\t\t\tthis.threeVector3s = [];\n\t\t\tthis.threeMatrix4s = [];\n\t\t\tthis.threeQuaternions = [];\n\t\t\tthis.threeEulers = [];\n\n\t\t\t// for Ammo.js\n\t\t\tthis.transforms = [];\n\t\t\tthis.quaternions = [];\n\t\t\tthis.vector3s = [];\n\n\t\t}\n\n\t\tResourceManager.prototype = {\n\n\t\t\tconstructor: ResourceManager,\n\n\t\t\tallocThreeVector3: function () {\n\n\t\t\t\treturn ( this.threeVector3s.length > 0 )\n\t\t\t\t\t? this.threeVector3s.pop()\n\t\t\t\t\t: new THREE.Vector3();\n\n\t\t\t},\n\n\t\t\tfreeThreeVector3: function ( v ) {\n\n\t\t\t\tthis.threeVector3s.push( v );\n\n\t\t\t},\n\n\t\t\tallocThreeMatrix4: function () {\n\n\t\t\t\treturn ( this.threeMatrix4s.length > 0 )\n\t\t\t\t\t? this.threeMatrix4s.pop()\n\t\t\t\t\t: new THREE.Matrix4();\n\n\t\t\t},\n\n\t\t\tfreeThreeMatrix4: function ( m ) {\n\n\t\t\t\tthis.threeMatrix4s.push( m );\n\n\t\t\t},\n\n\t\t\tallocThreeQuaternion: function () {\n\n\t\t\t\treturn ( this.threeQuaternions.length > 0 )\n\t\t\t\t\t? this.threeQuaternions.pop()\n\t\t\t\t\t: new THREE.Quaternion();\n\n\t\t\t},\n\n\t\t\tfreeThreeQuaternion: function ( q ) {\n\n\t\t\t\tthis.threeQuaternions.push( q );\n\n\t\t\t},\n\n\t\t\tallocThreeEuler: function () {\n\n\t\t\t\treturn ( this.threeEulers.length > 0 )\n\t\t\t\t\t? this.threeEulers.pop()\n\t\t\t\t\t: new THREE.Euler();\n\n\t\t\t},\n\n\t\t\tfreeThreeEuler: function ( e ) {\n\n\t\t\t\tthis.threeEulers.push( e );\n\n\t\t\t},\n\n\t\t\tallocTransform: function () {\n\n\t\t\t\treturn ( this.transforms.length > 0 )\n\t\t\t\t\t? this.transforms.pop()\n\t\t\t\t\t: new Ammo.btTransform();\n\n\t\t\t},\n\n\t\t\tfreeTransform: function ( t ) {\n\n\t\t\t\tthis.transforms.push( t );\n\n\t\t\t},\n\n\t\t\tallocQuaternion: function () {\n\n\t\t\t\treturn ( this.quaternions.length > 0 )\n\t\t\t\t\t? this.quaternions.pop()\n\t\t\t\t\t: new Ammo.btQuaternion();\n\n\t\t\t},\n\n\t\t\tfreeQuaternion: function ( q ) {\n\n\t\t\t\tthis.quaternions.push( q );\n\n\t\t\t},\n\n\t\t\tallocVector3: function () {\n\n\t\t\t\treturn ( this.vector3s.length > 0 )\n\t\t\t\t\t? this.vector3s.pop()\n\t\t\t\t\t: new Ammo.btVector3();\n\n\t\t\t},\n\n\t\t\tfreeVector3: function ( v ) {\n\n\t\t\t\tthis.vector3s.push( v );\n\n\t\t\t},\n\n\t\t\tsetIdentity: function ( t ) {\n\n\t\t\t\tt.setIdentity();\n\n\t\t\t},\n\n\t\t\tgetBasis: function ( t ) {\n\n\t\t\t\tvar q = this.allocQuaternion();\n\t\t\t\tt.getBasis().getRotation( q );\n\t\t\t\treturn q;\n\n\t\t\t},\n\n\t\t\tgetBasisAsMatrix3: function ( t ) {\n\n\t\t\t\tvar q = this.getBasis( t );\n\t\t\t\tvar m = this.quaternionToMatrix3( q );\n\t\t\t\tthis.freeQuaternion( q );\n\t\t\t\treturn m;\n\n\t\t\t},\n\n\t\t\tgetOrigin: function ( t ) {\n\n\t\t\t\treturn t.getOrigin();\n\n\t\t\t},\n\n\t\t\tsetOrigin: function ( t, v ) {\n\n\t\t\t\tt.getOrigin().setValue( v.x(), v.y(), v.z() );\n\n\t\t\t},\n\n\t\t\tcopyOrigin: function ( t1, t2 ) {\n\n\t\t\t\tvar o = t2.getOrigin();\n\t\t\t\tthis.setOrigin( t1, o );\n\n\t\t\t},\n\n\t\t\tsetBasis: function ( t, q ) {\n\n\t\t\t\tt.setRotation( q );\n\n\t\t\t},\n\n\t\t\tsetBasisFromMatrix3: function ( t, m ) {\n\n\t\t\t\tvar q = this.matrix3ToQuaternion( m );\n\t\t\t\tthis.setBasis( t, q );\n\t\t\t\tthis.freeQuaternion( q );\n\n\t\t\t},\n\n\t\t\tsetOriginFromArray3: function ( t, a ) {\n\n\t\t\t\tt.getOrigin().setValue( a[ 0 ], a[ 1 ], a[ 2 ] );\n\n\t\t\t},\n\n\t\t\tsetOriginFromThreeVector3: function ( t, v ) {\n\n\t\t\t\tt.getOrigin().setValue( v.x, v.y, v.z );\n\n\t\t\t},\n\n\t\t\tsetBasisFromArray3: function ( t, a ) {\n\n\t\t\t\tvar thQ = this.allocThreeQuaternion();\n\t\t\t\tvar thE = this.allocThreeEuler();\n\t\t\t\tthE.set( a[ 0 ], a[ 1 ], a[ 2 ] );\n\t\t\t\tthis.setBasisFromThreeQuaternion( t, thQ.setFromEuler( thE ) );\n\n\t\t\t\tthis.freeThreeEuler( thE );\n\t\t\t\tthis.freeThreeQuaternion( thQ );\n\n\t\t\t},\n\n\t\t\tsetBasisFromThreeQuaternion: function ( t, a ) {\n\n\t\t\t\tvar q = this.allocQuaternion();\n\n\t\t\t\tq.setX( a.x );\n\t\t\t\tq.setY( a.y );\n\t\t\t\tq.setZ( a.z );\n\t\t\t\tq.setW( a.w );\n\t\t\t\tthis.setBasis( t, q );\n\n\t\t\t\tthis.freeQuaternion( q );\n\n\t\t\t},\n\n\t\t\tmultiplyTransforms: function ( t1, t2 ) {\n\n\t\t\t\tvar t = this.allocTransform();\n\t\t\t\tthis.setIdentity( t );\n\n\t\t\t\tvar m1 = this.getBasisAsMatrix3( t1 );\n\t\t\t\tvar m2 = this.getBasisAsMatrix3( t2 );\n\n\t\t\t\tvar o1 = this.getOrigin( t1 );\n\t\t\t\tvar o2 = this.getOrigin( t2 );\n\n\t\t\t\tvar v1 = this.multiplyMatrix3ByVector3( m1, o2 );\n\t\t\t\tvar v2 = this.addVector3( v1, o1 );\n\t\t\t\tthis.setOrigin( t, v2 );\n\n\t\t\t\tvar m3 = this.multiplyMatrices3( m1, m2 );\n\t\t\t\tthis.setBasisFromMatrix3( t, m3 );\n\n\t\t\t\tthis.freeVector3( v1 );\n\t\t\t\tthis.freeVector3( v2 );\n\n\t\t\t\treturn t;\n\n\t\t\t},\n\n\t\t\tinverseTransform: function ( t ) {\n\n\t\t\t\tvar t2 = this.allocTransform();\n\n\t\t\t\tvar m1 = this.getBasisAsMatrix3( t );\n\t\t\t\tvar o = this.getOrigin( t );\n\n\t\t\t\tvar m2 = this.transposeMatrix3( m1 );\n\t\t\t\tvar v1 = this.negativeVector3( o );\n\t\t\t\tvar v2 = this.multiplyMatrix3ByVector3( m2, v1 );\n\n\t\t\t\tthis.setOrigin( t2, v2 );\n\t\t\t\tthis.setBasisFromMatrix3( t2, m2 );\n\n\t\t\t\tthis.freeVector3( v1 );\n\t\t\t\tthis.freeVector3( v2 );\n\n\t\t\t\treturn t2;\n\n\t\t\t},\n\n\t\t\tmultiplyMatrices3: function ( m1, m2 ) {\n\n\t\t\t\tvar m3 = [];\n\n\t\t\t\tvar v10 = this.rowOfMatrix3( m1, 0 );\n\t\t\t\tvar v11 = this.rowOfMatrix3( m1, 1 );\n\t\t\t\tvar v12 = this.rowOfMatrix3( m1, 2 );\n\n\t\t\t\tvar v20 = this.columnOfMatrix3( m2, 0 );\n\t\t\t\tvar v21 = this.columnOfMatrix3( m2, 1 );\n\t\t\t\tvar v22 = this.columnOfMatrix3( m2, 2 );\n\n\t\t\t\tm3[ 0 ] = this.dotVectors3( v10, v20 );\n\t\t\t\tm3[ 1 ] = this.dotVectors3( v10, v21 );\n\t\t\t\tm3[ 2 ] = this.dotVectors3( v10, v22 );\n\t\t\t\tm3[ 3 ] = this.dotVectors3( v11, v20 );\n\t\t\t\tm3[ 4 ] = this.dotVectors3( v11, v21 );\n\t\t\t\tm3[ 5 ] = this.dotVectors3( v11, v22 );\n\t\t\t\tm3[ 6 ] = this.dotVectors3( v12, v20 );\n\t\t\t\tm3[ 7 ] = this.dotVectors3( v12, v21 );\n\t\t\t\tm3[ 8 ] = this.dotVectors3( v12, v22 );\n\n\t\t\t\tthis.freeVector3( v10 );\n\t\t\t\tthis.freeVector3( v11 );\n\t\t\t\tthis.freeVector3( v12 );\n\t\t\t\tthis.freeVector3( v20 );\n\t\t\t\tthis.freeVector3( v21 );\n\t\t\t\tthis.freeVector3( v22 );\n\n\t\t\t\treturn m3;\n\n\t\t\t},\n\n\t\t\taddVector3: function ( v1, v2 ) {\n\n\t\t\t\tvar v = this.allocVector3();\n\t\t\t\tv.setValue( v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z() );\n\t\t\t\treturn v;\n\n\t\t\t},\n\n\t\t\tdotVectors3: function ( v1, v2 ) {\n\n\t\t\t\treturn v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n\n\t\t\t},\n\n\t\t\trowOfMatrix3: function ( m, i ) {\n\n\t\t\t\tvar v = this.allocVector3();\n\t\t\t\tv.setValue( m[ i * 3 + 0 ], m[ i * 3 + 1 ], m[ i * 3 + 2 ] );\n\t\t\t\treturn v;\n\n\t\t\t},\n\n\t\t\tcolumnOfMatrix3: function ( m, i ) {\n\n\t\t\t\tvar v = this.allocVector3();\n\t\t\t\tv.setValue( m[ i + 0 ], m[ i + 3 ], m[ i + 6 ] );\n\t\t\t\treturn v;\n\n\t\t\t},\n\n\t\t\tnegativeVector3: function ( v ) {\n\n\t\t\t\tvar v2 = this.allocVector3();\n\t\t\t\tv2.setValue( - v.x(), - v.y(), - v.z() );\n\t\t\t\treturn v2;\n\n\t\t\t},\n\n\t\t\tmultiplyMatrix3ByVector3: function ( m, v ) {\n\n\t\t\t\tvar v4 = this.allocVector3();\n\n\t\t\t\tvar v0 = this.rowOfMatrix3( m, 0 );\n\t\t\t\tvar v1 = this.rowOfMatrix3( m, 1 );\n\t\t\t\tvar v2 = this.rowOfMatrix3( m, 2 );\n\t\t\t\tvar x = this.dotVectors3( v0, v );\n\t\t\t\tvar y = this.dotVectors3( v1, v );\n\t\t\t\tvar z = this.dotVectors3( v2, v );\n\n\t\t\t\tv4.setValue( x, y, z );\n\n\t\t\t\tthis.freeVector3( v0 );\n\t\t\t\tthis.freeVector3( v1 );\n\t\t\t\tthis.freeVector3( v2 );\n\n\t\t\t\treturn v4;\n\n\t\t\t},\n\n\t\t\ttransposeMatrix3: function ( m ) {\n\n\t\t\t\tvar m2 = [];\n\t\t\t\tm2[ 0 ] = m[ 0 ];\n\t\t\t\tm2[ 1 ] = m[ 3 ];\n\t\t\t\tm2[ 2 ] = m[ 6 ];\n\t\t\t\tm2[ 3 ] = m[ 1 ];\n\t\t\t\tm2[ 4 ] = m[ 4 ];\n\t\t\t\tm2[ 5 ] = m[ 7 ];\n\t\t\t\tm2[ 6 ] = m[ 2 ];\n\t\t\t\tm2[ 7 ] = m[ 5 ];\n\t\t\t\tm2[ 8 ] = m[ 8 ];\n\t\t\t\treturn m2;\n\n\t\t\t},\n\n\t\t\tquaternionToMatrix3: function ( q ) {\n\n\t\t\t\tvar m = [];\n\n\t\t\t\tvar x = q.x();\n\t\t\t\tvar y = q.y();\n\t\t\t\tvar z = q.z();\n\t\t\t\tvar w = q.w();\n\n\t\t\t\tvar xx = x * x;\n\t\t\t\tvar yy = y * y;\n\t\t\t\tvar zz = z * z;\n\n\t\t\t\tvar xy = x * y;\n\t\t\t\tvar yz = y * z;\n\t\t\t\tvar zx = z * x;\n\n\t\t\t\tvar xw = x * w;\n\t\t\t\tvar yw = y * w;\n\t\t\t\tvar zw = z * w;\n\n\t\t\t\tm[ 0 ] = 1 - 2 * ( yy + zz );\n\t\t\t\tm[ 1 ] = 2 * ( xy - zw );\n\t\t\t\tm[ 2 ] = 2 * ( zx + yw );\n\t\t\t\tm[ 3 ] = 2 * ( xy + zw );\n\t\t\t\tm[ 4 ] = 1 - 2 * ( zz + xx );\n\t\t\t\tm[ 5 ] = 2 * ( yz - xw );\n\t\t\t\tm[ 6 ] = 2 * ( zx - yw );\n\t\t\t\tm[ 7 ] = 2 * ( yz + xw );\n\t\t\t\tm[ 8 ] = 1 - 2 * ( xx + yy );\n\n\t\t\t\treturn m;\n\n\t\t\t},\n\n\t\t\tmatrix3ToQuaternion: function ( m ) {\n\n\t\t\t\tvar t = m[ 0 ] + m[ 4 ] + m[ 8 ];\n\t\t\t\tvar s, x, y, z, w;\n\n\t\t\t\tif ( t > 0 ) {\n\n\t\t\t\t\ts = Math.sqrt( t + 1.0 ) * 2;\n\t\t\t\t\tw = 0.25 * s;\n\t\t\t\t\tx = ( m[ 7 ] - m[ 5 ] ) / s;\n\t\t\t\t\ty = ( m[ 2 ] - m[ 6 ] ) / s;\n\t\t\t\t\tz = ( m[ 3 ] - m[ 1 ] ) / s;\n\n\t\t\t\t} else if ( ( m[ 0 ] > m[ 4 ] ) && ( m[ 0 ] > m[ 8 ] ) ) {\n\n\t\t\t\t\ts = Math.sqrt( 1.0 + m[ 0 ] - m[ 4 ] - m[ 8 ] ) * 2;\n\t\t\t\t\tw = ( m[ 7 ] - m[ 5 ] ) / s;\n\t\t\t\t\tx = 0.25 * s;\n\t\t\t\t\ty = ( m[ 1 ] + m[ 3 ] ) / s;\n\t\t\t\t\tz = ( m[ 2 ] + m[ 6 ] ) / s;\n\n\t\t\t\t} else if ( m[ 4 ] > m[ 8 ] ) {\n\n\t\t\t\t\ts = Math.sqrt( 1.0 + m[ 4 ] - m[ 0 ] - m[ 8 ] ) * 2;\n\t\t\t\t\tw = ( m[ 2 ] - m[ 6 ] ) / s;\n\t\t\t\t\tx = ( m[ 1 ] + m[ 3 ] ) / s;\n\t\t\t\t\ty = 0.25 * s;\n\t\t\t\t\tz = ( m[ 5 ] + m[ 7 ] ) / s;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ts = Math.sqrt( 1.0 + m[ 8 ] - m[ 0 ] - m[ 4 ] ) * 2;\n\t\t\t\t\tw = ( m[ 3 ] - m[ 1 ] ) / s;\n\t\t\t\t\tx = ( m[ 2 ] + m[ 6 ] ) / s;\n\t\t\t\t\ty = ( m[ 5 ] + m[ 7 ] ) / s;\n\t\t\t\t\tz = 0.25 * s;\n\n\t\t\t\t}\n\n\t\t\t\tvar q = this.allocQuaternion();\n\t\t\t\tq.setX( x );\n\t\t\t\tq.setY( y );\n\t\t\t\tq.setZ( z );\n\t\t\t\tq.setW( w );\n\t\t\t\treturn q;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * @param {THREE.SkinnedMesh} mesh\n\t\t * @param {Ammo.btDiscreteDynamicsWorld} world\n\t\t * @param {Object} params\n\t\t * @param {ResourceManager} manager\n\t\t */\n\t\tfunction RigidBody( mesh, world, params, manager ) {\n\n\t\t\tthis.mesh = mesh;\n\t\t\tthis.world = world;\n\t\t\tthis.params = params;\n\t\t\tthis.manager = manager;\n\n\t\t\tthis.body = null;\n\t\t\tthis.bone = null;\n\t\t\tthis.boneOffsetForm = null;\n\t\t\tthis.boneOffsetFormInverse = null;\n\n\t\t\tthis._init();\n\n\t\t}\n\n\t\tRigidBody.prototype = {\n\n\t\t\tconstructor: MMDPhysics.RigidBody,\n\n\t\t\t/**\n\t\t\t * Resets rigid body transform to the current bone's.\n\t\t\t *\n\t\t\t * @return {RigidBody}\n\t\t\t */\n\t\t\treset: function () {\n\n\t\t\t\tthis._setTransformFromBone();\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Updates rigid body's transform from the current bone.\n\t\t\t *\n\t\t\t * @return {RidigBody}\n\t\t\t */\n\t\t\tupdateFromBone: function () {\n\n\t\t\t\tif ( this.params.boneIndex !== - 1 &&\n\t\t\t\t\tthis.params.type === 0 ) {\n\n\t\t\t\t\tthis._setTransformFromBone();\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Updates bone from the current ridid body's transform.\n\t\t\t *\n\t\t\t * @return {RidigBody}\n\t\t\t */\n\t\t\tupdateBone: function () {\n\n\t\t\t\tif ( this.params.type === 0 ||\n\t\t\t\t\tthis.params.boneIndex === - 1 ) {\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t\tthis._updateBoneRotation();\n\n\t\t\t\tif ( this.params.type === 1 ) {\n\n\t\t\t\t\tthis._updateBonePosition();\n\n\t\t\t\t}\n\n\t\t\t\tthis.bone.updateMatrixWorld( true );\n\n\t\t\t\tif ( this.params.type === 2 ) {\n\n\t\t\t\t\tthis._setPositionFromBone();\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t},\n\n\t\t\t// private methods\n\n\t\t\t_init: function () {\n\n\t\t\t\tfunction generateShape( p ) {\n\n\t\t\t\t\tswitch ( p.shapeType ) {\n\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn new Ammo.btSphereShape( p.width );\n\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn new Ammo.btBoxShape( new Ammo.btVector3( p.width, p.height, p.depth ) );\n\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn new Ammo.btCapsuleShape( p.width, p.height );\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow 'unknown shape type ' + p.shapeType;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar params = this.params;\n\t\t\t\tvar bones = this.mesh.skeleton.bones;\n\t\t\t\tvar bone = ( params.boneIndex === - 1 )\n\t\t\t\t\t? new THREE.Bone()\n\t\t\t\t\t: bones[ params.boneIndex ];\n\n\t\t\t\tvar shape = generateShape( params );\n\t\t\t\tvar weight = ( params.type === 0 ) ? 0 : params.weight;\n\t\t\t\tvar localInertia = manager.allocVector3();\n\t\t\t\tlocalInertia.setValue( 0, 0, 0 );\n\n\t\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\t\tshape.calculateLocalInertia( weight, localInertia );\n\n\t\t\t\t}\n\n\t\t\t\tvar boneOffsetForm = manager.allocTransform();\n\t\t\t\tmanager.setIdentity( boneOffsetForm );\n\t\t\t\tmanager.setOriginFromArray3( boneOffsetForm, params.position );\n\t\t\t\tmanager.setBasisFromArray3( boneOffsetForm, params.rotation );\n\n\t\t\t\tvar vector = manager.allocThreeVector3();\n\t\t\t\tvar boneForm = manager.allocTransform();\n\t\t\t\tmanager.setIdentity( boneForm );\n\t\t\t\tmanager.setOriginFromThreeVector3( boneForm, bone.getWorldPosition( vector ) );\n\n\t\t\t\tvar form = manager.multiplyTransforms( boneForm, boneOffsetForm );\n\t\t\t\tvar state = new Ammo.btDefaultMotionState( form );\n\n\t\t\t\tvar info = new Ammo.btRigidBodyConstructionInfo( weight, state, shape, localInertia );\n\t\t\t\tinfo.set_m_friction( params.friction );\n\t\t\t\tinfo.set_m_restitution( params.restitution );\n\n\t\t\t\tvar body = new Ammo.btRigidBody( info );\n\n\t\t\t\tif ( params.type === 0 ) {\n\n\t\t\t\t\tbody.setCollisionFlags( body.getCollisionFlags() | 2 );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * It'd be better to comment out this line though in general I should call this method\n\t\t\t\t\t * because I'm not sure why but physics will be more like MMD's\n\t\t\t\t\t * if I comment out.\n\t\t\t\t\t */\n\t\t\t\t\tbody.setActivationState( 4 );\n\n\t\t\t\t}\n\n\t\t\t\tbody.setDamping( params.positionDamping, params.rotationDamping );\n\t\t\t\tbody.setSleepingThresholds( 0, 0 );\n\n\t\t\t\tthis.world.addRigidBody( body, 1 << params.groupIndex, params.groupTarget );\n\n\t\t\t\tthis.body = body;\n\t\t\t\tthis.bone = bone;\n\t\t\t\tthis.boneOffsetForm = boneOffsetForm;\n\t\t\t\tthis.boneOffsetFormInverse = manager.inverseTransform( boneOffsetForm );\n\n\t\t\t\tmanager.freeVector3( localInertia );\n\t\t\t\tmanager.freeTransform( form );\n\t\t\t\tmanager.freeTransform( boneForm );\n\t\t\t\tmanager.freeThreeVector3( vector );\n\n\t\t\t},\n\n\t\t\t_getBoneTransform: function () {\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar p = manager.allocThreeVector3();\n\t\t\t\tvar q = manager.allocThreeQuaternion();\n\t\t\t\tvar s = manager.allocThreeVector3();\n\n\t\t\t\tthis.bone.matrixWorld.decompose( p, q, s );\n\n\t\t\t\tvar tr = manager.allocTransform();\n\t\t\t\tmanager.setOriginFromThreeVector3( tr, p );\n\t\t\t\tmanager.setBasisFromThreeQuaternion( tr, q );\n\n\t\t\t\tvar form = manager.multiplyTransforms( tr, this.boneOffsetForm );\n\n\t\t\t\tmanager.freeTransform( tr );\n\t\t\t\tmanager.freeThreeVector3( s );\n\t\t\t\tmanager.freeThreeQuaternion( q );\n\t\t\t\tmanager.freeThreeVector3( p );\n\n\t\t\t\treturn form;\n\n\t\t\t},\n\n\t\t\t_getWorldTransformForBone: function () {\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar tr = this.body.getCenterOfMassTransform();\n\t\t\t\treturn manager.multiplyTransforms( tr, this.boneOffsetFormInverse );\n\n\t\t\t},\n\n\t\t\t_setTransformFromBone: function () {\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar form = this._getBoneTransform();\n\n\t\t\t\t// TODO: check the most appropriate way to set\n\t\t\t\t//this.body.setWorldTransform( form );\n\t\t\t\tthis.body.setCenterOfMassTransform( form );\n\t\t\t\tthis.body.getMotionState().setWorldTransform( form );\n\n\t\t\t\tmanager.freeTransform( form );\n\n\t\t\t},\n\n\t\t\t_setPositionFromBone: function () {\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar form = this._getBoneTransform();\n\n\t\t\t\tvar tr = manager.allocTransform();\n\t\t\t\tthis.body.getMotionState().getWorldTransform( tr );\n\t\t\t\tmanager.copyOrigin( tr, form );\n\n\t\t\t\t// TODO: check the most appropriate way to set\n\t\t\t\t//this.body.setWorldTransform( tr );\n\t\t\t\tthis.body.setCenterOfMassTransform( tr );\n\t\t\t\tthis.body.getMotionState().setWorldTransform( tr );\n\n\t\t\t\tmanager.freeTransform( tr );\n\t\t\t\tmanager.freeTransform( form );\n\n\t\t\t},\n\n\t\t\t_updateBoneRotation: function () {\n\n\t\t\t\tvar manager = this.manager;\n\n\t\t\t\tvar tr = this._getWorldTransformForBone();\n\t\t\t\tvar q = manager.getBasis( tr );\n\n\t\t\t\tvar thQ = manager.allocThreeQuaternion();\n\t\t\t\tvar thQ2 = manager.allocThreeQuaternion();\n\t\t\t\tvar thQ3 = manager.allocThreeQuaternion();\n\n\t\t\t\tthQ.set( q.x(), q.y(), q.z(), q.w() );\n\t\t\t\tthQ2.setFromRotationMatrix( this.bone.matrixWorld );\n\t\t\t\tthQ2.conjugate();\n\t\t\t\tthQ2.multiply( thQ );\n\n\t\t\t\t//this.bone.quaternion.multiply( thQ2 );\n\n\t\t\t\tthQ3.setFromRotationMatrix( this.bone.matrix );\n\n\t\t\t\t// Renormalizing quaternion here because repeatedly transforming\n\t\t\t\t// quaternion continuously accumulates floating point error and\n\t\t\t\t// can end up being overflow. See #15335\n\t\t\t\tthis.bone.quaternion.copy( thQ2.multiply( thQ3 ).normalize() );\n\n\t\t\t\tmanager.freeThreeQuaternion( thQ );\n\t\t\t\tmanager.freeThreeQuaternion( thQ2 );\n\t\t\t\tmanager.freeThreeQuaternion( thQ3 );\n\n\t\t\t\tmanager.freeQuaternion( q );\n\t\t\t\tmanager.freeTransform( tr );\n\n\t\t\t},\n\n\t\t\t_updateBonePosition: function () {\n\n\t\t\t\tvar manager = this.manager;\n\n\t\t\t\tvar tr = this._getWorldTransformForBone();\n\n\t\t\t\tvar thV = manager.allocThreeVector3();\n\n\t\t\t\tvar o = manager.getOrigin( tr );\n\t\t\t\tthV.set( o.x(), o.y(), o.z() );\n\n\t\t\t\tif ( this.bone.parent ) {\n\n\t\t\t\t\tthis.bone.parent.worldToLocal( thV );\n\n\t\t\t\t}\n\n\t\t\t\tthis.bone.position.copy( thV );\n\n\t\t\t\tmanager.freeThreeVector3( thV );\n\n\t\t\t\tmanager.freeTransform( tr );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * @param {THREE.SkinnedMesh} mesh\n\t\t * @param {Ammo.btDiscreteDynamicsWorld} world\n\t\t * @param {RigidBody} bodyA\n\t\t * @param {RigidBody} bodyB\n\t\t * @param {Object} params\n\t\t * @param {ResourceManager} manager\n\t\t */\n\t\tfunction Constraint( mesh, world, bodyA, bodyB, params, manager ) {\n\n\t\t\tthis.mesh = mesh;\n\t\t\tthis.world = world;\n\t\t\tthis.bodyA = bodyA;\n\t\t\tthis.bodyB = bodyB;\n\t\t\tthis.params = params;\n\t\t\tthis.manager = manager;\n\n\t\t\tthis.constraint = null;\n\n\t\t\tthis._init();\n\n\t\t}\n\n\t\tConstraint.prototype = {\n\n\t\t\tconstructor: Constraint,\n\n\t\t\t// private method\n\n\t\t\t_init: function () {\n\n\t\t\t\tvar manager = this.manager;\n\t\t\t\tvar params = this.params;\n\t\t\t\tvar bodyA = this.bodyA;\n\t\t\t\tvar bodyB = this.bodyB;\n\n\t\t\t\tvar form = manager.allocTransform();\n\t\t\t\tmanager.setIdentity( form );\n\t\t\t\tmanager.setOriginFromArray3( form, params.position );\n\t\t\t\tmanager.setBasisFromArray3( form, params.rotation );\n\n\t\t\t\tvar formA = manager.allocTransform();\n\t\t\t\tvar formB = manager.allocTransform();\n\n\t\t\t\tbodyA.body.getMotionState().getWorldTransform( formA );\n\t\t\t\tbodyB.body.getMotionState().getWorldTransform( formB );\n\n\t\t\t\tvar formInverseA = manager.inverseTransform( formA );\n\t\t\t\tvar formInverseB = manager.inverseTransform( formB );\n\n\t\t\t\tvar formA2 = manager.multiplyTransforms( formInverseA, form );\n\t\t\t\tvar formB2 = manager.multiplyTransforms( formInverseB, form );\n\n\t\t\t\tvar constraint = new Ammo.btGeneric6DofSpringConstraint( bodyA.body, bodyB.body, formA2, formB2, true );\n\n\t\t\t\tvar lll = manager.allocVector3();\n\t\t\t\tvar lul = manager.allocVector3();\n\t\t\t\tvar all = manager.allocVector3();\n\t\t\t\tvar aul = manager.allocVector3();\n\n\t\t\t\tlll.setValue( params.translationLimitation1[ 0 ],\n\t\t\t\t              params.translationLimitation1[ 1 ],\n\t\t\t\t              params.translationLimitation1[ 2 ] );\n\t\t\t\tlul.setValue( params.translationLimitation2[ 0 ],\n\t\t\t\t              params.translationLimitation2[ 1 ],\n\t\t\t\t              params.translationLimitation2[ 2 ] );\n\t\t\t\tall.setValue( params.rotationLimitation1[ 0 ],\n\t\t\t\t              params.rotationLimitation1[ 1 ],\n\t\t\t\t              params.rotationLimitation1[ 2 ] );\n\t\t\t\taul.setValue( params.rotationLimitation2[ 0 ],\n\t\t\t\t              params.rotationLimitation2[ 1 ],\n\t\t\t\t              params.rotationLimitation2[ 2 ] );\n\n\t\t\t\tconstraint.setLinearLowerLimit( lll );\n\t\t\t\tconstraint.setLinearUpperLimit( lul );\n\t\t\t\tconstraint.setAngularLowerLimit( all );\n\t\t\t\tconstraint.setAngularUpperLimit( aul );\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tif ( params.springPosition[ i ] !== 0 ) {\n\n\t\t\t\t\t\tconstraint.enableSpring( i, true );\n\t\t\t\t\t\tconstraint.setStiffness( i, params.springPosition[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tif ( params.springRotation[ i ] !== 0 ) {\n\n\t\t\t\t\t\tconstraint.enableSpring( i + 3, true );\n\t\t\t\t\t\tconstraint.setStiffness( i + 3, params.springRotation[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Currently(10/31/2016) official ammo.js doesn't support\n\t\t\t\t * btGeneric6DofSpringConstraint.setParam method.\n\t\t\t\t * You need custom ammo.js (add the method into idl) if you wanna use.\n\t\t\t\t * By setting this parameter, physics will be more like MMD's\n\t\t\t\t */\n\t\t\t\tif ( constraint.setParam !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t// this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\t\t\t\t\t\tconstraint.setParam( 2, 0.475, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.world.addConstraint( constraint, true );\n\t\t\t\tthis.constraint = constraint;\n\n\t\t\t\tmanager.freeTransform( form );\n\t\t\t\tmanager.freeTransform( formA );\n\t\t\t\tmanager.freeTransform( formB );\n\t\t\t\tmanager.freeTransform( formInverseA );\n\t\t\t\tmanager.freeTransform( formInverseB );\n\t\t\t\tmanager.freeTransform( formA2 );\n\t\t\t\tmanager.freeTransform( formB2 );\n\t\t\t\tmanager.freeVector3( lll );\n\t\t\t\tmanager.freeVector3( lul );\n\t\t\t\tmanager.freeVector3( all );\n\t\t\t\tmanager.freeVector3( aul );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Visualize Rigid bodies\n\t\t *\n\t\t * @param {THREE.SkinnedMesh} mesh\n\t\t * @param {THREE.Physics} physics\n\t\t */\n\t\tfunction MMDPhysicsHelper( mesh, physics ) {\n\n\t\t\tTHREE.Object3D.call( this );\n\n\t\t\tthis.root = mesh;\n\t\t\tthis.physics = physics;\n\n\t\t\tthis.matrix.copy( mesh.matrixWorld );\n\t\t\tthis.matrixAutoUpdate = false;\n\n\t\t\tthis.materials = [];\n\n\t\t\tthis.materials.push(\n\t\t\t\tnew THREE.MeshBasicMaterial( {\n\t\t\t\t\tcolor: new THREE.Color( 0xff8888 ),\n\t\t\t\t\twireframe: true,\n\t\t\t\t\tdepthTest: false,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\topacity: 0.25,\n\t\t\t\t\ttransparent: true\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\tthis.materials.push(\n\t\t\t\tnew THREE.MeshBasicMaterial( {\n\t\t\t\t\tcolor: new THREE.Color( 0x88ff88 ),\n\t\t\t\t\twireframe: true,\n\t\t\t\t\tdepthTest: false,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\topacity: 0.25,\n\t\t\t\t\ttransparent: true\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\tthis.materials.push(\n\t\t\t\tnew THREE.MeshBasicMaterial( {\n\t\t\t\t\tcolor: new THREE.Color( 0x8888ff ),\n\t\t\t\t\twireframe: true,\n\t\t\t\t\tdepthTest: false,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\topacity: 0.25,\n\t\t\t\t\ttransparent: true\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\tthis._init();\n\n\t\t}\n\n\t\tMMDPhysicsHelper.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\t\t\tconstructor: MMDPhysicsHelper,\n\n\t\t\t/**\n\t\t\t * Updates Rigid Bodies visualization.\n\t\t\t */\n\t\t\tupdateMatrixWorld: function () {\n\n\t\t\t\tvar position = new THREE.Vector3();\n\t\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\t\tvar scale = new THREE.Vector3();\n\t\t\t\tvar matrixWorldInv = new THREE.Matrix4();\n\n\t\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\t\tvar mesh = this.root;\n\n\t\t\t\t\tif ( this.visible ) {\n\n\t\t\t\t\t\tvar bodies = this.physics.bodies;\n\n\t\t\t\t\t\tmatrixWorldInv\n\t\t\t\t\t\t\t.copy( mesh.matrixWorld )\n\t\t\t\t\t\t\t.decompose( position, quaternion, scale )\n\t\t\t\t\t\t\t.compose( position, quaternion, scale.set( 1, 1, 1 ) )\n\t\t\t\t\t\t\t.getInverse( matrixWorldInv );\n\n\t\t\t\t\t\tfor ( var i = 0, il = bodies.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar body = bodies[ i ].body;\n\t\t\t\t\t\t\tvar child = this.children[ i ];\n\n\t\t\t\t\t\t\tvar tr = body.getCenterOfMassTransform();\n\t\t\t\t\t\t\tvar origin = tr.getOrigin();\n\t\t\t\t\t\t\tvar rotation = tr.getRotation();\n\n\t\t\t\t\t\t\tchild.position\n\t\t\t\t\t\t\t\t.set( origin.x(), origin.y(), origin.z() )\n\t\t\t\t\t\t\t\t.applyMatrix4( matrixWorldInv );\n\n\t\t\t\t\t\t\tchild.quaternion\n\t\t\t\t\t\t\t\t.setFromRotationMatrix( matrixWorldInv )\n\t\t\t\t\t\t\t\t.multiply(\n\t\t\t\t\t\t\t\t\tquaternion.set(\n\t\t\t\t\t\t\t\t\t\trotation.x(), rotation.y(), rotation.z(), rotation.w() )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.matrix\n\t\t\t\t\t\t.copy( mesh.matrixWorld )\n\t\t\t\t\t\t.decompose( position, quaternion, scale )\n\t\t\t\t\t\t.compose( position, quaternion, scale.set( 1, 1, 1 ) );\n\n\t\t\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\t};\n\n\t\t\t}(),\n\n\t\t\t// private method\n\n\t\t\t_init: function () {\n\n\t\t\t\tvar bodies = this.physics.bodies;\n\n\t\t\t\tfunction createGeometry( param ) {\n\n\t\t\t\t\tswitch ( param.shapeType ) {\n\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn new THREE.SphereBufferGeometry( param.width, 16, 8 );\n\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn new THREE.BoxBufferGeometry( param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8 );\n\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn new createCapsuleGeometry( param.width, param.height, 16, 8 );\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\n\t\t\t\tfunction createCapsuleGeometry( radius, cylinderHeight, segmentsRadius, segmentsHeight ) {\n\n\t\t\t\t\tvar geometry = new THREE.CylinderBufferGeometry( radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true );\n\t\t\t\t\tvar upperSphere = new THREE.Mesh( new THREE.SphereBufferGeometry( radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2 ) );\n\t\t\t\t\tvar lowerSphere = new THREE.Mesh( new THREE.SphereBufferGeometry( radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2 ) );\n\n\t\t\t\t\tupperSphere.position.set( 0, cylinderHeight / 2, 0 );\n\t\t\t\t\tlowerSphere.position.set( 0, - cylinderHeight / 2, 0 );\n\n\t\t\t\t\tupperSphere.updateMatrix();\n\t\t\t\t\tlowerSphere.updateMatrix();\n\n\t\t\t\t\tgeometry.merge( upperSphere.geometry, upperSphere.matrix );\n\t\t\t\t\tgeometry.merge( lowerSphere.geometry, lowerSphere.matrix );\n\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, il = bodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar param = bodies[ i ].params;\n\t\t\t\t\tthis.add( new THREE.Mesh( createGeometry( param ), this.materials[ param.type ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn MMDPhysics;\n\n\t} )();\n\n\treturn THREE.MMDPhysics;\n});\n"]}