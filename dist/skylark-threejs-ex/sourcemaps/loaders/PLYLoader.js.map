{"version":3,"sources":["loaders/PLYLoader.js"],"names":["define","THREE","PLYLoader","manager","Loader","call","this","propertyNameMapping","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","text","parse","setPropertyNameMapping","mapping","data","parseHeader","headerText","headerLength","result","exec","length","currentElement","lineType","lineValues","propertValues","property","header","comments","elements","lines","split","i","line","trim","shift","join","format","version","push","undefined","name","count","parseInt","properties","type","countType","itemType","console","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","body","currentElementCount","handleElement","postProcess","geometry","BufferGeometry","setIndex","setAttribute","Float32BufferAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","ArrayBuffer","LoaderUtils","decodeText","Uint8Array","DataView","loc","parseBinary"],"mappings":"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","file":"../../loaders/PLYLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Wei Meng / http://about.me/menway\n\t *\n\t * Description: A THREE loader for PLY ASCII files (known as the Polygon\n\t * File Format or the Stanford Triangle Format).\n\t *\n\t * Limitations: ASCII decoding assumes file is UTF-8.\n\t *\n\t * Usage:\n\t *\tvar loader = new THREE.PLYLoader();\n\t *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n\t *\n\t *\t\tscene.add( new THREE.Mesh( geometry ) );\n\t *\n\t *\t} );\n\t *\n\t * If the PLY file uses non standard property names, they can be mapped while\n\t * loading. For example, the following maps the properties\n\t * “diffuse_(red|green|blue)” in the file to standard color names.\n\t *\n\t * loader.setPropertyNameMapping( {\n\t *\tdiffuse_red: 'red',\n\t *\tdiffuse_green: 'green',\n\t *\tdiffuse_blue: 'blue'\n\t * } );\n\t *\n\t */\n\n\n\tTHREE.PLYLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.propertyNameMapping = {};\n\n\t};\n\n\tTHREE.PLYLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.PLYLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPropertyNameMapping: function ( mapping ) {\n\n\t\t\tthis.propertyNameMapping = mapping;\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tfunction parseHeader( data ) {\n\n\t\t\t\tvar patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n\t\t\t\tvar headerText = '';\n\t\t\t\tvar headerLength = 0;\n\t\t\t\tvar result = patternHeader.exec( data );\n\n\t\t\t\tif ( result !== null ) {\n\n\t\t\t\t\theaderText = result[ 1 ];\n\t\t\t\t\theaderLength = result[ 0 ].length;\n\n\t\t\t\t}\n\n\t\t\t\tvar header = {\n\t\t\t\t\tcomments: [],\n\t\t\t\t\telements: [],\n\t\t\t\t\theaderLength: headerLength\n\t\t\t\t};\n\n\t\t\t\tvar lines = headerText.split( '\\n' );\n\t\t\t\tvar currentElement;\n\t\t\t\tvar lineType, lineValues;\n\n\t\t\t\tfunction make_ply_element_property( propertValues, propertyNameMapping ) {\n\n\t\t\t\t\tvar property = { type: propertValues[ 0 ] };\n\n\t\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\t\tproperty.name = propertValues[ 3 ];\n\t\t\t\t\t\tproperty.countType = propertValues[ 1 ];\n\t\t\t\t\t\tproperty.itemType = propertValues[ 2 ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tproperty.name = propertValues[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( property.name in propertyNameMapping ) {\n\n\t\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn property;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\t\tvar line = lines[ i ];\n\t\t\t\t\tline = line.trim();\n\n\t\t\t\t\tif ( line === '' ) continue;\n\n\t\t\t\t\tlineValues = line.split( /\\s+/ );\n\t\t\t\t\tlineType = lineValues.shift();\n\t\t\t\t\tline = lineValues.join( ' ' );\n\n\t\t\t\t\tswitch ( lineType ) {\n\n\t\t\t\t\t\tcase 'format':\n\n\t\t\t\t\t\t\theader.format = lineValues[ 0 ];\n\t\t\t\t\t\t\theader.version = lineValues[ 1 ];\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'comment':\n\n\t\t\t\t\t\t\theader.comments.push( line );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'element':\n\n\t\t\t\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentElement = {};\n\t\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\n\t\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\n\t\t\t\t\t\t\tcurrentElement.properties = [];\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'property':\n\n\t\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t}\n\n\t\t\tfunction parseASCIINumber( n, type ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n\t\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n\t\t\t\t\t\treturn parseInt( n );\n\n\t\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\n\n\t\t\t\t\t\treturn parseFloat( n );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseASCIIElement( properties, line ) {\n\n\t\t\t\tvar values = line.split( /\\s+/ );\n\n\t\t\t\tvar element = {};\n\n\t\t\t\tfor ( var i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\t\tvar list = [];\n\t\t\t\t\t\tvar n = parseASCIINumber( values.shift(), properties[ i ].countType );\n\n\t\t\t\t\t\tfor ( var j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\t\tlist.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t\tfunction parseASCII( data, header ) {\n\n\t\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n\t\t\t\tvar buffer = {\n\t\t\t\t\tindices: [],\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\tfaceVertexUvs: [],\n\t\t\t\t\tcolors: []\n\t\t\t\t};\n\n\t\t\t\tvar result;\n\n\t\t\t\tvar patternBody = /end_header\\s([\\s\\S]*)$/;\n\t\t\t\tvar body = '';\n\t\t\t\tif ( ( result = patternBody.exec( data ) ) !== null ) {\n\n\t\t\t\t\tbody = result[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar lines = body.split( '\\n' );\n\t\t\t\tvar currentElement = 0;\n\t\t\t\tvar currentElementCount = 0;\n\n\t\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\t\tvar line = lines[ i ];\n\t\t\t\t\tline = line.trim();\n\t\t\t\t\tif ( line === '' ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( currentElementCount >= header.elements[ currentElement ].count ) {\n\n\t\t\t\t\t\tcurrentElement ++;\n\t\t\t\t\t\tcurrentElementCount = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar element = parseASCIIElement( header.elements[ currentElement ].properties, line );\n\n\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t\tcurrentElementCount ++;\n\n\t\t\t\t}\n\n\t\t\t\treturn postProcess( buffer );\n\n\t\t\t}\n\n\t\t\tfunction postProcess( buffer ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\t// mandatory buffer data\n\n\t\t\t\tif ( buffer.indices.length > 0 ) {\n\n\t\t\t\t\tgeometry.setIndex( buffer.indices );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( buffer.vertices, 3 ) );\n\n\t\t\t\t// optional buffer data\n\n\t\t\t\tif ( buffer.normals.length > 0 ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new THREE.Float32BufferAttribute( buffer.normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffer.uvs.length > 0 ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( buffer.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffer.colors.length > 0 ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( buffer.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffer.faceVertexUvs.length > 0 ) {\n\n\t\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction handleElement( buffer, elementName, element ) {\n\n\t\t\t\tif ( elementName === 'vertex' ) {\n\n\t\t\t\t\tbuffer.vertices.push( element.x, element.y, element.z );\n\n\t\t\t\t\tif ( 'nx' in element && 'ny' in element && 'nz' in element ) {\n\n\t\t\t\t\t\tbuffer.normals.push( element.nx, element.ny, element.nz );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 's' in element && 't' in element ) {\n\n\t\t\t\t\t\tbuffer.uvs.push( element.s, element.t );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'red' in element && 'green' in element && 'blue' in element ) {\n\n\t\t\t\t\t\tbuffer.colors.push( element.red / 255.0, element.green / 255.0, element.blue / 255.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( elementName === 'face' ) {\n\n\t\t\t\t\tvar vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\t\t\t\t\tvar texcoord = element.texcoord;\n\n\t\t\t\t\tif ( vertex_indices.length === 3 ) {\n\n\t\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\n\n\t\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\n\n\t\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\n\t\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\n\t\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( vertex_indices.length === 4 ) {\n\n\t\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\n\t\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction binaryRead( dataview, at, type, little_endian ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t// corespondences for non-specific length types here match rply:\n\t\t\t\t\tcase 'int8':\t\tcase 'char':\t return [ dataview.getInt8( at ), 1 ];\n\t\t\t\t\tcase 'uint8':\t\tcase 'uchar':\t return [ dataview.getUint8( at ), 1 ];\n\t\t\t\t\tcase 'int16':\t\tcase 'short':\t return [ dataview.getInt16( at, little_endian ), 2 ];\n\t\t\t\t\tcase 'uint16':\tcase 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];\n\t\t\t\t\tcase 'int32':\t\tcase 'int':\t\t return [ dataview.getInt32( at, little_endian ), 4 ];\n\t\t\t\t\tcase 'uint32':\tcase 'uint':\t return [ dataview.getUint32( at, little_endian ), 4 ];\n\t\t\t\t\tcase 'float32': case 'float':\t return [ dataview.getFloat32( at, little_endian ), 4 ];\n\t\t\t\t\tcase 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction binaryReadElement( dataview, at, properties, little_endian ) {\n\n\t\t\t\tvar element = {};\n\t\t\t\tvar result, read = 0;\n\n\t\t\t\tfor ( var i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\t\tvar list = [];\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].countType, little_endian );\n\t\t\t\t\t\tvar n = result[ 0 ];\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t\tfor ( var j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );\n\t\t\t\t\t\t\tlist.push( result[ 0 ] );\n\t\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult = binaryRead( dataview, at + read, properties[ i ].type, little_endian );\n\t\t\t\t\t\telement[ properties[ i ].name ] = result[ 0 ];\n\t\t\t\t\t\tread += result[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn [ element, read ];\n\n\t\t\t}\n\n\t\t\tfunction parseBinary( data, header ) {\n\n\t\t\t\tvar buffer = {\n\t\t\t\t\tindices: [],\n\t\t\t\t\tvertices: [],\n\t\t\t\t\tnormals: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\tfaceVertexUvs: [],\n\t\t\t\t\tcolors: []\n\t\t\t\t};\n\n\t\t\t\tvar little_endian = ( header.format === 'binary_little_endian' );\n\t\t\t\tvar body = new DataView( data, header.headerLength );\n\t\t\t\tvar result, loc = 0;\n\n\t\t\t\tfor ( var currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\n\n\t\t\t\t\tfor ( var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {\n\n\t\t\t\t\t\tresult = binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );\n\t\t\t\t\t\tloc += result[ 1 ];\n\t\t\t\t\t\tvar element = result[ 0 ];\n\n\t\t\t\t\t\thandleElement( buffer, header.elements[ currentElement ].name, element );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn postProcess( buffer );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar geometry;\n\t\t\tvar scope = this;\n\n\t\t\tif ( data instanceof ArrayBuffer ) {\n\n\t\t\t\tvar text = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\t\t\t\tvar header = parseHeader( text );\n\n\t\t\t\tgeometry = header.format === 'ascii' ? parseASCII( text, header ) : parseBinary( data, header );\n\n\t\t\t} else {\n\n\t\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.PLYLoader;\n});\n"]}