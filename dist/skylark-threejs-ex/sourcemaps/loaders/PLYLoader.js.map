{"version":3,"sources":["loaders/PLYLoader.js"],"names":["define","THREE","threex","PLYLoader","manager","Loader","call","this","propertyNameMapping","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","text","parse","setPropertyNameMapping","mapping","data","parseHeader","headerText","headerLength","result","exec","length","currentElement","lineType","lineValues","propertValues","property","header","comments","elements","lines","split","i","line","trim","shift","join","format","version","push","undefined","name","count","parseInt","properties","type","countType","itemType","console","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","body","currentElementCount","handleElement","postProcess","geometry","BufferGeometry","setIndex","setAttribute","Float32BufferAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","ArrayBuffer","LoaderUtils","decodeText","Uint8Array","DataView","loc","parseBinary","loaders"],"mappings":"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","file":"../../loaders/PLYLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var PLYLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.propertyNameMapping = {};\n    };\n    PLYLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: PLYLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        setPropertyNameMapping: function (mapping) {\n            this.propertyNameMapping = mapping;\n        },\n        parse: function (data) {\n            function parseHeader(data) {\n                var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n                var headerText = '';\n                var headerLength = 0;\n                var result = patternHeader.exec(data);\n                if (result !== null) {\n                    headerText = result[1];\n                    headerLength = result[0].length;\n                }\n                var header = {\n                    comments: [],\n                    elements: [],\n                    headerLength: headerLength\n                };\n                var lines = headerText.split('\\n');\n                var currentElement;\n                var lineType, lineValues;\n                function make_ply_element_property(propertValues, propertyNameMapping) {\n                    var property = { type: propertValues[0] };\n                    if (property.type === 'list') {\n                        property.name = propertValues[3];\n                        property.countType = propertValues[1];\n                        property.itemType = propertValues[2];\n                    } else {\n                        property.name = propertValues[1];\n                    }\n                    if (property.name in propertyNameMapping) {\n                        property.name = propertyNameMapping[property.name];\n                    }\n                    return property;\n                }\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '')\n                        continue;\n                    lineValues = line.split(/\\s+/);\n                    lineType = lineValues.shift();\n                    line = lineValues.join(' ');\n                    switch (lineType) {\n                    case 'format':\n                        header.format = lineValues[0];\n                        header.version = lineValues[1];\n                        break;\n                    case 'comment':\n                        header.comments.push(line);\n                        break;\n                    case 'element':\n                        if (currentElement !== undefined) {\n                            header.elements.push(currentElement);\n                        }\n                        currentElement = {};\n                        currentElement.name = lineValues[0];\n                        currentElement.count = parseInt(lineValues[1]);\n                        currentElement.properties = [];\n                        break;\n                    case 'property':\n                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n                        break;\n                    default:\n                        console.log('unhandled', lineType, lineValues);\n                    }\n                }\n                if (currentElement !== undefined) {\n                    header.elements.push(currentElement);\n                }\n                return header;\n            }\n            function parseASCIINumber(n, type) {\n                switch (type) {\n                case 'char':\n                case 'uchar':\n                case 'short':\n                case 'ushort':\n                case 'int':\n                case 'uint':\n                case 'int8':\n                case 'uint8':\n                case 'int16':\n                case 'uint16':\n                case 'int32':\n                case 'uint32':\n                    return parseInt(n);\n                case 'float':\n                case 'double':\n                case 'float32':\n                case 'float64':\n                    return parseFloat(n);\n                }\n            }\n            function parseASCIIElement(properties, line) {\n                var values = line.split(/\\s+/);\n                var element = {};\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        var n = parseASCIINumber(values.shift(), properties[i].countType);\n                        for (var j = 0; j < n; j++) {\n                            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n                    }\n                }\n                return element;\n            }\n            function parseASCII(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var result;\n                var patternBody = /end_header\\s([\\s\\S]*)$/;\n                var body = '';\n                if ((result = patternBody.exec(data)) !== null) {\n                    body = result[1];\n                }\n                var lines = body.split('\\n');\n                var currentElement = 0;\n                var currentElementCount = 0;\n                for (var i = 0; i < lines.length; i++) {\n                    var line = lines[i];\n                    line = line.trim();\n                    if (line === '') {\n                        continue;\n                    }\n                    if (currentElementCount >= header.elements[currentElement].count) {\n                        currentElement++;\n                        currentElementCount = 0;\n                    }\n                    var element = parseASCIIElement(header.elements[currentElement].properties, line);\n                    handleElement(buffer, header.elements[currentElement].name, element);\n                    currentElementCount++;\n                }\n                return postProcess(buffer);\n            }\n            function postProcess(buffer) {\n                var geometry = new THREE.BufferGeometry();\n                if (buffer.indices.length > 0) {\n                    geometry.setIndex(buffer.indices);\n                }\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(buffer.vertices, 3));\n                if (buffer.normals.length > 0) {\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(buffer.normals, 3));\n                }\n                if (buffer.uvs.length > 0) {\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.uvs, 2));\n                }\n                if (buffer.colors.length > 0) {\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(buffer.colors, 3));\n                }\n                if (buffer.faceVertexUvs.length > 0) {\n                    geometry = geometry.toNonIndexed();\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(buffer.faceVertexUvs, 2));\n                }\n                geometry.computeBoundingSphere();\n                return geometry;\n            }\n            function handleElement(buffer, elementName, element) {\n                if (elementName === 'vertex') {\n                    buffer.vertices.push(element.x, element.y, element.z);\n                    if ('nx' in element && 'ny' in element && 'nz' in element) {\n                        buffer.normals.push(element.nx, element.ny, element.nz);\n                    }\n                    if ('s' in element && 't' in element) {\n                        buffer.uvs.push(element.s, element.t);\n                    }\n                    if ('red' in element && 'green' in element && 'blue' in element) {\n                        buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n                    }\n                } else if (elementName === 'face') {\n                    var vertex_indices = element.vertex_indices || element.vertex_index;\n                    var texcoord = element.texcoord;\n                    if (vertex_indices.length === 3) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n                        if (texcoord && texcoord.length === 6) {\n                            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n                            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n                            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n                        }\n                    } else if (vertex_indices.length === 4) {\n                        buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n                        buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n                    }\n                }\n            }\n            function binaryRead(dataview, at, type, little_endian) {\n                switch (type) {\n                case 'int8':\n                case 'char':\n                    return [\n                        dataview.getInt8(at),\n                        1\n                    ];\n                case 'uint8':\n                case 'uchar':\n                    return [\n                        dataview.getUint8(at),\n                        1\n                    ];\n                case 'int16':\n                case 'short':\n                    return [\n                        dataview.getInt16(at, little_endian),\n                        2\n                    ];\n                case 'uint16':\n                case 'ushort':\n                    return [\n                        dataview.getUint16(at, little_endian),\n                        2\n                    ];\n                case 'int32':\n                case 'int':\n                    return [\n                        dataview.getInt32(at, little_endian),\n                        4\n                    ];\n                case 'uint32':\n                case 'uint':\n                    return [\n                        dataview.getUint32(at, little_endian),\n                        4\n                    ];\n                case 'float32':\n                case 'float':\n                    return [\n                        dataview.getFloat32(at, little_endian),\n                        4\n                    ];\n                case 'float64':\n                case 'double':\n                    return [\n                        dataview.getFloat64(at, little_endian),\n                        8\n                    ];\n                }\n            }\n            function binaryReadElement(dataview, at, properties, little_endian) {\n                var element = {};\n                var result, read = 0;\n                for (var i = 0; i < properties.length; i++) {\n                    if (properties[i].type === 'list') {\n                        var list = [];\n                        result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n                        var n = result[0];\n                        read += result[1];\n                        for (var j = 0; j < n; j++) {\n                            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n                            list.push(result[0]);\n                            read += result[1];\n                        }\n                        element[properties[i].name] = list;\n                    } else {\n                        result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n                        element[properties[i].name] = result[0];\n                        read += result[1];\n                    }\n                }\n                return [\n                    element,\n                    read\n                ];\n            }\n            function parseBinary(data, header) {\n                var buffer = {\n                    indices: [],\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    faceVertexUvs: [],\n                    colors: []\n                };\n                var little_endian = header.format === 'binary_little_endian';\n                var body = new DataView(data, header.headerLength);\n                var result, loc = 0;\n                for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n                    for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n                        result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n                        loc += result[1];\n                        var element = result[0];\n                        handleElement(buffer, header.elements[currentElement].name, element);\n                    }\n                }\n                return postProcess(buffer);\n            }\n            var geometry;\n            var scope = this;\n            if (data instanceof ArrayBuffer) {\n                var text = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n                var header = parseHeader(text);\n                geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n            } else {\n                geometry = parseASCII(data, parseHeader(data));\n            }\n            return geometry;\n        }\n    });\n    return threex.loaders.PLYLoader = PLYLoader;\n});"]}