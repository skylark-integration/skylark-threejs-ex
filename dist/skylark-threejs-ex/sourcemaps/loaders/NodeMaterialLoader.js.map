{"version":3,"sources":["loaders/NodeMaterialLoader.js"],"names":["define","THREE","Nodes","NodeMaterialLoader","manager","library","this","undefined","DefaultLoadingManager","nodes","materials","passes","names","Object","assign","prototype","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","JSON","value","getObjectByName","uuid","getObjectById","getNode","object","console","warn","resolve","json","test","Array","isArray","i","length","prop","declare","node","nodeType","name","type","material","pass","copy"],"mappings":"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","file":"../../loaders/NodeMaterialLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../nodes/Nodes'\n], function (THREE, Nodes) {\n    'use strict';\n    var NodeMaterialLoader = function (manager, library) {\n        this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n        this.nodes = {};\n        this.materials = {};\n        this.passes = {};\n        this.names = {};\n        this.library = library || {};\n    };\n    var NodeMaterialLoaderUtils = {\n        replaceUUIDObject: function (object, uuid, value, recursive) {\n            recursive = recursive !== undefined ? recursive : true;\n            if (typeof uuid === 'object')\n                uuid = uuid.uuid;\n            if (typeof object === 'object') {\n                var keys = Object.keys(object);\n                for (var i = 0; i < keys.length; i++) {\n                    var key = keys[i];\n                    if (recursive) {\n                        object[key] = this.replaceUUIDObject(object[key], uuid, value);\n                    }\n                    if (key === uuid) {\n                        object[uuid] = object[key];\n                        delete object[key];\n                    }\n                }\n            }\n            return object === uuid ? value : object;\n        },\n        replaceUUID: function (json, uuid, value) {\n            this.replaceUUIDObject(json, uuid, value, false);\n            this.replaceUUIDObject(json.nodes, uuid, value);\n            this.replaceUUIDObject(json.materials, uuid, value);\n            this.replaceUUIDObject(json.passes, uuid, value);\n            this.replaceUUIDObject(json.library, uuid, value, false);\n            return json;\n        }\n    };\n    Object.assign(NodeMaterialLoader.prototype, {\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(JSON.parse(text)));\n            }, onProgress, onError);\n            return this;\n        },\n        setPath: function (value) {\n            this.path = value;\n            return this;\n        },\n        getObjectByName: function (uuid) {\n            return this.names[uuid];\n        },\n        getObjectById: function (uuid) {\n            return this.library[uuid] || this.nodes[uuid] || this.materials[uuid] || this.passes[uuid] || this.names[uuid];\n        },\n        getNode: function (uuid) {\n            var object = this.getObjectById(uuid);\n            if (!object) {\n                console.warn('Node \"' + uuid + '\" not found.');\n            }\n            return object;\n        },\n        resolve: function (json) {\n            switch (typeof json) {\n            case 'boolean':\n            case 'number':\n                return json;\n            case 'string':\n                if (/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/i.test(json) || this.library[json]) {\n                    return this.getNode(json);\n                }\n                return json;\n            default:\n                if (Array.isArray(json)) {\n                    for (var i = 0; i < json.length; i++) {\n                        json[i] = this.resolve(json[i]);\n                    }\n                } else {\n                    for (var prop in json) {\n                        if (prop === 'uuid')\n                            continue;\n                        json[prop] = this.resolve(json[prop]);\n                    }\n                }\n            }\n            return json;\n        },\n        declare: function (json) {\n            var uuid, node, object;\n            for (uuid in json.nodes) {\n                node = json.nodes[uuid];\n                object = new Nodes[node.nodeType + 'Node']();\n                if (node.name) {\n                    object.name = node.name;\n                    this.names[object.name] = object;\n                }\n                this.nodes[uuid] = object;\n            }\n            for (uuid in json.materials) {\n                node = json.materials[uuid];\n                object = new Nodes[node.type]();\n                if (node.name) {\n                    object.name = node.name;\n                    this.names[object.name] = object;\n                }\n                this.materials[uuid] = object;\n            }\n            for (uuid in json.passes) {\n                node = json.passes[uuid];\n                object = new Nodes[node.type]();\n                if (node.name) {\n                    object.name = node.name;\n                    this.names[object.name] = object;\n                }\n                this.passes[uuid] = object;\n            }\n            if (json.material)\n                this.material = this.materials[json.material];\n            if (json.pass)\n                this.pass = this.passes[json.pass];\n            return json;\n        },\n        parse: function (json) {\n            var uuid;\n            json = this.resolve(this.declare(json));\n            for (uuid in json.nodes) {\n                this.nodes[uuid].copy(json.nodes[uuid]);\n            }\n            for (uuid in json.materials) {\n                this.materials[uuid].copy(json.materials[uuid]);\n            }\n            for (uuid in json.passes) {\n                this.passes[uuid].copy(json.passes[uuid]);\n            }\n            return this.material || this.pass || this;\n        }\n    });\n\n    return  NodeMaterialLoader;\n});"]}