{"version":3,"sources":["loaders/ColladaLoader.js"],"names":["define","THREE","TGALoader","ColladaLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","options","convertUpAxis","value","console","warn","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","isEmpty","object","keys","parseLibrary","libraryName","parser","library","undefined","elements","buildLibrary","data","builder","build","getBuild","parseAnimationSampler","inputs","nodeType","id","getAttribute","semantic","parseAnimationChannel","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","channels","samplers","sources","target","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","createKeyframeTracks","buildAnimationChannel","getAnimation","animations","inputSource","outputSource","time","stride","il","j","jl","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","index","keyframes","sort","a","b","transformAnimationData","prepareAnimationData","uuid","position","Vector3","scale","quaternion","Quaternion","animation","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","VectorKeyframeTrack","QuaternionKeyframeTrack","property","defaultValue","empty","prev","next","getPrev","getNext","interpolate","createMissingKeyframes","key","buildAnimationClip","duration","end","start","animationTracks","AnimationClip","getAnimationClip","clips","parseSkin","bindShapeMatrix","textContent","parseSource","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","skin","weights","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","Matrix4","identity","boneInverse","buildSkin","skinIndices","skinWeights","buildImage","init_from","getImage","images","parseEffectProfileCOMMON","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","buildMaterial","material","effect","effects","profile","MeshPhongMaterial","MeshLambertMaterial","MeshBasicMaterial","getTexture","textureObject","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","getTextureLoader","texture","wrapS","wrapU","RepeatWrapping","ClampToEdgeWrapping","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","transparent","transparency","opacity","double_sided","side","DoubleSide","getMaterial","materials","parseCameraOptics","parseCameraTechnique","parseCameraParameters","buildCamera","camera","optics","PerspectiveCamera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","OrthographicCamera","getCamera","cameras","parseLightTechnique","parseLightParameters","Color","falloffAngle","f","distance","Math","sqrt","buildLight","light","DirectionalLight","PointLight","SpotLight","AmbientLight","copy","getLight","lights","accessor","parseGeometryVertices","parseGeometryPrimitive","primitive","count","hasUV","inputname","max","p","checkUVCoordinates","primitives","uvsNeedsFix","buildGeometry","vertices","groupedPrimitives","groupPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","BufferGeometry","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","setAttribute","Float32BufferAttribute","pushVector","sourceStride","sourceArray","c","k","kl","getGeometry","buildKinematicsModel","parseKinematicsTechniqueCommon","parseKinematicsJoint","links","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","MathUtils","degToRad","parsePhysicsRigidBody","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsBindJointAxis","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","vector","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","multiply","makeTranslation","makeRotationAxis","log","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","buildBoneHierarchy","visualScenes","children","error","bone","processed","bones","boneInverses","Skeleton","root","traverse","isBone","buildNode","objects","instanceCamera","controller","controllers","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","Bone","Group","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","LineBasicMaterial","skinning","attributes","LineSegments","Line","SkinnedMesh","Mesh","buildVisualScene","group","getVisualScene","scene","Scene","DOMParser","parseFromString","collada","parserError","errorText","errorElement","result","stack","Node","TEXT_NODE","apply","parserErrorToText","version","asset","unit","hasAttribute","parseAssetUnit","upAxis","parseAssetUpAxis","parseAsset","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","kinematics","kinematicsModels","physicsModels","kinematicsScenes","mesh","element","prepareNodes","rigidBodies","bindJointAxis","setupAnimations","kinematicsModelId","kinematicsSceneId","visualSceneId","kinematicsModel","kinematicsScene","getKinematicsScene","visualScene","jointMap","targetElement","querySelector","parentVisualElement","parentElement","connect","m0","getJointValue","jointData","setJointValue","visualElement","visualElementName","buildTransformList","setupKinematics","parseScene","setFromEuler","Euler","PI","multiplyScalar"],"mappings":"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","file":"../../loaders/ColladaLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../loaders/TGALoader'\n], function (THREE, TGALoader) {\n    'use strict';\n    var ColladaLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    ColladaLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: ColladaLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        options: {\n            set convertUpAxis(value) {\n                console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n            }\n        },\n        parse: function (text, path) {\n            function getElementsByTagName(xml, name) {\n                var array = [];\n                var childNodes = xml.childNodes;\n                for (var i = 0, l = childNodes.length; i < l; i++) {\n                    var child = childNodes[i];\n                    if (child.nodeName === name) {\n                        array.push(child);\n                    }\n                }\n                return array;\n            }\n            function parseStrings(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parts[i];\n                }\n                return array;\n            }\n            function parseFloats(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseFloat(parts[i]);\n                }\n                return array;\n            }\n            function parseInts(text) {\n                if (text.length === 0)\n                    return [];\n                var parts = text.trim().split(/\\s+/);\n                var array = new Array(parts.length);\n                for (var i = 0, l = parts.length; i < l; i++) {\n                    array[i] = parseInt(parts[i]);\n                }\n                return array;\n            }\n            function parseId(text) {\n                return text.substring(1);\n            }\n            function generateId() {\n                return 'three_default_' + count++;\n            }\n            function isEmpty(object) {\n                return Object.keys(object).length === 0;\n            }\n            function parseAsset(xml) {\n                return {\n                    unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n                    upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n                };\n            }\n            function parseAssetUnit(xml) {\n                if (xml !== undefined && xml.hasAttribute('meter') === true) {\n                    return parseFloat(xml.getAttribute('meter'));\n                } else {\n                    return 1;\n                }\n            }\n            function parseAssetUpAxis(xml) {\n                return xml !== undefined ? xml.textContent : 'Y_UP';\n            }\n            function parseLibrary(xml, libraryName, nodeName, parser) {\n                var library = getElementsByTagName(xml, libraryName)[0];\n                if (library !== undefined) {\n                    var elements = getElementsByTagName(library, nodeName);\n                    for (var i = 0; i < elements.length; i++) {\n                        parser(elements[i]);\n                    }\n                }\n            }\n            function buildLibrary(data, builder) {\n                for (var name in data) {\n                    var object = data[name];\n                    object.build = builder(data[name]);\n                }\n            }\n            function getBuild(data, builder) {\n                if (data.build !== undefined)\n                    return data.build;\n                data.build = builder(data);\n                return data.build;\n            }\n            function parseAnimation(xml) {\n                var data = {\n                    sources: {},\n                    samplers: {},\n                    channels: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id;\n                    switch (child.nodeName) {\n                    case 'source':\n                        id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'sampler':\n                        id = child.getAttribute('id');\n                        data.samplers[id] = parseAnimationSampler(child);\n                        break;\n                    case 'channel':\n                        id = child.getAttribute('target');\n                        data.channels[id] = parseAnimationChannel(child);\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.animations[xml.getAttribute('id')] = data;\n            }\n            function parseAnimationSampler(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseAnimationChannel(xml) {\n                var data = {};\n                var target = xml.getAttribute('target');\n                var parts = target.split('/');\n                var id = parts.shift();\n                var sid = parts.shift();\n                var arraySyntax = sid.indexOf('(') !== -1;\n                var memberSyntax = sid.indexOf('.') !== -1;\n                if (memberSyntax) {\n                    parts = sid.split('.');\n                    sid = parts.shift();\n                    data.member = parts.shift();\n                } else if (arraySyntax) {\n                    var indices = sid.split('(');\n                    sid = indices.shift();\n                    for (var i = 0; i < indices.length; i++) {\n                        indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n                    }\n                    data.indices = indices;\n                }\n                data.id = id;\n                data.sid = sid;\n                data.arraySyntax = arraySyntax;\n                data.memberSyntax = memberSyntax;\n                data.sampler = parseId(xml.getAttribute('source'));\n                return data;\n            }\n            function buildAnimation(data) {\n                var tracks = [];\n                var channels = data.channels;\n                var samplers = data.samplers;\n                var sources = data.sources;\n                for (var target in channels) {\n                    if (channels.hasOwnProperty(target)) {\n                        var channel = channels[target];\n                        var sampler = samplers[channel.sampler];\n                        var inputId = sampler.inputs.INPUT;\n                        var outputId = sampler.inputs.OUTPUT;\n                        var inputSource = sources[inputId];\n                        var outputSource = sources[outputId];\n                        var animation = buildAnimationChannel(channel, inputSource, outputSource);\n                        createKeyframeTracks(animation, tracks);\n                    }\n                }\n                return tracks;\n            }\n            function getAnimation(id) {\n                return getBuild(library.animations[id], buildAnimation);\n            }\n            function buildAnimationChannel(channel, inputSource, outputSource) {\n                var node = library.nodes[channel.id];\n                var object3D = getNode(node.id);\n                var transform = node.transforms[channel.sid];\n                var defaultMatrix = node.matrix.clone().transpose();\n                var time, stride;\n                var i, il, j, jl;\n                var data = {};\n                switch (transform) {\n                case 'matrix':\n                    for (i = 0, il = inputSource.array.length; i < il; i++) {\n                        time = inputSource.array[i];\n                        stride = i * outputSource.stride;\n                        if (data[time] === undefined)\n                            data[time] = {};\n                        if (channel.arraySyntax === true) {\n                            var value = outputSource.array[stride];\n                            var index = channel.indices[0] + 4 * channel.indices[1];\n                            data[time][index] = value;\n                        } else {\n                            for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                                data[time][j] = outputSource.array[stride + j];\n                            }\n                        }\n                    }\n                    break;\n                case 'translate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'rotate':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                case 'scale':\n                    console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n                    break;\n                }\n                var keyframes = prepareAnimationData(data, defaultMatrix);\n                var animation = {\n                    name: object3D.uuid,\n                    keyframes: keyframes\n                };\n                return animation;\n            }\n            function prepareAnimationData(data, defaultMatrix) {\n                var keyframes = [];\n                for (var time in data) {\n                    keyframes.push({\n                        time: parseFloat(time),\n                        value: data[time]\n                    });\n                }\n                keyframes.sort(ascending);\n                for (var i = 0; i < 16; i++) {\n                    transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n                }\n                return keyframes;\n                function ascending(a, b) {\n                    return a.time - b.time;\n                }\n            }\n            var position = new THREE.Vector3();\n            var scale = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            function createKeyframeTracks(animation, tracks) {\n                var keyframes = animation.keyframes;\n                var name = animation.name;\n                var times = [];\n                var positionData = [];\n                var quaternionData = [];\n                var scaleData = [];\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    var time = keyframe.time;\n                    var value = keyframe.value;\n                    matrix.fromArray(value).transpose();\n                    matrix.decompose(position, quaternion, scale);\n                    times.push(time);\n                    positionData.push(position.x, position.y, position.z);\n                    quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n                    scaleData.push(scale.x, scale.y, scale.z);\n                }\n                if (positionData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.position', times, positionData));\n                if (quaternionData.length > 0)\n                    tracks.push(new THREE.QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n                if (scaleData.length > 0)\n                    tracks.push(new THREE.VectorKeyframeTrack(name + '.scale', times, scaleData));\n                return tracks;\n            }\n            function transformAnimationData(keyframes, property, defaultValue) {\n                var keyframe;\n                var empty = true;\n                var i, l;\n                for (i = 0, l = keyframes.length; i < l; i++) {\n                    keyframe = keyframes[i];\n                    if (keyframe.value[property] === undefined) {\n                        keyframe.value[property] = null;\n                    } else {\n                        empty = false;\n                    }\n                }\n                if (empty === true) {\n                    for (i = 0, l = keyframes.length; i < l; i++) {\n                        keyframe = keyframes[i];\n                        keyframe.value[property] = defaultValue;\n                    }\n                } else {\n                    createMissingKeyframes(keyframes, property);\n                }\n            }\n            function createMissingKeyframes(keyframes, property) {\n                var prev, next;\n                for (var i = 0, l = keyframes.length; i < l; i++) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] === null) {\n                        prev = getPrev(keyframes, i, property);\n                        next = getNext(keyframes, i, property);\n                        if (prev === null) {\n                            keyframe.value[property] = next.value[property];\n                            continue;\n                        }\n                        if (next === null) {\n                            keyframe.value[property] = prev.value[property];\n                            continue;\n                        }\n                        interpolate(keyframe, prev, next, property);\n                    }\n                }\n            }\n            function getPrev(keyframes, i, property) {\n                while (i >= 0) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i--;\n                }\n                return null;\n            }\n            function getNext(keyframes, i, property) {\n                while (i < keyframes.length) {\n                    var keyframe = keyframes[i];\n                    if (keyframe.value[property] !== null)\n                        return keyframe;\n                    i++;\n                }\n                return null;\n            }\n            function interpolate(key, prev, next, property) {\n                if (next.time - prev.time === 0) {\n                    key.value[property] = prev.value[property];\n                    return;\n                }\n                key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n            }\n            function parseAnimationClip(xml) {\n                var data = {\n                    name: xml.getAttribute('id') || 'default',\n                    start: parseFloat(xml.getAttribute('start') || 0),\n                    end: parseFloat(xml.getAttribute('end') || 0),\n                    animations: []\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_animation':\n                        data.animations.push(parseId(child.getAttribute('url')));\n                        break;\n                    }\n                }\n                library.clips[xml.getAttribute('id')] = data;\n            }\n            function buildAnimationClip(data) {\n                var tracks = [];\n                var name = data.name;\n                var duration = data.end - data.start || -1;\n                var animations = data.animations;\n                for (var i = 0, il = animations.length; i < il; i++) {\n                    var animationTracks = getAnimation(animations[i]);\n                    for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n                        tracks.push(animationTracks[j]);\n                    }\n                }\n                return new THREE.AnimationClip(name, duration, tracks);\n            }\n            function getAnimationClip(id) {\n                return getBuild(library.clips[id], buildAnimationClip);\n            }\n            function parseController(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'skin':\n                        data.id = parseId(child.getAttribute('source'));\n                        data.skin = parseSkin(child);\n                        break;\n                    case 'morph':\n                        data.id = parseId(child.getAttribute('source'));\n                        console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n                        break;\n                    }\n                }\n                library.controllers[xml.getAttribute('id')] = data;\n            }\n            function parseSkin(xml) {\n                var data = { sources: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_shape_matrix':\n                        data.bindShapeMatrix = parseFloats(child.textContent);\n                        break;\n                    case 'source':\n                        var id = child.getAttribute('id');\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'joints':\n                        data.joints = parseJoints(child);\n                        break;\n                    case 'vertex_weights':\n                        data.vertexWeights = parseVertexWeights(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseJoints(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        data.inputs[semantic] = id;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseVertexWeights(xml) {\n                var data = { inputs: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var semantic = child.getAttribute('semantic');\n                        var id = parseId(child.getAttribute('source'));\n                        var offset = parseInt(child.getAttribute('offset'));\n                        data.inputs[semantic] = {\n                            id: id,\n                            offset: offset\n                        };\n                        break;\n                    case 'vcount':\n                        data.vcount = parseInts(child.textContent);\n                        break;\n                    case 'v':\n                        data.v = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildController(data) {\n                var build = { id: data.id };\n                var geometry = library.geometries[build.id];\n                if (data.skin !== undefined) {\n                    build.skin = buildSkin(data.skin);\n                    geometry.sources.skinIndices = build.skin.indices;\n                    geometry.sources.skinWeights = build.skin.weights;\n                }\n                return build;\n            }\n            function buildSkin(data) {\n                var BONE_LIMIT = 4;\n                var build = {\n                    joints: [],\n                    indices: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    },\n                    weights: {\n                        array: [],\n                        stride: BONE_LIMIT\n                    }\n                };\n                var sources = data.sources;\n                var vertexWeights = data.vertexWeights;\n                var vcount = vertexWeights.vcount;\n                var v = vertexWeights.v;\n                var jointOffset = vertexWeights.inputs.JOINT.offset;\n                var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n                var jointSource = data.sources[data.joints.inputs.JOINT];\n                var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n                var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n                var stride = 0;\n                var i, j, l;\n                for (i = 0, l = vcount.length; i < l; i++) {\n                    var jointCount = vcount[i];\n                    var vertexSkinData = [];\n                    for (j = 0; j < jointCount; j++) {\n                        var skinIndex = v[stride + jointOffset];\n                        var weightId = v[stride + weightOffset];\n                        var skinWeight = weights[weightId];\n                        vertexSkinData.push({\n                            index: skinIndex,\n                            weight: skinWeight\n                        });\n                        stride += 2;\n                    }\n                    vertexSkinData.sort(descending);\n                    for (j = 0; j < BONE_LIMIT; j++) {\n                        var d = vertexSkinData[j];\n                        if (d !== undefined) {\n                            build.indices.array.push(d.index);\n                            build.weights.array.push(d.weight);\n                        } else {\n                            build.indices.array.push(0);\n                            build.weights.array.push(0);\n                        }\n                    }\n                }\n                if (data.bindShapeMatrix) {\n                    build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();\n                } else {\n                    build.bindMatrix = new THREE.Matrix4().identity();\n                }\n                for (i = 0, l = jointSource.array.length; i < l; i++) {\n                    var name = jointSource.array[i];\n                    var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n                    build.joints.push({\n                        name: name,\n                        boneInverse: boneInverse\n                    });\n                }\n                return build;\n                function descending(a, b) {\n                    return b.weight - a.weight;\n                }\n            }\n            function getController(id) {\n                return getBuild(library.controllers[id], buildController);\n            }\n            function parseImage(xml) {\n                var data = { init_from: getElementsByTagName(xml, 'init_from')[0].textContent };\n                library.images[xml.getAttribute('id')] = data;\n            }\n            function buildImage(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data.init_from;\n            }\n            function getImage(id) {\n                var data = library.images[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildImage);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n                return null;\n            }\n            function parseEffect(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'profile_COMMON':\n                        data.profile = parseEffectProfileCOMMON(child);\n                        break;\n                    }\n                }\n                library.effects[xml.getAttribute('id')] = data;\n            }\n            function parseEffectProfileCOMMON(xml) {\n                var data = {\n                    surfaces: {},\n                    samplers: {}\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'newparam':\n                        parseEffectNewparam(child, data);\n                        break;\n                    case 'technique':\n                        data.technique = parseEffectTechnique(child);\n                        break;\n                    case 'extra':\n                        data.extra = parseEffectExtra(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectNewparam(xml, data) {\n                var sid = xml.getAttribute('sid');\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'surface':\n                        data.surfaces[sid] = parseEffectSurface(child);\n                        break;\n                    case 'sampler2D':\n                        data.samplers[sid] = parseEffectSampler(child);\n                        break;\n                    }\n                }\n            }\n            function parseEffectSurface(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'init_from':\n                        data.init_from = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectSampler(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.source = child.textContent;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'constant':\n                    case 'lambert':\n                    case 'blinn':\n                    case 'phong':\n                        data.type = child.nodeName;\n                        data.parameters = parseEffectParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'emission':\n                    case 'diffuse':\n                    case 'specular':\n                    case 'bump':\n                    case 'ambient':\n                    case 'shininess':\n                    case 'transparency':\n                        data[child.nodeName] = parseEffectParameter(child);\n                        break;\n                    case 'transparent':\n                        data[child.nodeName] = {\n                            opaque: child.getAttribute('opaque'),\n                            data: parseEffectParameter(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameter(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        data[child.nodeName] = parseFloats(child.textContent);\n                        break;\n                    case 'float':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'texture':\n                        data[child.nodeName] = {\n                            id: child.getAttribute('texture'),\n                            extra: parseEffectParameterTexture(child)\n                        };\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTexture(xml) {\n                var data = { technique: {} };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'extra':\n                        parseEffectParameterTextureExtra(child, data);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectParameterTextureExtra(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        parseEffectParameterTextureExtraTechnique(child, data);\n                        break;\n                    }\n                }\n            }\n            function parseEffectParameterTextureExtraTechnique(xml, data) {\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'repeatU':\n                    case 'repeatV':\n                    case 'offsetU':\n                    case 'offsetV':\n                        data.technique[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    case 'wrapU':\n                    case 'wrapV':\n                        if (child.textContent.toUpperCase() === 'TRUE') {\n                            data.technique[child.nodeName] = 1;\n                        } else if (child.textContent.toUpperCase() === 'FALSE') {\n                            data.technique[child.nodeName] = 0;\n                        } else {\n                            data.technique[child.nodeName] = parseInt(child.textContent);\n                        }\n                        break;\n                    }\n                }\n            }\n            function parseEffectExtra(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique':\n                        data.technique = parseEffectExtraTechnique(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseEffectExtraTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'double_sided':\n                        data[child.nodeName] = parseInt(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildEffect(data) {\n                return data;\n            }\n            function getEffect(id) {\n                return getBuild(library.effects[id], buildEffect);\n            }\n            function parseMaterial(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'instance_effect':\n                        data.url = parseId(child.getAttribute('url'));\n                        break;\n                    }\n                }\n                library.materials[xml.getAttribute('id')] = data;\n            }\n            function getTextureLoader(image) {\n                var loader;\n                var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2);\n                extension = extension.toLowerCase();\n                switch (extension) {\n                case 'tga':\n                    loader = tgaLoader;\n                    break;\n                default:\n                    loader = textureLoader;\n                }\n                return loader;\n            }\n            function buildMaterial(data) {\n                var effect = getEffect(data.url);\n                var technique = effect.profile.technique;\n                var extra = effect.profile.extra;\n                var material;\n                switch (technique.type) {\n                case 'phong':\n                case 'blinn':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    material = new THREE.MeshBasicMaterial();\n                    break;\n                }\n                material.name = data.name || '';\n                function getTexture(textureObject) {\n                    var sampler = effect.profile.samplers[textureObject.id];\n                    var image = null;\n                    if (sampler !== undefined) {\n                        var surface = effect.profile.surfaces[sampler.source];\n                        image = getImage(surface.init_from);\n                    } else {\n                        console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n                        image = getImage(textureObject.id);\n                    }\n                    if (image !== null) {\n                        var loader = getTextureLoader(image);\n                        if (loader !== undefined) {\n                            var texture = loader.load(image);\n                            var extra = textureObject.extra;\n                            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n                                var technique = extra.technique;\n                                texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n                                texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n                            } else {\n                                texture.wrapS = THREE.RepeatWrapping;\n                                texture.wrapT = THREE.RepeatWrapping;\n                            }\n                            return texture;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n                            return null;\n                        }\n                    } else {\n                        console.warn(\"THREE.ColladaLoader: Couldn't create texture with ID:\", textureObject.id);\n                        return null;\n                    }\n                }\n                var parameters = technique.parameters;\n                for (var key in parameters) {\n                    var parameter = parameters[key];\n                    switch (key) {\n                    case 'diffuse':\n                        if (parameter.color)\n                            material.color.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.map = getTexture(parameter.texture);\n                        break;\n                    case 'specular':\n                        if (parameter.color && material.specular)\n                            material.specular.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.specularMap = getTexture(parameter.texture);\n                        break;\n                    case 'bump':\n                        if (parameter.texture)\n                            material.normalMap = getTexture(parameter.texture);\n                        break;\n                    case 'ambient':\n                        if (parameter.texture)\n                            material.lightMap = getTexture(parameter.texture);\n                        break;\n                    case 'shininess':\n                        if (parameter.float && material.shininess)\n                            material.shininess = parameter.float;\n                        break;\n                    case 'emission':\n                        if (parameter.color && material.emissive)\n                            material.emissive.fromArray(parameter.color);\n                        if (parameter.texture)\n                            material.emissiveMap = getTexture(parameter.texture);\n                        break;\n                    }\n                }\n                var transparent = parameters['transparent'];\n                var transparency = parameters['transparency'];\n                if (transparency === undefined && transparent) {\n                    transparency = { float: 1 };\n                }\n                if (transparent === undefined && transparency) {\n                    transparent = {\n                        opaque: 'A_ONE',\n                        data: {\n                            color: [\n                                1,\n                                1,\n                                1,\n                                1\n                            ]\n                        }\n                    };\n                }\n                if (transparent && transparency) {\n                    if (transparent.data.texture) {\n                        material.transparent = true;\n                    } else {\n                        var color = transparent.data.color;\n                        switch (transparent.opaque) {\n                        case 'A_ONE':\n                            material.opacity = color[3] * transparency.float;\n                            break;\n                        case 'RGB_ZERO':\n                            material.opacity = 1 - color[0] * transparency.float;\n                            break;\n                        case 'A_ZERO':\n                            material.opacity = 1 - color[3] * transparency.float;\n                            break;\n                        case 'RGB_ONE':\n                            material.opacity = color[0] * transparency.float;\n                            break;\n                        default:\n                            console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n                        }\n                        if (material.opacity < 1)\n                            material.transparent = true;\n                    }\n                }\n                if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n                    material.side = THREE.DoubleSide;\n                }\n                return material;\n            }\n            function getMaterial(id) {\n                return getBuild(library.materials[id], buildMaterial);\n            }\n            function parseCamera(xml) {\n                var data = { name: xml.getAttribute('name') };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'optics':\n                        data.optics = parseCameraOptics(child);\n                        break;\n                    }\n                }\n                library.cameras[xml.getAttribute('id')] = data;\n            }\n            function parseCameraOptics(xml) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        return parseCameraTechnique(child);\n                    }\n                }\n                return {};\n            }\n            function parseCameraTechnique(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'perspective':\n                    case 'orthographic':\n                        data.technique = child.nodeName;\n                        data.parameters = parseCameraParameters(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseCameraParameters(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'xfov':\n                    case 'yfov':\n                    case 'xmag':\n                    case 'ymag':\n                    case 'znear':\n                    case 'zfar':\n                    case 'aspect_ratio':\n                        data[child.nodeName] = parseFloat(child.textContent);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildCamera(data) {\n                var camera;\n                switch (data.optics.technique) {\n                case 'perspective':\n                    camera = new THREE.PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                case 'orthographic':\n                    var ymag = data.optics.parameters.ymag;\n                    var xmag = data.optics.parameters.xmag;\n                    var aspectRatio = data.optics.parameters.aspect_ratio;\n                    xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n                    ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n                    xmag *= 0.5;\n                    ymag *= 0.5;\n                    camera = new THREE.OrthographicCamera(-xmag, xmag, ymag, -ymag, data.optics.parameters.znear, data.optics.parameters.zfar);\n                    break;\n                default:\n                    camera = new THREE.PerspectiveCamera();\n                    break;\n                }\n                camera.name = data.name || '';\n                return camera;\n            }\n            function getCamera(id) {\n                var data = library.cameras[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildCamera);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n                return null;\n            }\n            function parseLight(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        data = parseLightTechnique(child);\n                        break;\n                    }\n                }\n                library.lights[xml.getAttribute('id')] = data;\n            }\n            function parseLightTechnique(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'directional':\n                    case 'point':\n                    case 'spot':\n                    case 'ambient':\n                        data.technique = child.nodeName;\n                        data.parameters = parseLightParameters(child);\n                    }\n                }\n                return data;\n            }\n            function parseLightParameters(xml) {\n                var data = {};\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'color':\n                        var array = parseFloats(child.textContent);\n                        data.color = new THREE.Color().fromArray(array);\n                        break;\n                    case 'falloff_angle':\n                        data.falloffAngle = parseFloat(child.textContent);\n                        break;\n                    case 'quadratic_attenuation':\n                        var f = parseFloat(child.textContent);\n                        data.distance = f ? Math.sqrt(1 / f) : 0;\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildLight(data) {\n                var light;\n                switch (data.technique) {\n                case 'directional':\n                    light = new THREE.DirectionalLight();\n                    break;\n                case 'point':\n                    light = new THREE.PointLight();\n                    break;\n                case 'spot':\n                    light = new THREE.SpotLight();\n                    break;\n                case 'ambient':\n                    light = new THREE.AmbientLight();\n                    break;\n                }\n                if (data.parameters.color)\n                    light.color.copy(data.parameters.color);\n                if (data.parameters.distance)\n                    light.distance = data.parameters.distance;\n                return light;\n            }\n            function getLight(id) {\n                var data = library.lights[id];\n                if (data !== undefined) {\n                    return getBuild(data, buildLight);\n                }\n                console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n                return null;\n            }\n            function parseGeometry(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    sources: {},\n                    vertices: {},\n                    primitives: []\n                };\n                var mesh = getElementsByTagName(xml, 'mesh')[0];\n                if (mesh === undefined)\n                    return;\n                for (var i = 0; i < mesh.childNodes.length; i++) {\n                    var child = mesh.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    var id = child.getAttribute('id');\n                    switch (child.nodeName) {\n                    case 'source':\n                        data.sources[id] = parseSource(child);\n                        break;\n                    case 'vertices':\n                        data.vertices = parseGeometryVertices(child);\n                        break;\n                    case 'polygons':\n                        console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n                        break;\n                    case 'lines':\n                    case 'linestrips':\n                    case 'polylist':\n                    case 'triangles':\n                        data.primitives.push(parseGeometryPrimitive(child));\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                library.geometries[xml.getAttribute('id')] = data;\n            }\n            function parseSource(xml) {\n                var data = {\n                    array: [],\n                    stride: 3\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'float_array':\n                        data.array = parseFloats(child.textContent);\n                        break;\n                    case 'Name_array':\n                        data.array = parseStrings(child.textContent);\n                        break;\n                    case 'technique_common':\n                        var accessor = getElementsByTagName(child, 'accessor')[0];\n                        if (accessor !== undefined) {\n                            data.stride = parseInt(accessor.getAttribute('stride'));\n                        }\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseGeometryVertices(xml) {\n                var data = {};\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n                }\n                return data;\n            }\n            function parseGeometryPrimitive(xml) {\n                var primitive = {\n                    type: xml.nodeName,\n                    material: xml.getAttribute('material'),\n                    count: parseInt(xml.getAttribute('count')),\n                    inputs: {},\n                    stride: 0,\n                    hasUV: false\n                };\n                for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'input':\n                        var id = parseId(child.getAttribute('source'));\n                        var semantic = child.getAttribute('semantic');\n                        var offset = parseInt(child.getAttribute('offset'));\n                        var set = parseInt(child.getAttribute('set'));\n                        var inputname = set > 0 ? semantic + set : semantic;\n                        primitive.inputs[inputname] = {\n                            id: id,\n                            offset: offset\n                        };\n                        primitive.stride = Math.max(primitive.stride, offset + 1);\n                        if (semantic === 'TEXCOORD')\n                            primitive.hasUV = true;\n                        break;\n                    case 'vcount':\n                        primitive.vcount = parseInts(child.textContent);\n                        break;\n                    case 'p':\n                        primitive.p = parseInts(child.textContent);\n                        break;\n                    }\n                }\n                return primitive;\n            }\n            function groupPrimitives(primitives) {\n                var build = {};\n                for (var i = 0; i < primitives.length; i++) {\n                    var primitive = primitives[i];\n                    if (build[primitive.type] === undefined)\n                        build[primitive.type] = [];\n                    build[primitive.type].push(primitive);\n                }\n                return build;\n            }\n            function checkUVCoordinates(primitives) {\n                var count = 0;\n                for (var i = 0, l = primitives.length; i < l; i++) {\n                    var primitive = primitives[i];\n                    if (primitive.hasUV === true) {\n                        count++;\n                    }\n                }\n                if (count > 0 && count < primitives.length) {\n                    primitives.uvsNeedsFix = true;\n                }\n            }\n            function buildGeometry(data) {\n                var build = {};\n                var sources = data.sources;\n                var vertices = data.vertices;\n                var primitives = data.primitives;\n                if (primitives.length === 0)\n                    return {};\n                var groupedPrimitives = groupPrimitives(primitives);\n                for (var type in groupedPrimitives) {\n                    var primitiveType = groupedPrimitives[type];\n                    checkUVCoordinates(primitiveType);\n                    build[type] = buildGeometryType(primitiveType, sources, vertices);\n                }\n                return build;\n            }\n            function buildGeometryType(primitives, sources, vertices) {\n                var build = {};\n                var position = {\n                    array: [],\n                    stride: 0\n                };\n                var normal = {\n                    array: [],\n                    stride: 0\n                };\n                var uv = {\n                    array: [],\n                    stride: 0\n                };\n                var uv2 = {\n                    array: [],\n                    stride: 0\n                };\n                var color = {\n                    array: [],\n                    stride: 0\n                };\n                var skinIndex = {\n                    array: [],\n                    stride: 4\n                };\n                var skinWeight = {\n                    array: [],\n                    stride: 4\n                };\n                var geometry = new THREE.BufferGeometry();\n                var materialKeys = [];\n                var start = 0;\n                for (var p = 0; p < primitives.length; p++) {\n                    var primitive = primitives[p];\n                    var inputs = primitive.inputs;\n                    var count = 0;\n                    switch (primitive.type) {\n                    case 'lines':\n                    case 'linestrips':\n                        count = primitive.count * 2;\n                        break;\n                    case 'triangles':\n                        count = primitive.count * 3;\n                        break;\n                    case 'polylist':\n                        for (var g = 0; g < primitive.count; g++) {\n                            var vc = primitive.vcount[g];\n                            switch (vc) {\n                            case 3:\n                                count += 3;\n                                break;\n                            case 4:\n                                count += 6;\n                                break;\n                            default:\n                                count += (vc - 2) * 3;\n                                break;\n                            }\n                        }\n                        break;\n                    default:\n                        console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n                    }\n                    geometry.addGroup(start, count, p);\n                    start += count;\n                    if (primitive.material) {\n                        materialKeys.push(primitive.material);\n                    }\n                    for (var name in inputs) {\n                        var input = inputs[name];\n                        switch (name) {\n                        case 'VERTEX':\n                            for (var key in vertices) {\n                                var id = vertices[key];\n                                switch (key) {\n                                case 'POSITION':\n                                    var prevLength = position.array.length;\n                                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                                    position.stride = sources[id].stride;\n                                    if (sources.skinWeights && sources.skinIndices) {\n                                        buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                                        buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                                    }\n                                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                                        var count = (position.array.length - prevLength) / position.stride;\n                                        for (var i = 0; i < count; i++) {\n                                            uv.array.push(0, 0);\n                                        }\n                                    }\n                                    break;\n                                case 'NORMAL':\n                                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                                    normal.stride = sources[id].stride;\n                                    break;\n                                case 'COLOR':\n                                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                                    color.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                case 'TEXCOORD1':\n                                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                                    uv.stride = sources[id].stride;\n                                    break;\n                                default:\n                                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                                }\n                            }\n                            break;\n                        case 'NORMAL':\n                            buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n                            normal.stride = sources[input.id].stride;\n                            break;\n                        case 'COLOR':\n                            buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n                            color.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n                            uv.stride = sources[input.id].stride;\n                            break;\n                        case 'TEXCOORD1':\n                            buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n                            uv2.stride = sources[input.id].stride;\n                            break;\n                        }\n                    }\n                }\n                if (position.array.length > 0)\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(position.array, position.stride));\n                if (normal.array.length > 0)\n                    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal.array, normal.stride));\n                if (color.array.length > 0)\n                    geometry.setAttribute('color', new THREE.Float32BufferAttribute(color.array, color.stride));\n                if (uv.array.length > 0)\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv.array, uv.stride));\n                if (uv2.array.length > 0)\n                    geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(uv2.array, uv2.stride));\n                if (skinIndex.array.length > 0)\n                    geometry.setAttribute('skinIndex', new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n                if (skinWeight.array.length > 0)\n                    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n                build.data = geometry;\n                build.type = primitives[0].type;\n                build.materialKeys = materialKeys;\n                return build;\n            }\n            function buildGeometryData(primitive, source, offset, array) {\n                var indices = primitive.p;\n                var stride = primitive.stride;\n                var vcount = primitive.vcount;\n                function pushVector(i) {\n                    var index = indices[i + offset] * sourceStride;\n                    var length = index + sourceStride;\n                    for (; index < length; index++) {\n                        array.push(sourceArray[index]);\n                    }\n                }\n                var sourceArray = source.array;\n                var sourceStride = source.stride;\n                if (primitive.vcount !== undefined) {\n                    var index = 0;\n                    for (var i = 0, l = vcount.length; i < l; i++) {\n                        var count = vcount[i];\n                        if (count === 4) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            var d = index + stride * 3;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(d);\n                            pushVector(b);\n                            pushVector(c);\n                            pushVector(d);\n                        } else if (count === 3) {\n                            var a = index + stride * 0;\n                            var b = index + stride * 1;\n                            var c = index + stride * 2;\n                            pushVector(a);\n                            pushVector(b);\n                            pushVector(c);\n                        } else if (count > 4) {\n                            for (var k = 1, kl = count - 2; k <= kl; k++) {\n                                var a = index + stride * 0;\n                                var b = index + stride * k;\n                                var c = index + stride * (k + 1);\n                                pushVector(a);\n                                pushVector(b);\n                                pushVector(c);\n                            }\n                        }\n                        index += stride * count;\n                    }\n                } else {\n                    for (var i = 0, l = indices.length; i < l; i += stride) {\n                        pushVector(i);\n                    }\n                }\n            }\n            function getGeometry(id) {\n                return getBuild(library.geometries[id], buildGeometry);\n            }\n            function parseKinematicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    joints: {},\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parseKinematicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n                library.kinematicsModels[xml.getAttribute('id')] = data;\n            }\n            function buildKinematicsModel(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsModel(id) {\n                return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n            }\n            function parseKinematicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'joint':\n                        data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n                        break;\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsJoint(xml) {\n                var data;\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'prismatic':\n                    case 'revolute':\n                        data = parseKinematicsJointParameter(child);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsJointParameter(xml, data) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    axis: new THREE.Vector3(),\n                    limits: {\n                        min: 0,\n                        max: 0\n                    },\n                    type: xml.nodeName,\n                    static: false,\n                    zeroPosition: 0,\n                    middlePosition: 0\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var array = parseFloats(child.textContent);\n                        data.axis.fromArray(array);\n                        break;\n                    case 'limits':\n                        var max = child.getElementsByTagName('max')[0];\n                        var min = child.getElementsByTagName('min')[0];\n                        data.limits.max = parseFloat(max.textContent);\n                        data.limits.min = parseFloat(min.textContent);\n                        break;\n                    }\n                }\n                if (data.limits.min >= data.limits.max) {\n                    data.static = true;\n                }\n                data.middlePosition = (data.limits.min + data.limits.max) / 2;\n                return data;\n            }\n            function parseKinematicsLink(xml) {\n                var data = {\n                    sid: xml.getAttribute('sid'),\n                    name: xml.getAttribute('name') || '',\n                    attachments: [],\n                    transforms: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'attachment_full':\n                        data.attachments.push(parseKinematicsAttachment(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsAttachment(xml) {\n                var data = {\n                    joint: xml.getAttribute('joint').split('/').pop(),\n                    transforms: [],\n                    links: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'link':\n                        data.links.push(parseKinematicsLink(child));\n                        break;\n                    case 'matrix':\n                    case 'translate':\n                    case 'rotate':\n                        data.transforms.push(parseKinematicsTransform(child));\n                        break;\n                    }\n                }\n                return data;\n            }\n            function parseKinematicsTransform(xml) {\n                var data = { type: xml.nodeName };\n                var array = parseFloats(xml.textContent);\n                switch (data.type) {\n                case 'matrix':\n                    data.obj = new THREE.Matrix4();\n                    data.obj.fromArray(array).transpose();\n                    break;\n                case 'translate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    break;\n                case 'rotate':\n                    data.obj = new THREE.Vector3();\n                    data.obj.fromArray(array);\n                    data.angle = THREE.MathUtils.degToRad(array[3]);\n                    break;\n                }\n                return data;\n            }\n            function parsePhysicsModel(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    rigidBodies: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'rigid_body':\n                        data.rigidBodies[child.getAttribute('name')] = {};\n                        parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n                        break;\n                    }\n                }\n                library.physicsModels[xml.getAttribute('id')] = data;\n            }\n            function parsePhysicsRigidBody(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'technique_common':\n                        parsePhysicsTechniqueCommon(child, data);\n                        break;\n                    }\n                }\n            }\n            function parsePhysicsTechniqueCommon(xml, data) {\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'inertia':\n                        data.inertia = parseFloats(child.textContent);\n                        break;\n                    case 'mass':\n                        data.mass = parseFloats(child.textContent)[0];\n                        break;\n                    }\n                }\n            }\n            function parseKinematicsScene(xml) {\n                var data = { bindJointAxis: [] };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'bind_joint_axis':\n                        data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n                        break;\n                    }\n                }\n                library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n            }\n            function parseKinematicsBindJointAxis(xml) {\n                var data = { target: xml.getAttribute('target').split('/').pop() };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'axis':\n                        var param = child.getElementsByTagName('param')[0];\n                        data.axis = param.textContent;\n                        var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n                        data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildKinematicsScene(data) {\n                if (data.build !== undefined)\n                    return data.build;\n                return data;\n            }\n            function getKinematicsScene(id) {\n                return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n            }\n            function setupKinematics() {\n                var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n                var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n                var visualSceneId = Object.keys(library.visualScenes)[0];\n                if (kinematicsModelId === undefined || kinematicsSceneId === undefined)\n                    return;\n                var kinematicsModel = getKinematicsModel(kinematicsModelId);\n                var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n                var visualScene = getVisualScene(visualSceneId);\n                var bindJointAxis = kinematicsScene.bindJointAxis;\n                var jointMap = {};\n                for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n                    var axis = bindJointAxis[i];\n                    var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n                    if (targetElement) {\n                        var parentVisualElement = targetElement.parentElement;\n                        connect(axis.jointIndex, parentVisualElement);\n                    }\n                }\n                function connect(jointIndex, visualElement) {\n                    var visualElementName = visualElement.getAttribute('name');\n                    var joint = kinematicsModel.joints[jointIndex];\n                    visualScene.traverse(function (object) {\n                        if (object.name === visualElementName) {\n                            jointMap[jointIndex] = {\n                                object: object,\n                                transforms: buildTransformList(visualElement),\n                                joint: joint,\n                                position: joint.zeroPosition\n                            };\n                        }\n                    });\n                }\n                var m0 = new THREE.Matrix4();\n                kinematics = {\n                    joints: kinematicsModel && kinematicsModel.joints,\n                    getJointValue: function (jointIndex) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            return jointData.position;\n                        } else {\n                            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + \" doesn't exist.\");\n                        }\n                    },\n                    setJointValue: function (jointIndex, value) {\n                        var jointData = jointMap[jointIndex];\n                        if (jointData) {\n                            var joint = jointData.joint;\n                            if (value > joint.limits.max || value < joint.limits.min) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n                            } else if (joint.static) {\n                                console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n                            } else {\n                                var object = jointData.object;\n                                var axis = joint.axis;\n                                var transforms = jointData.transforms;\n                                matrix.identity();\n                                for (var i = 0; i < transforms.length; i++) {\n                                    var transform = transforms[i];\n                                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                                        switch (joint.type) {\n                                        case 'revolute':\n                                            matrix.multiply(m0.makeRotationAxis(axis, THREE.MathUtils.degToRad(value)));\n                                            break;\n                                        case 'prismatic':\n                                            matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                                            break;\n                                        default:\n                                            console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                                            break;\n                                        }\n                                    } else {\n                                        switch (transform.type) {\n                                        case 'matrix':\n                                            matrix.multiply(transform.obj);\n                                            break;\n                                        case 'translate':\n                                            matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                                            break;\n                                        case 'scale':\n                                            matrix.scale(transform.obj);\n                                            break;\n                                        case 'rotate':\n                                            matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                                            break;\n                                        }\n                                    }\n                                }\n                                object.matrix.copy(matrix);\n                                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                                jointMap[jointIndex].position = value;\n                            }\n                        } else {\n                            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n                        }\n                    }\n                };\n            }\n            function buildTransformList(node) {\n                var transforms = [];\n                var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        var matrix = new THREE.Matrix4().fromArray(array).transpose();\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: matrix\n                        });\n                        break;\n                    case 'translate':\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector\n                        });\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var vector = new THREE.Vector3().fromArray(array);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        transforms.push({\n                            sid: child.getAttribute('sid'),\n                            type: child.nodeName,\n                            obj: vector,\n                            angle: angle\n                        });\n                        break;\n                    }\n                }\n                return transforms;\n            }\n            function prepareNodes(xml) {\n                var elements = xml.getElementsByTagName('node');\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i];\n                    if (element.hasAttribute('id') === false) {\n                        element.setAttribute('id', generateId());\n                    }\n                }\n            }\n            var matrix = new THREE.Matrix4();\n            var vector = new THREE.Vector3();\n            function parseNode(xml) {\n                var data = {\n                    name: xml.getAttribute('name') || '',\n                    type: xml.getAttribute('type'),\n                    id: xml.getAttribute('id'),\n                    sid: xml.getAttribute('sid'),\n                    matrix: new THREE.Matrix4(),\n                    nodes: [],\n                    instanceCameras: [],\n                    instanceControllers: [],\n                    instanceLights: [],\n                    instanceGeometries: [],\n                    instanceNodes: [],\n                    transforms: {}\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    if (child.nodeType !== 1)\n                        continue;\n                    switch (child.nodeName) {\n                    case 'node':\n                        data.nodes.push(child.getAttribute('id'));\n                        parseNode(child);\n                        break;\n                    case 'instance_camera':\n                        data.instanceCameras.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_controller':\n                        data.instanceControllers.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_light':\n                        data.instanceLights.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'instance_geometry':\n                        data.instanceGeometries.push(parseNodeInstance(child));\n                        break;\n                    case 'instance_node':\n                        data.instanceNodes.push(parseId(child.getAttribute('url')));\n                        break;\n                    case 'matrix':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.multiply(matrix.fromArray(array).transpose());\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'translate':\n                        var array = parseFloats(child.textContent);\n                        vector.fromArray(array);\n                        data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'rotate':\n                        var array = parseFloats(child.textContent);\n                        var angle = THREE.MathUtils.degToRad(array[3]);\n                        data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'scale':\n                        var array = parseFloats(child.textContent);\n                        data.matrix.scale(vector.fromArray(array));\n                        data.transforms[child.getAttribute('sid')] = child.nodeName;\n                        break;\n                    case 'extra':\n                        break;\n                    default:\n                        console.log(child);\n                    }\n                }\n                if (hasNode(data.id)) {\n                    console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n                } else {\n                    library.nodes[data.id] = data;\n                }\n                return data;\n            }\n            function parseNodeInstance(xml) {\n                var data = {\n                    id: parseId(xml.getAttribute('url')),\n                    materials: {},\n                    skeletons: []\n                };\n                for (var i = 0; i < xml.childNodes.length; i++) {\n                    var child = xml.childNodes[i];\n                    switch (child.nodeName) {\n                    case 'bind_material':\n                        var instances = child.getElementsByTagName('instance_material');\n                        for (var j = 0; j < instances.length; j++) {\n                            var instance = instances[j];\n                            var symbol = instance.getAttribute('symbol');\n                            var target = instance.getAttribute('target');\n                            data.materials[symbol] = parseId(target);\n                        }\n                        break;\n                    case 'skeleton':\n                        data.skeletons.push(parseId(child.textContent));\n                        break;\n                    default:\n                        break;\n                    }\n                }\n                return data;\n            }\n            function buildSkeleton(skeletons, joints) {\n                var boneData = [];\n                var sortedBoneData = [];\n                var i, j, data;\n                for (i = 0; i < skeletons.length; i++) {\n                    var skeleton = skeletons[i];\n                    var root;\n                    if (hasNode(skeleton)) {\n                        root = getNode(skeleton);\n                        buildBoneHierarchy(root, joints, boneData);\n                    } else if (hasVisualScene(skeleton)) {\n                        var visualScene = library.visualScenes[skeleton];\n                        var children = visualScene.children;\n                        for (var j = 0; j < children.length; j++) {\n                            var child = children[j];\n                            if (child.type === 'JOINT') {\n                                var root = getNode(child.id);\n                                buildBoneHierarchy(root, joints, boneData);\n                            }\n                        }\n                    } else {\n                        console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n                    }\n                }\n                for (i = 0; i < joints.length; i++) {\n                    for (j = 0; j < boneData.length; j++) {\n                        data = boneData[j];\n                        if (data.bone.name === joints[i].name) {\n                            sortedBoneData[i] = data;\n                            data.processed = true;\n                            break;\n                        }\n                    }\n                }\n                for (i = 0; i < boneData.length; i++) {\n                    data = boneData[i];\n                    if (data.processed === false) {\n                        sortedBoneData.push(data);\n                        data.processed = true;\n                    }\n                }\n                var bones = [];\n                var boneInverses = [];\n                for (i = 0; i < sortedBoneData.length; i++) {\n                    data = sortedBoneData[i];\n                    bones.push(data.bone);\n                    boneInverses.push(data.boneInverse);\n                }\n                return new THREE.Skeleton(bones, boneInverses);\n            }\n            function buildBoneHierarchy(root, joints, boneData) {\n                root.traverse(function (object) {\n                    if (object.isBone === true) {\n                        var boneInverse;\n                        for (var i = 0; i < joints.length; i++) {\n                            var joint = joints[i];\n                            if (joint.name === object.name) {\n                                boneInverse = joint.boneInverse;\n                                break;\n                            }\n                        }\n                        if (boneInverse === undefined) {\n                            boneInverse = new THREE.Matrix4();\n                        }\n                        boneData.push({\n                            bone: object,\n                            boneInverse: boneInverse,\n                            processed: false\n                        });\n                    }\n                });\n            }\n            function buildNode(data) {\n                var objects = [];\n                var matrix = data.matrix;\n                var nodes = data.nodes;\n                var type = data.type;\n                var instanceCameras = data.instanceCameras;\n                var instanceControllers = data.instanceControllers;\n                var instanceLights = data.instanceLights;\n                var instanceGeometries = data.instanceGeometries;\n                var instanceNodes = data.instanceNodes;\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                    objects.push(getNode(nodes[i]));\n                }\n                for (var i = 0, l = instanceCameras.length; i < l; i++) {\n                    var instanceCamera = getCamera(instanceCameras[i]);\n                    if (instanceCamera !== null) {\n                        objects.push(instanceCamera.clone());\n                    }\n                }\n                for (var i = 0, l = instanceControllers.length; i < l; i++) {\n                    var instance = instanceControllers[i];\n                    var controller = getController(instance.id);\n                    var geometries = getGeometry(controller.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    var skeletons = instance.skeletons;\n                    var joints = controller.skin.joints;\n                    var skeleton = buildSkeleton(skeletons, joints);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        var object = newObjects[j];\n                        if (object.isSkinnedMesh) {\n                            object.bind(skeleton, controller.skin.bindMatrix);\n                            object.normalizeSkinWeights();\n                        }\n                        objects.push(object);\n                    }\n                }\n                for (var i = 0, l = instanceLights.length; i < l; i++) {\n                    var instanceLight = getLight(instanceLights[i]);\n                    if (instanceLight !== null) {\n                        objects.push(instanceLight.clone());\n                    }\n                }\n                for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n                    var instance = instanceGeometries[i];\n                    var geometries = getGeometry(instance.id);\n                    var newObjects = buildObjects(geometries, instance.materials);\n                    for (var j = 0, jl = newObjects.length; j < jl; j++) {\n                        objects.push(newObjects[j]);\n                    }\n                }\n                for (var i = 0, l = instanceNodes.length; i < l; i++) {\n                    objects.push(getNode(instanceNodes[i]).clone());\n                }\n                var object;\n                if (nodes.length === 0 && objects.length === 1) {\n                    object = objects[0];\n                } else {\n                    object = type === 'JOINT' ? new THREE.Bone() : new THREE.Group();\n                    for (var i = 0; i < objects.length; i++) {\n                        object.add(objects[i]);\n                    }\n                }\n                if (object.name === '') {\n                    object.name = type === 'JOINT' ? data.sid : data.name;\n                }\n                object.matrix.copy(matrix);\n                object.matrix.decompose(object.position, object.quaternion, object.scale);\n                return object;\n            }\n            var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });\n            function resolveMaterialBinding(keys, instanceMaterials) {\n                var materials = [];\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var id = instanceMaterials[keys[i]];\n                    if (id === undefined) {\n                        console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n                        materials.push(fallbackMaterial);\n                    } else {\n                        materials.push(getMaterial(id));\n                    }\n                }\n                return materials;\n            }\n            function buildObjects(geometries, instanceMaterials) {\n                var objects = [];\n                for (var type in geometries) {\n                    var geometry = geometries[type];\n                    var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);\n                    if (materials.length === 0) {\n                        if (type === 'lines' || type === 'linestrips') {\n                            materials.push(new THREE.LineBasicMaterial());\n                        } else {\n                            materials.push(new THREE.MeshPhongMaterial());\n                        }\n                    }\n                    var skinning = geometry.data.attributes.skinIndex !== undefined;\n                    if (skinning) {\n                        for (var i = 0, l = materials.length; i < l; i++) {\n                            materials[i].skinning = true;\n                        }\n                    }\n                    var material = materials.length === 1 ? materials[0] : materials;\n                    var object;\n                    switch (type) {\n                    case 'lines':\n                        object = new THREE.LineSegments(geometry.data, material);\n                        break;\n                    case 'linestrips':\n                        object = new THREE.Line(geometry.data, material);\n                        break;\n                    case 'triangles':\n                    case 'polylist':\n                        if (skinning) {\n                            object = new THREE.SkinnedMesh(geometry.data, material);\n                        } else {\n                            object = new THREE.Mesh(geometry.data, material);\n                        }\n                        break;\n                    }\n                    objects.push(object);\n                }\n                return objects;\n            }\n            function hasNode(id) {\n                return library.nodes[id] !== undefined;\n            }\n            function getNode(id) {\n                return getBuild(library.nodes[id], buildNode);\n            }\n            function parseVisualScene(xml) {\n                var data = {\n                    name: xml.getAttribute('name'),\n                    children: []\n                };\n                prepareNodes(xml);\n                var elements = getElementsByTagName(xml, 'node');\n                for (var i = 0; i < elements.length; i++) {\n                    data.children.push(parseNode(elements[i]));\n                }\n                library.visualScenes[xml.getAttribute('id')] = data;\n            }\n            function buildVisualScene(data) {\n                var group = new THREE.Group();\n                group.name = data.name;\n                var children = data.children;\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n                    group.add(getNode(child.id));\n                }\n                return group;\n            }\n            function hasVisualScene(id) {\n                return library.visualScenes[id] !== undefined;\n            }\n            function getVisualScene(id) {\n                return getBuild(library.visualScenes[id], buildVisualScene);\n            }\n            function parseScene(xml) {\n                var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n                return getVisualScene(parseId(instance.getAttribute('url')));\n            }\n            function setupAnimations() {\n                var clips = library.clips;\n                if (isEmpty(clips) === true) {\n                    if (isEmpty(library.animations) === false) {\n                        var tracks = [];\n                        for (var id in library.animations) {\n                            var animationTracks = getAnimation(id);\n                            for (var i = 0, l = animationTracks.length; i < l; i++) {\n                                tracks.push(animationTracks[i]);\n                            }\n                        }\n                        animations.push(new THREE.AnimationClip('default', -1, tracks));\n                    }\n                } else {\n                    for (var id in clips) {\n                        animations.push(getAnimationClip(id));\n                    }\n                }\n            }\n            function parserErrorToText(parserError) {\n                var result = '';\n                var stack = [parserError];\n                while (stack.length) {\n                    var node = stack.shift();\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        result += node.textContent;\n                    } else {\n                        result += '\\n';\n                        stack.push.apply(stack, node.childNodes);\n                    }\n                }\n                return result.trim();\n            }\n            if (text.length === 0) {\n                return { scene: new THREE.Scene() };\n            }\n            var xml = new DOMParser().parseFromString(text, 'application/xml');\n            var collada = getElementsByTagName(xml, 'COLLADA')[0];\n            var parserError = xml.getElementsByTagName('parsererror')[0];\n            if (parserError !== undefined) {\n                var errorElement = getElementsByTagName(parserError, 'div')[0];\n                var errorText;\n                if (errorElement) {\n                    errorText = errorElement.textContent;\n                } else {\n                    errorText = parserErrorToText(parserError);\n                }\n                console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n                return null;\n            }\n            var version = collada.getAttribute('version');\n            console.log('THREE.ColladaLoader: File version', version);\n            var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var tgaLoader;\n            if (TGALoader) {\n                tgaLoader = new TGALoader(this.manager);\n                tgaLoader.setPath(this.resourcePath || path);\n            }\n            var animations = [];\n            var kinematics = {};\n            var count = 0;\n            var library = {\n                animations: {},\n                clips: {},\n                controllers: {},\n                images: {},\n                effects: {},\n                materials: {},\n                cameras: {},\n                lights: {},\n                geometries: {},\n                nodes: {},\n                visualScenes: {},\n                kinematicsModels: {},\n                physicsModels: {},\n                kinematicsScenes: {}\n            };\n            parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n            parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n            parseLibrary(collada, 'library_controllers', 'controller', parseController);\n            parseLibrary(collada, 'library_images', 'image', parseImage);\n            parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n            parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n            parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n            parseLibrary(collada, 'library_lights', 'light', parseLight);\n            parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n            parseLibrary(collada, 'library_nodes', 'node', parseNode);\n            parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n            parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n            parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n            parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n            buildLibrary(library.animations, buildAnimation);\n            buildLibrary(library.clips, buildAnimationClip);\n            buildLibrary(library.controllers, buildController);\n            buildLibrary(library.images, buildImage);\n            buildLibrary(library.effects, buildEffect);\n            buildLibrary(library.materials, buildMaterial);\n            buildLibrary(library.cameras, buildCamera);\n            buildLibrary(library.lights, buildLight);\n            buildLibrary(library.geometries, buildGeometry);\n            buildLibrary(library.visualScenes, buildVisualScene);\n            setupAnimations();\n            setupKinematics();\n            var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n            if (asset.upAxis === 'Z_UP') {\n                scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            }\n            scene.scale.multiplyScalar(asset.unit);\n            return {\n                animations: animations,\n                kinematics: kinematics,\n                library: library,\n                scene: scene\n            };\n        }\n    });\n    return ColladaLoader;\n});"]}