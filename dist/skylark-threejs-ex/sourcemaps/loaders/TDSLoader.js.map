{"version":3,"sources":["loaders/TDSLoader.js"],"names":["define","THREE","TDSLoader","manager","Loader","call","this","debug","group","position","materials","meshes","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","data","parse","arraybuffer","Group","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MeshPhongMaterial","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","DoubleSide","MAT_ADDITIVE","blending","AdditiveBlending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readWord","MAT_TRANSPARENCY","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","BufferGeometry","uvs","Mesh","POINT_ARRAY","points","vertices","setAttribute","Float32BufferAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","values","matrix","Matrix4","elements","transpose","inverse","getInverse","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","end","MSH_MAT_GROUP","readMaterialGroup","undefined","texture","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","Color","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","e","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","message","console","log"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAYVA,EAAMC,UAAY,SAAWC,GAE5BF,EAAMG,OAAOC,KAAMC,KAAMH,GAEzBG,KAAKC,OAAQ,EAEbD,KAAKE,MAAQ,KACbF,KAAKG,SAAW,EAEhBH,KAAKI,aACLJ,KAAKK,WAINV,EAAMC,UAAUU,UAAYC,OAAOC,OAAQD,OAAOE,OAAQd,EAAMG,OAAOQ,YAEtEI,YAAaf,EAAMC,UAWnBe,KAAM,SAAWC,EAAKC,EAAQC,EAAYC,GAEzC,IAAIC,EAAQhB,KAERiB,EAAwB,KAAfD,EAAMC,KAAgBtB,EAAMuB,YAAYC,eAAgBP,GAAQI,EAAMC,KAE/EG,EAAS,IAAIzB,EAAM0B,WAAYrB,KAAKH,SACxCuB,EAAOE,QAAStB,KAAKiB,MACrBG,EAAOG,gBAAiB,eAExBH,EAAOT,KAAMC,EAAK,SAAWY,GAE5BX,EAAQG,EAAMS,MAAOD,EAAMP,KAEzBH,EAAYC,IAYhBU,MAAO,SAAWC,EAAaT,GAE9BjB,KAAKE,MAAQ,IAAIP,EAAMgC,MACvB3B,KAAKG,SAAW,EAChBH,KAAKI,aACLJ,KAAKK,UAELL,KAAK4B,SAAUF,EAAaT,GAE5B,IAAM,IAAIY,EAAI,EAAGA,EAAI7B,KAAKK,OAAOyB,OAAQD,IAExC7B,KAAKE,MAAM6B,IAAK/B,KAAKK,OAAQwB,IAI9B,OAAO7B,KAAKE,OAWb0B,SAAU,SAAWF,EAAaT,GAEjC,IAAIO,EAAO,IAAIQ,SAAUN,GACrBO,EAAQjC,KAAKkC,UAAWV,GAE5B,GAAKS,EAAME,KAAOC,GAAaH,EAAME,KAAOE,GAAUJ,EAAME,KAAOG,EAIlE,IAFA,IAAIC,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAEhB,IAATM,GAAa,CAEpB,GAAKA,IAASE,EAAc,CAE3B,IAAIC,EAAU1C,KAAK2C,UAAWnB,GAC9BxB,KAAK4C,aAAc,qBAAuBF,QAE/BH,IAASM,GAEpB7C,KAAK8C,cAAetB,GACpBxB,KAAK+C,aAAcvB,EAAMP,IAIzBjB,KAAK4C,aAAc,uBAAyBL,EAAKS,SAAU,KAI5DT,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAM/BjC,KAAK4C,aAAc,UAAY5C,KAAKK,OAAOyB,OAAS,YAWrDiB,aAAc,SAAWvB,EAAMP,GAK9B,IAHA,IAAIgB,EAAQjC,KAAKkC,UAAWV,GACxBe,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAEhB,IAATM,GAAa,CAEpB,GAAKA,IAASU,EAAe,CAE5B,IAAIP,GAAY1C,KAAK2C,UAAWnB,GAChCxB,KAAK4C,aAAc,iBAAmBF,QAEhC,GAAKH,IAASW,EAAe,CAEnC,IAAIC,EAAQnD,KAAKoD,UAAW5B,GAC5BxB,KAAK4C,aAAc,iBAAmBO,GACtCnD,KAAKE,MAAMiD,MAAME,IAAKF,EAAOA,EAAOA,QAEzBZ,IAASe,GAEpBtD,KAAK4C,aAAc,gBACnB5C,KAAK8C,cAAetB,GACpBxB,KAAKuD,gBAAiB/B,IAEXe,IAASiB,GAEpBxD,KAAK4C,aAAc,YACnB5C,KAAK8C,cAAetB,GACpBxB,KAAKyD,kBAAmBjC,EAAMP,IAI9BjB,KAAK4C,aAAc,wBAA0BL,EAAKS,SAAU,KAI7DT,EAAOvC,KAAKwC,UAAWhB,EAAMS,KAY/BsB,gBAAiB,SAAW/B,GAE3B,IAAIS,EAAQjC,KAAKkC,UAAWV,GACxBkC,EAAO1D,KAAK2D,WAAYnC,EAAM,IAClCS,EAAM2B,IAAM5D,KAAKG,SAGjB,IADA,IAAIoC,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAChB,IAATM,GAAa,CAEpB,GAAKA,IAASsB,EAAe,CAE5B7D,KAAK8C,cAAetB,GACpB,IAAIsC,EAAO9D,KAAK+D,SAAUvC,GAC1BsC,EAAKJ,KAAOA,EACZ1D,KAAKK,OAAO2D,KAAMF,QAIlB9D,KAAK4C,aAAc,+BAAiCL,EAAKS,SAAU,KAIpET,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAI9BjC,KAAKiE,SAAUhC,IAWhBwB,kBAAmB,SAAWjC,EAAMP,GAMnC,IAJA,IAAIgB,EAAQjC,KAAKkC,UAAWV,GACxBe,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAC7BiC,EAAW,IAAIvE,EAAMwE,kBAER,IAAT5B,GAAa,CAEpB,GAAKA,IAAS6B,EAEbF,EAASR,KAAO1D,KAAK2D,WAAYnC,EAAM,IACvCxB,KAAK4C,aAAc,YAAcsB,EAASR,WAEpC,GAAKnB,IAAS8B,EAEpBrE,KAAK4C,aAAc,gBACnBsB,EAASI,WAAY,OAEf,GAAK/B,IAASgC,EAAgB,CAEpC,IAAIC,EAAQxE,KAAKyE,SAAUjD,GAC3B0C,EAASQ,mBAAqBF,EAC9BxE,KAAK4C,aAAc,2BAA6B4B,QAE1C,GAAKjC,IAASoC,EAEpBT,EAASU,KAAOjF,EAAMkF,WACtB7E,KAAK4C,aAAc,uBAEb,GAAKL,IAASuC,EAEpB9E,KAAK4C,aAAc,wBACnBsB,EAASa,SAAWpF,EAAMqF,sBAEpB,GAAKzC,IAAS0C,EAEpBjF,KAAK4C,aAAc,oBACnBsB,EAASgB,MAAQlF,KAAKmF,UAAW3D,QAE3B,GAAKe,IAAS6C,EAEpBpF,KAAK4C,aAAc,qBACnBsB,EAASmB,SAAWrF,KAAKmF,UAAW3D,QAE9B,GAAKe,IAAS+C,EAEpBtF,KAAK4C,aAAc,oBACnBsB,EAASgB,MAAQlF,KAAKmF,UAAW3D,QAE3B,GAAKe,IAASgD,EAAgB,CAEpC,IAAIC,EAAYxF,KAAKyF,SAAUjE,GAC/B0C,EAASsB,UAAYA,EACrBxF,KAAK4C,aAAc,kBAAoB4C,QAEjC,GAAKjD,IAASmD,EAAmB,CAEvC,IAAIC,EAAU3F,KAAKyF,SAAUjE,GAC7B0C,EAASyB,QAAoB,IAAVA,EACnB3F,KAAK4C,aAAc,eAAiB+C,GACpCzB,EAAS0B,YAAcD,EAAU,SAEtBpD,IAASsD,GAEpB7F,KAAK4C,aAAc,eACnB5C,KAAK8C,cAAetB,GACpB0C,EAAS4B,IAAM9F,KAAK+F,QAASvE,EAAMP,IAExBsB,IAASyD,GAEpBhG,KAAK4C,aAAc,cACnB5C,KAAK8C,cAAetB,GACpB0C,EAAS+B,QAAUjG,KAAK+F,QAASvE,EAAMP,IAE5BsB,IAAS2D,GAEpBlG,KAAK4C,aAAc,iBACnB5C,KAAK8C,cAAetB,GACpB0C,EAASiC,SAAWnG,KAAK+F,QAASvE,EAAMP,IAE7BsB,IAAS6D,GAEpBpG,KAAK4C,aAAc,kBACnB5C,KAAK8C,cAAetB,GACpB0C,EAASmC,YAAcrG,KAAK+F,QAASvE,EAAMP,IAI3CjB,KAAK4C,aAAc,8BAAgCL,EAAKS,SAAU,KAInET,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAI9BjC,KAAKiE,SAAUhC,GAEfjC,KAAKI,UAAW8D,EAASR,MAASQ,GAWnCH,SAAU,SAAWvC,GAEpB,IAAIS,EAAQjC,KAAKkC,UAAWV,GACxBe,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAE7BqE,EAAW,IAAI3G,EAAM4G,eACrBC,KAEAtC,EAAW,IAAIvE,EAAMwE,kBACrBL,EAAO,IAAInE,EAAM8G,KAAMH,EAAUpC,GAGrC,IAFAJ,EAAKJ,KAAO,OAEK,IAATnB,GAAa,CAEpB,GAAKA,IAASmE,EAAc,CAE3B,IAAIC,EAAS3G,KAAKyF,SAAUjE,GAE5BxB,KAAK4C,aAAc,cAAgB+D,GAMnC,IAFA,IAAIC,KAEM/E,EAAI,EAAGA,EAAI8E,EAAQ9E,IAE5B+E,EAAS5C,KAAMhE,KAAKoD,UAAW5B,IAC/BoF,EAAS5C,KAAMhE,KAAKoD,UAAW5B,IAC/BoF,EAAS5C,KAAMhE,KAAKoD,UAAW5B,IAIhC8E,EAASO,aAAc,WAAY,IAAIlH,EAAMmH,uBAAwBF,EAAU,SAEzE,GAAKrE,IAASwE,EAEpB/G,KAAK8C,cAAetB,GACpBxB,KAAKgH,cAAexF,EAAMsC,QAEpB,GAAKvB,IAAS0E,EAAY,CAEhC,IAAIC,EAASlH,KAAKyF,SAAUjE,GAE5BxB,KAAK4C,aAAc,UAAYsE,GAM/B,IAFIV,KAEM3E,EAAI,EAAGA,EAAIqF,EAAQrF,IAE5B2E,EAAIxC,KAAMhE,KAAKoD,UAAW5B,IAC1BgF,EAAIxC,KAAMhE,KAAKoD,UAAW5B,IAI3B8E,EAASO,aAAc,KAAM,IAAIlH,EAAMmH,uBAAwBN,EAAK,SAG9D,GAAKjE,IAAS4E,EAAc,CAElCnH,KAAK4C,aAAc,kCAEnB,IAAIwE,KACJ,IAAUvF,EAAI,EAAGA,EAAI,GAAIA,IAExBuF,EAAQvF,GAAM7B,KAAKoD,UAAW5B,GAI/B,IAAI6F,EAAS,IAAI1H,EAAM2H,QAGvBD,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,GAG/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,IAG/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,GAAMH,EAAQ,GAC/BC,EAAOE,SAAU,IAAOH,EAAQ,GAChCC,EAAOE,SAAU,IAAOH,EAAQ,IAGhCC,EAAOE,SAAU,IAAO,EACxBF,EAAOE,SAAU,IAAO,EACxBF,EAAOE,SAAU,IAAO,EACxBF,EAAOE,SAAU,IAAO,EAExBF,EAAOG,YAEP,IAAIC,EAAU,IAAI9H,EAAM2H,QACxBG,EAAQC,WAAYL,GACpBf,EAASqB,aAAcF,GAEvBJ,EAAOO,UAAW9D,EAAK3D,SAAU2D,EAAK+D,WAAY/D,EAAKX,YAIvDnD,KAAK4C,aAAc,0BAA4BL,EAAKS,SAAU,KAI/DT,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAQ9B,OAJAjC,KAAKiE,SAAUhC,GAEfqE,EAASwB,uBAEFhE,GAWRkD,cAAe,SAAWxF,EAAMsC,GAE/B,IAAI7B,EAAQjC,KAAKkC,UAAWV,GACxBuG,EAAQ/H,KAAKyF,SAAUjE,GAE3BxB,KAAK4C,aAAc,aAAemF,GAIlC,IAFA,IAAIC,KAEMnG,EAAI,EAAGA,EAAIkG,IAAUlG,EAE9BmG,EAAMhE,KAAMhE,KAAKyF,SAAUjE,GAAQxB,KAAKyF,SAAUjE,GAAQxB,KAAKyF,SAAUjE,IAEzExB,KAAKyF,SAAUjE,GAQhB,IAJAsC,EAAKwC,SAAS2B,SAAUD,GAIhBhI,KAAKG,SAAW8B,EAAMiG,KAAM,CAInC,IAFIjG,EAAQjC,KAAKkC,UAAWV,IAEjBW,KAAOgG,EAAgB,CAEjCnI,KAAK4C,aAAc,wBAEnB5C,KAAK8C,cAAetB,GAEpB,IAAItB,EAAQF,KAAKoI,kBAAmB5G,GAEhC0C,EAAWlE,KAAKI,UAAWF,EAAMwD,WAEnB2E,IAAbnE,IAEJJ,EAAKI,SAAWA,EAEO,KAAlBA,EAASR,OAEbQ,EAASR,KAAOI,EAAKJ,YAQvB1D,KAAK4C,aAAc,mCAAqCX,EAAMe,SAAU,KAIzEhD,KAAKiE,SAAUhC,GAIhBjC,KAAKiE,SAAUhC,IAYhB8D,QAAS,SAAWvE,EAAMP,GAEzB,IAAIgB,EAAQjC,KAAKkC,UAAWV,GACxBe,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAC7BqG,KAEAlH,EAAS,IAAIzB,EAAM4I,cAAevI,KAAKH,SAG3C,IAFAuB,EAAOE,QAAStB,KAAKwI,cAAgBvH,GAAOwH,eAAgBzI,KAAK0I,aAEhD,IAATnG,GAAa,CAEpB,GAAKA,IAASoG,EAAc,CAE3B,IAAIjF,EAAO1D,KAAK2D,WAAYnC,EAAM,KAClC8G,EAAUlH,EAAOT,KAAM+C,GAEvB1D,KAAK4C,aAAc,eAAiB3B,EAAOyC,QAEhCnB,IAASqG,GAEpBN,EAAQO,OAAOC,EAAI9I,KAAKoD,UAAW5B,GACnCxB,KAAK4C,aAAc,kBAAoB0F,EAAQO,OAAOC,IAE3CvG,IAASwG,GAEpBT,EAAQO,OAAOG,EAAIhJ,KAAKoD,UAAW5B,GACnCxB,KAAK4C,aAAc,kBAAoB0F,EAAQO,OAAOG,IAE3CzG,IAAS0G,GAEpBX,EAAQY,OAAOJ,EAAI9I,KAAKoD,UAAW5B,GACnCxB,KAAK4C,aAAc,kBAAoB0F,EAAQY,OAAOJ,IAE3CvG,IAAS4G,GAEpBb,EAAQY,OAAOF,EAAIhJ,KAAKoD,UAAW5B,GACnCxB,KAAK4C,aAAc,kBAAoB0F,EAAQY,OAAOF,IAItDhJ,KAAK4C,aAAc,4BAA8BL,EAAKS,SAAU,KAIjET,EAAOvC,KAAKwC,UAAWhB,EAAMS,GAM9B,OAFAjC,KAAKiE,SAAUhC,GAERqG,GAWRF,kBAAmB,SAAW5G,GAE7BxB,KAAKkC,UAAWV,GAChB,IAAIkC,EAAO1D,KAAK2D,WAAYnC,EAAM,IAC9B4H,EAAWpJ,KAAKyF,SAAUjE,GAE9BxB,KAAK4C,aAAc,kBAAoBc,GACvC1D,KAAK4C,aAAc,mBAAqBwG,GAGxC,IADA,IAAIpB,KACMnG,EAAI,EAAGA,EAAIuH,IAAavH,EAEjCmG,EAAMhE,KAAMhE,KAAKyF,SAAUjE,IAI5B,OAASkC,KAAMA,EAAMsE,MAAOA,IAW7B7C,UAAW,SAAW3D,GAErB,IAAIS,EAAQjC,KAAKkC,UAAWV,GACxB0D,EAAQ,IAAIvF,EAAM0J,MAEtB,GAAKpH,EAAME,KAAOmH,GAAYrH,EAAME,KAAOoH,EAAe,CAEzD,IAAIC,EAAIxJ,KAAKyE,SAAUjD,GACnBiI,EAAIzJ,KAAKyE,SAAUjD,GACnBkI,EAAI1J,KAAKyE,SAAUjD,GAEvB0D,EAAMyE,OAAQH,EAAI,IAAKC,EAAI,IAAKC,EAAI,KAEpC1J,KAAK4C,aAAc,gBAAkBsC,EAAMsE,EAAI,KAAOtE,EAAMuE,EAAI,KAAOvE,EAAMwE,QAEvE,GAAKzH,EAAME,KAAOyH,GAAW3H,EAAME,KAAO0H,EAAc,CAE1DL,EAAIxJ,KAAKoD,UAAW5B,GACpBiI,EAAIzJ,KAAKoD,UAAW5B,GACpBkI,EAAI1J,KAAKoD,UAAW5B,GAExB0D,EAAMyE,OAAQH,EAAGC,EAAGC,GAEpB1J,KAAK4C,aAAc,gBAAkBsC,EAAMsE,EAAI,KAAOtE,EAAMuE,EAAI,KAAOvE,EAAMwE,QAI7E1J,KAAK4C,aAAc,8BAAgCX,EAAMe,SAAU,KAKpE,OADAhD,KAAKiE,SAAUhC,GACRiD,GAWRhD,UAAW,SAAWV,GAErB,IAAIS,KAQJ,OANAA,EAAM2B,IAAM5D,KAAKG,SACjB8B,EAAME,GAAKnC,KAAKyF,SAAUjE,GAC1BS,EAAM6H,KAAO9J,KAAK2C,UAAWnB,GAC7BS,EAAMiG,IAAMjG,EAAM2B,IAAM3B,EAAM6H,KAC9B7H,EAAM2B,KAAO,EAEN3B,GAURgC,SAAU,SAAWhC,GAEpBjC,KAAKG,SAAW8B,EAAMiG,KAWvB1F,UAAW,SAAWhB,EAAMS,GAE3B,GAAKA,EAAM2B,KAAO3B,EAAMiG,IAEvB,OAAO,EAIRlI,KAAKG,SAAW8B,EAAM2B,IAEtB,IAEC,IAAIrB,EAAOvC,KAAKkC,UAAWV,GAE3B,OADAS,EAAM2B,KAAOrB,EAAKuH,KACXvH,EAAKJ,GAEX,MAAQ4H,GAGT,OADA/J,KAAK4C,aAAc,2BAA6B5C,KAAKG,UAC9C,IAWT2C,cAAe,WAEd9C,KAAKG,UAAY,GAWlBsE,SAAU,SAAWjD,GAEpB,IAAIwI,EAAIxI,EAAKyI,SAAUjK,KAAKG,UAAU,GAEtC,OADAH,KAAKG,UAAY,EACV6J,GAWR5G,UAAW,SAAW5B,GAErB,IAEC,IAAIwI,EAAIxI,EAAK0I,WAAYlK,KAAKG,UAAU,GAExC,OADAH,KAAKG,UAAY,EACV6J,EAEN,MAAQD,GAET/J,KAAK4C,aAAcmH,EAAI,IAAM/J,KAAKG,SAAW,IAAMqB,EAAK2I,cAa1DC,QAAS,SAAW5I,GAEnB,IAAIwI,EAAIxI,EAAK6I,SAAUrK,KAAKG,UAAU,GAEtC,OADAH,KAAKG,UAAY,EACV6J,GAWRM,UAAW,SAAW9I,GAErB,IAAIwI,EAAIxI,EAAK+I,SAAUvK,KAAKG,UAAU,GAEtC,OADAH,KAAKG,UAAY,EACV6J,GAWRrH,UAAW,SAAWnB,GAErB,IAAIwI,EAAIxI,EAAKgJ,UAAWxK,KAAKG,UAAU,GAEvC,OADAH,KAAKG,UAAY,EACV6J,GAWRvE,SAAU,SAAWjE,GAEpB,IAAIwI,EAAIxI,EAAKiJ,UAAWzK,KAAKG,UAAU,GAEvC,OADAH,KAAKG,UAAY,EACV6J,GAYRrG,WAAY,SAAWnC,EAAMkJ,GAI5B,IAFA,IAAIC,EAAI,GAEE9I,EAAI,EAAGA,EAAI6I,EAAW7I,IAAO,CAEtC,IAAI+I,EAAI5K,KAAKyE,SAAUjD,GACvB,IAAOoJ,EAEN,MAIDD,GAAKE,OAAOC,aAAcF,GAI3B,OAAOD,GAYR/H,aAAc,SAAWmI,GAEnB/K,KAAKC,OAET+K,QAAQC,IAAKF,MAShB,IAAIzI,EAAW,MAGXF,EAAY,MAEZC,EAAS,MACTI,EAAc,EAEdmH,EAAU,GACVN,EAAW,GACXC,EAAe,GACfM,EAAc,GAGdhH,EAAQ,MACRI,EAAe,MACfC,EAAe,IAwBfM,EAAY,MACZY,EAAW,MACXkB,EAAc,MACdL,EAAc,MACdG,EAAe,MACfG,EAAgB,MAEhBG,EAAmB,MAOnBf,EAAe,MAEfG,EAAe,MACfT,EAAW,MAKXE,EAAgB,MAChBsB,EAAa,MAQbK,EAAc,MAIdF,EAAc,MAIdI,EAAc,MAgBduC,EAAc,MAGdM,EAAiB,MACjBE,EAAiB,MACjBP,EAAkB,MAClBG,EAAkB,MAOlBzF,EAAe,MA8BfO,EAAe,MACf6C,EAAc,MAEdK,EAAa,MACboB,EAAgB,MAGhBlB,EAAY,MACZE,EAAc,MAuElB,OAAOxH,EAAMC","file":"../../loaders/TDSLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * Autodesk 3DS three.js file loader, based on lib3ds.\n\t *\n\t * Loads geometry with uv and materials basic properties with texture support.\n\t *\n\t * @author @tentone\n\t * @author @timknip\n\t * @class TDSLoader\n\t * @constructor\n\t */\n\n\tTHREE.TDSLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.debug = false;\n\n\t\tthis.group = null;\n\t\tthis.position = 0;\n\n\t\tthis.materials = [];\n\t\tthis.meshes = [];\n\n\t};\n\n\tTHREE.TDSLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.TDSLoader,\n\n\t\t/**\n\t\t * Load 3ds file from url.\n\t\t *\n\t\t * @method load\n\t\t * @param {[type]} url URL for the file.\n\t\t * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n\t\t * @param {Function} onProgress onProgress callback.\n\t\t * @param {Function} onError onError callback.\n\t\t */\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( scope.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\tonLoad( scope.parse( data, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\t/**\n\t\t * Parse arraybuffer data and load 3ds file.\n\t\t *\n\t\t * @method parse\n\t\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n\t\t * @param {String} path Path for external resources.\n\t\t * @return {Group} Group loaded from 3ds file.\n\t\t */\n\t\tparse: function ( arraybuffer, path ) {\n\n\t\t\tthis.group = new THREE.Group();\n\t\t\tthis.position = 0;\n\t\t\tthis.materials = [];\n\t\t\tthis.meshes = [];\n\n\t\t\tthis.readFile( arraybuffer, path );\n\n\t\t\tfor ( var i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\t\tthis.group.add( this.meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this.group;\n\n\t\t},\n\n\t\t/**\n\t\t * Decode file content to read 3ds data.\n\t\t *\n\t\t * @method readFile\n\t\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n\t\t * @param {String} path Path for external resources.\n\t\t */\n\t\treadFile: function ( arraybuffer, path ) {\n\n\t\t\tvar data = new DataView( arraybuffer );\n\t\t\tvar chunk = this.readChunk( data );\n\n\t\t\tif ( chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC ) {\n\n\t\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\t\tif ( next === M3D_VERSION ) {\n\n\t\t\t\t\t\tvar version = this.readDWord( data );\n\t\t\t\t\t\tthis.debugMessage( '3DS file version: ' + version );\n\n\t\t\t\t\t} else if ( next === MDATA ) {\n\n\t\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\t\tthis.readMeshData( data, path );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.debugMessage( 'Unknown main chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.debugMessage( 'Parsed ' + this.meshes.length + ' meshes' );\n\n\t\t},\n\n\t\t/**\n\t\t * Read mesh data chunk.\n\t\t *\n\t\t * @method readMeshData\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {String} path Path for external resources.\n\t\t */\n\t\treadMeshData: function ( data, path ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === MESH_VERSION ) {\n\n\t\t\t\t\tvar version = + this.readDWord( data );\n\t\t\t\t\tthis.debugMessage( 'Mesh Version: ' + version );\n\n\t\t\t\t} else if ( next === MASTER_SCALE ) {\n\n\t\t\t\t\tvar scale = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( 'Master scale: ' + scale );\n\t\t\t\t\tthis.group.scale.set( scale, scale, scale );\n\n\t\t\t\t} else if ( next === NAMED_OBJECT ) {\n\n\t\t\t\t\tthis.debugMessage( 'Named Object' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readNamedObject( data );\n\n\t\t\t\t} else if ( next === MAT_ENTRY ) {\n\n\t\t\t\t\tthis.debugMessage( 'Material' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readMaterialEntry( data, path );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( 'Unknown MDATA chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Read named object chunk.\n\t\t *\n\t\t * @method readNamedObject\n\t\t * @param {Dataview} data Dataview in use.\n\t\t */\n\t\treadNamedObject: function ( data ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar name = this.readString( data, 64 );\n\t\t\tchunk.cur = this.position;\n\n\t\t\tvar next = this.nextChunk( data, chunk );\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === N_TRI_OBJECT ) {\n\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tvar mesh = this.readMesh( data );\n\t\t\t\t\tmesh.name = name;\n\t\t\t\t\tthis.meshes.push( mesh );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( 'Unknown named object chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t},\n\n\t\t/**\n\t\t * Read material data chunk and add it to the material list.\n\t\t *\n\t\t * @method readMaterialEntry\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {String} path Path for external resources.\n\t\t */\n\t\treadMaterialEntry: function ( data, path ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\t\t\tvar material = new THREE.MeshPhongMaterial();\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === MAT_NAME ) {\n\n\t\t\t\t\tmaterial.name = this.readString( data, 64 );\n\t\t\t\t\tthis.debugMessage( '   Name: ' + material.name );\n\n\t\t\t\t} else if ( next === MAT_WIRE ) {\n\n\t\t\t\t\tthis.debugMessage( '   Wireframe' );\n\t\t\t\t\tmaterial.wireframe = true;\n\n\t\t\t\t} else if ( next === MAT_WIRE_SIZE ) {\n\n\t\t\t\t\tvar value = this.readByte( data );\n\t\t\t\t\tmaterial.wireframeLinewidth = value;\n\t\t\t\t\tthis.debugMessage( '   Wireframe Thickness: ' + value );\n\n\t\t\t\t} else if ( next === MAT_TWO_SIDE ) {\n\n\t\t\t\t\tmaterial.side = THREE.DoubleSide;\n\t\t\t\t\tthis.debugMessage( '   DoubleSided' );\n\n\t\t\t\t} else if ( next === MAT_ADDITIVE ) {\n\n\t\t\t\t\tthis.debugMessage( '   Additive Blending' );\n\t\t\t\t\tmaterial.blending = THREE.AdditiveBlending;\n\n\t\t\t\t} else if ( next === MAT_DIFFUSE ) {\n\n\t\t\t\t\tthis.debugMessage( '   Diffuse Color' );\n\t\t\t\t\tmaterial.color = this.readColor( data );\n\n\t\t\t\t} else if ( next === MAT_SPECULAR ) {\n\n\t\t\t\t\tthis.debugMessage( '   Specular Color' );\n\t\t\t\t\tmaterial.specular = this.readColor( data );\n\n\t\t\t\t} else if ( next === MAT_AMBIENT ) {\n\n\t\t\t\t\tthis.debugMessage( '   Ambient color' );\n\t\t\t\t\tmaterial.color = this.readColor( data );\n\n\t\t\t\t} else if ( next === MAT_SHININESS ) {\n\n\t\t\t\t\tvar shininess = this.readWord( data );\n\t\t\t\t\tmaterial.shininess = shininess;\n\t\t\t\t\tthis.debugMessage( '   Shininess : ' + shininess );\n\n\t\t\t\t} else if ( next === MAT_TRANSPARENCY ) {\n\n\t\t\t\t\tvar opacity = this.readWord( data );\n\t\t\t\t\tmaterial.opacity = opacity * 0.01;\n\t\t\t\t\tthis.debugMessage( '  Opacity : ' + opacity );\n\t\t\t\t\tmaterial.transparent = opacity < 100 ? true : false;\n\n\t\t\t\t} else if ( next === MAT_TEXMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   ColorMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.map = this.readMap( data, path );\n\n\t\t\t\t} else if ( next === MAT_BUMPMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   BumpMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.bumpMap = this.readMap( data, path );\n\n\t\t\t\t} else if ( next === MAT_OPACMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   OpacityMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.alphaMap = this.readMap( data, path );\n\n\t\t\t\t} else if ( next === MAT_SPECMAP ) {\n\n\t\t\t\t\tthis.debugMessage( '   SpecularMap' );\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tmaterial.specularMap = this.readMap( data, path );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '   Unknown material chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t\tthis.materials[ material.name ] = material;\n\n\t\t},\n\n\t\t/**\n\t\t * Read mesh data chunk.\n\t\t *\n\t\t * @method readMesh\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @return {Mesh} The parsed mesh.\n\t\t */\n\t\treadMesh: function ( data ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tvar uvs = [];\n\n\t\t\tvar material = new THREE.MeshPhongMaterial();\n\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\t\t\tmesh.name = 'mesh';\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === POINT_ARRAY ) {\n\n\t\t\t\t\tvar points = this.readWord( data );\n\n\t\t\t\t\tthis.debugMessage( '   Vertex: ' + points );\n\n\t\t\t\t\t//BufferGeometry\n\n\t\t\t\t\tvar vertices = [];\n\n\t\t\t\t\tfor ( var i = 0; i < points; i ++ )\t\t{\n\n\t\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\t\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\t\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\n\t\t\t\t} else if ( next === FACE_ARRAY ) {\n\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readFaceArray( data, mesh );\n\n\t\t\t\t} else if ( next === TEX_VERTS ) {\n\n\t\t\t\t\tvar texels = this.readWord( data );\n\n\t\t\t\t\tthis.debugMessage( '   UV: ' + texels );\n\n\t\t\t\t\t//BufferGeometry\n\n\t\t\t\t\tvar uvs = [];\n\n\t\t\t\t\tfor ( var i = 0; i < texels; i ++ )\t\t{\n\n\t\t\t\t\t\tuvs.push( this.readFloat( data ) );\n\t\t\t\t\t\tuvs.push( this.readFloat( data ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t\t\t} else if ( next === MESH_MATRIX ) {\n\n\t\t\t\t\tthis.debugMessage( '   Tranformation Matrix (TODO)' );\n\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tfor ( var i = 0; i < 12; i ++ ) {\n\n\t\t\t\t\t\tvalues[ i ] = this.readFloat( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar matrix = new THREE.Matrix4();\n\n\t\t\t\t\t//X Line\n\t\t\t\t\tmatrix.elements[ 0 ] = values[ 0 ];\n\t\t\t\t\tmatrix.elements[ 1 ] = values[ 6 ];\n\t\t\t\t\tmatrix.elements[ 2 ] = values[ 3 ];\n\t\t\t\t\tmatrix.elements[ 3 ] = values[ 9 ];\n\n\t\t\t\t\t//Y Line\n\t\t\t\t\tmatrix.elements[ 4 ] = values[ 2 ];\n\t\t\t\t\tmatrix.elements[ 5 ] = values[ 8 ];\n\t\t\t\t\tmatrix.elements[ 6 ] = values[ 5 ];\n\t\t\t\t\tmatrix.elements[ 7 ] = values[ 11 ];\n\n\t\t\t\t\t//Z Line\n\t\t\t\t\tmatrix.elements[ 8 ] = values[ 1 ];\n\t\t\t\t\tmatrix.elements[ 9 ] = values[ 7 ];\n\t\t\t\t\tmatrix.elements[ 10 ] = values[ 4 ];\n\t\t\t\t\tmatrix.elements[ 11 ] = values[ 10 ];\n\n\t\t\t\t\t//W Line\n\t\t\t\t\tmatrix.elements[ 12 ] = 0;\n\t\t\t\t\tmatrix.elements[ 13 ] = 0;\n\t\t\t\t\tmatrix.elements[ 14 ] = 0;\n\t\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\t\tmatrix.transpose();\n\n\t\t\t\t\tvar inverse = new THREE.Matrix4();\n\t\t\t\t\tinverse.getInverse( matrix );\n\t\t\t\t\tgeometry.applyMatrix4( inverse );\n\n\t\t\t\t\tmatrix.decompose( mesh.position, mesh.quaternion, mesh.scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '   Unknown mesh chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t\tgeometry.computeVertexNormals();\n\n\t\t\treturn mesh;\n\n\t\t},\n\n\t\t/**\n\t\t * Read face array data chunk.\n\t\t *\n\t\t * @method readFaceArray\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {Mesh} mesh Mesh to be filled with the data read.\n\t\t */\n\t\treadFaceArray: function ( data, mesh ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar faces = this.readWord( data );\n\n\t\t\tthis.debugMessage( '   Faces: ' + faces );\n\n\t\t\tvar index = [];\n\n\t\t\tfor ( var i = 0; i < faces; ++ i ) {\n\n\t\t\t\tindex.push( this.readWord( data ), this.readWord( data ), this.readWord( data ) );\n\n\t\t\t\tthis.readWord( data ); // visibility\n\n\t\t\t}\n\n\t\t\tmesh.geometry.setIndex( index );\n\n\t\t\t//The rest of the FACE_ARRAY chunk is subchunks\n\n\t\t\twhile ( this.position < chunk.end ) {\n\n\t\t\t\tvar chunk = this.readChunk( data );\n\n\t\t\t\tif ( chunk.id === MSH_MAT_GROUP ) {\n\n\t\t\t\t\tthis.debugMessage( '      Material Group' );\n\n\t\t\t\t\tthis.resetPosition( data );\n\n\t\t\t\t\tvar group = this.readMaterialGroup( data );\n\n\t\t\t\t\tvar material = this.materials[ group.name ];\n\n\t\t\t\t\tif ( material !== undefined )\t{\n\n\t\t\t\t\t\tmesh.material = material;\n\n\t\t\t\t\t\tif ( material.name === '' )\t\t{\n\n\t\t\t\t\t\t\tmaterial.name = mesh.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '      Unknown face array chunk: ' + chunk.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.endChunk( chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t},\n\n\t\t/**\n\t\t * Read texture map data chunk.\n\t\t *\n\t\t * @method readMap\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @param {String} path Path for external resources.\n\t\t * @return {Texture} Texture read from this data chunk.\n\t\t */\n\t\treadMap: function ( data, path ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar next = this.nextChunk( data, chunk );\n\t\t\tvar texture = {};\n\n\t\t\tvar loader = new THREE.TextureLoader( this.manager );\n\t\t\tloader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === MAT_MAPNAME ) {\n\n\t\t\t\t\tvar name = this.readString( data, 128 );\n\t\t\t\t\ttexture = loader.load( name );\n\n\t\t\t\t\tthis.debugMessage( '      File: ' + path + name );\n\n\t\t\t\t} else if ( next === MAT_MAP_UOFFSET ) {\n\n\t\t\t\t\ttexture.offset.x = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      OffsetX: ' + texture.offset.x );\n\n\t\t\t\t} else if ( next === MAT_MAP_VOFFSET ) {\n\n\t\t\t\t\ttexture.offset.y = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      OffsetY: ' + texture.offset.y );\n\n\t\t\t\t} else if ( next === MAT_MAP_USCALE ) {\n\n\t\t\t\t\ttexture.repeat.x = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      RepeatX: ' + texture.repeat.x );\n\n\t\t\t\t} else if ( next === MAT_MAP_VSCALE ) {\n\n\t\t\t\t\ttexture.repeat.y = this.readFloat( data );\n\t\t\t\t\tthis.debugMessage( '      RepeatY: ' + texture.repeat.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( '      Unknown map chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t/**\n\t\t * Read material group data chunk.\n\t\t *\n\t\t * @method readMaterialGroup\n\t\t * @param {Dataview} data Dataview in use.\n\t\t * @return {Object} Object with name and index of the object.\n\t\t */\n\t\treadMaterialGroup: function ( data ) {\n\n\t\t\tthis.readChunk( data );\n\t\t\tvar name = this.readString( data, 64 );\n\t\t\tvar numFaces = this.readWord( data );\n\n\t\t\tthis.debugMessage( '         Name: ' + name );\n\t\t\tthis.debugMessage( '         Faces: ' + numFaces );\n\n\t\t\tvar index = [];\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tindex.push( this.readWord( data ) );\n\n\t\t\t}\n\n\t\t\treturn { name: name, index: index };\n\n\t\t},\n\n\t\t/**\n\t\t * Read a color value.\n\t\t *\n\t\t * @method readColor\n\t\t * @param {DataView} data Dataview.\n\t\t * @return {Color} Color value read..\n\t\t */\n\t\treadColor: function ( data ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\t\t\tvar color = new THREE.Color();\n\n\t\t\tif ( chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24 ) {\n\n\t\t\t\tvar r = this.readByte( data );\n\t\t\t\tvar g = this.readByte( data );\n\t\t\t\tvar b = this.readByte( data );\n\n\t\t\t\tcolor.setRGB( r / 255, g / 255, b / 255 );\n\n\t\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\n\n\t\t\t}\telse if ( chunk.id === COLOR_F || chunk.id === LIN_COLOR_F ) {\n\n\t\t\t\tvar r = this.readFloat( data );\n\t\t\t\tvar g = this.readFloat( data );\n\t\t\t\tvar b = this.readFloat( data );\n\n\t\t\t\tcolor.setRGB( r, g, b );\n\n\t\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\n\n\t\t\t}\telse {\n\n\t\t\t\tthis.debugMessage( '      Unknown color chunk: ' + chunk.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\t\t\treturn color;\n\n\t\t},\n\n\t\t/**\n\t\t * Read next chunk of data.\n\t\t *\n\t\t * @method readChunk\n\t\t * @param {DataView} data Dataview.\n\t\t * @return {Object} Chunk of data read.\n\t\t */\n\t\treadChunk: function ( data ) {\n\n\t\t\tvar chunk = {};\n\n\t\t\tchunk.cur = this.position;\n\t\t\tchunk.id = this.readWord( data );\n\t\t\tchunk.size = this.readDWord( data );\n\t\t\tchunk.end = chunk.cur + chunk.size;\n\t\t\tchunk.cur += 6;\n\n\t\t\treturn chunk;\n\n\t\t},\n\n\t\t/**\n\t\t * Set position to the end of the current chunk of data.\n\t\t *\n\t\t * @method endChunk\n\t\t * @param {Object} chunk Data chunk.\n\t\t */\n\t\tendChunk: function ( chunk ) {\n\n\t\t\tthis.position = chunk.end;\n\n\t\t},\n\n\t\t/**\n\t\t * Move to the next data chunk.\n\t\t *\n\t\t * @method nextChunk\n\t\t * @param {DataView} data Dataview.\n\t\t * @param {Object} chunk Data chunk.\n\t\t */\n\t\tnextChunk: function ( data, chunk ) {\n\n\t\t\tif ( chunk.cur >= chunk.end ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tthis.position = chunk.cur;\n\n\t\t\ttry {\n\n\t\t\t\tvar next = this.readChunk( data );\n\t\t\t\tchunk.cur += next.size;\n\t\t\t\treturn next.id;\n\n\t\t\t}\tcatch ( e ) {\n\n\t\t\t\tthis.debugMessage( 'Unable to read chunk at ' + this.position );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Reset dataview position.\n\t\t *\n\t\t * @method resetPosition\n\t\t */\n\t\tresetPosition: function () {\n\n\t\t\tthis.position -= 6;\n\n\t\t},\n\n\t\t/**\n\t\t * Read byte value.\n\t\t *\n\t\t * @method readByte\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadByte: function ( data ) {\n\n\t\t\tvar v = data.getUint8( this.position, true );\n\t\t\tthis.position += 1;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 32 bit float value.\n\t\t *\n\t\t * @method readFloat\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadFloat: function ( data ) {\n\n\t\t\ttry {\n\n\t\t\t\tvar v = data.getFloat32( this.position, true );\n\t\t\t\tthis.position += 4;\n\t\t\t\treturn v;\n\n\t\t\t}\tcatch ( e ) {\n\n\t\t\t\tthis.debugMessage( e + ' ' + this.position + ' ' + data.byteLength );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Read 32 bit signed integer value.\n\t\t *\n\t\t * @method readInt\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadInt: function ( data ) {\n\n\t\t\tvar v = data.getInt32( this.position, true );\n\t\t\tthis.position += 4;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 16 bit signed integer value.\n\t\t *\n\t\t * @method readShort\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadShort: function ( data ) {\n\n\t\t\tvar v = data.getInt16( this.position, true );\n\t\t\tthis.position += 2;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 64 bit unsigned integer value.\n\t\t *\n\t\t * @method readDWord\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadDWord: function ( data ) {\n\n\t\t\tvar v = data.getUint32( this.position, true );\n\t\t\tthis.position += 4;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read 32 bit unsigned integer value.\n\t\t *\n\t\t * @method readWord\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @return {Number} Data read from the dataview.\n\t\t */\n\t\treadWord: function ( data ) {\n\n\t\t\tvar v = data.getUint16( this.position, true );\n\t\t\tthis.position += 2;\n\t\t\treturn v;\n\n\t\t},\n\n\t\t/**\n\t\t * Read string value.\n\t\t *\n\t\t * @method readString\n\t\t * @param {DataView} data Dataview to read data from.\n\t\t * @param {Number} maxLength Max size of the string to be read.\n\t\t * @return {String} Data read from the dataview.\n\t\t */\n\t\treadString: function ( data, maxLength ) {\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0; i < maxLength; i ++ ) {\n\n\t\t\t\tvar c = this.readByte( data );\n\t\t\t\tif ( ! c ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\ts += String.fromCharCode( c );\n\n\t\t\t}\n\n\t\t\treturn s;\n\n\t\t},\n\n\t\t/**\n\t\t * Print debug message to the console.\n\t\t *\n\t\t * Is controlled by a flag to show or hide debug messages.\n\t\t *\n\t\t * @method debugMessage\n\t\t * @param {Object} message Debug message to print to the console.\n\t\t */\n\t\tdebugMessage: function ( message ) {\n\n\t\t\tif ( this.debug ) {\n\n\t\t\t\tconsole.log( message );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t// var NULL_CHUNK = 0x0000;\n\tvar M3DMAGIC = 0x4D4D;\n\t// var SMAGIC = 0x2D2D;\n\t// var LMAGIC = 0x2D3D;\n\tvar MLIBMAGIC = 0x3DAA;\n\t// var MATMAGIC = 0x3DFF;\n\tvar CMAGIC = 0xC23D;\n\tvar M3D_VERSION = 0x0002;\n\t// var M3D_KFVERSION = 0x0005;\n\tvar COLOR_F = 0x0010;\n\tvar COLOR_24 = 0x0011;\n\tvar LIN_COLOR_24 = 0x0012;\n\tvar LIN_COLOR_F = 0x0013;\n\t// var INT_PERCENTAGE = 0x0030;\n\t// var FLOAT_PERCENTAGE = 0x0031;\n\tvar MDATA = 0x3D3D;\n\tvar MESH_VERSION = 0x3D3E;\n\tvar MASTER_SCALE = 0x0100;\n\t// var LO_SHADOW_BIAS = 0x1400;\n\t// var HI_SHADOW_BIAS = 0x1410;\n\t// var SHADOW_MAP_SIZE = 0x1420;\n\t// var SHADOW_SAMPLES = 0x1430;\n\t// var SHADOW_RANGE = 0x1440;\n\t// var SHADOW_FILTER = 0x1450;\n\t// var RAY_BIAS = 0x1460;\n\t// var O_CONSTS = 0x1500;\n\t// var AMBIENT_LIGHT = 0x2100;\n\t// var BIT_MAP = 0x1100;\n\t// var SOLID_BGND = 0x1200;\n\t// var V_GRADIENT = 0x1300;\n\t// var USE_BIT_MAP = 0x1101;\n\t// var USE_SOLID_BGND = 0x1201;\n\t// var USE_V_GRADIENT = 0x1301;\n\t// var FOG = 0x2200;\n\t// var FOG_BGND = 0x2210;\n\t// var LAYER_FOG = 0x2302;\n\t// var DISTANCE_CUE = 0x2300;\n\t// var DCUE_BGND = 0x2310;\n\t// var USE_FOG = 0x2201;\n\t// var USE_LAYER_FOG = 0x2303;\n\t// var USE_DISTANCE_CUE = 0x2301;\n\tvar MAT_ENTRY = 0xAFFF;\n\tvar MAT_NAME = 0xA000;\n\tvar MAT_AMBIENT = 0xA010;\n\tvar MAT_DIFFUSE = 0xA020;\n\tvar MAT_SPECULAR = 0xA030;\n\tvar MAT_SHININESS = 0xA040;\n\t// var MAT_SHIN2PCT = 0xA041;\n\tvar MAT_TRANSPARENCY = 0xA050;\n\t// var MAT_XPFALL = 0xA052;\n\t// var MAT_USE_XPFALL = 0xA240;\n\t// var MAT_REFBLUR = 0xA053;\n\t// var MAT_SHADING = 0xA100;\n\t// var MAT_USE_REFBLUR = 0xA250;\n\t// var MAT_SELF_ILLUM = 0xA084;\n\tvar MAT_TWO_SIDE = 0xA081;\n\t// var MAT_DECAL = 0xA082;\n\tvar MAT_ADDITIVE = 0xA083;\n\tvar MAT_WIRE = 0xA085;\n\t// var MAT_FACEMAP = 0xA088;\n\t// var MAT_TRANSFALLOFF_IN = 0xA08A;\n\t// var MAT_PHONGSOFT = 0xA08C;\n\t// var MAT_WIREABS = 0xA08E;\n\tvar MAT_WIRE_SIZE = 0xA087;\n\tvar MAT_TEXMAP = 0xA200;\n\t// var MAT_SXP_TEXT_DATA = 0xA320;\n\t// var MAT_TEXMASK = 0xA33E;\n\t// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n\t// var MAT_TEX2MAP = 0xA33A;\n\t// var MAT_SXP_TEXT2_DATA = 0xA321;\n\t// var MAT_TEX2MASK = 0xA340;\n\t// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\tvar MAT_OPACMAP = 0xA210;\n\t// var MAT_SXP_OPAC_DATA = 0xA322;\n\t// var MAT_OPACMASK = 0xA342;\n\t// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\tvar MAT_BUMPMAP = 0xA230;\n\t// var MAT_SXP_BUMP_DATA = 0xA324;\n\t// var MAT_BUMPMASK = 0xA344;\n\t// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\tvar MAT_SPECMAP = 0xA204;\n\t// var MAT_SXP_SPEC_DATA = 0xA325;\n\t// var MAT_SPECMASK = 0xA348;\n\t// var MAT_SXP_SPECMASK_DATA = 0xA332;\n\t// var MAT_SHINMAP = 0xA33C;\n\t// var MAT_SXP_SHIN_DATA = 0xA326;\n\t// var MAT_SHINMASK = 0xA346;\n\t// var MAT_SXP_SHINMASK_DATA = 0xA334;\n\t// var MAT_SELFIMAP = 0xA33D;\n\t// var MAT_SXP_SELFI_DATA = 0xA328;\n\t// var MAT_SELFIMASK = 0xA34A;\n\t// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n\t// var MAT_REFLMAP = 0xA220;\n\t// var MAT_REFLMASK = 0xA34C;\n\t// var MAT_SXP_REFLMASK_DATA = 0xA338;\n\t// var MAT_ACUBIC = 0xA310;\n\tvar MAT_MAPNAME = 0xA300;\n\t// var MAT_MAP_TILING = 0xA351;\n\t// var MAT_MAP_TEXBLUR = 0xA353;\n\tvar MAT_MAP_USCALE = 0xA354;\n\tvar MAT_MAP_VSCALE = 0xA356;\n\tvar MAT_MAP_UOFFSET = 0xA358;\n\tvar MAT_MAP_VOFFSET = 0xA35A;\n\t// var MAT_MAP_ANG = 0xA35C;\n\t// var MAT_MAP_COL1 = 0xA360;\n\t// var MAT_MAP_COL2 = 0xA362;\n\t// var MAT_MAP_RCOL = 0xA364;\n\t// var MAT_MAP_GCOL = 0xA366;\n\t// var MAT_MAP_BCOL = 0xA368;\n\tvar NAMED_OBJECT = 0x4000;\n\t// var N_DIRECT_LIGHT = 0x4600;\n\t// var DL_OFF = 0x4620;\n\t// var DL_OUTER_RANGE = 0x465A;\n\t// var DL_INNER_RANGE = 0x4659;\n\t// var DL_MULTIPLIER = 0x465B;\n\t// var DL_EXCLUDE = 0x4654;\n\t// var DL_ATTENUATE = 0x4625;\n\t// var DL_SPOTLIGHT = 0x4610;\n\t// var DL_SPOT_ROLL = 0x4656;\n\t// var DL_SHADOWED = 0x4630;\n\t// var DL_LOCAL_SHADOW2 = 0x4641;\n\t// var DL_SEE_CONE = 0x4650;\n\t// var DL_SPOT_RECTANGULAR = 0x4651;\n\t// var DL_SPOT_ASPECT = 0x4657;\n\t// var DL_SPOT_PROJECTOR = 0x4653;\n\t// var DL_SPOT_OVERSHOOT = 0x4652;\n\t// var DL_RAY_BIAS = 0x4658;\n\t// var DL_RAYSHAD = 0x4627;\n\t// var N_CAMERA = 0x4700;\n\t// var CAM_SEE_CONE = 0x4710;\n\t// var CAM_RANGES = 0x4720;\n\t// var OBJ_HIDDEN = 0x4010;\n\t// var OBJ_VIS_LOFTER = 0x4011;\n\t// var OBJ_DOESNT_CAST = 0x4012;\n\t// var OBJ_DONT_RECVSHADOW = 0x4017;\n\t// var OBJ_MATTE = 0x4013;\n\t// var OBJ_FAST = 0x4014;\n\t// var OBJ_PROCEDURAL = 0x4015;\n\t// var OBJ_FROZEN = 0x4016;\n\tvar N_TRI_OBJECT = 0x4100;\n\tvar POINT_ARRAY = 0x4110;\n\t// var POINT_FLAG_ARRAY = 0x4111;\n\tvar FACE_ARRAY = 0x4120;\n\tvar MSH_MAT_GROUP = 0x4130;\n\t// var SMOOTH_GROUP = 0x4150;\n\t// var MSH_BOXMAP = 0x4190;\n\tvar TEX_VERTS = 0x4140;\n\tvar MESH_MATRIX = 0x4160;\n\t// var MESH_COLOR = 0x4165;\n\t// var MESH_TEXTURE_INFO = 0x4170;\n\t// var KFDATA = 0xB000;\n\t// var KFHDR = 0xB00A;\n\t// var KFSEG = 0xB008;\n\t// var KFCURTIME = 0xB009;\n\t// var AMBIENT_NODE_TAG = 0xB001;\n\t// var OBJECT_NODE_TAG = 0xB002;\n\t// var CAMERA_NODE_TAG = 0xB003;\n\t// var TARGET_NODE_TAG = 0xB004;\n\t// var LIGHT_NODE_TAG = 0xB005;\n\t// var L_TARGET_NODE_TAG = 0xB006;\n\t// var SPOTLIGHT_NODE_TAG = 0xB007;\n\t// var NODE_ID = 0xB030;\n\t// var NODE_HDR = 0xB010;\n\t// var PIVOT = 0xB013;\n\t// var INSTANCE_NAME = 0xB011;\n\t// var MORPH_SMOOTH = 0xB015;\n\t// var BOUNDBOX = 0xB014;\n\t// var POS_TRACK_TAG = 0xB020;\n\t// var COL_TRACK_TAG = 0xB025;\n\t// var ROT_TRACK_TAG = 0xB021;\n\t// var SCL_TRACK_TAG = 0xB022;\n\t// var MORPH_TRACK_TAG = 0xB026;\n\t// var FOV_TRACK_TAG = 0xB023;\n\t// var ROLL_TRACK_TAG = 0xB024;\n\t// var HOT_TRACK_TAG = 0xB027;\n\t// var FALL_TRACK_TAG = 0xB028;\n\t// var HIDE_TRACK_TAG = 0xB029;\n\t// var POLY_2D = 0x5000;\n\t// var SHAPE_OK = 0x5010;\n\t// var SHAPE_NOT_OK = 0x5011;\n\t// var SHAPE_HOOK = 0x5020;\n\t// var PATH_3D = 0x6000;\n\t// var PATH_MATRIX = 0x6005;\n\t// var SHAPE_2D = 0x6010;\n\t// var M_SCALE = 0x6020;\n\t// var M_TWIST = 0x6030;\n\t// var M_TEETER = 0x6040;\n\t// var M_FIT = 0x6050;\n\t// var M_BEVEL = 0x6060;\n\t// var XZ_CURVE = 0x6070;\n\t// var YZ_CURVE = 0x6080;\n\t// var INTERPCT = 0x6090;\n\t// var DEFORM_LIMIT = 0x60A0;\n\t// var USE_CONTOUR = 0x6100;\n\t// var USE_TWEEN = 0x6110;\n\t// var USE_SCALE = 0x6120;\n\t// var USE_TWIST = 0x6130;\n\t// var USE_TEETER = 0x6140;\n\t// var USE_FIT = 0x6150;\n\t// var USE_BEVEL = 0x6160;\n\t// var DEFAULT_VIEW = 0x3000;\n\t// var VIEW_TOP = 0x3010;\n\t// var VIEW_BOTTOM = 0x3020;\n\t// var VIEW_LEFT = 0x3030;\n\t// var VIEW_RIGHT = 0x3040;\n\t// var VIEW_FRONT = 0x3050;\n\t// var VIEW_BACK = 0x3060;\n\t// var VIEW_USER = 0x3070;\n\t// var VIEW_CAMERA = 0x3080;\n\t// var VIEW_WINDOW = 0x3090;\n\t// var VIEWPORT_LAYOUT_OLD = 0x7000;\n\t// var VIEWPORT_DATA_OLD = 0x7010;\n\t// var VIEWPORT_LAYOUT = 0x7001;\n\t// var VIEWPORT_DATA = 0x7011;\n\t// var VIEWPORT_DATA_3 = 0x7012;\n\t// var VIEWPORT_SIZE = 0x7020;\n\t// var NETWORK_VIEW = 0x7030;\n\t\n\treturn THREE.TDSLoader;\n});\n"]}