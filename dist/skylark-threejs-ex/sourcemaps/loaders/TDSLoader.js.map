{"version":3,"sources":["loaders/TDSLoader.js"],"names":["define","THREE","TDSLoader","manager","Loader","call","this","debug","group","position","materials","meshes","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","data","parse","arraybuffer","Group","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MeshPhongMaterial","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","DoubleSide","MAT_ADDITIVE","blending","AdditiveBlending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readWord","MAT_TRANSPARENCY","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","BufferGeometry","uvs","Mesh","POINT_ARRAY","points","vertices","setAttribute","Float32BufferAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","values","matrix","Matrix4","elements","transpose","inverse","getInverse","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","end","MSH_MAT_GROUP","readMaterialGroup","undefined","texture","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","Color","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","e","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","message","console","log"],"mappings":"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","file":"../../loaders/TDSLoader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TDSLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.debug = false;\n        this.group = null;\n        this.position = 0;\n        this.materials = [];\n        this.meshes = [];\n    };\n    TDSLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TDSLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                onLoad(scope.parse(data, path));\n            }, onProgress, onError);\n        },\n        parse: function (arraybuffer, path) {\n            this.group = new THREE.Group();\n            this.position = 0;\n            this.materials = [];\n            this.meshes = [];\n            this.readFile(arraybuffer, path);\n            for (var i = 0; i < this.meshes.length; i++) {\n                this.group.add(this.meshes[i]);\n            }\n            return this.group;\n        },\n        readFile: function (arraybuffer, path) {\n            var data = new DataView(arraybuffer);\n            var chunk = this.readChunk(data);\n            if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n                var next = this.nextChunk(data, chunk);\n                while (next !== 0) {\n                    if (next === M3D_VERSION) {\n                        var version = this.readDWord(data);\n                        this.debugMessage('3DS file version: ' + version);\n                    } else if (next === MDATA) {\n                        this.resetPosition(data);\n                        this.readMeshData(data, path);\n                    } else {\n                        this.debugMessage('Unknown main chunk: ' + next.toString(16));\n                    }\n                    next = this.nextChunk(data, chunk);\n                }\n            }\n            this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n        },\n        readMeshData: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === MESH_VERSION) {\n                    var version = +this.readDWord(data);\n                    this.debugMessage('Mesh Version: ' + version);\n                } else if (next === MASTER_SCALE) {\n                    var scale = this.readFloat(data);\n                    this.debugMessage('Master scale: ' + scale);\n                    this.group.scale.set(scale, scale, scale);\n                } else if (next === NAMED_OBJECT) {\n                    this.debugMessage('Named Object');\n                    this.resetPosition(data);\n                    this.readNamedObject(data);\n                } else if (next === MAT_ENTRY) {\n                    this.debugMessage('Material');\n                    this.resetPosition(data);\n                    this.readMaterialEntry(data, path);\n                } else {\n                    this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n        },\n        readNamedObject: function (data) {\n            var chunk = this.readChunk(data);\n            var name = this.readString(data, 64);\n            chunk.cur = this.position;\n            var next = this.nextChunk(data, chunk);\n            while (next !== 0) {\n                if (next === N_TRI_OBJECT) {\n                    this.resetPosition(data);\n                    var mesh = this.readMesh(data);\n                    mesh.name = name;\n                    this.meshes.push(mesh);\n                } else {\n                    this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMaterialEntry: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var material = new THREE.MeshPhongMaterial();\n            while (next !== 0) {\n                if (next === MAT_NAME) {\n                    material.name = this.readString(data, 64);\n                    this.debugMessage('   Name: ' + material.name);\n                } else if (next === MAT_WIRE) {\n                    this.debugMessage('   Wireframe');\n                    material.wireframe = true;\n                } else if (next === MAT_WIRE_SIZE) {\n                    var value = this.readByte(data);\n                    material.wireframeLinewidth = value;\n                    this.debugMessage('   Wireframe Thickness: ' + value);\n                } else if (next === MAT_TWO_SIDE) {\n                    material.side = THREE.DoubleSide;\n                    this.debugMessage('   DoubleSided');\n                } else if (next === MAT_ADDITIVE) {\n                    this.debugMessage('   Additive Blending');\n                    material.blending = THREE.AdditiveBlending;\n                } else if (next === MAT_DIFFUSE) {\n                    this.debugMessage('   Diffuse Color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SPECULAR) {\n                    this.debugMessage('   Specular Color');\n                    material.specular = this.readColor(data);\n                } else if (next === MAT_AMBIENT) {\n                    this.debugMessage('   Ambient color');\n                    material.color = this.readColor(data);\n                } else if (next === MAT_SHININESS) {\n                    var shininess = this.readWord(data);\n                    material.shininess = shininess;\n                    this.debugMessage('   Shininess : ' + shininess);\n                } else if (next === MAT_TRANSPARENCY) {\n                    var opacity = this.readWord(data);\n                    material.opacity = opacity * 0.01;\n                    this.debugMessage('  Opacity : ' + opacity);\n                    material.transparent = opacity < 100 ? true : false;\n                } else if (next === MAT_TEXMAP) {\n                    this.debugMessage('   ColorMap');\n                    this.resetPosition(data);\n                    material.map = this.readMap(data, path);\n                } else if (next === MAT_BUMPMAP) {\n                    this.debugMessage('   BumpMap');\n                    this.resetPosition(data);\n                    material.bumpMap = this.readMap(data, path);\n                } else if (next === MAT_OPACMAP) {\n                    this.debugMessage('   OpacityMap');\n                    this.resetPosition(data);\n                    material.alphaMap = this.readMap(data, path);\n                } else if (next === MAT_SPECMAP) {\n                    this.debugMessage('   SpecularMap');\n                    this.resetPosition(data);\n                    material.specularMap = this.readMap(data, path);\n                } else {\n                    this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            this.materials[material.name] = material;\n        },\n        readMesh: function (data) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var geometry = new THREE.BufferGeometry();\n            var uvs = [];\n            var material = new THREE.MeshPhongMaterial();\n            var mesh = new THREE.Mesh(geometry, material);\n            mesh.name = 'mesh';\n            while (next !== 0) {\n                if (next === POINT_ARRAY) {\n                    var points = this.readWord(data);\n                    this.debugMessage('   Vertex: ' + points);\n                    var vertices = [];\n                    for (var i = 0; i < points; i++) {\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                        vertices.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n                } else if (next === FACE_ARRAY) {\n                    this.resetPosition(data);\n                    this.readFaceArray(data, mesh);\n                } else if (next === TEX_VERTS) {\n                    var texels = this.readWord(data);\n                    this.debugMessage('   UV: ' + texels);\n                    var uvs = [];\n                    for (var i = 0; i < texels; i++) {\n                        uvs.push(this.readFloat(data));\n                        uvs.push(this.readFloat(data));\n                    }\n                    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                } else if (next === MESH_MATRIX) {\n                    this.debugMessage('   Tranformation Matrix (TODO)');\n                    var values = [];\n                    for (var i = 0; i < 12; i++) {\n                        values[i] = this.readFloat(data);\n                    }\n                    var matrix = new THREE.Matrix4();\n                    matrix.elements[0] = values[0];\n                    matrix.elements[1] = values[6];\n                    matrix.elements[2] = values[3];\n                    matrix.elements[3] = values[9];\n                    matrix.elements[4] = values[2];\n                    matrix.elements[5] = values[8];\n                    matrix.elements[6] = values[5];\n                    matrix.elements[7] = values[11];\n                    matrix.elements[8] = values[1];\n                    matrix.elements[9] = values[7];\n                    matrix.elements[10] = values[4];\n                    matrix.elements[11] = values[10];\n                    matrix.elements[12] = 0;\n                    matrix.elements[13] = 0;\n                    matrix.elements[14] = 0;\n                    matrix.elements[15] = 1;\n                    matrix.transpose();\n                    var inverse = new THREE.Matrix4();\n                    inverse.getInverse(matrix);\n                    geometry.applyMatrix4(inverse);\n                    matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n                } else {\n                    this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            geometry.computeVertexNormals();\n            return mesh;\n        },\n        readFaceArray: function (data, mesh) {\n            var chunk = this.readChunk(data);\n            var faces = this.readWord(data);\n            this.debugMessage('   Faces: ' + faces);\n            var index = [];\n            for (var i = 0; i < faces; ++i) {\n                index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n                this.readWord(data);\n            }\n            mesh.geometry.setIndex(index);\n            while (this.position < chunk.end) {\n                var chunk = this.readChunk(data);\n                if (chunk.id === MSH_MAT_GROUP) {\n                    this.debugMessage('      Material Group');\n                    this.resetPosition(data);\n                    var group = this.readMaterialGroup(data);\n                    var material = this.materials[group.name];\n                    if (material !== undefined) {\n                        mesh.material = material;\n                        if (material.name === '') {\n                            material.name = mesh.name;\n                        }\n                    }\n                } else {\n                    this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));\n                }\n                this.endChunk(chunk);\n            }\n            this.endChunk(chunk);\n        },\n        readMap: function (data, path) {\n            var chunk = this.readChunk(data);\n            var next = this.nextChunk(data, chunk);\n            var texture = {};\n            var loader = new THREE.TextureLoader(this.manager);\n            loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            while (next !== 0) {\n                if (next === MAT_MAPNAME) {\n                    var name = this.readString(data, 128);\n                    texture = loader.load(name);\n                    this.debugMessage('      File: ' + path + name);\n                } else if (next === MAT_MAP_UOFFSET) {\n                    texture.offset.x = this.readFloat(data);\n                    this.debugMessage('      OffsetX: ' + texture.offset.x);\n                } else if (next === MAT_MAP_VOFFSET) {\n                    texture.offset.y = this.readFloat(data);\n                    this.debugMessage('      OffsetY: ' + texture.offset.y);\n                } else if (next === MAT_MAP_USCALE) {\n                    texture.repeat.x = this.readFloat(data);\n                    this.debugMessage('      RepeatX: ' + texture.repeat.x);\n                } else if (next === MAT_MAP_VSCALE) {\n                    texture.repeat.y = this.readFloat(data);\n                    this.debugMessage('      RepeatY: ' + texture.repeat.y);\n                } else {\n                    this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n                }\n                next = this.nextChunk(data, chunk);\n            }\n            this.endChunk(chunk);\n            return texture;\n        },\n        readMaterialGroup: function (data) {\n            this.readChunk(data);\n            var name = this.readString(data, 64);\n            var numFaces = this.readWord(data);\n            this.debugMessage('         Name: ' + name);\n            this.debugMessage('         Faces: ' + numFaces);\n            var index = [];\n            for (var i = 0; i < numFaces; ++i) {\n                index.push(this.readWord(data));\n            }\n            return {\n                name: name,\n                index: index\n            };\n        },\n        readColor: function (data) {\n            var chunk = this.readChunk(data);\n            var color = new THREE.Color();\n            if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n                var r = this.readByte(data);\n                var g = this.readByte(data);\n                var b = this.readByte(data);\n                color.setRGB(r / 255, g / 255, b / 255);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n                var r = this.readFloat(data);\n                var g = this.readFloat(data);\n                var b = this.readFloat(data);\n                color.setRGB(r, g, b);\n                this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n            } else {\n                this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n            }\n            this.endChunk(chunk);\n            return color;\n        },\n        readChunk: function (data) {\n            var chunk = {};\n            chunk.cur = this.position;\n            chunk.id = this.readWord(data);\n            chunk.size = this.readDWord(data);\n            chunk.end = chunk.cur + chunk.size;\n            chunk.cur += 6;\n            return chunk;\n        },\n        endChunk: function (chunk) {\n            this.position = chunk.end;\n        },\n        nextChunk: function (data, chunk) {\n            if (chunk.cur >= chunk.end) {\n                return 0;\n            }\n            this.position = chunk.cur;\n            try {\n                var next = this.readChunk(data);\n                chunk.cur += next.size;\n                return next.id;\n            } catch (e) {\n                this.debugMessage('Unable to read chunk at ' + this.position);\n                return 0;\n            }\n        },\n        resetPosition: function () {\n            this.position -= 6;\n        },\n        readByte: function (data) {\n            var v = data.getUint8(this.position, true);\n            this.position += 1;\n            return v;\n        },\n        readFloat: function (data) {\n            try {\n                var v = data.getFloat32(this.position, true);\n                this.position += 4;\n                return v;\n            } catch (e) {\n                this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n            }\n        },\n        readInt: function (data) {\n            var v = data.getInt32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readShort: function (data) {\n            var v = data.getInt16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readDWord: function (data) {\n            var v = data.getUint32(this.position, true);\n            this.position += 4;\n            return v;\n        },\n        readWord: function (data) {\n            var v = data.getUint16(this.position, true);\n            this.position += 2;\n            return v;\n        },\n        readString: function (data, maxLength) {\n            var s = '';\n            for (var i = 0; i < maxLength; i++) {\n                var c = this.readByte(data);\n                if (!c) {\n                    break;\n                }\n                s += String.fromCharCode(c);\n            }\n            return s;\n        },\n        debugMessage: function (message) {\n            if (this.debug) {\n                console.log(message);\n            }\n        }\n    });\n    var M3DMAGIC = 19789;\n    var MLIBMAGIC = 15786;\n    var CMAGIC = 49725;\n    var M3D_VERSION = 2;\n    var COLOR_F = 16;\n    var COLOR_24 = 17;\n    var LIN_COLOR_24 = 18;\n    var LIN_COLOR_F = 19;\n    var MDATA = 15677;\n    var MESH_VERSION = 15678;\n    var MASTER_SCALE = 256;\n    var MAT_ENTRY = 45055;\n    var MAT_NAME = 40960;\n    var MAT_AMBIENT = 40976;\n    var MAT_DIFFUSE = 40992;\n    var MAT_SPECULAR = 41008;\n    var MAT_SHININESS = 41024;\n    var MAT_TRANSPARENCY = 41040;\n    var MAT_TWO_SIDE = 41089;\n    var MAT_ADDITIVE = 41091;\n    var MAT_WIRE = 41093;\n    var MAT_WIRE_SIZE = 41095;\n    var MAT_TEXMAP = 41472;\n    var MAT_OPACMAP = 41488;\n    var MAT_BUMPMAP = 41520;\n    var MAT_SPECMAP = 41476;\n    var MAT_MAPNAME = 41728;\n    var MAT_MAP_USCALE = 41812;\n    var MAT_MAP_VSCALE = 41814;\n    var MAT_MAP_UOFFSET = 41816;\n    var MAT_MAP_VOFFSET = 41818;\n    var NAMED_OBJECT = 16384;\n    var N_TRI_OBJECT = 16640;\n    var POINT_ARRAY = 16656;\n    var FACE_ARRAY = 16672;\n    var MSH_MAT_GROUP = 16688;\n    var TEX_VERTS = 16704;\n    var MESH_MATRIX = 16736;\n\n    return TDSLoader;\n});"]}