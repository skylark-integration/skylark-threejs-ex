{"version":3,"sources":["loaders/RGBELoader.js"],"names":["define","THREE","RGBELoader","manager","DataTextureLoader","call","this","type","UnsignedByteType","prototype","Object","assign","create","constructor","parse","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBHalf","floatView","Float32Array","int32View","Int32Array","toHalf","val","x","bits","m","e","sourceArray","sourceOffset","destArray","destOffset","scale","Math","pow","byteArray","Uint8Array","rgbe_header_info","line","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","set","RGBE_ReadPixels_RLE","data","RGBEFormat","FloatType","numElements","floatArray","j","RGBFormat","HalfFloatType","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","texture","texData","encoding","RGBEEncoding","minFilter","NearestFilter","magFilter","generateMipmaps","flipY","LinearEncoding","LinearFilter"],"mappings":"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","file":"../../loaders/RGBELoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t */\n\n\t// https://github.com/mrdoob/three.js/issues/5552\n\t// http://en.wikipedia.org/wiki/RGBE_image_format\n\n\tTHREE.RGBELoader = function ( manager ) {\n\n\t\tTHREE.DataTextureLoader.call( this, manager );\n\n\t\tthis.type = THREE.UnsignedByteType;\n\n\t};\n\n\tTHREE.RGBELoader.prototype = Object.assign( Object.create( THREE.DataTextureLoader.prototype ), {\n\n\t\tconstructor: THREE.RGBELoader,\n\n\t\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\t\tparse: function ( buffer ) {\n\n\t\t\tvar\n\t\t\t\t/* return codes for rgbe routines */\n\t\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t\t/* default error routine.  change this to change error handling */\n\t\t\t\trgbe_read_error = 1,\n\t\t\t\trgbe_write_error = 2,\n\t\t\t\trgbe_format_error = 3,\n\t\t\t\trgbe_memory_error = 4,\n\t\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\t\tcase rgbe_read_error: console.error( \"THREE.RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase rgbe_write_error: console.error( \"THREE.RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase rgbe_format_error: console.error( \"THREE.RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\tcase rgbe_memory_error: console.error( \"THREE.RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t\t}\n\t\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t\t},\n\n\t\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\t\tNEWLINE = \"\\n\",\n\n\t\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t\t;\n\t\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\t\tp += chunkSize;\n\t\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\t\tvar line, match,\n\n\t\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\t\theader = {\n\n\t\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t\t}\n\t\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t\t}\n\t\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn header;\n\n\t\t\t\t},\n\n\t\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t\t;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t\t) {\n\n\t\t\t\t\t\t// return the flat buffer\n\t\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t\t// read in each successive scanline\n\t\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\t\tptr = 0;\n\t\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data_rgba;\n\n\t\t\t\t};\n\n\t\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t\t};\n\n\t\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t\t * by James Tursa?s half-precision code. */\n\t\t\t\tfunction toHalf( val ) {\n\n\t\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t\t * half, return signed zero. */\n\t\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\t\treturn bits;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\t\treturn bits;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t\t * the exponent, which is OK. */\n\t\t\t\t\tbits += m & 1;\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t\t};\n\n\t\t\t} )();\n\n\t\t\tvar byteArray = new Uint8Array( buffer );\n\t\t\tbyteArray.pos = 0;\n\t\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\t\th = rgbe_header_info.height,\n\t\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\t\tcase THREE.UnsignedByteType:\n\n\t\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\t\tvar format = THREE.RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\t\tvar type = THREE.UnsignedByteType;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\t\tvar format = THREE.RGBFormat;\n\t\t\t\t\t\t\tvar type = THREE.FloatType;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\t\tvar format = THREE.RGBFormat;\n\t\t\t\t\t\t\tvar type = THREE.HalfFloatType;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\t\tformat: format,\n\t\t\t\t\t\ttype: type\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tsetDataType: function ( value ) {\n\n\t\t\tthis.type = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\t\tswitch ( texture.type ) {\n\n\t\t\t\t\tcase THREE.UnsignedByteType:\n\n\t\t\t\t\t\ttexture.encoding = THREE.RGBEEncoding;\n\t\t\t\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\t\t\t\ttexture.magFilter = THREE.NearestFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}\n\n\t\t\treturn THREE.DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.RGBELoader;\n});\n"]}