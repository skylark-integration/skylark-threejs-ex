{"version":3,"sources":["loaders/OBJLoader2.js"],"names":["define","THREE","threex","OBJLoader2Parser","MeshReceiver","MaterialHandler","OBJLoader2","manager","Loader","call","this","parser","modelName","instanceNo","baseObject3d","Object3D","materialHandler","meshReceiver","scope","setCallbackOnAssetAvailable","payload","_onAssetAvailable","OBJLOADER2_VERSION","console","info","prototype","Object","assign","create","constructor","setLogging","enabled","debug","setMaterialPerSmoothingGroup","materialPerSmoothingGroup","setUseOAsMesh","useOAsMesh","setUseIndices","useIndices","setDisregardNormals","disregardNormals","setModelName","setBaseObject3d","undefined","addMaterials","materials","overrideExisting","onAssetAvailable","setCallbackOnProgress","onProgress","setCallbackOnError","onError","setCallbackOnLoad","onLoad","setCallbackOnMeshAlter","onMeshAlter","_setCallbacks","callbacks","setCallbackOnLoadMaterials","onLoadMaterials","load","url","onFileLoadProgress","Function","errorMessage","event","currentTarget","statusText","responseURL","urlFull","URL","window","location","href","filename","urlParts","split","length","path","slice","join","numericalValueRef","numericalValue","lengthComputable","loaded","total","output","toFixed","fileLoader","FileLoader","setPath","resourcePath","setResponseType","content","parse","logging","time","createDefaultMaterials","setMaterials","getMaterials","ArrayBuffer","Uint8Array","execute","String","executeLegacy","timeEnd","cmd","type","meshes","buildMeshes","mesh","add","addPayloadMaterials","loaders"],"mappings":"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","file":"../../loaders/OBJLoader2.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './obj2/OBJLoader2Parser',\n    './obj2/shared/MeshReceiver',\n    './obj2/shared/MaterialHandler'\n], function (\n    THREE,\n    threex, \n    OBJLoader2Parser, \n    MeshReceiver, \n    MaterialHandler\n) {\n    'use strict';\n    const OBJLoader2 = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.parser = new OBJLoader2Parser();\n        this.modelName = '';\n        this.instanceNo = 0;\n        this.baseObject3d = new THREE.Object3D();\n        this.materialHandler = new MaterialHandler();\n        this.meshReceiver = new MeshReceiver(this.materialHandler);\n        let scope = this;\n        let defaultOnAssetAvailable = function (payload) {\n            scope._onAssetAvailable(payload);\n        };\n        this.parser.setCallbackOnAssetAvailable(defaultOnAssetAvailable);\n    };\n    OBJLoader2.OBJLOADER2_VERSION = '3.2.0';\n    console.info('Using OBJLoader2 version: ' + OBJLoader2.OBJLOADER2_VERSION);\n    OBJLoader2.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: OBJLoader2,\n        setLogging: function (enabled, debug) {\n            this.parser.setLogging(enabled, debug);\n            return this;\n        },\n        setMaterialPerSmoothingGroup: function (materialPerSmoothingGroup) {\n            this.parser.setMaterialPerSmoothingGroup(materialPerSmoothingGroup);\n            return this;\n        },\n        setUseOAsMesh: function (useOAsMesh) {\n            this.parser.setUseOAsMesh(useOAsMesh);\n            return this;\n        },\n        setUseIndices: function (useIndices) {\n            this.parser.setUseIndices(useIndices);\n            return this;\n        },\n        setDisregardNormals: function (disregardNormals) {\n            this.parser.setDisregardNormals(disregardNormals);\n            return this;\n        },\n        setModelName: function (modelName) {\n            this.modelName = modelName ? modelName : this.modelName;\n            return this;\n        },\n        setBaseObject3d: function (baseObject3d) {\n            this.baseObject3d = baseObject3d === undefined || baseObject3d === null ? this.baseObject3d : baseObject3d;\n            return this;\n        },\n        addMaterials: function (materials, overrideExisting) {\n            this.materialHandler.addMaterials(materials, overrideExisting);\n            return this;\n        },\n        setCallbackOnAssetAvailable: function (onAssetAvailable) {\n            this.parser.setCallbackOnAssetAvailable(onAssetAvailable);\n            return this;\n        },\n        setCallbackOnProgress: function (onProgress) {\n            this.parser.setCallbackOnProgress(onProgress);\n            return this;\n        },\n        setCallbackOnError: function (onError) {\n            this.parser.setCallbackOnError(onError);\n            return this;\n        },\n        setCallbackOnLoad: function (onLoad) {\n            this.parser.setCallbackOnLoad(onLoad);\n            return this;\n        },\n        setCallbackOnMeshAlter: function (onMeshAlter) {\n            this.meshReceiver._setCallbacks(this.parser.callbacks.onProgress, onMeshAlter);\n            return this;\n        },\n        setCallbackOnLoadMaterials: function (onLoadMaterials) {\n            this.materialHandler._setCallbacks(onLoadMaterials);\n            return this;\n        },\n        load: function (url, onLoad, onFileLoadProgress, onError, onMeshAlter) {\n            let scope = this;\n            if (onLoad === null || onLoad === undefined || !(onLoad instanceof Function)) {\n                let errorMessage = 'onLoad is not a function! Aborting...';\n                scope.parser.callbacks.onError(errorMessage);\n                throw errorMessage;\n            } else {\n                this.parser.setCallbackOnLoad(onLoad);\n            }\n            if (onError === null || onError === undefined || !(onError instanceof Function)) {\n                onError = function (event) {\n                    let errorMessage = event;\n                    if (event.currentTarget && event.currentTarget.statusText !== null) {\n                        errorMessage = 'Error occurred while downloading!\\nurl: ' + event.currentTarget.responseURL + '\\nstatus: ' + event.currentTarget.statusText;\n                    }\n                    scope.parser.callbacks.onError(errorMessage);\n                };\n            }\n            if (!url) {\n                onError('An invalid url was provided. Unable to continue!');\n            }\n            let urlFull = new URL(url, window.location.href).href;\n            let filename = urlFull;\n            let urlParts = urlFull.split('/');\n            if (urlParts.length > 2) {\n                filename = urlParts[urlParts.length - 1];\n                this.path = urlParts.slice(0, urlParts.length - 1).join('/') + '/';\n            }\n            if (onFileLoadProgress === null || onFileLoadProgress === undefined || !(onFileLoadProgress instanceof Function)) {\n                let numericalValueRef = 0;\n                let numericalValue = 0;\n                onFileLoadProgress = function (event) {\n                    if (!event.lengthComputable)\n                        return;\n                    numericalValue = event.loaded / event.total;\n                    if (numericalValue > numericalValueRef) {\n                        numericalValueRef = numericalValue;\n                        let output = 'Download of \"' + url + '\": ' + (numericalValue * 100).toFixed(2) + '%';\n                        scope.parser.callbacks.onProgress('progressLoad', output, numericalValue);\n                    }\n                };\n            }\n            this.setCallbackOnMeshAlter(onMeshAlter);\n            let fileLoaderOnLoad = function (content) {\n                scope.parser.callbacks.onLoad(scope.parse(content), 'OBJLoader2#load: Parsing completed');\n            };\n            let fileLoader = new THREE.FileLoader(this.manager);\n            fileLoader.setPath(this.path || this.resourcePath);\n            fileLoader.setResponseType('arraybuffer');\n            fileLoader.load(filename, fileLoaderOnLoad, onFileLoadProgress, onError);\n        },\n        parse: function (content) {\n            if (content === null || content === undefined) {\n                throw 'Provided content is not a valid ArrayBuffer or String. Unable to continue parsing';\n            }\n            if (this.parser.logging.enabled) {\n                console.time('OBJLoader parse: ' + this.modelName);\n            }\n            this.materialHandler.createDefaultMaterials(false);\n            this.parser.setMaterials(this.materialHandler.getMaterials());\n            if (content instanceof ArrayBuffer || content instanceof Uint8Array) {\n                if (this.parser.logging.enabled)\n                    console.info('Parsing arrayBuffer...');\n                this.parser.execute(content);\n            } else if (typeof content === 'string' || content instanceof String) {\n                if (this.parser.logging.enabled)\n                    console.info('Parsing text...');\n                this.parser.executeLegacy(content);\n            } else {\n                this.parser.callbacks.onError('Provided content was neither of type String nor Uint8Array! Aborting...');\n            }\n            if (this.parser.logging.enabled) {\n                console.timeEnd('OBJLoader parse: ' + this.modelName);\n            }\n            return this.baseObject3d;\n        },\n        _onAssetAvailable: function (payload) {\n            if (payload.cmd !== 'assetAvailable')\n                return;\n            if (payload.type === 'mesh') {\n                let meshes = this.meshReceiver.buildMeshes(payload);\n                for (let mesh of meshes) {\n                    this.baseObject3d.add(mesh);\n                }\n            } else if (payload.type === 'material') {\n                this.materialHandler.addPayloadMaterials(payload);\n            }\n        }\n    });\n    return threex.loaders.OBJLoader2 = OBJLoader2;\n});"]}