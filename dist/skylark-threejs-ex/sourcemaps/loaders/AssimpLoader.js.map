{"version":3,"sources":["loaders/AssimpLoader.js"],"names":["define","THREE","threex","AssimpLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","buffer","parse","textureLoader","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","Virtulous","KeyFrame","time","matrix","clone","position","Vector3","quaternion","Quaternion","scale","decompose","lerp","nextKey","l","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","x","y","z","tempAniQuat","set","w","slerp","tempAniMatrix","compose","tempAniScale","Matrix4","KeyFrameTrack","keys","target","length","_accelTable","fps","addKey","key","push","init","sortKeys","j","i","parseFromThree","data","node","track","hierarchy","targets","parseFromCollada","sort","keySortFunc","a","b","t","reTarget","root","compareitor","TrackTargetNodeNameCompare","keySearchAccel","Math","floor","setTime","abs","key0","key1","matrixAutoUpdate","copy","matrixWorldNeedsUpdate","find","name","children","r","Animation","tracks","addTrack","max","n","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","cloneTreeToBones","scene","rootBone","Bone","matrixWorld","nodeCount","toString","nodeToBoneMap","child","add","sortWeights","indexes","weights","pairs","sum","sqrt","findMatchingBone","indexOf","ret","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","mBones","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","findNode","mName","mParent","isBone","threeSkeletonRootBone","toTHREE","threeNode","bone","tbone","mOffsetMatrix","skeleton","Skeleton","bind","material","skinning","mat","mesh","geometry","BufferGeometry","mMaterials","MeshLambertMaterial","setIndex","BufferAttribute","Uint32Array","mIndexArray","setAttribute","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","Float32Array","mTangentBuffer","mBitangentBuffer","bones","mWeights","weight","mVertexId","mWeight","parseInt","_weights","_bones","Mesh","SkinnedMesh","normalizeSkinWeights","aiFace","mNumIndices","mIndices","aiString","str","forEach","String","fromCharCode","replace","aiNode","mTransformation","mNumChildren","mNumMeshes","mMeshes","mChildren","o","Object3D","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","array","Uint8Array","reader","DataView","getFloat32","g","Color","dataAsFloat","dataAsBool","dataAsString","s","dataAsMap","substr","lastIndexOf","namePropMapping","?mat.name","$mat.shadingm","$mat.twosided","$mat.wireframe","$clr.ambient","$clr.diffuse","$clr.specular","$clr.emissive","$clr.transparent","$clr.reflective","$mat.shininess","$mat.reflectivity","$mat.refracti","$tex.file","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","MeshPhongMaterial","prop","map","normalMap","lightMap","alphaMap","ambient","color","veclerp","v1","v2","v","lm1","quatlerp","q1","q2","sampleTrack","lne","mValue","dist","Infinity","timeDist","mTime","dT","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","comp","getLength","apply","pos","rotation","t2","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","e","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","littleEndian","readFloat","dataview","val","readOffset","Read_double","getFloat64","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","c","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","m","elements","i2","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVectorKey","size","ReadBounds","T","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryBone","shortened","ReadArray_aiVertexWeight","ReadBinaryMesh","mNumUVComponents","subArray32","uv","f","Error","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","nd","ReadArray_aiQuatKey","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","ReadBinaryNode","parent","depth","mDepth","node2","mAnimations","mTextures","mLights","mCameras","compressed","aiOrigin_BEG","pFiledata","pScene","versionMajor","versionMinor","versionRevision","compileFlags","k","boneNode","markBones","object","animation","off","ori","buff","bytes","getUint8","start","end","newbuff","slice","subArrayUint16","Uint16Array","subArrayUint8","subArrayUint32","extendStream","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","ArrayBuffer","InternReadFile","loaders"],"mappings":"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","file":"../../loaders/AssimpLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var AssimpLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AssimpLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AssimpLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = scope.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(scope.parse(buffer, path));\n            }, onProgress, onError);\n        },\n        parse: function (buffer, path) {\n            var textureLoader = new THREE.TextureLoader(this.manager);\n            textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            var Virtulous = {};\n            Virtulous.KeyFrame = function (time, matrix) {\n                this.time = time;\n                this.matrix = matrix.clone();\n                this.position = new THREE.Vector3();\n                this.quaternion = new THREE.Quaternion();\n                this.scale = new THREE.Vector3(1, 1, 1);\n                this.matrix.decompose(this.position, this.quaternion, this.scale);\n                this.clone = function () {\n                    var n = new Virtulous.KeyFrame(this.time, this.matrix);\n                    return n;\n                };\n                this.lerp = function (nextKey, time) {\n                    time -= this.time;\n                    var dist = nextKey.time - this.time;\n                    var l = time / dist;\n                    var l2 = 1 - l;\n                    var keypos = this.position;\n                    var keyrot = this.quaternion;\n                    var key2pos = nextKey.position;\n                    var key2rot = nextKey.quaternion;\n                    Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n                    Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n                    Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n                    Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n                    Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n                    return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n                };\n            };\n            Virtulous.KeyFrame.tempAniPos = new THREE.Vector3();\n            Virtulous.KeyFrame.tempAniQuat = new THREE.Quaternion();\n            Virtulous.KeyFrame.tempAniScale = new THREE.Vector3(1, 1, 1);\n            Virtulous.KeyFrame.tempAniMatrix = new THREE.Matrix4();\n            Virtulous.KeyFrameTrack = function () {\n                this.keys = [];\n                this.target = null;\n                this.time = 0;\n                this.length = 0;\n                this._accelTable = {};\n                this.fps = 20;\n                this.addKey = function (key) {\n                    this.keys.push(key);\n                };\n                this.init = function () {\n                    this.sortKeys();\n                    if (this.keys.length > 0)\n                        this.length = this.keys[this.keys.length - 1].time;\n                    else\n                        this.length = 0;\n                    if (!this.fps)\n                        return;\n                    for (var j = 0; j < this.length * this.fps; j++) {\n                        for (var i = 0; i < this.keys.length; i++) {\n                            if (this.keys[i].time == j) {\n                                this._accelTable[j] = i;\n                                break;\n                            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n                                this._accelTable[j] = i;\n                                break;\n                            }\n                        }\n                    }\n                };\n                this.parseFromThree = function (data) {\n                    var fps = data.fps;\n                    this.target = data.node;\n                    var track = data.hierarchy[0].keys;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n                    }\n                    this.init();\n                };\n                this.parseFromCollada = function (data) {\n                    var track = data.keys;\n                    var fps = this.fps;\n                    for (var i = 0; i < track.length; i++) {\n                        this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n                    }\n                    this.init();\n                };\n                this.sortKeys = function () {\n                    this.keys.sort(this.keySortFunc);\n                };\n                this.keySortFunc = function (a, b) {\n                    return a.time - b.time;\n                };\n                this.clone = function () {\n                    var t = new Virtulous.KeyFrameTrack();\n                    t.target = this.target;\n                    t.time = this.time;\n                    t.length = this.length;\n                    for (var i = 0; i < this.keys.length; i++) {\n                        t.addKey(this.keys[i].clone());\n                    }\n                    t.init();\n                    return t;\n                };\n                this.reTarget = function (root, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    this.target = compareitor(root, this.target);\n                };\n                this.keySearchAccel = function (time) {\n                    time *= this.fps;\n                    time = Math.floor(time);\n                    return this._accelTable[time] || 0;\n                };\n                this.setTime = function (time) {\n                    time = Math.abs(time);\n                    if (this.length)\n                        time = time % this.length + 0.05;\n                    var key0 = null;\n                    var key1 = null;\n                    for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {\n                        if (this.keys[i].time == time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i];\n                            break;\n                        } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[i + 1];\n                            break;\n                        } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n                            key0 = this.keys[i];\n                            key1 = this.keys[0].clone();\n                            key1.time += this.length + 0.05;\n                            break;\n                        }\n                    }\n                    if (key0 && key1 && key0 !== key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.lerp(key1, time));\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                    if (key0 && key1 && key0 == key1) {\n                        this.target.matrixAutoUpdate = false;\n                        this.target.matrix.copy(key0.matrix);\n                        this.target.matrixWorldNeedsUpdate = true;\n                        return;\n                    }\n                };\n            };\n            Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n                function find(node, name) {\n                    if (node.name == name)\n                        return node;\n                    for (var i = 0; i < node.children.length; i++) {\n                        var r = find(node.children[i], name);\n                        if (r)\n                            return r;\n                    }\n                    return null;\n                }\n                return find(root, target.name);\n            };\n            Virtulous.Animation = function () {\n                this.tracks = [];\n                this.length = 0;\n                this.addTrack = function (track) {\n                    this.tracks.push(track);\n                    this.length = Math.max(track.length, this.length);\n                };\n                this.setTime = function (time) {\n                    this.time = time;\n                    for (var i = 0; i < this.tracks.length; i++)\n                        this.tracks[i].setTime(time);\n                };\n                this.clone = function (target, compareitor) {\n                    if (!compareitor)\n                        compareitor = Virtulous.TrackTargetNodeNameCompare;\n                    var n = new Virtulous.Animation();\n                    n.target = target;\n                    for (var i = 0; i < this.tracks.length; i++) {\n                        var track = this.tracks[i].clone();\n                        track.reTarget(target, compareitor);\n                        n.addTrack(track);\n                    }\n                    return n;\n                };\n            };\n            var ASSBIN_CHUNK_AICAMERA = 4660;\n            var ASSBIN_CHUNK_AILIGHT = 4661;\n            var ASSBIN_CHUNK_AITEXTURE = 4662;\n            var ASSBIN_CHUNK_AIMESH = 4663;\n            var ASSBIN_CHUNK_AINODEANIM = 4664;\n            var ASSBIN_CHUNK_AISCENE = 4665;\n            var ASSBIN_CHUNK_AIBONE = 4666;\n            var ASSBIN_CHUNK_AIANIMATION = 4667;\n            var ASSBIN_CHUNK_AINODE = 4668;\n            var ASSBIN_CHUNK_AIMATERIAL = 4669;\n            var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n            var ASSBIN_MESH_HAS_POSITIONS = 1;\n            var ASSBIN_MESH_HAS_NORMALS = 2;\n            var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n            var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n            var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n            var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n            var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n            var aiLightSource_DIRECTIONAL = 1;\n            var aiLightSource_SPOT = 3;\n            var aiTextureType_DIFFUSE = 1;\n            var aiTextureType_NORMALS = 6;\n            var aiTextureType_OPACITY = 8;\n            var aiTextureType_LIGHTMAP = 10;\n            var BONESPERVERT = 4;\n            function ASSBIN_MESH_HAS_TEXCOORD(n) {\n                return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n            }\n            function ASSBIN_MESH_HAS_COLOR(n) {\n                return ASSBIN_MESH_HAS_COLOR_BASE << n;\n            }\n            function markBones(scene) {\n                for (var i in scene.mMeshes) {\n                    var mesh = scene.mMeshes[i];\n                    for (var k in mesh.mBones) {\n                        var boneNode = scene.findNode(mesh.mBones[k].mName);\n                        if (boneNode)\n                            boneNode.isBone = true;\n                    }\n                }\n            }\n            function cloneTreeToBones(root, scene) {\n                var rootBone = new THREE.Bone();\n                rootBone.matrix.copy(root.matrix);\n                rootBone.matrixWorld.copy(root.matrixWorld);\n                rootBone.position.copy(root.position);\n                rootBone.quaternion.copy(root.quaternion);\n                rootBone.scale.copy(root.scale);\n                scene.nodeCount++;\n                rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();\n                if (!scene.nodeToBoneMap[root.name])\n                    scene.nodeToBoneMap[root.name] = [];\n                scene.nodeToBoneMap[root.name].push(rootBone);\n                for (var i in root.children) {\n                    var child = cloneTreeToBones(root.children[i], scene);\n                    rootBone.add(child);\n                }\n                return rootBone;\n            }\n            function sortWeights(indexes, weights) {\n                var pairs = [];\n                for (var i = 0; i < indexes.length; i++) {\n                    pairs.push({\n                        i: indexes[i],\n                        w: weights[i]\n                    });\n                }\n                pairs.sort(function (a, b) {\n                    return b.w - a.w;\n                });\n                while (pairs.length < 4) {\n                    pairs.push({\n                        i: 0,\n                        w: 0\n                    });\n                }\n                if (pairs.length > 4)\n                    pairs.length = 4;\n                var sum = 0;\n                for (var i = 0; i < 4; i++) {\n                    sum += pairs[i].w * pairs[i].w;\n                }\n                sum = Math.sqrt(sum);\n                for (var i = 0; i < 4; i++) {\n                    pairs[i].w = pairs[i].w / sum;\n                    indexes[i] = pairs[i].i;\n                    weights[i] = pairs[i].w;\n                }\n            }\n            function findMatchingBone(root, name) {\n                if (root.name.indexOf('bone_' + name) == 0)\n                    return root;\n                for (var i in root.children) {\n                    var ret = findMatchingBone(root.children[i], name);\n                    if (ret)\n                        return ret;\n                }\n                return undefined;\n            }\n            function aiMesh() {\n                this.mPrimitiveTypes = 0;\n                this.mNumVertices = 0;\n                this.mNumFaces = 0;\n                this.mNumBones = 0;\n                this.mMaterialIndex = 0;\n                this.mVertices = [];\n                this.mNormals = [];\n                this.mTangents = [];\n                this.mBitangents = [];\n                this.mColors = [[]];\n                this.mTextureCoords = [[]];\n                this.mFaces = [];\n                this.mBones = [];\n                this.hookupSkeletons = function (scene) {\n                    if (this.mBones.length == 0)\n                        return;\n                    var allBones = [];\n                    var offsetMatrix = [];\n                    var skeletonRoot = scene.findNode(this.mBones[0].mName);\n                    while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n                        skeletonRoot = skeletonRoot.mParent;\n                    }\n                    var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                    var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                    this.threeNode.add(threeSkeletonRootBone);\n                    for (var i = 0; i < this.mBones.length; i++) {\n                        var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                        if (bone) {\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        } else {\n                            var skeletonRoot = scene.findNode(this.mBones[i].mName);\n                            if (!skeletonRoot)\n                                return;\n                            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n                            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n                            this.threeNode.add(threeSkeletonRootBone);\n                            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n                            var tbone = bone;\n                            allBones.push(tbone);\n                            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n                        }\n                    }\n                    var skeleton = new THREE.Skeleton(allBones, offsetMatrix);\n                    this.threeNode.bind(skeleton, new THREE.Matrix4());\n                    this.threeNode.material.skinning = true;\n                };\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var geometry = new THREE.BufferGeometry();\n                    var mat;\n                    if (scene.mMaterials[this.mMaterialIndex])\n                        mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);\n                    else\n                        mat = new THREE.MeshLambertMaterial();\n                    geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n                    geometry.setAttribute('position', new THREE.BufferAttribute(this.mVertexBuffer, 3));\n                    if (this.mNormalBuffer && this.mNormalBuffer.length > 0)\n                        geometry.setAttribute('normal', new THREE.BufferAttribute(this.mNormalBuffer, 3));\n                    if (this.mColorBuffer && this.mColorBuffer.length > 0)\n                        geometry.setAttribute('color', new THREE.BufferAttribute(this.mColorBuffer, 4));\n                    if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0)\n                        geometry.setAttribute('uv', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n                    if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0)\n                        geometry.setAttribute('uv1', new THREE.BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n                    if (this.mTangentBuffer && this.mTangentBuffer.length > 0)\n                        geometry.setAttribute('tangents', new THREE.BufferAttribute(this.mTangentBuffer, 3));\n                    if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0)\n                        geometry.setAttribute('bitangents', new THREE.BufferAttribute(this.mBitangentBuffer, 3));\n                    if (this.mBones.length > 0) {\n                        var weights = [];\n                        var bones = [];\n                        for (var i = 0; i < this.mBones.length; i++) {\n                            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {\n                                var weight = this.mBones[i].mWeights[j];\n                                if (weight) {\n                                    if (!weights[weight.mVertexId])\n                                        weights[weight.mVertexId] = [];\n                                    if (!bones[weight.mVertexId])\n                                        bones[weight.mVertexId] = [];\n                                    weights[weight.mVertexId].push(weight.mWeight);\n                                    bones[weight.mVertexId].push(parseInt(i));\n                                }\n                            }\n                        }\n                        for (var i in bones) {\n                            sortWeights(bones[i], weights[i]);\n                        }\n                        var _weights = [];\n                        var _bones = [];\n                        for (var i = 0; i < weights.length; i++) {\n                            for (var j = 0; j < 4; j++) {\n                                if (weights[i] && bones[i]) {\n                                    _weights.push(weights[i][j]);\n                                    _bones.push(bones[i][j]);\n                                } else {\n                                    _weights.push(0);\n                                    _bones.push(0);\n                                }\n                            }\n                        }\n                        geometry.setAttribute('skinWeight', new THREE.BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n                        geometry.setAttribute('skinIndex', new THREE.BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n                    }\n                    var mesh;\n                    if (this.mBones.length == 0)\n                        mesh = new THREE.Mesh(geometry, mat);\n                    if (this.mBones.length > 0) {\n                        mesh = new THREE.SkinnedMesh(geometry, mat);\n                        mesh.normalizeSkinWeights();\n                    }\n                    this.threeNode = mesh;\n                    return mesh;\n                };\n            }\n            function aiFace() {\n                this.mNumIndices = 0;\n                this.mIndices = [];\n            }\n            function aiVector3D() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.toTHREE = function () {\n                    return new THREE.Vector3(this.x, this.y, this.z);\n                };\n            }\n            function aiColor3D() {\n                this.r = 0;\n                this.g = 0;\n                this.b = 0;\n                this.a = 0;\n                this.toTHREE = function () {\n                    return new THREE.Color(this.r, this.g, this.b);\n                };\n            }\n            function aiQuaternion() {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n                this.w = 0;\n                this.toTHREE = function () {\n                    return new THREE.Quaternion(this.x, this.y, this.z, this.w);\n                };\n            }\n            function aiVertexWeight() {\n                this.mVertexId = 0;\n                this.mWeight = 0;\n            }\n            function aiString() {\n                this.data = [];\n                this.toString = function () {\n                    var str = '';\n                    this.data.forEach(function (i) {\n                        str += String.fromCharCode(i);\n                    });\n                    return str.replace(/[^\\x20-\\x7E]+/g, '');\n                };\n            }\n            function aiVectorKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiQuatKey() {\n                this.mTime = 0;\n                this.mValue = null;\n            }\n            function aiNode() {\n                this.mName = '';\n                this.mTransformation = [];\n                this.mNumChildren = 0;\n                this.mNumMeshes = 0;\n                this.mMeshes = [];\n                this.mChildren = [];\n                this.toTHREE = function (scene) {\n                    if (this.threeNode)\n                        return this.threeNode;\n                    var o = new THREE.Object3D();\n                    o.name = this.mName;\n                    o.matrix = this.mTransformation.toTHREE();\n                    for (var i = 0; i < this.mChildren.length; i++) {\n                        o.add(this.mChildren[i].toTHREE(scene));\n                    }\n                    for (var i = 0; i < this.mMeshes.length; i++) {\n                        o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n                    }\n                    this.threeNode = o;\n                    o.matrix.decompose(o.position, o.quaternion, o.scale);\n                    return o;\n                };\n            }\n            function aiBone() {\n                this.mName = '';\n                this.mNumWeights = 0;\n                this.mOffsetMatrix = 0;\n            }\n            function aiMaterialProperty() {\n                this.mKey = '';\n                this.mSemantic = 0;\n                this.mIndex = 0;\n                this.mData = [];\n                this.mDataLength = 0;\n                this.mType = 0;\n                this.dataAsColor = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    var g = reader.getFloat32(4, true);\n                    var b = reader.getFloat32(8, true);\n                    return new THREE.Color(r, g, b);\n                };\n                this.dataAsFloat = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return r;\n                };\n                this.dataAsBool = function () {\n                    var array = new Uint8Array(this.mData).buffer;\n                    var reader = new DataView(array);\n                    var r = reader.getFloat32(0, true);\n                    return !!r;\n                };\n                this.dataAsString = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    return s.toString();\n                };\n                this.dataAsMap = function () {\n                    var s = new aiString();\n                    s.data = this.mData;\n                    var path = s.toString();\n                    path = path.replace(/\\\\/g, '/');\n                    if (path.indexOf('/') != -1) {\n                        path = path.substr(path.lastIndexOf('/') + 1);\n                    }\n                    return textureLoader.load(path);\n                };\n            }\n            var namePropMapping = {\n                '?mat.name': 'name',\n                '$mat.shadingm': 'shading',\n                '$mat.twosided': 'twoSided',\n                '$mat.wireframe': 'wireframe',\n                '$clr.ambient': 'ambient',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'specular',\n                '$clr.emissive': 'emissive',\n                '$clr.transparent': 'transparent',\n                '$clr.reflective': 'reflect',\n                '$mat.shininess': 'shininess',\n                '$mat.reflectivity': 'reflectivity',\n                '$mat.refracti': 'refraction',\n                '$tex.file': 'map'\n            };\n            var nameTypeMapping = {\n                '?mat.name': 'string',\n                '$mat.shadingm': 'bool',\n                '$mat.twosided': 'bool',\n                '$mat.wireframe': 'bool',\n                '$clr.ambient': 'color',\n                '$clr.diffuse': 'color',\n                '$clr.specular': 'color',\n                '$clr.emissive': 'color',\n                '$clr.transparent': 'color',\n                '$clr.reflective': 'color',\n                '$mat.shininess': 'float',\n                '$mat.reflectivity': 'float',\n                '$mat.refracti': 'float',\n                '$tex.file': 'map'\n            };\n            function aiMaterial() {\n                this.mNumAllocated = 0;\n                this.mNumProperties = 0;\n                this.mProperties = [];\n                this.toTHREE = function () {\n                    var mat = new THREE.MeshPhongMaterial();\n                    for (var i = 0; i < this.mProperties.length; i++) {\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'float')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'color')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'bool')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'string')\n                            mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n                        if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {\n                            var prop = this.mProperties[i];\n                            if (prop.mSemantic == aiTextureType_DIFFUSE)\n                                mat.map = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_NORMALS)\n                                mat.normalMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_LIGHTMAP)\n                                mat.lightMap = this.mProperties[i].dataAsMap();\n                            if (prop.mSemantic == aiTextureType_OPACITY)\n                                mat.alphaMap = this.mProperties[i].dataAsMap();\n                        }\n                    }\n                    mat.ambient.r = 0.53;\n                    mat.ambient.g = 0.53;\n                    mat.ambient.b = 0.53;\n                    mat.color.r = 1;\n                    mat.color.g = 1;\n                    mat.color.b = 1;\n                    return mat;\n                };\n            }\n            function veclerp(v1, v2, l) {\n                var v = new THREE.Vector3();\n                var lm1 = 1 - l;\n                v.x = v1.x * l + v2.x * lm1;\n                v.y = v1.y * l + v2.y * lm1;\n                v.z = v1.z * l + v2.z * lm1;\n                return v;\n            }\n            function quatlerp(q1, q2, l) {\n                return q1.clone().slerp(q2, 1 - l);\n            }\n            function sampleTrack(keys, time, lne, lerp) {\n                if (keys.length == 1)\n                    return keys[0].mValue.toTHREE();\n                var dist = Infinity;\n                var key = null;\n                var nextKey = null;\n                for (var i = 0; i < keys.length; i++) {\n                    var timeDist = Math.abs(keys[i].mTime - time);\n                    if (timeDist < dist && keys[i].mTime <= time) {\n                        dist = timeDist;\n                        key = keys[i];\n                        nextKey = keys[i + 1];\n                    }\n                }\n                if (!key) {\n                    return null;\n                } else if (nextKey) {\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                } else {\n                    nextKey = keys[0].clone();\n                    nextKey.mTime += lne;\n                    var dT = nextKey.mTime - key.mTime;\n                    var T = key.mTime - time;\n                    var l = T / dT;\n                    return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n                }\n            }\n            function aiNodeAnim() {\n                this.mNodeName = '';\n                this.mNumPositionKeys = 0;\n                this.mNumRotationKeys = 0;\n                this.mNumScalingKeys = 0;\n                this.mPositionKeys = [];\n                this.mRotationKeys = [];\n                this.mScalingKeys = [];\n                this.mPreState = '';\n                this.mPostState = '';\n                this.init = function (tps) {\n                    if (!tps)\n                        tps = 1;\n                    function t(t) {\n                        t.mTime /= tps;\n                    }\n                    this.mPositionKeys.forEach(t);\n                    this.mRotationKeys.forEach(t);\n                    this.mScalingKeys.forEach(t);\n                };\n                this.sortKeys = function () {\n                    function comp(a, b) {\n                        return a.mTime - b.mTime;\n                    }\n                    this.mPositionKeys.sort(comp);\n                    this.mRotationKeys.sort(comp);\n                    this.mScalingKeys.sort(comp);\n                };\n                this.getLength = function () {\n                    return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n                        return a.mTime;\n                    })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n                        return a.mTime;\n                    })));\n                };\n                this.toTHREE = function (o) {\n                    this.sortKeys();\n                    var length = this.getLength();\n                    var track = new Virtulous.KeyFrameTrack();\n                    for (var i = 0; i < length; i += 0.05) {\n                        var matrix = new THREE.Matrix4();\n                        var time = i;\n                        var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n                        var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n                        var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n                        matrix.compose(pos, rotation, scale);\n                        var key = new Virtulous.KeyFrame(time, matrix);\n                        track.addKey(key);\n                    }\n                    track.target = o.findNode(this.mNodeName).toTHREE();\n                    var tracks = [track];\n                    if (o.nodeToBoneMap[this.mNodeName]) {\n                        for (var i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n                            var t2 = track.clone();\n                            t2.target = o.nodeToBoneMap[this.mNodeName][i];\n                            tracks.push(t2);\n                        }\n                    }\n                    return tracks;\n                };\n            }\n            function aiAnimation() {\n                this.mName = '';\n                this.mDuration = 0;\n                this.mTicksPerSecond = 0;\n                this.mNumChannels = 0;\n                this.mChannels = [];\n                this.toTHREE = function (root) {\n                    var animationHandle = new Virtulous.Animation();\n                    for (var i in this.mChannels) {\n                        this.mChannels[i].init(this.mTicksPerSecond);\n                        var tracks = this.mChannels[i].toTHREE(root);\n                        for (var j in tracks) {\n                            tracks[j].init();\n                            animationHandle.addTrack(tracks[j]);\n                        }\n                    }\n                    animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n                        return e.length;\n                    }));\n                    return animationHandle;\n                };\n            }\n            function aiTexture() {\n                this.mWidth = 0;\n                this.mHeight = 0;\n                this.texAchFormatHint = [];\n                this.pcData = [];\n            }\n            function aiLight() {\n                this.mName = '';\n                this.mType = 0;\n                this.mAttenuationConstant = 0;\n                this.mAttenuationLinear = 0;\n                this.mAttenuationQuadratic = 0;\n                this.mAngleInnerCone = 0;\n                this.mAngleOuterCone = 0;\n                this.mColorDiffuse = null;\n                this.mColorSpecular = null;\n                this.mColorAmbient = null;\n            }\n            function aiCamera() {\n                this.mName = '';\n                this.mPosition = null;\n                this.mLookAt = null;\n                this.mUp = null;\n                this.mHorizontalFOV = 0;\n                this.mClipPlaneNear = 0;\n                this.mClipPlaneFar = 0;\n                this.mAspect = 0;\n            }\n            function aiScene() {\n                this.versionMajor = 0;\n                this.versionMinor = 0;\n                this.versionRevision = 0;\n                this.compileFlags = 0;\n                this.mFlags = 0;\n                this.mNumMeshes = 0;\n                this.mNumMaterials = 0;\n                this.mNumAnimations = 0;\n                this.mNumTextures = 0;\n                this.mNumLights = 0;\n                this.mNumCameras = 0;\n                this.mRootNode = null;\n                this.mMeshes = [];\n                this.mMaterials = [];\n                this.mAnimations = [];\n                this.mLights = [];\n                this.mCameras = [];\n                this.nodeToBoneMap = {};\n                this.findNode = function (name, root) {\n                    if (!root) {\n                        root = this.mRootNode;\n                    }\n                    if (root.mName == name) {\n                        return root;\n                    }\n                    for (var i = 0; i < root.mChildren.length; i++) {\n                        var ret = this.findNode(name, root.mChildren[i]);\n                        if (ret)\n                            return ret;\n                    }\n                    return null;\n                };\n                this.toTHREE = function () {\n                    this.nodeCount = 0;\n                    markBones(this);\n                    var o = this.mRootNode.toTHREE(this);\n                    for (var i in this.mMeshes)\n                        this.mMeshes[i].hookupSkeletons(this);\n                    if (this.mAnimations.length > 0) {\n                        var a = this.mAnimations[0].toTHREE(this);\n                    }\n                    return {\n                        object: o,\n                        animation: a\n                    };\n                };\n            }\n            function aiMatrix4() {\n                this.elements = [\n                    [],\n                    [],\n                    [],\n                    []\n                ];\n                this.toTHREE = function () {\n                    var m = new THREE.Matrix4();\n                    for (var i = 0; i < 4; ++i) {\n                        for (var i2 = 0; i2 < 4; ++i2) {\n                            m.elements[i * 4 + i2] = this.elements[i2][i];\n                        }\n                    }\n                    return m;\n                };\n            }\n            var littleEndian = true;\n            function readFloat(dataview) {\n                var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_double(dataview) {\n                var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n                dataview.readOffset += 8;\n                return val;\n            }\n            function Read_uint8_t(dataview) {\n                var val = dataview.getUint8(dataview.readOffset);\n                dataview.readOffset += 1;\n                return val;\n            }\n            function Read_uint16_t(dataview) {\n                var val = dataview.getUint16(dataview.readOffset, littleEndian);\n                dataview.readOffset += 2;\n                return val;\n            }\n            function Read_unsigned_int(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_uint32_t(dataview) {\n                var val = dataview.getUint32(dataview.readOffset, littleEndian);\n                dataview.readOffset += 4;\n                return val;\n            }\n            function Read_aiVector3D(stream) {\n                var v = new aiVector3D();\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiColor3D(stream) {\n                var c = new aiColor3D();\n                c.r = readFloat(stream);\n                c.g = readFloat(stream);\n                c.b = readFloat(stream);\n                return c;\n            }\n            function Read_aiQuaternion(stream) {\n                var v = new aiQuaternion();\n                v.w = readFloat(stream);\n                v.x = readFloat(stream);\n                v.y = readFloat(stream);\n                v.z = readFloat(stream);\n                return v;\n            }\n            function Read_aiString(stream) {\n                var s = new aiString();\n                var stringlengthbytes = Read_unsigned_int(stream);\n                stream.ReadBytes(s.data, 1, stringlengthbytes);\n                return s.toString();\n            }\n            function Read_aiVertexWeight(stream) {\n                var w = new aiVertexWeight();\n                w.mVertexId = Read_unsigned_int(stream);\n                w.mWeight = readFloat(stream);\n                return w;\n            }\n            function Read_aiMatrix4x4(stream) {\n                var m = new aiMatrix4();\n                for (var i = 0; i < 4; ++i) {\n                    for (var i2 = 0; i2 < 4; ++i2) {\n                        m.elements[i][i2] = readFloat(stream);\n                    }\n                }\n                return m;\n            }\n            function Read_aiVectorKey(stream) {\n                var v = new aiVectorKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiVector3D(stream);\n                return v;\n            }\n            function Read_aiQuatKey(stream) {\n                var v = new aiQuatKey();\n                v.mTime = Read_double(stream);\n                v.mValue = Read_aiQuaternion(stream);\n                return v;\n            }\n            function ReadArray_aiVertexWeight(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVertexWeight(stream);\n            }\n            function ReadArray_aiVectorKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiVectorKey(stream);\n            }\n            function ReadArray_aiQuatKey(stream, data, size) {\n                for (var i = 0; i < size; i++)\n                    data[i] = Read_aiQuatKey(stream);\n            }\n            function ReadBounds(stream, T, n) {\n                return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n            }\n            function ai_assert(bool) {\n                if (!bool)\n                    throw 'asset failed';\n            }\n            function ReadBinaryNode(stream, parent, depth) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n                Read_uint32_t(stream);\n                var node = new aiNode();\n                node.mParent = parent;\n                node.mDepth = depth;\n                node.mName = Read_aiString(stream);\n                node.mTransformation = Read_aiMatrix4x4(stream);\n                node.mNumChildren = Read_unsigned_int(stream);\n                node.mNumMeshes = Read_unsigned_int(stream);\n                if (node.mNumMeshes) {\n                    node.mMeshes = [];\n                    for (var i = 0; i < node.mNumMeshes; ++i) {\n                        node.mMeshes[i] = Read_unsigned_int(stream);\n                    }\n                }\n                if (node.mNumChildren) {\n                    node.mChildren = [];\n                    for (var i = 0; i < node.mNumChildren; ++i) {\n                        var node2 = ReadBinaryNode(stream, node, depth++);\n                        node.mChildren[i] = node2;\n                    }\n                }\n                return node;\n            }\n            function ReadBinaryBone(stream, b) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n                Read_uint32_t(stream);\n                b.mName = Read_aiString(stream);\n                b.mNumWeights = Read_unsigned_int(stream);\n                b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n                if (shortened) {\n                    ReadBounds(stream, b.mWeights, b.mNumWeights);\n                } else {\n                    b.mWeights = [];\n                    ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n                }\n                return b;\n            }\n            function ReadBinaryMesh(stream, mesh) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n                Read_uint32_t(stream);\n                mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n                mesh.mNumVertices = Read_unsigned_int(stream);\n                mesh.mNumFaces = Read_unsigned_int(stream);\n                mesh.mNumBones = Read_unsigned_int(stream);\n                mesh.mMaterialIndex = Read_unsigned_int(stream);\n                mesh.mNumUVComponents = [];\n                var c = Read_unsigned_int(stream);\n                if (c & ASSBIN_MESH_HAS_POSITIONS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n                    } else {\n                        mesh.mVertices = [];\n                        mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_NORMALS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n                    } else {\n                        mesh.mNormals = [];\n                        mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n                        ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n                    } else {\n                        mesh.mTangents = [];\n                        mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                        mesh.mBitangents = [];\n                        mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n                        stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n                    }\n                }\n                for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_COLOR(n)))\n                        break;\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mColors[n] = [];\n                        mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n                        stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n                    }\n                }\n                mesh.mTexCoordsBuffers = [];\n                for (var n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n                    if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))\n                        break;\n                    mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n                    if (shortened) {\n                        ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n                    } else {\n                        mesh.mTextureCoords[n] = [];\n                        mesh.mTexCoordsBuffers[n] = [];\n                        for (var uv = 0; uv < mesh.mNumVertices; uv++) {\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n                            readFloat(stream);\n                        }\n                    }\n                }\n                if (shortened) {\n                    Read_unsigned_int(stream);\n                } else {\n                    mesh.mFaces = [];\n                    mesh.mIndexArray = [];\n                    for (var i = 0; i < mesh.mNumFaces; ++i) {\n                        var f = mesh.mFaces[i] = new aiFace();\n                        f.mNumIndices = Read_uint16_t(stream);\n                        f.mIndices = [];\n                        for (var a = 0; a < f.mNumIndices; ++a) {\n                            if (mesh.mNumVertices < 1 << 16) {\n                                f.mIndices[a] = Read_uint16_t(stream);\n                            } else {\n                                f.mIndices[a] = Read_unsigned_int(stream);\n                            }\n                        }\n                        if (f.mNumIndices === 3) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                        } else if (f.mNumIndices === 4) {\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                            mesh.mIndexArray.push(f.mIndices[1]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[2]);\n                            mesh.mIndexArray.push(f.mIndices[3]);\n                            mesh.mIndexArray.push(f.mIndices[0]);\n                        } else {\n                            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n                        }\n                    }\n                }\n                if (mesh.mNumBones) {\n                    mesh.mBones = [];\n                    for (var a = 0; a < mesh.mNumBones; ++a) {\n                        mesh.mBones[a] = new aiBone();\n                        ReadBinaryBone(stream, mesh.mBones[a]);\n                    }\n                }\n            }\n            function ReadBinaryMaterialProperty(stream, prop) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n                Read_uint32_t(stream);\n                prop.mKey = Read_aiString(stream);\n                prop.mSemantic = Read_unsigned_int(stream);\n                prop.mIndex = Read_unsigned_int(stream);\n                prop.mDataLength = Read_unsigned_int(stream);\n                prop.mType = Read_unsigned_int(stream);\n                prop.mData = [];\n                stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n            }\n            function ReadBinaryMaterial(stream, mat) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n                Read_uint32_t(stream);\n                mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n                if (mat.mNumProperties) {\n                    if (mat.mProperties) {\n                        delete mat.mProperties;\n                    }\n                    mat.mProperties = [];\n                    for (var i = 0; i < mat.mNumProperties; ++i) {\n                        mat.mProperties[i] = new aiMaterialProperty();\n                        ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n                    }\n                }\n            }\n            function ReadBinaryNodeAnim(stream, nd) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n                Read_uint32_t(stream);\n                nd.mNodeName = Read_aiString(stream);\n                nd.mNumPositionKeys = Read_unsigned_int(stream);\n                nd.mNumRotationKeys = Read_unsigned_int(stream);\n                nd.mNumScalingKeys = Read_unsigned_int(stream);\n                nd.mPreState = Read_unsigned_int(stream);\n                nd.mPostState = Read_unsigned_int(stream);\n                if (nd.mNumPositionKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    } else {\n                        nd.mPositionKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n                    }\n                }\n                if (nd.mNumRotationKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    } else {\n                        nd.mRotationKeys = [];\n                        ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n                    }\n                }\n                if (nd.mNumScalingKeys) {\n                    if (shortened) {\n                        ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    } else {\n                        nd.mScalingKeys = [];\n                        ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n                    }\n                }\n            }\n            function ReadBinaryAnim(stream, anim) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n                Read_uint32_t(stream);\n                anim.mName = Read_aiString(stream);\n                anim.mDuration = Read_double(stream);\n                anim.mTicksPerSecond = Read_double(stream);\n                anim.mNumChannels = Read_unsigned_int(stream);\n                if (anim.mNumChannels) {\n                    anim.mChannels = [];\n                    for (var a = 0; a < anim.mNumChannels; ++a) {\n                        anim.mChannels[a] = new aiNodeAnim();\n                        ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n                    }\n                }\n            }\n            function ReadBinaryTexture(stream, tex) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n                Read_uint32_t(stream);\n                tex.mWidth = Read_unsigned_int(stream);\n                tex.mHeight = Read_unsigned_int(stream);\n                stream.ReadBytes(tex.achFormatHint, 1, 4);\n                if (!shortened) {\n                    if (!tex.mHeight) {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n                    } else {\n                        tex.pcData = [];\n                        stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n                    }\n                }\n            }\n            function ReadBinaryLight(stream, l) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n                Read_uint32_t(stream);\n                l.mName = Read_aiString(stream);\n                l.mType = Read_unsigned_int(stream);\n                if (l.mType != aiLightSource_DIRECTIONAL) {\n                    l.mAttenuationConstant = readFloat(stream);\n                    l.mAttenuationLinear = readFloat(stream);\n                    l.mAttenuationQuadratic = readFloat(stream);\n                }\n                l.mColorDiffuse = Read_aiColor3D(stream);\n                l.mColorSpecular = Read_aiColor3D(stream);\n                l.mColorAmbient = Read_aiColor3D(stream);\n                if (l.mType == aiLightSource_SPOT) {\n                    l.mAngleInnerCone = readFloat(stream);\n                    l.mAngleOuterCone = readFloat(stream);\n                }\n            }\n            function ReadBinaryCamera(stream, cam) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n                Read_uint32_t(stream);\n                cam.mName = Read_aiString(stream);\n                cam.mPosition = Read_aiVector3D(stream);\n                cam.mLookAt = Read_aiVector3D(stream);\n                cam.mUp = Read_aiVector3D(stream);\n                cam.mHorizontalFOV = readFloat(stream);\n                cam.mClipPlaneNear = readFloat(stream);\n                cam.mClipPlaneFar = readFloat(stream);\n                cam.mAspect = readFloat(stream);\n            }\n            function ReadBinaryScene(stream, scene) {\n                var chunkID = Read_uint32_t(stream);\n                ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n                Read_uint32_t(stream);\n                scene.mFlags = Read_unsigned_int(stream);\n                scene.mNumMeshes = Read_unsigned_int(stream);\n                scene.mNumMaterials = Read_unsigned_int(stream);\n                scene.mNumAnimations = Read_unsigned_int(stream);\n                scene.mNumTextures = Read_unsigned_int(stream);\n                scene.mNumLights = Read_unsigned_int(stream);\n                scene.mNumCameras = Read_unsigned_int(stream);\n                scene.mRootNode = new aiNode();\n                scene.mRootNode = ReadBinaryNode(stream, null, 0);\n                if (scene.mNumMeshes) {\n                    scene.mMeshes = [];\n                    for (var i = 0; i < scene.mNumMeshes; ++i) {\n                        scene.mMeshes[i] = new aiMesh();\n                        ReadBinaryMesh(stream, scene.mMeshes[i]);\n                    }\n                }\n                if (scene.mNumMaterials) {\n                    scene.mMaterials = [];\n                    for (var i = 0; i < scene.mNumMaterials; ++i) {\n                        scene.mMaterials[i] = new aiMaterial();\n                        ReadBinaryMaterial(stream, scene.mMaterials[i]);\n                    }\n                }\n                if (scene.mNumAnimations) {\n                    scene.mAnimations = [];\n                    for (var i = 0; i < scene.mNumAnimations; ++i) {\n                        scene.mAnimations[i] = new aiAnimation();\n                        ReadBinaryAnim(stream, scene.mAnimations[i]);\n                    }\n                }\n                if (scene.mNumTextures) {\n                    scene.mTextures = [];\n                    for (var i = 0; i < scene.mNumTextures; ++i) {\n                        scene.mTextures[i] = new aiTexture();\n                        ReadBinaryTexture(stream, scene.mTextures[i]);\n                    }\n                }\n                if (scene.mNumLights) {\n                    scene.mLights = [];\n                    for (var i = 0; i < scene.mNumLights; ++i) {\n                        scene.mLights[i] = new aiLight();\n                        ReadBinaryLight(stream, scene.mLights[i]);\n                    }\n                }\n                if (scene.mNumCameras) {\n                    scene.mCameras = [];\n                    for (var i = 0; i < scene.mNumCameras; ++i) {\n                        scene.mCameras[i] = new aiCamera();\n                        ReadBinaryCamera(stream, scene.mCameras[i]);\n                    }\n                }\n            }\n            var aiOrigin_CUR = 0;\n            var aiOrigin_BEG = 1;\n            function extendStream(stream) {\n                stream.readOffset = 0;\n                stream.Seek = function (off, ori) {\n                    if (ori == aiOrigin_CUR) {\n                        stream.readOffset += off;\n                    }\n                    if (ori == aiOrigin_BEG) {\n                        stream.readOffset = off;\n                    }\n                };\n                stream.ReadBytes = function (buff, size, n) {\n                    var bytes = size * n;\n                    for (var i = 0; i < bytes; i++)\n                        buff[i] = Read_uint8_t(this);\n                };\n                stream.subArray32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Float32Array(newbuff);\n                };\n                stream.subArrayUint16 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint16Array(newbuff);\n                };\n                stream.subArrayUint8 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint8Array(newbuff);\n                };\n                stream.subArrayUint32 = function (start, end) {\n                    var buff = this.buffer;\n                    var newbuff = buff.slice(start, end);\n                    return new Uint32Array(newbuff);\n                };\n            }\n            var shortened, compressed;\n            function InternReadFile(pFiledata) {\n                var pScene = new aiScene();\n                var stream = new DataView(pFiledata);\n                extendStream(stream);\n                stream.Seek(44, aiOrigin_CUR);\n                pScene.versionMajor = Read_unsigned_int(stream);\n                pScene.versionMinor = Read_unsigned_int(stream);\n                pScene.versionRevision = Read_unsigned_int(stream);\n                pScene.compileFlags = Read_unsigned_int(stream);\n                shortened = Read_uint16_t(stream) > 0;\n                compressed = Read_uint16_t(stream) > 0;\n                if (shortened)\n                    throw 'Shortened binaries are not supported!';\n                stream.Seek(256, aiOrigin_CUR);\n                stream.Seek(128, aiOrigin_CUR);\n                stream.Seek(64, aiOrigin_CUR);\n                if (compressed) {\n                    var uncompressedSize = Read_uint32_t(stream);\n                    var compressedSize = stream.FileSize() - stream.Tell();\n                    var compressedData = [];\n                    stream.Read(compressedData, 1, compressedSize);\n                    var uncompressedData = [];\n                    uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n                    var buff = new ArrayBuffer(uncompressedData);\n                    ReadBinaryScene(buff, pScene);\n                } else {\n                    ReadBinaryScene(stream, pScene);\n                }\n                return pScene.toTHREE();\n            }\n            return InternReadFile(buffer);\n        }\n    });\n\n    return threex.loaders.AssimpLoader = AssimpLoader;\n});"]}