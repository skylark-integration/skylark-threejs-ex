{"version":3,"sources":["loaders/DDSLoader.js"],"names":["define","THREE","threex","DDSLoader","manager","CompressedTextureLoader","call","this","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","fourCCToInt32","value","charCodeAt","loadARGBMip","dataOffset","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","header","Int32Array","console","error","fourCC","isRGBAUncompressed","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","String","fromCharCode","RGBAFormat","Math","max","caps2","isCubemap","faces","face","i","length","mipmap","data","push","loaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,GACtBH,EAAMI,wBAAwBC,KAAKC,KAAMH,IAuJ7C,OArJAD,EAAUK,UAAYC,OAAOC,OAAOD,OAAOE,OAAOV,EAAMI,wBAAwBG,YAC5EI,YAAaT,EACbU,MAAO,SAAUC,EAAQC,GACrB,IAAIC,GACAC,WACAC,MAAO,EACPC,OAAQ,EACRC,OAAQ,KACRC,YAAa,GAOjB,SAASC,EAAcC,GACnB,OAAOA,EAAMC,WAAW,IAAMD,EAAMC,WAAW,IAAM,IAAMD,EAAMC,WAAW,IAAM,KAAOD,EAAMC,WAAW,IAAM,IAKpH,SAASC,EAAYX,EAAQY,EAAYR,EAAOC,GAM5C,IALA,IAAIQ,EAAaT,EAAQC,EAAS,EAC9BS,EAAY,IAAIC,WAAWf,EAAQY,EAAYC,GAC/CG,EAAY,IAAID,WAAWF,GAC3BI,EAAM,EACNC,EAAM,EACDC,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,IAAIC,EAAIP,EAAUI,GAEdI,EAAIR,IADRI,GAGIK,EAAIT,IADRI,GAGIM,EAAIV,IADRI,GAEAA,IACAF,EAAUC,GAAOM,EAEjBP,IADAC,GACiBK,EAEjBN,IADAC,GACiBI,EAEjBL,IADAC,GACiBO,EACjBP,IAGR,OAAOD,EAEX,IA+BIS,EA/BAC,EAAclB,EAAc,QAC5BmB,EAAcnB,EAAc,QAC5BoB,EAAcpB,EAAc,QAC5BqB,EAAcrB,EAAc,QAmB5BsB,EAAS,IAAIC,WAAW/B,EAAQ,EAlBd,IAmBtB,GA9DgB,YA8DZ8B,EAlBY,GAoBZ,OADAE,QAAQC,MAAM,8DACP/B,EAEX,GA9DwD,GA8DnD4B,EAhBa,IAkBd,OADAE,QAAQC,MAAM,0EACP/B,EAGX,IA/DuBO,EA+DnByB,EAASJ,EApBM,IAqBfK,GAAqB,EACzB,OAAQD,GACR,KAAKR,EACDD,EAAa,EACbvB,EAAII,OAASnB,EAAMiD,qBACnB,MACJ,KAAKT,EACDF,EAAa,GACbvB,EAAII,OAASnB,EAAMkD,sBACnB,MACJ,KAAKT,EACDH,EAAa,GACbvB,EAAII,OAASnB,EAAMmD,sBACnB,MACJ,KAAKT,EACDJ,EAAa,EACbvB,EAAII,OAASnB,EAAMoD,gBACnB,MACJ,QACI,KAAgC,KAA5BT,EAvCc,KAuC2C,SAAvBA,EAtCvB,KAsCiF,MAAvBA,EArC1D,KAqCiH,IAAvBA,EApC1F,KAoC+I,WAAvBA,EAnCxH,KAyCX,OADAE,QAAQC,MAAM,mDAxFCxB,EAwFgEyB,EAvF5EM,OAAOC,aAAqB,IAARhC,EAAaA,GAAS,EAAI,IAAKA,GAAS,GAAK,IAAKA,GAAS,GAAK,OAwFhFP,EALPiC,GAAqB,EACrBV,EAAa,GACbvB,EAAII,OAASnB,EAAMuD,WAM3BxC,EAAIK,YAAc,EAnG8F,OAoG5GuB,EAvDY,KAuD4C,IAAhB7B,IACxCC,EAAIK,YAAcoC,KAAKC,IAAI,EAAGd,EArDZ,KAuDtB,IAAIe,EAAQf,EA9CI,IAgDhB,GADA5B,EAAI4C,aAtGmB,IAsGPD,GACZ3C,EAAI4C,cAvGiD,KAuGjCD,MAvGoE,KAuG3BA,MAvG8D,KAuGrBA,MAvGwD,KAuGfA,MAvGkD,MAuGTA,MAvG6C,MAuGJA,IAEjO,OADAb,QAAQC,MAAM,mDACP/B,EAEXA,EAAIE,MAAQ0B,EA9DI,GA+DhB5B,EAAIG,OAASyB,EAhEI,GAmEjB,IAFA,IAAIlB,EAAakB,EAnEF,GAmEqB,EAChCiB,EAAQ7C,EAAI4C,UAAY,EAAI,EACvBE,EAAO,EAAGA,EAAOD,EAAOC,IAG7B,IAFA,IAAI5C,EAAQF,EAAIE,MACZC,EAASH,EAAIG,OACR4C,EAAI,EAAGA,EAAI/C,EAAIK,YAAa0C,IAAK,CACtC,GAAId,EACA,IACItB,GADAG,EAAYL,EAAYX,EAAQY,EAAYR,EAAOC,IAC5B6C,WAE3B,CAAIrC,EAAa8B,KAAKC,IAAI,EAAGxC,GAAS,EAAIuC,KAAKC,IAAI,EAAGvC,GAAU,EAAIoB,EAApE,IACIT,EAAY,IAAID,WAAWf,EAAQY,EAAYC,GAEvD,IAAIsC,GACAC,KAAQpC,EACRZ,MAASA,EACTC,OAAUA,GAEdH,EAAIC,QAAQkD,KAAKF,GACjBvC,GAAcC,EACdT,EAAQuC,KAAKC,IAAIxC,GAAS,EAAG,GAC7BC,EAASsC,KAAKC,IAAIvC,GAAU,EAAG,GAGvC,OAAOH,KAGRd,EAAOkE,QAAQjE,UAAYA","file":"../../loaders/DDSLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var DDSLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    DDSLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: DDSLoader,\n        parse: function (buffer, loadMipmaps) {\n            var dds = {\n                mipmaps: [],\n                width: 0,\n                height: 0,\n                format: null,\n                mipmapCount: 1\n            };\n            var DDS_MAGIC = 542327876;\n            var DDSD_CAPS = 1, DDSD_HEIGHT = 2, DDSD_WIDTH = 4, DDSD_PITCH = 8, DDSD_PIXELFORMAT = 4096, DDSD_MIPMAPCOUNT = 131072, DDSD_LINEARSIZE = 524288, DDSD_DEPTH = 8388608;\n            var DDSCAPS_COMPLEX = 8, DDSCAPS_MIPMAP = 4194304, DDSCAPS_TEXTURE = 4096;\n            var DDSCAPS2_CUBEMAP = 512, DDSCAPS2_CUBEMAP_POSITIVEX = 1024, DDSCAPS2_CUBEMAP_NEGATIVEX = 2048, DDSCAPS2_CUBEMAP_POSITIVEY = 4096, DDSCAPS2_CUBEMAP_NEGATIVEY = 8192, DDSCAPS2_CUBEMAP_POSITIVEZ = 16384, DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768, DDSCAPS2_VOLUME = 2097152;\n            var DDPF_ALPHAPIXELS = 1, DDPF_ALPHA = 2, DDPF_FOURCC = 4, DDPF_RGB = 64, DDPF_YUV = 512, DDPF_LUMINANCE = 131072;\n            function fourCCToInt32(value) {\n                return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n            }\n            function int32ToFourCC(value) {\n                return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n            }\n            function loadARGBMip(buffer, dataOffset, width, height) {\n                var dataLength = width * height * 4;\n                var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n                var byteArray = new Uint8Array(dataLength);\n                var dst = 0;\n                var src = 0;\n                for (var y = 0; y < height; y++) {\n                    for (var x = 0; x < width; x++) {\n                        var b = srcBuffer[src];\n                        src++;\n                        var g = srcBuffer[src];\n                        src++;\n                        var r = srcBuffer[src];\n                        src++;\n                        var a = srcBuffer[src];\n                        src++;\n                        byteArray[dst] = r;\n                        dst++;\n                        byteArray[dst] = g;\n                        dst++;\n                        byteArray[dst] = b;\n                        dst++;\n                        byteArray[dst] = a;\n                        dst++;\n                    }\n                }\n                return byteArray;\n            }\n            var FOURCC_DXT1 = fourCCToInt32('DXT1');\n            var FOURCC_DXT3 = fourCCToInt32('DXT3');\n            var FOURCC_DXT5 = fourCCToInt32('DXT5');\n            var FOURCC_ETC1 = fourCCToInt32('ETC1');\n            var headerLengthInt = 31;\n            var off_magic = 0;\n            var off_size = 1;\n            var off_flags = 2;\n            var off_height = 3;\n            var off_width = 4;\n            var off_mipmapCount = 7;\n            var off_pfFlags = 20;\n            var off_pfFourCC = 21;\n            var off_RGBBitCount = 22;\n            var off_RBitMask = 23;\n            var off_GBitMask = 24;\n            var off_BBitMask = 25;\n            var off_ABitMask = 26;\n            var off_caps = 27;\n            var off_caps2 = 28;\n            var off_caps3 = 29;\n            var off_caps4 = 30;\n            var header = new Int32Array(buffer, 0, headerLengthInt);\n            if (header[off_magic] !== DDS_MAGIC) {\n                console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n                return dds;\n            }\n            if (!header[off_pfFlags] & DDPF_FOURCC) {\n                console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n                return dds;\n            }\n            var blockBytes;\n            var fourCC = header[off_pfFourCC];\n            var isRGBAUncompressed = false;\n            switch (fourCC) {\n            case FOURCC_DXT1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_S3TC_DXT1_Format;\n                break;\n            case FOURCC_DXT3:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT3_Format;\n                break;\n            case FOURCC_DXT5:\n                blockBytes = 16;\n                dds.format = THREE.RGBA_S3TC_DXT5_Format;\n                break;\n            case FOURCC_ETC1:\n                blockBytes = 8;\n                dds.format = THREE.RGB_ETC1_Format;\n                break;\n            default:\n                if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n                    isRGBAUncompressed = true;\n                    blockBytes = 64;\n                    dds.format = THREE.RGBAFormat;\n                } else {\n                    console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n                    return dds;\n                }\n            }\n            dds.mipmapCount = 1;\n            if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n                dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n            }\n            var caps2 = header[off_caps2];\n            dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n            if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n                console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n                return dds;\n            }\n            dds.width = header[off_width];\n            dds.height = header[off_height];\n            var dataOffset = header[off_size] + 4;\n            var faces = dds.isCubemap ? 6 : 1;\n            for (var face = 0; face < faces; face++) {\n                var width = dds.width;\n                var height = dds.height;\n                for (var i = 0; i < dds.mipmapCount; i++) {\n                    if (isRGBAUncompressed) {\n                        var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n                        var dataLength = byteArray.length;\n                    } else {\n                        var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n                        var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n                    }\n                    var mipmap = {\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    };\n                    dds.mipmaps.push(mipmap);\n                    dataOffset += dataLength;\n                    width = Math.max(width >> 1, 1);\n                    height = Math.max(height >> 1, 1);\n                }\n            }\n            return dds;\n        }\n    });\n    return threex.loaders.DDSLoader = DDSLoader;\n});"]}