{"version":3,"sources":["loaders/LDrawLoader.js"],"names":["define","THREE","threex","LDrawLoader","tempVec0","Vector3","tempVec1","isPrimitiveType","type","test","LineParser","line","lineNumber","this","lineLength","length","currentCharIndex","currentChar","sortByMaterial","a","b","colourCode","createObject","elements","elementSize","isConditionalSegments","sort","positions","normals","materials","bufferGeometry","BufferGeometry","prevMaterial","index0","numGroupVerts","iElem","nElem","elem","v0","v1","push","x","y","z","v2","n0","faceNormal","n1","n2","material","addGroup","Infinity","setAttribute","Float32BufferAttribute","object3d","LineSegments","Mesh","isConditionalLine","controlArray0","Float32Array","controlArray1","directionArray","i","l","os","c0","c1","index","BufferAttribute","manager","Loader","call","parseScopesStack","subobjectCache","fileMap","setMaterials","parseColourMetaDirective","separateObjects","smoothNormals","prototype","constructor","seekNonSpace","charAt","getToken","pos0","pos1","substring","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","Object","assign","create","load","url","onLoad","onProgress","onError","scope","fileLoader","FileLoader","setPath","path","text","processObject","parse","newParseScopeLevel","getCurrentParseScope","isFromParse","setFileMap","matLib","n","userData","code","topParseScope","newParseScope","lib","subobjects","numSubobjects","subobjectIndex","inverted","category","keywords","currentFileName","mainColourCode","mainEdgeColourCode","currentMatrix","Matrix4","matrix","triangles","lineSegments","conditionalSegments","startingConstructionStep","removeScopeLevel","pop","addMaterial","getMaterial","startsWith","colour","getParentParseScope","lineParser","edgeColour","alpha","isTransparent","luminance","finishType","canHaveEnvMap","edgeMaterial","name","token","toUpperCase","parseInt","isNaN","Math","max","min","MeshStandardMaterial","color","roughness","envMapIntensity","metalness","specular","Color","hsl","getHSL","h","s","setHSL","MeshPhongMaterial","shininess","reflectivity","transparent","premultipliedAlpha","opacity","depthWrite","polygonOffset","polygonOffsetFactor","emissive","set","multiplyScalar","LineBasicMaterial","conditionalEdgeMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","diffuse","value","objectParse","parentParseScope","currentParseScope","indexOf","replace","lines","split","numLines","lineIndex","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","parseColourCode","forEdge","parseVector","lp","v","parseFloat","applyMatrix4","toLowerCase","lineType","meta","groupObject","Group","determinant","console","warn","newKeywords","forEach","keyword","trim","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","fileName","originalFileName","locationState","triedLowerCase","segment","ccw","doubleSided","subVectors","crossVectors","normalize","v3","computeConstructionSteps","model","stepNumber","traverse","c","isGroup","constructionStep","numConstructionSteps","onProcessed","subobject","parseScope","multiplyMatrices","copy","undefined","finishedCount","onSubobjectFinish","hashVertex","hashEdge","hardEdges","Set","halfEdgeList","fullHalfEdgeList","ls","add","tri","i2","l2","next","hash","has","halfEdges","keys","queue","clone","reverseHash","otherTri","abs","dot","i3","otherIndex","otherNext","norm","isRoot","objGroup","decompose","position","quaternion","scale","parentLineSegments","parentConditionalSegments","parentTriangles","finalizeObject","Promise","resolve","then","loadSubobject","cached","subobjectGroup","onSubobjectLoaded","subobjectURL","newLocationState","lastIndexOf","err","onSubobjectError","loaders"],"mappings":"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","file":"../../loaders/LDrawLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var LDrawLoader = function () {\n        var conditionalLineVertShader = `\n\tattribute vec3 control0;\n\tattribute vec3 control1;\n\tattribute vec3 direction;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_vertex>\n\t#include <fog_pars_vertex>\n\t#include <logdepthbuf_pars_vertex>\n\t#include <clipping_planes_pars_vertex>\n\tvoid main() {\n\t\t#include <color_vertex>\n\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t// Transform the line segment ends and control points into camera clip space\n\t\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\n\t\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\n\t\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\n\n\t\tc0.xy /= c0.w;\n\t\tc1.xy /= c1.w;\n\t\tp0.xy /= p0.w;\n\t\tp1.xy /= p1.w;\n\n\t\t// Get the direction of the segment and an orthogonal vector\n\t\tvec2 dir = p1.xy - p0.xy;\n\t\tvec2 norm = vec2( -dir.y, dir.x );\n\n\t\t// Get control point directions from the line\n\t\tvec2 c0dir = c0.xy - p1.xy;\n\t\tvec2 c1dir = c1.xy - p1.xy;\n\n\t\t// If the vectors to the controls points are pointed in different directions away\n\t\t// from the line segment then the line should not be drawn.\n\t\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\n\t\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\n\t\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\n\n\t\t#include <logdepthbuf_vertex>\n\t\t#include <clipping_planes_vertex>\n\t\t#include <fog_vertex>\n\t}\n\t`;\n        var conditionalLineFragShader = `\n\tuniform vec3 diffuse;\n\tuniform float opacity;\n\tvarying float discardFlag;\n\n\t#include <common>\n\t#include <color_pars_fragment>\n\t#include <fog_pars_fragment>\n\t#include <logdepthbuf_pars_fragment>\n\t#include <clipping_planes_pars_fragment>\n\tvoid main() {\n\n\t\tif ( discardFlag > 0.5 ) discard;\n\n\t\t#include <clipping_planes_fragment>\n\t\tvec3 outgoingLight = vec3( 0.0 );\n\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\t#include <logdepthbuf_fragment>\n\t\t#include <color_fragment>\n\t\toutgoingLight = diffuseColor.rgb; // simple shader\n\t\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t\t#include <tonemapping_fragment>\n\t\t#include <encodings_fragment>\n\t\t#include <fog_fragment>\n\t\t#include <premultiplied_alpha_fragment>\n\t}\n\t`;\n        var tempVec0 = new THREE.Vector3();\n        var tempVec1 = new THREE.Vector3();\n        function smoothNormals(triangles, lineSegments) {\n            function hashVertex(v) {\n                var x = ~~(v.x * 100);\n                var y = ~~(v.y * 100);\n                var z = ~~(v.z * 100);\n                return `${ x },${ y },${ z }`;\n            }\n            function hashEdge(v0, v1) {\n                return `${ hashVertex(v0) }_${ hashVertex(v1) }`;\n            }\n            var hardEdges = new Set();\n            var halfEdgeList = {};\n            var fullHalfEdgeList = {};\n            var normals = [];\n            for (var i = 0, l = lineSegments.length; i < l; i++) {\n                var ls = lineSegments[i];\n                var v0 = ls.v0;\n                var v1 = ls.v1;\n                hardEdges.add(hashEdge(v0, v1));\n                hardEdges.add(hashEdge(v1, v0));\n            }\n            for (var i = 0, l = triangles.length; i < l; i++) {\n                var tri = triangles[i];\n                for (var i2 = 0, l2 = 3; i2 < l2; i2++) {\n                    var index = i2;\n                    var next = (i2 + 1) % 3;\n                    var v0 = tri[`v${ index }`];\n                    var v1 = tri[`v${ next }`];\n                    var hash = hashEdge(v0, v1);\n                    if (hardEdges.has(hash))\n                        continue;\n                    halfEdgeList[hash] = tri;\n                    fullHalfEdgeList[hash] = tri;\n                }\n            }\n            while (true) {\n                var halfEdges = Object.keys(halfEdgeList);\n                if (halfEdges.length === 0)\n                    break;\n                var i = 0;\n                var queue = [fullHalfEdgeList[halfEdges[0]]];\n                while (i < queue.length) {\n                    var tri = queue[i];\n                    i++;\n                    var faceNormal = tri.faceNormal;\n                    if (tri.n0 === null) {\n                        tri.n0 = faceNormal.clone();\n                        normals.push(tri.n0);\n                    }\n                    if (tri.n1 === null) {\n                        tri.n1 = faceNormal.clone();\n                        normals.push(tri.n1);\n                    }\n                    if (tri.n2 === null) {\n                        tri.n2 = faceNormal.clone();\n                        normals.push(tri.n2);\n                    }\n                    for (var i2 = 0, l2 = 3; i2 < l2; i2++) {\n                        var index = i2;\n                        var next = (i2 + 1) % 3;\n                        var v0 = tri[`v${ index }`];\n                        var v1 = tri[`v${ next }`];\n                        var hash = hashEdge(v0, v1);\n                        delete halfEdgeList[hash];\n                        var reverseHash = hashEdge(v1, v0);\n                        var otherTri = fullHalfEdgeList[reverseHash];\n                        if (otherTri) {\n                            if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n                                continue;\n                            }\n                            if (reverseHash in halfEdgeList) {\n                                queue.push(otherTri);\n                                delete halfEdgeList[reverseHash];\n                            }\n                            for (var i3 = 0, l3 = 3; i3 < l3; i3++) {\n                                var otherIndex = i3;\n                                var otherNext = (i3 + 1) % 3;\n                                var otherV0 = otherTri[`v${ otherIndex }`];\n                                var otherV1 = otherTri[`v${ otherNext }`];\n                                var otherHash = hashEdge(otherV0, otherV1);\n                                if (otherHash === reverseHash) {\n                                    if (otherTri[`n${ otherIndex }`] === null) {\n                                        var norm = tri[`n${ next }`];\n                                        otherTri[`n${ otherIndex }`] = norm;\n                                        norm.add(otherTri.faceNormal);\n                                    }\n                                    if (otherTri[`n${ otherNext }`] === null) {\n                                        var norm = tri[`n${ index }`];\n                                        otherTri[`n${ otherNext }`] = norm;\n                                        norm.add(otherTri.faceNormal);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (var i = 0, l = normals.length; i < l; i++) {\n                normals[i].normalize();\n            }\n        }\n        function isPrimitiveType(type) {\n            return /primitive/i.test(type) || type === 'Subpart';\n        }\n        function LineParser(line, lineNumber) {\n            this.line = line;\n            this.lineLength = line.length;\n            this.currentCharIndex = 0;\n            this.currentChar = ' ';\n            this.lineNumber = lineNumber;\n        }\n        LineParser.prototype = {\n            constructor: LineParser,\n            seekNonSpace: function () {\n                while (this.currentCharIndex < this.lineLength) {\n                    this.currentChar = this.line.charAt(this.currentCharIndex);\n                    if (this.currentChar !== ' ' && this.currentChar !== '\\t') {\n                        return;\n                    }\n                    this.currentCharIndex++;\n                }\n            },\n            getToken: function () {\n                var pos0 = this.currentCharIndex++;\n                while (this.currentCharIndex < this.lineLength) {\n                    this.currentChar = this.line.charAt(this.currentCharIndex);\n                    if (this.currentChar === ' ' || this.currentChar === '\\t') {\n                        break;\n                    }\n                    this.currentCharIndex++;\n                }\n                var pos1 = this.currentCharIndex;\n                this.seekNonSpace();\n                return this.line.substring(pos0, pos1);\n            },\n            getRemainingString: function () {\n                return this.line.substring(this.currentCharIndex, this.lineLength);\n            },\n            isAtTheEnd: function () {\n                return this.currentCharIndex >= this.lineLength;\n            },\n            setToEnd: function () {\n                this.currentCharIndex = this.lineLength;\n            },\n            getLineNumberString: function () {\n                return this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n            }\n        };\n        function sortByMaterial(a, b) {\n            if (a.colourCode === b.colourCode) {\n                return 0;\n            }\n            if (a.colourCode < b.colourCode) {\n                return -1;\n            }\n            return 1;\n        }\n        function createObject(elements, elementSize, isConditionalSegments) {\n            elements.sort(sortByMaterial);\n            var positions = [];\n            var normals = [];\n            var materials = [];\n            var bufferGeometry = new THREE.BufferGeometry();\n            var prevMaterial = null;\n            var index0 = 0;\n            var numGroupVerts = 0;\n            for (var iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n                var elem = elements[iElem];\n                var v0 = elem.v0;\n                var v1 = elem.v1;\n                positions.push(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n                if (elementSize === 3) {\n                    positions.push(elem.v2.x, elem.v2.y, elem.v2.z);\n                    var n0 = elem.n0 || elem.faceNormal;\n                    var n1 = elem.n1 || elem.faceNormal;\n                    var n2 = elem.n2 || elem.faceNormal;\n                    normals.push(n0.x, n0.y, n0.z);\n                    normals.push(n1.x, n1.y, n1.z);\n                    normals.push(n2.x, n2.y, n2.z);\n                }\n                if (prevMaterial !== elem.material) {\n                    if (prevMaterial !== null) {\n                        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n                    }\n                    materials.push(elem.material);\n                    prevMaterial = elem.material;\n                    index0 = iElem * elementSize;\n                    numGroupVerts = elementSize;\n                } else {\n                    numGroupVerts += elementSize;\n                }\n            }\n            if (numGroupVerts > 0) {\n                bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n            }\n            bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n            if (elementSize === 3) {\n                bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n            }\n            var object3d = null;\n            if (elementSize === 2) {\n                object3d = new THREE.LineSegments(bufferGeometry, materials);\n            } else if (elementSize === 3) {\n                object3d = new THREE.Mesh(bufferGeometry, materials);\n            }\n            if (isConditionalSegments) {\n                object3d.isConditionalLine = true;\n                var controlArray0 = new Float32Array(elements.length * 3 * 2);\n                var controlArray1 = new Float32Array(elements.length * 3 * 2);\n                var directionArray = new Float32Array(elements.length * 3 * 2);\n                for (var i = 0, l = elements.length; i < l; i++) {\n                    var os = elements[i];\n                    var c0 = os.c0;\n                    var c1 = os.c1;\n                    var v0 = os.v0;\n                    var v1 = os.v1;\n                    var index = i * 3 * 2;\n                    controlArray0[index + 0] = c0.x;\n                    controlArray0[index + 1] = c0.y;\n                    controlArray0[index + 2] = c0.z;\n                    controlArray0[index + 3] = c0.x;\n                    controlArray0[index + 4] = c0.y;\n                    controlArray0[index + 5] = c0.z;\n                    controlArray1[index + 0] = c1.x;\n                    controlArray1[index + 1] = c1.y;\n                    controlArray1[index + 2] = c1.z;\n                    controlArray1[index + 3] = c1.x;\n                    controlArray1[index + 4] = c1.y;\n                    controlArray1[index + 5] = c1.z;\n                    directionArray[index + 0] = v1.x - v0.x;\n                    directionArray[index + 1] = v1.y - v0.y;\n                    directionArray[index + 2] = v1.z - v0.z;\n                    directionArray[index + 3] = v1.x - v0.x;\n                    directionArray[index + 4] = v1.y - v0.y;\n                    directionArray[index + 5] = v1.z - v0.z;\n                }\n                bufferGeometry.setAttribute('control0', new THREE.BufferAttribute(controlArray0, 3, false));\n                bufferGeometry.setAttribute('control1', new THREE.BufferAttribute(controlArray1, 3, false));\n                bufferGeometry.setAttribute('direction', new THREE.BufferAttribute(directionArray, 3, false));\n            }\n            return object3d;\n        }\n        function LDrawLoader(manager) {\n            THREE.Loader.call(this, manager);\n            this.parseScopesStack = null;\n            this.materials = [];\n            this.subobjectCache = {};\n            this.fileMap = null;\n            this.setMaterials([\n                this.parseColourMetaDirective(new LineParser('Main_Colour CODE 16 VALUE #FF8080 EDGE #333333')),\n                this.parseColourMetaDirective(new LineParser('Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333'))\n            ]);\n            this.separateObjects = false;\n            this.smoothNormals = true;\n        }\n        LDrawLoader.FINISH_TYPE_DEFAULT = 0;\n        LDrawLoader.FINISH_TYPE_CHROME = 1;\n        LDrawLoader.FINISH_TYPE_PEARLESCENT = 2;\n        LDrawLoader.FINISH_TYPE_RUBBER = 3;\n        LDrawLoader.FINISH_TYPE_MATTE_METALLIC = 4;\n        LDrawLoader.FINISH_TYPE_METAL = 5;\n        LDrawLoader.FILE_LOCATION_AS_IS = 0;\n        LDrawLoader.FILE_LOCATION_TRY_PARTS = 1;\n        LDrawLoader.FILE_LOCATION_TRY_P = 2;\n        LDrawLoader.FILE_LOCATION_TRY_MODELS = 3;\n        LDrawLoader.FILE_LOCATION_TRY_RELATIVE = 4;\n        LDrawLoader.FILE_LOCATION_TRY_ABSOLUTE = 5;\n        LDrawLoader.FILE_LOCATION_NOT_FOUND = 6;\n        LDrawLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: LDrawLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                if (!this.fileMap) {\n                    this.fileMap = {};\n                }\n                var scope = this;\n                var fileLoader = new THREE.FileLoader(this.manager);\n                fileLoader.setPath(this.path);\n                fileLoader.load(url, function (text) {\n                    scope.processObject(text, onLoad, null, url);\n                }, onProgress, onError);\n            },\n            parse: function (text, path, onLoad) {\n                this.processObject(text, onLoad, null, path);\n            },\n            setMaterials: function (materials) {\n                this.parseScopesStack = [];\n                this.newParseScopeLevel(materials);\n                this.getCurrentParseScope().isFromParse = false;\n                this.materials = materials;\n                return this;\n            },\n            setFileMap: function (fileMap) {\n                this.fileMap = fileMap;\n                return this;\n            },\n            newParseScopeLevel: function (materials) {\n                var matLib = {};\n                if (materials) {\n                    for (var i = 0, n = materials.length; i < n; i++) {\n                        var material = materials[i];\n                        matLib[material.userData.code] = material;\n                    }\n                }\n                var topParseScope = this.getCurrentParseScope();\n                var newParseScope = {\n                    lib: matLib,\n                    url: null,\n                    subobjects: null,\n                    numSubobjects: 0,\n                    subobjectIndex: 0,\n                    inverted: false,\n                    category: null,\n                    keywords: null,\n                    currentFileName: null,\n                    mainColourCode: topParseScope ? topParseScope.mainColourCode : '16',\n                    mainEdgeColourCode: topParseScope ? topParseScope.mainEdgeColourCode : '24',\n                    currentMatrix: new THREE.Matrix4(),\n                    matrix: new THREE.Matrix4(),\n                    isFromParse: true,\n                    triangles: null,\n                    lineSegments: null,\n                    conditionalSegments: null,\n                    startingConstructionStep: false\n                };\n                this.parseScopesStack.push(newParseScope);\n                return newParseScope;\n            },\n            removeScopeLevel: function () {\n                this.parseScopesStack.pop();\n                return this;\n            },\n            addMaterial: function (material) {\n                var matLib = this.getCurrentParseScope().lib;\n                if (!matLib[material.userData.code]) {\n                    this.materials.push(material);\n                }\n                matLib[material.userData.code] = material;\n                return this;\n            },\n            getMaterial: function (colourCode) {\n                if (colourCode.startsWith('0x2')) {\n                    var colour = colourCode.substring(3);\n                    return this.parseColourMetaDirective(new LineParser('Direct_Color_' + colour + ' CODE -1 VALUE #' + colour + ' EDGE #' + colour + ''));\n                }\n                for (var i = this.parseScopesStack.length - 1; i >= 0; i--) {\n                    var material = this.parseScopesStack[i].lib[colourCode];\n                    if (material) {\n                        return material;\n                    }\n                }\n                return null;\n            },\n            getParentParseScope: function () {\n                if (this.parseScopesStack.length > 1) {\n                    return this.parseScopesStack[this.parseScopesStack.length - 2];\n                }\n                return null;\n            },\n            getCurrentParseScope: function () {\n                if (this.parseScopesStack.length > 0) {\n                    return this.parseScopesStack[this.parseScopesStack.length - 1];\n                }\n                return null;\n            },\n            parseColourMetaDirective: function (lineParser) {\n                var code = null;\n                var colour = 16711935;\n                var edgeColour = 16711935;\n                var alpha = 1;\n                var isTransparent = false;\n                var luminance = 0;\n                var finishType = LDrawLoader.FINISH_TYPE_DEFAULT;\n                var canHaveEnvMap = true;\n                var edgeMaterial = null;\n                var name = lineParser.getToken();\n                if (!name) {\n                    throw 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.';\n                }\n                var token = null;\n                while (true) {\n                    token = lineParser.getToken();\n                    if (!token) {\n                        break;\n                    }\n                    switch (token.toUpperCase()) {\n                    case 'CODE':\n                        code = lineParser.getToken();\n                        break;\n                    case 'VALUE':\n                        colour = lineParser.getToken();\n                        if (colour.startsWith('0x')) {\n                            colour = '#' + colour.substring(2);\n                        } else if (!colour.startsWith('#')) {\n                            throw 'LDrawLoader: Invalid colour while parsing material' + lineParser.getLineNumberString() + '.';\n                        }\n                        break;\n                    case 'EDGE':\n                        edgeColour = lineParser.getToken();\n                        if (edgeColour.startsWith('0x')) {\n                            edgeColour = '#' + edgeColour.substring(2);\n                        } else if (!edgeColour.startsWith('#')) {\n                            edgeMaterial = this.getMaterial(edgeColour);\n                            if (!edgeMaterial) {\n                                throw 'LDrawLoader: Invalid edge colour while parsing material' + lineParser.getLineNumberString() + '.';\n                            }\n                            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n                        }\n                        break;\n                    case 'ALPHA':\n                        alpha = parseInt(lineParser.getToken());\n                        if (isNaN(alpha)) {\n                            throw 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.';\n                        }\n                        alpha = Math.max(0, Math.min(1, alpha / 255));\n                        if (alpha < 1) {\n                            isTransparent = true;\n                        }\n                        break;\n                    case 'LUMINANCE':\n                        luminance = parseInt(lineParser.getToken());\n                        if (isNaN(luminance)) {\n                            throw 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.';\n                        }\n                        luminance = Math.max(0, Math.min(1, luminance / 255));\n                        break;\n                    case 'CHROME':\n                        finishType = LDrawLoader.FINISH_TYPE_CHROME;\n                        break;\n                    case 'PEARLESCENT':\n                        finishType = LDrawLoader.FINISH_TYPE_PEARLESCENT;\n                        break;\n                    case 'RUBBER':\n                        finishType = LDrawLoader.FINISH_TYPE_RUBBER;\n                        break;\n                    case 'MATTE_METALLIC':\n                        finishType = LDrawLoader.FINISH_TYPE_MATTE_METALLIC;\n                        break;\n                    case 'METAL':\n                        finishType = LDrawLoader.FINISH_TYPE_METAL;\n                        break;\n                    case 'MATERIAL':\n                        lineParser.setToEnd();\n                        break;\n                    default:\n                        throw 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.';\n                        break;\n                    }\n                }\n                var material = null;\n                switch (finishType) {\n                case LDrawLoader.FINISH_TYPE_DEFAULT:\n                    material = new THREE.MeshStandardMaterial({\n                        color: colour,\n                        roughness: 0.3,\n                        envMapIntensity: 0.3,\n                        metalness: 0\n                    });\n                    break;\n                case LDrawLoader.FINISH_TYPE_PEARLESCENT:\n                    var specular = new THREE.Color(colour);\n                    var hsl = specular.getHSL({\n                        h: 0,\n                        s: 0,\n                        l: 0\n                    });\n                    hsl.h = (hsl.h + 0.5) % 1;\n                    hsl.l = Math.min(1, hsl.l + (1 - hsl.l) * 0.7);\n                    specular.setHSL(hsl.h, hsl.s, hsl.l);\n                    material = new THREE.MeshPhongMaterial({\n                        color: colour,\n                        specular: specular,\n                        shininess: 10,\n                        reflectivity: 0.3\n                    });\n                    break;\n                case LDrawLoader.FINISH_TYPE_CHROME:\n                    material = new THREE.MeshStandardMaterial({\n                        color: colour,\n                        roughness: 0,\n                        metalness: 1\n                    });\n                    break;\n                case LDrawLoader.FINISH_TYPE_RUBBER:\n                    material = new THREE.MeshStandardMaterial({\n                        color: colour,\n                        roughness: 0.9,\n                        metalness: 0\n                    });\n                    canHaveEnvMap = false;\n                    break;\n                case LDrawLoader.FINISH_TYPE_MATTE_METALLIC:\n                    material = new THREE.MeshStandardMaterial({\n                        color: colour,\n                        roughness: 0.8,\n                        metalness: 0.4\n                    });\n                    break;\n                case LDrawLoader.FINISH_TYPE_METAL:\n                    material = new THREE.MeshStandardMaterial({\n                        color: colour,\n                        roughness: 0.2,\n                        metalness: 0.85\n                    });\n                    break;\n                default:\n                    break;\n                }\n                material.transparent = isTransparent;\n                material.premultipliedAlpha = true;\n                material.opacity = alpha;\n                material.depthWrite = !isTransparent;\n                material.polygonOffset = true;\n                material.polygonOffsetFactor = 1;\n                material.userData.canHaveEnvMap = canHaveEnvMap;\n                if (luminance !== 0) {\n                    material.emissive.set(material.color).multiplyScalar(luminance);\n                }\n                if (!edgeMaterial) {\n                    edgeMaterial = new THREE.LineBasicMaterial({\n                        color: edgeColour,\n                        transparent: isTransparent,\n                        opacity: alpha,\n                        depthWrite: !isTransparent\n                    });\n                    edgeMaterial.userData.code = code;\n                    edgeMaterial.name = name + ' - Edge';\n                    edgeMaterial.userData.canHaveEnvMap = false;\n                    edgeMaterial.userData.conditionalEdgeMaterial = new THREE.ShaderMaterial({\n                        vertexShader: conditionalLineVertShader,\n                        fragmentShader: conditionalLineFragShader,\n                        uniforms: {\n                            diffuse: { value: new THREE.Color(edgeColour) },\n                            opacity: { value: alpha }\n                        },\n                        transparent: isTransparent,\n                        depthWrite: !isTransparent\n                    });\n                    edgeMaterial.userData.conditionalEdgeMaterial.userData.canHaveEnvMap = false;\n                }\n                material.userData.code = code;\n                material.name = name;\n                material.userData.edgeMaterial = edgeMaterial;\n                return material;\n            },\n            objectParse: function (text) {\n                var parentParseScope = this.getParentParseScope();\n                var mainColourCode = parentParseScope.mainColourCode;\n                var mainEdgeColourCode = parentParseScope.mainEdgeColourCode;\n                var currentParseScope = this.getCurrentParseScope();\n                var triangles;\n                var lineSegments;\n                var conditionalSegments;\n                var subobjects = [];\n                var category = null;\n                var keywords = null;\n                if (text.indexOf('\\r\\n') !== -1) {\n                    text = text.replace(/\\r\\n/g, '\\n');\n                }\n                var lines = text.split('\\n');\n                var numLines = lines.length;\n                var lineIndex = 0;\n                var parsingEmbeddedFiles = false;\n                var currentEmbeddedFileName = null;\n                var currentEmbeddedText = null;\n                var bfcCertified = false;\n                var bfcCCW = true;\n                var bfcInverted = false;\n                var bfcCull = true;\n                var type = '';\n                var startingConstructionStep = false;\n                var scope = this;\n                function parseColourCode(lineParser, forEdge) {\n                    var colourCode = lineParser.getToken();\n                    if (!forEdge && colourCode === '16') {\n                        colourCode = mainColourCode;\n                    }\n                    if (forEdge && colourCode === '24') {\n                        colourCode = mainEdgeColourCode;\n                    }\n                    var material = scope.getMaterial(colourCode);\n                    if (!material) {\n                        throw 'LDrawLoader: Unknown colour code \"' + colourCode + '\" is used' + lineParser.getLineNumberString() + ' but it was not defined previously.';\n                    }\n                    return material;\n                }\n                function parseVector(lp) {\n                    var v = new THREE.Vector3(parseFloat(lp.getToken()), parseFloat(lp.getToken()), parseFloat(lp.getToken()));\n                    if (!scope.separateObjects) {\n                        v.applyMatrix4(currentParseScope.currentMatrix);\n                    }\n                    return v;\n                }\n                for (lineIndex = 0; lineIndex < numLines; lineIndex++) {\n                    var line = lines[lineIndex];\n                    if (line.length === 0)\n                        continue;\n                    if (parsingEmbeddedFiles) {\n                        if (line.startsWith('0 FILE ')) {\n                            this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText;\n                            currentEmbeddedFileName = line.substring(7);\n                            currentEmbeddedText = '';\n                        } else {\n                            currentEmbeddedText += line + '\\n';\n                        }\n                        continue;\n                    }\n                    var lp = new LineParser(line, lineIndex + 1);\n                    lp.seekNonSpace();\n                    if (lp.isAtTheEnd()) {\n                        continue;\n                    }\n                    var lineType = lp.getToken();\n                    switch (lineType) {\n                    case '0':\n                        var meta = lp.getToken();\n                        if (meta) {\n                            switch (meta) {\n                            case '!LDRAW_ORG':\n                                type = lp.getToken();\n                                currentParseScope.triangles = [];\n                                currentParseScope.lineSegments = [];\n                                currentParseScope.conditionalSegments = [];\n                                currentParseScope.type = type;\n                                var isRoot = !parentParseScope.isFromParse;\n                                if (isRoot || scope.separateObjects && !isPrimitiveType(type)) {\n                                    currentParseScope.groupObject = new THREE.Group();\n                                    currentParseScope.groupObject.userData.startingConstructionStep = currentParseScope.startingConstructionStep;\n                                }\n                                var matrix = currentParseScope.matrix;\n                                if (matrix.determinant() < 0 && (scope.separateObjects && isPrimitiveType(type) || !scope.separateObjects)) {\n                                    currentParseScope.inverted = !currentParseScope.inverted;\n                                }\n                                triangles = currentParseScope.triangles;\n                                lineSegments = currentParseScope.lineSegments;\n                                conditionalSegments = currentParseScope.conditionalSegments;\n                                break;\n                            case '!COLOUR':\n                                var material = this.parseColourMetaDirective(lp);\n                                if (material) {\n                                    this.addMaterial(material);\n                                } else {\n                                    console.warn('LDrawLoader: Error parsing material' + lp.getLineNumberString());\n                                }\n                                break;\n                            case '!CATEGORY':\n                                category = lp.getToken();\n                                break;\n                            case '!KEYWORDS':\n                                var newKeywords = lp.getRemainingString().split(',');\n                                if (newKeywords.length > 0) {\n                                    if (!keywords) {\n                                        keywords = [];\n                                    }\n                                    newKeywords.forEach(function (keyword) {\n                                        keywords.push(keyword.trim());\n                                    });\n                                }\n                                break;\n                            case 'FILE':\n                                if (lineIndex > 0) {\n                                    parsingEmbeddedFiles = true;\n                                    currentEmbeddedFileName = lp.getRemainingString();\n                                    currentEmbeddedText = '';\n                                    bfcCertified = false;\n                                    bfcCCW = true;\n                                }\n                                break;\n                            case 'BFC':\n                                while (!lp.isAtTheEnd()) {\n                                    var token = lp.getToken();\n                                    switch (token) {\n                                    case 'CERTIFY':\n                                    case 'NOCERTIFY':\n                                        bfcCertified = token === 'CERTIFY';\n                                        bfcCCW = true;\n                                        break;\n                                    case 'CW':\n                                    case 'CCW':\n                                        bfcCCW = token === 'CCW';\n                                        break;\n                                    case 'INVERTNEXT':\n                                        bfcInverted = true;\n                                        break;\n                                    case 'CLIP':\n                                    case 'NOCLIP':\n                                        bfcCull = token === 'CLIP';\n                                        break;\n                                    default:\n                                        console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                                        break;\n                                    }\n                                }\n                                break;\n                            case 'STEP':\n                                startingConstructionStep = true;\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n                        break;\n                    case '1':\n                        var material = parseColourCode(lp);\n                        var posX = parseFloat(lp.getToken());\n                        var posY = parseFloat(lp.getToken());\n                        var posZ = parseFloat(lp.getToken());\n                        var m0 = parseFloat(lp.getToken());\n                        var m1 = parseFloat(lp.getToken());\n                        var m2 = parseFloat(lp.getToken());\n                        var m3 = parseFloat(lp.getToken());\n                        var m4 = parseFloat(lp.getToken());\n                        var m5 = parseFloat(lp.getToken());\n                        var m6 = parseFloat(lp.getToken());\n                        var m7 = parseFloat(lp.getToken());\n                        var m8 = parseFloat(lp.getToken());\n                        var matrix = new THREE.Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n                        var fileName = lp.getRemainingString().trim().replace(/\\\\/g, '/');\n                        if (scope.fileMap[fileName]) {\n                            fileName = scope.fileMap[fileName];\n                        } else {\n                            if (fileName.startsWith('s/')) {\n                                fileName = 'parts/' + fileName;\n                            } else if (fileName.startsWith('48/')) {\n                                fileName = 'p/' + fileName;\n                            }\n                        }\n                        subobjects.push({\n                            material: material,\n                            matrix: matrix,\n                            fileName: fileName,\n                            originalFileName: fileName,\n                            locationState: LDrawLoader.FILE_LOCATION_AS_IS,\n                            url: null,\n                            triedLowerCase: false,\n                            inverted: bfcInverted !== currentParseScope.inverted,\n                            startingConstructionStep: startingConstructionStep\n                        });\n                        bfcInverted = false;\n                        break;\n                    case '2':\n                        var material = parseColourCode(lp, true);\n                        var segment = {\n                            material: material.userData.edgeMaterial,\n                            colourCode: material.userData.code,\n                            v0: parseVector(lp),\n                            v1: parseVector(lp)\n                        };\n                        lineSegments.push(segment);\n                        break;\n                    case '5':\n                        var material = parseColourCode(lp, true);\n                        var segment = {\n                            material: material.userData.edgeMaterial.userData.conditionalEdgeMaterial,\n                            colourCode: material.userData.code,\n                            v0: parseVector(lp),\n                            v1: parseVector(lp),\n                            c0: parseVector(lp),\n                            c1: parseVector(lp)\n                        };\n                        conditionalSegments.push(segment);\n                        break;\n                    case '3':\n                        var material = parseColourCode(lp);\n                        var inverted = currentParseScope.inverted;\n                        var ccw = bfcCCW !== inverted;\n                        var doubleSided = !bfcCertified || !bfcCull;\n                        var v0, v1, v2, faceNormal;\n                        if (ccw === true) {\n                            v0 = parseVector(lp);\n                            v1 = parseVector(lp);\n                            v2 = parseVector(lp);\n                        } else {\n                            v2 = parseVector(lp);\n                            v1 = parseVector(lp);\n                            v0 = parseVector(lp);\n                        }\n                        tempVec0.subVectors(v1, v0);\n                        tempVec1.subVectors(v2, v1);\n                        faceNormal = new THREE.Vector3().crossVectors(tempVec0, tempVec1).normalize();\n                        triangles.push({\n                            material: material,\n                            colourCode: material.userData.code,\n                            v0: v0,\n                            v1: v1,\n                            v2: v2,\n                            faceNormal: faceNormal,\n                            n0: null,\n                            n1: null,\n                            n2: null\n                        });\n                        if (doubleSided === true) {\n                            triangles.push({\n                                material: material,\n                                colourCode: material.userData.code,\n                                v0: v0,\n                                v1: v2,\n                                v2: v1,\n                                faceNormal: faceNormal,\n                                n0: null,\n                                n1: null,\n                                n2: null\n                            });\n                        }\n                        break;\n                    case '4':\n                        var material = parseColourCode(lp);\n                        var inverted = currentParseScope.inverted;\n                        var ccw = bfcCCW !== inverted;\n                        var doubleSided = !bfcCertified || !bfcCull;\n                        var v0, v1, v2, v3, faceNormal;\n                        if (ccw === true) {\n                            v0 = parseVector(lp);\n                            v1 = parseVector(lp);\n                            v2 = parseVector(lp);\n                            v3 = parseVector(lp);\n                        } else {\n                            v3 = parseVector(lp);\n                            v2 = parseVector(lp);\n                            v1 = parseVector(lp);\n                            v0 = parseVector(lp);\n                        }\n                        tempVec0.subVectors(v1, v0);\n                        tempVec1.subVectors(v2, v1);\n                        faceNormal = new THREE.Vector3().crossVectors(tempVec0, tempVec1).normalize();\n                        triangles.push({\n                            material: material,\n                            colourCode: material.userData.code,\n                            v0: v0,\n                            v1: v1,\n                            v2: v2,\n                            faceNormal: faceNormal,\n                            n0: null,\n                            n1: null,\n                            n2: null\n                        });\n                        triangles.push({\n                            material: material,\n                            colourCode: material.userData.code,\n                            v0: v0,\n                            v1: v2,\n                            v2: v3,\n                            faceNormal: faceNormal,\n                            n0: null,\n                            n1: null,\n                            n2: null\n                        });\n                        if (doubleSided === true) {\n                            triangles.push({\n                                material: material,\n                                colourCode: material.userData.code,\n                                v0: v0,\n                                v1: v2,\n                                v2: v1,\n                                faceNormal: faceNormal,\n                                n0: null,\n                                n1: null,\n                                n2: null\n                            });\n                            triangles.push({\n                                material: material,\n                                colourCode: material.userData.code,\n                                v0: v0,\n                                v1: v3,\n                                v2: v2,\n                                faceNormal: faceNormal,\n                                n0: null,\n                                n1: null,\n                                n2: null\n                            });\n                        }\n                        break;\n                    default:\n                        throw 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.';\n                        break;\n                    }\n                }\n                if (parsingEmbeddedFiles) {\n                    this.subobjectCache[currentEmbeddedFileName.toLowerCase()] = currentEmbeddedText;\n                }\n                currentParseScope.category = category;\n                currentParseScope.keywords = keywords;\n                currentParseScope.subobjects = subobjects;\n                currentParseScope.numSubobjects = subobjects.length;\n                currentParseScope.subobjectIndex = 0;\n            },\n            computeConstructionSteps: function (model) {\n                var stepNumber = 0;\n                model.traverse(c => {\n                    if (c.isGroup) {\n                        if (c.userData.startingConstructionStep) {\n                            stepNumber++;\n                        }\n                        c.userData.constructionStep = stepNumber;\n                    }\n                });\n                model.userData.numConstructionSteps = stepNumber + 1;\n            },\n            processObject: function (text, onProcessed, subobject, url) {\n                var scope = this;\n                var parseScope = scope.newParseScopeLevel();\n                parseScope.url = url;\n                var parentParseScope = scope.getParentParseScope();\n                if (subobject) {\n                    parseScope.currentMatrix.multiplyMatrices(parentParseScope.currentMatrix, subobject.matrix);\n                    parseScope.matrix.copy(subobject.matrix);\n                    parseScope.inverted = subobject.inverted;\n                    parseScope.startingConstructionStep = subobject.startingConstructionStep;\n                }\n                var currentFileName = parentParseScope.currentFileName;\n                if (currentFileName !== null) {\n                    currentFileName = parentParseScope.currentFileName.toLowerCase();\n                }\n                if (scope.subobjectCache[currentFileName] === undefined) {\n                    scope.subobjectCache[currentFileName] = text;\n                }\n                scope.objectParse(text);\n                var finishedCount = 0;\n                onSubobjectFinish();\n                function onSubobjectFinish() {\n                    finishedCount++;\n                    if (finishedCount === parseScope.subobjects.length + 1) {\n                        finalizeObject();\n                    } else {\n                        var subobject = parseScope.subobjects[parseScope.subobjectIndex];\n                        Promise.resolve().then(function () {\n                            loadSubobject(subobject);\n                        });\n                        parseScope.subobjectIndex++;\n                    }\n                }\n                function finalizeObject() {\n                    if (scope.smoothNormals && parseScope.type === 'Part') {\n                        smoothNormals(parseScope.triangles, parseScope.lineSegments);\n                    }\n                    var isRoot = !parentParseScope.isFromParse;\n                    if (scope.separateObjects && !isPrimitiveType(parseScope.type) || isRoot) {\n                        const objGroup = parseScope.groupObject;\n                        if (parseScope.triangles.length > 0) {\n                            objGroup.add(createObject(parseScope.triangles, 3));\n                        }\n                        if (parseScope.lineSegments.length > 0) {\n                            objGroup.add(createObject(parseScope.lineSegments, 2));\n                        }\n                        if (parseScope.conditionalSegments.length > 0) {\n                            objGroup.add(createObject(parseScope.conditionalSegments, 2, true));\n                        }\n                        if (parentParseScope.groupObject) {\n                            objGroup.name = parseScope.fileName;\n                            objGroup.userData.category = parseScope.category;\n                            objGroup.userData.keywords = parseScope.keywords;\n                            parseScope.matrix.decompose(objGroup.position, objGroup.quaternion, objGroup.scale);\n                            parentParseScope.groupObject.add(objGroup);\n                        }\n                    } else {\n                        var separateObjects = scope.separateObjects;\n                        var parentLineSegments = parentParseScope.lineSegments;\n                        var parentConditionalSegments = parentParseScope.conditionalSegments;\n                        var parentTriangles = parentParseScope.triangles;\n                        var lineSegments = parseScope.lineSegments;\n                        var conditionalSegments = parseScope.conditionalSegments;\n                        var triangles = parseScope.triangles;\n                        for (var i = 0, l = lineSegments.length; i < l; i++) {\n                            var ls = lineSegments[i];\n                            if (separateObjects) {\n                                ls.v0.applyMatrix4(parseScope.matrix);\n                                ls.v1.applyMatrix4(parseScope.matrix);\n                            }\n                            parentLineSegments.push(ls);\n                        }\n                        for (var i = 0, l = conditionalSegments.length; i < l; i++) {\n                            var os = conditionalSegments[i];\n                            if (separateObjects) {\n                                os.v0.applyMatrix4(parseScope.matrix);\n                                os.v1.applyMatrix4(parseScope.matrix);\n                                os.c0.applyMatrix4(parseScope.matrix);\n                                os.c1.applyMatrix4(parseScope.matrix);\n                            }\n                            parentConditionalSegments.push(os);\n                        }\n                        for (var i = 0, l = triangles.length; i < l; i++) {\n                            var tri = triangles[i];\n                            if (separateObjects) {\n                                tri.v0 = tri.v0.clone().applyMatrix4(parseScope.matrix);\n                                tri.v1 = tri.v1.clone().applyMatrix4(parseScope.matrix);\n                                tri.v2 = tri.v2.clone().applyMatrix4(parseScope.matrix);\n                                tempVec0.subVectors(tri.v1, tri.v0);\n                                tempVec1.subVectors(tri.v2, tri.v1);\n                                tri.faceNormal.crossVectors(tempVec0, tempVec1).normalize();\n                            }\n                            parentTriangles.push(tri);\n                        }\n                    }\n                    scope.removeScopeLevel();\n                    if (!parentParseScope.isFromParse) {\n                        scope.computeConstructionSteps(parseScope.groupObject);\n                    }\n                    if (onProcessed) {\n                        onProcessed(parseScope.groupObject);\n                    }\n                }\n                function loadSubobject(subobject) {\n                    parseScope.mainColourCode = subobject.material.userData.code;\n                    parseScope.mainEdgeColourCode = subobject.material.userData.edgeMaterial.userData.code;\n                    parseScope.currentFileName = subobject.originalFileName;\n                    var cached = scope.subobjectCache[subobject.originalFileName.toLowerCase()];\n                    if (cached) {\n                        scope.processObject(cached, function (subobjectGroup) {\n                            onSubobjectLoaded(subobjectGroup, subobject);\n                            onSubobjectFinish();\n                        }, subobject, url);\n                        return;\n                    }\n                    var subobjectURL = subobject.fileName;\n                    var newLocationState = LDrawLoader.FILE_LOCATION_NOT_FOUND;\n                    switch (subobject.locationState) {\n                    case LDrawLoader.FILE_LOCATION_AS_IS:\n                        newLocationState = subobject.locationState + 1;\n                        break;\n                    case LDrawLoader.FILE_LOCATION_TRY_PARTS:\n                        subobjectURL = 'parts/' + subobjectURL;\n                        newLocationState = subobject.locationState + 1;\n                        break;\n                    case LDrawLoader.FILE_LOCATION_TRY_P:\n                        subobjectURL = 'p/' + subobjectURL;\n                        newLocationState = subobject.locationState + 1;\n                        break;\n                    case LDrawLoader.FILE_LOCATION_TRY_MODELS:\n                        subobjectURL = 'models/' + subobjectURL;\n                        newLocationState = subobject.locationState + 1;\n                        break;\n                    case LDrawLoader.FILE_LOCATION_TRY_RELATIVE:\n                        subobjectURL = url.substring(0, url.lastIndexOf('/') + 1) + subobjectURL;\n                        newLocationState = subobject.locationState + 1;\n                        break;\n                    case LDrawLoader.FILE_LOCATION_TRY_ABSOLUTE:\n                        if (subobject.triedLowerCase) {\n                            newLocationState = LDrawLoader.FILE_LOCATION_NOT_FOUND;\n                        } else {\n                            subobject.fileName = subobject.fileName.toLowerCase();\n                            subobjectURL = subobject.fileName;\n                            subobject.triedLowerCase = true;\n                            newLocationState = LDrawLoader.FILE_LOCATION_AS_IS;\n                        }\n                        break;\n                    case LDrawLoader.FILE_LOCATION_NOT_FOUND:\n                        console.warn('LDrawLoader: Subobject \"' + subobject.originalFileName + '\" could not be found.');\n                        return;\n                    }\n                    subobject.locationState = newLocationState;\n                    subobject.url = subobjectURL;\n                    var fileLoader = new THREE.FileLoader(scope.manager);\n                    fileLoader.setPath(scope.path);\n                    fileLoader.load(subobjectURL, function (text) {\n                        scope.processObject(text, function (subobjectGroup) {\n                            onSubobjectLoaded(subobjectGroup, subobject);\n                            onSubobjectFinish();\n                        }, subobject, url);\n                    }, undefined, function (err) {\n                        onSubobjectError(err, subobject);\n                    }, subobject);\n                }\n                function onSubobjectLoaded(subobjectGroup, subobject) {\n                    if (subobjectGroup === null) {\n                        loadSubobject(subobject);\n                        return;\n                    }\n                    scope.fileMap[subobject.originalFileName] = subobject.url;\n                }\n                function onSubobjectError(err, subobject) {\n                    loadSubobject(subobject);\n                }\n            }\n        });\n        return LDrawLoader;\n    }();\n\n    return  threex.loaders.LDrawLoader = LDrawLoader;\n});"]}