{"version":3,"sources":["loaders/BVHLoader.js"],"names":["define","THREE","threex","BVHLoader","manager","Loader","call","this","animateBonePositions","animateBoneRotations","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","readFrameData","data","frameTime","bone","type","keyframe","time","position","Vector3","rotation","Quaternion","frames","push","quat","vx","vy","vz","i","channels","length","x","parseFloat","shift","trim","y","z","setFromAxisAngle","Math","PI","multiply","console","warn","children","nextLine","lines","line","bones","error","list","root","readNode","firstline","node","name","tokens","split","toUpperCase","offset","isNaN","numChannels","parseInt","splice","numFrames","readBvh","threeBones","toTHREEBone","source","Bone","add","threeClip","tracks","times","positions","rotations","j","frame","w","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationClip","toTHREEAnimation","skeleton","Skeleton","clip","loaders"],"mappings":"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","file":"../../loaders/BVHLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var BVHLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.animateBonePositions = true;\n        this.animateBoneRotations = true;\n    };\n    BVHLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: BVHLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (text) {\n            function readBvh(lines) {\n                if (nextLine(lines) !== 'HIERARCHY') {\n                    console.error('THREE.BVHLoader: HIERARCHY expected.');\n                }\n                var list = [];\n                var root = readNode(lines, nextLine(lines), list);\n                if (nextLine(lines) !== 'MOTION') {\n                    console.error('THREE.BVHLoader: MOTION expected.');\n                }\n                var tokens = nextLine(lines).split(/[\\s]+/);\n                var numFrames = parseInt(tokens[1]);\n                if (isNaN(numFrames)) {\n                    console.error('THREE.BVHLoader: Failed to read number of frames.');\n                }\n                tokens = nextLine(lines).split(/[\\s]+/);\n                var frameTime = parseFloat(tokens[2]);\n                if (isNaN(frameTime)) {\n                    console.error('THREE.BVHLoader: Failed to read frame time.');\n                }\n                for (var i = 0; i < numFrames; i++) {\n                    tokens = nextLine(lines).split(/[\\s]+/);\n                    readFrameData(tokens, i * frameTime, root);\n                }\n                return list;\n            }\n            function readFrameData(data, frameTime, bone) {\n                if (bone.type === 'ENDSITE')\n                    return;\n                var keyframe = {\n                    time: frameTime,\n                    position: new THREE.Vector3(),\n                    rotation: new THREE.Quaternion()\n                };\n                bone.frames.push(keyframe);\n                var quat = new THREE.Quaternion();\n                var vx = new THREE.Vector3(1, 0, 0);\n                var vy = new THREE.Vector3(0, 1, 0);\n                var vz = new THREE.Vector3(0, 0, 1);\n                for (var i = 0; i < bone.channels.length; i++) {\n                    switch (bone.channels[i]) {\n                    case 'Xposition':\n                        keyframe.position.x = parseFloat(data.shift().trim());\n                        break;\n                    case 'Yposition':\n                        keyframe.position.y = parseFloat(data.shift().trim());\n                        break;\n                    case 'Zposition':\n                        keyframe.position.z = parseFloat(data.shift().trim());\n                        break;\n                    case 'Xrotation':\n                        quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n                        keyframe.rotation.multiply(quat);\n                        break;\n                    case 'Yrotation':\n                        quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n                        keyframe.rotation.multiply(quat);\n                        break;\n                    case 'Zrotation':\n                        quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n                        keyframe.rotation.multiply(quat);\n                        break;\n                    default:\n                        console.warn('THREE.BVHLoader: Invalid channel type.');\n                    }\n                }\n                for (var i = 0; i < bone.children.length; i++) {\n                    readFrameData(data, frameTime, bone.children[i]);\n                }\n            }\n            function readNode(lines, firstline, list) {\n                var node = {\n                    name: '',\n                    type: '',\n                    frames: []\n                };\n                list.push(node);\n                var tokens = firstline.split(/[\\s]+/);\n                if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\n                    node.type = 'ENDSITE';\n                    node.name = 'ENDSITE';\n                } else {\n                    node.name = tokens[1];\n                    node.type = tokens[0].toUpperCase();\n                }\n                if (nextLine(lines) !== '{') {\n                    console.error('THREE.BVHLoader: Expected opening { after type & name');\n                }\n                tokens = nextLine(lines).split(/[\\s]+/);\n                if (tokens[0] !== 'OFFSET') {\n                    console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\n                }\n                if (tokens.length !== 4) {\n                    console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\n                }\n                var offset = new THREE.Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n                if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n                    console.error('THREE.BVHLoader: Invalid values of OFFSET.');\n                }\n                node.offset = offset;\n                if (node.type !== 'ENDSITE') {\n                    tokens = nextLine(lines).split(/[\\s]+/);\n                    if (tokens[0] !== 'CHANNELS') {\n                        console.error('THREE.BVHLoader: Expected CHANNELS definition.');\n                    }\n                    var numChannels = parseInt(tokens[1]);\n                    node.channels = tokens.splice(2, numChannels);\n                    node.children = [];\n                }\n                while (true) {\n                    var line = nextLine(lines);\n                    if (line === '}') {\n                        return node;\n                    } else {\n                        node.children.push(readNode(lines, line, list));\n                    }\n                }\n            }\n            function toTHREEBone(source, list) {\n                var bone = new THREE.Bone();\n                list.push(bone);\n                bone.position.add(source.offset);\n                bone.name = source.name;\n                if (source.type !== 'ENDSITE') {\n                    for (var i = 0; i < source.children.length; i++) {\n                        bone.add(toTHREEBone(source.children[i], list));\n                    }\n                }\n                return bone;\n            }\n            function toTHREEAnimation(bones) {\n                var tracks = [];\n                for (var i = 0; i < bones.length; i++) {\n                    var bone = bones[i];\n                    if (bone.type === 'ENDSITE')\n                        continue;\n                    var times = [];\n                    var positions = [];\n                    var rotations = [];\n                    for (var j = 0; j < bone.frames.length; j++) {\n                        var frame = bone.frames[j];\n                        times.push(frame.time);\n                        positions.push(frame.position.x + bone.offset.x);\n                        positions.push(frame.position.y + bone.offset.y);\n                        positions.push(frame.position.z + bone.offset.z);\n                        rotations.push(frame.rotation.x);\n                        rotations.push(frame.rotation.y);\n                        rotations.push(frame.rotation.z);\n                        rotations.push(frame.rotation.w);\n                    }\n                    if (scope.animateBonePositions) {\n                        tracks.push(new THREE.VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\n                    }\n                    if (scope.animateBoneRotations) {\n                        tracks.push(new THREE.QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\n                    }\n                }\n                return new THREE.AnimationClip('animation', -1, tracks);\n            }\n            function nextLine(lines) {\n                var line;\n                while ((line = lines.shift().trim()).length === 0) {\n                }\n                return line;\n            }\n            var scope = this;\n            var lines = text.split(/[\\r\\n]+/g);\n            var bones = readBvh(lines);\n            var threeBones = [];\n            toTHREEBone(bones[0], threeBones);\n            var threeClip = toTHREEAnimation(bones);\n            return {\n                skeleton: new THREE.Skeleton(threeBones),\n                clip: threeClip\n            };\n        }\n    });\n\n    return threex.loaders.BVHLoader = BVHLoader;\n});"]}