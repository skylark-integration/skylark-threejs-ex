{"version":3,"sources":["loaders/LWOLoader.js"],"names":["define","THREE","threex","LWO2Parser","IFFParser","this","IFF","LWO3Parser","debugger","Debugger","DataViewReader","buffer","dv","DataView","offset","active","depth","formList","isEven","num","stringOffset","string","length","lwoTree","prototype","constructor","parseBlock","reader","closeForms","blockID","getIDTag","getUint32","byteLength","getUint16","dataOffset","parseForm","skipped","skip","parseSurfaceLwo2","parseClipLwo2","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","getVariableLengthIndex","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","h","index","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","undefined","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm","imageMapIndex","parse","tree","materials","layers","tags","textures","currentLayer","parseTopForm","format","parser","endOfFile","[object Object]","type","console","warn","skipForm","parseTextureNodeAttribute","parseEnvelope","parseClip","parseImage","referenceTexture","parseImageStateForm","parseSurfaceForm","parseValueForm","parseSubNode","setupForm","parseConnections","parseEntryForm","parseImageMap","parseXVAL","parseXVAL3","parseUnknownForm","from","to","LoaderUtils","decodeText","Uint8Array","name","surface","connections","source","valueType","getUint64","getFloat64","getFloat64Array","mipMapLevel","maps","map","scale","position","rotation","falloff","amplitude","uTiles","vTiles","setOffset","texture","tag","n_length","endOffset","x","y","z","objectTags","tagString","layer","number","flags","pivot","parsedLength","parent","currentPoints","i","discontinuous","finalOffset","remainingLength","parseUVMapping","parseMorphTargets","uvIndices","polyIndices","uvs","discontinuousUVs","indices","points","morphTargets","polygonDimensions","numverts","j","geometryData","vertexIndices","geometry","getStringArray","parseMaterialIndices","materialIndices","polygonIndex","materialIndex","data","size","error","getUint8","a","littleEndian","firstByte","currentChar","len","split","filter","Boolean","enable","nodeType","repeat","splice","LWOLoader","manager","parameters","Loader","call","resourcePath","LWOTreeParser","textureLoader","MaterialParser","GeometryParser","Object","assign","create","load","url","onLoad","onProgress","onError","self","path","dir","indexOf","substr","extractParentUrl","modelName","pop","loader","FileLoader","setPath","setResponseType","iffBuffer","TextureLoader","setCrossOrigin","crossOrigin","defaultLayerName","meshes","parseLayers","finalMeshes","geometryParser","forEach","mesh","parseMesh","add","applyPivots","getMaterials","userData","matNames","duplicateUVs","Points","LineSegments","Mesh","traverse","child","parentPivot","namesArray","getMaterialByName","mat","spec","color","PointsMaterial","LineBasicMaterial","filtered","m","Array","isArray","material","aoMap","setAttribute","BufferAttribute","uv","array","parseMaterial","parseMaterialLwo2","materialData","params","getSide","flatShading","getSmooth","parseTextureNodes","parseAttributeImageMaps","parseAttributes","parseEnvMap","getMaterialType","MeshPhongMaterial","BackSide","FrontSide","DoubleSide","materialConnections","matNode","getNodeByRefName","envMap","textureNodes","loadTexture","wrapS","getWrappingType","wrapT","roughnessMap","roughness","specularMap","specular","emissiveMap","emissive","metalnessMap","metalness","alphaMap","transparent","normalMap","normalScale","Vector2","bumpMap","attribute","mapData","getTexturePathByIndex","Color","fromArray","Transparency","bumpScale","refractionRatio","parsePhysicalAttributes","parseStandardAttributes","parsePhongAttributes","Clearcoat","clearcoat","clearcoatRoughness","Luminous","emissiveIntensity","Roughness","Metallic","multiplyScalar","reflectivity","combine","AddOperation","setScalar","lerp","clone","shininess","Math","pow","mapping","EquirectangularRefractionMapping","EquirectangularReflectionMapping","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","nodeData","MeshPhysicalMaterial","MeshStandardMaterial","geoData","BufferGeometry","Float32BufferAttribute","splitIndices","setIndex","parseGroups","computeVertexNormals","parseUVs","translate","remappedIndices","dim","k","elemSize","prevMaterialIndex","splitMaterialIndices","indexNum","indexPairs","prevStart","currentCount","currentIndex","addGroup","groups","remappedUVs","count","remappedPoints","slice","morphAttributes","morphPoints","morphIndices","morphTargetsRelative","loaders"],"mappings":"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","file":"../../loaders/LWOLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    function LWO2Parser(IFFParser) {\n        this.IFF = IFFParser;\n    }\n    LWO2Parser.prototype = {\n        constructor: LWO2Parser,\n        parseBlock: function () {\n            this.IFF.debugger.offset = this.IFF.reader.offset;\n            this.IFF.debugger.closeForms();\n            var blockID = this.IFF.reader.getIDTag();\n            var length = this.IFF.reader.getUint32();\n            if (length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset) {\n                this.IFF.reader.offset -= 4;\n                length = this.IFF.reader.getUint16();\n            }\n            this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n            this.IFF.debugger.length = length;\n            switch (blockID) {\n            case 'FORM':\n                this.IFF.parseForm(length);\n                break;\n            case 'ICON':\n            case 'VMPA':\n            case 'BBOX':\n            case 'NORM':\n            case 'PRE ':\n            case 'POST':\n            case 'KEY ':\n            case 'SPAN':\n            case 'TIME':\n            case 'CLRS':\n            case 'CLRA':\n            case 'FILT':\n            case 'DITH':\n            case 'CONT':\n            case 'BRIT':\n            case 'SATR':\n            case 'HUE ':\n            case 'GAMM':\n            case 'NEGA':\n            case 'IFLT':\n            case 'PFLT':\n            case 'PROJ':\n            case 'AXIS':\n            case 'AAST':\n            case 'PIXB':\n            case 'AUVO':\n            case 'STCK':\n            case 'PROC':\n            case 'VALU':\n            case 'FUNC':\n            case 'PNAM':\n            case 'INAM':\n            case 'GRST':\n            case 'GREN':\n            case 'GRPT':\n            case 'FKEY':\n            case 'IKEY':\n            case 'CSYS':\n            case 'OPAQ':\n            case 'CMAP':\n            case 'NLOC':\n            case 'NZOM':\n            case 'NVER':\n            case 'NSRV':\n            case 'NVSK':\n            case 'NCRD':\n            case 'WRPW':\n            case 'WRPH':\n            case 'NMOD':\n            case 'NPRW':\n            case 'NPLA':\n            case 'NODS':\n            case 'VERS':\n            case 'ENUM':\n            case 'TAG ':\n            case 'OPAC':\n            case 'CGMD':\n            case 'CGTY':\n            case 'CGST':\n            case 'CGEN':\n            case 'CGTS':\n            case 'CGTE':\n            case 'OSMP':\n            case 'OMDE':\n            case 'OUTR':\n            case 'FLAG':\n            case 'TRNL':\n            case 'GLOW':\n            case 'GVAL':\n            case 'SHRP':\n            case 'RFOP':\n            case 'RSAN':\n            case 'TROP':\n            case 'RBLR':\n            case 'TBLR':\n            case 'CLRH':\n            case 'CLRF':\n            case 'ADTR':\n            case 'LINE':\n            case 'ALPH':\n            case 'VCOL':\n            case 'ENAB':\n                this.IFF.debugger.skipped = true;\n                this.IFF.reader.skip(length);\n                break;\n            case 'SURF':\n                this.IFF.parseSurfaceLwo2(length);\n                break;\n            case 'CLIP':\n                this.IFF.parseClipLwo2(length);\n                break;\n            case 'IPIX':\n            case 'IMIP':\n            case 'IMOD':\n            case 'AMOD':\n            case 'IINV':\n            case 'INCR':\n            case 'IAXS':\n            case 'IFOT':\n            case 'ITIM':\n            case 'IWRL':\n            case 'IUTI':\n            case 'IINX':\n            case 'IINY':\n            case 'IINZ':\n            case 'IREF':\n                if (length === 4)\n                    this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();\n                else\n                    this.IFF.reader.skip(length);\n                break;\n            case 'OTAG':\n                this.IFF.parseObjectTag();\n                break;\n            case 'LAYR':\n                this.IFF.parseLayer(length);\n                break;\n            case 'PNTS':\n                this.IFF.parsePoints(length);\n                break;\n            case 'VMAP':\n                this.IFF.parseVertexMapping(length);\n                break;\n            case 'AUVU':\n            case 'AUVN':\n                this.IFF.reader.skip(length - 1);\n                this.IFF.reader.getVariableLengthIndex();\n                break;\n            case 'POLS':\n                this.IFF.parsePolygonList(length);\n                break;\n            case 'TAGS':\n                this.IFF.parseTagStrings(length);\n                break;\n            case 'PTAG':\n                this.IFF.parsePolygonTagMapping(length);\n                break;\n            case 'VMAD':\n                this.IFF.parseVertexMapping(length, true);\n                break;\n            case 'DESC':\n                this.IFF.currentForm.description = this.IFF.reader.getString();\n                break;\n            case 'TEXT':\n            case 'CMNT':\n            case 'NCOM':\n                this.IFF.currentForm.comment = this.IFF.reader.getString();\n                break;\n            case 'NAME':\n                this.IFF.currentForm.channelName = this.IFF.reader.getString();\n                break;\n            case 'WRAP':\n                this.IFF.currentForm.wrap = {\n                    w: this.IFF.reader.getUint16(),\n                    h: this.IFF.reader.getUint16()\n                };\n                break;\n            case 'IMAG':\n                var index = this.IFF.reader.getVariableLengthIndex();\n                this.IFF.currentForm.imageIndex = index;\n                break;\n            case 'OREF':\n                this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n                break;\n            case 'ROID':\n                this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n                break;\n            case 'SSHN':\n                this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n                break;\n            case 'AOVN':\n                this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n                break;\n            case 'NSTA':\n                this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n                break;\n            case 'NRNM':\n                this.IFF.currentForm.realName = this.IFF.reader.getString();\n                break;\n            case 'NNME':\n                this.IFF.currentForm.refName = this.IFF.reader.getString();\n                this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n                break;\n            case 'INME':\n                if (!this.IFF.currentForm.nodeName)\n                    this.IFF.currentForm.nodeName = [];\n                this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n                break;\n            case 'IINN':\n                if (!this.IFF.currentForm.inputNodeName)\n                    this.IFF.currentForm.inputNodeName = [];\n                this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n                break;\n            case 'IINM':\n                if (!this.IFF.currentForm.inputName)\n                    this.IFF.currentForm.inputName = [];\n                this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n                break;\n            case 'IONM':\n                if (!this.IFF.currentForm.inputOutputName)\n                    this.IFF.currentForm.inputOutputName = [];\n                this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n                break;\n            case 'FNAM':\n                this.IFF.currentForm.fileName = this.IFF.reader.getString();\n                break;\n            case 'CHAN':\n                if (length === 4)\n                    this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();\n                else\n                    this.IFF.reader.skip(length);\n                break;\n            case 'SMAN':\n                var maxSmoothingAngle = this.IFF.reader.getFloat32();\n                this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n                break;\n            case 'COLR':\n                this.IFF.currentSurface.attributes.undefined = { value: this.IFF.reader.getFloat32Array(3) };\n                this.IFF.reader.skip(2);\n                break;\n            case 'LUMI':\n                this.IFF.currentSurface.attributes.Luminosity = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'SPEC':\n                this.IFF.currentSurface.attributes.Specular = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'DIFF':\n                this.IFF.currentSurface.attributes.Diffuse = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'REFL':\n                this.IFF.currentSurface.attributes.Reflection = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'GLOS':\n                this.IFF.currentSurface.attributes.Glossiness = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'TRAN':\n                this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n                this.IFF.reader.skip(2);\n                break;\n            case 'BUMP':\n                this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n                this.IFF.reader.skip(2);\n                break;\n            case 'SIDE':\n                this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n                break;\n            case 'RIMG':\n                this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n                break;\n            case 'RIND':\n                this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n                this.IFF.reader.skip(2);\n                break;\n            case 'TIMG':\n                this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n                break;\n            case 'IMAP':\n                this.IFF.reader.skip(2);\n                break;\n            case 'TMAP':\n                this.IFF.debugger.skipped = true;\n                this.IFF.reader.skip(length);\n                break;\n            case 'IUVI':\n                this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n                break;\n            case 'IUTL':\n                this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n                break;\n            case 'IVTL':\n                this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n                break;\n            case 'BLOK':\n                break;\n            default:\n                this.IFF.parseUnknownCHUNK(blockID, length);\n            }\n            if (blockID != 'FORM') {\n                this.IFF.debugger.node = 1;\n                this.IFF.debugger.nodeID = blockID;\n                this.IFF.debugger.log();\n            }\n            if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n                this.IFF.currentForm = this.IFF.parentForm;\n            }\n        }\n    };\n    function LWO3Parser(IFFParser) {\n        this.IFF = IFFParser;\n    }\n    LWO3Parser.prototype = {\n        constructor: LWO3Parser,\n        parseBlock: function () {\n            this.IFF.debugger.offset = this.IFF.reader.offset;\n            this.IFF.debugger.closeForms();\n            var blockID = this.IFF.reader.getIDTag();\n            var length = this.IFF.reader.getUint32();\n            this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n            this.IFF.debugger.length = length;\n            switch (blockID) {\n            case 'FORM':\n                this.IFF.parseForm(length);\n                break;\n            case 'ICON':\n            case 'VMPA':\n            case 'BBOX':\n            case 'NORM':\n            case 'PRE ':\n            case 'POST':\n            case 'KEY ':\n            case 'SPAN':\n            case 'TIME':\n            case 'CLRS':\n            case 'CLRA':\n            case 'FILT':\n            case 'DITH':\n            case 'CONT':\n            case 'BRIT':\n            case 'SATR':\n            case 'HUE ':\n            case 'GAMM':\n            case 'NEGA':\n            case 'IFLT':\n            case 'PFLT':\n            case 'PROJ':\n            case 'AXIS':\n            case 'AAST':\n            case 'PIXB':\n            case 'STCK':\n            case 'VALU':\n            case 'PNAM':\n            case 'INAM':\n            case 'GRST':\n            case 'GREN':\n            case 'GRPT':\n            case 'FKEY':\n            case 'IKEY':\n            case 'CSYS':\n            case 'OPAQ':\n            case 'CMAP':\n            case 'NLOC':\n            case 'NZOM':\n            case 'NVER':\n            case 'NSRV':\n            case 'NCRD':\n            case 'NMOD':\n            case 'NSEL':\n            case 'NPRW':\n            case 'NPLA':\n            case 'VERS':\n            case 'ENUM':\n            case 'TAG ':\n            case 'CGMD':\n            case 'CGTY':\n            case 'CGST':\n            case 'CGEN':\n            case 'CGTS':\n            case 'CGTE':\n            case 'OSMP':\n            case 'OMDE':\n            case 'OUTR':\n            case 'FLAG':\n            case 'TRNL':\n            case 'SHRP':\n            case 'RFOP':\n            case 'RSAN':\n            case 'TROP':\n            case 'RBLR':\n            case 'TBLR':\n            case 'CLRH':\n            case 'CLRF':\n            case 'ADTR':\n            case 'GLOW':\n            case 'LINE':\n            case 'ALPH':\n            case 'VCOL':\n            case 'ENAB':\n                this.IFF.debugger.skipped = true;\n                this.IFF.reader.skip(length);\n                break;\n            case 'IPIX':\n            case 'IMIP':\n            case 'IMOD':\n            case 'AMOD':\n            case 'IINV':\n            case 'INCR':\n            case 'IAXS':\n            case 'IFOT':\n            case 'ITIM':\n            case 'IWRL':\n            case 'IUTI':\n            case 'IINX':\n            case 'IINY':\n            case 'IINZ':\n            case 'IREF':\n                if (length === 4)\n                    this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();\n                else\n                    this.IFF.reader.skip(length);\n                break;\n            case 'OTAG':\n                this.IFF.parseObjectTag();\n                break;\n            case 'LAYR':\n                this.IFF.parseLayer(length);\n                break;\n            case 'PNTS':\n                this.IFF.parsePoints(length);\n                break;\n            case 'VMAP':\n                this.IFF.parseVertexMapping(length);\n                break;\n            case 'POLS':\n                this.IFF.parsePolygonList(length);\n                break;\n            case 'TAGS':\n                this.IFF.parseTagStrings(length);\n                break;\n            case 'PTAG':\n                this.IFF.parsePolygonTagMapping(length);\n                break;\n            case 'VMAD':\n                this.IFF.parseVertexMapping(length, true);\n                break;\n            case 'DESC':\n                this.IFF.currentForm.description = this.IFF.reader.getString();\n                break;\n            case 'TEXT':\n            case 'CMNT':\n            case 'NCOM':\n                this.IFF.currentForm.comment = this.IFF.reader.getString();\n                break;\n            case 'NAME':\n                this.IFF.currentForm.channelName = this.IFF.reader.getString();\n                break;\n            case 'WRAP':\n                this.IFF.currentForm.wrap = {\n                    w: this.IFF.reader.getUint16(),\n                    h: this.IFF.reader.getUint16()\n                };\n                break;\n            case 'IMAG':\n                var index = this.IFF.reader.getVariableLengthIndex();\n                this.IFF.currentForm.imageIndex = index;\n                break;\n            case 'OREF':\n                this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n                break;\n            case 'ROID':\n                this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n                break;\n            case 'SSHN':\n                this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n                break;\n            case 'AOVN':\n                this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n                break;\n            case 'NSTA':\n                this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n                break;\n            case 'NRNM':\n                this.IFF.currentForm.realName = this.IFF.reader.getString();\n                break;\n            case 'NNME':\n                this.IFF.currentForm.refName = this.IFF.reader.getString();\n                this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n                break;\n            case 'INME':\n                if (!this.IFF.currentForm.nodeName)\n                    this.IFF.currentForm.nodeName = [];\n                this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n                break;\n            case 'IINN':\n                if (!this.IFF.currentForm.inputNodeName)\n                    this.IFF.currentForm.inputNodeName = [];\n                this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n                break;\n            case 'IINM':\n                if (!this.IFF.currentForm.inputName)\n                    this.IFF.currentForm.inputName = [];\n                this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n                break;\n            case 'IONM':\n                if (!this.IFF.currentForm.inputOutputName)\n                    this.IFF.currentForm.inputOutputName = [];\n                this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n                break;\n            case 'FNAM':\n                this.IFF.currentForm.fileName = this.IFF.reader.getString();\n                break;\n            case 'CHAN':\n                if (length === 4)\n                    this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();\n                else\n                    this.IFF.reader.skip(length);\n                break;\n            case 'SMAN':\n                var maxSmoothingAngle = this.IFF.reader.getFloat32();\n                this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n                break;\n            case 'COLR':\n                this.IFF.currentSurface.attributes.undefined = { value: this.IFF.reader.getFloat32Array(3) };\n                this.IFF.reader.skip(2);\n                break;\n            case 'LUMI':\n                this.IFF.currentSurface.attributes.Luminosity = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'SPEC':\n                this.IFF.currentSurface.attributes.Specular = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'DIFF':\n                this.IFF.currentSurface.attributes.Diffuse = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'REFL':\n                this.IFF.currentSurface.attributes.Reflection = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'GLOS':\n                this.IFF.currentSurface.attributes.Glossiness = { value: this.IFF.reader.getFloat32() };\n                this.IFF.reader.skip(2);\n                break;\n            case 'TRAN':\n                this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n                this.IFF.reader.skip(2);\n                break;\n            case 'BUMP':\n                this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n                this.IFF.reader.skip(2);\n                break;\n            case 'SIDE':\n                this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n                break;\n            case 'RIMG':\n                this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n                break;\n            case 'RIND':\n                this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n                this.IFF.reader.skip(2);\n                break;\n            case 'TIMG':\n                this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n                break;\n            case 'IMAP':\n                this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n                break;\n            case 'IUVI':\n                this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n                break;\n            case 'IUTL':\n                this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n                break;\n            case 'IVTL':\n                this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n                break;\n            default:\n                this.IFF.parseUnknownCHUNK(blockID, length);\n            }\n            if (blockID != 'FORM') {\n                this.IFF.debugger.node = 1;\n                this.IFF.debugger.nodeID = blockID;\n                this.IFF.debugger.log();\n            }\n            if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n                this.IFF.currentForm = this.IFF.parentForm;\n            }\n        }\n    };\n    function IFFParser() {\n        this.debugger = new Debugger();\n    }\n    IFFParser.prototype = {\n        constructor: IFFParser,\n        parse: function (buffer) {\n            this.reader = new DataViewReader(buffer);\n            this.tree = {\n                materials: {},\n                layers: [],\n                tags: [],\n                textures: []\n            };\n            this.currentLayer = this.tree;\n            this.currentForm = this.tree;\n            this.parseTopForm();\n            if (this.tree.format === undefined)\n                return;\n            if (this.tree.format === 'LWO2') {\n                this.parser = new LWO2Parser(this);\n                while (!this.reader.endOfFile())\n                    this.parser.parseBlock();\n            } else if (this.tree.format === 'LWO3') {\n                this.parser = new LWO3Parser(this);\n                while (!this.reader.endOfFile())\n                    this.parser.parseBlock();\n            }\n            this.debugger.offset = this.reader.offset;\n            this.debugger.closeForms();\n            return this.tree;\n        },\n        parseTopForm() {\n            this.debugger.offset = this.reader.offset;\n            var topForm = this.reader.getIDTag();\n            if (topForm !== 'FORM') {\n                console.warn('LWOLoader: Top-level FORM missing.');\n                return;\n            }\n            var length = this.reader.getUint32();\n            this.debugger.dataOffset = this.reader.offset;\n            this.debugger.length = length;\n            var type = this.reader.getIDTag();\n            if (type === 'LWO2') {\n                this.tree.format = type;\n            } else if (type === 'LWO3') {\n                this.tree.format = type;\n            }\n            this.debugger.node = 0;\n            this.debugger.nodeID = type;\n            this.debugger.log();\n            return;\n        },\n        parseForm(length) {\n            var type = this.reader.getIDTag();\n            switch (type) {\n            case 'ISEQ':\n            case 'ANIM':\n            case 'STCC':\n            case 'VPVL':\n            case 'VPRM':\n            case 'NROT':\n            case 'WRPW':\n            case 'WRPH':\n            case 'FUNC':\n            case 'FALL':\n            case 'OPAC':\n            case 'GRAD':\n            case 'ENVS':\n            case 'VMOP':\n            case 'VMBG':\n            case 'OMAX':\n            case 'STEX':\n            case 'CKBG':\n            case 'CKEY':\n            case 'VMLA':\n            case 'VMLB':\n                this.debugger.skipped = true;\n                this.skipForm(length);\n                break;\n            case 'META':\n            case 'NNDS':\n            case 'NODS':\n            case 'NDTA':\n            case 'ADAT':\n            case 'AOVS':\n            case 'BLOK':\n            case 'IBGC':\n            case 'IOPC':\n            case 'IIMG':\n            case 'TXTR':\n                this.debugger.length = 4;\n                this.debugger.skipped = true;\n                break;\n            case 'IFAL':\n            case 'ISCL':\n            case 'IPOS':\n            case 'IROT':\n            case 'IBMP':\n            case 'IUTD':\n            case 'IVTD':\n                this.parseTextureNodeAttribute(type);\n                break;\n            case 'ENVL':\n                this.parseEnvelope(length);\n                break;\n            case 'CLIP':\n                if (this.tree.format === 'LWO2') {\n                    this.parseForm(length);\n                } else {\n                    this.parseClip(length);\n                }\n                break;\n            case 'STIL':\n                this.parseImage();\n                break;\n            case 'XREF':\n                this.reader.skip(8);\n                this.currentForm.referenceTexture = {\n                    index: this.reader.getUint32(),\n                    refName: this.reader.getString()\n                };\n                break;\n            case 'IMST':\n                this.parseImageStateForm(length);\n                break;\n            case 'SURF':\n                this.parseSurfaceForm(length);\n                break;\n            case 'VALU':\n                this.parseValueForm(length);\n                break;\n            case 'NTAG':\n                this.parseSubNode(length);\n                break;\n            case 'ATTR':\n            case 'SATR':\n                this.setupForm('attributes', length);\n                break;\n            case 'NCON':\n                this.parseConnections(length);\n                break;\n            case 'SSHA':\n                this.parentForm = this.currentForm;\n                this.currentForm = this.currentSurface;\n                this.setupForm('surfaceShader', length);\n                break;\n            case 'SSHD':\n                this.setupForm('surfaceShaderData', length);\n                break;\n            case 'ENTR':\n                this.parseEntryForm(length);\n                break;\n            case 'IMAP':\n                this.parseImageMap(length);\n                break;\n            case 'TAMP':\n                this.parseXVAL('amplitude', length);\n                break;\n            case 'TMAP':\n                this.setupForm('textureMap', length);\n                break;\n            case 'CNTR':\n                this.parseXVAL3('center', length);\n                break;\n            case 'SIZE':\n                this.parseXVAL3('scale', length);\n                break;\n            case 'ROTA':\n                this.parseXVAL3('rotation', length);\n                break;\n            default:\n                this.parseUnknownForm(type, length);\n            }\n            this.debugger.node = 0;\n            this.debugger.nodeID = type;\n            this.debugger.log();\n        },\n        setupForm(type, length) {\n            if (!this.currentForm)\n                this.currentForm = this.currentNode;\n            this.currentFormEnd = this.reader.offset + length;\n            this.parentForm = this.currentForm;\n            if (!this.currentForm[type]) {\n                this.currentForm[type] = {};\n                this.currentForm = this.currentForm[type];\n            } else {\n                console.warn('LWOLoader: form already exists on parent: ', type, this.currentForm);\n                this.currentForm = this.currentForm[type];\n            }\n        },\n        skipForm(length) {\n            this.reader.skip(length - 4);\n        },\n        parseUnknownForm(type, length) {\n            console.warn('LWOLoader: unknown FORM encountered: ' + type, length);\n            printBuffer(this.reader.dv.buffer, this.reader.offset, length - 4);\n            this.reader.skip(length - 4);\n        },\n        parseSurfaceForm(length) {\n            this.reader.skip(8);\n            var name = this.reader.getString();\n            var surface = {\n                attributes: {},\n                connections: {},\n                name: name,\n                inputName: name,\n                nodes: {},\n                source: this.reader.getString()\n            };\n            this.tree.materials[name] = surface;\n            this.currentSurface = surface;\n            this.parentForm = this.tree.materials;\n            this.currentForm = surface;\n            this.currentFormEnd = this.reader.offset + length;\n        },\n        parseSurfaceLwo2(length) {\n            var name = this.reader.getString();\n            var surface = {\n                attributes: {},\n                connections: {},\n                name: name,\n                nodes: {},\n                source: this.reader.getString()\n            };\n            this.tree.materials[name] = surface;\n            this.currentSurface = surface;\n            this.parentForm = this.tree.materials;\n            this.currentForm = surface;\n            this.currentFormEnd = this.reader.offset + length;\n        },\n        parseSubNode(length) {\n            this.reader.skip(8);\n            var name = this.reader.getString();\n            var node = { name: name };\n            this.currentForm = node;\n            this.currentNode = node;\n            this.currentFormEnd = this.reader.offset + length;\n        },\n        parseConnections(length) {\n            this.currentFormEnd = this.reader.offset + length;\n            this.parentForm = this.currentForm;\n            this.currentForm = this.currentSurface.connections;\n        },\n        parseEntryForm(length) {\n            this.reader.skip(8);\n            var name = this.reader.getString();\n            this.currentForm = this.currentNode.attributes;\n            this.setupForm(name, length);\n        },\n        parseValueForm() {\n            this.reader.skip(8);\n            var valueType = this.reader.getString();\n            if (valueType === 'double') {\n                this.currentForm.value = this.reader.getUint64();\n            } else if (valueType === 'int') {\n                this.currentForm.value = this.reader.getUint32();\n            } else if (valueType === 'vparam') {\n                this.reader.skip(24);\n                this.currentForm.value = this.reader.getFloat64();\n            } else if (valueType === 'vparam3') {\n                this.reader.skip(24);\n                this.currentForm.value = this.reader.getFloat64Array(3);\n            }\n        },\n        parseImageStateForm() {\n            this.reader.skip(8);\n            this.currentForm.mipMapLevel = this.reader.getFloat32();\n        },\n        parseImageMap(length) {\n            this.currentFormEnd = this.reader.offset + length;\n            this.parentForm = this.currentForm;\n            if (!this.currentForm.maps)\n                this.currentForm.maps = [];\n            var map = {};\n            this.currentForm.maps.push(map);\n            this.currentForm = map;\n            this.reader.skip(10);\n        },\n        parseTextureNodeAttribute(type) {\n            this.reader.skip(28);\n            this.reader.skip(20);\n            switch (type) {\n            case 'ISCL':\n                this.currentNode.scale = this.reader.getFloat32Array(3);\n                break;\n            case 'IPOS':\n                this.currentNode.position = this.reader.getFloat32Array(3);\n                break;\n            case 'IROT':\n                this.currentNode.rotation = this.reader.getFloat32Array(3);\n                break;\n            case 'IFAL':\n                this.currentNode.falloff = this.reader.getFloat32Array(3);\n                break;\n            case 'IBMP':\n                this.currentNode.amplitude = this.reader.getFloat32();\n                break;\n            case 'IUTD':\n                this.currentNode.uTiles = this.reader.getFloat32();\n                break;\n            case 'IVTD':\n                this.currentNode.vTiles = this.reader.getFloat32();\n                break;\n            }\n            this.reader.skip(2);\n        },\n        parseEnvelope(length) {\n            this.reader.skip(length - 4);\n        },\n        parseClip(length) {\n            var tag = this.reader.getIDTag();\n            if (tag === 'FORM') {\n                this.reader.skip(16);\n                this.currentNode.fileName = this.reader.getString();\n                return;\n            }\n            this.reader.setOffset(this.reader.offset - 4);\n            this.currentFormEnd = this.reader.offset + length;\n            this.parentForm = this.currentForm;\n            this.reader.skip(8);\n            var texture = { index: this.reader.getUint32() };\n            this.tree.textures.push(texture);\n            this.currentForm = texture;\n        },\n        parseClipLwo2(length) {\n            var texture = {\n                index: this.reader.getUint32(),\n                fileName: ''\n            };\n            while (true) {\n                var tag = this.reader.getIDTag();\n                var n_length = this.reader.getUint16();\n                if (tag === 'STIL') {\n                    texture.fileName = this.reader.getString();\n                    break;\n                }\n                if (n_length >= length) {\n                    break;\n                }\n            }\n            this.tree.textures.push(texture);\n            this.currentForm = texture;\n        },\n        parseImage() {\n            this.reader.skip(8);\n            this.currentForm.fileName = this.reader.getString();\n        },\n        parseXVAL(type, length) {\n            var endOffset = this.reader.offset + length - 4;\n            this.reader.skip(8);\n            this.currentForm[type] = this.reader.getFloat32();\n            this.reader.setOffset(endOffset);\n        },\n        parseXVAL3(type, length) {\n            var endOffset = this.reader.offset + length - 4;\n            this.reader.skip(8);\n            this.currentForm[type] = {\n                x: this.reader.getFloat32(),\n                y: this.reader.getFloat32(),\n                z: this.reader.getFloat32()\n            };\n            this.reader.setOffset(endOffset);\n        },\n        parseObjectTag() {\n            if (!this.tree.objectTags)\n                this.tree.objectTags = {};\n            this.tree.objectTags[this.reader.getIDTag()] = { tagString: this.reader.getString() };\n        },\n        parseLayer(length) {\n            var layer = {\n                number: this.reader.getUint16(),\n                flags: this.reader.getUint16(),\n                pivot: this.reader.getFloat32Array(3),\n                name: this.reader.getString()\n            };\n            this.tree.layers.push(layer);\n            this.currentLayer = layer;\n            var parsedLength = 16 + stringOffset(this.currentLayer.name);\n            this.currentLayer.parent = parsedLength < length ? this.reader.getUint16() : -1;\n        },\n        parsePoints(length) {\n            this.currentPoints = [];\n            for (var i = 0; i < length / 4; i += 3) {\n                this.currentPoints.push(this.reader.getFloat32(), this.reader.getFloat32(), -this.reader.getFloat32());\n            }\n        },\n        parseVertexMapping(length, discontinuous) {\n            var finalOffset = this.reader.offset + length;\n            var channelName = this.reader.getString();\n            if (this.reader.offset === finalOffset) {\n                this.currentForm.UVChannel = channelName;\n                return;\n            }\n            this.reader.setOffset(this.reader.offset - stringOffset(channelName));\n            var type = this.reader.getIDTag();\n            this.reader.getUint16();\n            var name = this.reader.getString();\n            var remainingLength = length - 6 - stringOffset(name);\n            switch (type) {\n            case 'TXUV':\n                this.parseUVMapping(name, finalOffset, discontinuous);\n                break;\n            case 'MORF':\n            case 'SPOT':\n                this.parseMorphTargets(name, finalOffset, type);\n                break;\n            case 'APSL':\n            case 'NORM':\n            case 'WGHT':\n            case 'MNVW':\n            case 'PICK':\n            case 'RGB ':\n            case 'RGBA':\n                this.reader.skip(remainingLength);\n                break;\n            default:\n                console.warn('LWOLoader: unknown vertex map type: ' + type);\n                this.reader.skip(remainingLength);\n            }\n        },\n        parseUVMapping(name, finalOffset, discontinuous) {\n            var uvIndices = [];\n            var polyIndices = [];\n            var uvs = [];\n            while (this.reader.offset < finalOffset) {\n                uvIndices.push(this.reader.getVariableLengthIndex());\n                if (discontinuous)\n                    polyIndices.push(this.reader.getVariableLengthIndex());\n                uvs.push(this.reader.getFloat32(), this.reader.getFloat32());\n            }\n            if (discontinuous) {\n                if (!this.currentLayer.discontinuousUVs)\n                    this.currentLayer.discontinuousUVs = {};\n                this.currentLayer.discontinuousUVs[name] = {\n                    uvIndices: uvIndices,\n                    polyIndices: polyIndices,\n                    uvs: uvs\n                };\n            } else {\n                if (!this.currentLayer.uvs)\n                    this.currentLayer.uvs = {};\n                this.currentLayer.uvs[name] = {\n                    uvIndices: uvIndices,\n                    uvs: uvs\n                };\n            }\n        },\n        parseMorphTargets(name, finalOffset, type) {\n            var indices = [];\n            var points = [];\n            type = type === 'MORF' ? 'relative' : 'absolute';\n            while (this.reader.offset < finalOffset) {\n                indices.push(this.reader.getVariableLengthIndex());\n                points.push(this.reader.getFloat32(), this.reader.getFloat32(), -this.reader.getFloat32());\n            }\n            if (!this.currentLayer.morphTargets)\n                this.currentLayer.morphTargets = {};\n            this.currentLayer.morphTargets[name] = {\n                indices: indices,\n                points: points,\n                type: type\n            };\n        },\n        parsePolygonList(length) {\n            var finalOffset = this.reader.offset + length;\n            var type = this.reader.getIDTag();\n            var indices = [];\n            var polygonDimensions = [];\n            while (this.reader.offset < finalOffset) {\n                var numverts = this.reader.getUint16();\n                numverts = numverts & 1023;\n                polygonDimensions.push(numverts);\n                for (var j = 0; j < numverts; j++)\n                    indices.push(this.reader.getVariableLengthIndex());\n            }\n            var geometryData = {\n                type: type,\n                vertexIndices: indices,\n                polygonDimensions: polygonDimensions,\n                points: this.currentPoints\n            };\n            if (polygonDimensions[0] === 1)\n                geometryData.type = 'points';\n            else if (polygonDimensions[0] === 2)\n                geometryData.type = 'lines';\n            this.currentLayer.geometry = geometryData;\n        },\n        parseTagStrings(length) {\n            this.tree.tags = this.reader.getStringArray(length);\n        },\n        parsePolygonTagMapping(length) {\n            var finalOffset = this.reader.offset + length;\n            var type = this.reader.getIDTag();\n            if (type === 'SURF')\n                this.parseMaterialIndices(finalOffset);\n            else {\n                this.reader.skip(length - 4);\n            }\n        },\n        parseMaterialIndices(finalOffset) {\n            this.currentLayer.geometry.materialIndices = [];\n            while (this.reader.offset < finalOffset) {\n                var polygonIndex = this.reader.getVariableLengthIndex();\n                var materialIndex = this.reader.getUint16();\n                this.currentLayer.geometry.materialIndices.push(polygonIndex, materialIndex);\n            }\n        },\n        parseUnknownCHUNK(blockID, length) {\n            console.warn('LWOLoader: unknown chunk type: ' + blockID + ' length: ' + length);\n            var data = this.reader.getString(length);\n            this.currentForm[blockID] = data;\n        }\n    };\n    function DataViewReader(buffer) {\n        this.dv = new DataView(buffer);\n        this.offset = 0;\n    }\n    DataViewReader.prototype = {\n        constructor: DataViewReader,\n        size: function () {\n            return this.dv.buffer.byteLength;\n        },\n        setOffset(offset) {\n            if (offset > 0 && offset < this.dv.buffer.byteLength) {\n                this.offset = offset;\n            } else {\n                console.error('LWOLoader: invalid buffer offset');\n            }\n        },\n        endOfFile: function () {\n            if (this.offset >= this.size())\n                return true;\n            return false;\n        },\n        skip: function (length) {\n            this.offset += length;\n        },\n        getUint8: function () {\n            var value = this.dv.getUint8(this.offset);\n            this.offset += 1;\n            return value;\n        },\n        getUint16: function () {\n            var value = this.dv.getUint16(this.offset);\n            this.offset += 2;\n            return value;\n        },\n        getInt32: function () {\n            var value = this.dv.getInt32(this.offset, false);\n            this.offset += 4;\n            return value;\n        },\n        getUint32: function () {\n            var value = this.dv.getUint32(this.offset, false);\n            this.offset += 4;\n            return value;\n        },\n        getUint64: function () {\n            var low, high;\n            high = this.getUint32();\n            low = this.getUint32();\n            return high * 4294967296 + low;\n        },\n        getFloat32: function () {\n            var value = this.dv.getFloat32(this.offset, false);\n            this.offset += 4;\n            return value;\n        },\n        getFloat32Array: function (size) {\n            var a = [];\n            for (var i = 0; i < size; i++) {\n                a.push(this.getFloat32());\n            }\n            return a;\n        },\n        getFloat64: function () {\n            var value = this.dv.getFloat64(this.offset, this.littleEndian);\n            this.offset += 8;\n            return value;\n        },\n        getFloat64Array: function (size) {\n            var a = [];\n            for (var i = 0; i < size; i++) {\n                a.push(this.getFloat64());\n            }\n            return a;\n        },\n        getVariableLengthIndex() {\n            var firstByte = this.getUint8();\n            if (firstByte === 255) {\n                return this.getUint8() * 65536 + this.getUint8() * 256 + this.getUint8();\n            }\n            return firstByte * 256 + this.getUint8();\n        },\n        getIDTag() {\n            return this.getString(4);\n        },\n        getString: function (size) {\n            if (size === 0)\n                return;\n            var a = [];\n            if (size) {\n                for (var i = 0; i < size; i++) {\n                    a[i] = this.getUint8();\n                }\n            } else {\n                var currentChar;\n                var len = 0;\n                while (currentChar !== 0) {\n                    currentChar = this.getUint8();\n                    if (currentChar !== 0)\n                        a.push(currentChar);\n                    len++;\n                }\n                if (!isEven(len + 1))\n                    this.getUint8();\n            }\n            return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n        },\n        getStringArray: function (size) {\n            var a = this.getString(size);\n            a = a.split('\\0');\n            return a.filter(Boolean);\n        }\n    };\n    function Debugger() {\n        this.active = false;\n        this.depth = 0;\n        this.formList = [];\n    }\n    Debugger.prototype = {\n        constructor: Debugger,\n        enable: function () {\n            this.active = true;\n        },\n        log: function () {\n            if (!this.active)\n                return;\n            var nodeType;\n            switch (this.node) {\n            case 0:\n                nodeType = 'FORM';\n                break;\n            case 1:\n                nodeType = 'CHK';\n                break;\n            case 2:\n                nodeType = 'S-CHK';\n                break;\n            }\n            console.log('| '.repeat(this.depth) + nodeType, this.nodeID, `( ${ this.offset } ) -> ( ${ this.dataOffset + this.length } )`, this.node == 0 ? ' {' : '', this.skipped ? 'SKIPPED' : '', this.node == 0 && this.skipped ? '}' : '');\n            if (this.node == 0 && !this.skipped) {\n                this.depth += 1;\n                this.formList.push(this.dataOffset + this.length);\n            }\n            this.skipped = false;\n        },\n        closeForms: function () {\n            if (!this.active)\n                return;\n            for (var i = this.formList.length - 1; i >= 0; i--) {\n                if (this.offset >= this.formList[i]) {\n                    this.depth -= 1;\n                    console.log('| '.repeat(this.depth) + '}');\n                    this.formList.splice(-1, 1);\n                }\n            }\n        }\n    };\n    function isEven(num) {\n        return num % 2;\n    }\n    function stringOffset(string) {\n        return string.length + 1 + (isEven(string.length + 1) ? 1 : 0);\n    }\n    function printBuffer(buffer, from, to) {\n        console.log(THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to)));\n    }\n    var lwoTree;\n    var LWOLoader = function (manager, parameters) {\n        THREE.Loader.call(this, manager);\n        parameters = parameters || {};\n        this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n    };\n    LWOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: LWOLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var self = this;\n            var path = self.path === '' ? extractParentUrl(url, 'Objects') : self.path;\n            var modelName = url.split(path).pop().split('.')[0];\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(self.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (buffer) {\n                onLoad(self.parse(buffer, path, modelName));\n            }, onProgress, onError);\n        },\n        parse: function (iffBuffer, path, modelName) {\n            lwoTree = new IFFParser().parse(iffBuffer);\n            var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n            return new LWOTreeParser(textureLoader).parse(modelName);\n        }\n    });\n    function LWOTreeParser(textureLoader) {\n        this.textureLoader = textureLoader;\n    }\n    LWOTreeParser.prototype = {\n        constructor: LWOTreeParser,\n        parse: function (modelName) {\n            this.materials = new MaterialParser(this.textureLoader).parse();\n            this.defaultLayerName = modelName;\n            this.meshes = this.parseLayers();\n            return {\n                materials: this.materials,\n                meshes: this.meshes\n            };\n        },\n        parseLayers() {\n            var meshes = [];\n            var finalMeshes = [];\n            var geometryParser = new GeometryParser();\n            var self = this;\n            lwoTree.layers.forEach(function (layer) {\n                var geometry = geometryParser.parse(layer.geometry, layer);\n                var mesh = self.parseMesh(geometry, layer);\n                meshes[layer.number] = mesh;\n                if (layer.parent === -1)\n                    finalMeshes.push(mesh);\n                else\n                    meshes[layer.parent].add(mesh);\n            });\n            this.applyPivots(finalMeshes);\n            return finalMeshes;\n        },\n        parseMesh(geometry, layer) {\n            var mesh;\n            var materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n            this.duplicateUVs(geometry, materials);\n            if (layer.geometry.type === 'points')\n                mesh = new THREE.Points(geometry, materials);\n            else if (layer.geometry.type === 'lines')\n                mesh = new THREE.LineSegments(geometry, materials);\n            else\n                mesh = new THREE.Mesh(geometry, materials);\n            if (layer.name)\n                mesh.name = layer.name;\n            else\n                mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n            mesh.userData.pivot = layer.pivot;\n            return mesh;\n        },\n        applyPivots(meshes) {\n            meshes.forEach(function (mesh) {\n                mesh.traverse(function (child) {\n                    var pivot = child.userData.pivot;\n                    child.position.x += pivot[0];\n                    child.position.y += pivot[1];\n                    child.position.z += pivot[2];\n                    if (child.parent) {\n                        var parentPivot = child.parent.userData.pivot;\n                        child.position.x -= parentPivot[0];\n                        child.position.y -= parentPivot[1];\n                        child.position.z -= parentPivot[2];\n                    }\n                });\n            });\n        },\n        getMaterials(namesArray, type) {\n            var materials = [];\n            var self = this;\n            namesArray.forEach(function (name, i) {\n                materials[i] = self.getMaterialByName(name);\n            });\n            if (type === 'points' || type === 'lines') {\n                materials.forEach(function (mat, i) {\n                    var spec = { color: mat.color };\n                    if (type === 'points') {\n                        spec.size = 0.1;\n                        spec.map = mat.map;\n                        spec.morphTargets = mat.morphTargets;\n                        materials[i] = new THREE.PointsMaterial(spec);\n                    } else if (type === 'lines') {\n                        materials[i] = new THREE.LineBasicMaterial(spec);\n                    }\n                });\n            }\n            var filtered = materials.filter(Boolean);\n            if (filtered.length === 1)\n                return filtered[0];\n            return materials;\n        },\n        getMaterialByName(name) {\n            return this.materials.filter(function (m) {\n                return m.name === name;\n            })[0];\n        },\n        duplicateUVs(geometry, materials) {\n            var duplicateUVs = false;\n            if (!Array.isArray(materials)) {\n                if (materials.aoMap)\n                    duplicateUVs = true;\n            } else {\n                materials.forEach(function (material) {\n                    if (material.aoMap)\n                        duplicateUVs = true;\n                });\n            }\n            if (!duplicateUVs)\n                return;\n            geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));\n        }\n    };\n    function MaterialParser(textureLoader) {\n        this.textureLoader = textureLoader;\n    }\n    MaterialParser.prototype = {\n        constructor: MaterialParser,\n        parse: function () {\n            var materials = [];\n            this.textures = {};\n            for (var name in lwoTree.materials) {\n                if (lwoTree.format === 'LWO3') {\n                    materials.push(this.parseMaterial(lwoTree.materials[name], name, lwoTree.textures));\n                } else if (lwoTree.format === 'LWO2') {\n                    materials.push(this.parseMaterialLwo2(lwoTree.materials[name], name, lwoTree.textures));\n                }\n            }\n            return materials;\n        },\n        parseMaterial(materialData, name, textures) {\n            var params = {\n                name: name,\n                side: this.getSide(materialData.attributes),\n                flatShading: this.getSmooth(materialData.attributes)\n            };\n            var connections = this.parseConnections(materialData.connections, materialData.nodes);\n            var maps = this.parseTextureNodes(connections.maps);\n            this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n            var attributes = this.parseAttributes(connections.attributes, maps);\n            this.parseEnvMap(connections, maps, attributes);\n            params = Object.assign(maps, params);\n            params = Object.assign(params, attributes);\n            var materialType = this.getMaterialType(connections.attributes);\n            return new materialType(params);\n        },\n        parseMaterialLwo2(materialData, name) {\n            var params = {\n                name: name,\n                side: this.getSide(materialData.attributes),\n                flatShading: this.getSmooth(materialData.attributes)\n            };\n            var attributes = this.parseAttributes(materialData.attributes, {});\n            params = Object.assign(params, attributes);\n            return new THREE.MeshPhongMaterial(params);\n        },\n        getSide(attributes) {\n            if (!attributes.side)\n                return THREE.BackSide;\n            switch (attributes.side) {\n            case 0:\n            case 1:\n                return THREE.BackSide;\n            case 2:\n                return THREE.FrontSide;\n            case 3:\n                return THREE.DoubleSide;\n            }\n        },\n        getSmooth(attributes) {\n            if (!attributes.smooth)\n                return true;\n            return !attributes.smooth;\n        },\n        parseConnections(connections, nodes) {\n            var materialConnections = { maps: {} };\n            var inputName = connections.inputName;\n            var inputNodeName = connections.inputNodeName;\n            var nodeName = connections.nodeName;\n            var self = this;\n            inputName.forEach(function (name, index) {\n                if (name === 'Material') {\n                    var matNode = self.getNodeByRefName(inputNodeName[index], nodes);\n                    materialConnections.attributes = matNode.attributes;\n                    materialConnections.envMap = matNode.fileName;\n                    materialConnections.name = inputNodeName[index];\n                }\n            });\n            nodeName.forEach(function (name, index) {\n                if (name === materialConnections.name) {\n                    materialConnections.maps[inputName[index]] = self.getNodeByRefName(inputNodeName[index], nodes);\n                }\n            });\n            return materialConnections;\n        },\n        getNodeByRefName(refName, nodes) {\n            for (var name in nodes) {\n                if (nodes[name].refName === refName)\n                    return nodes[name];\n            }\n        },\n        parseTextureNodes(textureNodes) {\n            var maps = {};\n            for (var name in textureNodes) {\n                var node = textureNodes[name];\n                var path = node.fileName;\n                if (!path)\n                    return;\n                var texture = this.loadTexture(path);\n                if (node.widthWrappingMode !== undefined)\n                    texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n                if (node.heightWrappingMode !== undefined)\n                    texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n                switch (name) {\n                case 'Color':\n                    maps.map = texture;\n                    break;\n                case 'Roughness':\n                    maps.roughnessMap = texture;\n                    maps.roughness = 0.5;\n                    break;\n                case 'Specular':\n                    maps.specularMap = texture;\n                    maps.specular = 16777215;\n                    break;\n                case 'Luminous':\n                    maps.emissiveMap = texture;\n                    maps.emissive = 8421504;\n                    break;\n                case 'Luminous Color':\n                    maps.emissive = 8421504;\n                    break;\n                case 'Metallic':\n                    maps.metalnessMap = texture;\n                    maps.metalness = 0.5;\n                    break;\n                case 'Transparency':\n                case 'Alpha':\n                    maps.alphaMap = texture;\n                    maps.transparent = true;\n                    break;\n                case 'Normal':\n                    maps.normalMap = texture;\n                    if (node.amplitude !== undefined)\n                        maps.normalScale = new THREE.Vector2(node.amplitude, node.amplitude);\n                    break;\n                case 'Bump':\n                    maps.bumpMap = texture;\n                    break;\n                }\n            }\n            if (maps.roughnessMap && maps.specularMap)\n                delete maps.specularMap;\n            return maps;\n        },\n        parseAttributeImageMaps(attributes, textures, maps) {\n            for (var name in attributes) {\n                var attribute = attributes[name];\n                if (attribute.maps) {\n                    var mapData = attribute.maps[0];\n                    var path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n                    if (!path)\n                        return;\n                    var texture = this.loadTexture(path);\n                    if (mapData.wrap !== undefined)\n                        texture.wrapS = this.getWrappingType(mapData.wrap.w);\n                    if (mapData.wrap !== undefined)\n                        texture.wrapT = this.getWrappingType(mapData.wrap.h);\n                    switch (name) {\n                    case 'Color':\n                        maps.map = texture;\n                        break;\n                    case 'Diffuse':\n                        maps.aoMap = texture;\n                        break;\n                    case 'Roughness':\n                        maps.roughnessMap = texture;\n                        maps.roughness = 1;\n                        break;\n                    case 'Specular':\n                        maps.specularMap = texture;\n                        maps.specular = 16777215;\n                        break;\n                    case 'Luminosity':\n                        maps.emissiveMap = texture;\n                        maps.emissive = 8421504;\n                        break;\n                    case 'Metallic':\n                        maps.metalnessMap = texture;\n                        maps.metalness = 1;\n                        break;\n                    case 'Transparency':\n                    case 'Alpha':\n                        maps.alphaMap = texture;\n                        maps.transparent = true;\n                        break;\n                    case 'Normal':\n                        maps.normalMap = texture;\n                        break;\n                    case 'Bump':\n                        maps.bumpMap = texture;\n                        break;\n                    }\n                }\n            }\n        },\n        parseAttributes(attributes, maps) {\n            var params = {};\n            if (attributes.undefined && !maps.map) {\n                params.color = new THREE.Color().fromArray(attributes.undefined.value);\n            } else\n                params.color = new THREE.Color();\n            if (attributes.Transparency && attributes.Transparency.value !== 0) {\n                params.opacity = 1 - attributes.Transparency.value;\n                params.transparent = true;\n            }\n            if (attributes['Bump Height'])\n                params.bumpScale = attributes['Bump Height'].value * 0.1;\n            if (attributes['Refraction Index'])\n                params.refractionRatio = 1 / attributes['Refraction Index'].value;\n            this.parsePhysicalAttributes(params, attributes, maps);\n            this.parseStandardAttributes(params, attributes, maps);\n            this.parsePhongAttributes(params, attributes, maps);\n            return params;\n        },\n        parsePhysicalAttributes(params, attributes) {\n            if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n                params.clearcoat = attributes.Clearcoat.value;\n                if (attributes['Clearcoat Gloss']) {\n                    params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n                }\n            }\n        },\n        parseStandardAttributes(params, attributes, maps) {\n            if (attributes.Luminous) {\n                params.emissiveIntensity = attributes.Luminous.value;\n                if (attributes['Luminous Color'] && !maps.emissive) {\n                    params.emissive = new THREE.Color().fromArray(attributes['Luminous Color'].value);\n                } else {\n                    params.emissive = new THREE.Color(8421504);\n                }\n            }\n            if (attributes.Roughness && !maps.roughnessMap)\n                params.roughness = attributes.Roughness.value;\n            if (attributes.Metallic && !maps.metalnessMap)\n                params.metalness = attributes.Metallic.value;\n        },\n        parsePhongAttributes(params, attributes, maps) {\n            if (attributes.Diffuse)\n                params.color.multiplyScalar(attributes.Diffuse.value);\n            if (attributes.Reflection) {\n                params.reflectivity = attributes.Reflection.value;\n                params.combine = THREE.AddOperation;\n            }\n            if (attributes.Luminosity) {\n                params.emissiveIntensity = attributes.Luminosity.value;\n                if (!maps.emissiveMap && !maps.map) {\n                    params.emissive = params.color;\n                } else {\n                    params.emissive = new THREE.Color(8421504);\n                }\n            }\n            if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n                if (attributes['Color Highlight']) {\n                    params.specular = new THREE.Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n                } else {\n                    params.specular = new THREE.Color().setScalar(attributes.Specular.value);\n                }\n            }\n            if (params.specular && attributes.Glossiness)\n                params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n        },\n        parseEnvMap(connections, maps, attributes) {\n            if (connections.envMap) {\n                var envMap = this.loadTexture(connections.envMap);\n                if (attributes.transparent && attributes.opacity < 0.999) {\n                    envMap.mapping = THREE.EquirectangularRefractionMapping;\n                    if (attributes.reflectivity !== undefined) {\n                        delete attributes.reflectivity;\n                        delete attributes.combine;\n                    }\n                    if (attributes.metalness !== undefined) {\n                        delete attributes.metalness;\n                    }\n                } else\n                    envMap.mapping = THREE.EquirectangularReflectionMapping;\n                maps.envMap = envMap;\n            }\n        },\n        getTexturePathByIndex(index) {\n            var fileName = '';\n            if (!lwoTree.textures)\n                return fileName;\n            lwoTree.textures.forEach(function (texture) {\n                if (texture.index === index)\n                    fileName = texture.fileName;\n            });\n            return fileName;\n        },\n        loadTexture(path) {\n            if (!path)\n                return null;\n            var texture;\n            texture = this.textureLoader.load(path, undefined, undefined, function () {\n                console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n            });\n            return texture;\n        },\n        getWrappingType(num) {\n            switch (num) {\n            case 0:\n                console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three');\n                return THREE.ClampToEdgeWrapping;\n            case 1:\n                return THREE.RepeatWrapping;\n            case 2:\n                return THREE.MirroredRepeatWrapping;\n            case 3:\n                return THREE.ClampToEdgeWrapping;\n            }\n        },\n        getMaterialType(nodeData) {\n            if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0)\n                return THREE.MeshPhysicalMaterial;\n            if (nodeData.Roughness)\n                return THREE.MeshStandardMaterial;\n            return THREE.MeshPhongMaterial;\n        }\n    };\n    function GeometryParser() {\n    }\n    GeometryParser.prototype = {\n        constructor: GeometryParser,\n        parse(geoData, layer) {\n            var geometry = new THREE.BufferGeometry();\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute(geoData.points, 3));\n            var indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n            geometry.setIndex(indices);\n            this.parseGroups(geometry, geoData);\n            geometry.computeVertexNormals();\n            this.parseUVs(geometry, layer, indices);\n            this.parseMorphTargets(geometry, layer, indices);\n            geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]);\n            return geometry;\n        },\n        splitIndices(indices, polygonDimensions) {\n            var remappedIndices = [];\n            var i = 0;\n            polygonDimensions.forEach(function (dim) {\n                if (dim < 4) {\n                    for (var k = 0; k < dim; k++)\n                        remappedIndices.push(indices[i + k]);\n                } else if (dim === 4) {\n                    remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n                } else if (dim > 4) {\n                    for (var k = 1; k < dim - 1; k++) {\n                        remappedIndices.push(indices[i], indices[i + k], indices[i + k + 1]);\n                    }\n                    console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n                }\n                i += dim;\n            });\n            return remappedIndices;\n        },\n        parseGroups(geometry, geoData) {\n            var tags = lwoTree.tags;\n            var matNames = [];\n            var elemSize = 3;\n            if (geoData.type === 'lines')\n                elemSize = 2;\n            if (geoData.type === 'points')\n                elemSize = 1;\n            var remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n            var indexNum = 0;\n            var indexPairs = {};\n            var prevMaterialIndex;\n            var prevStart = 0;\n            var currentCount = 0;\n            for (var i = 0; i < remappedIndices.length; i += 2) {\n                var materialIndex = remappedIndices[i + 1];\n                if (i === 0)\n                    matNames[indexNum] = tags[materialIndex];\n                if (prevMaterialIndex === undefined)\n                    prevMaterialIndex = materialIndex;\n                if (materialIndex !== prevMaterialIndex) {\n                    var currentIndex;\n                    if (indexPairs[tags[prevMaterialIndex]]) {\n                        currentIndex = indexPairs[tags[prevMaterialIndex]];\n                    } else {\n                        currentIndex = indexNum;\n                        indexPairs[tags[prevMaterialIndex]] = indexNum;\n                        matNames[indexNum] = tags[prevMaterialIndex];\n                        indexNum++;\n                    }\n                    geometry.addGroup(prevStart, currentCount, currentIndex);\n                    prevStart += currentCount;\n                    prevMaterialIndex = materialIndex;\n                    currentCount = 0;\n                }\n                currentCount += elemSize;\n            }\n            if (geometry.groups.length > 0) {\n                var currentIndex;\n                if (indexPairs[tags[materialIndex]]) {\n                    currentIndex = indexPairs[tags[materialIndex]];\n                } else {\n                    currentIndex = indexNum;\n                    indexPairs[tags[materialIndex]] = indexNum;\n                    matNames[indexNum] = tags[materialIndex];\n                }\n                geometry.addGroup(prevStart, currentCount, currentIndex);\n            }\n            geometry.userData.matNames = matNames;\n        },\n        splitMaterialIndices(polygonDimensions, indices) {\n            var remappedIndices = [];\n            polygonDimensions.forEach(function (dim, i) {\n                if (dim <= 3) {\n                    remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n                } else if (dim === 4) {\n                    remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n                } else {\n                    for (var k = 0; k < dim - 2; k++) {\n                        remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n                    }\n                }\n            });\n            return remappedIndices;\n        },\n        parseUVs(geometry, layer) {\n            var remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n                return 0;\n            });\n            for (var name in layer.uvs) {\n                var uvs = layer.uvs[name].uvs;\n                var uvIndices = layer.uvs[name].uvIndices;\n                uvIndices.forEach(function (i, j) {\n                    remappedUVs[i * 2] = uvs[j * 2];\n                    remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n                });\n            }\n            geometry.setAttribute('uv', new THREE.Float32BufferAttribute(remappedUVs, 2));\n        },\n        parseMorphTargets(geometry, layer) {\n            var num = 0;\n            for (var name in layer.morphTargets) {\n                var remappedPoints = geometry.attributes.position.array.slice();\n                if (!geometry.morphAttributes.position)\n                    geometry.morphAttributes.position = [];\n                var morphPoints = layer.morphTargets[name].points;\n                var morphIndices = layer.morphTargets[name].indices;\n                var type = layer.morphTargets[name].type;\n                morphIndices.forEach(function (i, j) {\n                    if (type === 'relative') {\n                        remappedPoints[i * 3] += morphPoints[j * 3];\n                        remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n                        remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n                    } else {\n                        remappedPoints[i * 3] = morphPoints[j * 3];\n                        remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n                        remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n                    }\n                });\n                geometry.morphAttributes.position[num] = new THREE.Float32BufferAttribute(remappedPoints, 3);\n                geometry.morphAttributes.position[num].name = name;\n                num++;\n            }\n            geometry.morphTargetsRelative = false;\n        }\n    };\n    function extractParentUrl(url, dir) {\n        var index = url.indexOf(dir);\n        if (index === -1)\n            return './';\n        return url.substr(0, index);\n    }\n\n    return threex.loaders.LWOLoader = LWOLoader;\n});"]}