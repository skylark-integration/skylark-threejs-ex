{"version":3,"sources":["loaders/GCodeLoader.js"],"names":["define","THREE","GCodeLoader","manager","Loader","call","this","splitLayer","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","self","loader","FileLoader","setPath","path","text","parse","data","state","x","y","z","e","f","extruding","relative","layers","currentLayer","undefined","pathMaterial","LineBasicMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","delta","v1","v2","absolute","p1","p2","lines","replace","split","i","length","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","addObject","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","segments","LineSegments","object","add","Group","layer","concat","quaternion","setFromEuler","Euler","Math","PI"],"mappings":"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","file":"../../loaders/GCodeLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * THREE.GCodeLoader is used to load gcode files usually used for 3D printing or CNC applications.\n\t *\n\t * Gcode files are composed by commands used by machines to create objects.\n\t *\n\t * @class THREE.GCodeLoader\n\t * @param {Manager} manager Loading manager.\n\t * @author tentone\n\t * @author joewalnes\n\t */\n\n\tTHREE.GCodeLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.splitLayer = false;\n\n\t};\n\n\tTHREE.GCodeLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.GCodeLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar self = this;\n\n\t\t\tvar loader = new THREE.FileLoader( self.manager );\n\t\t\tloader.setPath( self.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( self.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tvar state = { x: 0, y: 0, z: 0, e: 0, f: 0, extruding: false, relative: false };\n\t\t\tvar layers = [];\n\n\t\t\tvar currentLayer = undefined;\n\n\t\t\tvar pathMaterial = new THREE.LineBasicMaterial( { color: 0xFF0000 } );\n\t\t\tpathMaterial.name = 'path';\n\n\t\t\tvar extrudingMaterial = new THREE.LineBasicMaterial( { color: 0x00FF00 } );\n\t\t\textrudingMaterial.name = 'extruded';\n\n\t\t\tfunction newLayer( line ) {\n\n\t\t\t\tcurrentLayer = { vertex: [], pathVertex: [], z: line.z };\n\t\t\t\tlayers.push( currentLayer );\n\n\t\t\t}\n\n\t\t\t//Create lie segment between p1 and p2\n\t\t\tfunction addSegment( p1, p2 ) {\n\n\t\t\t\tif ( currentLayer === undefined ) {\n\n\t\t\t\t\tnewLayer( p1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( line.extruding ) {\n\n\t\t\t\t\tcurrentLayer.vertex.push( p1.x, p1.y, p1.z );\n\t\t\t\t\tcurrentLayer.vertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentLayer.pathVertex.push( p1.x, p1.y, p1.z );\n\t\t\t\t\tcurrentLayer.pathVertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction delta( v1, v2 ) {\n\n\t\t\t\treturn state.relative ? v2 : v2 - v1;\n\n\t\t\t}\n\n\t\t\tfunction absolute( v1, v2 ) {\n\n\t\t\t\treturn state.relative ? v1 + v2 : v2;\n\n\t\t\t}\n\n\t\t\tvar lines = data.replace( /;.+/g, '' ).split( '\\n' );\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar tokens = lines[ i ].split( ' ' );\n\t\t\t\tvar cmd = tokens[ 0 ].toUpperCase();\n\n\t\t\t\t//Argumments\n\t\t\t\tvar args = {};\n\t\t\t\ttokens.splice( 1 ).forEach( function ( token ) {\n\n\t\t\t\t\tif ( token[ 0 ] !== undefined ) {\n\n\t\t\t\t\t\tvar key = token[ 0 ].toLowerCase();\n\t\t\t\t\t\tvar value = parseFloat( token.substring( 1 ) );\n\t\t\t\t\t\targs[ key ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t//Process commands\n\t\t\t\t//G0/G1 â€“ Linear Movement\n\t\t\t\tif ( cmd === 'G0' || cmd === 'G1' ) {\n\n\t\t\t\t\tvar line = {\n\t\t\t\t\t\tx: args.x !== undefined ? absolute( state.x, args.x ) : state.x,\n\t\t\t\t\t\ty: args.y !== undefined ? absolute( state.y, args.y ) : state.y,\n\t\t\t\t\t\tz: args.z !== undefined ? absolute( state.z, args.z ) : state.z,\n\t\t\t\t\t\te: args.e !== undefined ? absolute( state.e, args.e ) : state.e,\n\t\t\t\t\t\tf: args.f !== undefined ? absolute( state.f, args.f ) : state.f,\n\t\t\t\t\t};\n\n\t\t\t\t\t//Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\t\t\t\t\tif ( delta( state.e, line.e ) > 0 ) {\n\n\t\t\t\t\t\tline.extruding = delta( state.e, line.e ) > 0;\n\n\t\t\t\t\t\tif ( currentLayer == undefined || line.z != currentLayer.z ) {\n\n\t\t\t\t\t\t\tnewLayer( line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\taddSegment( state, line );\n\t\t\t\t\tstate = line;\n\n\t\t\t\t} else if ( cmd === 'G2' || cmd === 'G3' ) {\n\n\t\t\t\t\t//G2/G3 - Arc Movement ( G2 clock wise and G3 counter clock wise )\n\t\t\t\t\t//console.warn( 'THREE.GCodeLoader: Arc command not supported' );\n\n\t\t\t\t} else if ( cmd === 'G90' ) {\n\n\t\t\t\t\t//G90: Set to Absolute Positioning\n\t\t\t\t\tstate.relative = false;\n\n\t\t\t\t} else if ( cmd === 'G91' ) {\n\n\t\t\t\t\t//G91: Set to state.relative Positioning\n\t\t\t\t\tstate.relative = true;\n\n\t\t\t\t} else if ( cmd === 'G92' ) {\n\n\t\t\t\t\t//G92: Set Position\n\t\t\t\t\tvar line = state;\n\t\t\t\t\tline.x = args.x !== undefined ? args.x : line.x;\n\t\t\t\t\tline.y = args.y !== undefined ? args.y : line.y;\n\t\t\t\t\tline.z = args.z !== undefined ? args.z : line.z;\n\t\t\t\t\tline.e = args.e !== undefined ? args.e : line.e;\n\t\t\t\t\tstate = line;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.warn( 'THREE.GCodeLoader: Command not supported:' + cmd );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addObject( vertex, extruding ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertex, 3 ) );\n\n\t\t\t\tvar segments = new THREE.LineSegments( geometry, extruding ? extrudingMaterial : pathMaterial );\n\t\t\t\tsegments.name = 'layer' + i;\n\t\t\t\tobject.add( segments );\n\n\t\t\t}\n\n\t\t\tvar object = new THREE.Group();\n\t\t\tobject.name = 'gcode';\n\n\t\t\tif ( this.splitLayer ) {\n\n\t\t\t\tfor ( var i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\t\tvar layer = layers[ i ];\n\t\t\t\t\taddObject( layer.vertex, true );\n\t\t\t\t\taddObject( layer.pathVertex, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertex = [], pathVertex = [];\n\n\t\t\t\tfor ( var i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\t\tvar layer = layers[ i ];\n\n\t\t\t\t\tvertex = vertex.concat( layer.vertex );\n\t\t\t\t\tpathVertex = pathVertex.concat( layer.pathVertex );\n\n\t\t\t\t}\n\n\t\t\t\taddObject( vertex, true );\n\t\t\t\taddObject( pathVertex, false );\n\n\t\t\t}\n\n\t\t\tobject.quaternion.setFromEuler( new THREE.Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.GCodeLoader;\n});\n"]}