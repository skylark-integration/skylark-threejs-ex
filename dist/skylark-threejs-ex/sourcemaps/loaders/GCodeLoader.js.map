{"version":3,"sources":["loaders/GCodeLoader.js"],"names":["define","THREE","GCodeLoader","manager","Loader","call","this","splitLayer","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","self","loader","FileLoader","setPath","path","text","parse","data","state","x","y","z","e","f","extruding","relative","layers","currentLayer","undefined","pathMaterial","LineBasicMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","delta","v1","v2","absolute","p1","p2","lines","replace","split","i","length","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","addObject","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","segments","LineSegments","object","add","Group","layer","concat","quaternion","setFromEuler","Euler","Math","PI"],"mappings":"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","file":"../../loaders/GCodeLoader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GCodeLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.splitLayer = false;\n    };\n    GCodeLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: GCodeLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var self = this;\n            var loader = new THREE.FileLoader(self.manager);\n            loader.setPath(self.path);\n            loader.load(url, function (text) {\n                onLoad(self.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var state = {\n                x: 0,\n                y: 0,\n                z: 0,\n                e: 0,\n                f: 0,\n                extruding: false,\n                relative: false\n            };\n            var layers = [];\n            var currentLayer = undefined;\n            var pathMaterial = new THREE.LineBasicMaterial({ color: 16711680 });\n            pathMaterial.name = 'path';\n            var extrudingMaterial = new THREE.LineBasicMaterial({ color: 65280 });\n            extrudingMaterial.name = 'extruded';\n            function newLayer(line) {\n                currentLayer = {\n                    vertex: [],\n                    pathVertex: [],\n                    z: line.z\n                };\n                layers.push(currentLayer);\n            }\n            function addSegment(p1, p2) {\n                if (currentLayer === undefined) {\n                    newLayer(p1);\n                }\n                if (line.extruding) {\n                    currentLayer.vertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.vertex.push(p2.x, p2.y, p2.z);\n                } else {\n                    currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n                    currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n                }\n            }\n            function delta(v1, v2) {\n                return state.relative ? v2 : v2 - v1;\n            }\n            function absolute(v1, v2) {\n                return state.relative ? v1 + v2 : v2;\n            }\n            var lines = data.replace(/;.+/g, '').split('\\n');\n            for (var i = 0; i < lines.length; i++) {\n                var tokens = lines[i].split(' ');\n                var cmd = tokens[0].toUpperCase();\n                var args = {};\n                tokens.splice(1).forEach(function (token) {\n                    if (token[0] !== undefined) {\n                        var key = token[0].toLowerCase();\n                        var value = parseFloat(token.substring(1));\n                        args[key] = value;\n                    }\n                });\n                if (cmd === 'G0' || cmd === 'G1') {\n                    var line = {\n                        x: args.x !== undefined ? absolute(state.x, args.x) : state.x,\n                        y: args.y !== undefined ? absolute(state.y, args.y) : state.y,\n                        z: args.z !== undefined ? absolute(state.z, args.z) : state.z,\n                        e: args.e !== undefined ? absolute(state.e, args.e) : state.e,\n                        f: args.f !== undefined ? absolute(state.f, args.f) : state.f\n                    };\n                    if (delta(state.e, line.e) > 0) {\n                        line.extruding = delta(state.e, line.e) > 0;\n                        if (currentLayer == undefined || line.z != currentLayer.z) {\n                            newLayer(line);\n                        }\n                    }\n                    addSegment(state, line);\n                    state = line;\n                } else if (cmd === 'G2' || cmd === 'G3') {\n                } else if (cmd === 'G90') {\n                    state.relative = false;\n                } else if (cmd === 'G91') {\n                    state.relative = true;\n                } else if (cmd === 'G92') {\n                    var line = state;\n                    line.x = args.x !== undefined ? args.x : line.x;\n                    line.y = args.y !== undefined ? args.y : line.y;\n                    line.z = args.z !== undefined ? args.z : line.z;\n                    line.e = args.e !== undefined ? args.e : line.e;\n                    state = line;\n                } else {\n                }\n            }\n            function addObject(vertex, extruding) {\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertex, 3));\n                var segments = new THREE.LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n                segments.name = 'layer' + i;\n                object.add(segments);\n            }\n            var object = new THREE.Group();\n            object.name = 'gcode';\n            if (this.splitLayer) {\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    addObject(layer.vertex, true);\n                    addObject(layer.pathVertex, false);\n                }\n            } else {\n                var vertex = [], pathVertex = [];\n                for (var i = 0; i < layers.length; i++) {\n                    var layer = layers[i];\n                    vertex = vertex.concat(layer.vertex);\n                    pathVertex = pathVertex.concat(layer.pathVertex);\n                }\n                addObject(vertex, true);\n                addObject(pathVertex, false);\n            }\n            object.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n            return object;\n        }\n    });\n    return GCodeLoader;\n});"]}