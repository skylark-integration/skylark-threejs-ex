{"version":3,"sources":["loaders/AWDLoader.js"],"names":["define","THREE","Block","this","id","data","namespace","flags","AWDProperties","prototype","set","key","value","get","fallback","hasOwnProperty","AWDLoader","manager","Loader","call","trunk","Object3D","materialFactory","undefined","_url","_baseDir","_data","_ptr","_version","_streaming","_optimized_for_accuracy","_compression","_bodylen","_blocks","_accuracyMatrix","_accuracyGeo","_accuracyProps","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","substr","lastIndexOf","loader","FileLoader","setPath","path","setResponseType","text","parse","blen","byteLength","DataView","_parseHeader","console","error","parseNextBlock","assetData","block","blockId","readU32","ns","readU8","type","len","parseMeshData","parseContainer","parseMeshInstance","parseMaterial","parseTexture","parseSkeleton","parseMeshPoseAnimation","parseVertexAnimationSet","parseSkeletonPose","parseSkeletonAnimation","parseAnimatorSet","version","Error","readU16","_geoNrType","_matrixNrType","_propsNrType","ctr","par_id","mtx","parseMatrix4","name","readUTF","applyMatrix4","add","parseProperties","1","2","3","4","extra","parseUserAttributes","mesh","geometries","meshLen","meshes","data_id","materials","mat","mat_id","num_materials","i","getBlock","push","length","sm","Mesh","matLen","maxLen","Math","max","material","props","attributes","num_methods","11","12","13","MeshPhongMaterial","color","setHex","tex_addr","map","alphaThreshold","repeat","asset","data_len","readUTFBytes","log","loadTexture","userData","tex","Texture","ImageLoader","image","needsUpdate","num_joints","skeleton","joints_parsed","joint","ibp","Bone","parent","skinMatrix","pose","mtx_data","Matrix4","frame_dur","pose_addr","clip","num_frames","frames_parsed","duration","poseBlockAdress","skeletonFrames","animSetBlockAdress","targetAnimationSet","targetMeshLength","meshAdresses","Boolean","thisAnimator","targetMeshes","animationSet","animator","geom","buffer","num_subs","subs_parsed","sm_len","sm_end","attrib","BufferGeometry","idx","str_type","str_len","str_end","Float32Array","BufferAttribute","setAttribute","readF32","Uint16Array","setIndex","computeBoundingSphere","poseOnly","num_submeshes","subMeshParsed","num_Streams","streamsParsed","streamtypes","geoAdress","geometry","morphTargets","looping","stitchFinalFrame","array","e","elements","expected","list_len","list_end","parseAttrValue","elem_len","read_func","readI8","readI16","readI32","readF64","list","num_read","num_elems","getUint8","getInt8","a","getUint16","getInt16","getUint32","getInt32","getFloat32","getFloat64","out","c","c1","String","fromCharCode","c2","c3","join"],"mappings":"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","file":"../../loaders/AWDLoader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var AWDLoader = function () {\n        var AWD_FIELD_INT8 = 1, AWD_FIELD_INT16 = 2, AWD_FIELD_INT32 = 3, AWD_FIELD_UINT8 = 4, AWD_FIELD_UINT16 = 5, AWD_FIELD_UINT32 = 6, AWD_FIELD_FLOAT32 = 7, AWD_FIELD_FLOAT64 = 8, AWD_FIELD_BOOL = 21, AWD_FIELD_BADDR = 23, AWD_FIELD_VECTOR2x1 = 41, AWD_FIELD_VECTOR3x1 = 42, AWD_FIELD_VECTOR4x1 = 43, AWD_FIELD_MTX3x2 = 44, AWD_FIELD_MTX3x3 = 45, AWD_FIELD_MTX4x3 = 46, AWD_FIELD_MTX4x4 = 47, BOOL = 21, BADDR = 23, UINT8 = 4, UINT16 = 5, FLOAT32 = 7, FLOAT64 = 8;\n        var littleEndian = true;\n        function Block() {\n            this.id = 0;\n            this.data = null;\n            this.namespace = 0;\n            this.flags = 0;\n        }\n        function AWDProperties() {\n        }\n        AWDProperties.prototype = {\n            set: function (key, value) {\n                this[key] = value;\n            },\n            get: function (key, fallback) {\n                if (this.hasOwnProperty(key)) {\n                    return this[key];\n                } else {\n                    return fallback;\n                }\n            }\n        };\n        var AWDLoader = function (manager) {\n            THREE.Loader.call(this, manager);\n            this.trunk = new THREE.Object3D();\n            this.materialFactory = undefined;\n            this._url = '';\n            this._baseDir = '';\n            this._data = undefined;\n            this._ptr = 0;\n            this._version = [];\n            this._streaming = false;\n            this._optimized_for_accuracy = false;\n            this._compression = 0;\n            this._bodylen = 4294967295;\n            this._blocks = [new Block()];\n            this._accuracyMatrix = false;\n            this._accuracyGeo = false;\n            this._accuracyProps = false;\n        };\n        AWDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: AWDLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var scope = this;\n                this._url = url;\n                this._baseDir = url.substr(0, url.lastIndexOf('/') + 1);\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(this.path);\n                loader.setResponseType('arraybuffer');\n                loader.load(url, function (text) {\n                    onLoad(scope.parse(text));\n                }, onProgress, onError);\n            },\n            parse: function (data) {\n                var blen = data.byteLength;\n                this._ptr = 0;\n                this._data = new DataView(data);\n                this._parseHeader();\n                if (this._compression != 0) {\n                    console.error('compressed AWD not supported');\n                }\n                if (!this._streaming && this._bodylen != data.byteLength - this._ptr) {\n                    console.error('AWDLoader: body len does not match file length', this._bodylen, blen - this._ptr);\n                }\n                while (this._ptr < blen) {\n                    this.parseNextBlock();\n                }\n                return this.trunk;\n            },\n            parseNextBlock: function () {\n                var assetData, block, blockId = this.readU32(), ns = this.readU8(), type = this.readU8(), flags = this.readU8(), len = this.readU32();\n                switch (type) {\n                case 1:\n                    assetData = this.parseMeshData();\n                    break;\n                case 22:\n                    assetData = this.parseContainer();\n                    break;\n                case 23:\n                    assetData = this.parseMeshInstance();\n                    break;\n                case 81:\n                    assetData = this.parseMaterial();\n                    break;\n                case 82:\n                    assetData = this.parseTexture();\n                    break;\n                case 101:\n                    assetData = this.parseSkeleton();\n                    break;\n                case 112:\n                    assetData = this.parseMeshPoseAnimation(false);\n                    break;\n                case 113:\n                    assetData = this.parseVertexAnimationSet();\n                    break;\n                case 102:\n                    assetData = this.parseSkeletonPose();\n                    break;\n                case 103:\n                    assetData = this.parseSkeletonAnimation();\n                    break;\n                case 122:\n                    assetData = this.parseAnimatorSet();\n                    break;\n                default:\n                    this._ptr += len;\n                    break;\n                }\n                this._blocks[blockId] = block = new Block();\n                block.data = assetData;\n                block.id = blockId;\n                block.namespace = ns;\n                block.flags = flags;\n            },\n            _parseHeader: function () {\n                var version = this._version, awdmagic = this.readU8() << 16 | this.readU8() << 8 | this.readU8();\n                if (awdmagic != 4282180)\n                    throw new Error('AWDLoader - bad magic');\n                version[0] = this.readU8();\n                version[1] = this.readU8();\n                var flags = this.readU16();\n                this._streaming = (flags & 1) == 1;\n                if (version[0] === 2 && version[1] === 1) {\n                    this._accuracyMatrix = (flags & 2) === 2;\n                    this._accuracyGeo = (flags & 4) === 4;\n                    this._accuracyProps = (flags & 8) === 8;\n                }\n                this._geoNrType = this._accuracyGeo ? FLOAT64 : FLOAT32;\n                this._matrixNrType = this._accuracyMatrix ? FLOAT64 : FLOAT32;\n                this._propsNrType = this._accuracyProps ? FLOAT64 : FLOAT32;\n                this._optimized_for_accuracy = (flags & 2) === 2;\n                this._compression = this.readU8();\n                this._bodylen = this.readU32();\n            },\n            parseContainer: function () {\n                var parent, ctr = new THREE.Object3D(), par_id = this.readU32(), mtx = this.parseMatrix4();\n                ctr.name = this.readUTF();\n                ctr.applyMatrix4(mtx);\n                parent = this._blocks[par_id].data || this.trunk;\n                parent.add(ctr);\n                this.parseProperties({\n                    1: this._matrixNrType,\n                    2: this._matrixNrType,\n                    3: this._matrixNrType,\n                    4: UINT8\n                });\n                ctr.extra = this.parseUserAttributes();\n                return ctr;\n            },\n            parseMeshInstance: function () {\n                var name, mesh, geometries, meshLen, meshes, par_id, data_id, mtx, materials, mat, mat_id, num_materials, parent, i;\n                par_id = this.readU32();\n                mtx = this.parseMatrix4();\n                name = this.readUTF();\n                data_id = this.readU32();\n                num_materials = this.readU16();\n                geometries = this.getBlock(data_id);\n                materials = [];\n                for (i = 0; i < num_materials; i++) {\n                    mat_id = this.readU32();\n                    mat = this.getBlock(mat_id);\n                    materials.push(mat);\n                }\n                meshLen = geometries.length;\n                meshes = [];\n                if (meshLen > 1) {\n                    mesh = new THREE.Object3D();\n                    for (i = 0; i < meshLen; i++) {\n                        var sm = new THREE.Mesh(geometries[i]);\n                        meshes.push(sm);\n                        mesh.add(sm);\n                    }\n                } else {\n                    mesh = new THREE.Mesh(geometries[0]);\n                    meshes.push(mesh);\n                }\n                mesh.applyMatrix4(mtx);\n                mesh.name = name;\n                parent = this.getBlock(par_id) || this.trunk;\n                parent.add(mesh);\n                var matLen = materials.length;\n                var maxLen = Math.max(meshLen, matLen);\n                for (i = 0; i < maxLen; i++)\n                    meshes[i % meshLen].material = materials[i % matLen];\n                this.parseProperties(null);\n                mesh.extra = this.parseUserAttributes();\n                return mesh;\n            },\n            parseMaterial: function () {\n                var name, type, props, mat, attributes, num_methods, methods_parsed;\n                name = this.readUTF();\n                type = this.readU8();\n                num_methods = this.readU8();\n                props = this.parseProperties({\n                    1: AWD_FIELD_INT32,\n                    2: AWD_FIELD_BADDR,\n                    11: AWD_FIELD_BOOL,\n                    12: AWD_FIELD_FLOAT32,\n                    13: AWD_FIELD_BOOL\n                });\n                methods_parsed = 0;\n                while (methods_parsed < num_methods) {\n                    this.readU16();\n                    this.parseProperties(null);\n                    this.parseUserAttributes();\n                }\n                attributes = this.parseUserAttributes();\n                if (this.materialFactory !== undefined) {\n                    mat = this.materialFactory(name);\n                    if (mat)\n                        return mat;\n                }\n                mat = new THREE.MeshPhongMaterial();\n                if (type === 1) {\n                    mat.color.setHex(props.get(1, 13421772));\n                } else if (type === 2) {\n                    var tex_addr = props.get(2, 0);\n                    mat.map = this.getBlock(tex_addr);\n                }\n                mat.extra = attributes;\n                mat.alphaThreshold = props.get(12, 0);\n                mat.repeat = props.get(13, false);\n                return mat;\n            },\n            parseTexture: function () {\n                var name = this.readUTF(), type = this.readU8(), asset, data_len;\n                if (type === 0) {\n                    data_len = this.readU32();\n                    var url = this.readUTFBytes(data_len);\n                    console.log(url);\n                    asset = this.loadTexture(url);\n                    asset.userData = {};\n                    asset.userData.name = name;\n                } else {\n                }\n                this.parseProperties(null);\n                this.parseUserAttributes();\n                return asset;\n            },\n            loadTexture: function (url) {\n                var tex = new THREE.Texture();\n                var loader = new THREE.ImageLoader(this.manager);\n                loader.load(this._baseDir + url, function (image) {\n                    tex.image = image;\n                    tex.needsUpdate = true;\n                });\n                return tex;\n            },\n            parseSkeleton: function () {\n                this.readUTF();\n                var num_joints = this.readU16(), skeleton = [], joints_parsed = 0;\n                this.parseProperties(null);\n                while (joints_parsed < num_joints) {\n                    var joint, ibp;\n                    this.readU16();\n                    joint = new THREE.Bone();\n                    joint.parent = this.readU16() - 1;\n                    joint.name = this.readUTF();\n                    ibp = this.parseMatrix4();\n                    joint.skinMatrix = ibp;\n                    this.parseProperties(null);\n                    this.parseUserAttributes();\n                    skeleton.push(joint);\n                    joints_parsed++;\n                }\n                this.parseUserAttributes();\n                return skeleton;\n            },\n            parseSkeletonPose: function () {\n                var name = this.readUTF();\n                var num_joints = this.readU16();\n                this.parseProperties(null);\n                var pose = [];\n                var joints_parsed = 0;\n                while (joints_parsed < num_joints) {\n                    var has_transform;\n                    var mtx_data;\n                    has_transform = this.readU8();\n                    if (has_transform === 1) {\n                        mtx_data = this.parseMatrix4();\n                    } else {\n                        mtx_data = new THREE.Matrix4();\n                    }\n                    pose[joints_parsed] = mtx_data;\n                    joints_parsed++;\n                }\n                this.parseUserAttributes();\n                return pose;\n            },\n            parseSkeletonAnimation: function () {\n                var frame_dur;\n                var pose_addr;\n                var pose;\n                var name = this.readUTF();\n                var clip = [];\n                var num_frames = this.readU16();\n                this.parseProperties(null);\n                var frames_parsed = 0;\n                while (frames_parsed < num_frames) {\n                    pose_addr = this.readU32();\n                    frame_dur = this.readU16();\n                    pose = this._blocks[pose_addr].data;\n                    clip.push({\n                        pose: pose,\n                        duration: frame_dur\n                    });\n                    frames_parsed++;\n                }\n                if (clip.length === 0) {\n                    return;\n                }\n                this.parseUserAttributes();\n                return clip;\n            },\n            parseVertexAnimationSet: function () {\n                var poseBlockAdress, name = this.readUTF(), num_frames = this.readU16(), props = this.parseProperties({ 1: UINT16 }), frames_parsed = 0, skeletonFrames = [];\n                while (frames_parsed < num_frames) {\n                    poseBlockAdress = this.readU32();\n                    skeletonFrames.push(this._blocks[poseBlockAdress].data);\n                    frames_parsed++;\n                }\n                this.parseUserAttributes();\n                return skeletonFrames;\n            },\n            parseAnimatorSet: function () {\n                var animSetBlockAdress;\n                var targetAnimationSet;\n                var name = this.readUTF();\n                var type = this.readU16();\n                var props = this.parseProperties({ 1: BADDR });\n                animSetBlockAdress = this.readU32();\n                var targetMeshLength = this.readU16();\n                var meshAdresses = [];\n                for (var i = 0; i < targetMeshLength; i++)\n                    meshAdresses.push(this.readU32());\n                var activeState = this.readU16();\n                var autoplay = Boolean(this.readU8());\n                this.parseUserAttributes();\n                this.parseUserAttributes();\n                var targetMeshes = [];\n                for (i = 0; i < meshAdresses.length; i++) {\n                    targetMeshes.push(this._blocks[meshAdresses[i]].data);\n                }\n                targetAnimationSet = this._blocks[animSetBlockAdress].data;\n                var thisAnimator;\n                if (type == 1) {\n                    thisAnimator = {\n                        animationSet: targetAnimationSet,\n                        skeleton: this._blocks[props.get(1, 0)].data\n                    };\n                } else if (type == 2) {\n                }\n                for (i = 0; i < targetMeshes.length; i++) {\n                    targetMeshes[i].animator = thisAnimator;\n                }\n                return thisAnimator;\n            },\n            parseMeshData: function () {\n                var name = this.readUTF(), num_subs = this.readU16(), geom, subs_parsed = 0, buffer, geometries = [];\n                this.parseProperties({\n                    1: this._geoNrType,\n                    2: this._geoNrType\n                });\n                while (subs_parsed < num_subs) {\n                    var sm_len, sm_end, attrib;\n                    geom = new THREE.BufferGeometry();\n                    geom.name = name;\n                    geometries.push(geom);\n                    sm_len = this.readU32();\n                    sm_end = this._ptr + sm_len;\n                    this.parseProperties({\n                        1: this._geoNrType,\n                        2: this._geoNrType\n                    });\n                    while (this._ptr < sm_end) {\n                        var idx = 0, str_type = this.readU8(), str_ftype = this.readU8(), str_len = this.readU32(), str_end = str_len + this._ptr;\n                        if (str_type === 1) {\n                            buffer = new Float32Array(str_len / 12 * 3);\n                            attrib = new THREE.BufferAttribute(buffer, 3);\n                            geom.setAttribute('position', attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx] = -this.readF32();\n                                buffer[idx + 1] = this.readF32();\n                                buffer[idx + 2] = this.readF32();\n                                idx += 3;\n                            }\n                        } else if (str_type === 2) {\n                            buffer = new Uint16Array(str_len / 2);\n                            attrib = new THREE.BufferAttribute(buffer, 1);\n                            geom.setIndex(attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx + 1] = this.readU16();\n                                buffer[idx] = this.readU16();\n                                buffer[idx + 2] = this.readU16();\n                                idx += 3;\n                            }\n                        } else if (str_type === 3) {\n                            buffer = new Float32Array(str_len / 8 * 2);\n                            attrib = new THREE.BufferAttribute(buffer, 2);\n                            geom.setAttribute('uv', attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx] = this.readF32();\n                                buffer[idx + 1] = 1 - this.readF32();\n                                idx += 2;\n                            }\n                        } else if (str_type === 4) {\n                            buffer = new Float32Array(str_len / 12 * 3);\n                            attrib = new THREE.BufferAttribute(buffer, 3);\n                            geom.setAttribute('normal', attrib);\n                            idx = 0;\n                            while (this._ptr < str_end) {\n                                buffer[idx] = -this.readF32();\n                                buffer[idx + 1] = this.readF32();\n                                buffer[idx + 2] = this.readF32();\n                                idx += 3;\n                            }\n                        } else {\n                            this._ptr = str_end;\n                        }\n                    }\n                    this.parseUserAttributes();\n                    geom.computeBoundingSphere();\n                    subs_parsed++;\n                }\n                this.parseUserAttributes();\n                return geometries;\n            },\n            parseMeshPoseAnimation: function (poseOnly) {\n                var num_frames = 1, num_submeshes, frames_parsed, subMeshParsed, str_len, str_end, geom, idx = 0, clip = {}, num_Streams, streamsParsed, streamtypes = [], props, name = this.readUTF(), geoAdress = this.readU32();\n                var mesh = this.getBlock(geoAdress);\n                if (mesh === null) {\n                    console.log('parseMeshPoseAnimation target mesh not found at:', geoAdress);\n                    return;\n                }\n                geom = mesh.geometry;\n                geom.morphTargets = [];\n                if (!poseOnly)\n                    num_frames = this.readU16();\n                num_submeshes = this.readU16();\n                num_Streams = this.readU16();\n                streamsParsed = 0;\n                while (streamsParsed < num_Streams) {\n                    streamtypes.push(this.readU16());\n                    streamsParsed++;\n                }\n                props = this.parseProperties({\n                    1: BOOL,\n                    2: BOOL\n                });\n                clip.looping = props.get(1, true);\n                clip.stitchFinalFrame = props.get(2, false);\n                frames_parsed = 0;\n                while (frames_parsed < num_frames) {\n                    this.readU16();\n                    subMeshParsed = 0;\n                    while (subMeshParsed < num_submeshes) {\n                        streamsParsed = 0;\n                        str_len = this.readU32();\n                        str_end = this._ptr + str_len;\n                        while (streamsParsed < num_Streams) {\n                            if (streamtypes[streamsParsed] === 1) {\n                                var buffer = new Float32Array(str_len / 4);\n                                geom.morphTargets.push({ array: buffer });\n                                idx = 0;\n                                while (this._ptr < str_end) {\n                                    buffer[idx] = this.readF32();\n                                    buffer[idx + 1] = this.readF32();\n                                    buffer[idx + 2] = this.readF32();\n                                    idx += 3;\n                                }\n                                subMeshParsed++;\n                            } else\n                                this._ptr = str_end;\n                            streamsParsed++;\n                        }\n                    }\n                    frames_parsed++;\n                }\n                this.parseUserAttributes();\n                return null;\n            },\n            getBlock: function (id) {\n                return this._blocks[id].data;\n            },\n            parseMatrix4: function () {\n                var mtx = new THREE.Matrix4();\n                var e = mtx.elements;\n                e[0] = this.readF32();\n                e[1] = this.readF32();\n                e[2] = this.readF32();\n                e[3] = 0;\n                e[4] = this.readF32();\n                e[5] = this.readF32();\n                e[6] = this.readF32();\n                e[7] = 0;\n                e[8] = this.readF32();\n                e[9] = this.readF32();\n                e[10] = this.readF32();\n                e[11] = 0;\n                e[12] = -this.readF32();\n                e[13] = this.readF32();\n                e[14] = this.readF32();\n                e[15] = 1;\n                return mtx;\n            },\n            parseProperties: function (expected) {\n                var list_len = this.readU32();\n                var list_end = this._ptr + list_len;\n                var props = new AWDProperties();\n                if (expected) {\n                    while (this._ptr < list_end) {\n                        var key = this.readU16();\n                        var len = this.readU32();\n                        var type;\n                        if (expected.hasOwnProperty(key)) {\n                            type = expected[key];\n                            props.set(key, this.parseAttrValue(type, len));\n                        } else {\n                            this._ptr += len;\n                        }\n                    }\n                }\n                return props;\n            },\n            parseUserAttributes: function () {\n                this._ptr = this.readU32() + this._ptr;\n                return null;\n            },\n            parseAttrValue: function (type, len) {\n                var elem_len;\n                var read_func;\n                switch (type) {\n                case AWD_FIELD_INT8:\n                    elem_len = 1;\n                    read_func = this.readI8;\n                    break;\n                case AWD_FIELD_INT16:\n                    elem_len = 2;\n                    read_func = this.readI16;\n                    break;\n                case AWD_FIELD_INT32:\n                    elem_len = 4;\n                    read_func = this.readI32;\n                    break;\n                case AWD_FIELD_BOOL:\n                case AWD_FIELD_UINT8:\n                    elem_len = 1;\n                    read_func = this.readU8;\n                    break;\n                case AWD_FIELD_UINT16:\n                    elem_len = 2;\n                    read_func = this.readU16;\n                    break;\n                case AWD_FIELD_UINT32:\n                case AWD_FIELD_BADDR:\n                    elem_len = 4;\n                    read_func = this.readU32;\n                    break;\n                case AWD_FIELD_FLOAT32:\n                    elem_len = 4;\n                    read_func = this.readF32;\n                    break;\n                case AWD_FIELD_FLOAT64:\n                    elem_len = 8;\n                    read_func = this.readF64;\n                    break;\n                case AWD_FIELD_VECTOR2x1:\n                case AWD_FIELD_VECTOR3x1:\n                case AWD_FIELD_VECTOR4x1:\n                case AWD_FIELD_MTX3x2:\n                case AWD_FIELD_MTX3x3:\n                case AWD_FIELD_MTX4x3:\n                case AWD_FIELD_MTX4x4:\n                    elem_len = 8;\n                    read_func = this.readF64;\n                    break;\n                }\n                if (elem_len < len) {\n                    var list;\n                    var num_read;\n                    var num_elems;\n                    list = [];\n                    num_read = 0;\n                    num_elems = len / elem_len;\n                    while (num_read < num_elems) {\n                        list.push(read_func.call(this));\n                        num_read++;\n                    }\n                    return list;\n                } else {\n                    return read_func.call(this);\n                }\n            },\n            readU8: function () {\n                return this._data.getUint8(this._ptr++);\n            },\n            readI8: function () {\n                return this._data.getInt8(this._ptr++);\n            },\n            readU16: function () {\n                var a = this._data.getUint16(this._ptr, littleEndian);\n                this._ptr += 2;\n                return a;\n            },\n            readI16: function () {\n                var a = this._data.getInt16(this._ptr, littleEndian);\n                this._ptr += 2;\n                return a;\n            },\n            readU32: function () {\n                var a = this._data.getUint32(this._ptr, littleEndian);\n                this._ptr += 4;\n                return a;\n            },\n            readI32: function () {\n                var a = this._data.getInt32(this._ptr, littleEndian);\n                this._ptr += 4;\n                return a;\n            },\n            readF32: function () {\n                var a = this._data.getFloat32(this._ptr, littleEndian);\n                this._ptr += 4;\n                return a;\n            },\n            readF64: function () {\n                var a = this._data.getFloat64(this._ptr, littleEndian);\n                this._ptr += 8;\n                return a;\n            },\n            readUTF: function () {\n                var len = this.readU16();\n                return this.readUTFBytes(len);\n            },\n            readUTFBytes: function (len) {\n                var out = [], c = 0;\n                while (out.length < len) {\n                    var c1 = this._data.getUint8(this._ptr++, littleEndian);\n                    if (c1 < 128) {\n                        out[c++] = String.fromCharCode(c1);\n                    } else if (c1 > 191 && c1 < 224) {\n                        var c2 = this._data.getUint8(this._ptr++, littleEndian);\n                        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n                    } else {\n                        var c2 = this._data.getUint8(this._ptr++, littleEndian);\n                        var c3 = this._data.getUint8(this._ptr++, littleEndian);\n                        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n                    }\n                }\n                return out.join('');\n            }\n        });\n        return AWDLoader;\n    }();\n    return AWDLoader;\n});"]}