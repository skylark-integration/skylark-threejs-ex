{"version":3,"sources":["loaders/obj2/utils/CodeSerializer.js"],"names":["define","serializeClass","targetPrototype","targetPrototypeInstance","basePrototypeName","overrideFunctions","objectPart","constructorString","i","funcInstructions","funcTemp","fullObjectName","constructor","name","prototypeFunctions","objectProperties","objectFunctions","isExtended","undefined","Array","isArray","prototype","CodeSerializationInstruction","setCode","toString","isRemoveCode","getCode","getName","push","getFullName","String","console","log","objectString","length"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aA0FA,OAxFIC,eAAgB,SAAUC,EAAiBC,EAAyBC,EAAmBC,GACnF,IAAIC,EAAYC,EAAmBC,EAAGC,EAAkBC,EACpDC,EAAiBR,EAAwBS,YAAYC,KACrDC,KACAC,KACAC,KACAC,EAAmC,OAAtBb,QAAoDc,IAAtBd,EAC1Ce,MAAMC,QAAQf,KACfA,MACJ,IAAK,IAAIQ,KAAQX,EAAgBmB,UAC7Bf,EAAaJ,EAAgBmB,UAAUR,IACvCJ,EAAmB,IAAIa,6BAA6BT,EAAMF,EAAiB,cAAgBE,IAC1EU,QAAQjB,EAAWkB,YACvB,gBAATX,EACKJ,EAAiBgB,iBAClBlB,EAAoBI,EAAiB,MAAQF,EAAiBiB,UAAY,SAEjD,mBAAfpB,KACdI,EAAWL,EAAkBQ,cACLS,8BAAgCZ,EAASiB,YAAclB,EAAiBkB,YAC5FlB,EAAmBC,GAElBD,EAAiBgB,iBACdR,EACAH,EAAmBc,KAAKnB,EAAiBoB,cAAgB,MAAQpB,EAAiBiB,UAAY,SAE9FZ,EAAmBc,KAAK,KAAOnB,EAAiBkB,UAAY,KAAOlB,EAAiBiB,UAAY,WAKhH,IAAK,IAAIb,KAAQX,EACbI,EAAaJ,EAAgBW,GAC7BJ,EAAmB,IAAIa,6BAA6BT,EAAMF,EAAiB,IAAME,GACvD,mBAAfP,IACPI,EAAWL,EAAkBQ,cACLS,8BAAgCZ,EAASiB,YAAclB,EAAiBkB,UAC5FlB,EAAmBC,EAEnBD,EAAiBc,QAAQjB,EAAWkB,YAEnCf,EAAiBgB,gBAClBT,EAAgBY,KAAKnB,EAAiBoB,cAAgB,MAAQpB,EAAiBiB,UAAY,WAGrE,iBAAfpB,GAA2BA,aAAsBwB,OACxDrB,EAAiBc,QAAQ,IAAMjB,EAAWkB,WAAa,KAC1B,iBAAflB,GACdyB,QAAQC,IAAI,oBAAsBvB,EAAiBkB,UAAY,uCAC/DlB,EAAiBc,QAAQ,OAEzBd,EAAiBc,QAAQjB,GAExBG,EAAiBgB,gBAClBV,EAAiBa,KAAKnB,EAAiBoB,cAAgB,MAAQpB,EAAiBiB,UAAY,QAIxG,IAAIO,EAAe1B,EAAoB,OAMvC,IALIU,IACAgB,GAAgBtB,EAAiB,+BAAiCP,EAAoB,mBAE1F6B,GAAgBtB,EAAiB,4BAA8BA,EAAiB,MAChFsB,GAAgB,OACXzB,EAAI,EAAGA,EAAIO,EAAiBmB,OAAQ1B,IACrCyB,GAAgBlB,EAAiBP,GAGrC,IADAyB,GAAgB,OACXzB,EAAI,EAAGA,EAAIQ,EAAgBkB,OAAQ1B,IACpCyB,GAAgBjB,EAAgBR,GAGpC,GADAyB,GAAgB,OACZhB,EACA,IAAKT,EAAI,EAAGA,EAAIM,EAAmBoB,OAAQ1B,IACvCyB,GAAgBnB,EAAmBN,OAEpC,CAEH,IADAyB,GAAgBtB,EAAiB,qBAC5BH,EAAI,EAAGA,EAAIM,EAAmBoB,OAAQ1B,IACvCyB,GAAgBnB,EAAmBN,GAEvCyB,GAAgB,OAGpB,OADAA,GAAgB","file":"../../../../loaders/obj2/utils/CodeSerializer.js","sourcesContent":["define(function () {\n    'use strict';\n    const CodeSerializer = {\n        serializeClass: function (targetPrototype, targetPrototypeInstance, basePrototypeName, overrideFunctions) {\n            let objectPart, constructorString, i, funcInstructions, funcTemp;\n            let fullObjectName = targetPrototypeInstance.constructor.name;\n            let prototypeFunctions = [];\n            let objectProperties = [];\n            let objectFunctions = [];\n            let isExtended = basePrototypeName !== null && basePrototypeName !== undefined;\n            if (!Array.isArray(overrideFunctions))\n                overrideFunctions = [];\n            for (let name in targetPrototype.prototype) {\n                objectPart = targetPrototype.prototype[name];\n                funcInstructions = new CodeSerializationInstruction(name, fullObjectName + '.prototype.' + name);\n                funcInstructions.setCode(objectPart.toString());\n                if (name === 'constructor') {\n                    if (!funcInstructions.isRemoveCode()) {\n                        constructorString = fullObjectName + ' = ' + funcInstructions.getCode() + ';\\n\\n';\n                    }\n                } else if (typeof objectPart === 'function') {\n                    funcTemp = overrideFunctions[name];\n                    if (funcTemp instanceof CodeSerializationInstruction && funcTemp.getName() === funcInstructions.getName()) {\n                        funcInstructions = funcTemp;\n                    }\n                    if (!funcInstructions.isRemoveCode()) {\n                        if (isExtended) {\n                            prototypeFunctions.push(funcInstructions.getFullName() + ' = ' + funcInstructions.getCode() + ';\\n\\n');\n                        } else {\n                            prototypeFunctions.push('\\t' + funcInstructions.getName() + ': ' + funcInstructions.getCode() + ',\\n\\n');\n                        }\n                    }\n                }\n            }\n            for (let name in targetPrototype) {\n                objectPart = targetPrototype[name];\n                funcInstructions = new CodeSerializationInstruction(name, fullObjectName + '.' + name);\n                if (typeof objectPart === 'function') {\n                    funcTemp = overrideFunctions[name];\n                    if (funcTemp instanceof CodeSerializationInstruction && funcTemp.getName() === funcInstructions.getName()) {\n                        funcInstructions = funcTemp;\n                    } else {\n                        funcInstructions.setCode(objectPart.toString());\n                    }\n                    if (!funcInstructions.isRemoveCode()) {\n                        objectFunctions.push(funcInstructions.getFullName() + ' = ' + funcInstructions.getCode() + ';\\n\\n');\n                    }\n                } else {\n                    if (typeof objectPart === 'string' || objectPart instanceof String) {\n                        funcInstructions.setCode('\"' + objectPart.toString() + '\"');\n                    } else if (typeof objectPart === 'object') {\n                        console.log('Omitting object \"' + funcInstructions.getName() + '\" and replace it with empty object.');\n                        funcInstructions.setCode('{}');\n                    } else {\n                        funcInstructions.setCode(objectPart);\n                    }\n                    if (!funcInstructions.isRemoveCode()) {\n                        objectProperties.push(funcInstructions.getFullName() + ' = ' + funcInstructions.getCode() + ';\\n');\n                    }\n                }\n            }\n            let objectString = constructorString + '\\n\\n';\n            if (isExtended) {\n                objectString += fullObjectName + '.prototype = Object.create( ' + basePrototypeName + '.prototype );\\n';\n            }\n            objectString += fullObjectName + '.prototype.constructor = ' + fullObjectName + ';\\n';\n            objectString += '\\n\\n';\n            for (i = 0; i < objectProperties.length; i++) {\n                objectString += objectProperties[i];\n            }\n            objectString += '\\n\\n';\n            for (i = 0; i < objectFunctions.length; i++) {\n                objectString += objectFunctions[i];\n            }\n            objectString += '\\n\\n';\n            if (isExtended) {\n                for (i = 0; i < prototypeFunctions.length; i++) {\n                    objectString += prototypeFunctions[i];\n                }\n            } else {\n                objectString += fullObjectName + '.prototype = {\\n\\n';\n                for (i = 0; i < prototypeFunctions.length; i++) {\n                    objectString += prototypeFunctions[i];\n                }\n                objectString += '\\n};';\n            }\n            objectString += '\\n\\n';\n            return objectString;\n        }\n    };\n\n    return  CodeSerializer;\n});"]}