{"version":3,"sources":["loaders/obj2/worker/main/WorkerExecutionSupport.js"],"names":["define","CodeBuilderInstructions","supportsStandardWorker","supportsJsmWorker","preferJsmWorker","this","startCode","codeFragments","importStatements","jsmWorkerUrl","defaultGeometryType","prototype","constructor","isSupportsStandardWorker","isSupportsJsmWorker","isPreferJsmWorker","setJsmWorkerUrl","undefined","addStartCode","addCodeFragment","code","push","addLibraryImport","libraryPath","URL","window","location","href","getImportStatements","getCodeFragments","getStartCode","WorkerExecutionSupport","Worker","Blob","createObjectURL","_reset","WORKER_SUPPORT_VERSION","console","info","logging","enabled","debug","scope","worker","native","jsmWorker","workerRunner","name","usesMeshDisassembler","terminateWorkerOnLoad","forceWorkerDataCopy","started","queuedMessage","callbacks","onAssetAvailable","onLoad","terminate","_terminate","setLogging","setForceWorkerDataCopy","setTerminateWorkerOnLoad","isWorkerLoaded","updateCallbacks","_verifyCallbacks","buildWorker","codeBuilderInstructions","jsmSuccess","_buildWorkerJsm","_buildWorkerStandard","_buildWorkerCheckPreconditions","type","_configureWorkerCommunication","e","TypeError","SyntaxError","error","concatenateCode","forEach","element","blob","requireJsmWorker","timeLabel","workerAvailable","time","haveJsmWorker","scopedReceiveWorkerMessage","event","_receiveWorkerMessage","onmessage","onerror","timeEnd","payload","data","workerRunnerName","cmd","msg","executeParallel","transferables","_verifyWorkerIsAvailable","_postMessage","ready","warn","input","ArrayBuffer","slice","length","concat","postMessage"],"mappings":"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","file":"../../../../../loaders/obj2/worker/main/WorkerExecutionSupport.js","sourcesContent":["define(function () {\r\n    'use strict';\r\n    const CodeBuilderInstructions = function (supportsStandardWorker, supportsJsmWorker, preferJsmWorker) {\r\n        this.supportsStandardWorker = supportsStandardWorker;\r\n        this.supportsJsmWorker = supportsJsmWorker;\r\n        this.preferJsmWorker = preferJsmWorker;\r\n        this.startCode = '';\r\n        this.codeFragments = [];\r\n        this.importStatements = [];\r\n        this.jsmWorkerUrl = null;\r\n        this.defaultGeometryType = 0;\r\n    };\r\n    CodeBuilderInstructions.prototype = {\r\n        constructor: CodeBuilderInstructions,\r\n        isSupportsStandardWorker: function () {\r\n            return this.supportsStandardWorker;\r\n        },\r\n        isSupportsJsmWorker: function () {\r\n            return this.supportsJsmWorker;\r\n        },\r\n        isPreferJsmWorker: function () {\r\n            return this.preferJsmWorker;\r\n        },\r\n        setJsmWorkerUrl: function (jsmWorkerUrl) {\r\n            if (jsmWorkerUrl !== undefined && jsmWorkerUrl !== null) {\r\n                this.jsmWorkerUrl = jsmWorkerUrl;\r\n            }\r\n        },\r\n        addStartCode: function (startCode) {\r\n            this.startCode = startCode;\r\n        },\r\n        addCodeFragment: function (code) {\r\n            this.codeFragments.push(code);\r\n        },\r\n        addLibraryImport: function (libraryPath) {\r\n            let libraryUrl = new URL(libraryPath, window.location.href).href;\r\n            let code = 'importScripts( \"' + libraryUrl + '\" );';\r\n            this.importStatements.push(code);\r\n        },\r\n        getImportStatements: function () {\r\n            return this.importStatements;\r\n        },\r\n        getCodeFragments: function () {\r\n            return this.codeFragments;\r\n        },\r\n        getStartCode: function () {\r\n            return this.startCode;\r\n        }\r\n    };\r\n    const WorkerExecutionSupport = function () {\r\n        if (window.Worker === undefined)\r\n            throw 'This browser does not support web workers!';\r\n        if (window.Blob === undefined)\r\n            throw 'This browser does not support Blob!';\r\n        if (typeof window.URL.createObjectURL !== 'function')\r\n            throw 'This browser does not support Object creation from URL!';\r\n        this._reset();\r\n    };\r\n    WorkerExecutionSupport.WORKER_SUPPORT_VERSION = '3.2.0';\r\n    console.info('Using WorkerSupport version: ' + WorkerExecutionSupport.WORKER_SUPPORT_VERSION);\r\n    WorkerExecutionSupport.prototype = {\r\n        constructor: WorkerExecutionSupport,\r\n        _reset: function () {\r\n            this.logging = {\r\n                enabled: false,\r\n                debug: false\r\n            };\r\n            let scope = this;\r\n            let scopeTerminate = function () {\r\n                scope._terminate();\r\n            };\r\n            this.worker = {\r\n                native: null,\r\n                jsmWorker: false,\r\n                logging: true,\r\n                workerRunner: {\r\n                    name: 'WorkerRunner',\r\n                    usesMeshDisassembler: false,\r\n                    defaultGeometryType: 0\r\n                },\r\n                terminateWorkerOnLoad: true,\r\n                forceWorkerDataCopy: false,\r\n                started: false,\r\n                queuedMessage: null,\r\n                callbacks: {\r\n                    onAssetAvailable: null,\r\n                    onLoad: null,\r\n                    terminate: scopeTerminate\r\n                }\r\n            };\r\n        },\r\n        setLogging: function (enabled, debug) {\r\n            this.logging.enabled = enabled === true;\r\n            this.logging.debug = debug === true;\r\n            this.worker.logging = enabled === true;\r\n            return this;\r\n        },\r\n        setForceWorkerDataCopy: function (forceWorkerDataCopy) {\r\n            this.worker.forceWorkerDataCopy = forceWorkerDataCopy === true;\r\n            return this;\r\n        },\r\n        setTerminateWorkerOnLoad: function (terminateWorkerOnLoad) {\r\n            this.worker.terminateWorkerOnLoad = terminateWorkerOnLoad === true;\r\n            if (this.worker.terminateWorkerOnLoad && this.isWorkerLoaded(this.worker.jsmWorker) && this.worker.queuedMessage === null && this.worker.started) {\r\n                if (this.logging.enabled) {\r\n                    console.info('Worker is terminated immediately as it is not running!');\r\n                }\r\n                this._terminate();\r\n            }\r\n            return this;\r\n        },\r\n        updateCallbacks: function (onAssetAvailable, onLoad) {\r\n            if (onAssetAvailable !== undefined && onAssetAvailable !== null) {\r\n                this.worker.callbacks.onAssetAvailable = onAssetAvailable;\r\n            }\r\n            if (onLoad !== undefined && onLoad !== null) {\r\n                this.worker.callbacks.onLoad = onLoad;\r\n            }\r\n            this._verifyCallbacks();\r\n        },\r\n        _verifyCallbacks: function () {\r\n            if (this.worker.callbacks.onAssetAvailable === undefined || this.worker.callbacks.onAssetAvailable === null) {\r\n                throw 'Unable to run as no \"onAssetAvailable\" callback is set.';\r\n            }\r\n        },\r\n        buildWorker: function (codeBuilderInstructions) {\r\n            let jsmSuccess = false;\r\n            if (codeBuilderInstructions.isSupportsJsmWorker() && codeBuilderInstructions.isPreferJsmWorker()) {\r\n                jsmSuccess = this._buildWorkerJsm(codeBuilderInstructions);\r\n            }\r\n            if (!jsmSuccess && codeBuilderInstructions.isSupportsStandardWorker()) {\r\n                this._buildWorkerStandard(codeBuilderInstructions);\r\n            }\r\n        },\r\n        _buildWorkerJsm: function (codeBuilderInstructions) {\r\n            let jsmSuccess = true;\r\n            let timeLabel = 'buildWorkerJsm';\r\n            let workerAvailable = this._buildWorkerCheckPreconditions(true, timeLabel);\r\n            if (!workerAvailable) {\r\n                try {\r\n                    let worker = new Worker(codeBuilderInstructions.jsmWorkerUrl.href, { type: 'module' });\r\n                    this._configureWorkerCommunication(worker, true, codeBuilderInstructions.defaultGeometryType, timeLabel);\r\n                } catch (e) {\r\n                    jsmSuccess = false;\r\n                    if (e instanceof TypeError || e instanceof SyntaxError) {\r\n                        console.error('Modules are not supported in workers.');\r\n                    }\r\n                }\r\n            }\r\n            return jsmSuccess;\r\n        },\r\n        _buildWorkerStandard: function (codeBuilderInstructions) {\r\n            let timeLabel = 'buildWorkerStandard';\r\n            let workerAvailable = this._buildWorkerCheckPreconditions(false, timeLabel);\r\n            if (!workerAvailable) {\r\n                let concatenateCode = '';\r\n                codeBuilderInstructions.getImportStatements().forEach(function (element) {\r\n                    concatenateCode += element + '\\n';\r\n                });\r\n                concatenateCode += '\\n';\r\n                codeBuilderInstructions.getCodeFragments().forEach(function (element) {\r\n                    concatenateCode += element + '\\n';\r\n                });\r\n                concatenateCode += '\\n';\r\n                concatenateCode += codeBuilderInstructions.getStartCode();\r\n                let blob = new Blob([concatenateCode], { type: 'application/javascript' });\r\n                let worker = new Worker(window.URL.createObjectURL(blob));\r\n                this._configureWorkerCommunication(worker, false, codeBuilderInstructions.defaultGeometryType, timeLabel);\r\n            }\r\n        },\r\n        _buildWorkerCheckPreconditions: function (requireJsmWorker, timeLabel) {\r\n            let workerAvailable = false;\r\n            if (this.isWorkerLoaded(requireJsmWorker)) {\r\n                workerAvailable = true;\r\n            } else {\r\n                if (this.logging.enabled) {\r\n                    console.info('WorkerExecutionSupport: Building ' + (requireJsmWorker ? 'jsm' : 'standard') + ' worker code...');\r\n                    console.time(timeLabel);\r\n                }\r\n            }\r\n            return workerAvailable;\r\n        },\r\n        _configureWorkerCommunication: function (worker, haveJsmWorker, defaultGeometryType, timeLabel) {\r\n            this.worker.native = worker;\r\n            this.worker.jsmWorker = haveJsmWorker;\r\n            let scope = this;\r\n            let scopedReceiveWorkerMessage = function (event) {\r\n                scope._receiveWorkerMessage(event);\r\n            };\r\n            this.worker.native.onmessage = scopedReceiveWorkerMessage;\r\n            this.worker.native.onerror = scopedReceiveWorkerMessage;\r\n            if (defaultGeometryType !== undefined && defaultGeometryType !== null) {\r\n                this.worker.workerRunner.defaultGeometryType = defaultGeometryType;\r\n            }\r\n            if (this.logging.enabled) {\r\n                console.timeEnd(timeLabel);\r\n            }\r\n        },\r\n        isWorkerLoaded: function (requireJsmWorker) {\r\n            return this.worker.native !== null && (requireJsmWorker && this.worker.jsmWorker || !requireJsmWorker && !this.worker.jsmWorker);\r\n        },\r\n        _receiveWorkerMessage: function (event) {\r\n            if (event.type === 'error') {\r\n                console.error(event);\r\n                return;\r\n            }\r\n            let payload = event.data;\r\n            let workerRunnerName = this.worker.workerRunner.name;\r\n            switch (payload.cmd) {\r\n            case 'assetAvailable':\r\n                this.worker.callbacks.onAssetAvailable(payload);\r\n                break;\r\n            case 'completeOverall':\r\n                this.worker.queuedMessage = null;\r\n                this.worker.started = false;\r\n                if (this.worker.callbacks.onLoad !== null) {\r\n                    this.worker.callbacks.onLoad(payload.msg);\r\n                }\r\n                if (this.worker.terminateWorkerOnLoad) {\r\n                    if (this.worker.logging.enabled) {\r\n                        console.info('WorkerSupport [' + workerRunnerName + ']: Run is complete. Terminating application on request!');\r\n                    }\r\n                    this.worker.callbacks.terminate();\r\n                }\r\n                break;\r\n            case 'error':\r\n                console.error('WorkerSupport [' + workerRunnerName + ']: Reported error: ' + payload.msg);\r\n                this.worker.queuedMessage = null;\r\n                this.worker.started = false;\r\n                if (this.worker.callbacks.onLoad !== null) {\r\n                    this.worker.callbacks.onLoad(payload.msg);\r\n                }\r\n                if (this.worker.terminateWorkerOnLoad) {\r\n                    if (this.worker.logging.enabled) {\r\n                        console.info('WorkerSupport [' + workerRunnerName + ']: Run reported error. Terminating application on request!');\r\n                    }\r\n                    this.worker.callbacks.terminate();\r\n                }\r\n                break;\r\n            default:\r\n                console.error('WorkerSupport [' + workerRunnerName + ']: Received unknown command: ' + payload.cmd);\r\n                break;\r\n            }\r\n        },\r\n        executeParallel: function (payload, transferables) {\r\n            payload.cmd = 'parse';\r\n            payload.usesMeshDisassembler = this.worker.workerRunner.usesMeshDisassembler;\r\n            payload.defaultGeometryType = this.worker.workerRunner.defaultGeometryType;\r\n            if (!this._verifyWorkerIsAvailable(payload, transferables))\r\n                return;\r\n            this._postMessage();\r\n        },\r\n        _verifyWorkerIsAvailable: function (payload, transferables) {\r\n            this._verifyCallbacks();\r\n            let ready = true;\r\n            if (this.worker.queuedMessage !== null) {\r\n                console.warn('Already processing message. Rejecting new run instruction');\r\n                ready = false;\r\n            } else {\r\n                this.worker.queuedMessage = {\r\n                    payload: payload,\r\n                    transferables: transferables === undefined || transferables === null ? [] : transferables\r\n                };\r\n                this.worker.started = true;\r\n            }\r\n            return ready;\r\n        },\r\n        _postMessage: function () {\r\n            if (this.worker.queuedMessage !== null) {\r\n                if (this.worker.queuedMessage.payload.data.input instanceof ArrayBuffer) {\r\n                    let transferables = [];\r\n                    if (this.worker.forceWorkerDataCopy) {\r\n                        transferables.push(this.worker.queuedMessage.payload.data.input.slice(0));\r\n                    } else {\r\n                        transferables.push(this.worker.queuedMessage.payload.data.input);\r\n                    }\r\n                    if (this.worker.queuedMessage.transferables.length > 0) {\r\n                        transferables = transferables.concat(this.worker.queuedMessage.transferables);\r\n                    }\r\n                    this.worker.native.postMessage(this.worker.queuedMessage.payload, transferables);\r\n                } else {\r\n                    this.worker.native.postMessage(this.worker.queuedMessage.payload);\r\n                }\r\n            }\r\n        },\r\n        _terminate: function () {\r\n            this.worker.native.terminate();\r\n            this._reset();\r\n        }\r\n    };\r\n    return {\r\n        CodeBuilderInstructions,\r\n        WorkerExecutionSupport\r\n    };\r\n});"]}