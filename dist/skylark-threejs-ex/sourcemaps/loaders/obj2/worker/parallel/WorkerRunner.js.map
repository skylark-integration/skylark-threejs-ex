{"version":3,"sources":["loaders/obj2/worker/parallel/WorkerRunner.js"],"names":["define","ObjectManipulator","prototype","constructor","applyProperties","objToAlter","params","forceCreation","undefined","property","funcName","values","substring","toLocaleUpperCase","hasOwnProperty","DefaultWorkerPayloadHandler","parser","this","logging","enabled","debug","handlePayload","payload","cmd","scope","callbacks","callbackOnAssetAvailable","self","postMessage","callbackOnProgress","text","console","setLogging","objectManipulator","arraybuffer","data","input","executeFunctionName","getParseFunctionName","usesMeshDisassembler","options","log","msg","error","WorkerRunner","payloadHandler","addEventListener","event","processMessage"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,EAAoB,aAE1BA,EAAkBC,WACdC,YAAaF,EACbG,gBAAiB,SAAUC,EAAYC,EAAQC,GAC3C,QAAmBC,IAAfH,GAA2C,OAAfA,QAAkCG,IAAXF,GAAmC,OAAXA,EAC3E,OACJ,IAAIG,EAAUC,EAAUC,EACxB,IAAKF,KAAYH,EACbI,EAAW,MAAQD,EAASG,UAAU,EAAG,GAAGC,oBAAsBJ,EAASG,UAAU,GACrFD,EAASL,EAAOG,GACoB,mBAAzBJ,EAAWK,GAClBL,EAAWK,GAAUC,IACdN,EAAWS,eAAeL,IAAaF,KAC9CF,EAAWI,GAAYE,KAKvC,MAAMI,EAA8B,SAAUC,GAC1CC,KAAKD,OAASA,EACdC,KAAKC,SACDC,SAAS,EACTC,OAAO,IAGfL,EAA4Bb,WACxBC,YAAaY,EACbM,cAAe,SAAUC,GAKrB,GAJIA,EAAQJ,UACRD,KAAKC,QAAQC,SAAsC,IAA5BG,EAAQJ,QAAQC,QACvCF,KAAKC,QAAQE,OAAkC,IAA1BE,EAAQJ,QAAQE,OAErB,UAAhBE,EAAQC,IAAiB,CACzB,IAAIC,EAAQP,KACRQ,GACAC,yBAA0B,SAAUJ,GAChCK,KAAKC,YAAYN,IAErBO,mBAAoB,SAAUC,GACtBN,EAAMN,QAAQC,SAAWK,EAAMN,QAAQE,OACvCW,QAAQX,MAAM,2BAA6BU,KAGnDd,EAASC,KAAKD,OACkB,mBAAzBA,EAAmB,YAC1BA,EAAOgB,WAAWf,KAAKC,QAAQC,QAASF,KAAKC,QAAQE,OAEzD,IAAIa,EAAoB,IAAIhC,EAC5BgC,EAAkB7B,gBAAgBY,EAAQM,EAAQhB,QAAQ,GAC1D2B,EAAkB7B,gBAAgBY,EAAQS,GAAW,GACrD,IAAIS,EAAcZ,EAAQa,KAAKC,MAC3BC,EAAsB,UACiB,mBAAhCrB,EAAOsB,uBACdD,EAAsBrB,EAAOsB,wBAC7BhB,EAAQiB,sBAERvB,EAAOqB,GAAqBH,EAAaZ,EAAQa,KAAKK,SAEtDvB,KAAKC,QAAQC,SACbY,QAAQU,IAAI,+BAChBd,KAAKC,aACDL,IAAK,kBACLmB,IAAK,qCAGTX,QAAQY,MAAM,2CAA6CrB,EAAQC,OAI/E,MAAMqB,EAAe,SAAUC,GAC3B5B,KAAK4B,eAAiBA,EACtB,IAAIrB,EAAQP,KAIZU,KAAKmB,iBAAiB,UAHH,SAAUC,GACzBvB,EAAMwB,eAAeD,EAAMZ,QAEgB,IAQnD,OANAS,EAAa1C,WACTC,YAAayC,EACbI,eAAgB,SAAU1B,GACtBL,KAAK4B,eAAexB,cAAcC,MAItCsB,aAAAA,EACA7B,4BAAAA,EACAd,kBAAAA","file":"../../../../../loaders/obj2/worker/parallel/WorkerRunner.js","sourcesContent":["define(function () {\r\n    'use strict';\r\n    const ObjectManipulator = function () {\r\n    };\r\n    ObjectManipulator.prototype = {\r\n        constructor: ObjectManipulator,\r\n        applyProperties: function (objToAlter, params, forceCreation) {\r\n            if (objToAlter === undefined || objToAlter === null || params === undefined || params === null)\r\n                return;\r\n            let property, funcName, values;\r\n            for (property in params) {\r\n                funcName = 'set' + property.substring(0, 1).toLocaleUpperCase() + property.substring(1);\r\n                values = params[property];\r\n                if (typeof objToAlter[funcName] === 'function') {\r\n                    objToAlter[funcName](values);\r\n                } else if (objToAlter.hasOwnProperty(property) || forceCreation) {\r\n                    objToAlter[property] = values;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const DefaultWorkerPayloadHandler = function (parser) {\r\n        this.parser = parser;\r\n        this.logging = {\r\n            enabled: false,\r\n            debug: false\r\n        };\r\n    };\r\n    DefaultWorkerPayloadHandler.prototype = {\r\n        constructor: DefaultWorkerPayloadHandler,\r\n        handlePayload: function (payload) {\r\n            if (payload.logging) {\r\n                this.logging.enabled = payload.logging.enabled === true;\r\n                this.logging.debug = payload.logging.debug === true;\r\n            }\r\n            if (payload.cmd === 'parse') {\r\n                let scope = this;\r\n                let callbacks = {\r\n                    callbackOnAssetAvailable: function (payload) {\r\n                        self.postMessage(payload);\r\n                    },\r\n                    callbackOnProgress: function (text) {\r\n                        if (scope.logging.enabled && scope.logging.debug)\r\n                            console.debug('WorkerRunner: progress: ' + text);\r\n                    }\r\n                };\r\n                let parser = this.parser;\r\n                if (typeof parser['setLogging'] === 'function') {\r\n                    parser.setLogging(this.logging.enabled, this.logging.debug);\r\n                }\r\n                let objectManipulator = new ObjectManipulator();\r\n                objectManipulator.applyProperties(parser, payload.params, false);\r\n                objectManipulator.applyProperties(parser, callbacks, false);\r\n                let arraybuffer = payload.data.input;\r\n                let executeFunctionName = 'execute';\r\n                if (typeof parser.getParseFunctionName === 'function')\r\n                    executeFunctionName = parser.getParseFunctionName();\r\n                if (payload.usesMeshDisassembler) {\r\n                } else {\r\n                    parser[executeFunctionName](arraybuffer, payload.data.options);\r\n                }\r\n                if (this.logging.enabled)\r\n                    console.log('WorkerRunner: Run complete!');\r\n                self.postMessage({\r\n                    cmd: 'completeOverall',\r\n                    msg: 'WorkerRunner completed run.'\r\n                });\r\n            } else {\r\n                console.error('WorkerRunner: Received unknown command: ' + payload.cmd);\r\n            }\r\n        }\r\n    };\r\n    const WorkerRunner = function (payloadHandler) {\r\n        this.payloadHandler = payloadHandler;\r\n        let scope = this;\r\n        let scopedRunner = function (event) {\r\n            scope.processMessage(event.data);\r\n        };\r\n        self.addEventListener('message', scopedRunner, false);\r\n    };\r\n    WorkerRunner.prototype = {\r\n        constructor: WorkerRunner,\r\n        processMessage: function (payload) {\r\n            this.payloadHandler.handlePayload(payload);\r\n        }\r\n    };\r\n    return {\r\n        WorkerRunner,\r\n        DefaultWorkerPayloadHandler,\r\n        ObjectManipulator\r\n    };\r\n});"]}