{"version":3,"sources":["loaders/obj2/shared/MaterialHandler.js"],"names":["define","THREE","MaterialHandler","this","logging","enabled","debug","callbacks","onLoadMaterials","materials","prototype","constructor","setLogging","_setCallbacks","undefined","Function","createDefaultMaterials","overrideExisting","defaultMaterial","MeshStandardMaterial","color","name","defaultVertexColorMaterial","vertexColors","VertexColors","defaultLineMaterial","LineBasicMaterial","defaultPointMaterial","PointsMaterial","size","runtimeMaterials","addMaterials","addPayloadMaterials","materialPayload","material","materialName","materialCloneInstructions","newMaterials","materialNameOrg","materialOrg","clone","Object","assign","materialProperties","console","info","serializedMaterials","keys","length","materialJson","loader","MaterialLoader","parse","existingMaterial","add","getMaterials","getMaterial","getMaterialsJSON","materialsJSON","toJSON","clearMaterials"],"mappings":"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","file":"../../../../loaders/obj2/shared/MaterialHandler.js","sourcesContent":["define([\r\n    'skylark-threejs'\r\n], function (THREE) {\r\n    'use strict';\r\n    const MaterialHandler = function () {\r\n        this.logging = {\r\n            enabled: false,\r\n            debug: false\r\n        };\r\n        this.callbacks = { onLoadMaterials: null };\r\n        this.materials = {};\r\n    };\r\n    MaterialHandler.prototype = {\r\n        constructor: MaterialHandler,\r\n        setLogging: function (enabled, debug) {\r\n            this.logging.enabled = enabled === true;\r\n            this.logging.debug = debug === true;\r\n        },\r\n        _setCallbacks: function (onLoadMaterials) {\r\n            if (onLoadMaterials !== undefined && onLoadMaterials !== null && onLoadMaterials instanceof Function) {\r\n                this.callbacks.onLoadMaterials = onLoadMaterials;\r\n            }\r\n        },\r\n        createDefaultMaterials: function (overrideExisting) {\r\n            let defaultMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });\r\n            defaultMaterial.name = 'defaultMaterial';\r\n            let defaultVertexColorMaterial = new THREE.MeshStandardMaterial({ color: 14479871 });\r\n            defaultVertexColorMaterial.name = 'defaultVertexColorMaterial';\r\n            defaultVertexColorMaterial.vertexColors = THREE.VertexColors;\r\n            let defaultLineMaterial = new THREE.LineBasicMaterial();\r\n            defaultLineMaterial.name = 'defaultLineMaterial';\r\n            let defaultPointMaterial = new THREE.PointsMaterial({ size: 0.1 });\r\n            defaultPointMaterial.name = 'defaultPointMaterial';\r\n            let runtimeMaterials = {};\r\n            runtimeMaterials[defaultMaterial.name] = defaultMaterial;\r\n            runtimeMaterials[defaultVertexColorMaterial.name] = defaultVertexColorMaterial;\r\n            runtimeMaterials[defaultLineMaterial.name] = defaultLineMaterial;\r\n            runtimeMaterials[defaultPointMaterial.name] = defaultPointMaterial;\r\n            this.addMaterials(runtimeMaterials, overrideExisting);\r\n        },\r\n        addPayloadMaterials: function (materialPayload) {\r\n            let material, materialName;\r\n            let materialCloneInstructions = materialPayload.materials.materialCloneInstructions;\r\n            let newMaterials = {};\r\n            if (materialCloneInstructions !== undefined && materialCloneInstructions !== null) {\r\n                let materialNameOrg = materialCloneInstructions.materialNameOrg;\r\n                materialNameOrg = materialNameOrg !== undefined && materialNameOrg !== null ? materialNameOrg : '';\r\n                let materialOrg = this.materials[materialNameOrg];\r\n                if (materialOrg) {\r\n                    material = materialOrg.clone();\r\n                    materialName = materialCloneInstructions.materialName;\r\n                    material.name = materialName;\r\n                    Object.assign(material, materialCloneInstructions.materialProperties);\r\n                    this.materials[materialName] = material;\r\n                    newMaterials[materialName] = material;\r\n                } else {\r\n                    if (this.logging.enabled) {\r\n                        console.info('Requested material \"' + materialNameOrg + '\" is not available!');\r\n                    }\r\n                }\r\n            }\r\n            let materials = materialPayload.materials.serializedMaterials;\r\n            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {\r\n                let loader = new THREE.MaterialLoader();\r\n                let materialJson;\r\n                for (materialName in materials) {\r\n                    materialJson = materials[materialName];\r\n                    if (materialJson !== undefined && materialJson !== null) {\r\n                        material = loader.parse(materialJson);\r\n                        if (this.logging.enabled) {\r\n                            console.info('De-serialized material with name \"' + materialName + '\" will be added.');\r\n                        }\r\n                        this.materials[materialName] = material;\r\n                        newMaterials[materialName] = material;\r\n                    }\r\n                }\r\n            }\r\n            materials = materialPayload.materials.runtimeMaterials;\r\n            newMaterials = this.addMaterials(materials, true, newMaterials);\r\n            return newMaterials;\r\n        },\r\n        addMaterials: function (materials, overrideExisting, newMaterials) {\r\n            if (newMaterials === undefined || newMaterials === null) {\r\n                newMaterials = {};\r\n            }\r\n            if (materials !== undefined && materials !== null && Object.keys(materials).length > 0) {\r\n                let material;\r\n                let existingMaterial;\r\n                let add;\r\n                for (let materialName in materials) {\r\n                    material = materials[materialName];\r\n                    add = overrideExisting === true;\r\n                    if (!add) {\r\n                        existingMaterial = this.materials[materialName];\r\n                        add = existingMaterial === null || existingMaterial === undefined;\r\n                    }\r\n                    if (add) {\r\n                        this.materials[materialName] = material;\r\n                        newMaterials[materialName] = material;\r\n                    }\r\n                    if (this.logging.enabled && this.logging.debug) {\r\n                        console.info('Material with name \"' + materialName + '\" was added.');\r\n                    }\r\n                }\r\n            }\r\n            if (this.callbacks.onLoadMaterials) {\r\n                this.callbacks.onLoadMaterials(newMaterials);\r\n            }\r\n            return newMaterials;\r\n        },\r\n        getMaterials: function () {\r\n            return this.materials;\r\n        },\r\n        getMaterial: function (materialName) {\r\n            return this.materials[materialName];\r\n        },\r\n        getMaterialsJSON: function () {\r\n            let materialsJSON = {};\r\n            let material;\r\n            for (let materialName in this.materials) {\r\n                material = this.materials[materialName];\r\n                materialsJSON[materialName] = material.toJSON();\r\n            }\r\n            return materialsJSON;\r\n        },\r\n        clearMaterials: function () {\r\n            this.materials = {};\r\n        }\r\n    };\r\n    return MaterialHandler;\r\n});"]}