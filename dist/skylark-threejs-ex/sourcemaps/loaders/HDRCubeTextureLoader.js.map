{"version":3,"sources":["loaders/HDRCubeTextureLoader.js"],"names":["define","THREE","HDRCubeTextureLoader","manager","Loader","call","this","hdrLoader","RGBELoader","type","UnsignedByteType","prototype","Object","assign","create","constructor","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","CubeTexture","encoding","RGBEEncoding","format","RGBAFormat","minFilter","NearestFilter","magFilter","generateMipmaps","FloatType","HalfFloatType","LinearEncoding","RGBFormat","LinearFilter","scope","loaded","loadHDRData","i","FileLoader","setPath","path","setResponseType","buffer","texData","parse","undefined","data","dataTexture","DataTexture","width","height","images","needsUpdate","length","value"],"mappings":";;;;;;;AAAAA,QACC,kBACA,yBACC,SAASC,GAqIV,OA/HAA,EAAMC,qBAAuB,SAAWC,GAEvCF,EAAMG,OAAOC,KAAMC,KAAMH,GAEzBG,KAAKC,UAAY,IAAIN,EAAMO,WAC3BF,KAAKG,KAAOR,EAAMS,kBAInBT,EAAMC,qBAAqBS,UAAYC,OAAOC,OAAQD,OAAOE,OAAQb,EAAMG,OAAOO,YAEjFI,YAAad,EAAMC,qBAEnBc,KAAM,SAAWC,EAAMC,EAAQC,EAAYC,GAEnCC,MAAMC,QAASL,KAErBM,QAAQC,KAAM,iFAEdlB,KAAKmB,YAAaR,GAElBA,EAAOC,EACPA,EAASC,EACTA,EAAaC,EACbA,EAAUM,UAAW,IAItB,IAAIC,EAAU,IAAI1B,EAAM2B,YAIxB,OAFAD,EAAQlB,KAAOH,KAAKG,KAEXkB,EAAQlB,MAEhB,KAAKR,EAAMS,iBAEViB,EAAQE,SAAW5B,EAAM6B,aACzBH,EAAQI,OAAS9B,EAAM+B,WACvBL,EAAQM,UAAYhC,EAAMiC,cAC1BP,EAAQQ,UAAYlC,EAAMiC,cAC1BP,EAAQS,iBAAkB,EAC1B,MAED,KAAKnC,EAAMoC,UASX,KAAKpC,EAAMqC,cAEVX,EAAQE,SAAW5B,EAAMsC,eACzBZ,EAAQI,OAAS9B,EAAMuC,UACvBb,EAAQM,UAAYhC,EAAMwC,aAC1Bd,EAAQQ,UAAYlC,EAAMwC,aAC1Bd,EAAQS,iBAAkB,EAK5B,IAAIM,EAAQpC,KAERqC,EAAS,EAEb,SAASC,EAAaC,EAAG3B,EAAQC,EAAYC,GAE5C,IAAInB,EAAM6C,WAAYJ,EAAMvC,SAC1B4C,QAASL,EAAMM,MACfC,gBAAiB,eACjBjC,KAAMC,EAAM4B,GAAK,SAAWK,GAE5BP,IAEA,IAAIQ,EAAUT,EAAMnC,UAAU6C,MAAOF,GAErC,GAAOC,EAAP,CAEA,QAAsBE,IAAjBF,EAAQG,KAAqB,CAEjC,IAAIC,EAAc,IAAItD,EAAMuD,YAAaL,EAAQG,KAAMH,EAAQM,MAAON,EAAQO,QAE9EH,EAAY9C,KAAOkB,EAAQlB,KAC3B8C,EAAY1B,SAAWF,EAAQE,SAC/B0B,EAAYxB,OAASJ,EAAQI,OAC7BwB,EAAYtB,UAAYN,EAAQM,UAChCsB,EAAYpB,UAAYR,EAAQQ,UAChCoB,EAAYnB,gBAAkBT,EAAQS,gBAEtCT,EAAQgC,OAAQd,GAAMU,EAIP,IAAXZ,IAEJhB,EAAQiC,aAAc,EACjB1C,GAASA,EAAQS,MAIrBR,EAAYC,GAIjB,IAAM,IAAIyB,EAAI,EAAGA,EAAI5B,EAAK4C,OAAQhB,IAEjCD,EAAaC,EAAG3B,EAAQC,EAAYC,GAIrC,OAAOO,GAIRF,YAAa,SAAWqC,GAKvB,OAHAxD,KAAKG,KAAOqD,EACZxD,KAAKC,UAAUkB,YAAaqC,GAErBxD,QAMFL,EAAMC","file":"../../loaders/HDRCubeTextureLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../loaders/RGBELoader\"\n],function(THREE){\n\t/**\n\t* @author Prashant Sharma / spidersharma03\n\t* @author Ben Houston / http://clara.io / bhouston\n\t*/\n\n\tTHREE.HDRCubeTextureLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.hdrLoader = new THREE.RGBELoader();\n\t\tthis.type = THREE.UnsignedByteType;\n\n\t};\n\n\tTHREE.HDRCubeTextureLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.HDRCubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tif ( ! Array.isArray( urls ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.' );\n\n\t\t\t\tthis.setDataType( urls );\n\n\t\t\t\turls = onLoad;\n\t\t\t\tonLoad = onProgress;\n\t\t\t\tonProgress = onError;\n\t\t\t\tonError = arguments[ 4 ];\n\n\t\t\t}\n\n\t\t\tvar texture = new THREE.CubeTexture();\n\n\t\t\ttexture.type = this.type;\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase THREE.UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = THREE.RGBEEncoding;\n\t\t\t\t\ttexture.format = THREE.RGBAFormat;\n\t\t\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\t\t\ttexture.magFilter = THREE.NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.FloatType:\n\n\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\ttexture.format = THREE.RGBFormat;\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\ttexture.format = THREE.RGBFormat;\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadHDRData( i, onLoad, onProgress, onError ) {\n\n\t\t\t\tnew THREE.FileLoader( scope.manager )\n\t\t\t\t\t.setPath( scope.path )\n\t\t\t\t\t.setResponseType( 'arraybuffer' )\n\t\t\t\t\t.load( urls[ i ], function ( buffer ) {\n\n\t\t\t\t\t\tloaded ++;\n\n\t\t\t\t\t\tvar texData = scope.hdrLoader.parse( buffer );\n\n\t\t\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\t\t\tif ( texData.data !== undefined ) {\n\n\t\t\t\t\t\t\tvar dataTexture = new THREE.DataTexture( texData.data, texData.width, texData.height );\n\n\t\t\t\t\t\t\tdataTexture.type = texture.type;\n\t\t\t\t\t\t\tdataTexture.encoding = texture.encoding;\n\t\t\t\t\t\t\tdataTexture.format = texture.format;\n\t\t\t\t\t\t\tdataTexture.minFilter = texture.minFilter;\n\t\t\t\t\t\t\tdataTexture.magFilter = texture.magFilter;\n\t\t\t\t\t\t\tdataTexture.generateMipmaps = texture.generateMipmaps;\n\n\t\t\t\t\t\t\ttexture.images[ i ] = dataTexture;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; i ++ ) {\n\n\t\t\t\tloadHDRData( i, onLoad, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetDataType: function ( value ) {\n\n\t\t\tthis.type = value;\n\t\t\tthis.hdrLoader.setDataType( value );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.HDRCubeTextureLoader;\n});\n"]}