{"version":3,"sources":["loaders/HDRCubeTextureLoader.js"],"names":["define","THREE","threex","RGBELoader","HDRCubeTextureLoader","manager","Loader","call","this","hdrLoader","type","UnsignedByteType","prototype","Object","assign","create","constructor","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","CubeTexture","encoding","RGBEEncoding","format","RGBAFormat","minFilter","NearestFilter","magFilter","generateMipmaps","FloatType","HalfFloatType","LinearEncoding","RGBFormat","LinearFilter","scope","loaded","loadHDRData","i","FileLoader","setPath","path","setResponseType","buffer","texData","parse","undefined","data","dataTexture","DataTexture","width","height","images","needsUpdate","length","value","loaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,gBACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAuB,SAAUC,GACjCJ,EAAMK,OAAOC,KAAKC,KAAMH,GACxBG,KAAKC,UAAY,IAAIN,EACrBK,KAAKE,KAAOT,EAAMU,kBA2EtB,OAzEAP,EAAqBQ,UAAYC,OAAOC,OAAOD,OAAOE,OAAOd,EAAMK,OAAOM,YACtEI,YAAaZ,EACba,KAAM,SAAUC,EAAMC,EAAQC,EAAYC,GACjCC,MAAMC,QAAQL,KACfM,QAAQC,KAAK,iFACbjB,KAAKkB,YAAYR,GACjBA,EAAOC,EACPA,EAASC,EACTA,EAAaC,EACbA,EAAUM,UAAU,IAExB,IAAIC,EAAU,IAAI3B,EAAM4B,YAExB,OADAD,EAAQlB,KAAOF,KAAKE,KACZkB,EAAQlB,MAChB,KAAKT,EAAMU,iBACPiB,EAAQE,SAAW7B,EAAM8B,aACzBH,EAAQI,OAAS/B,EAAMgC,WACvBL,EAAQM,UAAYjC,EAAMkC,cAC1BP,EAAQQ,UAAYnC,EAAMkC,cAC1BP,EAAQS,iBAAkB,EAC1B,MACJ,KAAKpC,EAAMqC,UAOX,KAAKrC,EAAMsC,cACPX,EAAQE,SAAW7B,EAAMuC,eACzBZ,EAAQI,OAAS/B,EAAMwC,UACvBb,EAAQM,UAAYjC,EAAMyC,aAC1Bd,EAAQQ,UAAYnC,EAAMyC,aAC1Bd,EAAQS,iBAAkB,EAG9B,IAAIM,EAAQnC,KACRoC,EAAS,EACb,SAASC,EAAYC,EAAG3B,EAAQC,EAAYC,GACxC,IAAIpB,EAAM8C,WAAWJ,EAAMtC,SAAS2C,QAAQL,EAAMM,MAAMC,gBAAgB,eAAejC,KAAKC,EAAK4B,GAAI,SAAUK,GAC3GP,IACA,IAAIQ,EAAUT,EAAMlC,UAAU4C,MAAMF,GACpC,GAAKC,EAAL,CAEA,QAAqBE,IAAjBF,EAAQG,KAAoB,CAC5B,IAAIC,EAAc,IAAIvD,EAAMwD,YAAYL,EAAQG,KAAMH,EAAQM,MAAON,EAAQO,QAC7EH,EAAY9C,KAAOkB,EAAQlB,KAC3B8C,EAAY1B,SAAWF,EAAQE,SAC/B0B,EAAYxB,OAASJ,EAAQI,OAC7BwB,EAAYtB,UAAYN,EAAQM,UAChCsB,EAAYpB,UAAYR,EAAQQ,UAChCoB,EAAYnB,gBAAkBT,EAAQS,gBACtCT,EAAQgC,OAAOd,GAAKU,EAET,IAAXZ,IACAhB,EAAQiC,aAAc,EAClB1C,GACAA,EAAOS,MAEhBR,EAAYC,GAEnB,IAAK,IAAIyB,EAAI,EAAGA,EAAI5B,EAAK4C,OAAQhB,IAC7BD,EAAYC,EAAG3B,EAAQC,EAAYC,GAEvC,OAAOO,GAEXF,YAAa,SAAUqC,GAGnB,OAFAvD,KAAKE,KAAOqD,EACZvD,KAAKC,UAAUiB,YAAYqC,GACpBvD,QAIRN,EAAO8D,QAAQ5D,qBAAuBA","file":"../../loaders/HDRCubeTextureLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    './RGBELoader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    RGBELoader\r\n) {\r\n    'use strict';\r\n    var HDRCubeTextureLoader = function (manager) {\r\n        THREE.Loader.call(this, manager);\r\n        this.hdrLoader = new RGBELoader();\r\n        this.type = THREE.UnsignedByteType;\r\n    };\r\n    HDRCubeTextureLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n        constructor: HDRCubeTextureLoader,\r\n        load: function (urls, onLoad, onProgress, onError) {\r\n            if (!Array.isArray(urls)) {\r\n                console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\r\n                this.setDataType(urls);\r\n                urls = onLoad;\r\n                onLoad = onProgress;\r\n                onProgress = onError;\r\n                onError = arguments[4];\r\n            }\r\n            var texture = new THREE.CubeTexture();\r\n            texture.type = this.type;\r\n            switch (texture.type) {\r\n            case THREE.UnsignedByteType:\r\n                texture.encoding = THREE.RGBEEncoding;\r\n                texture.format = THREE.RGBAFormat;\r\n                texture.minFilter = THREE.NearestFilter;\r\n                texture.magFilter = THREE.NearestFilter;\r\n                texture.generateMipmaps = false;\r\n                break;\r\n            case THREE.FloatType:\r\n                texture.encoding = THREE.LinearEncoding;\r\n                texture.format = THREE.RGBFormat;\r\n                texture.minFilter = THREE.LinearFilter;\r\n                texture.magFilter = THREE.LinearFilter;\r\n                texture.generateMipmaps = false;\r\n                break;\r\n            case THREE.HalfFloatType:\r\n                texture.encoding = THREE.LinearEncoding;\r\n                texture.format = THREE.RGBFormat;\r\n                texture.minFilter = THREE.LinearFilter;\r\n                texture.magFilter = THREE.LinearFilter;\r\n                texture.generateMipmaps = false;\r\n                break;\r\n            }\r\n            var scope = this;\r\n            var loaded = 0;\r\n            function loadHDRData(i, onLoad, onProgress, onError) {\r\n                new THREE.FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(urls[i], function (buffer) {\r\n                    loaded++;\r\n                    var texData = scope.hdrLoader.parse(buffer);\r\n                    if (!texData)\r\n                        return;\r\n                    if (texData.data !== undefined) {\r\n                        var dataTexture = new THREE.DataTexture(texData.data, texData.width, texData.height);\r\n                        dataTexture.type = texture.type;\r\n                        dataTexture.encoding = texture.encoding;\r\n                        dataTexture.format = texture.format;\r\n                        dataTexture.minFilter = texture.minFilter;\r\n                        dataTexture.magFilter = texture.magFilter;\r\n                        dataTexture.generateMipmaps = texture.generateMipmaps;\r\n                        texture.images[i] = dataTexture;\r\n                    }\r\n                    if (loaded === 6) {\r\n                        texture.needsUpdate = true;\r\n                        if (onLoad)\r\n                            onLoad(texture);\r\n                    }\r\n                }, onProgress, onError);\r\n            }\r\n            for (var i = 0; i < urls.length; i++) {\r\n                loadHDRData(i, onLoad, onProgress, onError);\r\n            }\r\n            return texture;\r\n        },\r\n        setDataType: function (value) {\r\n            this.type = value;\r\n            this.hdrLoader.setDataType(value);\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return threex.loaders.HDRCubeTextureLoader = HDRCubeTextureLoader;\r\n});"]}