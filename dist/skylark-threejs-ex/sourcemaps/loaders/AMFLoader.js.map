{"version":3,"sources":["loaders/AMFLoader.js"],"names":["define","THREE","AMFLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","text","parse","data","loadMaterials","node","matName","matId","attributes","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","nodeName","undefined","type","value","loadColor","MeshPhongMaterial","flatShading","Color","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","j","xmlData","view","DataView","String","fromCharCode","getUint8","zip","file","console","log","JSZip","e","ReferenceError","files","toLowerCase","substr","asArrayBuffer","fileText","LoaderUtils","decodeText","DOMParser","parseFromString","documentElement","loadDocument","amfName","amfAuthor","amfScale","scale","unit","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","child","sceneObject","Group","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","Float32BufferAttribute","clone","newGeometry","BufferGeometry","setIndex","setAttribute","add","Mesh"],"mappings":"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","file":"../../loaders/AMFLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author tamarintech / https://tamarintech.com\n\t *\n\t * Description: Early release of an AMF Loader following the pattern of the\n\t * example loaders in the three.js project.\n\t *\n\t * More information about the AMF format: http://amf.wikispaces.com\n\t *\n\t * Usage:\n\t *\tvar loader = new AMFLoader();\n\t *\tloader.load('/path/to/project.amf', function(objecttree) {\n\t *\t\tscene.add(objecttree);\n\t *\t});\n\t *\n\t * Materials now supported, material colors supported\n\t * Zip support, requires jszip\n\t * No constellation support (yet)!\n\t *\n\t */\n\n\tTHREE.AMFLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.AMFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.AMFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tfunction loadDocument( data ) {\n\n\t\t\t\tvar view = new DataView( data );\n\t\t\t\tvar magic = String.fromCharCode( view.getUint8( 0 ), view.getUint8( 1 ) );\n\n\t\t\t\tif ( magic === 'PK' ) {\n\n\t\t\t\t\tvar zip = null;\n\t\t\t\t\tvar file = null;\n\n\t\t\t\t\tconsole.log( 'THREE.AMFLoader: Loading Zip' );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tzip = new JSZip( data ); // eslint-disable-line no-undef\n\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\t\tconsole.log( 'THREE.AMFLoader: jszip missing and file is compressed.' );\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( file in zip.files ) {\n\n\t\t\t\t\t\tif ( file.toLowerCase().substr( - 4 ) === '.amf' ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log( 'THREE.AMFLoader: Trying to load file asset: ' + file );\n\t\t\t\t\tview = new DataView( zip.file( file ).asArrayBuffer() );\n\n\t\t\t\t}\n\n\t\t\t\tvar fileText = THREE.LoaderUtils.decodeText( view );\n\t\t\t\tvar xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'amf' ) {\n\n\t\t\t\t\tconsole.log( 'THREE.AMFLoader: Error loading AMF - no AMF document found.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\treturn xmlData;\n\n\t\t\t}\n\n\t\t\tfunction loadDocumentScale( node ) {\n\n\t\t\t\tvar scale = 1.0;\n\t\t\t\tvar unit = 'millimeter';\n\n\t\t\t\tif ( node.documentElement.attributes.unit !== undefined ) {\n\n\t\t\t\t\tunit = node.documentElement.attributes.unit.value.toLowerCase();\n\n\t\t\t\t}\n\n\t\t\t\tvar scaleUnits = {\n\t\t\t\t\tmillimeter: 1.0,\n\t\t\t\t\tinch: 25.4,\n\t\t\t\t\tfeet: 304.8,\n\t\t\t\t\tmeter: 1000.0,\n\t\t\t\t\tmicron: 0.001\n\t\t\t\t};\n\n\t\t\t\tif ( scaleUnits[ unit ] !== undefined ) {\n\n\t\t\t\t\tscale = scaleUnits[ unit ];\n\n\t\t\t\t}\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Unit scale: ' + scale );\n\t\t\t\treturn scale;\n\n\t\t\t}\n\n\t\t\tfunction loadMaterials( node ) {\n\n\t\t\t\tvar matName = 'AMF Material';\n\t\t\t\tvar matId = node.attributes.id.textContent;\n\t\t\t\tvar color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\t\tvar loadedMaterial = null;\n\n\t\t\t\tfor ( var i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar matChildEl = node.childNodes[ i ];\n\n\t\t\t\t\tif ( matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( matChildEl.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tmatName = matChildEl.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( matChildEl.nodeName === 'color' ) {\n\n\t\t\t\t\t\tcolor = loadColor( matChildEl );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tloadedMaterial = new THREE.MeshPhongMaterial( {\n\t\t\t\t\tflatShading: true,\n\t\t\t\t\tcolor: new THREE.Color( color.r, color.g, color.b ),\n\t\t\t\t\tname: matName\n\t\t\t\t} );\n\n\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\tloadedMaterial.transparent = true;\n\t\t\t\t\tloadedMaterial.opacity = color.a;\n\n\t\t\t\t}\n\n\t\t\t\treturn { id: matId, material: loadedMaterial };\n\n\t\t\t}\n\n\t\t\tfunction loadColor( node ) {\n\n\t\t\t\tvar color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\t\tfor ( var i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\t\tvar matColor = node.childNodes[ i ];\n\n\t\t\t\t\tif ( matColor.nodeName === 'r' ) {\n\n\t\t\t\t\t\tcolor.r = matColor.textContent;\n\n\t\t\t\t\t} else if ( matColor.nodeName === 'g' ) {\n\n\t\t\t\t\t\tcolor.g = matColor.textContent;\n\n\t\t\t\t\t} else if ( matColor.nodeName === 'b' ) {\n\n\t\t\t\t\t\tcolor.b = matColor.textContent;\n\n\t\t\t\t\t} else if ( matColor.nodeName === 'a' ) {\n\n\t\t\t\t\t\tcolor.a = matColor.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn color;\n\n\t\t\t}\n\n\t\t\tfunction loadMeshVolume( node ) {\n\n\t\t\t\tvar volume = { name: '', triangles: [], materialid: null };\n\n\t\t\t\tvar currVolumeNode = node.firstElementChild;\n\n\t\t\t\tif ( node.attributes.materialid !== undefined ) {\n\n\t\t\t\t\tvolume.materialId = node.attributes.materialid.nodeValue;\n\n\t\t\t\t}\n\n\t\t\t\twhile ( currVolumeNode ) {\n\n\t\t\t\t\tif ( currVolumeNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\t\tif ( currVolumeNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\t\tif ( currVolumeNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\t\tvolume.name = currVolumeNode.textContent;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( currVolumeNode.nodeName === 'triangle' ) {\n\n\t\t\t\t\t\tvar v1 = currVolumeNode.getElementsByTagName( 'v1' )[ 0 ].textContent;\n\t\t\t\t\t\tvar v2 = currVolumeNode.getElementsByTagName( 'v2' )[ 0 ].textContent;\n\t\t\t\t\t\tvar v3 = currVolumeNode.getElementsByTagName( 'v3' )[ 0 ].textContent;\n\n\t\t\t\t\t\tvolume.triangles.push( v1, v2, v3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrVolumeNode = currVolumeNode.nextElementSibling;\n\n\t\t\t\t}\n\n\t\t\t\treturn volume;\n\n\t\t\t}\n\n\t\t\tfunction loadMeshVertices( node ) {\n\n\t\t\t\tvar vertArray = [];\n\t\t\t\tvar normalArray = [];\n\t\t\t\tvar currVerticesNode = node.firstElementChild;\n\n\t\t\t\twhile ( currVerticesNode ) {\n\n\t\t\t\t\tif ( currVerticesNode.nodeName === 'vertex' ) {\n\n\t\t\t\t\t\tvar vNode = currVerticesNode.firstElementChild;\n\n\t\t\t\t\t\twhile ( vNode ) {\n\n\t\t\t\t\t\t\tif ( vNode.nodeName === 'coordinates' ) {\n\n\t\t\t\t\t\t\t\tvar x = vNode.getElementsByTagName( 'x' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar y = vNode.getElementsByTagName( 'y' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar z = vNode.getElementsByTagName( 'z' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\t\tvertArray.push( x, y, z );\n\n\t\t\t\t\t\t\t} else if ( vNode.nodeName === 'normal' ) {\n\n\t\t\t\t\t\t\t\tvar nx = vNode.getElementsByTagName( 'nx' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar ny = vNode.getElementsByTagName( 'ny' )[ 0 ].textContent;\n\t\t\t\t\t\t\t\tvar nz = vNode.getElementsByTagName( 'nz' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\t\tnormalArray.push( nx, ny, nz );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvNode = vNode.nextElementSibling;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tcurrVerticesNode = currVerticesNode.nextElementSibling;\n\n\t\t\t\t}\n\n\t\t\t\treturn { 'vertices': vertArray, 'normals': normalArray };\n\n\t\t\t}\n\n\t\t\tfunction loadObject( node ) {\n\n\t\t\t\tvar objId = node.attributes.id.textContent;\n\t\t\t\tvar loadedObject = { name: 'amfobject', meshes: [] };\n\t\t\t\tvar currColor = null;\n\t\t\t\tvar currObjNode = node.firstElementChild;\n\n\t\t\t\twhile ( currObjNode ) {\n\n\t\t\t\t\tif ( currObjNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\t\tif ( currObjNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\t\tif ( currObjNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\t\tloadedObject.name = currObjNode.textContent;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( currObjNode.nodeName === 'color' ) {\n\n\t\t\t\t\t\tcurrColor = loadColor( currObjNode );\n\n\t\t\t\t\t} else if ( currObjNode.nodeName === 'mesh' ) {\n\n\t\t\t\t\t\tvar currMeshNode = currObjNode.firstElementChild;\n\t\t\t\t\t\tvar mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n\n\t\t\t\t\t\twhile ( currMeshNode ) {\n\n\t\t\t\t\t\t\tif ( currMeshNode.nodeName === 'vertices' ) {\n\n\t\t\t\t\t\t\t\tvar loadedVertices = loadMeshVertices( currMeshNode );\n\n\t\t\t\t\t\t\t\tmesh.normals = mesh.normals.concat( loadedVertices.normals );\n\t\t\t\t\t\t\t\tmesh.vertices = mesh.vertices.concat( loadedVertices.vertices );\n\n\t\t\t\t\t\t\t} else if ( currMeshNode.nodeName === 'volume' ) {\n\n\t\t\t\t\t\t\t\tmesh.volumes.push( loadMeshVolume( currMeshNode ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrMeshNode = currMeshNode.nextElementSibling;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadedObject.meshes.push( mesh );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrObjNode = currObjNode.nextElementSibling;\n\n\t\t\t\t}\n\n\t\t\t\treturn { 'id': objId, 'obj': loadedObject };\n\n\t\t\t}\n\n\t\t\tvar xmlData = loadDocument( data );\n\t\t\tvar amfName = '';\n\t\t\tvar amfAuthor = '';\n\t\t\tvar amfScale = loadDocumentScale( xmlData );\n\t\t\tvar amfMaterials = {};\n\t\t\tvar amfObjects = {};\n\t\t\tvar childNodes = xmlData.documentElement.childNodes;\n\n\t\t\tvar i, j;\n\n\t\t\tfor ( i = 0; i < childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = childNodes[ i ];\n\n\t\t\t\tif ( child.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( child.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( child.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tamfName = child.textContent;\n\n\t\t\t\t\t\t} else if ( child.attributes.type.value === 'author' ) {\n\n\t\t\t\t\t\t\tamfAuthor = child.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( child.nodeName === 'material' ) {\n\n\t\t\t\t\tvar loadedMaterial = loadMaterials( child );\n\n\t\t\t\t\tamfMaterials[ loadedMaterial.id ] = loadedMaterial.material;\n\n\t\t\t\t} else if ( child.nodeName === 'object' ) {\n\n\t\t\t\t\tvar loadedObject = loadObject( child );\n\n\t\t\t\t\tamfObjects[ loadedObject.id ] = loadedObject.obj;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar sceneObject = new THREE.Group();\n\t\t\tvar defaultMaterial = new THREE.MeshPhongMaterial( { color: 0xaaaaff, flatShading: true } );\n\n\t\t\tsceneObject.name = amfName;\n\t\t\tsceneObject.userData.author = amfAuthor;\n\t\t\tsceneObject.userData.loader = 'AMF';\n\n\t\t\tfor ( var id in amfObjects ) {\n\n\t\t\t\tvar part = amfObjects[ id ];\n\t\t\t\tvar meshes = part.meshes;\n\t\t\t\tvar newObject = new THREE.Group();\n\t\t\t\tnewObject.name = part.name || '';\n\n\t\t\t\tfor ( i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\t\tvar objDefaultMaterial = defaultMaterial;\n\t\t\t\t\tvar mesh = meshes[ i ];\n\t\t\t\t\tvar vertices = new THREE.Float32BufferAttribute( mesh.vertices, 3 );\n\t\t\t\t\tvar normals = null;\n\n\t\t\t\t\tif ( mesh.normals.length ) {\n\n\t\t\t\t\t\tnormals = new THREE.Float32BufferAttribute( mesh.normals, 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( mesh.color ) {\n\n\t\t\t\t\t\tvar color = mesh.color;\n\n\t\t\t\t\t\tobjDefaultMaterial = defaultMaterial.clone();\n\t\t\t\t\t\tobjDefaultMaterial.color = new THREE.Color( color.r, color.g, color.b );\n\n\t\t\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\t\t\tobjDefaultMaterial.transparent = true;\n\t\t\t\t\t\t\tobjDefaultMaterial.opacity = color.a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar volumes = mesh.volumes;\n\n\t\t\t\t\tfor ( j = 0; j < volumes.length; j ++ ) {\n\n\t\t\t\t\t\tvar volume = volumes[ j ];\n\t\t\t\t\t\tvar newGeometry = new THREE.BufferGeometry();\n\t\t\t\t\t\tvar material = objDefaultMaterial;\n\n\t\t\t\t\t\tnewGeometry.setIndex( volume.triangles );\n\t\t\t\t\t\tnewGeometry.setAttribute( 'position', vertices.clone() );\n\n\t\t\t\t\t\tif ( normals ) {\n\n\t\t\t\t\t\t\tnewGeometry.setAttribute( 'normal', normals.clone() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( amfMaterials[ volume.materialId ] !== undefined ) {\n\n\t\t\t\t\t\t\tmaterial = amfMaterials[ volume.materialId ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewGeometry.scale( amfScale, amfScale, amfScale );\n\t\t\t\t\t\tnewObject.add( new THREE.Mesh( newGeometry, material.clone() ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tsceneObject.add( newObject );\n\n\t\t\t}\n\n\t\t\treturn sceneObject;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.AMFLoader;\n});\n"]}