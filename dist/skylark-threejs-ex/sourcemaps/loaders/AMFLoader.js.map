{"version":3,"sources":["loaders/AMFLoader.js"],"names":["define","THREE","threex","AMFLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","text","parse","data","loadMaterials","node","matName","matId","attributes","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","nodeName","undefined","type","value","loadColor","MeshPhongMaterial","flatShading","Color","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","j","xmlData","view","DataView","String","fromCharCode","getUint8","zip","file","console","log","JSZip","e","ReferenceError","files","toLowerCase","substr","asArrayBuffer","fileText","LoaderUtils","decodeText","DOMParser","parseFromString","documentElement","loadDocument","amfName","amfAuthor","amfScale","scale","unit","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","child","sceneObject","Group","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","Float32BufferAttribute","clone","newGeometry","BufferGeometry","setIndex","setAttribute","add","Mesh","loaders"],"mappings":"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","file":"../../loaders/AMFLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var AMFLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    AMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: AMFLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            function loadDocument(data) {\n                var view = new DataView(data);\n                var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n                if (magic === 'PK') {\n                    var zip = null;\n                    var file = null;\n                    console.log('THREE.AMFLoader: Loading Zip');\n                    try {\n                        zip = new JSZip(data);\n                    } catch (e) {\n                        if (e instanceof ReferenceError) {\n                            console.log('THREE.AMFLoader: jszip missing and file is compressed.');\n                            return null;\n                        }\n                    }\n                    for (file in zip.files) {\n                        if (file.toLowerCase().substr(-4) === '.amf') {\n                            break;\n                        }\n                    }\n                    console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n                    view = new DataView(zip.file(file).asArrayBuffer());\n                }\n                var fileText = THREE.LoaderUtils.decodeText(view);\n                var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n                if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n                    console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n                    return null;\n                }\n                return xmlData;\n            }\n            function loadDocumentScale(node) {\n                var scale = 1;\n                var unit = 'millimeter';\n                if (node.documentElement.attributes.unit !== undefined) {\n                    unit = node.documentElement.attributes.unit.value.toLowerCase();\n                }\n                var scaleUnits = {\n                    millimeter: 1,\n                    inch: 25.4,\n                    feet: 304.8,\n                    meter: 1000,\n                    micron: 0.001\n                };\n                if (scaleUnits[unit] !== undefined) {\n                    scale = scaleUnits[unit];\n                }\n                console.log('THREE.AMFLoader: Unit scale: ' + scale);\n                return scale;\n            }\n            function loadMaterials(node) {\n                var matName = 'AMF Material';\n                var matId = node.attributes.id.textContent;\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                var loadedMaterial = null;\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matChildEl = node.childNodes[i];\n                    if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n                        if (matChildEl.attributes.type.value === 'name') {\n                            matName = matChildEl.textContent;\n                        }\n                    } else if (matChildEl.nodeName === 'color') {\n                        color = loadColor(matChildEl);\n                    }\n                }\n                loadedMaterial = new THREE.MeshPhongMaterial({\n                    flatShading: true,\n                    color: new THREE.Color(color.r, color.g, color.b),\n                    name: matName\n                });\n                if (color.a !== 1) {\n                    loadedMaterial.transparent = true;\n                    loadedMaterial.opacity = color.a;\n                }\n                return {\n                    id: matId,\n                    material: loadedMaterial\n                };\n            }\n            function loadColor(node) {\n                var color = {\n                    r: 1,\n                    g: 1,\n                    b: 1,\n                    a: 1\n                };\n                for (var i = 0; i < node.childNodes.length; i++) {\n                    var matColor = node.childNodes[i];\n                    if (matColor.nodeName === 'r') {\n                        color.r = matColor.textContent;\n                    } else if (matColor.nodeName === 'g') {\n                        color.g = matColor.textContent;\n                    } else if (matColor.nodeName === 'b') {\n                        color.b = matColor.textContent;\n                    } else if (matColor.nodeName === 'a') {\n                        color.a = matColor.textContent;\n                    }\n                }\n                return color;\n            }\n            function loadMeshVolume(node) {\n                var volume = {\n                    name: '',\n                    triangles: [],\n                    materialid: null\n                };\n                var currVolumeNode = node.firstElementChild;\n                if (node.attributes.materialid !== undefined) {\n                    volume.materialId = node.attributes.materialid.nodeValue;\n                }\n                while (currVolumeNode) {\n                    if (currVolumeNode.nodeName === 'metadata') {\n                        if (currVolumeNode.attributes.type !== undefined) {\n                            if (currVolumeNode.attributes.type.value === 'name') {\n                                volume.name = currVolumeNode.textContent;\n                            }\n                        }\n                    } else if (currVolumeNode.nodeName === 'triangle') {\n                        var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n                        var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n                        var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n                        volume.triangles.push(v1, v2, v3);\n                    }\n                    currVolumeNode = currVolumeNode.nextElementSibling;\n                }\n                return volume;\n            }\n            function loadMeshVertices(node) {\n                var vertArray = [];\n                var normalArray = [];\n                var currVerticesNode = node.firstElementChild;\n                while (currVerticesNode) {\n                    if (currVerticesNode.nodeName === 'vertex') {\n                        var vNode = currVerticesNode.firstElementChild;\n                        while (vNode) {\n                            if (vNode.nodeName === 'coordinates') {\n                                var x = vNode.getElementsByTagName('x')[0].textContent;\n                                var y = vNode.getElementsByTagName('y')[0].textContent;\n                                var z = vNode.getElementsByTagName('z')[0].textContent;\n                                vertArray.push(x, y, z);\n                            } else if (vNode.nodeName === 'normal') {\n                                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                                normalArray.push(nx, ny, nz);\n                            }\n                            vNode = vNode.nextElementSibling;\n                        }\n                    }\n                    currVerticesNode = currVerticesNode.nextElementSibling;\n                }\n                return {\n                    'vertices': vertArray,\n                    'normals': normalArray\n                };\n            }\n            function loadObject(node) {\n                var objId = node.attributes.id.textContent;\n                var loadedObject = {\n                    name: 'amfobject',\n                    meshes: []\n                };\n                var currColor = null;\n                var currObjNode = node.firstElementChild;\n                while (currObjNode) {\n                    if (currObjNode.nodeName === 'metadata') {\n                        if (currObjNode.attributes.type !== undefined) {\n                            if (currObjNode.attributes.type.value === 'name') {\n                                loadedObject.name = currObjNode.textContent;\n                            }\n                        }\n                    } else if (currObjNode.nodeName === 'color') {\n                        currColor = loadColor(currObjNode);\n                    } else if (currObjNode.nodeName === 'mesh') {\n                        var currMeshNode = currObjNode.firstElementChild;\n                        var mesh = {\n                            vertices: [],\n                            normals: [],\n                            volumes: [],\n                            color: currColor\n                        };\n                        while (currMeshNode) {\n                            if (currMeshNode.nodeName === 'vertices') {\n                                var loadedVertices = loadMeshVertices(currMeshNode);\n                                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n                            } else if (currMeshNode.nodeName === 'volume') {\n                                mesh.volumes.push(loadMeshVolume(currMeshNode));\n                            }\n                            currMeshNode = currMeshNode.nextElementSibling;\n                        }\n                        loadedObject.meshes.push(mesh);\n                    }\n                    currObjNode = currObjNode.nextElementSibling;\n                }\n                return {\n                    'id': objId,\n                    'obj': loadedObject\n                };\n            }\n            var xmlData = loadDocument(data);\n            var amfName = '';\n            var amfAuthor = '';\n            var amfScale = loadDocumentScale(xmlData);\n            var amfMaterials = {};\n            var amfObjects = {};\n            var childNodes = xmlData.documentElement.childNodes;\n            var i, j;\n            for (i = 0; i < childNodes.length; i++) {\n                var child = childNodes[i];\n                if (child.nodeName === 'metadata') {\n                    if (child.attributes.type !== undefined) {\n                        if (child.attributes.type.value === 'name') {\n                            amfName = child.textContent;\n                        } else if (child.attributes.type.value === 'author') {\n                            amfAuthor = child.textContent;\n                        }\n                    }\n                } else if (child.nodeName === 'material') {\n                    var loadedMaterial = loadMaterials(child);\n                    amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n                } else if (child.nodeName === 'object') {\n                    var loadedObject = loadObject(child);\n                    amfObjects[loadedObject.id] = loadedObject.obj;\n                }\n            }\n            var sceneObject = new THREE.Group();\n            var defaultMaterial = new THREE.MeshPhongMaterial({\n                color: 11184895,\n                flatShading: true\n            });\n            sceneObject.name = amfName;\n            sceneObject.userData.author = amfAuthor;\n            sceneObject.userData.loader = 'AMF';\n            for (var id in amfObjects) {\n                var part = amfObjects[id];\n                var meshes = part.meshes;\n                var newObject = new THREE.Group();\n                newObject.name = part.name || '';\n                for (i = 0; i < meshes.length; i++) {\n                    var objDefaultMaterial = defaultMaterial;\n                    var mesh = meshes[i];\n                    var vertices = new THREE.Float32BufferAttribute(mesh.vertices, 3);\n                    var normals = null;\n                    if (mesh.normals.length) {\n                        normals = new THREE.Float32BufferAttribute(mesh.normals, 3);\n                    }\n                    if (mesh.color) {\n                        var color = mesh.color;\n                        objDefaultMaterial = defaultMaterial.clone();\n                        objDefaultMaterial.color = new THREE.Color(color.r, color.g, color.b);\n                        if (color.a !== 1) {\n                            objDefaultMaterial.transparent = true;\n                            objDefaultMaterial.opacity = color.a;\n                        }\n                    }\n                    var volumes = mesh.volumes;\n                    for (j = 0; j < volumes.length; j++) {\n                        var volume = volumes[j];\n                        var newGeometry = new THREE.BufferGeometry();\n                        var material = objDefaultMaterial;\n                        newGeometry.setIndex(volume.triangles);\n                        newGeometry.setAttribute('position', vertices.clone());\n                        if (normals) {\n                            newGeometry.setAttribute('normal', normals.clone());\n                        }\n                        if (amfMaterials[volume.materialId] !== undefined) {\n                            material = amfMaterials[volume.materialId];\n                        }\n                        newGeometry.scale(amfScale, amfScale, amfScale);\n                        newObject.add(new THREE.Mesh(newGeometry, material.clone()));\n                    }\n                }\n                sceneObject.add(newObject);\n            }\n            return sceneObject;\n        }\n    });\n\n    return threex.loaders.AMFLoader = AMFLoader;\n});"]}