{"version":3,"sources":["loaders/PRWMLoader.js"],"names":["define","THREE","threex","PRWMLoader","bigEndianPlatform","isBigEndianPlatform","buffer","ArrayBuffer","uint8Array","Uint8Array","uint16Array","Uint16Array","InvertedEncodingTypes","Float32Array","Int8Array","Int16Array","Int32Array","Uint32Array","getMethods","Float64Array","copyFromBuffer","sourceArrayBuffer","viewType","position","length","fromBigEndian","result","bytesPerElement","BYTES_PER_ELEMENT","readView","DataView","getMethod","name","littleEndian","i","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","replace","arrayBuffer","parse","attribute","data","array","version","flags","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","Error","attributeName","char","attributeType","cardinality","arrayType","values","indices","pos","attributes","String","fromCharCode","Math","ceil","type","decodePrwm","attributesKey","keys","bufferGeometry","BufferGeometry","setAttribute","BufferAttribute","normalized","setIndex","loaders"],"mappings":"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","file":"../../loaders/PRWMLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var PRWMLoader = function () {\r\n        var bigEndianPlatform = null;\r\n        function isBigEndianPlatform() {\r\n            if (bigEndianPlatform === null) {\r\n                var buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);\r\n                uint8Array[0] = 170;\r\n                uint8Array[1] = 187;\r\n                bigEndianPlatform = uint16Array[0] === 43707;\r\n            }\r\n            return bigEndianPlatform;\r\n        }\r\n        var InvertedEncodingTypes = [\r\n            null,\r\n            Float32Array,\r\n            null,\r\n            Int8Array,\r\n            Int16Array,\r\n            null,\r\n            Int32Array,\r\n            Uint8Array,\r\n            Uint16Array,\r\n            null,\r\n            Uint32Array\r\n        ];\r\n        var getMethods = {\r\n            Uint16Array: 'getUint16',\r\n            Uint32Array: 'getUint32',\r\n            Int16Array: 'getInt16',\r\n            Int32Array: 'getInt32',\r\n            Float32Array: 'getFloat32',\r\n            Float64Array: 'getFloat64'\r\n        };\r\n        function copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\r\n            var bytesPerElement = viewType.BYTES_PER_ELEMENT, result;\r\n            if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\r\n                result = new viewType(sourceArrayBuffer, position, length);\r\n            } else {\r\n                var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian, i = 0;\r\n                result = new viewType(length);\r\n                for (; i < length; i++) {\r\n                    result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        function decodePrwm(buffer) {\r\n            var array = new Uint8Array(buffer), version = array[0], flags = array[1], indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31, valuesNumber = 0, indicesNumber = 0;\r\n            if (bigEndian) {\r\n                valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\r\n                indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\r\n            } else {\r\n                valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\r\n                indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\r\n            }\r\n            if (version === 0) {\r\n                throw new Error('PRWM decoder: Invalid format version: 0');\r\n            } else if (version !== 1) {\r\n                throw new Error('PRWM decoder: Unsupported format version: ' + version);\r\n            }\r\n            if (!indexedGeometry) {\r\n                if (indicesType !== 0) {\r\n                    throw new Error('PRWM decoder: Indices type must be set to 0 for non-indexed geometries');\r\n                } else if (indicesNumber !== 0) {\r\n                    throw new Error('PRWM decoder: Number of indices must be set to 0 for non-indexed geometries');\r\n                }\r\n            }\r\n            var pos = 8;\r\n            var attributes = {}, attributeName, char, attributeType, cardinality, encodingType, arrayType, values, indices, i;\r\n            for (i = 0; i < attributesNumber; i++) {\r\n                attributeName = '';\r\n                while (pos < array.length) {\r\n                    char = array[pos];\r\n                    pos++;\r\n                    if (char === 0) {\r\n                        break;\r\n                    } else {\r\n                        attributeName += String.fromCharCode(char);\r\n                    }\r\n                }\r\n                flags = array[pos];\r\n                attributeType = flags >> 7 & 1;\r\n                cardinality = (flags >> 4 & 3) + 1;\r\n                encodingType = flags & 15;\r\n                arrayType = InvertedEncodingTypes[encodingType];\r\n                pos++;\r\n                pos = Math.ceil(pos / 4) * 4;\r\n                values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\r\n                pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\r\n                attributes[attributeName] = {\r\n                    type: attributeType,\r\n                    cardinality: cardinality,\r\n                    values: values\r\n                };\r\n            }\r\n            pos = Math.ceil(pos / 4) * 4;\r\n            indices = null;\r\n            if (indexedGeometry) {\r\n                indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\r\n            }\r\n            return {\r\n                version: version,\r\n                attributes: attributes,\r\n                indices: indices\r\n            };\r\n        }\r\n        function PRWMLoader(manager) {\r\n            THREE.Loader.call(this, manager);\r\n        }\r\n        PRWMLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n            constructor: PRWMLoader,\r\n            load: function (url, onLoad, onProgress, onError) {\r\n                var scope = this;\r\n                var loader = new THREE.FileLoader(scope.manager);\r\n                loader.setPath(scope.path);\r\n                loader.setResponseType('arraybuffer');\r\n                url = url.replace(/\\*/g, isBigEndianPlatform() ? 'be' : 'le');\r\n                loader.load(url, function (arrayBuffer) {\r\n                    onLoad(scope.parse(arrayBuffer));\r\n                }, onProgress, onError);\r\n            },\r\n            parse: function (arrayBuffer) {\r\n                var data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new THREE.BufferGeometry(), attribute, i;\r\n                for (i = 0; i < attributesKey.length; i++) {\r\n                    attribute = data.attributes[attributesKey[i]];\r\n                    bufferGeometry.setAttribute(attributesKey[i], new THREE.BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\r\n                }\r\n                if (data.indices !== null) {\r\n                    bufferGeometry.setIndex(new THREE.BufferAttribute(data.indices, 1));\r\n                }\r\n                return bufferGeometry;\r\n            }\r\n        });\r\n        PRWMLoader.isBigEndianPlatform = function () {\r\n            return isBigEndianPlatform();\r\n        };\r\n        return PRWMLoader;\r\n    }();\r\n\r\n    return threex.loaders.PRWMLoader = PRWMLoader;\r\n});"]}