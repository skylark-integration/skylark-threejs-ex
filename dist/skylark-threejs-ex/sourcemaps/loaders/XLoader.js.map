{"version":3,"sources":["loaders/XLoader.js"],"names":["define","THREE","classCallCheck","createClass","XAnimationInfo","XAnimationObj","XKeyFrameInfo","instance","Constructor","TypeError","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","this","animeName","boneName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","_flags","fps","name","hierarchy","putFlags","undefined","putPos","putRot","putScl","value","XAnimationInfoArray","push","makeBonekeys","keys","time","assign","refObj","parent","keyFrameRefactor","copy","keyframe","pos","rot","scl","matrix","Vector3","setFromMatrixPosition","Quaternion","setFromRotationMatrix","setFromMatrixScale","index","Frame","XLoader","manager","Loader","call","debug","texloader","TextureLoader","url","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","onLoad","IsUvYReverse","Meshes","animations","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_arg","_start","arguments","options","onProgress","onError","_this","_setArgOption","loader","FileLoader","setPath","path","setResponseType","load","response","parse","line","readed","find","indexOf","foundNewLine","substr","binData","reader","DataView","getUint32","byteLength","fileLength","getUint8","buf","array_buffer","Uint8Array","charCodeAt","buffer","LoaderUtils","decodeText","data","_ensureBinary","_ensureString","_isBinary","_parseBinary","_parseASCII","resourcePath","extractUrlBase","setCrossOrigin","crossOrigin","children","_hierarchieParse","_changeRoot","shift","_mainloop","_parent","_end","endRead","find1","findEnd","findNext","nameData","_readLine","trim","word","split","type","refs","end","DataEnder","lastIndexOf","Math","min","nextStart","max","_refs","_this2","_mainProc","worked","setTimeout","models","breakFlag","parseInt","_setFrame","_setFrameTransformMatrix","parentName","_getParentName","VertexSetedBoneCount","GeometryData","vertices","normals","uvs","skinIndices","skinWeights","indices","materialIndices","Materials","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","console","log","_makeOutputGeometry","_makeOutputAnimation","_obj","FrameTransformMatrix","Matrix4","_ParseMatrixData","b","Bone","applyMatrix4","matrixWorld","putBone","frame","add","mode","mode_local","maxLength","changeMode","_readInt1","_readVertex1","_readFace1","_readNormalVector1","start","refI","parseFloat","bufferGeometry","BufferGeometry","position","l","stride2","stride3","stride4","setAttribute","Float32BufferAttribute","Uint16BufferAttribute","_computeGroups","group","groups","materialIndex","currentMaterialIndex","count","MeshPhongMaterial","color","random","side","FrontSide","r","g","shininess","data2","specular","data3","emissive","localObject","fileName","map","bumpMap","bumpScale","normalMap","normalScale","Vector2","emissiveMap","lightMap","boneInf","XboneInf","BoneIndex","Indeces","Weights","initMatrix","OffsetMatrix","_i","_RootName","_bones","putting","toArray","rotq","mesh","putBones","_makePutBoneList","bi","boneIndex","bb","vi","nowVertexID","nowVal","stride","sk","skinning","offsetList","_bi","_buildGeometry","SkinnedMesh","_initSkeleton","_bufferGeometry","Mesh","worldBaseMx","currentMxFrame","multiply","boneList","boneInverses","bone","gbone","il","bones","fromArray","quaternion","scale","updateMatrixWorld","skeleton","Skeleton","bind","nowKeyType","keyInfo","frameFound","mm","frameValue","animationObj","make","_model","_animation","model","animation","put","findAnimation","c_key","_c_key","k","set","geometry","AnimationClip","parseAnimation","animationMixer","AnimationMixer","targetMatrix"],"mappings":"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","file":"../../loaders/XLoader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var XLoader = function () {\n        var classCallCheck = function (instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError('Cannot call a class as a function');\n            }\n        };\n        var createClass = function () {\n            function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                    var descriptor = props[i];\n                    descriptor.enumerable = descriptor.enumerable || false;\n                    descriptor.configurable = true;\n                    if ('value' in descriptor)\n                        descriptor.writable = true;\n                    Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }\n            return function (Constructor, protoProps, staticProps) {\n                if (protoProps)\n                    defineProperties(Constructor.prototype, protoProps);\n                if (staticProps)\n                    defineProperties(Constructor, staticProps);\n                return Constructor;\n            };\n        }();\n        var XboneInf = function XboneInf() {\n            classCallCheck(this, XboneInf);\n            this.boneName = '';\n            this.BoneIndex = 0;\n            this.Indeces = [];\n            this.Weights = [];\n            this.initMatrix = null;\n            this.OffsetMatrix = null;\n        };\n        var XAnimationInfo = function XAnimationInfo() {\n            classCallCheck(this, XAnimationInfo);\n            this.animeName = '';\n            this.boneName = '';\n            this.targetBone = null;\n            this.keyType = 4;\n            this.frameStartLv = 0;\n            this.keyFrames = [];\n            this.InverseMx = null;\n        };\n        var XAnimationObj = function () {\n            function XAnimationObj(_flags) {\n                classCallCheck(this, XAnimationObj);\n                this.fps = 30;\n                this.name = 'xanimation';\n                this.length = 0;\n                this.hierarchy = [];\n                this.putFlags = _flags;\n                if (this.putFlags.putPos === undefined) {\n                    this.putFlags.putPos = true;\n                }\n                if (this.putFlags.putRot === undefined) {\n                    this.putFlags.putRot = true;\n                }\n                if (this.putFlags.putScl === undefined) {\n                    this.putFlags.putScl = true;\n                }\n            }\n            createClass(XAnimationObj, [\n                {\n                    key: 'make',\n                    value: function make(XAnimationInfoArray) {\n                        for (var i = 0; i < XAnimationInfoArray.length; i++) {\n                            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n                        }\n                        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n                    }\n                },\n                {\n                    key: 'clone',\n                    value: function clone() {\n                        return Object.assign({}, this);\n                    }\n                },\n                {\n                    key: 'makeBonekeys',\n                    value: function makeBonekeys(XAnimationInfo) {\n                        var refObj = {};\n                        refObj.name = XAnimationInfo.boneName;\n                        refObj.parent = '';\n                        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n                        refObj.copy = function () {\n                            return Object.assign({}, this);\n                        };\n                        return refObj;\n                    }\n                },\n                {\n                    key: 'keyFrameRefactor',\n                    value: function keyFrameRefactor(XAnimationInfo) {\n                        var keys = [];\n                        for (var i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n                            var keyframe = {};\n                            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n                            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n                                keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n                            }\n                            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n                                keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n                            }\n                            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n                                keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n                            }\n                            if (XAnimationInfo.keyFrames[i].matrix) {\n                                keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n                                if (this.putFlags.putPos) {\n                                    keyframe.pos = new THREE.Vector3().setFromMatrixPosition(keyframe.matrix);\n                                }\n                                if (this.putFlags.putRot) {\n                                    keyframe.rot = new THREE.Quaternion().setFromRotationMatrix(keyframe.matrix);\n                                }\n                                if (this.putFlags.putScl) {\n                                    keyframe.scl = new THREE.Vector3().setFromMatrixScale(keyframe.matrix);\n                                }\n                            }\n                            keys.push(keyframe);\n                        }\n                        return keys;\n                    }\n                }\n            ]);\n            return XAnimationObj;\n        }();\n        var XKeyFrameInfo = function XKeyFrameInfo() {\n            classCallCheck(this, XKeyFrameInfo);\n            this.index = 0;\n            this.Frame = 0;\n            this.time = 0;\n            this.matrix = null;\n        };\n        var XLoader = function () {\n            function XLoader(manager) {\n                THREE.Loader.call(this, manager);\n                classCallCheck(this, XLoader);\n                this.debug = false;\n                this.texloader = new THREE.TextureLoader(this.manager);\n                this.url = '';\n                this._putMatLength = 0;\n                this._nowMat = null;\n                this._nowFrameName = '';\n                this.frameHierarchie = [];\n                this.Hierarchies = {};\n                this.HieStack = [];\n                this._currentObject = {};\n                this._currentFrame = {};\n                this._data = null;\n                this.onLoad = null;\n                this.IsUvYReverse = true;\n                this.Meshes = [];\n                this.animations = [];\n                this.animTicksPerSecond = 30;\n                this._currentGeo = null;\n                this._currentAnime = null;\n                this._currentAnimeFrames = null;\n            }\n            createClass(XLoader, [\n                {\n                    key: '_setArgOption',\n                    value: function _setArgOption(_arg) {\n                        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n                        if (!_arg) {\n                            return;\n                        }\n                        for (var i = _start; i < _arg.length; i++) {\n                            switch (i) {\n                            case 0:\n                                this.url = _arg[i];\n                                break;\n                            case 1:\n                                this.options = _arg[i];\n                                break;\n                            }\n                        }\n                        if (this.options === undefined) {\n                            this.options = {};\n                        }\n                    }\n                },\n                {\n                    key: 'load',\n                    value: function load(_arg, onLoad, onProgress, onError) {\n                        var _this = this;\n                        this._setArgOption(_arg);\n                        var loader = new THREE.FileLoader(this.manager);\n                        loader.setPath(this.path);\n                        loader.setResponseType('arraybuffer');\n                        loader.load(this.url, function (response) {\n                            _this.parse(response, onLoad);\n                        }, onProgress, onError);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_readLine',\n                    value: function _readLine(line) {\n                        var readed = 0;\n                        while (true) {\n                            var find = -1;\n                            find = line.indexOf('//', readed);\n                            if (find === -1) {\n                                find = line.indexOf('#', readed);\n                            }\n                            if (find > -1 && find < 2) {\n                                var foundNewLine = -1;\n                                foundNewLine = line.indexOf('\\r\\n', readed);\n                                if (foundNewLine > 0) {\n                                    readed = foundNewLine + 2;\n                                } else {\n                                    foundNewLine = line.indexOf('\\r', readed);\n                                    if (foundNewLine > 0) {\n                                        readed = foundNewLine + 1;\n                                    } else {\n                                        readed = line.indexOf('\\n', readed) + 1;\n                                    }\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        return line.substr(readed);\n                    }\n                },\n                {\n                    key: '_isBinary',\n                    value: function _isBinary(binData) {\n                        var reader = new DataView(binData);\n                        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n                        var n_faces = reader.getUint32(80, true);\n                        var expect = 80 + 32 / 8 + n_faces * face_size;\n                        if (expect === reader.byteLength) {\n                            return true;\n                        }\n                        var fileLength = reader.byteLength;\n                        for (var index = 0; index < fileLength; index++) {\n                            if (reader.getUint8(index, false) > 127) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                },\n                {\n                    key: '_ensureBinary',\n                    value: function _ensureBinary(buf) {\n                        if (typeof buf === 'string') {\n                            var array_buffer = new Uint8Array(buf.length);\n                            for (var i = 0; i < buf.length; i++) {\n                                array_buffer[i] = buf.charCodeAt(i) & 255;\n                            }\n                            return array_buffer.buffer || array_buffer;\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: '_ensureString',\n                    value: function _ensureString(buf) {\n                        if (typeof buf !== 'string') {\n                            return THREE.LoaderUtils.decodeText(new Uint8Array(buf));\n                        } else {\n                            return buf;\n                        }\n                    }\n                },\n                {\n                    key: 'parse',\n                    value: function _parse(data, onLoad) {\n                        var binData = this._ensureBinary(data);\n                        this._data = this._ensureString(data);\n                        this.onLoad = onLoad;\n                        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n                    }\n                },\n                {\n                    key: '_parseBinary',\n                    value: function _parseBinary(data) {\n                        return this._parseASCII(THREE.LoaderUtils.decodeText(new Uint8Array(data)));\n                    }\n                },\n                {\n                    key: '_parseASCII',\n                    value: function _parseASCII() {\n                        var path;\n                        if (this.resourcePath !== '') {\n                            path = this.resourcePath;\n                        } else if (this.path !== '') {\n                            path = this.path;\n                        } else {\n                            path = THREE.LoaderUtils.extractUrlBase(this.url);\n                        }\n                        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n                        var endRead = 16;\n                        this.Hierarchies.children = [];\n                        this._hierarchieParse(this.Hierarchies, endRead);\n                        this._changeRoot();\n                        this._currentObject = this.Hierarchies.children.shift();\n                        this._mainloop();\n                    }\n                },\n                {\n                    key: '_hierarchieParse',\n                    value: function _hierarchieParse(_parent, _end) {\n                        var endRead = _end;\n                        while (true) {\n                            var find1 = this._data.indexOf('{', endRead) + 1;\n                            var findEnd = this._data.indexOf('}', endRead);\n                            var findNext = this._data.indexOf('{', find1) + 1;\n                            if (find1 > 0 && findEnd > find1) {\n                                var _currentObject = {};\n                                _currentObject.children = [];\n                                var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n                                var word = nameData.split(/ /g);\n                                if (word.length > 0) {\n                                    _currentObject.type = word[0];\n                                    if (word.length >= 2) {\n                                        _currentObject.name = word[1];\n                                    } else {\n                                        _currentObject.name = word[0] + this.Hierarchies.children.length;\n                                    }\n                                } else {\n                                    _currentObject.name = nameData;\n                                    _currentObject.type = '';\n                                }\n                                if (_currentObject.type === 'Animation') {\n                                    _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n                                    var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n                                    endRead = refs.end;\n                                    _currentObject.children = refs.parent.children;\n                                } else {\n                                    var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n                                    _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n                                    if (findNext <= 0 || findEnd < findNext) {\n                                        endRead = findEnd + 1;\n                                    } else {\n                                        var nextStart = Math.max(DataEnder + 1, find1);\n                                        var _refs = this._hierarchieParse(_currentObject, nextStart);\n                                        endRead = _refs.end;\n                                        _currentObject.children = _refs.parent.children;\n                                    }\n                                }\n                                _currentObject.parent = _parent;\n                                if (_currentObject.type != 'template') {\n                                    _parent.children.push(_currentObject);\n                                }\n                            } else {\n                                endRead = find1 === -1 ? this._data.length : findEnd + 1;\n                                break;\n                            }\n                        }\n                        return {\n                            parent: _parent,\n                            end: endRead\n                        };\n                    }\n                },\n                {\n                    key: '_mainloop',\n                    value: function _mainloop() {\n                        var _this2 = this;\n                        this._mainProc();\n                        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n                            setTimeout(function () {\n                                _this2._mainloop();\n                            }, 1);\n                        } else {\n                            setTimeout(function () {\n                                _this2.onLoad({\n                                    models: _this2.Meshes,\n                                    animations: _this2.animations\n                                });\n                            }, 1);\n                        }\n                    }\n                },\n                {\n                    key: '_mainProc',\n                    value: function _mainProc() {\n                        var breakFlag = false;\n                        while (true) {\n                            if (!this._currentObject.worked) {\n                                switch (this._currentObject.type) {\n                                case 'template':\n                                    break;\n                                case 'AnimTicksPerSecond':\n                                    this.animTicksPerSecond = parseInt(this._currentObject.data);\n                                    break;\n                                case 'Frame':\n                                    this._setFrame();\n                                    break;\n                                case 'FrameTransformMatrix':\n                                    this._setFrameTransformMatrix();\n                                    break;\n                                case 'Mesh':\n                                    this._changeRoot();\n                                    this._currentGeo = {};\n                                    this._currentGeo.name = this._currentObject.name.trim();\n                                    this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                                    this._currentGeo.VertexSetedBoneCount = [];\n                                    this._currentGeo.GeometryData = {\n                                        vertices: [],\n                                        normals: [],\n                                        uvs: [],\n                                        skinIndices: [],\n                                        skinWeights: [],\n                                        indices: [],\n                                        materialIndices: []\n                                    };\n                                    this._currentGeo.Materials = [];\n                                    this._currentGeo.normalVectors = [];\n                                    this._currentGeo.BoneInfs = [];\n                                    this._currentGeo.baseFrame = this._currentFrame;\n                                    this._makeBoneFrom_CurrentFrame();\n                                    this._readVertexDatas();\n                                    breakFlag = true;\n                                    break;\n                                case 'MeshNormals':\n                                    this._readVertexDatas();\n                                    break;\n                                case 'MeshTextureCoords':\n                                    this._setMeshTextureCoords();\n                                    break;\n                                case 'VertexDuplicationIndices':\n                                    break;\n                                case 'MeshMaterialList':\n                                    this._setMeshMaterialList();\n                                    break;\n                                case 'Material':\n                                    this._setMaterial();\n                                    break;\n                                case 'SkinWeights':\n                                    this._setSkinWeights();\n                                    break;\n                                case 'AnimationSet':\n                                    this._changeRoot();\n                                    this._currentAnime = {};\n                                    this._currentAnime.name = this._currentObject.name.trim();\n                                    this._currentAnime.AnimeFrames = [];\n                                    break;\n                                case 'Animation':\n                                    if (this._currentAnimeFrames) {\n                                        this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                    }\n                                    this._currentAnimeFrames = new XAnimationInfo();\n                                    this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                                    break;\n                                case 'AnimationKey':\n                                    this._readAnimationKey();\n                                    breakFlag = true;\n                                    break;\n                                }\n                                this._currentObject.worked = true;\n                            }\n                            if (this._currentObject.children.length > 0) {\n                                this._currentObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + this._currentObject.name);\n                                }\n                                if (breakFlag)\n                                    break;\n                            } else {\n                                if (this._currentObject.worked) {\n                                    if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                                        this._changeRoot();\n                                    }\n                                }\n                                if (this._currentObject.parent) {\n                                    this._currentObject = this._currentObject.parent;\n                                } else {\n                                    breakFlag = true;\n                                }\n                                if (breakFlag)\n                                    break;\n                            }\n                        }\n                        return;\n                    }\n                },\n                {\n                    key: '_changeRoot',\n                    value: function _changeRoot() {\n                        if (this._currentGeo != null && this._currentGeo.name) {\n                            this._makeOutputGeometry();\n                        }\n                        this._currentGeo = {};\n                        if (this._currentAnime != null && this._currentAnime.name) {\n                            if (this._currentAnimeFrames) {\n                                this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                                this._currentAnimeFrames = null;\n                            }\n                            this._makeOutputAnimation();\n                        }\n                        this._currentAnime = {};\n                    }\n                },\n                {\n                    key: '_getParentName',\n                    value: function _getParentName(_obj) {\n                        if (_obj.parent) {\n                            if (_obj.parent.name) {\n                                return _obj.parent.name;\n                            } else {\n                                return this._getParentName(_obj.parent);\n                            }\n                        } else {\n                            return '';\n                        }\n                    }\n                },\n                {\n                    key: '_setFrame',\n                    value: function _setFrame() {\n                        this._nowFrameName = this._currentObject.name.trim();\n                        this._currentFrame = {};\n                        this._currentFrame.name = this._nowFrameName;\n                        this._currentFrame.children = [];\n                        if (this._currentObject.parent && this._currentObject.parent.name) {\n                            this._currentFrame.parentName = this._currentObject.parent.name;\n                        }\n                        this.frameHierarchie.push(this._nowFrameName);\n                        this.HieStack[this._nowFrameName] = this._currentFrame;\n                    }\n                },\n                {\n                    key: '_setFrameTransformMatrix',\n                    value: function _setFrameTransformMatrix() {\n                        this._currentFrame.FrameTransformMatrix = new THREE.Matrix4();\n                        var data = this._currentObject.data.split(',');\n                        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n                        this._makeBoneFrom_CurrentFrame();\n                    }\n                },\n                {\n                    key: '_makeBoneFrom_CurrentFrame',\n                    value: function _makeBoneFrom_CurrentFrame() {\n                        if (!this._currentFrame.FrameTransformMatrix) {\n                            return;\n                        }\n                        var b = new THREE.Bone();\n                        b.name = this._currentFrame.name;\n                        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n                        b.matrixWorld = b.matrix;\n                        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n                        this._currentFrame.putBone = b;\n                        if (this._currentFrame.parentName) {\n                            for (var frame in this.HieStack) {\n                                if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                                    this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n                                }\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readVertexDatas',\n                    value: function _readVertexDatas() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        var maxLength = 0;\n                        while (true) {\n                            var changeMode = false;\n                            if (mode_local === 0) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local = 1;\n                                maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n                                if (maxLength <= 0) {\n                                    maxLength = this._currentObject.data.length;\n                                }\n                            } else {\n                                var find = 0;\n                                switch (mode) {\n                                case 0:\n                                    find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    break;\n                                case 1:\n                                    find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                                    break;\n                                }\n                                if (find === 0 || find > maxLength) {\n                                    find = maxLength;\n                                    mode_local = 0;\n                                    changeMode = true;\n                                }\n                                switch (this._currentObject.type) {\n                                case 'Mesh':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    case 1:\n                                        this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                case 'MeshNormals':\n                                    switch (mode) {\n                                    case 0:\n                                        this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                                        break;\n                                    }\n                                    break;\n                                }\n                                endRead = find + 1;\n                                if (changeMode) {\n                                    mode++;\n                                }\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_readInt1',\n                    value: function _readInt1(start) {\n                        var find = this._currentObject.data.indexOf(';', start);\n                        return {\n                            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n                            endRead: find + 1\n                        };\n                    }\n                },\n                {\n                    key: '_readVertex1',\n                    value: function _readVertex1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n                        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n                        this._currentGeo.VertexSetedBoneCount.push(0);\n                    }\n                },\n                {\n                    key: '_readFace1',\n                    value: function _readFace1(line) {\n                        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n                        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n                    }\n                },\n                {\n                    key: '_readNormalVector1',\n                    value: function _readNormalVector1(line) {\n                        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n                        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n                    }\n                },\n                {\n                    key: '_buildGeometry',\n                    value: function _buildGeometry() {\n                        var bufferGeometry = new THREE.BufferGeometry();\n                        var position = [];\n                        var normals = [];\n                        var uvs = [];\n                        var skinIndices = [];\n                        var skinWeights = [];\n                        var data = this._currentGeo.GeometryData;\n                        for (var i = 0, l = data.indices.length; i < l; i++) {\n                            var stride2 = data.indices[i] * 2;\n                            var stride3 = data.indices[i] * 3;\n                            var stride4 = data.indices[i] * 4;\n                            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n                            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n                            skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n                            skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n                            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n                        }\n                        bufferGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n                        bufferGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n                        bufferGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n                        bufferGeometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4));\n                        bufferGeometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4));\n                        this._computeGroups(bufferGeometry, data.materialIndices);\n                        return bufferGeometry;\n                    }\n                },\n                {\n                    key: '_computeGroups',\n                    value: function _computeGroups(bufferGeometry, materialIndices) {\n                        var group;\n                        var groups = [];\n                        var materialIndex = undefined;\n                        for (var i = 0; i < materialIndices.length; i++) {\n                            var currentMaterialIndex = materialIndices[i];\n                            if (currentMaterialIndex !== materialIndex) {\n                                materialIndex = currentMaterialIndex;\n                                if (group !== undefined) {\n                                    group.count = i * 3 - group.start;\n                                    groups.push(group);\n                                }\n                                group = {\n                                    start: i * 3,\n                                    materialIndex: materialIndex\n                                };\n                            }\n                        }\n                        if (group !== undefined) {\n                            group.count = i * 3 - group.start;\n                            groups.push(group);\n                        }\n                        bufferGeometry.groups = groups;\n                    }\n                },\n                {\n                    key: '_setMeshTextureCoords',\n                    value: function _setMeshTextureCoords() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            switch (mode) {\n                            case 0:\n                                if (mode_local === 0) {\n                                    var refO = this._readInt1(0);\n                                    endRead = refO.endRead;\n                                    mode_local = 1;\n                                } else {\n                                    var find = this._currentObject.data.indexOf(',', endRead) + 1;\n                                    if (find === 0) {\n                                        find = this._currentObject.data.length;\n                                        mode = 2;\n                                        mode_local = 0;\n                                    }\n                                    var line = this._currentObject.data.substr(endRead, find - endRead);\n                                    var data = this._readLine(line.trim()).split(';');\n                                    if (this.IsUvYReverse) {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                                    } else {\n                                        this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                                    }\n                                    endRead = find + 1;\n                                }\n                                break;\n                            }\n                            if (endRead >= this._currentObject.data.length) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMeshMaterialList',\n                    value: function _setMeshMaterialList() {\n                        var endRead = 0;\n                        var mode = 0;\n                        var mode_local = 0;\n                        while (true) {\n                            if (mode_local < 2) {\n                                var refO = this._readInt1(endRead);\n                                endRead = refO.endRead;\n                                mode_local++;\n                            } else {\n                                var find = this._currentObject.data.indexOf(';', endRead);\n                                if (find === -1) {\n                                    find = this._currentObject.data.length;\n                                    mode = 3;\n                                    mode_local = 0;\n                                }\n                                var line = this._currentObject.data.substr(endRead, find - endRead);\n                                var data = this._readLine(line.trim()).split(',');\n                                for (var i = 0; i < data.length; i++) {\n                                    this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n                                }\n                                endRead = this._currentObject.data.length;\n                            }\n                            if (endRead >= this._currentObject.data.length || mode >= 3) {\n                                break;\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_setMaterial',\n                    value: function _setMaterial() {\n                        var _nowMat = new THREE.MeshPhongMaterial({ color: Math.random() * 16777215 });\n                        _nowMat.side = THREE.FrontSide;\n                        _nowMat.name = this._currentObject.name;\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';;', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(';');\n                        _nowMat.color.r = parseFloat(data[0]);\n                        _nowMat.color.g = parseFloat(data[1]);\n                        _nowMat.color.b = parseFloat(data[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        _nowMat.shininess = parseFloat(this._readLine(line));\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(';');\n                        _nowMat.specular.r = parseFloat(data2[0]);\n                        _nowMat.specular.g = parseFloat(data2[1]);\n                        _nowMat.specular.b = parseFloat(data2[2]);\n                        endRead = find + 2;\n                        find = this._currentObject.data.indexOf(';;', endRead);\n                        if (find === -1) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(';');\n                        _nowMat.emissive.r = parseFloat(data3[0]);\n                        _nowMat.emissive.g = parseFloat(data3[1]);\n                        _nowMat.emissive.b = parseFloat(data3[2]);\n                        var localObject = null;\n                        while (true) {\n                            if (this._currentObject.children.length > 0) {\n                                localObject = this._currentObject.children.shift();\n                                if (this.debug) {\n                                    console.log('processing ' + localObject.name);\n                                }\n                                var fileName = localObject.data.substr(1, localObject.data.length - 2);\n                                switch (localObject.type) {\n                                case 'TextureFilename':\n                                    _nowMat.map = this.texloader.load(fileName);\n                                    break;\n                                case 'BumpMapFilename':\n                                    _nowMat.bumpMap = this.texloader.load(fileName);\n                                    _nowMat.bumpScale = 0.05;\n                                    break;\n                                case 'NormalMapFilename':\n                                    _nowMat.normalMap = this.texloader.load(fileName);\n                                    _nowMat.normalScale = new THREE.Vector2(2, 2);\n                                    break;\n                                case 'EmissiveMapFilename':\n                                    _nowMat.emissiveMap = this.texloader.load(fileName);\n                                    break;\n                                case 'LightMapFilename':\n                                    _nowMat.lightMap = this.texloader.load(fileName);\n                                    break;\n                                }\n                            } else {\n                                break;\n                            }\n                        }\n                        this._currentGeo.Materials.push(_nowMat);\n                    }\n                },\n                {\n                    key: '_setSkinWeights',\n                    value: function _setSkinWeights() {\n                        var boneInf = new XboneInf();\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        boneInf.boneName = line.substr(1, line.length - 2);\n                        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data = this._readLine(line.trim()).split(',');\n                        for (var i = 0; i < data.length; i++) {\n                            boneInf.Indeces.push(parseInt(data[i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data2 = this._readLine(line.trim()).split(',');\n                        for (var _i = 0; _i < data2.length; _i++) {\n                            boneInf.Weights.push(parseFloat(data2[_i]));\n                        }\n                        endRead = find + 1;\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        if (find <= 0) {\n                            find = this._currentObject.data.length;\n                        }\n                        line = this._currentObject.data.substr(endRead, find - endRead);\n                        var data3 = this._readLine(line.trim()).split(',');\n                        boneInf.OffsetMatrix = new THREE.Matrix4();\n                        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n                        this._currentGeo.BoneInfs.push(boneInf);\n                    }\n                },\n                {\n                    key: '_makePutBoneList',\n                    value: function _makePutBoneList(_RootName, _bones) {\n                        var putting = false;\n                        for (var frame in this.HieStack) {\n                            if (this.HieStack[frame].name === _RootName || putting) {\n                                putting = true;\n                                var b = new THREE.Bone();\n                                b.name = this.HieStack[frame].name;\n                                b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n                                b.matrixWorld = b.matrix;\n                                b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n                                b.pos = new THREE.Vector3().setFromMatrixPosition(FrameTransformMatrix).toArray();\n                                b.rotq = new THREE.Quaternion().setFromRotationMatrix(FrameTransformMatrix).toArray();\n                                b.scl = new THREE.Vector3().setFromMatrixScale(FrameTransformMatrix).toArray();\n                                if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                                    for (var i = 0; i < _bones.length; i++) {\n                                        if (this.HieStack[frame].parentName === _bones[i].name) {\n                                            _bones[i].add(b);\n                                            b.parent = i;\n                                            break;\n                                        }\n                                    }\n                                }\n                                _bones.push(b);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputGeometry',\n                    value: function _makeOutputGeometry() {\n                        var mesh = null;\n                        if (this._currentGeo.BoneInfs.length > 0) {\n                            var putBones = [];\n                            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n                            for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n                                var boneIndex = 0;\n                                for (var bb = 0; bb < putBones.length; bb++) {\n                                    if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                                        boneIndex = bb;\n                                        putBones[bb].OffsetMatrix = new THREE.Matrix4();\n                                        putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                                        break;\n                                    }\n                                }\n                                for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                                    var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n                                    var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n                                    var stride = nowVertexID * 4;\n                                    switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                                    case 0:\n                                        this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                                        break;\n                                    case 1:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                                        break;\n                                    case 2:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                                        break;\n                                    case 3:\n                                        this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                                        this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                                        break;\n                                    }\n                                    this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n                                    if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                                        console.log('warn! over 4 bone weight! :' + nowVertexID);\n                                    }\n                                }\n                            }\n                            for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n                                this._currentGeo.Materials[sk].skinning = true;\n                            }\n                            var offsetList = [];\n                            for (var _bi = 0; _bi < putBones.length; _bi++) {\n                                if (putBones[_bi].OffsetMatrix) {\n                                    offsetList.push(putBones[_bi].OffsetMatrix);\n                                } else {\n                                    offsetList.push(new THREE.Matrix4());\n                                }\n                            }\n                            var bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                            this._initSkeleton(mesh, putBones, offsetList);\n                        } else {\n                            var _bufferGeometry = this._buildGeometry();\n                            mesh = new THREE.Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n                        }\n                        mesh.name = this._currentGeo.name;\n                        var worldBaseMx = new THREE.Matrix4();\n                        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n                        if (currentMxFrame && currentMxFrame.parent) {\n                            while (true) {\n                                currentMxFrame = currentMxFrame.parent;\n                                if (currentMxFrame) {\n                                    worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n                                } else {\n                                    break;\n                                }\n                            }\n                            mesh.applyMatrix4(worldBaseMx);\n                        }\n                        this.Meshes.push(mesh);\n                    }\n                },\n                {\n                    key: '_initSkeleton',\n                    value: function _initSkeleton(mesh, boneList, boneInverses) {\n                        var bones = [], bone, gbone;\n                        var i, il;\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            bone = new THREE.Bone();\n                            bones.push(bone);\n                            bone.name = gbone.name;\n                            bone.position.fromArray(gbone.pos);\n                            bone.quaternion.fromArray(gbone.rotq);\n                            if (gbone.scl !== undefined)\n                                bone.scale.fromArray(gbone.scl);\n                        }\n                        for (i = 0, il = boneList.length; i < il; i++) {\n                            gbone = boneList[i];\n                            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n                                bones[gbone.parent].add(bones[i]);\n                            } else {\n                                mesh.add(bones[i]);\n                            }\n                        }\n                        mesh.updateMatrixWorld(true);\n                        var skeleton = new THREE.Skeleton(bones, boneInverses);\n                        mesh.bind(skeleton, mesh.matrixWorld);\n                    }\n                },\n                {\n                    key: '_readAnimationKey',\n                    value: function _readAnimationKey() {\n                        var endRead = 0;\n                        var find = this._currentObject.data.indexOf(';', endRead);\n                        var line = this._currentObject.data.substr(endRead, find - endRead);\n                        endRead = find + 1;\n                        var nowKeyType = parseInt(this._readLine(line));\n                        find = this._currentObject.data.indexOf(';', endRead);\n                        endRead = find + 1;\n                        line = this._currentObject.data.substr(endRead);\n                        var data = this._readLine(line.trim()).split(';;,');\n                        for (var i = 0; i < data.length; i++) {\n                            var data2 = data[i].split(';');\n                            var keyInfo = new XKeyFrameInfo();\n                            keyInfo.type = nowKeyType;\n                            keyInfo.Frame = parseInt(data2[0]);\n                            keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n                            keyInfo.time = keyInfo.Frame;\n                            if (nowKeyType != 4) {\n                                var frameFound = false;\n                                for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                                    if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                                        keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                                        frameFound = true;\n                                        break;\n                                    }\n                                }\n                                var frameValue = data2[2].split(',');\n                                switch (nowKeyType) {\n                                case 0:\n                                    keyInfo.rot = new THREE.Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                                    break;\n                                case 1:\n                                    keyInfo.scl = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                case 2:\n                                    keyInfo.pos = new THREE.Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                                    break;\n                                }\n                                if (!frameFound) {\n                                    this._currentAnimeFrames.keyFrames.push(keyInfo);\n                                }\n                            } else {\n                                keyInfo.matrix = new THREE.Matrix4();\n                                this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n                                this._currentAnimeFrames.keyFrames.push(keyInfo);\n                            }\n                        }\n                    }\n                },\n                {\n                    key: '_makeOutputAnimation',\n                    value: function _makeOutputAnimation() {\n                        var animationObj = new XAnimationObj(this.options);\n                        animationObj.fps = this.animTicksPerSecond;\n                        animationObj.name = this._currentAnime.name;\n                        animationObj.make(this._currentAnime.AnimeFrames);\n                        this.animations.push(animationObj);\n                    }\n                },\n                {\n                    key: 'assignAnimation',\n                    value: function assignAnimation(_model, _animation) {\n                        var model = _model;\n                        var animation = _animation;\n                        if (!model) {\n                            model = this.Meshes[0];\n                        }\n                        if (!animation) {\n                            animation = this.animations[0];\n                        }\n                        if (!model || !animation) {\n                            return null;\n                        }\n                        var put = {};\n                        put.fps = animation.fps;\n                        put.name = animation.name;\n                        put.length = animation.length;\n                        put.hierarchy = [];\n                        for (var b = 0; b < model.skeleton.bones.length; b++) {\n                            var findAnimation = false;\n                            for (var i = 0; i < animation.hierarchy.length; i++) {\n                                if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n                                    findAnimation = true;\n                                    var c_key = animation.hierarchy[i].copy();\n                                    c_key.parent = -1;\n                                    if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                                        for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                                            if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                                                c_key.parent = bb;\n                                                c_key.parentName = model.skeleton.bones[b].parent.name;\n                                            }\n                                        }\n                                    }\n                                    put.hierarchy.push(c_key);\n                                    break;\n                                }\n                            }\n                            if (!findAnimation) {\n                                var _c_key = animation.hierarchy[0].copy();\n                                _c_key.name = model.skeleton.bones[b].name;\n                                _c_key.parent = -1;\n                                for (var k = 0; k < _c_key.keys.length; k++) {\n                                    if (_c_key.keys[k].pos) {\n                                        _c_key.keys[k].pos.set(0, 0, 0);\n                                    }\n                                    if (_c_key.keys[k].scl) {\n                                        _c_key.keys[k].scl.set(1, 1, 1);\n                                    }\n                                    if (_c_key.keys[k].rot) {\n                                        _c_key.keys[k].rot.set(0, 0, 0, 1);\n                                    }\n                                }\n                                put.hierarchy.push(_c_key);\n                            }\n                        }\n                        if (!model.geometry.animations) {\n                            model.geometry.animations = [];\n                        }\n                        model.geometry.animations.push(THREE.AnimationClip.parseAnimation(put, model.skeleton.bones));\n                        if (!model.animationMixer) {\n                            model.animationMixer = new THREE.AnimationMixer(model);\n                        }\n                        return put;\n                    }\n                },\n                {\n                    key: '_ParseMatrixData',\n                    value: function _ParseMatrixData(targetMatrix, data) {\n                        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n                    }\n                }\n            ]);\n            return XLoader;\n        }();\n        return XLoader;\n    }();\n\n    return XLoader;\n});"]}