{"version":3,"sources":["loaders/BasisTextureLoader.js"],"names":["define","THREE","BasisTextureLoader","manager","Loader","call","this","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","format","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","prototype","Object","assign","create","constructor","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","config","extensions","get","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","Error","cTFETC1","load","url","onLoad","onProgress","onError","loader","FileLoader","setResponseType","buffer","_createTexture","then","catch","worker","taskID","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","texture","width","height","mipmaps","CompressedTexture","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","cTFBC1","DXT_FORMAT_MAP","UnsignedByteType","RGB_ETC1_Format","cTFPVRTC1_4_RGB","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","minFilter","length","LinearFilter","LinearMipmapLinearFilter","magFilter","generateMipmaps","needsUpdate","finally","_taskLoad","_initTranscoder","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","data","console","error","push","sort","a","b","dispose","i","terminate","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","wasmBinary","BasisModule","onRuntimeInitialized","BASIS","BasisFile","initializeBasis","hasAlpha","basisFile","Uint8Array","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","delete","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","transcode","buffers","self"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAigBV,OA9eAA,EAAMC,mBAAqB,SAAWC,GAErCF,EAAMG,OAAOC,KAAMC,KAAMH,GAEzBG,KAAKC,eAAiB,GACtBD,KAAKE,iBAAmB,KACxBF,KAAKG,kBAAoB,KAEzBH,KAAKI,YAAc,EACnBJ,KAAKK,cACLL,KAAKM,iBAAmB,EACxBN,KAAKO,gBAAkB,GACvBP,KAAKQ,cACJC,OAAQ,KACRC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,gBAAgB,IAKlBnB,EAAMC,mBAAmBmB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQvB,EAAMG,OAAOiB,YAE/EI,YAAaxB,EAAMC,mBAEnBwB,kBAAmB,SAAWC,GAI7B,OAFArB,KAAKC,eAAiBoB,EAEfrB,MAIRsB,eAAgB,SAAWlB,GAI1B,OAFAJ,KAAKI,YAAcA,EAEZJ,MAIRuB,cAAe,SAAWC,GAEzB,IAAIC,EAASzB,KAAKQ,aASlB,GAPAiB,EAAOf,gBAAmBc,EAASE,WAAWC,IAAK,iCACnDF,EAAOd,gBAAmBa,EAASE,WAAWC,IAAK,gCACnDF,EAAOb,eAAkBY,EAASE,WAAWC,IAAK,iCAClDF,EAAOZ,eAAkBW,EAASE,WAAWC,IAAK,iCAClDF,EAAOX,iBAAoBU,EAASE,WAAWC,IAAK,qCAC7CH,EAASE,WAAWC,IAAK,yCAE3BF,EAAOf,cAEXe,EAAOhB,OAASd,EAAMC,mBAAmBgC,aAAaC,iBAEhD,GAAKJ,EAAOd,cAElBc,EAAOhB,OAASd,EAAMC,mBAAmBgC,aAAaE,eAEhD,GAAKL,EAAOZ,aAElBY,EAAOhB,OAASd,EAAMC,mBAAmBgC,aAAaG,YAEhD,GAAKN,EAAOX,eAElBW,EAAOhB,OAASd,EAAMC,mBAAmBgC,aAAaI,qBAEhD,CAAA,IAAKP,EAAOb,aAMlB,MAAM,IAAIqB,MAAO,0EAJjBR,EAAOhB,OAASd,EAAMC,mBAAmBgC,aAAaM,QAQvD,OAAOlC,MAIRmC,KAAM,SAAWC,EAAKC,EAAQC,EAAYC,GAEzC,IAAIC,EAAS,IAAI7C,EAAM8C,WAAYzC,KAAKH,SAExC2C,EAAOE,gBAAiB,eAExBF,EAAOL,KAAMC,EAAOO,IAEnB3C,KAAK4C,eAAgBD,GACnBE,KAAMR,GACNS,MAAOP,IAEPD,EAAYC,IAQhBK,eAAgB,SAAWD,GAE1B,IAAII,EACAC,EAEAC,EAAWN,EAAOO,WAElBC,EAAiBnD,KAAKoD,gBAAiBH,GACzCJ,KAAQQ,IAERN,EAASM,EACTL,EAAShD,KAAKM,mBAEP,IAAIgD,QAAS,CAAEC,EAASC,KAE9BT,EAAOU,WAAYT,IAAaO,QAAAA,EAASC,OAAAA,GAEzCT,EAAOW,aAAeC,KAAM,YAAaC,GAAIZ,EAAQL,OAAAA,IAAYA,QAKlEE,KAAQgB,IAER,IAIIC,EAJArC,EAASzB,KAAKQ,cAEduD,MAAEA,EAAKC,OAAEA,EAAMC,QAAEA,EAAOxD,OAAEA,GAAWoD,EAIzC,OAASpD,GAER,KAAKd,EAAMC,mBAAmBgC,aAAaC,YAC1CiC,EAAU,IAAInE,EAAMuE,kBAAmBD,EAASF,EAAOC,EAAQrE,EAAMwE,sBACrE,MACD,KAAKxE,EAAMC,mBAAmBgC,aAAaE,UAC1CgC,EAAU,IAAInE,EAAMuE,kBAAmBD,EAASF,EAAOC,EAAQrE,EAAMyE,kBACrE,MACD,KAAKzE,EAAMC,mBAAmBgC,aAAayC,OAC3C,KAAK1E,EAAMC,mBAAmBgC,aAAaG,OAC1C+B,EAAU,IAAInE,EAAMuE,kBAAmBD,EAASF,EAAOC,EAAQrE,EAAMC,mBAAmB0E,eAAgB7C,EAAOhB,QAAUd,EAAM4E,kBAC/H,MACD,KAAK5E,EAAMC,mBAAmBgC,aAAaM,QAC1C4B,EAAU,IAAInE,EAAMuE,kBAAmBD,EAASF,EAAOC,EAAQrE,EAAM6E,iBACrE,MACD,KAAK7E,EAAMC,mBAAmBgC,aAAa6C,gBAC1CX,EAAU,IAAInE,EAAMuE,kBAAmBD,EAASF,EAAOC,EAAQrE,EAAM+E,yBACrE,MACD,KAAK/E,EAAMC,mBAAmBgC,aAAaI,iBAC1C8B,EAAU,IAAInE,EAAMuE,kBAAmBD,EAASF,EAAOC,EAAQrE,EAAMgF,0BACrE,MACD,QACC,MAAM,IAAI1C,MAAO,4DASnB,OALA6B,EAAQc,UAA+B,IAAnBX,EAAQY,OAAelF,EAAMmF,aAAenF,EAAMoF,yBACtEjB,EAAQkB,UAAYrF,EAAMmF,aAC1BhB,EAAQmB,iBAAkB,EAC1BnB,EAAQoB,aAAc,EAEfpB,IAgBT,OAZAX,EACEgC,QAAS,KAEJpC,GAAUC,IAEdD,EAAOqC,WAAanC,SACbF,EAAOU,WAAYT,MAMtBG,GAIRkC,gBAAiB,WAEhB,IAAOrF,KAAKG,kBAAoB,CAG/B,IAAImF,EAAW,IAAI3F,EAAM8C,WAAYzC,KAAKH,SAC1CyF,EAASC,QAASvF,KAAKC,gBACvB,IAAIuF,EAAY,IAAIlC,QAAS,CAAEC,EAASC,KAEvC8B,EAASnD,KAAM,sBAAuBoB,OAASkC,EAAWjC,KAKvDkC,EAAe,IAAI/F,EAAM8C,WAAYzC,KAAKH,SAC9C6F,EAAaH,QAASvF,KAAKC,gBAC3ByF,EAAahD,gBAAiB,eAC9B,IAAIiD,EAAgB,IAAIrC,QAAS,CAAEC,EAASC,KAE3CkC,EAAavD,KAAM,wBAAyBoB,OAASkC,EAAWjC,KAIjExD,KAAKG,kBAAoBmD,QAAQsC,KAAOJ,EAAWG,IACjD9C,KAAM,EAAI2C,EAAWG,MAErB,IAAIE,EAAKlG,EAAMC,mBAAmBkG,YAAYC,WAE1CC,GACH,4BACAR,EACA,eACAK,EAAGI,UAAWJ,EAAGK,QAAS,KAAQ,EAAGL,EAAGM,YAAa,OACpDC,KAAM,MAERpG,KAAKO,gBAAkB8F,IAAIC,gBAAiB,IAAIC,MAAQP,KACxDhG,KAAKE,iBAAmByF,IAM3B,OAAO3F,KAAKG,mBAIbiD,gBAAiB,SAAWH,GAE3B,OAAOjD,KAAKqF,kBAAkBxC,KAAM,KAIlC,IA4CGE,EA9CC/C,KAAKK,WAAWwE,OAAS7E,KAAKI,cAE9B2C,EAAS,IAAIyD,OAAQxG,KAAKO,kBAEvBkD,cACPV,EAAOqC,UAAY,EAEnBrC,EAAOW,aACNC,KAAM,OACNlC,OAAQzB,KAAKQ,aACbN,iBAAkBF,KAAKE,mBAGxB6C,EAAO0D,UAAY,SAAWC,GAE7B,IAAI7C,EAAU6C,EAAEC,KAEhB,OAAS9C,EAAQF,MAEhB,IAAK,YACJZ,EAAOU,WAAYI,EAAQD,IAAKL,QAASM,GACzC,MAED,IAAK,QACJd,EAAOU,WAAYI,EAAQD,IAAKJ,OAAQK,GACxC,MAED,QACC+C,QAAQC,MAAO,kDAAoDhD,EAAQF,KAAO,OAMrF3D,KAAKK,WAAWyG,KAAM/D,IAItB/C,KAAKK,WAAW0G,KAAM,SAAWC,EAAGC,GAEnC,OAAOD,EAAE5B,UAAY6B,EAAE7B,WAAc,EAAI,IAU3C,OAJIrC,EAAS/C,KAAKK,WAAYL,KAAKK,WAAWwE,OAAS,IAEhDO,WAAanC,EAEbF,KAMTmE,QAAS,WAER,IAAM,IAAIC,EAAI,EAAGA,EAAInH,KAAKK,WAAWwE,OAAQsC,IAE5CnH,KAAKK,WAAY8G,GAAIC,YAMtB,OAFApH,KAAKK,WAAWwE,OAAS,EAElB7E,QAQTL,EAAMC,mBAAmBgC,cACxBM,QAAS,EACTmF,QAAS,EACThD,OAAQ,EACRtC,OAAQ,EACRuF,OAAQ,EACRC,OAAQ,EACRC,sBAAuB,EACvB1F,UAAW,EACX2C,gBAAiB,EACjBzC,iBAAkB,EAClBH,YAAa,GACb4F,WAAY,GACZC,+BAAgC,GAChCC,UAAW,GACXC,UAAW,GACXC,UAAW,GACXC,YAAa,IAKdnI,EAAMC,mBAAmBmI,YACxBC,6BAA8B,MAC9BC,8BAA+B,MAC/BC,8BAA+B,MAC/BC,8BAA+B,OAEhCxI,EAAMC,mBAAmB0E,kBACzB3E,EAAMC,mBAAmB0E,eAAgB3E,EAAMC,mBAAmBgC,aAAayC,QAC9E1E,EAAMC,mBAAmBmI,WAAWC,6BACrCrI,EAAMC,mBAAmB0E,eAAgB3E,EAAMC,mBAAmBgC,aAAaG,QAC9EpC,EAAMC,mBAAmBmI,WAAWI,8BAIrCxI,EAAMC,mBAAmBkG,YAAc,WAEtC,IAAIrE,EACAtB,EACAiI,EAEJ3B,UAAY,SAAWC,GAEtB,IAyCc2B,EAEVC,EA3CAzE,EAAU6C,EAAEC,KAEhB,OAAS9C,EAAQF,MAEhB,IAAK,OACJlC,EAASoC,EAAQpC,OAoCL4G,EAnCNxE,EAAQ3D,iBAsChBC,EAAoB,IAAImD,QAAWC,IAElC+E,GAAgBD,WAAAA,EAAYE,qBAAsBhF,GAClDiF,MAAOF,KAEJzF,KAAM,KAET,IAAI4F,UAAEA,EAASC,gBAAEA,GAAoBJ,EAErCF,EAAaK,EAEbC,MAhDC,MAED,IAAK,YACJvI,EAAkB0C,KAAM,KAEvB,IAMC,IAJA,IAAIkB,MAAEA,EAAKC,OAAEA,EAAM2E,SAAEA,EAAQ1E,QAAEA,EAAOxD,OAAEA,GA+C7C,SAAoBkC,GAEnB,IAAIiG,EAAY,IAAIR,EAAY,IAAIS,WAAYlG,IAE5CoB,EAAQ6E,EAAUE,cAAe,EAAG,GACpC9E,EAAS4E,EAAUG,eAAgB,EAAG,GACtCC,EAASJ,EAAUK,aAAc,GACjCN,EAAWC,EAAUM,cAEzB,SAASC,IAERP,EAAUQ,QACVR,EAAUS,SAIX,IAAOV,EAEN,OAASlH,EAAOhB,QAEf,KAAK,EACJgB,EAAOhB,OAAS,EASnB,IAAOsD,IAAWC,IAAYgF,EAG7B,MADAG,IACM,IAAIlH,MAAO,kDAIlB,IAAO2G,EAAUU,mBAGhB,MADAH,IACM,IAAIlH,MAAO,sDAMlB,IAFA,IAAIgC,KAEMsF,EAAM,EAAGA,EAAMP,EAAQO,IAAS,CAEzC,IAAIC,EAAWZ,EAAUE,cAAe,EAAGS,GACvCE,EAAYb,EAAUG,eAAgB,EAAGQ,GACzCG,EAAM,IAAIb,WAAYD,EAAUe,8BAA+B,EAAGJ,EAAK9H,EAAOhB,SAE9EmJ,EAAShB,EAAUiB,eACtBH,EACA,EACAH,EACA9H,EAAOhB,OACP,EACAkI,GAGD,IAAOiB,EAGN,MADAT,IACM,IAAIlH,MAAO,qDAIlBgC,EAAQ6C,MAAQH,KAAM+C,EAAK3F,MAAOyF,EAAUxF,OAAQyF,IAMrD,OAFAN,KAESpF,MAAAA,EAAOC,OAAAA,EAAQ2E,SAAAA,EAAU1E,QAAAA,EAASxD,OAAQgB,EAAOhB,QAzHHqJ,CAAWjG,EAAQlB,QAElEoH,KAEM5C,EAAI,EAAGA,EAAIlD,EAAQY,SAAWsC,EAEvC4C,EAAQjD,KAAM7C,EAASkD,GAAIR,KAAKhE,QAIjCqH,KAAKtG,aAAeC,KAAM,YAAaC,GAAIC,EAAQD,GAAIG,MAAAA,EAAOC,OAAAA,EAAQ2E,SAAAA,EAAU1E,QAAAA,EAASxD,OAAAA,GAAUsJ,GAElG,MAAQlD,GAETD,QAAQC,MAAOA,GAEfmD,KAAKtG,aAAeC,KAAM,QAASC,GAAIC,EAAQD,GAAIiD,MAAOA,EAAMhD,gBA+G/DlE,EAAMC","file":"../../loaders/BasisTextureLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t * @author Austin Eng / https://github.com/austinEng\n\t * @author Shrek Shao / https://github.com/shrekshao\n\t */\n\n\t/**\n\t * Loader for Basis Universal GPU Texture Codec.\n\t *\n\t * Basis Universal is a \"supercompressed\" GPU texture and texture video\n\t * compression system that outputs a highly compressed intermediate file format\n\t * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n\t * compression formats.\n\t *\n\t * This loader parallelizes the transcoding process across a configurable number\n\t * of web workers, before transferring the transcoded compressed texture back\n\t * to the main thread.\n\t */\n\tTHREE.BasisTextureLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = {\n\t\t\tformat: null,\n\t\t\tastcSupported: false,\n\t\t\tbptcSupported: false,\n\t\t\tetcSupported: false,\n\t\t\tdxtSupported: false,\n\t\t\tpvrtcSupported: false,\n\t\t};\n\n\t};\n\n\tTHREE.BasisTextureLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.BasisTextureLoader,\n\n\t\tsetTranscoderPath: function ( path ) {\n\n\t\t\tthis.transcoderPath = path;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\t\tthis.workerLimit = workerLimit;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdetectSupport: function ( renderer ) {\n\n\t\t\tvar config = this.workerConfig;\n\n\t\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\t\tconfig.bptcSupported = !! renderer.extensions.get( 'EXT_texture_compression_bptc' );\n\t\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( config.astcSupported ) {\n\n\t\t\t\tconfig.format = THREE.BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t\t} else if ( config.bptcSupported ) {\n\n\t\t\t\tconfig.format = THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n\n\t\t\t} else if ( config.dxtSupported ) {\n\n\t\t\t\tconfig.format = THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\t\tconfig.format = THREE.BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t\t} else if ( config.etcSupported ) {\n\n\t\t\t\tconfig.format = THREE.BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t\tthis._createTexture( buffer )\n\t\t\t\t\t.then( onLoad )\n\t\t\t\t\t.catch( onError );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\t/**\n\t\t * @param  {ArrayBuffer} buffer\n\t\t * @return {Promise<THREE.CompressedTexture>}\n\t\t */\n\t\t_createTexture: function ( buffer ) {\n\n\t\t\tvar worker;\n\t\t\tvar taskID;\n\n\t\t\tvar taskCost = buffer.byteLength;\n\n\t\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t\t.then( ( _worker ) => {\n\n\t\t\t\t\tworker = _worker;\n\t\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} )\n\t\t\t\t.then( ( message ) => {\n\n\t\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\t\ttexture = new THREE.CompressedTexture( mipmaps, width, height, THREE.RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n\t\t\t\t\t\t\ttexture = new THREE.CompressedTexture( mipmaps, width, height, THREE.RGBA_BPTC_Format );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\t\ttexture = new THREE.CompressedTexture( mipmaps, width, height, THREE.BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], THREE.UnsignedByteType );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\t\ttexture = new THREE.CompressedTexture( mipmaps, width, height, THREE.RGB_ETC1_Format );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\t\ttexture = new THREE.CompressedTexture( mipmaps, width, height, THREE.RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase THREE.BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\t\ttexture = new THREE.CompressedTexture( mipmaps, width, height, THREE.RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? THREE.LinearFilter : THREE.LinearMipmapLinearFilter;\n\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\treturn texture;\n\n\t\t\t\t} );\n\n\t\t\ttexturePending\n\t\t\t\t.finally( () => {\n\n\t\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\treturn texturePending;\n\n\t\t},\n\n\t\t_initTranscoder: function () {\n\n\t\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t\t// Load transcoder wrapper.\n\t\t\t\tvar jsLoader = new THREE.FileLoader( this.manager );\n\t\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t\t} );\n\n\t\t\t\t// Load transcoder WASM binary.\n\t\t\t\tvar binaryLoader = new THREE.FileLoader( this.manager );\n\t\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t\t} );\n\n\t\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\t\tvar fn = THREE.BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\t\tvar body = [\n\t\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn this.transcoderPending;\n\n\t\t},\n\n\t\t_allocateWorker: function ( taskCost ) {\n\n\t\t\treturn this._initTranscoder().then( () => {\n\n\t\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\t\tworker._callbacks = {};\n\t\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\t\tworker.postMessage( {\n\t\t\t\t\t\ttype: 'init',\n\t\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t\t} );\n\n\t\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\t\tworker._taskLoad += taskCost;\n\n\t\t\t\treturn worker;\n\n\t\t\t} );\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t\t}\n\n\t\t\tthis.workerPool.length = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/* CONSTANTS */\n\n\tTHREE.BasisTextureLoader.BASIS_FORMAT = {\n\t\tcTFETC1: 0,\n\t\tcTFETC2: 1,\n\t\tcTFBC1: 2,\n\t\tcTFBC3: 3,\n\t\tcTFBC4: 4,\n\t\tcTFBC5: 5,\n\t\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\t\tcTFBC7_M5: 7,\n\t\tcTFPVRTC1_4_RGB: 8,\n\t\tcTFPVRTC1_4_RGBA: 9,\n\t\tcTFASTC_4x4: 10,\n\t\tcTFATC_RGB: 11,\n\t\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\t\tcTFRGBA32: 13,\n\t\tcTFRGB565: 14,\n\t\tcTFBGR565: 15,\n\t\tcTFRGBA4444: 16,\n\t};\n\n\t// DXT formats, from:\n\t// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\n\tTHREE.BasisTextureLoader.DXT_FORMAT = {\n\t\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\t\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\t\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\t\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n\t};\n\tTHREE.BasisTextureLoader.DXT_FORMAT_MAP = {};\n\tTHREE.BasisTextureLoader.DXT_FORMAT_MAP[ THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\t\tTHREE.BasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\tTHREE.BasisTextureLoader.DXT_FORMAT_MAP[ THREE.BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\t\tTHREE.BasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t/* WEB WORKER */\n\n\tTHREE.BasisTextureLoader.BasisWorker = function () {\n\n\t\tvar config;\n\t\tvar transcoderPending;\n\t\tvar _BasisFile;\n\n\t\tonmessage = function ( e ) {\n\n\t\t\tvar message = e.data;\n\n\t\t\tswitch ( message.type ) {\n\n\t\t\t\tcase 'init':\n\t\t\t\t\tconfig = message.config;\n\t\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'transcode':\n\t\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction init( wasmBinary ) {\n\n\t\t\tvar BasisModule;\n\t\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\t\tBASIS( BasisModule );\n\n\t\t\t} ).then( () => {\n\n\t\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t\t_BasisFile = BasisFile;\n\n\t\t\t\tinitializeBasis();\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction transcode( buffer ) {\n\n\t\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\t\tfunction cleanup() {\n\n\t\t\t\tbasisFile.close();\n\t\t\t\tbasisFile.delete();\n\n\t\t\t}\n\n\t\t\tif ( ! hasAlpha ) {\n\n\t\t\t\tswitch ( config.format ) {\n\n\t\t\t\t\tcase 9: // Hardcoded: THREE.BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\t\tconfig.format = 8; // Hardcoded: THREE.BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t\t}\n\n\t\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t\t}\n\n\t\t\tvar mipmaps = [];\n\n\t\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\t\tdst,\n\t\t\t\t\t0,\n\t\t\t\t\tmip,\n\t\t\t\t\tconfig.format,\n\t\t\t\t\t0,\n\t\t\t\t\thasAlpha\n\t\t\t\t);\n\n\t\t\t\tif ( ! status ) {\n\n\t\t\t\t\tcleanup();\n\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t\t}\n\n\t\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t\t}\n\n\t\t\tcleanup();\n\n\t\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.BasisTextureLoader;\n});\n"]}