{"version":3,"sources":["loaders/BasisTextureLoader.js"],"names":["define","THREE","threex","BasisTextureLoader","manager","Loader","call","this","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","format","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","prototype","Object","assign","create","constructor","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","config","extensions","get","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","Error","cTFETC1","load","url","onLoad","onProgress","onError","loader","FileLoader","setResponseType","buffer","_createTexture","then","catch","worker","taskID","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","texture","width","height","mipmaps","CompressedTexture","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","cTFBC1","DXT_FORMAT_MAP","UnsignedByteType","RGB_ETC1_Format","cTFPVRTC1_4_RGB","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","minFilter","length","LinearFilter","LinearMipmapLinearFilter","magFilter","generateMipmaps","needsUpdate","finally","_taskLoad","_initTranscoder","jsLoader","setPath","jsContent","undefined","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","onmessage","e","data","console","error","push","sort","a","b","dispose","i","terminate","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","wasmBinary","BasisModule","onRuntimeInitialized","BASIS","BasisFile","initializeBasis","hasAlpha","basisFile","Uint8Array","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","delete","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","transcode","buffers","self","loaders"],"mappings":"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","file":"../../loaders/BasisTextureLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var BasisTextureLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n        this.transcoderPath = '';\n        this.transcoderBinary = null;\n        this.transcoderPending = null;\n        this.workerLimit = 4;\n        this.workerPool = [];\n        this.workerNextTaskID = 1;\n        this.workerSourceURL = '';\n        this.workerConfig = {\n            format: null,\n            astcSupported: false,\n            bptcSupported: false,\n            etcSupported: false,\n            dxtSupported: false,\n            pvrtcSupported: false\n        };\n    };\n    BasisTextureLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: BasisTextureLoader,\n        setTranscoderPath: function (path) {\n            this.transcoderPath = path;\n            return this;\n        },\n        setWorkerLimit: function (workerLimit) {\n            this.workerLimit = workerLimit;\n            return this;\n        },\n        detectSupport: function (renderer) {\n            var config = this.workerConfig;\n            config.astcSupported = !!renderer.extensions.get('WEBGL_compressed_texture_astc');\n            config.bptcSupported = !!renderer.extensions.get('EXT_texture_compression_bptc');\n            config.etcSupported = !!renderer.extensions.get('WEBGL_compressed_texture_etc1');\n            config.dxtSupported = !!renderer.extensions.get('WEBGL_compressed_texture_s3tc');\n            config.pvrtcSupported = !!renderer.extensions.get('WEBGL_compressed_texture_pvrtc') || !!renderer.extensions.get('WEBKIT_WEBGL_compressed_texture_pvrtc');\n            if (config.astcSupported) {\n                config.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n            } else if (config.bptcSupported) {\n                config.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n            } else if (config.dxtSupported) {\n                config.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n            } else if (config.pvrtcSupported) {\n                config.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n            } else if (config.etcSupported) {\n                config.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n            } else {\n                throw new Error('THREE.BasisTextureLoader: No suitable compressed texture format found.');\n            }\n            return this;\n        },\n        load: function (url, onLoad, onProgress, onError) {\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, buffer => {\n                this._createTexture(buffer).then(onLoad).catch(onError);\n            }, onProgress, onError);\n        },\n        _createTexture: function (buffer) {\n            var worker;\n            var taskID;\n            var taskCost = buffer.byteLength;\n            var texturePending = this._allocateWorker(taskCost).then(_worker => {\n                worker = _worker;\n                taskID = this.workerNextTaskID++;\n                return new Promise((resolve, reject) => {\n                    worker._callbacks[taskID] = {\n                        resolve,\n                        reject\n                    };\n                    worker.postMessage({\n                        type: 'transcode',\n                        id: taskID,\n                        buffer\n                    }, [buffer]);\n                });\n            }).then(message => {\n                var config = this.workerConfig;\n                var {width, height, mipmaps, format} = message;\n                var texture;\n                switch (format) {\n                case BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n                    texture = new THREE.CompressedTexture(mipmaps, width, height, THREE.RGBA_ASTC_4x4_Format);\n                    break;\n                case BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n                    texture = new THREE.CompressedTexture(mipmaps, width, height, THREE.RGBA_BPTC_Format);\n                    break;\n                case BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n                case BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n                    texture = new THREE.CompressedTexture(mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[config.format], THREE.UnsignedByteType);\n                    break;\n                case BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n                    texture = new THREE.CompressedTexture(mipmaps, width, height, THREE.RGB_ETC1_Format);\n                    break;\n                case BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n                    texture = new THREE.CompressedTexture(mipmaps, width, height, THREE.RGB_PVRTC_4BPPV1_Format);\n                    break;\n                case BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n                    texture = new THREE.CompressedTexture(mipmaps, width, height, THREE.RGBA_PVRTC_4BPPV1_Format);\n                    break;\n                default:\n                    throw new Error('THREE.BasisTextureLoader: No supported format available.');\n                }\n                texture.minFilter = mipmaps.length === 1 ? THREE.LinearFilter : THREE.LinearMipmapLinearFilter;\n                texture.magFilter = THREE.LinearFilter;\n                texture.generateMipmaps = false;\n                texture.needsUpdate = true;\n                return texture;\n            });\n            texturePending.finally(() => {\n                if (worker && taskID) {\n                    worker._taskLoad -= taskCost;\n                    delete worker._callbacks[taskID];\n                }\n            });\n            return texturePending;\n        },\n        _initTranscoder: function () {\n            if (!this.transcoderPending) {\n                var jsLoader = new THREE.FileLoader(this.manager);\n                jsLoader.setPath(this.transcoderPath);\n                var jsContent = new Promise((resolve, reject) => {\n                    jsLoader.load('basis_transcoder', resolve, undefined, reject);\n                });\n                var binaryLoader = new THREE.FileLoader(this.manager);\n                binaryLoader.setPath(this.transcoderPath);\n                binaryLoader.setResponseType('arraybuffer');\n                var binaryContent = new Promise((resolve, reject) => {\n                    binaryLoader.load('basis_transcoder.wasm', resolve, undefined, reject);\n                });\n                this.transcoderPending = Promise.all([\n                    jsContent,\n                    binaryContent\n                ]).then(([jsContent, binaryContent]) => {\n                    var fn = BasisTextureLoader.BasisWorker.toString();\n                    var body = [\n                        '/* basis_transcoder.js */',\n                        jsContent,\n                        '/* worker */',\n                        fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n                    ].join('\\n');\n                    this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n                    this.transcoderBinary = binaryContent;\n                });\n            }\n            return this.transcoderPending;\n        },\n        _allocateWorker: function (taskCost) {\n            return this._initTranscoder().then(() => {\n                if (this.workerPool.length < this.workerLimit) {\n                    var worker = new Worker(this.workerSourceURL);\n                    worker._callbacks = {};\n                    worker._taskLoad = 0;\n                    worker.postMessage({\n                        type: 'init',\n                        config: this.workerConfig,\n                        transcoderBinary: this.transcoderBinary\n                    });\n                    worker.onmessage = function (e) {\n                        var message = e.data;\n                        switch (message.type) {\n                        case 'transcode':\n                            worker._callbacks[message.id].resolve(message);\n                            break;\n                        case 'error':\n                            worker._callbacks[message.id].reject(message);\n                            break;\n                        default:\n                            console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n                        }\n                    };\n                    this.workerPool.push(worker);\n                } else {\n                    this.workerPool.sort(function (a, b) {\n                        return a._taskLoad > b._taskLoad ? -1 : 1;\n                    });\n                }\n                var worker = this.workerPool[this.workerPool.length - 1];\n                worker._taskLoad += taskCost;\n                return worker;\n            });\n        },\n        dispose: function () {\n            for (var i = 0; i < this.workerPool.length; i++) {\n                this.workerPool[i].terminate();\n            }\n            this.workerPool.length = 0;\n            return this;\n        }\n    });\n    BasisTextureLoader.BASIS_FORMAT = {\n        cTFETC1: 0,\n        cTFETC2: 1,\n        cTFBC1: 2,\n        cTFBC3: 3,\n        cTFBC4: 4,\n        cTFBC5: 5,\n        cTFBC7_M6_OPAQUE_ONLY: 6,\n        cTFBC7_M5: 7,\n        cTFPVRTC1_4_RGB: 8,\n        cTFPVRTC1_4_RGBA: 9,\n        cTFASTC_4x4: 10,\n        cTFATC_RGB: 11,\n        cTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n        cTFRGBA32: 13,\n        cTFRGB565: 14,\n        cTFBGR565: 15,\n        cTFRGBA4444: 16\n    };\n    BasisTextureLoader.DXT_FORMAT = {\n        COMPRESSED_RGB_S3TC_DXT1_EXT: 33776,\n        COMPRESSED_RGBA_S3TC_DXT1_EXT: 33777,\n        COMPRESSED_RGBA_S3TC_DXT3_EXT: 33778,\n        COMPRESSED_RGBA_S3TC_DXT5_EXT: 33779\n    };\n    BasisTextureLoader.DXT_FORMAT_MAP = {};\n    BasisTextureLoader.DXT_FORMAT_MAP[BasisTextureLoader.BASIS_FORMAT.cTFBC1] = BasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\n    BasisTextureLoader.DXT_FORMAT_MAP[BasisTextureLoader.BASIS_FORMAT.cTFBC3] = BasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n    BasisTextureLoader.BasisWorker = function () {\n        var config;\n        var transcoderPending;\n        var _BasisFile;\n        onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n            case 'init':\n                config = message.config;\n                init(message.transcoderBinary);\n                break;\n            case 'transcode':\n                transcoderPending.then(() => {\n                    try {\n                        var {width, height, hasAlpha, mipmaps, format} = transcode(message.buffer);\n                        var buffers = [];\n                        for (var i = 0; i < mipmaps.length; ++i) {\n                            buffers.push(mipmaps[i].data.buffer);\n                        }\n                        self.postMessage({\n                            type: 'transcode',\n                            id: message.id,\n                            width,\n                            height,\n                            hasAlpha,\n                            mipmaps,\n                            format\n                        }, buffers);\n                    } catch (error) {\n                        console.error(error);\n                        self.postMessage({\n                            type: 'error',\n                            id: message.id,\n                            error: error.message\n                        });\n                    }\n                });\n                break;\n            }\n        };\n        function init(wasmBinary) {\n            var BasisModule;\n            transcoderPending = new Promise(resolve => {\n                BasisModule = {\n                    wasmBinary,\n                    onRuntimeInitialized: resolve\n                };\n                BASIS(BasisModule);\n            }).then(() => {\n                var {BasisFile, initializeBasis} = BasisModule;\n                _BasisFile = BasisFile;\n                initializeBasis();\n            });\n        }\n        function transcode(buffer) {\n            var basisFile = new _BasisFile(new Uint8Array(buffer));\n            var width = basisFile.getImageWidth(0, 0);\n            var height = basisFile.getImageHeight(0, 0);\n            var levels = basisFile.getNumLevels(0);\n            var hasAlpha = basisFile.getHasAlpha();\n            function cleanup() {\n                basisFile.close();\n                basisFile.delete();\n            }\n            if (!hasAlpha) {\n                switch (config.format) {\n                case 9:\n                    config.format = 8;\n                    break;\n                default:\n                    break;\n                }\n            }\n            if (!width || !height || !levels) {\n                cleanup();\n                throw new Error('THREE.BasisTextureLoader:  Invalid .basis file');\n            }\n            if (!basisFile.startTranscoding()) {\n                cleanup();\n                throw new Error('THREE.BasisTextureLoader: .startTranscoding failed');\n            }\n            var mipmaps = [];\n            for (var mip = 0; mip < levels; mip++) {\n                var mipWidth = basisFile.getImageWidth(0, mip);\n                var mipHeight = basisFile.getImageHeight(0, mip);\n                var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, config.format));\n                var status = basisFile.transcodeImage(dst, 0, mip, config.format, 0, hasAlpha);\n                if (!status) {\n                    cleanup();\n                    throw new Error('THREE.BasisTextureLoader: .transcodeImage failed.');\n                }\n                mipmaps.push({\n                    data: dst,\n                    width: mipWidth,\n                    height: mipHeight\n                });\n            }\n            cleanup();\n            return {\n                width,\n                height,\n                hasAlpha,\n                mipmaps,\n                format: config.format\n            };\n        }\n    };\n\n    return threex.loaders.BasisTextureLoader = BasisTextureLoader;\n});"]}