{"version":3,"sources":["loaders/NRRDLoader.js"],"names":["define","THREE","threex","Gunzip","Volume","NRRDLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","data","parse","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","_bytes","type","chunks","undefined","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","slice","array","chunkSize","u8","byteOffset","byteLength","i","j","k","tmp","flipEndianness","scan","_length","length","_header","_data_start","parseChars","header","field","fn","l","lines","m","_i","_len","split","match","isNrrd","trim","fieldFunctions","Error","encoding","vectors","Vector3","spacings","isNaN","multiplyScalar","parseHeader","subarray","inflate","decompress","start","end","value","number","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","parseDataAsText","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","Matrix4","_spaceX","_spaceY","space","v","set","inverseMatrix","getInverse","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space origin","space_origin","space directions","f","parts","_j","_len2","_results2","loaders"],"mappings":"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","file":"../../loaders/NRRDLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    'skylark-zlib/Gunzip',\n    '../misc/Volume'\n], function (\n    THREE, \n    threex,\n    Gunzip, \n    Volume\n) {\n    'use strict';\n    var NRRDLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    NRRDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: NRRDLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(scope.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                onLoad(scope.parse(data));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var _data = data;\n            var _dataPointer = 0;\n            var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n            var _littleEndian = true;\n            var headerObject = {};\n            function scan(type, chunks) {\n                if (chunks === undefined || chunks === null) {\n                    chunks = 1;\n                }\n                var _chunkSize = 1;\n                var _array_type = Uint8Array;\n                switch (type) {\n                case 'uchar':\n                    break;\n                case 'schar':\n                    _array_type = Int8Array;\n                    break;\n                case 'ushort':\n                    _array_type = Uint16Array;\n                    _chunkSize = 2;\n                    break;\n                case 'sshort':\n                    _array_type = Int16Array;\n                    _chunkSize = 2;\n                    break;\n                case 'uint':\n                    _array_type = Uint32Array;\n                    _chunkSize = 4;\n                    break;\n                case 'sint':\n                    _array_type = Int32Array;\n                    _chunkSize = 4;\n                    break;\n                case 'float':\n                    _array_type = Float32Array;\n                    _chunkSize = 4;\n                    break;\n                case 'complex':\n                    _array_type = Float64Array;\n                    _chunkSize = 8;\n                    break;\n                case 'double':\n                    _array_type = Float64Array;\n                    _chunkSize = 8;\n                    break;\n                }\n                var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize));\n                if (_nativeLittleEndian != _littleEndian) {\n                    _bytes = flipEndianness(_bytes, _chunkSize);\n                }\n                if (chunks == 1) {\n                    return _bytes[0];\n                }\n                return _bytes;\n            }\n            function flipEndianness(array, chunkSize) {\n                var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n                for (var i = 0; i < array.byteLength; i += chunkSize) {\n                    for (var j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n                        var tmp = u8[k];\n                        u8[k] = u8[j];\n                        u8[j] = tmp;\n                    }\n                }\n                return array;\n            }\n            function parseHeader(header) {\n                var data, field, fn, i, l, lines, m, _i, _len;\n                lines = header.split(/\\r?\\n/);\n                for (_i = 0, _len = lines.length; _i < _len; _i++) {\n                    l = lines[_i];\n                    if (l.match(/NRRD\\d+/)) {\n                        headerObject.isNrrd = true;\n                    } else if (l.match(/^#/)) {\n                    } else if (m = l.match(/(.*):(.*)/)) {\n                        field = m[1].trim();\n                        data = m[2].trim();\n                        fn = NRRDLoader.prototype.fieldFunctions[field];\n                        if (fn) {\n                            fn.call(headerObject, data);\n                        } else {\n                            headerObject[field] = data;\n                        }\n                    }\n                }\n                if (!headerObject.isNrrd) {\n                    throw new Error('Not an NRRD file');\n                }\n                if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n                    throw new Error('Bzip is not supported');\n                }\n                if (!headerObject.vectors) {\n                    headerObject.vectors = [\n                        new THREE.Vector3(1, 0, 0),\n                        new THREE.Vector3(0, 1, 0),\n                        new THREE.Vector3(0, 0, 1)\n                    ];\n                    if (headerObject.spacings) {\n                        for (i = 0; i <= 2; i++) {\n                            if (!isNaN(headerObject.spacings[i])) {\n                                headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n                            }\n                        }\n                    }\n                }\n            }\n            function parseDataAsText(data, start, end) {\n                var number = '';\n                start = start || 0;\n                end = end || data.length;\n                var value;\n                var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n                    return previous * current;\n                }, 1);\n                var base = 10;\n                if (headerObject.encoding === 'hex') {\n                    base = 16;\n                }\n                var result = new headerObject.__array(lengthOfTheResult);\n                var resultIndex = 0;\n                var parsingFunction = parseInt;\n                if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n                    parsingFunction = parseFloat;\n                }\n                for (var i = start; i < end; i++) {\n                    value = data[i];\n                    if ((value < 9 || value > 13) && value !== 32) {\n                        number += String.fromCharCode(value);\n                    } else {\n                        if (number !== '') {\n                            result[resultIndex] = parsingFunction(number, base);\n                            resultIndex++;\n                        }\n                        number = '';\n                    }\n                }\n                if (number !== '') {\n                    result[resultIndex] = parsingFunction(number, base);\n                    resultIndex++;\n                }\n                return result;\n            }\n            var _bytes = scan('uchar', data.byteLength);\n            var _length = _bytes.length;\n            var _header = null;\n            var _data_start = 0;\n            var i;\n            for (i = 1; i < _length; i++) {\n                if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n                    _header = this.parseChars(_bytes, 0, i - 2);\n                    _data_start = i + 1;\n                    break;\n                }\n            }\n            parseHeader(_header);\n            var _data = _bytes.subarray(_data_start);\n            if (headerObject.encoding === 'gzip' || headerObject.encoding === 'gz') {\n                var inflate = new Gunzip(new Uint8Array(_data));\n                _data = inflate.decompress();\n            } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n                _data = parseDataAsText(_data);\n            } else if (headerObject.encoding === 'raw') {\n                var _copy = new Uint8Array(_data.length);\n                for (var i = 0; i < _data.length; i++) {\n                    _copy[i] = _data[i];\n                }\n                _data = _copy;\n            }\n            _data = _data.buffer;\n            var volume = new Volume();\n            volume.header = headerObject;\n            volume.data = new headerObject.__array(_data);\n            var min_max = volume.computeMinMax();\n            var min = min_max[0];\n            var max = min_max[1];\n            volume.windowLow = min;\n            volume.windowHigh = max;\n            volume.dimensions = [\n                headerObject.sizes[0],\n                headerObject.sizes[1],\n                headerObject.sizes[2]\n            ];\n            volume.xLength = volume.dimensions[0];\n            volume.yLength = volume.dimensions[1];\n            volume.zLength = volume.dimensions[2];\n            var spacingX = new THREE.Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n            var spacingY = new THREE.Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n            var spacingZ = new THREE.Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n            volume.spacing = [\n                spacingX,\n                spacingY,\n                spacingZ\n            ];\n            volume.matrix = new THREE.Matrix4();\n            var _spaceX = 1;\n            var _spaceY = 1;\n            var _spaceZ = 1;\n            if (headerObject.space == 'left-posterior-superior') {\n                _spaceX = -1;\n                _spaceY = -1;\n            } else if (headerObject.space === 'left-anterior-superior') {\n                _spaceX = -1;\n            }\n            if (!headerObject.vectors) {\n                volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n            } else {\n                var v = headerObject.vectors;\n                volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n            }\n            volume.inverseMatrix = new THREE.Matrix4();\n            volume.inverseMatrix.getInverse(volume.matrix);\n            volume.RASDimensions = new THREE.Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs);\n            if (volume.lowerThreshold === -Infinity) {\n                volume.lowerThreshold = min;\n            }\n            if (volume.upperThreshold === Infinity) {\n                volume.upperThreshold = max;\n            }\n            return volume;\n        },\n        parseChars: function (array, start, end) {\n            if (start === undefined) {\n                start = 0;\n            }\n            if (end === undefined) {\n                end = array.length;\n            }\n            var output = '';\n            var i = 0;\n            for (i = start; i < end; ++i) {\n                output += String.fromCharCode(array[i]);\n            }\n            return output;\n        },\n        fieldFunctions: {\n            type: function (data) {\n                switch (data) {\n                case 'uchar':\n                case 'unsigned char':\n                case 'uint8':\n                case 'uint8_t':\n                    this.__array = Uint8Array;\n                    break;\n                case 'signed char':\n                case 'int8':\n                case 'int8_t':\n                    this.__array = Int8Array;\n                    break;\n                case 'short':\n                case 'short int':\n                case 'signed short':\n                case 'signed short int':\n                case 'int16':\n                case 'int16_t':\n                    this.__array = Int16Array;\n                    break;\n                case 'ushort':\n                case 'unsigned short':\n                case 'unsigned short int':\n                case 'uint16':\n                case 'uint16_t':\n                    this.__array = Uint16Array;\n                    break;\n                case 'int':\n                case 'signed int':\n                case 'int32':\n                case 'int32_t':\n                    this.__array = Int32Array;\n                    break;\n                case 'uint':\n                case 'unsigned int':\n                case 'uint32':\n                case 'uint32_t':\n                    this.__array = Uint32Array;\n                    break;\n                case 'float':\n                    this.__array = Float32Array;\n                    break;\n                case 'double':\n                    this.__array = Float64Array;\n                    break;\n                default:\n                    throw new Error('Unsupported NRRD data type: ' + data);\n                }\n                return this.type = data;\n            },\n            endian: function (data) {\n                return this.endian = data;\n            },\n            encoding: function (data) {\n                return this.encoding = data;\n            },\n            dimension: function (data) {\n                return this.dim = parseInt(data, 10);\n            },\n            sizes: function (data) {\n                var i;\n                return this.sizes = function () {\n                    var _i, _len, _ref, _results;\n                    _ref = data.split(/\\s+/);\n                    _results = [];\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                        i = _ref[_i];\n                        _results.push(parseInt(i, 10));\n                    }\n                    return _results;\n                }();\n            },\n            space: function (data) {\n                return this.space = data;\n            },\n            'space origin': function (data) {\n                return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n            },\n            'space directions': function (data) {\n                var f, parts, v;\n                parts = data.match(/\\(.*?\\)/g);\n                return this.vectors = function () {\n                    var _i, _len, _results;\n                    _results = [];\n                    for (_i = 0, _len = parts.length; _i < _len; _i++) {\n                        v = parts[_i];\n                        _results.push(function () {\n                            var _j, _len2, _ref, _results2;\n                            _ref = v.slice(1, -1).split(/,/);\n                            _results2 = [];\n                            for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n                                f = _ref[_j];\n                                _results2.push(parseFloat(f));\n                            }\n                            return _results2;\n                        }());\n                    }\n                    return _results;\n                }();\n            },\n            spacings: function (data) {\n                var f, parts;\n                parts = data.split(/\\s+/);\n                return this.spacings = function () {\n                    var _i, _len, _results = [];\n                    for (_i = 0, _len = parts.length; _i < _len; _i++) {\n                        f = parts[_i];\n                        _results.push(parseFloat(f));\n                    }\n                    return _results;\n                }();\n            }\n        }\n    });\n    return threex.loaders.NRRDLoader = NRRDLoader;\n});"]}