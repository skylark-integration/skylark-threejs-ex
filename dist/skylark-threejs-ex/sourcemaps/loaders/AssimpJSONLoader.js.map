{"version":3,"sources":["loaders/AssimpJSONLoader.js"],"names":["define","THREE","threex","AssimpJSONLoader","manager","this","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","json","JSON","parse","metadata","__metadata__","format","version","value","setResourcePath","resourcePath","setCrossOrigin","parseList","handler","meshes","Array","length","i","call","textureLoader","TextureLoader","l","face","geometry","BufferGeometry","indices","vertices","normals","uvs","texturecoords","colors","faces","push","setIndex","addAttribute","Float32BufferAttribute","computeBoundingSphere","materials","material","MeshPhongMaterial","properties","property","key","semantic","keyname","texture","wrapS","wrapT","RepeatWrapping","name","color","fromArray","specular","emissive","shininess","flatShading","opacity","transparent","parseObject","node","idx","obj","Object3D","matrix","Matrix4","transformation","transpose","decompose","position","quaternion","scale","add","Mesh","materialindex","children","rootnode","loaders"],"mappings":"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","file":"../../loaders/AssimpJSONLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n\n\t/**\n\t * @author Alexander Gessler / http://www.greentoken.de/\n\t * https://github.com/acgessler\n\t *\n\t * Loader for models imported with Open Asset Import Library (http://assimp.sf.net)\n\t * through assimp2json (https://github.com/acgessler/assimp2json).\n\t *\n\t * Supports any input format that assimp supports, including 3ds, obj, dae, blend,\n\t * fbx, x, ms3d, lwo (and many more).\n\t *\n\t * See webgl_loader_assimp2json example.\n\t */\n\n\tfunction AssimpJSONLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tAssimpJSONLoader.prototype = {\n\n\t\tconstructor: AssimpJSONLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( scope.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.__metadata__;\n\n\t\t\t\t// check if __metadata__ meta header is present\n\t\t\t\t// this header is used to disambiguate between different JSON-based file formats\n\n\t\t\t\tif ( typeof metadata !== 'undefined' ) {\n\n\t\t\t\t\t// check if assimp2json at all\n\n\t\t\t\t\tif ( metadata.format !== 'assimp2json' ) {\n\n\t\t\t\t\t\tonError( 'AssimpJSONLoader: Not an assimp2json scene.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t// check major format version\n\n\t\t\t\t\t} else if ( metadata.version < 100 && metadata.version >= 200 ) {\n\n\t\t\t\t\t\tonError( 'AssimpJSONLoader: Unsupported assimp2json file format version.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tonLoad( scope.parse( json, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( value ) {\n\n\t\t\tthis.resourcePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( json, path ) {\n\n\t\t\tfunction parseList( json, handler ) {\n\n\t\t\t\tvar meshes = new Array( json.length );\n\n\t\t\t\tfor ( var i = 0; i < json.length; ++ i ) {\n\n\t\t\t\t\tmeshes[ i ] = handler.call( this, json[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn meshes;\n\n\t\t\t}\n\n\t\t\tfunction parseMesh( json ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar i, l, face;\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar vertices = json.vertices || [];\n\t\t\t\tvar normals = json.normals || [];\n\t\t\t\tvar uvs = json.texturecoords || [];\n\t\t\t\tvar colors = json.colors || [];\n\n\t\t\t\tuvs = uvs[ 0 ] || []; // only support for a single set of uvs\n\n\t\t\t\tfor ( i = 0, l = json.faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tface = json.faces[ i ];\n\t\t\t\t\tindices.push( face[ 0 ], face[ 1 ], face[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tgeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n\n\t\t\t\tif ( normals.length > 0 ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs.length > 0 ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors.length > 0 ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction parseMaterial( json ) {\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial();\n\n\t\t\t\tfor ( var i in json.properties ) {\n\n\t\t\t\t\tvar property = json.properties[ i ];\n\t\t\t\t\tvar key = property.key;\n\t\t\t\t\tvar value = property.value;\n\n\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\tcase '$tex.file': {\n\n\t\t\t\t\t\t\tvar semantic = property.semantic;\n\n\t\t\t\t\t\t\t// prop.semantic gives the type of the texture\n\t\t\t\t\t\t\t// 1: diffuse\n\t\t\t\t\t\t\t// 2: specular map\n\t\t\t\t\t\t\t// 4: emissive map\n\t\t\t\t\t\t\t// 5: height map (bumps)\n\t\t\t\t\t\t\t// 6: normal map\n\t\t\t\t\t\t\t// more values (i.e. environment, etc) are known by assimp and may be relevant\n\n\t\t\t\t\t\t\tif ( semantic === 1 || semantic === 2 || semantic === 4 || semantic === 5 || semantic === 6 ) {\n\n\t\t\t\t\t\t\t\tvar keyname;\n\n\t\t\t\t\t\t\t\tswitch ( semantic ) {\n\n\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'map';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'specularMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'emissiveMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'bumpMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\t\t\t\tkeyname = 'normalMap';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar texture = textureLoader.load( value );\n\n\t\t\t\t\t\t\t\t// TODO: read texture settings from assimp.\n\t\t\t\t\t\t\t\t// Wrapping is the default, though.\n\n\t\t\t\t\t\t\t\ttexture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t\t\t\t\tmaterial[ keyname ] = texture;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcase '?mat.name':\n\t\t\t\t\t\t\tmaterial.name = value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$clr.diffuse':\n\t\t\t\t\t\t\tmaterial.color.fromArray( value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$clr.specular':\n\t\t\t\t\t\t\tmaterial.specular.fromArray( value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$clr.emissive':\n\t\t\t\t\t\t\tmaterial.emissive.fromArray( value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$mat.shininess':\n\t\t\t\t\t\t\tmaterial.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$mat.shadingm':\n\t\t\t\t\t\t\t// aiShadingMode_Flat\n\t\t\t\t\t\t\tmaterial.flatShading = ( value === 1 ) ? true : false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase '$mat.opacity':\n\t\t\t\t\t\t\tif ( value < 1 ) {\n\n\t\t\t\t\t\t\t\tmaterial.opacity = value;\n\t\t\t\t\t\t\t\tmaterial.transparent = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t\tfunction parseObject( json, node, meshes, materials ) {\n\n\t\t\t\tvar obj = new THREE.Object3D(),\ti, idx;\n\n\t\t\t\tobj.name = node.name || '';\n\t\t\t\tobj.matrix = new THREE.Matrix4().fromArray( node.transformation ).transpose();\n\t\t\t\tobj.matrix.decompose( obj.position, obj.quaternion, obj.scale );\n\n\t\t\t\tfor ( i = 0; node.meshes && i < node.meshes.length; i ++ ) {\n\n\t\t\t\t\tidx = node.meshes[ i ];\n\t\t\t\t\tobj.add( new THREE.Mesh( meshes[ idx ], materials[ json.meshes[ idx ].materialindex ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; node.children && i < node.children.length; i ++ ) {\n\n\t\t\t\t\tobj.add( parseObject( json, node.children[ i ], meshes, materials ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn obj;\n\n\t\t\t}\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager );\n\t\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\tvar meshes = parseList( json.meshes, parseMesh );\n\t\t\tvar materials = parseList( json.materials, parseMaterial );\n\t\t\treturn parseObject( json, json.rootnode, meshes, materials );\n\n\t\t}\n\n\t};\n\t\n\treturn threex.loaders.AssimpJSONLoader = AssimpJSONLoader;\n});"]}