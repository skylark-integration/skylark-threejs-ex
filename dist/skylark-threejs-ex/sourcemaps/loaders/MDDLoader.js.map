{"version":3,"sources":["loaders/MDDLoader.js"],"names":["define","THREE","MDDLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","data","parse","view","DataView","totalFrames","getUint32","totalPoints","offset","times","Float32Array","values","fill","i","getFloat32","track","NumberKeyframeTrack","clip","AnimationClip","length","morphTargets","morphTarget","j","stride","attribute","BufferAttribute","name","push"],"mappings":";;;;;;;AAAAA,QACI,mBACD,SAAUC,GACT,aACA,IAAIC,EAAY,SAAUC,GACtBF,EAAMG,OAAOC,KAAKC,KAAMH,IAiD5B,OA/CAD,EAAUK,UAAYC,OAAOC,OAAOD,OAAOE,OAAOT,EAAMG,OAAOG,YAC3DI,YAAaT,EACbU,KAAM,SAAUC,EAAKC,EAAQC,EAAYC,GACrC,IAAIC,EAAQX,KACRY,EAAS,IAAIjB,EAAMkB,WAAWb,KAAKH,SACvCe,EAAOE,QAAQd,KAAKe,MACpBH,EAAOI,gBAAgB,eACvBJ,EAAON,KAAKC,EAAK,SAAUU,GACvBT,EAAOG,EAAMO,MAAMD,KACpBR,EAAYC,IAEnBQ,MAAO,SAAUD,GAOb,IANA,IAAIE,EAAO,IAAIC,SAASH,GACpBI,EAAcF,EAAKG,UAAU,GAC7BC,EAAcJ,EAAKG,UAAU,GAC7BE,EAAS,EACTC,EAAQ,IAAIC,aAAaL,GACzBM,EAAS,IAAID,aAAaL,EAAcA,GAAaO,KAAK,GACrDC,EAAI,EAAGA,EAAIR,EAAaQ,IAC7BJ,EAAMI,GAAKV,EAAKW,WAAWN,GAC3BA,GAAU,EACVG,EAAON,EAAcQ,EAAIA,GAAK,EAElC,IAAIE,EAAQ,IAAIpC,EAAMqC,oBAAoB,yBAA0BP,EAAOE,GACvEM,EAAO,IAAItC,EAAMuC,cAAc,UAAWT,EAAMA,EAAMU,OAAS,IAAKJ,IACpEK,KACJ,IAASP,EAAI,EAAGA,EAAIR,EAAaQ,IAAK,CAElC,IADA,IAAIQ,EAAc,IAAIX,aAA2B,EAAdH,GAC1Be,EAAI,EAAGA,EAAIf,EAAae,IAAK,CAClC,IAAIC,EAAa,EAAJD,EACbD,EAAYE,EAAS,GAAKpB,EAAKW,WAAWN,GAC1CA,GAAU,EACVa,EAAYE,EAAS,GAAKpB,EAAKW,WAAWN,GAC1CA,GAAU,EACVa,EAAYE,EAAS,GAAKpB,EAAKW,WAAWN,GAC1CA,GAAU,EAEd,IAAIgB,EAAY,IAAI7C,EAAM8C,gBAAgBJ,EAAa,GACvDG,EAAUE,KAAO,SAAWb,EAC5BO,EAAaO,KAAKH,GAEtB,OACIJ,aAAcA,EACdH,KAAMA,MAIXrC","file":"../../loaders/MDDLoader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var MDDLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    MDDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: MDDLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            loader.load(url, function (data) {\n                onLoad(scope.parse(data));\n            }, onProgress, onError);\n        },\n        parse: function (data) {\n            var view = new DataView(data);\n            var totalFrames = view.getUint32(0);\n            var totalPoints = view.getUint32(4);\n            var offset = 8;\n            var times = new Float32Array(totalFrames);\n            var values = new Float32Array(totalFrames * totalFrames).fill(0);\n            for (var i = 0; i < totalFrames; i++) {\n                times[i] = view.getFloat32(offset);\n                offset += 4;\n                values[totalFrames * i + i] = 1;\n            }\n            var track = new THREE.NumberKeyframeTrack('.morphTargetInfluences', times, values);\n            var clip = new THREE.AnimationClip('default', times[times.length - 1], [track]);\n            var morphTargets = [];\n            for (var i = 0; i < totalFrames; i++) {\n                var morphTarget = new Float32Array(totalPoints * 3);\n                for (var j = 0; j < totalPoints; j++) {\n                    var stride = j * 3;\n                    morphTarget[stride + 0] = view.getFloat32(offset);\n                    offset += 4;\n                    morphTarget[stride + 1] = view.getFloat32(offset);\n                    offset += 4;\n                    morphTarget[stride + 2] = view.getFloat32(offset);\n                    offset += 4;\n                }\n                var attribute = new THREE.BufferAttribute(morphTarget, 3);\n                attribute.name = 'morph_' + i;\n                morphTargets.push(attribute);\n            }\n            return {\n                morphTargets: morphTargets,\n                clip: clip\n            };\n        }\n    });\n    return MDDLoader;\n});"]}