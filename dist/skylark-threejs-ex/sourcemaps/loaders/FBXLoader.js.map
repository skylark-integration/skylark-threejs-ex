{"version":3,"sources":["loaders/FBXLoader.js"],"names":["define","THREE","NURBSCurve","Zlib","FBXLoader","fbxTree","connections","sceneGraph","manager","Loader","call","this","FBXTreeParser","textureLoader","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","buffer","littleEndian","dv","DataView","offset","undefined","FBXTree","getFbxVersion","text","match","parseInt","Error","convertFBXTimeToSeconds","time","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","self","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","parse","error","setTimeout","itemError","FBXBuffer","CORRECT","byteLength","length","convertArrayBufferToString","FBXText","cursor","read","result","slice","i","num","isFbxFormatASCII","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","parseScene","connectionMap","Map","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","base64Content","image","parseImage","filename","split","pop","type","content","fileName","extension","lastIndexOf","toLowerCase","getHandler","console","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrixWorld","matrix","transform","generateTransform","applyMatrix4","animations","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","matrixWorld","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","MathUtils","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","startKnot","endKnot","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","Form","vertices","getPoints","positions","toArray","BufferAttribute","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","times","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","modelName","rawModel","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","curve","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","connProps","from","to","rest","append","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","skip","version","getUint32","log","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","Inflate","decompress","low","high","nullByte","decodeText","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","copyPosition","getInverse","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"mappings":"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","file":"../../loaders/FBXLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../curves/NURBSCurve\"\n],function(THREE,NURBSCurve,Zlib){\n\t/**\n\t * @author Kyle-Larson https://github.com/Kyle-Larson\n\t * @author Takahiro https://github.com/takahirox\n\t * @author Lewy Blue https://github.com/looeee\n\t *\n\t * Loader loads FBX file and generates Group representing FBX scene.\n\t * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n\t * Versions lower than this may load but will probably have errors\n\t *\n\t * Needs Support:\n\t *  Morph normals / blend shape normals\n\t *\n\t * FBX format references:\n\t * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n\t * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n\t *\n\t * \tBinary format specification:\n\t *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n\t */\n\n\n\tTHREE.FBXLoader = ( function () {\n\n\t\tvar fbxTree;\n\t\tvar connections;\n\t\tvar sceneGraph;\n\n\t\tfunction FBXLoader( manager ) {\n\n\t\t\tTHREE.Loader.call( this, manager );\n\n\t\t}\n\n\t\tFBXLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\t\tconstructor: FBXLoader,\n\n\t\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tvar path = ( self.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : self.path;\n\n\t\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\t\tloader.setPath( self.path );\n\t\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tonLoad( self.parse( buffer, path ) );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\t\tself.manager.itemError( url );\n\n\t\t\t\t\t\t}, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t},\n\n\t\t\tparse: function ( FBXBuffer, path ) {\n\n\t\t\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t\t\t}\n\n\t\t\t\t// console.log( fbxTree );\n\n\t\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\t\tfunction FBXTreeParser( textureLoader, manager ) {\n\n\t\t\tthis.textureLoader = textureLoader;\n\t\t\tthis.manager = manager;\n\n\t\t}\n\n\t\tFBXTreeParser.prototype = {\n\n\t\t\tconstructor: FBXTreeParser,\n\n\t\t\tparse: function () {\n\n\t\t\t\tconnections = this.parseConnections();\n\n\t\t\t\tvar images = this.parseImages();\n\t\t\t\tvar textures = this.parseTextures( images );\n\t\t\t\tvar materials = this.parseMaterials( textures );\n\t\t\t\tvar deformers = this.parseDeformers();\n\t\t\t\tvar geometryMap = new GeometryParser().parse( deformers );\n\n\t\t\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\t\t\treturn sceneGraph;\n\n\t\t\t},\n\n\t\t\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t\t\t// and details the connection type\n\t\t\tparseConnections: function () {\n\n\t\t\t\tvar connectionMap = new Map();\n\n\t\t\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\t\t\tvar rawConnections = fbxTree.Connections.connections;\n\n\t\t\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\t\t\tvar fromID = rawConnection[ 0 ];\n\t\t\t\t\t\tvar toID = rawConnection[ 1 ];\n\t\t\t\t\t\tvar relationship = rawConnection[ 2 ];\n\n\t\t\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn connectionMap;\n\n\t\t\t},\n\n\t\t\t// Parse FBXTree.Objects.Video for embedded image data\n\t\t\t// These images are connected to textures in FBXTree.Objects.Textures\n\t\t\t// via FBXTree.Connections.\n\t\t\tparseImages: function () {\n\n\t\t\t\tvar images = {};\n\t\t\t\tvar blobs = {};\n\n\t\t\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar videoNodes = fbxTree.Objects.Video;\n\n\t\t\t\t\tfor ( var nodeID in videoNodes ) {\n\n\t\t\t\t\t\tvar videoNode = videoNodes[ nodeID ];\n\n\t\t\t\t\t\tvar id = parseInt( nodeID );\n\n\t\t\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\t\t\tvar arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\t\t\tvar base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\t\t\tvar image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var id in images ) {\n\n\t\t\t\t\tvar filename = images[ id ];\n\n\t\t\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t\t\t}\n\n\t\t\t\treturn images;\n\n\t\t\t},\n\n\t\t\t// Parse embedded image data in FBXTree.Video.Content\n\t\t\tparseImage: function ( videoNode ) {\n\n\t\t\t\tvar content = videoNode.Content;\n\t\t\t\tvar fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\t\t\tvar extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\t\t\tvar type;\n\n\t\t\t\tswitch ( extension ) {\n\n\t\t\t\t\tcase 'bmp':\n\n\t\t\t\t\t\ttype = 'image/bmp';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\n\t\t\t\t\t\ttype = 'image/jpeg';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'png':\n\n\t\t\t\t\t\ttype = 'image/png';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tif':\n\n\t\t\t\t\t\ttype = 'image/tiff';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tga':\n\n\t\t\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype = 'image/tga';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t\t\t} else { // Binary Format\n\n\t\t\t\t\tvar array = new Uint8Array( content );\n\t\t\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// Parse nodes in FBXTree.Objects.Texture\n\t\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t\t\t// to images in FBXTree.Objects.Video\n\t\t\tparseTextures: function ( images ) {\n\n\t\t\t\tvar textureMap = new Map();\n\n\t\t\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar textureNodes = fbxTree.Objects.Texture;\n\t\t\t\t\tfor ( var nodeID in textureNodes ) {\n\n\t\t\t\t\t\tvar texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn textureMap;\n\n\t\t\t},\n\n\t\t\t// Parse individual node in FBXTree.Objects.Texture\n\t\t\tparseTexture: function ( textureNode, images ) {\n\n\t\t\t\tvar texture = this.loadTexture( textureNode, images );\n\n\t\t\t\ttexture.ID = textureNode.id;\n\n\t\t\t\ttexture.name = textureNode.attrName;\n\n\t\t\t\tvar wrapModeU = textureNode.WrapModeU;\n\t\t\t\tvar wrapModeV = textureNode.WrapModeV;\n\n\t\t\t\tvar valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\t\t\tvar valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t\t\t// 0: repeat(default), 1: clamp\n\n\t\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\t\t\tvar values = textureNode.Scaling.value;\n\n\t\t\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\treturn texture;\n\n\t\t\t},\n\n\t\t\t// load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\t\t\tloadTexture: function ( textureNode, images ) {\n\n\t\t\t\tvar fileName;\n\n\t\t\t\tvar currentPath = this.textureLoader.path;\n\n\t\t\t\tvar children = connections.get( textureNode.id ).children;\n\n\t\t\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar texture;\n\n\t\t\t\tvar extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\t\t\tif ( extension === 'tga' ) {\n\n\t\t\t\t\tvar loader = this.manager.getHandler( '.tga' );\n\n\t\t\t\t\tif ( loader === null ) {\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( extension === 'psd' ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t\t\t}\n\n\t\t\t\tthis.textureLoader.setPath( currentPath );\n\n\t\t\t\treturn texture;\n\n\t\t\t},\n\n\t\t\t// Parse nodes in FBXTree.Objects.Material\n\t\t\tparseMaterials: function ( textureMap ) {\n\n\t\t\t\tvar materialMap = new Map();\n\n\t\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn materialMap;\n\n\t\t\t},\n\n\t\t\t// Parse single node in FBXTree.Objects.Material\n\t\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t\t\t// FBX format currently only supports Lambert and Phong shading models\n\t\t\tparseMaterial: function ( materialNode, textureMap ) {\n\n\t\t\t\tvar ID = materialNode.id;\n\t\t\t\tvar name = materialNode.attrName;\n\t\t\t\tvar type = materialNode.ShadingModel;\n\n\t\t\t\t// Case where FBX wraps shading model in property object.\n\t\t\t\tif ( typeof type === 'object' ) {\n\n\t\t\t\t\ttype = type.value;\n\n\t\t\t\t}\n\n\t\t\t\t// Ignore unused materials which don't have any connections.\n\t\t\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\t\t\tvar parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\t\t\tvar material;\n\n\t\t\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\t\t\tcase 'phong':\n\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'lambert':\n\t\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.setValues( parameters );\n\t\t\t\tmaterial.name = name;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t\t// Parse FBX material and return parameters suitable for a three.js material\n\t\t\t// Also parse the texture map and return any textures associated with the material\n\t\t\tparseParameters: function ( materialNode, textureMap, ID ) {\n\n\t\t\t\tvar parameters = {};\n\n\t\t\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t\t\t}\n\t\t\t\tif ( materialNode.Diffuse ) {\n\n\t\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.Diffuse.value );\n\n\t\t\t\t} else if ( materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color' ) {\n\n\t\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Emissive ) {\n\n\t\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.Emissive.value );\n\n\t\t\t\t} else if ( materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color' ) {\n\n\t\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Opacity ) {\n\n\t\t\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t\t\t}\n\n\t\t\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\t\t\tparameters.transparent = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Shininess ) {\n\n\t\t\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialNode.Specular ) {\n\n\t\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.Specular.value );\n\n\t\t\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t\t\t}\n\n\t\t\t\tvar self = this;\n\t\t\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\t\t\tvar type = child.relationship;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'Bump':\n\t\t\t\t\t\t\tparameters.bumpMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\t\t\tparameters.aoMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DiffuseColor':\n\t\t\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\t\t\tparameters.map = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.map.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\t\t\tparameters.displacementMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\t\t\tparameters.emissiveMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.emissiveMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'NormalMap':\n\t\t\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\t\t\tparameters.normalMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\t\t\tparameters.envMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\t\t\t\tparameters.envMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\t\t\tparameters.specularMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.specularMap.encoding = THREE.sRGBEncoding;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TransparentColor':\n\t\t\t\t\t\t\tparameters.alphaMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'AmbientColor':\n\t\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn parameters;\n\n\t\t\t},\n\n\t\t\t// get a texture from the textureMap for use by a material.\n\t\t\tgetTexture: function ( textureMap, id ) {\n\n\t\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\t\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t\t\t}\n\n\t\t\t\treturn textureMap.get( id );\n\n\t\t\t},\n\n\t\t\t// Parse nodes in FBXTree.Objects.Deformer\n\t\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t\t\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\t\t\tparseDeformers: function () {\n\n\t\t\t\tvar skeletons = {};\n\t\t\t\tvar morphTargets = {};\n\n\t\t\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\t\t\tfor ( var nodeID in DeformerNodes ) {\n\n\t\t\t\t\t\tvar deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\t\t\tvar skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\t\t\tvar morphTarget = {\n\t\t\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\n\t\t\t\t\tskeletons: skeletons,\n\t\t\t\t\tmorphTargets: morphTargets,\n\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse single nodes in FBXTree.Objects.Deformer\n\t\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t\t\t// Each skin node represents a skeleton and each cluster node represents a bone\n\t\t\tparseSkeleton: function ( relationships, deformerNodes ) {\n\n\t\t\t\tvar rawBones = [];\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tvar boneNode = deformerNodes[ child.ID ];\n\n\t\t\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\t\t\tvar rawBone = {\n\n\t\t\t\t\t\tID: child.ID,\n\t\t\t\t\t\tindices: [],\n\t\t\t\t\t\tweights: [],\n\t\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t\t\t// transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\trawBones.push( rawBone );\n\n\t\t\t\t} );\n\n\t\t\t\treturn {\n\n\t\t\t\t\trawBones: rawBones,\n\t\t\t\t\tbones: []\n\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\t\t\tparseMorphTargets: function ( relationships, deformerNodes ) {\n\n\t\t\t\tvar rawMorphTargets = [];\n\n\t\t\t\tfor ( var i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = relationships.children[ i ];\n\n\t\t\t\t\tvar morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\t\t\tvar rawMorphTarget = {\n\n\t\t\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\t\t\tid: morphTargetNode.id,\n\t\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t\t\t}\n\n\t\t\t\treturn rawMorphTargets;\n\n\t\t\t},\n\n\t\t\t// create the main THREE.Group() to be returned by the loader\n\t\t\tparseScene: function ( deformers, geometryMap, materialMap ) {\n\n\t\t\t\tsceneGraph = new THREE.Group();\n\n\t\t\t\tvar modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\t\tvar self = this;\n\t\t\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\t\t\tvar modelNode = modelNodes[ model.ID ];\n\t\t\t\t\tself.setLookAtProperties( model, modelNode );\n\n\t\t\t\t\tvar parentConnections = connections.get( model.ID ).parents;\n\n\t\t\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\t\t\tvar parent = modelMap.get( connection.ID );\n\t\t\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( model.parent === null ) {\n\n\t\t\t\t\t\tsceneGraph.add( model );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} );\n\n\t\t\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\t\t\tthis.createAmbientLight();\n\n\t\t\t\tthis.setupMorphMaterials();\n\n\t\t\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\t\t\tif ( node.parent ) node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n\n\t\t\t\t\t\tvar transform = generateTransform( node.userData.transformData );\n\n\t\t\t\t\t\tnode.applyMatrix4( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tvar animations = new AnimationParser().parse();\n\n\t\t\t\t// if all the models where already combined in a single group, just return that\n\t\t\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tsceneGraph.animations = animations;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.Model\n\t\t\tparseModels: function ( skeletons, geometryMap, materialMap ) {\n\n\t\t\t\tvar modelMap = new Map();\n\t\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\t\tfor ( var nodeID in modelNodes ) {\n\n\t\t\t\t\tvar id = parseInt( nodeID );\n\t\t\t\t\tvar node = modelNodes[ nodeID ];\n\t\t\t\t\tvar relationships = connections.get( id );\n\n\t\t\t\t\tvar model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\t\t\tmodel = new THREE.Bone();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'Null':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tmodel = new THREE.Group();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodel.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\n\t\t\t\t\t\tmodel.ID = id;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getTransformData( model, node );\n\t\t\t\t\tmodelMap.set( id, model );\n\n\t\t\t\t}\n\n\t\t\t\treturn modelMap;\n\n\t\t\t},\n\n\t\t\tbuildSkeleton: function ( relationships, skeletons, id, name ) {\n\n\t\t\t\tvar bone = null;\n\n\t\t\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\t\t\tvar subBone = bone;\n\t\t\t\t\t\t\t\tbone = new THREE.Bone();\n\n\t\t\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\t\t\tbone.name = name ? THREE.PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn bone;\n\n\t\t\t},\n\n\t\t\t// create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\t\t\tcreateCamera: function ( relationships ) {\n\n\t\t\t\tvar model;\n\t\t\t\tvar cameraAttribute;\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\t\tcameraAttribute = attr;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar type = 0;\n\t\t\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\t\t\ttype = 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar nearClippingPlane = 1;\n\t\t\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar farClippingPlane = 1000;\n\t\t\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tvar width = window.innerWidth;\n\t\t\t\t\tvar height = window.innerHeight;\n\n\t\t\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar aspect = width / height;\n\n\t\t\t\t\tvar fov = 45;\n\t\t\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 0: // Perspective\n\t\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\t\t\tmodel = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\t\t\tmodel = new THREE.Object3D();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\n\t\t\t},\n\n\t\t\t// Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\t\t\tcreateLight: function ( relationships ) {\n\n\t\t\t\tvar model;\n\t\t\t\tvar lightAttribute;\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\t\tlightAttribute = attr;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( lightAttribute === undefined ) {\n\n\t\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar type;\n\n\t\t\t\t\t// LightType can be undefined for Point lights\n\t\t\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\t\t\ttype = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar color = 0xffffff;\n\n\t\t\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\t\t\tcolor = new THREE.Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t\t\t// light disabled\n\t\t\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\t\t\tintensity = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar distance = 0;\n\t\t\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\t\t\tdistance = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\t\t\tvar decay = 1;\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 0: // Point\n\t\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity, distance, decay );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: // Directional\n\t\t\t\t\t\t\tmodel = new THREE.DirectionalLight( color, intensity );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2: // Spot\n\t\t\t\t\t\t\tvar angle = Math.PI / 3;\n\n\t\t\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\t\t\tangle = THREE.MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar penumbra = 0;\n\t\t\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\t\t\tpenumbra = THREE.MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );\n\t\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\t\t\tmodel.castShadow = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\n\t\t\t},\n\n\t\t\tcreateMesh: function ( relationships, geometryMap, materialMap ) {\n\n\t\t\t\tvar model;\n\t\t\t\tvar geometry = null;\n\t\t\t\tvar material = null;\n\t\t\t\tvar materials = [];\n\n\t\t\t\t// get geometry and materials(s) from connections\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( materials.length > 1 ) {\n\n\t\t\t\t\tmaterial = materials;\n\n\t\t\t\t} else if ( materials.length > 0 ) {\n\n\t\t\t\t\tmaterial = materials[ 0 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\t\t\tmaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tmodel = new THREE.SkinnedMesh( geometry, material );\n\t\t\t\t\tmodel.normalizeSkinWeights();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmodel = new THREE.Mesh( geometry, material );\n\n\t\t\t\t}\n\n\t\t\t\treturn model;\n\n\t\t\t},\n\n\t\t\tcreateCurve: function ( relationships, geometryMap ) {\n\n\t\t\t\tvar geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\t\t\treturn geo;\n\n\t\t\t\t}, null );\n\n\t\t\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\t\t\tvar material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\t\t\treturn new THREE.Line( geometry, material );\n\n\t\t\t},\n\n\t\t\t// parse the model node for transform data\n\t\t\tgetTransformData: function ( model, modelNode ) {\n\n\t\t\t\tvar transformData = {};\n\n\t\t\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\t\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\t\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\t\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\t\t\tmodel.userData.transformData = transformData;\n\n\t\t\t},\n\n\t\t\tsetLookAtProperties: function ( model, modelNode ) {\n\n\t\t\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\t\t\tvar children = connections.get( model.ID ).children;\n\n\t\t\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\t\t\tvar lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\t\t\tvar pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\t\t\tmodel.lookAt( new THREE.Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tbindSkeleton: function ( skeletons, geometryMap, modelMap ) {\n\n\t\t\t\tvar bindMatrices = this.parsePoseNodes();\n\n\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\tvar parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\t\t\tvar geoID = parent.ID;\n\t\t\t\t\t\t\tvar geoRelationships = connections.get( geoID );\n\n\t\t\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\t\t\tvar model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\t\t\tmodel.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparsePoseNodes: function () {\n\n\t\t\t\tvar bindMatrices = {};\n\n\t\t\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\t\t\tfor ( var nodeID in BindPoseNode ) {\n\n\t\t\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {\n\n\t\t\t\t\t\t\tvar poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn bindMatrices;\n\n\t\t\t},\n\n\t\t\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\t\t\tcreateAmbientLight: function () {\n\n\t\t\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\t\tvar ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\t\tvar r = ambientColor[ 0 ];\n\t\t\t\t\tvar g = ambientColor[ 1 ];\n\t\t\t\t\tvar b = ambientColor[ 2 ];\n\n\t\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\t\tvar color = new THREE.Color( r, g, b );\n\t\t\t\t\t\tsceneGraph.add( new THREE.AmbientLight( color, 1 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetupMorphMaterials: function () {\n\n\t\t\t\tvar self = this;\n\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\tif ( child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length ) {\n\n\t\t\t\t\t\t\tif ( Array.isArray( child.material ) ) {\n\n\t\t\t\t\t\t\t\tchild.material.forEach( function ( material, i ) {\n\n\t\t\t\t\t\t\t\t\tself.setupMorphMaterial( child, material, i );\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tself.setupMorphMaterial( child, child.material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t},\n\n\t\t\tsetupMorphMaterial: function ( child, material, index ) {\n\n\t\t\t\tvar uuid = child.uuid;\n\t\t\t\tvar matUuid = material.uuid;\n\n\t\t\t\t// if a geometry has morph targets, it cannot share the material with other geometries\n\t\t\t\tvar sharedMat = false;\n\n\t\t\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\t\t\tif ( node.isMesh ) {\n\n\t\t\t\t\t\tif ( Array.isArray( node.material ) ) {\n\n\t\t\t\t\t\t\tnode.material.forEach( function ( mat ) {\n\n\t\t\t\t\t\t\t\tif ( mat.uuid === matUuid && node.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else if ( node.material.uuid === matUuid && node.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tif ( sharedMat === true ) {\n\n\t\t\t\t\tvar clonedMat = material.clone();\n\t\t\t\t\tclonedMat.morphTargets = true;\n\n\t\t\t\t\tif ( index === undefined ) child.material = clonedMat;\n\t\t\t\t\telse child.material[ index ] = clonedMat;\n\n\t\t\t\t} else material.morphTargets = true;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// parse Geometry data from FBXTree and return map of BufferGeometries\n\t\tfunction GeometryParser() {}\n\n\t\tGeometryParser.prototype = {\n\n\t\t\tconstructor: GeometryParser,\n\n\t\t\t// Parse nodes in FBXTree.Objects.Geometry\n\t\t\tparse: function ( deformers ) {\n\n\t\t\t\tvar geometryMap = new Map();\n\n\t\t\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\t\t\tvar geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\t\t\tfor ( var nodeID in geoNodes ) {\n\n\t\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\t\t\tvar geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn geometryMap;\n\n\t\t\t},\n\n\t\t\t// Parse single node in FBXTree.Objects.Geometry\n\t\t\tparseGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\t\tswitch ( geoNode.attrType ) {\n\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\n\t\t\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\t\t\tparseMeshGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\t\tvar skeletons = deformers.skeletons;\n\t\t\t\tvar morphTargets = [];\n\n\t\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t\t} );\n\n\t\t\t\t// don't create geometry if it is not associated with any models\n\t\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\t\treturn skeleton;\n\n\t\t\t\t}, null );\n\n\t\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t// Assume one model and get the preRotation from that\n\t\t\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\t\tvar transformData = {};\n\n\t\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\t\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t\t\t},\n\n\t\t\t// Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\t\t\tgenGeometry: function ( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\t\t\tvar geo = new THREE.BufferGeometry();\n\t\t\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\t\t\tvar geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\t\t\tvar buffers = this.genBuffers( geoInfo );\n\n\t\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\t\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\t\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\t\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\t\t\tgeo.setAttribute( 'color', new THREE.Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tgeo.setAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\t\t\tgeo.setAttribute( 'skinWeight', new THREE.Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t\t\t// used later to bind the skeleton to the model\n\t\t\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t\t\t}\n\n\t\t\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );\n\n\t\t\t\t\tvar normalAttribute = new THREE.Float32BufferAttribute( buffers.normal, 3 );\n\t\t\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\t\t\tvar name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t\t\t// the first uv buffer is just called 'uv'\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tname = 'uv';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.setAttribute( name, new THREE.Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\t\t\tvar prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\t\t\tvar startIndex = 0;\n\n\t\t\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\t\t\tvar lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\t\t\tvar lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t\t\t// using one of them\n\t\t\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\t\t\treturn geo;\n\n\t\t\t},\n\n\t\t\tparseGeoNode: function ( geoNode, skeleton ) {\n\n\t\t\t\tvar geoInfo = {};\n\n\t\t\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\t\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\t\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\t\t\tgeoInfo.uv = [];\n\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\t\t\t\t\t\ti ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeoInfo.weightTable = {};\n\n\t\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\t\t\tid: i,\n\t\t\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn geoInfo;\n\n\t\t\t},\n\n\t\t\tgenBuffers: function ( geoInfo ) {\n\n\t\t\t\tvar buffers = {\n\t\t\t\t\tvertex: [],\n\t\t\t\t\tnormal: [],\n\t\t\t\t\tcolors: [],\n\t\t\t\t\tuvs: [],\n\t\t\t\t\tmaterialIndex: [],\n\t\t\t\t\tvertexWeights: [],\n\t\t\t\t\tweightsIndices: [],\n\t\t\t\t};\n\n\t\t\t\tvar polygonIndex = 0;\n\t\t\t\tvar faceLength = 0;\n\t\t\t\tvar displayedWeightsWarning = false;\n\n\t\t\t\t// these will hold data for a single face\n\t\t\t\tvar facePositionIndexes = [];\n\t\t\t\tvar faceNormals = [];\n\t\t\t\tvar faceColors = [];\n\t\t\t\tvar faceUVs = [];\n\t\t\t\tvar faceWeights = [];\n\t\t\t\tvar faceWeightIndices = [];\n\n\t\t\t\tvar self = this;\n\t\t\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\t\t\tvar endOfFace = false;\n\n\t\t\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t\t\t// A cube with quad faces looks like this:\n\t\t\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t\t\t//  }\n\t\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\t\t\tendOfFace = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar weightIndices = [];\n\t\t\t\t\tvar weights = [];\n\n\t\t\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t\t\t} );\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\t\t\tvar Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\t\t\tvar currentWeight = weight;\n\t\t\t\t\t\t\t\tvar currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\t\t\tvar tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\t\t\tweights = Weight;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\t\tvar materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceLength ++;\n\n\t\t\t\t\tif ( endOfFace ) {\n\n\t\t\t\t\t\tself.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\t\t\tpolygonIndex ++;\n\t\t\t\t\t\tfaceLength = 0;\n\n\t\t\t\t\t\t// reset arrays for the next face\n\t\t\t\t\t\tfacePositionIndexes = [];\n\t\t\t\t\t\tfaceNormals = [];\n\t\t\t\t\t\tfaceColors = [];\n\t\t\t\t\t\tfaceUVs = [];\n\t\t\t\t\t\tfaceWeights = [];\n\t\t\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn buffers;\n\n\t\t\t},\n\n\t\t\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\t\t\tgenFace: function ( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\t\t\tfor ( var i = 2; i < faceLength; i ++ ) {\n\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddMorphTargets: function ( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\t\t\tif ( morphTargets.length === 0 ) return;\n\n\t\t\t\tparentGeo.morphTargetsRelative = true;\n\n\t\t\t\tparentGeo.morphAttributes.position = [];\n\t\t\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\t\t\tvar self = this;\n\t\t\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\t\t\tvar morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\t\t\tself.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t},\n\n\t\t\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t\t\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\t\t\tgenMorphGeometry: function ( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\t\t\tvar vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\t\t\tvar morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\t\t\tvar indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\t\t\tvar length = parentGeo.attributes.position.count * 3;\n\t\t\t\tvar morphPositions = new Float32Array( length );\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\t\tvar morphIndex = indices[ i ] * 3;\n\n\t\t\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: add morph normal support\n\t\t\t\tvar morphGeoInfo = {\n\t\t\t\t\tvertexIndices: vertexIndices,\n\t\t\t\t\tvertexPositions: morphPositions,\n\n\t\t\t\t};\n\n\t\t\t\tvar morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\t\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\t\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\t\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t\t\t},\n\n\t\t\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\t\t\tparseNormals: function ( NormalNode ) {\n\n\t\t\t\tvar mappingType = NormalNode.MappingInformationType;\n\t\t\t\tvar referenceType = NormalNode.ReferenceInformationType;\n\t\t\t\tvar buffer = NormalNode.Normals.a;\n\t\t\t\tvar indexBuffer = [];\n\t\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 3,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tindices: indexBuffer,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\t\t\tparseUVs: function ( UVNode ) {\n\n\t\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\t\tvar buffer = UVNode.UV.a;\n\t\t\t\tvar indexBuffer = [];\n\t\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 2,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tindices: indexBuffer,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\t\t\tparseVertexColors: function ( ColorNode ) {\n\n\t\t\t\tvar mappingType = ColorNode.MappingInformationType;\n\t\t\t\tvar referenceType = ColorNode.ReferenceInformationType;\n\t\t\t\tvar buffer = ColorNode.Colors.a;\n\t\t\t\tvar indexBuffer = [];\n\t\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 4,\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tindices: indexBuffer,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\t\t\tparseMaterialIndices: function ( MaterialNode ) {\n\n\t\t\t\tvar mappingType = MaterialNode.MappingInformationType;\n\t\t\t\tvar referenceType = MaterialNode.ReferenceInformationType;\n\n\t\t\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdataSize: 1,\n\t\t\t\t\t\tbuffer: [ 0 ],\n\t\t\t\t\t\tindices: [ 0 ],\n\t\t\t\t\t\tmappingType: 'AllSame',\n\t\t\t\t\t\treferenceType: referenceType\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tvar materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t\t\t// for conforming with the other functions we've written for other data.\n\t\t\t\tvar materialIndices = [];\n\n\t\t\t\tfor ( var i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\t\t\tmaterialIndices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 1,\n\t\t\t\t\tbuffer: materialIndexBuffer,\n\t\t\t\t\tindices: materialIndices,\n\t\t\t\t\tmappingType: mappingType,\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t},\n\n\t\t\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\t\t\tparseNurbsGeometry: function ( geoNode ) {\n\n\t\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t\t}\n\n\t\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t\t}\n\n\t\t\t\tvar degree = order - 1;\n\n\t\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\t\tvar controlPoints = [];\n\t\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar startKnot, endKnot;\n\n\t\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\t\tstartKnot = degree;\n\t\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t\t} );\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\t\treturn geometry;\n\n\t\t\t},\n\n\t\t};\n\n\t\t// parse animation data from FBXTree\n\t\tfunction AnimationParser() {}\n\n\t\tAnimationParser.prototype = {\n\n\t\t\tconstructor: AnimationParser,\n\n\t\t\t// take raw animation clips and turn them into three.js animation clips\n\t\t\tparse: function () {\n\n\t\t\t\tvar animationClips = [];\n\n\t\t\t\tvar rawClips = this.parseClips();\n\n\t\t\t\tif ( rawClips !== undefined ) {\n\n\t\t\t\t\tfor ( var key in rawClips ) {\n\n\t\t\t\t\t\tvar rawClip = rawClips[ key ];\n\n\t\t\t\t\t\tvar clip = this.addClip( rawClip );\n\n\t\t\t\t\t\tanimationClips.push( clip );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn animationClips;\n\n\t\t\t},\n\n\t\t\tparseClips: function () {\n\n\t\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t\t\t// if this is undefined we can safely assume there are no animations\n\t\t\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\t\t\tvar curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\t\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\t\t\tvar layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\t\t\tvar rawClips = this.parseAnimStacks( layersMap );\n\n\t\t\t\treturn rawClips;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t\t\t// and is referenced by an AnimationLayer\n\t\t\tparseAnimationCurveNodes: function () {\n\n\t\t\t\tvar rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\t\t\tvar curveNodesMap = new Map();\n\n\t\t\t\tfor ( var nodeID in rawCurveNodes ) {\n\n\t\t\t\t\tvar rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\t\t\tvar curveNode = {\n\n\t\t\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\t\t\tcurves: {},\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn curveNodesMap;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t\t\t// axis ( e.g. times and values of x rotation)\n\t\t\tparseAnimationCurves: function ( curveNodesMap ) {\n\n\t\t\t\tvar rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t\t\t// clearly, this should be optimised to\n\t\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\t\t\tfor ( var nodeID in rawCurves ) {\n\n\t\t\t\t\tvar animationCurve = {\n\n\t\t\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t\t\t};\n\n\t\t\t\t\tvar relationships = connections.get( animationCurve.id );\n\n\t\t\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\t\t\tvar animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\t\t\tvar animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\t\t\tparseAnimationLayers: function ( curveNodesMap ) {\n\n\t\t\t\tvar rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\t\t\tvar layersMap = new Map();\n\n\t\t\t\tfor ( var nodeID in rawLayers ) {\n\n\t\t\t\t\tvar layerCurveNodes = [];\n\n\t\t\t\t\tvar connection = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\t\t\tvar children = connection.children;\n\n\t\t\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\t\t\tvar curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tvar modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tvar deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\tvar morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\t\t\tvar geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\t\t\tvar modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn layersMap;\n\n\t\t\t},\n\n\t\t\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\t\t\tparseAnimStacks: function ( layersMap ) {\n\n\t\t\t\tvar rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t\t\t// connect the stacks (clips) up to the layers\n\t\t\t\tvar rawClips = {};\n\n\t\t\t\tfor ( var nodeID in rawStacks ) {\n\n\t\t\t\t\tvar children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\t\t\tlayer: layer,\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\treturn rawClips;\n\n\t\t\t},\n\n\t\t\taddClip: function ( rawClip ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tvar self = this;\n\t\t\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\t\t\ttracks = tracks.concat( self.generateTracks( rawTracks ) );\n\n\t\t\t\t} );\n\n\t\t\t\treturn new THREE.AnimationClip( rawClip.name, - 1, tracks );\n\n\t\t\t},\n\n\t\t\tgenerateTracks: function ( rawTracks ) {\n\n\t\t\t\tvar tracks = [];\n\n\t\t\t\tvar initialPosition = new THREE.Vector3();\n\t\t\t\tvar initialRotation = new THREE.Quaternion();\n\t\t\t\tvar initialScale = new THREE.Vector3();\n\n\t\t\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\t\t\tinitialPosition = initialPosition.toArray();\n\t\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\n\t\t\t\tinitialScale = initialScale.toArray();\n\n\t\t\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\t\t\tvar positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\t\t\tvar rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\t\t\tvar scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\t\t\tvar morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t\t\t}\n\n\t\t\t\treturn tracks;\n\n\t\t\t},\n\n\t\t\tgenerateVectorTrack: function ( modelName, curves, initialValue, type ) {\n\n\t\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\t\treturn new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t\t\t},\n\n\t\t\tgenerateRotationTrack: function ( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\n\n\t\t\t\tif ( curves.x !== undefined ) {\n\n\t\t\t\t\tthis.interpolateRotations( curves.x );\n\t\t\t\t\tcurves.x.values = curves.x.values.map( THREE.MathUtils.degToRad );\n\n\t\t\t\t}\n\t\t\t\tif ( curves.y !== undefined ) {\n\n\t\t\t\t\tthis.interpolateRotations( curves.y );\n\t\t\t\t\tcurves.y.values = curves.y.values.map( THREE.MathUtils.degToRad );\n\n\t\t\t\t}\n\t\t\t\tif ( curves.z !== undefined ) {\n\n\t\t\t\t\tthis.interpolateRotations( curves.z );\n\t\t\t\t\tcurves.z.values = curves.z.values.map( THREE.MathUtils.degToRad );\n\n\t\t\t\t}\n\n\t\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\t\tif ( preRotation !== undefined ) {\n\n\t\t\t\t\tpreRotation = preRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\t\t\tpreRotation = new THREE.Euler().fromArray( preRotation );\n\t\t\t\t\tpreRotation = new THREE.Quaternion().setFromEuler( preRotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( postRotation !== undefined ) {\n\n\t\t\t\t\tpostRotation = postRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\t\t\tpostRotation = new THREE.Euler().fromArray( postRotation );\n\t\t\t\t\tpostRotation = new THREE.Quaternion().setFromEuler( postRotation ).inverse();\n\n\t\t\t\t}\n\n\t\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\t\tvar euler = new THREE.Euler();\n\n\t\t\t\tvar quaternionValues = [];\n\n\t\t\t\tfor ( var i = 0; i < values.length; i += 3 ) {\n\n\t\t\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\n\t\t\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t\t\t}\n\n\t\t\t\treturn new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t\t\t},\n\n\t\t\tgenerateMorphTrack: function ( rawTracks ) {\n\n\t\t\t\tvar curves = rawTracks.DeformPercent.curves.morph;\n\t\t\t\tvar values = curves.values.map( function ( val ) {\n\n\t\t\t\t\treturn val / 100;\n\n\t\t\t\t} );\n\n\t\t\t\tvar morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\t\t\treturn new THREE.NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t\t\t},\n\n\t\t\t// For all animated objects, times are defined separately for each axis\n\t\t\t// Here we'll combine the times into one sorted array without duplicates\n\t\t\tgetTimesForAllAxes: function ( curves ) {\n\n\t\t\t\tvar times = [];\n\n\t\t\t\t// first join together the times for each axis, if defined\n\t\t\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\t\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\t\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t\t\t// then sort them and remove duplicates\n\t\t\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a - b;\n\n\t\t\t\t} ).filter( function ( elem, index, array ) {\n\n\t\t\t\t\treturn array.indexOf( elem ) == index;\n\n\t\t\t\t} );\n\n\t\t\t\treturn times;\n\n\t\t\t},\n\n\t\t\tgetKeyframeTrackValues: function ( times, curves, initialValue ) {\n\n\t\t\t\tvar prevValue = initialValue;\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tvar xIndex = - 1;\n\t\t\t\tvar yIndex = - 1;\n\t\t\t\tvar zIndex = - 1;\n\n\t\t\t\ttimes.forEach( function ( time ) {\n\n\t\t\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t\t\t// if there is an x value defined for this frame, use that\n\t\t\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\t\t\tvar xValue = curves.x.values[ xIndex ];\n\t\t\t\t\t\tvalues.push( xValue );\n\t\t\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\t\t\tvar yValue = curves.y.values[ yIndex ];\n\t\t\t\t\t\tvalues.push( yValue );\n\t\t\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\t\t\tvar zValue = curves.z.values[ zIndex ];\n\t\t\t\t\t\tvalues.push( zValue );\n\t\t\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn values;\n\n\t\t\t},\n\n\t\t\t// Rotations are defined as Euler angles which can have values  of any size\n\t\t\t// These will be converted to quaternions which don't support values greater than\n\t\t\t// PI, so we'll interpolate large rotations\n\t\t\tinterpolateRotations: function ( curve ) {\n\n\t\t\t\tfor ( var i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\t\t\tvar initialValue = curve.values[ i - 1 ];\n\t\t\t\t\tvar valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\t\t\tvar absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\t\t\tvar numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\t\t\tvar step = valuesSpan / numSubIntervals;\n\t\t\t\t\t\tvar nextValue = initialValue + step;\n\n\t\t\t\t\t\tvar initialTime = curve.times[ i - 1 ];\n\t\t\t\t\t\tvar timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\t\t\tvar interval = timeSpan / numSubIntervals;\n\t\t\t\t\t\tvar nextTime = initialTime + interval;\n\n\t\t\t\t\t\tvar interpolatedTimes = [];\n\t\t\t\t\t\tvar interpolatedValues = [];\n\n\t\t\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\t\t\tnextValue += step;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t};\n\n\t\t// parse an FBX file in ASCII format\n\t\tfunction TextParser() {}\n\n\t\tTextParser.prototype = {\n\n\t\t\tconstructor: TextParser,\n\n\t\t\tgetPrevNode: function () {\n\n\t\t\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t\t\t},\n\n\t\t\tgetCurrentNode: function () {\n\n\t\t\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t\t\t},\n\n\t\t\tgetCurrentProp: function () {\n\n\t\t\t\treturn this.currentProp;\n\n\t\t\t},\n\n\t\t\tpushStack: function ( node ) {\n\n\t\t\t\tthis.nodeStack.push( node );\n\t\t\t\tthis.currentIndent += 1;\n\n\t\t\t},\n\n\t\t\tpopStack: function () {\n\n\t\t\t\tthis.nodeStack.pop();\n\t\t\t\tthis.currentIndent -= 1;\n\n\t\t\t},\n\n\t\t\tsetCurrentProp: function ( val, name ) {\n\n\t\t\t\tthis.currentProp = val;\n\t\t\t\tthis.currentPropName = name;\n\n\t\t\t},\n\n\t\t\tparse: function ( text ) {\n\n\t\t\t\tthis.currentIndent = 0;\n\n\t\t\t\tthis.allNodes = new FBXTree();\n\t\t\t\tthis.nodeStack = [];\n\t\t\t\tthis.currentProp = [];\n\t\t\t\tthis.currentPropName = '';\n\n\t\t\t\tvar self = this;\n\n\t\t\t\tvar split = text.split( /[\\r\\n]+/ );\n\n\t\t\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\t\t\tvar matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\t\t\tvar matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\t\t\tvar matchBeginning = line.match( '^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\t\t\tvar matchProperty = line.match( '^\\\\t{' + ( self.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\t\t\tvar matchEnd = line.match( '^\\\\t{' + ( self.currentIndent - 1 ) + '}}' );\n\n\t\t\t\t\tif ( matchBeginning ) {\n\n\t\t\t\t\t\tself.parseNodeBegin( line, matchBeginning );\n\n\t\t\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\t\t\tself.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\t\t\tself.popStack();\n\n\t\t\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\t\t\tself.parseNodePropertyContinued( line );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn this.allNodes;\n\n\t\t\t},\n\n\t\t\tparseNodeBegin: function ( line, property ) {\n\n\t\t\t\tvar nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t\tvar nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t\t} );\n\n\t\t\t\tvar node = { name: nodeName };\n\t\t\t\tvar attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t\t// a top node\n\t\t\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t\t\t} else { // a subnode\n\n\t\t\t\t\t// if the subnode already exists, append it\n\t\t\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\t\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\t\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\t\t\tthis.pushStack( node );\n\n\t\t\t},\n\n\t\t\tparseNodeAttr: function ( attrs ) {\n\n\t\t\t\tvar id = attrs[ 0 ];\n\n\t\t\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar name = '', type = '';\n\n\t\t\t\tif ( attrs.length > 1 ) {\n\n\t\t\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\t\t\ttype = attrs[ 2 ];\n\n\t\t\t\t}\n\n\t\t\t\treturn { id: id, name: name, type: type };\n\n\t\t\t},\n\n\t\t\tparseNodeProperty: function ( line, property, contentLine ) {\n\n\t\t\t\tvar propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\t\t\tvar propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t\t\t//\tContent: ,\n\t\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\t\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t\t\t}\n\n\t\t\t\tvar currentNode = this.getCurrentNode();\n\t\t\t\tvar parentName = currentNode.name;\n\n\t\t\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// Connections\n\t\t\t\tif ( propName === 'C' ) {\n\n\t\t\t\t\tvar connProps = propValue.split( ',' ).slice( 1 );\n\t\t\t\t\tvar from = parseInt( connProps[ 0 ] );\n\t\t\t\t\tvar to = parseInt( connProps[ 1 ] );\n\n\t\t\t\t\tvar rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tpropName = 'connections';\n\t\t\t\t\tpropValue = [ from, to ];\n\t\t\t\t\tappend( propValue, rest );\n\n\t\t\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Node\n\t\t\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t\t\t// connections\n\t\t\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\t\t\telse currentNode.a = propValue;\n\n\t\t\t\t}\n\n\t\t\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\t\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseNodePropertyContinued: function ( line ) {\n\n\t\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t\tcurrentNode.a += line;\n\n\t\t\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t\t\t// so convert the string to an array\n\t\t\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// parse \"Property70\"\n\t\t\tparseNodeSpecialProperty: function ( line, propName, propValue ) {\n\n\t\t\t\t// split this\n\t\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t\t\t// into array like below\n\t\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\t\t\tvar props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t\t\t} );\n\n\t\t\t\tvar innerPropName = props[ 0 ];\n\t\t\t\tvar innerPropType1 = props[ 1 ];\n\t\t\t\tvar innerPropType2 = props[ 2 ];\n\t\t\t\tvar innerPropFlag = props[ 3 ];\n\t\t\t\tvar innerPropValue = props[ 4 ];\n\n\t\t\t\t// cast values where needed, otherwise leave as strings\n\t\t\t\tswitch ( innerPropType1 ) {\n\n\t\t\t\t\tcase 'int':\n\t\t\t\t\tcase 'enum':\n\t\t\t\t\tcase 'bool':\n\t\t\t\t\tcase 'ULongLong':\n\t\t\t\t\tcase 'double':\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\tcase 'FieldOfView':\n\t\t\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Color':\n\t\t\t\t\tcase 'ColorRGB':\n\t\t\t\t\tcase 'Vector3D':\n\t\t\t\t\tcase 'Lcl_Translation':\n\t\t\t\t\tcase 'Lcl_Rotation':\n\t\t\t\t\tcase 'Lcl_Scaling':\n\t\t\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// CAUTION: these props must append to parent's parent\n\t\t\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t};\n\n\t\t\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t\t\t},\n\n\t\t};\n\n\t\t// Parse an FBX file in Binary format\n\t\tfunction BinaryParser() {}\n\n\t\tBinaryParser.prototype = {\n\n\t\t\tconstructor: BinaryParser,\n\n\t\t\tparse: function ( buffer ) {\n\n\t\t\t\tvar reader = new BinaryReader( buffer );\n\t\t\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\t\t\tvar version = reader.getUint32();\n\n\t\t\t\tconsole.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n\t\t\t\tvar allNodes = new FBXTree();\n\n\t\t\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\t\t\tvar node = this.parseNode( reader, version );\n\t\t\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t\t\t}\n\n\t\t\t\treturn allNodes;\n\n\t\t\t},\n\n\t\t\t// Check if reader has reached the end of content.\n\t\t\tendOfContent: function ( reader ) {\n\n\t\t\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t\t\t// - 16bytes: magic\n\t\t\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t\t\t// - 4bytes: magic\n\t\t\t\t// - 4bytes: version\n\t\t\t\t// - 120bytes: zero\n\t\t\t\t// - 16bytes: magic\n\t\t\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t// recursively parse nodes until the end of the file is reached\n\t\t\tparseNode: function ( reader, version ) {\n\n\t\t\t\tvar node = {};\n\n\t\t\t\t// The first three data sizes depends on version.\n\t\t\t\tvar endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\t\t\tvar numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t\t// note: do not remove this even if you get a linter warning as it moves the buffer forward\n\t\t\t\tvar propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t\tvar nameLen = reader.getUint8();\n\t\t\t\tvar name = reader.getString( nameLen );\n\n\t\t\t\t// Regards this node as NULL-record if endOffset is zero\n\t\t\t\tif ( endOffset === 0 ) return null;\n\n\t\t\t\tvar propertyList = [];\n\n\t\t\t\tfor ( var i = 0; i < numProperties; i ++ ) {\n\n\t\t\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\t\t\tvar id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\t\t\tvar attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\t\t\tvar attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t\t\t// check if this node represents just a single property\n\t\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\t\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\t\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\t\t\tvar subNode = this.parseNode( reader, version );\n\n\t\t\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t\t\t}\n\n\t\t\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\t\t\tif ( typeof id === 'number' ) node.id = id;\n\t\t\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\t\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\t\t\tif ( name !== '' ) node.name = name;\n\n\t\t\t\treturn node;\n\n\t\t\t},\n\n\t\t\tparseSubNode: function ( name, node, subNode ) {\n\n\t\t\t\t// special case: child node is single property\n\t\t\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\t\t\tvar value = subNode.propertyList[ 0 ];\n\n\t\t\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\t\tsubNode.a = value;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\t\t\tnode.connections = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.connections.push( array );\n\n\t\t\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\t\t\tvar keys = Object.keys( subNode );\n\n\t\t\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\t\t\tvar innerPropName = subNode.propertyList[ 0 ];\n\t\t\t\t\tvar innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\t\t\tvar innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\t\t\tvar innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\t\t\tvar innerPropValue;\n\n\t\t\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\t\t\tinnerPropValue = [\n\t\t\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t\t\t];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// this will be copied to parent, see above\n\t\t\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t\t};\n\n\t\t\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseProperty: function ( reader ) {\n\n\t\t\t\tvar type = reader.getString( 1 );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'C':\n\t\t\t\t\t\treturn reader.getBoolean();\n\n\t\t\t\t\tcase 'D':\n\t\t\t\t\t\treturn reader.getFloat64();\n\n\t\t\t\t\tcase 'F':\n\t\t\t\t\t\treturn reader.getFloat32();\n\n\t\t\t\t\tcase 'I':\n\t\t\t\t\t\treturn reader.getInt32();\n\n\t\t\t\t\tcase 'L':\n\t\t\t\t\t\treturn reader.getInt64();\n\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\t\t\tcase 'S':\n\t\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\t\treturn reader.getString( length );\n\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\treturn reader.getInt16();\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\tcase 'd':\n\t\t\t\t\tcase 'f':\n\t\t\t\t\tcase 'i':\n\t\t\t\t\tcase 'l':\n\n\t\t\t\t\t\tvar arrayLength = reader.getUint32();\n\t\t\t\t\t\tvar encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\t\t\tvar compressedLength = reader.getUint32();\n\n\t\t\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\t\t\tvar reader2 = new BinaryReader( inflate.decompress().buffer );\n\n\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction BinaryReader( buffer, littleEndian ) {\n\n\t\t\tthis.dv = new DataView( buffer );\n\t\t\tthis.offset = 0;\n\t\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t\t}\n\n\t\tBinaryReader.prototype = {\n\n\t\t\tconstructor: BinaryReader,\n\n\t\t\tgetOffset: function () {\n\n\t\t\t\treturn this.offset;\n\n\t\t\t},\n\n\t\t\tsize: function () {\n\n\t\t\t\treturn this.dv.buffer.byteLength;\n\n\t\t\t},\n\n\t\t\tskip: function ( length ) {\n\n\t\t\t\tthis.offset += length;\n\n\t\t\t},\n\n\t\t\t// seems like true/false representation depends on exporter.\n\t\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t\t\t// then sees LSB.\n\t\t\tgetBoolean: function () {\n\n\t\t\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t\t\t},\n\n\t\t\tgetBooleanArray: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getBoolean() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetUint8: function () {\n\n\t\t\t\tvar value = this.dv.getUint8( this.offset );\n\t\t\t\tthis.offset += 1;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetInt16: function () {\n\n\t\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 2;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetInt32: function () {\n\n\t\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 4;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetInt32Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getInt32() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetUint32: function () {\n\n\t\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 4;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t\t\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t\t\t// There's a possibility that this method returns wrong value if the value\n\t\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t\t\t// TODO: safely handle 64-bit integer\n\t\t\tgetInt64: function () {\n\n\t\t\t\tvar low, high;\n\n\t\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\t\tlow = this.getUint32();\n\t\t\t\t\thigh = this.getUint32();\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = this.getUint32();\n\t\t\t\t\tlow = this.getUint32();\n\n\t\t\t\t}\n\n\t\t\t\t// calculate negative value\n\t\t\t\tif ( high & 0x80000000 ) {\n\n\t\t\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t\t\t}\n\n\t\t\t\treturn high * 0x100000000 + low;\n\n\t\t\t},\n\n\t\t\tgetInt64Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getInt64() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\t// Note: see getInt64() comment\n\t\t\tgetUint64: function () {\n\n\t\t\t\tvar low, high;\n\n\t\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\t\tlow = this.getUint32();\n\t\t\t\t\thigh = this.getUint32();\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = this.getUint32();\n\t\t\t\t\tlow = this.getUint32();\n\n\t\t\t\t}\n\n\t\t\t\treturn high * 0x100000000 + low;\n\n\t\t\t},\n\n\t\t\tgetFloat32: function () {\n\n\t\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 4;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetFloat32Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getFloat32() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetFloat64: function () {\n\n\t\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\t\t\tthis.offset += 8;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetFloat64Array: function ( size ) {\n\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta.push( this.getFloat64() );\n\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\n\t\t\t},\n\n\t\t\tgetArrayBuffer: function ( size ) {\n\n\t\t\t\tvar value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\t\t\tthis.offset += size;\n\t\t\t\treturn value;\n\n\t\t\t},\n\n\t\t\tgetString: function ( size ) {\n\n\t\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\t\t\tvar a = [];\n\n\t\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\t\ta[ i ] = this.getUint8();\n\n\t\t\t\t}\n\n\t\t\t\tvar nullByte = a.indexOf( 0 );\n\t\t\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n\t\t// and BinaryParser( FBX Binary format)\n\t\tfunction FBXTree() {}\n\n\t\tFBXTree.prototype = {\n\n\t\t\tconstructor: FBXTree,\n\n\t\t\tadd: function ( key, val ) {\n\n\t\t\t\tthis[ key ] = val;\n\n\t\t\t},\n\n\t\t};\n\n\t\t// ************** UTILITY FUNCTIONS **************\n\n\t\tfunction isFbxFormatBinary( buffer ) {\n\n\t\t\tvar CORRECT = 'Kaydara FBX Binary  \\0';\n\n\t\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n\t\t}\n\n\t\tfunction isFbxFormatASCII( text ) {\n\n\t\t\tvar CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\t\t\tvar cursor = 0;\n\n\t\t\tfunction read( offset ) {\n\n\t\t\t\tvar result = text[ offset - 1 ];\n\t\t\t\ttext = text.slice( cursor + offset );\n\t\t\t\tcursor ++;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < CORRECT.length; ++ i ) {\n\n\t\t\t\tvar num = read( 1 );\n\t\t\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction getFbxVersion( text ) {\n\n\t\t\tvar versionRegExp = /FBXVersion: (\\d+)/;\n\t\t\tvar match = text.match( versionRegExp );\n\t\t\tif ( match ) {\n\n\t\t\t\tvar version = parseInt( match[ 1 ] );\n\t\t\t\treturn version;\n\n\t\t\t}\n\t\t\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n\t\t}\n\n\t\t// Converts FBX ticks into real time seconds.\n\t\tfunction convertFBXTimeToSeconds( time ) {\n\n\t\t\treturn time / 46186158000;\n\n\t\t}\n\n\t\tvar dataArray = [];\n\n\t\t// extracts the data from the correct position in the FBX array based on indexing type\n\t\tfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\t\t\tvar index;\n\n\t\t\tswitch ( infoObject.mappingType ) {\n\n\t\t\t\tcase 'ByPolygonVertex' :\n\t\t\t\t\tindex = polygonVertexIndex;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ByPolygon' :\n\t\t\t\t\tindex = polygonIndex;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ByVertice' :\n\t\t\t\t\tindex = vertexIndex;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'AllSame' :\n\t\t\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault :\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t\t\t}\n\n\t\t\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\t\t\tvar from = index * infoObject.dataSize;\n\t\t\tvar to = from + infoObject.dataSize;\n\n\t\t\treturn slice( dataArray, infoObject.buffer, from, to );\n\n\t\t}\n\n\t\tvar tempEuler = new THREE.Euler();\n\t\tvar tempVec = new THREE.Vector3();\n\n\t\t// generate transformation from FBX transform data\n\t\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n\t\t// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\t\tfunction generateTransform( transformData ) {\n\n\t\t\tvar lTranslationM = new THREE.Matrix4();\n\t\t\tvar lPreRotationM = new THREE.Matrix4();\n\t\t\tvar lRotationM = new THREE.Matrix4();\n\t\t\tvar lPostRotationM = new THREE.Matrix4();\n\n\t\t\tvar lScalingM = new THREE.Matrix4();\n\t\t\tvar lScalingPivotM = new THREE.Matrix4();\n\t\t\tvar lScalingOffsetM = new THREE.Matrix4();\n\t\t\tvar lRotationOffsetM = new THREE.Matrix4();\n\t\t\tvar lRotationPivotM = new THREE.Matrix4();\n\n\t\t\tvar lParentGX = new THREE.Matrix4();\n\t\t\tvar lGlobalT = new THREE.Matrix4();\n\n\t\t\tvar inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\t\t\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\t\t\tif ( transformData.preRotation ) {\n\n\t\t\t\tvar array = transformData.preRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\tarray.push( transformData.eulerOrder );\n\t\t\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\t}\n\n\t\t\tif ( transformData.rotation ) {\n\n\t\t\t\tvar array = transformData.rotation.map( THREE.MathUtils.degToRad );\n\t\t\t\tarray.push( transformData.eulerOrder );\n\t\t\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\t}\n\n\t\t\tif ( transformData.postRotation ) {\n\n\t\t\t\tvar array = transformData.postRotation.map( THREE.MathUtils.degToRad );\n\t\t\t\tarray.push( transformData.eulerOrder );\n\t\t\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\t}\n\n\t\t\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t\t\t// Pivots and offsets\n\t\t\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\t\t\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\t\t\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\t\t\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t\t\t// parent transform\n\t\t\tif ( transformData.parentMatrixWorld ) lParentGX = transformData.parentMatrixWorld;\n\n\t\t\t// Global Rotation\n\t\t\tvar lLRM = lPreRotationM.multiply( lRotationM ).multiply( lPostRotationM );\n\t\t\tvar lParentGRM = new THREE.Matrix4();\n\t\t\tlParentGX.extractRotation( lParentGRM );\n\n\t\t\t// Global Shear*Scaling\n\t\t\tvar lParentTM = new THREE.Matrix4();\n\t\t\tvar lLSM;\n\t\t\tvar lParentGSM;\n\t\t\tvar lParentGRSM;\n\n\t\t\tlParentTM.copyPosition( lParentGX );\n\t\t\tlParentGRSM = lParentTM.getInverse( lParentTM ).multiply( lParentGX );\n\t\t\tlParentGSM = lParentGRM.getInverse( lParentGRM ).multiply( lParentGRSM );\n\t\t\tlLSM = lScalingM;\n\n\t\t\tvar lGlobalRS;\n\t\t\tif ( inheritType === 0 ) {\n\n\t\t\t\tlGlobalRS = lParentGRM.multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t\t\t} else if ( inheritType === 1 ) {\n\n\t\t\t\tlGlobalRS = lParentGRM.multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t\t\t} else {\n\n\t\t\t\tvar lParentLSM = new THREE.Matrix4().copy( lScalingM );\n\n\t\t\t\tvar lParentGSM_noLocal = lParentGSM.multiply( lParentLSM.getInverse( lParentLSM ) );\n\n\t\t\t\tlGlobalRS = lParentGRM.multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t\t\t}\n\n\t\t\t// Calculate the local transform matrix\n\t\t\tvar lTransform = lTranslationM.multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM.getInverse( lRotationPivotM ) ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM.getInverse( lScalingPivotM ) );\n\n\t\t\tvar lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition( lTransform );\n\n\t\t\tvar lGlobalTranslation = lParentGX.multiply( lLocalTWithAllPivotAndOffsetInfo );\n\t\t\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\t\t\tlTransform = lGlobalT.multiply( lGlobalRS );\n\n\t\t\treturn lTransform;\n\n\t\t}\n\n\t\t// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n\t\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\t\tfunction getEulerOrder( order ) {\n\n\t\t\torder = order || 0;\n\n\t\t\tvar enums = [\n\t\t\t\t'ZYX', // -> XYZ extrinsic\n\t\t\t\t'YZX', // -> XZY extrinsic\n\t\t\t\t'XZY', // -> YZX extrinsic\n\t\t\t\t'ZXY', // -> YXZ extrinsic\n\t\t\t\t'YXZ', // -> ZXY extrinsic\n\t\t\t\t'XYZ', // -> ZYX extrinsic\n\t\t\t\t//'SphericXYZ', // not possible to support\n\t\t\t];\n\n\t\t\tif ( order === 6 ) {\n\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\t\t\treturn enums[ 0 ];\n\n\t\t\t}\n\n\t\t\treturn enums[ order ];\n\n\t\t}\n\n\t\t// Parses comma separated list of numbers and returns them an array.\n\t\t// Used internally by the TextParser\n\t\tfunction parseNumberArray( value ) {\n\n\t\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\t\treturn parseFloat( val );\n\n\t\t\t} );\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction convertArrayBufferToString( buffer, from, to ) {\n\n\t\t\tif ( from === undefined ) from = 0;\n\t\t\tif ( to === undefined ) to = buffer.byteLength;\n\n\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n\t\t}\n\n\t\tfunction append( a, b ) {\n\n\t\t\tfor ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\t\t\ta[ j ] = b[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction slice( a, b, from, to ) {\n\n\t\t\tfor ( var i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\t\t\ta[ j ] = b[ i ];\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t}\n\n\t\t// inject array a2 into array a1 at index\n\t\tfunction inject( a1, index, a2 ) {\n\n\t\t\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n\t\t}\n\n\t\treturn FBXLoader;\n\n\t} )();\n\t\n\treturn THREE.FBXLoader;\n});\n"]}