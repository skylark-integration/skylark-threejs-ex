{"version":3,"sources":["loaders/FBXLoader.js"],"names":["define","THREE","Inflate","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","manager","Loader","call","this","FBXTreeParser","textureLoader","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","buffer","littleEndian","dv","DataView","offset","undefined","FBXTree","getFbxVersion","text","match","parseInt","Error","convertFBXTimeToSeconds","time","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","self","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","parse","error","setTimeout","itemError","FBXBuffer","CORRECT","byteLength","length","convertArrayBufferToString","FBXText","cursor","read","result","slice","i","num","isFbxFormatASCII","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","parseScene","connectionMap","Map","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","base64Content","image","parseImage","filename","split","pop","type","content","fileName","extension","lastIndexOf","toLowerCase","getHandler","console","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","indexOf","FileName","Texture","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrixWorld","matrix","transform","generateTransform","applyMatrix4","animations","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","matrixWorld","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","MathUtils","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","c","order","Order","isNaN","startKnot","endKnot","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","Form","vertices","getPoints","positions","toArray","BufferAttribute","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","times","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","modelName","rawModel","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","curve","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","connProps","from","to","rest","append","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","skip","version","getUint32","log","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","decompress","low","high","nullByte","decodeText","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","copyPosition","getInverse","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"mappings":"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","file":"../../loaders/FBXLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    'skylark-zlib/Inflate',\n    '../curves/NURBSCurve'\n], function (\n    THREE, \n    Inflate, \n    NURBSCurve\n) {\n    'use strict';\n    var FBXLoader = function () {\n        var fbxTree;\n        var connections;\n        var sceneGraph;\n        function FBXLoader(manager) {\n            THREE.Loader.call(this, manager);\n        }\n        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n            constructor: FBXLoader,\n            load: function (url, onLoad, onProgress, onError) {\n                var self = this;\n                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;\n                var loader = new THREE.FileLoader(this.manager);\n                loader.setPath(self.path);\n                loader.setResponseType('arraybuffer');\n                loader.load(url, function (buffer) {\n                    try {\n                        onLoad(self.parse(buffer, path));\n                    } catch (error) {\n                        setTimeout(function () {\n                            if (onError)\n                                onError(error);\n                            self.manager.itemError(url);\n                        }, 0);\n                    }\n                }, onProgress, onError);\n            },\n            parse: function (FBXBuffer, path) {\n                if (isFbxFormatBinary(FBXBuffer)) {\n                    fbxTree = new BinaryParser().parse(FBXBuffer);\n                } else {\n                    var FBXText = convertArrayBufferToString(FBXBuffer);\n                    if (!isFbxFormatASCII(FBXText)) {\n                        throw new Error('THREE.FBXLoader: Unknown format.');\n                    }\n                    if (getFbxVersion(FBXText) < 7000) {\n                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n                    }\n                    fbxTree = new TextParser().parse(FBXText);\n                }\n                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n            }\n        });\n        function FBXTreeParser(textureLoader, manager) {\n            this.textureLoader = textureLoader;\n            this.manager = manager;\n        }\n        FBXTreeParser.prototype = {\n            constructor: FBXTreeParser,\n            parse: function () {\n                connections = this.parseConnections();\n                var images = this.parseImages();\n                var textures = this.parseTextures(images);\n                var materials = this.parseMaterials(textures);\n                var deformers = this.parseDeformers();\n                var geometryMap = new GeometryParser().parse(deformers);\n                this.parseScene(deformers, geometryMap, materials);\n                return sceneGraph;\n            },\n            parseConnections: function () {\n                var connectionMap = new Map();\n                if ('Connections' in fbxTree) {\n                    var rawConnections = fbxTree.Connections.connections;\n                    rawConnections.forEach(function (rawConnection) {\n                        var fromID = rawConnection[0];\n                        var toID = rawConnection[1];\n                        var relationship = rawConnection[2];\n                        if (!connectionMap.has(fromID)) {\n                            connectionMap.set(fromID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var parentRelationship = {\n                            ID: toID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(fromID).parents.push(parentRelationship);\n                        if (!connectionMap.has(toID)) {\n                            connectionMap.set(toID, {\n                                parents: [],\n                                children: []\n                            });\n                        }\n                        var childRelationship = {\n                            ID: fromID,\n                            relationship: relationship\n                        };\n                        connectionMap.get(toID).children.push(childRelationship);\n                    });\n                }\n                return connectionMap;\n            },\n            parseImages: function () {\n                var images = {};\n                var blobs = {};\n                if ('Video' in fbxTree.Objects) {\n                    var videoNodes = fbxTree.Objects.Video;\n                    for (var nodeID in videoNodes) {\n                        var videoNode = videoNodes[nodeID];\n                        var id = parseInt(nodeID);\n                        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n                        if ('Content' in videoNode) {\n                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n                            if (arrayBufferContent || base64Content) {\n                                var image = this.parseImage(videoNodes[nodeID]);\n                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n                            }\n                        }\n                    }\n                }\n                for (var id in images) {\n                    var filename = images[id];\n                    if (blobs[filename] !== undefined)\n                        images[id] = blobs[filename];\n                    else\n                        images[id] = images[id].split('\\\\').pop();\n                }\n                return images;\n            },\n            parseImage: function (videoNode) {\n                var content = videoNode.Content;\n                var fileName = videoNode.RelativeFilename || videoNode.Filename;\n                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n                var type;\n                switch (extension) {\n                case 'bmp':\n                    type = 'image/bmp';\n                    break;\n                case 'jpg':\n                case 'jpeg':\n                    type = 'image/jpeg';\n                    break;\n                case 'png':\n                    type = 'image/png';\n                    break;\n                case 'tif':\n                    type = 'image/tiff';\n                    break;\n                case 'tga':\n                    if (this.manager.getHandler('.tga') === null) {\n                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n                    }\n                    type = 'image/tga';\n                    break;\n                default:\n                    console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n                    return;\n                }\n                if (typeof content === 'string') {\n                    return 'data:' + type + ';base64,' + content;\n                } else {\n                    var array = new Uint8Array(content);\n                    return window.URL.createObjectURL(new Blob([array], { type: type }));\n                }\n            },\n            parseTextures: function (images) {\n                var textureMap = new Map();\n                if ('Texture' in fbxTree.Objects) {\n                    var textureNodes = fbxTree.Objects.undefined;\n                    for (var nodeID in textureNodes) {\n                        var texture = this.parseTexture(textureNodes[nodeID], images);\n                        textureMap.set(parseInt(nodeID), texture);\n                    }\n                }\n                return textureMap;\n            },\n            parseTexture: function (textureNode, images) {\n                var texture = this.loadTexture(textureNode, images);\n                texture.ID = textureNode.id;\n                texture.name = textureNode.attrName;\n                var wrapModeU = textureNode.WrapModeU;\n                var wrapModeV = textureNode.WrapModeV;\n                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                if ('Scaling' in textureNode) {\n                    var values = textureNode.Scaling.value;\n                    texture.repeat.x = values[0];\n                    texture.repeat.y = values[1];\n                }\n                return texture;\n            },\n            loadTexture: function (textureNode, images) {\n                var fileName;\n                var currentPath = this.textureLoader.path;\n                var children = connections.get(textureNode.id).children;\n                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n                    fileName = images[children[0].ID];\n                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n                        this.textureLoader.setPath(undefined);\n                    }\n                }\n                var texture;\n                var extension = textureNode.FileName.slice(-3).toLowerCase();\n                if (extension === 'tga') {\n                    var loader = this.manager.getHandler('.tga');\n                    if (loader === null) {\n                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n                        texture = new THREE.Texture();\n                    } else {\n                        texture = loader.load(fileName);\n                    }\n                } else if (extension === 'psd') {\n                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n                    texture = new THREE.Texture();\n                } else {\n                    texture = this.textureLoader.load(fileName);\n                }\n                this.textureLoader.setPath(currentPath);\n                return texture;\n            },\n            parseMaterials: function (textureMap) {\n                var materialMap = new Map();\n                if ('Material' in fbxTree.Objects) {\n                    var materialNodes = fbxTree.Objects.Material;\n                    for (var nodeID in materialNodes) {\n                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n                        if (material !== null)\n                            materialMap.set(parseInt(nodeID), material);\n                    }\n                }\n                return materialMap;\n            },\n            parseMaterial: function (materialNode, textureMap) {\n                var ID = materialNode.id;\n                var name = materialNode.attrName;\n                var type = materialNode.ShadingModel;\n                if (typeof type === 'object') {\n                    type = type.value;\n                }\n                if (!connections.has(ID))\n                    return null;\n                var parameters = this.parseParameters(materialNode, textureMap, ID);\n                var material;\n                switch (type.toLowerCase()) {\n                case 'phong':\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                case 'lambert':\n                    material = new THREE.MeshLambertMaterial();\n                    break;\n                default:\n                    console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n                    material = new THREE.MeshPhongMaterial();\n                    break;\n                }\n                material.setValues(parameters);\n                material.name = name;\n                return material;\n            },\n            parseParameters: function (materialNode, textureMap, ID) {\n                var parameters = {};\n                if (materialNode.BumpFactor) {\n                    parameters.bumpScale = materialNode.BumpFactor.value;\n                }\n                if (materialNode.Diffuse) {\n                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n                }\n                if (materialNode.DisplacementFactor) {\n                    parameters.displacementScale = materialNode.DisplacementFactor.value;\n                }\n                if (materialNode.Emissive) {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n                }\n                if (materialNode.EmissiveFactor) {\n                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n                }\n                if (materialNode.Opacity) {\n                    parameters.opacity = parseFloat(materialNode.Opacity.value);\n                }\n                if (parameters.opacity < 1) {\n                    parameters.transparent = true;\n                }\n                if (materialNode.ReflectionFactor) {\n                    parameters.reflectivity = materialNode.ReflectionFactor.value;\n                }\n                if (materialNode.Shininess) {\n                    parameters.shininess = materialNode.Shininess.value;\n                }\n                if (materialNode.Specular) {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n                }\n                var self = this;\n                connections.get(ID).children.forEach(function (child) {\n                    var type = child.relationship;\n                    switch (type) {\n                    case 'Bump':\n                        parameters.bumpMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'Maya|TEX_ao_map':\n                        parameters.aoMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'DiffuseColor':\n                    case 'Maya|TEX_color_map':\n                        parameters.map = self.getTexture(textureMap, child.ID);\n                        parameters.map.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'DisplacementColor':\n                        parameters.displacementMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'EmissiveColor':\n                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'NormalMap':\n                    case 'Maya|TEX_normal_map':\n                        parameters.normalMap = self.getTexture(textureMap, child.ID);\n                        break;\n                    case 'ReflectionColor':\n                        parameters.envMap = self.getTexture(textureMap, child.ID);\n                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n                        parameters.envMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'SpecularColor':\n                        parameters.specularMap = self.getTexture(textureMap, child.ID);\n                        parameters.specularMap.encoding = THREE.sRGBEncoding;\n                        break;\n                    case 'TransparentColor':\n                        parameters.alphaMap = self.getTexture(textureMap, child.ID);\n                        parameters.transparent = true;\n                        break;\n                    case 'AmbientColor':\n                    case 'ShininessExponent':\n                    case 'SpecularFactor':\n                    case 'VectorDisplacementColor':\n                    default:\n                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n                        break;\n                    }\n                });\n                return parameters;\n            },\n            getTexture: function (textureMap, id) {\n                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n                    id = connections.get(id).children[0].ID;\n                }\n                return textureMap.get(id);\n            },\n            parseDeformers: function () {\n                var skeletons = {};\n                var morphTargets = {};\n                if ('Deformer' in fbxTree.Objects) {\n                    var DeformerNodes = fbxTree.Objects.Deformer;\n                    for (var nodeID in DeformerNodes) {\n                        var deformerNode = DeformerNodes[nodeID];\n                        var relationships = connections.get(parseInt(nodeID));\n                        if (deformerNode.attrType === 'Skin') {\n                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n                            skeleton.ID = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n                            skeleton.geometryID = relationships.parents[0].ID;\n                            skeletons[nodeID] = skeleton;\n                        } else if (deformerNode.attrType === 'BlendShape') {\n                            var morphTarget = { id: nodeID };\n                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n                            morphTarget.id = nodeID;\n                            if (relationships.parents.length > 1)\n                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n                            morphTargets[nodeID] = morphTarget;\n                        }\n                    }\n                }\n                return {\n                    skeletons: skeletons,\n                    morphTargets: morphTargets\n                };\n            },\n            parseSkeleton: function (relationships, deformerNodes) {\n                var rawBones = [];\n                relationships.children.forEach(function (child) {\n                    var boneNode = deformerNodes[child.ID];\n                    if (boneNode.attrType !== 'Cluster')\n                        return;\n                    var rawBone = {\n                        ID: child.ID,\n                        indices: [],\n                        weights: [],\n                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)\n                    };\n                    if ('Indexes' in boneNode) {\n                        rawBone.indices = boneNode.Indexes.a;\n                        rawBone.weights = boneNode.Weights.a;\n                    }\n                    rawBones.push(rawBone);\n                });\n                return {\n                    rawBones: rawBones,\n                    bones: []\n                };\n            },\n            parseMorphTargets: function (relationships, deformerNodes) {\n                var rawMorphTargets = [];\n                for (var i = 0; i < relationships.children.length; i++) {\n                    var child = relationships.children[i];\n                    var morphTargetNode = deformerNodes[child.ID];\n                    var rawMorphTarget = {\n                        name: morphTargetNode.attrName,\n                        initialWeight: morphTargetNode.DeformPercent,\n                        id: morphTargetNode.id,\n                        fullWeights: morphTargetNode.FullWeights.a\n                    };\n                    if (morphTargetNode.attrType !== 'BlendShapeChannel')\n                        return;\n                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n                        return child.relationship === undefined;\n                    })[0].ID;\n                    rawMorphTargets.push(rawMorphTarget);\n                }\n                return rawMorphTargets;\n            },\n            parseScene: function (deformers, geometryMap, materialMap) {\n                sceneGraph = new THREE.Group();\n                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n                var modelNodes = fbxTree.Objects.Model;\n                var self = this;\n                modelMap.forEach(function (model) {\n                    var modelNode = modelNodes[model.ID];\n                    self.setLookAtProperties(model, modelNode);\n                    var parentConnections = connections.get(model.ID).parents;\n                    parentConnections.forEach(function (connection) {\n                        var parent = modelMap.get(connection.ID);\n                        if (parent !== undefined)\n                            parent.add(model);\n                    });\n                    if (model.parent === null) {\n                        sceneGraph.add(model);\n                    }\n                });\n                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n                this.createAmbientLight();\n                this.setupMorphMaterials();\n                sceneGraph.traverse(function (node) {\n                    if (node.userData.transformData) {\n                        if (node.parent)\n                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;\n                        var transform = generateTransform(node.userData.transformData);\n                        node.applyMatrix4(transform);\n                    }\n                });\n                var animations = new AnimationParser().parse();\n                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n                    sceneGraph.children[0].animations = animations;\n                    sceneGraph = sceneGraph.children[0];\n                }\n                sceneGraph.animations = animations;\n            },\n            parseModels: function (skeletons, geometryMap, materialMap) {\n                var modelMap = new Map();\n                var modelNodes = fbxTree.Objects.Model;\n                for (var nodeID in modelNodes) {\n                    var id = parseInt(nodeID);\n                    var node = modelNodes[nodeID];\n                    var relationships = connections.get(id);\n                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n                    if (!model) {\n                        switch (node.attrType) {\n                        case 'Camera':\n                            model = this.createCamera(relationships);\n                            break;\n                        case 'Light':\n                            model = this.createLight(relationships);\n                            break;\n                        case 'Mesh':\n                            model = this.createMesh(relationships, geometryMap, materialMap);\n                            break;\n                        case 'NurbsCurve':\n                            model = this.createCurve(relationships, geometryMap);\n                            break;\n                        case 'LimbNode':\n                        case 'Root':\n                            model = new THREE.Bone();\n                            break;\n                        case 'Null':\n                        default:\n                            model = new THREE.Group();\n                            break;\n                        }\n                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\n                        model.ID = id;\n                    }\n                    this.getTransformData(model, node);\n                    modelMap.set(id, model);\n                }\n                return modelMap;\n            },\n            buildSkeleton: function (relationships, skeletons, id, name) {\n                var bone = null;\n                relationships.parents.forEach(function (parent) {\n                    for (var ID in skeletons) {\n                        var skeleton = skeletons[ID];\n                        skeleton.rawBones.forEach(function (rawBone, i) {\n                            if (rawBone.ID === parent.ID) {\n                                var subBone = bone;\n                                bone = new THREE.Bone();\n                                bone.matrixWorld.copy(rawBone.transformLink);\n                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\n                                bone.ID = id;\n                                skeleton.bones[i] = bone;\n                                if (subBone !== null) {\n                                    bone.add(subBone);\n                                }\n                            }\n                        });\n                    }\n                });\n                return bone;\n            },\n            createCamera: function (relationships) {\n                var model;\n                var cameraAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        cameraAttribute = attr;\n                    }\n                });\n                if (cameraAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type = 0;\n                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n                        type = 1;\n                    }\n                    var nearClippingPlane = 1;\n                    if (cameraAttribute.NearPlane !== undefined) {\n                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n                    }\n                    var farClippingPlane = 1000;\n                    if (cameraAttribute.FarPlane !== undefined) {\n                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n                    }\n                    var width = window.innerWidth;\n                    var height = window.innerHeight;\n                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n                        width = cameraAttribute.AspectWidth.value;\n                        height = cameraAttribute.AspectHeight.value;\n                    }\n                    var aspect = width / height;\n                    var fov = 45;\n                    if (cameraAttribute.FieldOfView !== undefined) {\n                        fov = cameraAttribute.FieldOfView.value;\n                    }\n                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n                        if (focalLength !== null)\n                            model.setFocalLength(focalLength);\n                        break;\n                    case 1:\n                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n                        model = new THREE.Object3D();\n                        break;\n                    }\n                }\n                return model;\n            },\n            createLight: function (relationships) {\n                var model;\n                var lightAttribute;\n                relationships.children.forEach(function (child) {\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\n                    if (attr !== undefined) {\n                        lightAttribute = attr;\n                    }\n                });\n                if (lightAttribute === undefined) {\n                    model = new THREE.Object3D();\n                } else {\n                    var type;\n                    if (lightAttribute.LightType === undefined) {\n                        type = 0;\n                    } else {\n                        type = lightAttribute.LightType.value;\n                    }\n                    var color = 16777215;\n                    if (lightAttribute.undefined !== undefined) {\n                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);\n                    }\n                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n                        intensity = 0;\n                    }\n                    var distance = 0;\n                    if (lightAttribute.FarAttenuationEnd !== undefined) {\n                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n                            distance = 0;\n                        } else {\n                            distance = lightAttribute.FarAttenuationEnd.value;\n                        }\n                    }\n                    var decay = 1;\n                    switch (type) {\n                    case 0:\n                        model = new THREE.PointLight(color, intensity, distance, decay);\n                        break;\n                    case 1:\n                        model = new THREE.DirectionalLight(color, intensity);\n                        break;\n                    case 2:\n                        var angle = Math.PI / 3;\n                        if (lightAttribute.InnerAngle !== undefined) {\n                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\n                        }\n                        var penumbra = 0;\n                        if (lightAttribute.OuterAngle !== undefined) {\n                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\n                            penumbra = Math.max(penumbra, 1);\n                        }\n                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n                        break;\n                    default:\n                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n                        model = new THREE.PointLight(color, intensity);\n                        break;\n                    }\n                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n                        model.castShadow = true;\n                    }\n                }\n                return model;\n            },\n            createMesh: function (relationships, geometryMap, materialMap) {\n                var model;\n                var geometry = null;\n                var material = null;\n                var materials = [];\n                relationships.children.forEach(function (child) {\n                    if (geometryMap.has(child.ID)) {\n                        geometry = geometryMap.get(child.ID);\n                    }\n                    if (materialMap.has(child.ID)) {\n                        materials.push(materialMap.get(child.ID));\n                    }\n                });\n                if (materials.length > 1) {\n                    material = materials;\n                } else if (materials.length > 0) {\n                    material = materials[0];\n                } else {\n                    material = new THREE.MeshPhongMaterial({ color: 13421772 });\n                    materials.push(material);\n                }\n                if ('color' in geometry.attributes) {\n                    materials.forEach(function (material) {\n                        material.vertexColors = true;\n                    });\n                }\n                if (geometry.FBX_Deformer) {\n                    materials.forEach(function (material) {\n                        material.skinning = true;\n                    });\n                    model = new THREE.SkinnedMesh(geometry, material);\n                    model.normalizeSkinWeights();\n                } else {\n                    model = new THREE.Mesh(geometry, material);\n                }\n                return model;\n            },\n            createCurve: function (relationships, geometryMap) {\n                var geometry = relationships.children.reduce(function (geo, child) {\n                    if (geometryMap.has(child.ID))\n                        geo = geometryMap.get(child.ID);\n                    return geo;\n                }, null);\n                var material = new THREE.LineBasicMaterial({\n                    color: 3342591,\n                    linewidth: 1\n                });\n                return new THREE.Line(geometry, material);\n            },\n            getTransformData: function (model, modelNode) {\n                var transformData = {};\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                else\n                    transformData.eulerOrder = 'ZYX';\n                if ('Lcl_Translation' in modelNode)\n                    transformData.translation = modelNode.Lcl_Translation.value;\n                if ('PreRotation' in modelNode)\n                    transformData.preRotation = modelNode.PreRotation.value;\n                if ('Lcl_Rotation' in modelNode)\n                    transformData.rotation = modelNode.Lcl_Rotation.value;\n                if ('PostRotation' in modelNode)\n                    transformData.postRotation = modelNode.PostRotation.value;\n                if ('Lcl_Scaling' in modelNode)\n                    transformData.scale = modelNode.Lcl_Scaling.value;\n                if ('ScalingOffset' in modelNode)\n                    transformData.scalingOffset = modelNode.ScalingOffset.value;\n                if ('ScalingPivot' in modelNode)\n                    transformData.scalingPivot = modelNode.ScalingPivot.value;\n                if ('RotationOffset' in modelNode)\n                    transformData.rotationOffset = modelNode.RotationOffset.value;\n                if ('RotationPivot' in modelNode)\n                    transformData.rotationPivot = modelNode.RotationPivot.value;\n                model.userData.transformData = transformData;\n            },\n            setLookAtProperties: function (model, modelNode) {\n                if ('LookAtProperty' in modelNode) {\n                    var children = connections.get(model.ID).children;\n                    children.forEach(function (child) {\n                        if (child.relationship === 'LookAtProperty') {\n                            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n                            if ('Lcl_Translation' in lookAtTarget) {\n                                var pos = lookAtTarget.Lcl_Translation.value;\n                                if (model.target !== undefined) {\n                                    model.target.position.fromArray(pos);\n                                    sceneGraph.add(model.target);\n                                } else {\n                                    model.lookAt(new THREE.Vector3().fromArray(pos));\n                                }\n                            }\n                        }\n                    });\n                }\n            },\n            bindSkeleton: function (skeletons, geometryMap, modelMap) {\n                var bindMatrices = this.parsePoseNodes();\n                for (var ID in skeletons) {\n                    var skeleton = skeletons[ID];\n                    var parents = connections.get(parseInt(skeleton.ID)).parents;\n                    parents.forEach(function (parent) {\n                        if (geometryMap.has(parent.ID)) {\n                            var geoID = parent.ID;\n                            var geoRelationships = connections.get(geoID);\n                            geoRelationships.parents.forEach(function (geoConnParent) {\n                                if (modelMap.has(geoConnParent.ID)) {\n                                    var model = modelMap.get(geoConnParent.ID);\n                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            parsePoseNodes: function () {\n                var bindMatrices = {};\n                if ('Pose' in fbxTree.Objects) {\n                    var BindPoseNode = fbxTree.Objects.Pose;\n                    for (var nodeID in BindPoseNode) {\n                        if (BindPoseNode[nodeID].attrType === 'BindPose') {\n                            var poseNodes = BindPoseNode[nodeID].PoseNode;\n                            if (Array.isArray(poseNodes)) {\n                                poseNodes.forEach(function (poseNode) {\n                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n                                });\n                            } else {\n                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n                            }\n                        }\n                    }\n                }\n                return bindMatrices;\n            },\n            createAmbientLight: function () {\n                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n                    var r = ambientColor[0];\n                    var g = ambientColor[1];\n                    var b = ambientColor[2];\n                    if (r !== 0 || g !== 0 || b !== 0) {\n                        var color = new THREE.Color(r, g, b);\n                        sceneGraph.add(new THREE.AmbientLight(color, 1));\n                    }\n                }\n            },\n            setupMorphMaterials: function () {\n                var self = this;\n                sceneGraph.traverse(function (child) {\n                    if (child.isMesh) {\n                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n                            if (Array.isArray(child.material)) {\n                                child.material.forEach(function (material, i) {\n                                    self.setupMorphMaterial(child, material, i);\n                                });\n                            } else {\n                                self.setupMorphMaterial(child, child.material);\n                            }\n                        }\n                    }\n                });\n            },\n            setupMorphMaterial: function (child, material, index) {\n                var uuid = child.uuid;\n                var matUuid = material.uuid;\n                var sharedMat = false;\n                sceneGraph.traverse(function (node) {\n                    if (node.isMesh) {\n                        if (Array.isArray(node.material)) {\n                            node.material.forEach(function (mat) {\n                                if (mat.uuid === matUuid && node.uuid !== uuid)\n                                    sharedMat = true;\n                            });\n                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)\n                            sharedMat = true;\n                    }\n                });\n                if (sharedMat === true) {\n                    var clonedMat = material.clone();\n                    clonedMat.morphTargets = true;\n                    if (index === undefined)\n                        child.material = clonedMat;\n                    else\n                        child.material[index] = clonedMat;\n                } else\n                    material.morphTargets = true;\n            }\n        };\n        function GeometryParser() {\n        }\n        GeometryParser.prototype = {\n            constructor: GeometryParser,\n            parse: function (deformers) {\n                var geometryMap = new Map();\n                if ('Geometry' in fbxTree.Objects) {\n                    var geoNodes = fbxTree.Objects.Geometry;\n                    for (var nodeID in geoNodes) {\n                        var relationships = connections.get(parseInt(nodeID));\n                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n                        geometryMap.set(parseInt(nodeID), geo);\n                    }\n                }\n                return geometryMap;\n            },\n            parseGeometry: function (relationships, geoNode, deformers) {\n                switch (geoNode.attrType) {\n                case 'Mesh':\n                    return this.parseMeshGeometry(relationships, geoNode, deformers);\n                    break;\n                case 'NurbsCurve':\n                    return this.parseNurbsGeometry(geoNode);\n                    break;\n                }\n            },\n            parseMeshGeometry: function (relationships, geoNode, deformers) {\n                var skeletons = deformers.skeletons;\n                var morphTargets = [];\n                var modelNodes = relationships.parents.map(function (parent) {\n                    return fbxTree.Objects.Model[parent.ID];\n                });\n                if (modelNodes.length === 0)\n                    return;\n                var skeleton = relationships.children.reduce(function (skeleton, child) {\n                    if (skeletons[child.ID] !== undefined)\n                        skeleton = skeletons[child.ID];\n                    return skeleton;\n                }, null);\n                relationships.children.forEach(function (child) {\n                    if (deformers.morphTargets[child.ID] !== undefined) {\n                        morphTargets.push(deformers.morphTargets[child.ID]);\n                    }\n                });\n                var modelNode = modelNodes[0];\n                var transformData = {};\n                if ('RotationOrder' in modelNode)\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n                if ('InheritType' in modelNode)\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\n                if ('GeometricTranslation' in modelNode)\n                    transformData.translation = modelNode.GeometricTranslation.value;\n                if ('GeometricRotation' in modelNode)\n                    transformData.rotation = modelNode.GeometricRotation.value;\n                if ('GeometricScaling' in modelNode)\n                    transformData.scale = modelNode.GeometricScaling.value;\n                var transform = generateTransform(transformData);\n                return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n            },\n            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n                var geo = new THREE.BufferGeometry();\n                if (geoNode.attrName)\n                    geo.name = geoNode.attrName;\n                var geoInfo = this.parseGeoNode(geoNode, skeleton);\n                var buffers = this.genBuffers(geoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n                positionAttribute.applyMatrix4(preTransform);\n                geo.setAttribute('position', positionAttribute);\n                if (buffers.colors.length > 0) {\n                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n                }\n                if (skeleton) {\n                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));\n                    geo.FBX_Deformer = skeleton;\n                }\n                if (buffers.normal.length > 0) {\n                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n                    normalAttribute.applyNormalMatrix(normalMatrix);\n                    geo.setAttribute('normal', normalAttribute);\n                }\n                buffers.uvs.forEach(function (uvBuffer, i) {\n                    var name = 'uv' + (i + 1).toString();\n                    if (i === 0) {\n                        name = 'uv';\n                    }\n                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n                });\n                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                    var prevMaterialIndex = buffers.materialIndex[0];\n                    var startIndex = 0;\n                    buffers.materialIndex.forEach(function (currentIndex, i) {\n                        if (currentIndex !== prevMaterialIndex) {\n                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n                            prevMaterialIndex = currentIndex;\n                            startIndex = i;\n                        }\n                    });\n                    if (geo.groups.length > 0) {\n                        var lastGroup = geo.groups[geo.groups.length - 1];\n                        var lastIndex = lastGroup.start + lastGroup.count;\n                        if (lastIndex !== buffers.materialIndex.length) {\n                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n                        }\n                    }\n                    if (geo.groups.length === 0) {\n                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n                    }\n                }\n                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n                return geo;\n            },\n            parseGeoNode: function (geoNode, skeleton) {\n                var geoInfo = {};\n                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n                if (geoNode.LayerElementColor) {\n                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n                }\n                if (geoNode.LayerElementMaterial) {\n                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n                }\n                if (geoNode.LayerElementNormal) {\n                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n                }\n                if (geoNode.LayerElementUV) {\n                    geoInfo.uv = [];\n                    var i = 0;\n                    while (geoNode.LayerElementUV[i]) {\n                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n                        i++;\n                    }\n                }\n                geoInfo.weightTable = {};\n                if (skeleton !== null) {\n                    geoInfo.skeleton = skeleton;\n                    skeleton.rawBones.forEach(function (rawBone, i) {\n                        rawBone.indices.forEach(function (index, j) {\n                            if (geoInfo.weightTable[index] === undefined)\n                                geoInfo.weightTable[index] = [];\n                            geoInfo.weightTable[index].push({\n                                id: i,\n                                weight: rawBone.weights[j]\n                            });\n                        });\n                    });\n                }\n                return geoInfo;\n            },\n            genBuffers: function (geoInfo) {\n                var buffers = {\n                    vertex: [],\n                    normal: [],\n                    colors: [],\n                    uvs: [],\n                    materialIndex: [],\n                    vertexWeights: [],\n                    weightsIndices: []\n                };\n                var polygonIndex = 0;\n                var faceLength = 0;\n                var displayedWeightsWarning = false;\n                var facePositionIndexes = [];\n                var faceNormals = [];\n                var faceColors = [];\n                var faceUVs = [];\n                var faceWeights = [];\n                var faceWeightIndices = [];\n                var self = this;\n                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n                    var endOfFace = false;\n                    if (vertexIndex < 0) {\n                        vertexIndex = vertexIndex ^ -1;\n                        endOfFace = true;\n                    }\n                    var weightIndices = [];\n                    var weights = [];\n                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n                    if (geoInfo.color) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n                        faceColors.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.skeleton) {\n                        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n                                weights.push(wt.weight);\n                                weightIndices.push(wt.id);\n                            });\n                        }\n                        if (weights.length > 4) {\n                            if (!displayedWeightsWarning) {\n                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n                                displayedWeightsWarning = true;\n                            }\n                            var wIndex = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            var Weight = [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            weights.forEach(function (weight, weightIndex) {\n                                var currentWeight = weight;\n                                var currentIndex = weightIndices[weightIndex];\n                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                                    if (currentWeight > comparedWeight) {\n                                        comparedWeightArray[comparedWeightIndex] = currentWeight;\n                                        currentWeight = comparedWeight;\n                                        var tmp = wIndex[comparedWeightIndex];\n                                        wIndex[comparedWeightIndex] = currentIndex;\n                                        currentIndex = tmp;\n                                    }\n                                });\n                            });\n                            weightIndices = wIndex;\n                            weights = Weight;\n                        }\n                        while (weights.length < 4) {\n                            weights.push(0);\n                            weightIndices.push(0);\n                        }\n                        for (var i = 0; i < 4; ++i) {\n                            faceWeights.push(weights[i]);\n                            faceWeightIndices.push(weightIndices[i]);\n                        }\n                    }\n                    if (geoInfo.normal) {\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n                        faceNormals.push(data[0], data[1], data[2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, i) {\n                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n                            if (faceUVs[i] === undefined) {\n                                faceUVs[i] = [];\n                            }\n                            faceUVs[i].push(data[0]);\n                            faceUVs[i].push(data[1]);\n                        });\n                    }\n                    faceLength++;\n                    if (endOfFace) {\n                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n                        polygonIndex++;\n                        faceLength = 0;\n                        facePositionIndexes = [];\n                        faceNormals = [];\n                        faceColors = [];\n                        faceUVs = [];\n                        faceWeights = [];\n                        faceWeightIndices = [];\n                    }\n                });\n                return buffers;\n            },\n            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n                for (var i = 2; i < faceLength; i++) {\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n                    if (geoInfo.skeleton) {\n                        buffers.vertexWeights.push(faceWeights[0]);\n                        buffers.vertexWeights.push(faceWeights[1]);\n                        buffers.vertexWeights.push(faceWeights[2]);\n                        buffers.vertexWeights.push(faceWeights[3]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n                        buffers.vertexWeights.push(faceWeights[i * 4]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[0]);\n                        buffers.weightsIndices.push(faceWeightIndices[1]);\n                        buffers.weightsIndices.push(faceWeightIndices[2]);\n                        buffers.weightsIndices.push(faceWeightIndices[3]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n                    }\n                    if (geoInfo.color) {\n                        buffers.colors.push(faceColors[0]);\n                        buffers.colors.push(faceColors[1]);\n                        buffers.colors.push(faceColors[2]);\n                        buffers.colors.push(faceColors[(i - 1) * 3]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n                        buffers.colors.push(faceColors[i * 3]);\n                        buffers.colors.push(faceColors[i * 3 + 1]);\n                        buffers.colors.push(faceColors[i * 3 + 2]);\n                    }\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                        buffers.materialIndex.push(materialIndex);\n                    }\n                    if (geoInfo.normal) {\n                        buffers.normal.push(faceNormals[0]);\n                        buffers.normal.push(faceNormals[1]);\n                        buffers.normal.push(faceNormals[2]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n                        buffers.normal.push(faceNormals[i * 3]);\n                        buffers.normal.push(faceNormals[i * 3 + 1]);\n                        buffers.normal.push(faceNormals[i * 3 + 2]);\n                    }\n                    if (geoInfo.uv) {\n                        geoInfo.uv.forEach(function (uv, j) {\n                            if (buffers.uvs[j] === undefined)\n                                buffers.uvs[j] = [];\n                            buffers.uvs[j].push(faceUVs[j][0]);\n                            buffers.uvs[j].push(faceUVs[j][1]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2]);\n                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n                        });\n                    }\n                }\n            },\n            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n                if (morphTargets.length === 0)\n                    return;\n                parentGeo.morphTargetsRelative = true;\n                parentGeo.morphAttributes.position = [];\n                var self = this;\n                morphTargets.forEach(function (morphTarget) {\n                    morphTarget.rawTargets.forEach(function (rawTarget) {\n                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n                        if (morphGeoNode !== undefined) {\n                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n                        }\n                    });\n                });\n            },\n            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n                var length = parentGeo.attributes.position.count * 3;\n                var morphPositions = new Float32Array(length);\n                for (var i = 0; i < indices.length; i++) {\n                    var morphIndex = indices[i] * 3;\n                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n                }\n                var morphGeoInfo = {\n                    vertexIndices: vertexIndices,\n                    vertexPositions: morphPositions\n                };\n                var morphBuffers = this.genBuffers(morphGeoInfo);\n                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n                positionAttribute.name = name || morphGeoNode.attrName;\n                positionAttribute.applyMatrix4(preTransform);\n                parentGeo.morphAttributes.position.push(positionAttribute);\n            },\n            parseNormals: function (NormalNode) {\n                var mappingType = NormalNode.MappingInformationType;\n                var referenceType = NormalNode.ReferenceInformationType;\n                var buffer = NormalNode.Normals.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    if ('NormalIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalIndex.a;\n                    } else if ('NormalsIndex' in NormalNode) {\n                        indexBuffer = NormalNode.NormalsIndex.a;\n                    }\n                }\n                return {\n                    dataSize: 3,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseUVs: function (UVNode) {\n                var mappingType = UVNode.MappingInformationType;\n                var referenceType = UVNode.ReferenceInformationType;\n                var buffer = UVNode.UV.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = UVNode.UVIndex.a;\n                }\n                return {\n                    dataSize: 2,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseVertexColors: function (ColorNode) {\n                var mappingType = ColorNode.MappingInformationType;\n                var referenceType = ColorNode.ReferenceInformationType;\n                var buffer = ColorNode.Colors.a;\n                var indexBuffer = [];\n                if (referenceType === 'IndexToDirect') {\n                    indexBuffer = ColorNode.ColorIndex.a;\n                }\n                return {\n                    dataSize: 4,\n                    buffer: buffer,\n                    indices: indexBuffer,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseMaterialIndices: function (MaterialNode) {\n                var mappingType = MaterialNode.MappingInformationType;\n                var referenceType = MaterialNode.ReferenceInformationType;\n                if (mappingType === 'NoMappingInformation') {\n                    return {\n                        dataSize: 1,\n                        buffer: [0],\n                        indices: [0],\n                        mappingType: 'AllSame',\n                        referenceType: referenceType\n                    };\n                }\n                var materialIndexBuffer = MaterialNode.Materials.a;\n                var materialIndices = [];\n                for (var i = 0; i < materialIndexBuffer.length; ++i) {\n                    materialIndices.push(i);\n                }\n                return {\n                    dataSize: 1,\n                    buffer: materialIndexBuffer,\n                    indices: materialIndices,\n                    mappingType: mappingType,\n                    referenceType: referenceType\n                };\n            },\n            parseNurbsGeometry: function (geoNode) {\n                if (c.NURBSCurve === undefined) {\n                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n                    return new THREE.BufferGeometry();\n                }\n                var order = parseInt(geoNode.Order);\n                if (isNaN(order)) {\n                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n                    return new THREE.BufferGeometry();\n                }\n                var degree = order - 1;\n                var knots = geoNode.KnotVector.a;\n                var controlPoints = [];\n                var pointsValues = geoNode.Points.a;\n                for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n                }\n                var startKnot, endKnot;\n                if (geoNode.Form === 'Closed') {\n                    controlPoints.push(controlPoints[0]);\n                } else if (geoNode.Form === 'Periodic') {\n                    startKnot = degree;\n                    endKnot = knots.length - 1 - startKnot;\n                    for (var i = 0; i < degree; ++i) {\n                        controlPoints.push(controlPoints[i]);\n                    }\n                }\n                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n                var vertices = curve.getPoints(controlPoints.length * 7);\n                var positions = new Float32Array(vertices.length * 3);\n                vertices.forEach(function (vertex, i) {\n                    vertex.toArray(positions, i * 3);\n                });\n                var geometry = new THREE.BufferGeometry();\n                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n                return geometry;\n            }\n        };\n        function AnimationParser() {\n        }\n        AnimationParser.prototype = {\n            constructor: AnimationParser,\n            parse: function () {\n                var animationClips = [];\n                var rawClips = this.parseClips();\n                if (rawClips !== undefined) {\n                    for (var key in rawClips) {\n                        var rawClip = rawClips[key];\n                        var clip = this.addClip(rawClip);\n                        animationClips.push(clip);\n                    }\n                }\n                return animationClips;\n            },\n            parseClips: function () {\n                if (fbxTree.Objects.AnimationCurve === undefined)\n                    return undefined;\n                var curveNodesMap = this.parseAnimationCurveNodes();\n                this.parseAnimationCurves(curveNodesMap);\n                var layersMap = this.parseAnimationLayers(curveNodesMap);\n                var rawClips = this.parseAnimStacks(layersMap);\n                return rawClips;\n            },\n            parseAnimationCurveNodes: function () {\n                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n                var curveNodesMap = new Map();\n                for (var nodeID in rawCurveNodes) {\n                    var rawCurveNode = rawCurveNodes[nodeID];\n                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n                        var curveNode = {\n                            id: rawCurveNode.id,\n                            attr: rawCurveNode.attrName,\n                            curves: {}\n                        };\n                        curveNodesMap.set(curveNode.id, curveNode);\n                    }\n                }\n                return curveNodesMap;\n            },\n            parseAnimationCurves: function (curveNodesMap) {\n                var rawCurves = fbxTree.Objects.AnimationCurve;\n                for (var nodeID in rawCurves) {\n                    var animationCurve = {\n                        id: rawCurves[nodeID].id,\n                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n                        values: rawCurves[nodeID].KeyValueFloat.a\n                    };\n                    var relationships = connections.get(animationCurve.id);\n                    if (relationships !== undefined) {\n                        var animationCurveID = relationships.parents[0].ID;\n                        var animationCurveRelationship = relationships.parents[0].relationship;\n                        if (animationCurveRelationship.match(/X/)) {\n                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Y/)) {\n                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/Z/)) {\n                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n                        }\n                    }\n                }\n            },\n            parseAnimationLayers: function (curveNodesMap) {\n                var rawLayers = fbxTree.Objects.AnimationLayer;\n                var layersMap = new Map();\n                for (var nodeID in rawLayers) {\n                    var layerCurveNodes = [];\n                    var connection = connections.get(parseInt(nodeID));\n                    if (connection !== undefined) {\n                        var children = connection.children;\n                        children.forEach(function (child, i) {\n                            if (curveNodesMap.has(child.ID)) {\n                                var curveNode = curveNodesMap.get(child.ID);\n                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        if (modelID !== undefined) {\n                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                                            var node = {\n                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                                ID: rawModel.id,\n                                                initialPosition: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialRotation: [\n                                                    0,\n                                                    0,\n                                                    0\n                                                ],\n                                                initialScale: [\n                                                    1,\n                                                    1,\n                                                    1\n                                                ]\n                                            };\n                                            sceneGraph.traverse(function (child) {\n                                                if (child.ID === rawModel.id) {\n                                                    node.transform = child.matrix;\n                                                    if (child.userData.transformData)\n                                                        node.eulerOrder = child.userData.transformData.eulerOrder;\n                                                }\n                                            });\n                                            if (!node.transform)\n                                                node.transform = new THREE.Matrix4();\n                                            if ('PreRotation' in rawModel)\n                                                node.preRotation = rawModel.PreRotation.value;\n                                            if ('PostRotation' in rawModel)\n                                                node.postRotation = rawModel.PostRotation.value;\n                                            layerCurveNodes[i] = node;\n                                        }\n                                    }\n                                    if (layerCurveNodes[i])\n                                        layerCurveNodes[i][curveNode.attr] = curveNode;\n                                } else if (curveNode.curves.morph !== undefined) {\n                                    if (layerCurveNodes[i] === undefined) {\n                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                                            return parent.relationship !== undefined;\n                                        })[0].ID;\n                                        var morpherID = connections.get(deformerID).parents[0].ID;\n                                        var geoID = connections.get(morpherID).parents[0].ID;\n                                        var modelID = connections.get(geoID).parents[0].ID;\n                                        var rawModel = fbxTree.Objects.Model[modelID];\n                                        var node = {\n                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                                        };\n                                        layerCurveNodes[i] = node;\n                                    }\n                                    layerCurveNodes[i][curveNode.attr] = curveNode;\n                                }\n                            }\n                        });\n                        layersMap.set(parseInt(nodeID), layerCurveNodes);\n                    }\n                }\n                return layersMap;\n            },\n            parseAnimStacks: function (layersMap) {\n                var rawStacks = fbxTree.Objects.AnimationStack;\n                var rawClips = {};\n                for (var nodeID in rawStacks) {\n                    var children = connections.get(parseInt(nodeID)).children;\n                    if (children.length > 1) {\n                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n                    }\n                    var layer = layersMap.get(children[0].ID);\n                    rawClips[nodeID] = {\n                        name: rawStacks[nodeID].attrName,\n                        layer: layer\n                    };\n                }\n                return rawClips;\n            },\n            addClip: function (rawClip) {\n                var tracks = [];\n                var self = this;\n                rawClip.layer.forEach(function (rawTracks) {\n                    tracks = tracks.concat(self.generateTracks(rawTracks));\n                });\n                return new THREE.AnimationClip(rawClip.name, -1, tracks);\n            },\n            generateTracks: function (rawTracks) {\n                var tracks = [];\n                var initialPosition = new THREE.Vector3();\n                var initialRotation = new THREE.Quaternion();\n                var initialScale = new THREE.Vector3();\n                if (rawTracks.transform)\n                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n                initialPosition = initialPosition.toArray();\n                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n                initialScale = initialScale.toArray();\n                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n                    if (positionTrack !== undefined)\n                        tracks.push(positionTrack);\n                }\n                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n                    if (rotationTrack !== undefined)\n                        tracks.push(rotationTrack);\n                }\n                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n                    if (scaleTrack !== undefined)\n                        tracks.push(scaleTrack);\n                }\n                if (rawTracks.DeformPercent !== undefined) {\n                    var morphTrack = this.generateMorphTrack(rawTracks);\n                    if (morphTrack !== undefined)\n                        tracks.push(morphTrack);\n                }\n                return tracks;\n            },\n            generateVectorTrack: function (modelName, curves, initialValue, type) {\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n            },\n            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n                if (curves.x !== undefined) {\n                    this.interpolateRotations(curves.x);\n                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.y !== undefined) {\n                    this.interpolateRotations(curves.y);\n                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\n                }\n                if (curves.z !== undefined) {\n                    this.interpolateRotations(curves.z);\n                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\n                }\n                var times = this.getTimesForAllAxes(curves);\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\n                if (preRotation !== undefined) {\n                    preRotation = preRotation.map(THREE.MathUtils.degToRad);\n                    preRotation.push(eulerOrder);\n                    preRotation = new THREE.Euler().fromArray(preRotation);\n                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);\n                }\n                if (postRotation !== undefined) {\n                    postRotation = postRotation.map(THREE.MathUtils.degToRad);\n                    postRotation.push(eulerOrder);\n                    postRotation = new THREE.Euler().fromArray(postRotation);\n                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();\n                }\n                var quaternion = new THREE.Quaternion();\n                var euler = new THREE.Euler();\n                var quaternionValues = [];\n                for (var i = 0; i < values.length; i += 3) {\n                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n                    quaternion.setFromEuler(euler);\n                    if (preRotation !== undefined)\n                        quaternion.premultiply(preRotation);\n                    if (postRotation !== undefined)\n                        quaternion.multiply(postRotation);\n                    quaternion.toArray(quaternionValues, i / 3 * 4);\n                }\n                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n            },\n            generateMorphTrack: function (rawTracks) {\n                var curves = rawTracks.DeformPercent.curves.morph;\n                var values = curves.values.map(function (val) {\n                    return val / 100;\n                });\n                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n            },\n            getTimesForAllAxes: function (curves) {\n                var times = [];\n                if (curves.x !== undefined)\n                    times = times.concat(curves.x.times);\n                if (curves.y !== undefined)\n                    times = times.concat(curves.y.times);\n                if (curves.z !== undefined)\n                    times = times.concat(curves.z.times);\n                times = times.sort(function (a, b) {\n                    return a - b;\n                }).filter(function (elem, index, array) {\n                    return array.indexOf(elem) == index;\n                });\n                return times;\n            },\n            getKeyframeTrackValues: function (times, curves, initialValue) {\n                var prevValue = initialValue;\n                var values = [];\n                var xIndex = -1;\n                var yIndex = -1;\n                var zIndex = -1;\n                times.forEach(function (time) {\n                    if (curves.x)\n                        xIndex = curves.x.times.indexOf(time);\n                    if (curves.y)\n                        yIndex = curves.y.times.indexOf(time);\n                    if (curves.z)\n                        zIndex = curves.z.times.indexOf(time);\n                    if (xIndex !== -1) {\n                        var xValue = curves.x.values[xIndex];\n                        values.push(xValue);\n                        prevValue[0] = xValue;\n                    } else {\n                        values.push(prevValue[0]);\n                    }\n                    if (yIndex !== -1) {\n                        var yValue = curves.y.values[yIndex];\n                        values.push(yValue);\n                        prevValue[1] = yValue;\n                    } else {\n                        values.push(prevValue[1]);\n                    }\n                    if (zIndex !== -1) {\n                        var zValue = curves.z.values[zIndex];\n                        values.push(zValue);\n                        prevValue[2] = zValue;\n                    } else {\n                        values.push(prevValue[2]);\n                    }\n                });\n                return values;\n            },\n            interpolateRotations: function (curve) {\n                for (var i = 1; i < curve.values.length; i++) {\n                    var initialValue = curve.values[i - 1];\n                    var valuesSpan = curve.values[i] - initialValue;\n                    var absoluteSpan = Math.abs(valuesSpan);\n                    if (absoluteSpan >= 180) {\n                        var numSubIntervals = absoluteSpan / 180;\n                        var step = valuesSpan / numSubIntervals;\n                        var nextValue = initialValue + step;\n                        var initialTime = curve.times[i - 1];\n                        var timeSpan = curve.times[i] - initialTime;\n                        var interval = timeSpan / numSubIntervals;\n                        var nextTime = initialTime + interval;\n                        var interpolatedTimes = [];\n                        var interpolatedValues = [];\n                        while (nextTime < curve.times[i]) {\n                            interpolatedTimes.push(nextTime);\n                            nextTime += interval;\n                            interpolatedValues.push(nextValue);\n                            nextValue += step;\n                        }\n                        curve.times = inject(curve.times, i, interpolatedTimes);\n                        curve.values = inject(curve.values, i, interpolatedValues);\n                    }\n                }\n            }\n        };\n        function TextParser() {\n        }\n        TextParser.prototype = {\n            constructor: TextParser,\n            getPrevNode: function () {\n                return this.nodeStack[this.currentIndent - 2];\n            },\n            getCurrentNode: function () {\n                return this.nodeStack[this.currentIndent - 1];\n            },\n            getCurrentProp: function () {\n                return this.currentProp;\n            },\n            pushStack: function (node) {\n                this.nodeStack.push(node);\n                this.currentIndent += 1;\n            },\n            popStack: function () {\n                this.nodeStack.pop();\n                this.currentIndent -= 1;\n            },\n            setCurrentProp: function (val, name) {\n                this.currentProp = val;\n                this.currentPropName = name;\n            },\n            parse: function (text) {\n                this.currentIndent = 0;\n                this.allNodes = new FBXTree();\n                this.nodeStack = [];\n                this.currentProp = [];\n                this.currentPropName = '';\n                var self = this;\n                var split = text.split(/[\\r\\n]+/);\n                split.forEach(function (line, i) {\n                    var matchComment = line.match(/^[\\s\\t]*;/);\n                    var matchEmpty = line.match(/^[\\s\\t]*$/);\n                    if (matchComment || matchEmpty)\n                        return;\n                    var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n                    var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n                    var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n                    if (matchBeginning) {\n                        self.parseNodeBegin(line, matchBeginning);\n                    } else if (matchProperty) {\n                        self.parseNodeProperty(line, matchProperty, split[++i]);\n                    } else if (matchEnd) {\n                        self.popStack();\n                    } else if (line.match(/^[^\\s\\t}]/)) {\n                        self.parseNodePropertyContinued(line);\n                    }\n                });\n                return this.allNodes;\n            },\n            parseNodeBegin: function (line, property) {\n                var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n                var nodeAttrs = property[2].split(',').map(function (attr) {\n                    return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n                });\n                var node = { name: nodeName };\n                var attrs = this.parseNodeAttr(nodeAttrs);\n                var currentNode = this.getCurrentNode();\n                if (this.currentIndent === 0) {\n                    this.allNodes.add(nodeName, node);\n                } else {\n                    if (nodeName in currentNode) {\n                        if (nodeName === 'PoseNode') {\n                            currentNode.PoseNode.push(node);\n                        } else if (currentNode[nodeName].id !== undefined) {\n                            currentNode[nodeName] = {};\n                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n                        }\n                        if (attrs.id !== '')\n                            currentNode[nodeName][attrs.id] = node;\n                    } else if (typeof attrs.id === 'number') {\n                        currentNode[nodeName] = {};\n                        currentNode[nodeName][attrs.id] = node;\n                    } else if (nodeName !== 'Properties70') {\n                        if (nodeName === 'PoseNode')\n                            currentNode[nodeName] = [node];\n                        else\n                            currentNode[nodeName] = node;\n                    }\n                }\n                if (typeof attrs.id === 'number')\n                    node.id = attrs.id;\n                if (attrs.name !== '')\n                    node.attrName = attrs.name;\n                if (attrs.type !== '')\n                    node.attrType = attrs.type;\n                this.pushStack(node);\n            },\n            parseNodeAttr: function (attrs) {\n                var id = attrs[0];\n                if (attrs[0] !== '') {\n                    id = parseInt(attrs[0]);\n                    if (isNaN(id)) {\n                        id = attrs[0];\n                    }\n                }\n                var name = '', type = '';\n                if (attrs.length > 1) {\n                    name = attrs[1].replace(/^(\\w+)::/, '');\n                    type = attrs[2];\n                }\n                return {\n                    id: id,\n                    name: name,\n                    type: type\n                };\n            },\n            parseNodeProperty: function (line, property, contentLine) {\n                var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n                var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n                if (propName === 'Content' && propValue === ',') {\n                    propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n                }\n                var currentNode = this.getCurrentNode();\n                var parentName = currentNode.name;\n                if (parentName === 'Properties70') {\n                    this.parseNodeSpecialProperty(line, propName, propValue);\n                    return;\n                }\n                if (propName === 'C') {\n                    var connProps = propValue.split(',').slice(1);\n                    var from = parseInt(connProps[0]);\n                    var to = parseInt(connProps[1]);\n                    var rest = propValue.split(',').slice(3);\n                    rest = rest.map(function (elem) {\n                        return elem.trim().replace(/^\"/, '');\n                    });\n                    propName = 'connections';\n                    propValue = [\n                        from,\n                        to\n                    ];\n                    append(propValue, rest);\n                    if (currentNode[propName] === undefined) {\n                        currentNode[propName] = [];\n                    }\n                }\n                if (propName === 'Node')\n                    currentNode.id = propValue;\n                if (propName in currentNode && Array.isArray(currentNode[propName])) {\n                    currentNode[propName].push(propValue);\n                } else {\n                    if (propName !== 'a')\n                        currentNode[propName] = propValue;\n                    else\n                        currentNode.a = propValue;\n                }\n                this.setCurrentProp(currentNode, propName);\n                if (propName === 'a' && propValue.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(propValue);\n                }\n            },\n            parseNodePropertyContinued: function (line) {\n                var currentNode = this.getCurrentNode();\n                currentNode.a += line;\n                if (line.slice(-1) !== ',') {\n                    currentNode.a = parseNumberArray(currentNode.a);\n                }\n            },\n            parseNodeSpecialProperty: function (line, propName, propValue) {\n                var props = propValue.split('\",').map(function (prop) {\n                    return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n                });\n                var innerPropName = props[0];\n                var innerPropType1 = props[1];\n                var innerPropType2 = props[2];\n                var innerPropFlag = props[3];\n                var innerPropValue = props[4];\n                switch (innerPropType1) {\n                case 'int':\n                case 'enum':\n                case 'bool':\n                case 'ULongLong':\n                case 'double':\n                case 'Number':\n                case 'FieldOfView':\n                    innerPropValue = parseFloat(innerPropValue);\n                    break;\n                case 'Color':\n                case 'ColorRGB':\n                case 'Vector3D':\n                case 'Lcl_Translation':\n                case 'Lcl_Rotation':\n                case 'Lcl_Scaling':\n                    innerPropValue = parseNumberArray(innerPropValue);\n                    break;\n                }\n                this.getPrevNode()[innerPropName] = {\n                    'type': innerPropType1,\n                    'type2': innerPropType2,\n                    'flag': innerPropFlag,\n                    'value': innerPropValue\n                };\n                this.setCurrentProp(this.getPrevNode(), innerPropName);\n            }\n        };\n        function BinaryParser() {\n        }\n        BinaryParser.prototype = {\n            constructor: BinaryParser,\n            parse: function (buffer) {\n                var reader = new BinaryReader(buffer);\n                reader.skip(23);\n                var version = reader.getUint32();\n                console.log('THREE.FBXLoader: FBX binary version: ' + version);\n                var allNodes = new FBXTree();\n                while (!this.endOfContent(reader)) {\n                    var node = this.parseNode(reader, version);\n                    if (node !== null)\n                        allNodes.add(node.name, node);\n                }\n                return allNodes;\n            },\n            endOfContent: function (reader) {\n                if (reader.size() % 16 === 0) {\n                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n                } else {\n                    return reader.getOffset() + 160 + 16 >= reader.size();\n                }\n            },\n            parseNode: function (reader, version) {\n                var node = {};\n                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n                var nameLen = reader.getUint8();\n                var name = reader.getString(nameLen);\n                if (endOffset === 0)\n                    return null;\n                var propertyList = [];\n                for (var i = 0; i < numProperties; i++) {\n                    propertyList.push(this.parseProperty(reader));\n                }\n                var id = propertyList.length > 0 ? propertyList[0] : '';\n                var attrName = propertyList.length > 1 ? propertyList[1] : '';\n                var attrType = propertyList.length > 2 ? propertyList[2] : '';\n                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n                while (endOffset > reader.getOffset()) {\n                    var subNode = this.parseNode(reader, version);\n                    if (subNode !== null)\n                        this.parseSubNode(name, node, subNode);\n                }\n                node.propertyList = propertyList;\n                if (typeof id === 'number')\n                    node.id = id;\n                if (attrName !== '')\n                    node.attrName = attrName;\n                if (attrType !== '')\n                    node.attrType = attrType;\n                if (name !== '')\n                    node.name = name;\n                return node;\n            },\n            parseSubNode: function (name, node, subNode) {\n                if (subNode.singleProperty === true) {\n                    var value = subNode.propertyList[0];\n                    if (Array.isArray(value)) {\n                        node[subNode.name] = subNode;\n                        subNode.a = value;\n                    } else {\n                        node[subNode.name] = value;\n                    }\n                } else if (name === 'Connections' && subNode.name === 'C') {\n                    var array = [];\n                    subNode.propertyList.forEach(function (property, i) {\n                        if (i !== 0)\n                            array.push(property);\n                    });\n                    if (node.connections === undefined) {\n                        node.connections = [];\n                    }\n                    node.connections.push(array);\n                } else if (subNode.name === 'Properties70') {\n                    var keys = Object.keys(subNode);\n                    keys.forEach(function (key) {\n                        node[key] = subNode[key];\n                    });\n                } else if (name === 'Properties70' && subNode.name === 'P') {\n                    var innerPropName = subNode.propertyList[0];\n                    var innerPropType1 = subNode.propertyList[1];\n                    var innerPropType2 = subNode.propertyList[2];\n                    var innerPropFlag = subNode.propertyList[3];\n                    var innerPropValue;\n                    if (innerPropName.indexOf('Lcl ') === 0)\n                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1.indexOf('Lcl ') === 0)\n                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n                        innerPropValue = [\n                            subNode.propertyList[4],\n                            subNode.propertyList[5],\n                            subNode.propertyList[6]\n                        ];\n                    } else {\n                        innerPropValue = subNode.propertyList[4];\n                    }\n                    node[innerPropName] = {\n                        'type': innerPropType1,\n                        'type2': innerPropType2,\n                        'flag': innerPropFlag,\n                        'value': innerPropValue\n                    };\n                } else if (node[subNode.name] === undefined) {\n                    if (typeof subNode.id === 'number') {\n                        node[subNode.name] = {};\n                        node[subNode.name][subNode.id] = subNode;\n                    } else {\n                        node[subNode.name] = subNode;\n                    }\n                } else {\n                    if (subNode.name === 'PoseNode') {\n                        if (!Array.isArray(node[subNode.name])) {\n                            node[subNode.name] = [node[subNode.name]];\n                        }\n                        node[subNode.name].push(subNode);\n                    } else if (node[subNode.name][subNode.id] === undefined) {\n                        node[subNode.name][subNode.id] = subNode;\n                    }\n                }\n            },\n            parseProperty: function (reader) {\n                var type = reader.getString(1);\n                switch (type) {\n                case 'C':\n                    return reader.getBoolean();\n                case 'D':\n                    return reader.getFloat64();\n                case 'F':\n                    return reader.getFloat32();\n                case 'I':\n                    return reader.getInt32();\n                case 'L':\n                    return reader.getInt64();\n                case 'R':\n                    var length = reader.getUint32();\n                    return reader.getArrayBuffer(length);\n                case 'S':\n                    var length = reader.getUint32();\n                    return reader.getString(length);\n                case 'Y':\n                    return reader.getInt16();\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'f':\n                case 'i':\n                case 'l':\n                    var arrayLength = reader.getUint32();\n                    var encoding = reader.getUint32();\n                    var compressedLength = reader.getUint32();\n                    if (encoding === 0) {\n                        switch (type) {\n                        case 'b':\n                        case 'c':\n                            return reader.getBooleanArray(arrayLength);\n                        case 'd':\n                            return reader.getFloat64Array(arrayLength);\n                        case 'f':\n                            return reader.getFloat32Array(arrayLength);\n                        case 'i':\n                            return reader.getInt32Array(arrayLength);\n                        case 'l':\n                            return reader.getInt64Array(arrayLength);\n                        }\n                    }\n                    //if (typeof b.Zlib === 'undefined') {\n                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');\n                    //}\n                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n                    var reader2 = new BinaryReader(inflate.decompress().buffer);\n                    switch (type) {\n                    case 'b':\n                    case 'c':\n                        return reader2.getBooleanArray(arrayLength);\n                    case 'd':\n                        return reader2.getFloat64Array(arrayLength);\n                    case 'f':\n                        return reader2.getFloat32Array(arrayLength);\n                    case 'i':\n                        return reader2.getInt32Array(arrayLength);\n                    case 'l':\n                        return reader2.getInt64Array(arrayLength);\n                    }\n                default:\n                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n                }\n            }\n        };\n        function BinaryReader(buffer, littleEndian) {\n            this.dv = new DataView(buffer);\n            this.offset = 0;\n            this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n        }\n        BinaryReader.prototype = {\n            constructor: BinaryReader,\n            getOffset: function () {\n                return this.offset;\n            },\n            size: function () {\n                return this.dv.buffer.byteLength;\n            },\n            skip: function (length) {\n                this.offset += length;\n            },\n            getBoolean: function () {\n                return (this.getUint8() & 1) === 1;\n            },\n            getBooleanArray: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getBoolean());\n                }\n                return a;\n            },\n            getUint8: function () {\n                var value = this.dv.getUint8(this.offset);\n                this.offset += 1;\n                return value;\n            },\n            getInt16: function () {\n                var value = this.dv.getInt16(this.offset, this.littleEndian);\n                this.offset += 2;\n                return value;\n            },\n            getInt32: function () {\n                var value = this.dv.getInt32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt32());\n                }\n                return a;\n            },\n            getUint32: function () {\n                var value = this.dv.getUint32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getInt64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                if (high & 2147483648) {\n                    high = ~high & 4294967295;\n                    low = ~low & 4294967295;\n                    if (low === 4294967295)\n                        high = high + 1 & 4294967295;\n                    low = low + 1 & 4294967295;\n                    return -(high * 4294967296 + low);\n                }\n                return high * 4294967296 + low;\n            },\n            getInt64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getInt64());\n                }\n                return a;\n            },\n            getUint64: function () {\n                var low, high;\n                if (this.littleEndian) {\n                    low = this.getUint32();\n                    high = this.getUint32();\n                } else {\n                    high = this.getUint32();\n                    low = this.getUint32();\n                }\n                return high * 4294967296 + low;\n            },\n            getFloat32: function () {\n                var value = this.dv.getFloat32(this.offset, this.littleEndian);\n                this.offset += 4;\n                return value;\n            },\n            getFloat32Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat32());\n                }\n                return a;\n            },\n            getFloat64: function () {\n                var value = this.dv.getFloat64(this.offset, this.littleEndian);\n                this.offset += 8;\n                return value;\n            },\n            getFloat64Array: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a.push(this.getFloat64());\n                }\n                return a;\n            },\n            getArrayBuffer: function (size) {\n                var value = this.dv.buffer.slice(this.offset, this.offset + size);\n                this.offset += size;\n                return value;\n            },\n            getString: function (size) {\n                var a = [];\n                for (var i = 0; i < size; i++) {\n                    a[i] = this.getUint8();\n                }\n                var nullByte = a.indexOf(0);\n                if (nullByte >= 0)\n                    a = a.slice(0, nullByte);\n                return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n            }\n        };\n        function FBXTree() {\n        }\n        FBXTree.prototype = {\n            constructor: FBXTree,\n            add: function (key, val) {\n                this[key] = val;\n            }\n        };\n        function isFbxFormatBinary(buffer) {\n            var CORRECT = 'Kaydara FBX Binary  \\0';\n            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n        }\n        function isFbxFormatASCII(text) {\n            var CORRECT = [\n                'K',\n                'a',\n                'y',\n                'd',\n                'a',\n                'r',\n                'a',\n                '\\\\',\n                'F',\n                'B',\n                'X',\n                '\\\\',\n                'B',\n                'i',\n                'n',\n                'a',\n                'r',\n                'y',\n                '\\\\',\n                '\\\\'\n            ];\n            var cursor = 0;\n            function read(offset) {\n                var result = text[offset - 1];\n                text = text.slice(cursor + offset);\n                cursor++;\n                return result;\n            }\n            for (var i = 0; i < CORRECT.length; ++i) {\n                var num = read(1);\n                if (num === CORRECT[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function getFbxVersion(text) {\n            var versionRegExp = /FBXVersion: (\\d+)/;\n            var match = text.match(versionRegExp);\n            if (match) {\n                var version = parseInt(match[1]);\n                return version;\n            }\n            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n        }\n        function convertFBXTimeToSeconds(time) {\n            return time / 46186158000;\n        }\n        var dataArray = [];\n        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n            var index;\n            switch (infoObject.mappingType) {\n            case 'ByPolygonVertex':\n                index = polygonVertexIndex;\n                break;\n            case 'ByPolygon':\n                index = polygonIndex;\n                break;\n            case 'ByVertice':\n                index = vertexIndex;\n                break;\n            case 'AllSame':\n                index = infoObject.indices[0];\n                break;\n            default:\n                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n            }\n            if (infoObject.referenceType === 'IndexToDirect')\n                index = infoObject.indices[index];\n            var from = index * infoObject.dataSize;\n            var to = from + infoObject.dataSize;\n            return slice(dataArray, infoObject.buffer, from, to);\n        }\n        var tempEuler = new THREE.Euler();\n        var tempVec = new THREE.Vector3();\n        function generateTransform(transformData) {\n            var lTranslationM = new THREE.Matrix4();\n            var lPreRotationM = new THREE.Matrix4();\n            var lRotationM = new THREE.Matrix4();\n            var lPostRotationM = new THREE.Matrix4();\n            var lScalingM = new THREE.Matrix4();\n            var lScalingPivotM = new THREE.Matrix4();\n            var lScalingOffsetM = new THREE.Matrix4();\n            var lRotationOffsetM = new THREE.Matrix4();\n            var lRotationPivotM = new THREE.Matrix4();\n            var lParentGX = new THREE.Matrix4();\n            var lGlobalT = new THREE.Matrix4();\n            var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n            if (transformData.translation)\n                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n            if (transformData.preRotation) {\n                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.rotation) {\n                var array = transformData.rotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.postRotation) {\n                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);\n                array.push(transformData.eulerOrder);\n                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n            }\n            if (transformData.scale)\n                lScalingM.scale(tempVec.fromArray(transformData.scale));\n            if (transformData.scalingOffset)\n                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n            if (transformData.scalingPivot)\n                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n            if (transformData.rotationOffset)\n                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n            if (transformData.rotationPivot)\n                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n            if (transformData.parentMatrixWorld)\n                lParentGX = transformData.parentMatrixWorld;\n            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\n            var lParentGRM = new THREE.Matrix4();\n            lParentGX.extractRotation(lParentGRM);\n            var lParentTM = new THREE.Matrix4();\n            var lLSM;\n            var lParentGSM;\n            var lParentGRSM;\n            lParentTM.copyPosition(lParentGX);\n            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\n            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\n            lLSM = lScalingM;\n            var lGlobalRS;\n            if (inheritType === 0) {\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n            } else if (inheritType === 1) {\n                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n            } else {\n                var lParentLSM = new THREE.Matrix4().copy(lScalingM);\n                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n            }\n            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));\n            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\n            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);\n            lGlobalT.copyPosition(lGlobalTranslation);\n            lTransform = lGlobalT.multiply(lGlobalRS);\n            return lTransform;\n        }\n        function getEulerOrder(order) {\n            order = order || 0;\n            var enums = [\n                'ZYX',\n                'YZX',\n                'XZY',\n                'ZXY',\n                'YXZ',\n                'XYZ'\n            ];\n            if (order === 6) {\n                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n                return enums[0];\n            }\n            return enums[order];\n        }\n        function parseNumberArray(value) {\n            var array = value.split(',').map(function (val) {\n                return parseFloat(val);\n            });\n            return array;\n        }\n        function convertArrayBufferToString(buffer, from, to) {\n            if (from === undefined)\n                from = 0;\n            if (to === undefined)\n                to = buffer.byteLength;\n            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n        }\n        function append(a, b) {\n            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n                a[j] = b[i];\n            }\n        }\n        function slice(a, b, from, to) {\n            for (var i = from, j = 0; i < to; i++, j++) {\n                a[j] = b[i];\n            }\n            return a;\n        }\n        function inject(a1, index, a2) {\n            return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n        }\n        return FBXLoader;\n    }();\n    return FBXLoader;\n});"]}