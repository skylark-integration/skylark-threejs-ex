{"version":3,"sources":["loaders/FBXLoader.js"],"names":["define","THREE","threex","Inflate","NURBSCurve","FBXLoader","fbxTree","connections","sceneGraph","manager","Loader","call","this","FBXTreeParser","textureLoader","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","buffer","littleEndian","dv","DataView","offset","undefined","FBXTree","getFbxVersion","text","match","parseInt","Error","convertFBXTimeToSeconds","time","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","self","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","parse","error","setTimeout","itemError","FBXBuffer","CORRECT","byteLength","length","convertArrayBufferToString","FBXText","cursor","read","result","slice","i","num","isFbxFormatASCII","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","parseScene","connectionMap","Map","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","base64Content","image","parseImage","filename","split","pop","type","content","fileName","extension","lastIndexOf","toLowerCase","getHandler","console","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","indexOf","FileName","Texture","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrixWorld","matrix","transform","generateTransform","applyMatrix4","animations","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","matrixWorld","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","MathUtils","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","c","order","Order","isNaN","startKnot","endKnot","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","Form","vertices","getPoints","positions","toArray","BufferAttribute","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","times","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","modelName","rawModel","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","curve","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","connProps","from","to","rest","append","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","skip","version","getUint32","log","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","decompress","low","high","nullByte","decodeText","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","copyPosition","getInverse","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2","loaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,uBACA,wBACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAY,WACZ,IAAIC,EACAC,EACAC,EACJ,SAASH,EAAUI,GACfR,EAAMS,OAAOC,KAAKC,KAAMH,GAuC5B,SAASI,EAAcC,EAAeL,GAClCG,KAAKE,cAAgBA,EACrBF,KAAKH,QAAUA,EA2wBnB,SAASM,KA8eT,SAASC,KA6UT,SAASC,KAuMT,SAASC,KAgMT,SAASC,EAAaC,EAAQC,GAC1BT,KAAKU,GAAK,IAAIC,SAASH,GACvBR,KAAKY,OAAS,EACdZ,KAAKS,kBAAgCI,IAAjBJ,GAA6BA,EA+HrD,SAASK,KAkDT,SAASC,EAAcC,GACnB,IACIC,EAAQD,EAAKC,MADG,qBAEpB,GAAIA,EAEA,OADcC,SAASD,EAAM,IAGjC,MAAM,IAAIE,MAAM,uEAEpB,SAASC,EAAwBC,GAC7B,OAAOA,EAAO,WAlrElB5B,EAAU6B,UAAYC,OAAOC,OAAOD,OAAOE,OAAOpC,EAAMS,OAAOwB,YAC3DI,YAAajC,EACbkC,KAAM,SAAUC,EAAKC,EAAQC,EAAYC,GACrC,IAAIC,EAAOhC,KACPiC,EAAqB,KAAdD,EAAKC,KAAc5C,EAAM6C,YAAYC,eAAeP,GAAOI,EAAKC,KACvEG,EAAS,IAAI/C,EAAMgD,WAAWrC,KAAKH,SACvCuC,EAAOE,QAAQN,EAAKC,MACpBG,EAAOG,gBAAgB,eACvBH,EAAOT,KAAKC,EAAK,SAAUpB,GACvB,IACIqB,EAAOG,EAAKQ,MAAMhC,EAAQyB,IAC5B,MAAOQ,GACLC,WAAW,WACHX,GACAA,EAAQU,GACZT,EAAKnC,QAAQ8C,UAAUf,IACxB,KAERE,EAAYC,IAEnBS,MAAO,SAAUI,EAAWX,GACxB,GA0mEAY,EAAU,0BADSrC,EAzmEGoC,GA2mEZE,YAAcD,EAAQE,QAAUF,IAAYG,EAA2BxC,EAAQ,EAAGqC,EAAQE,QA1mEhGrD,GAAU,IAAIY,GAAekC,MAAMI,OAChC,CACH,IAAIK,EAAUD,EAA2BJ,GACzC,IAymEZ,SAA0B5B,GACtB,IAAI6B,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,MAEAK,EAAS,EACb,SAASC,EAAKvC,GACV,IAAIwC,EAASpC,EAAKJ,EAAS,GAG3B,OAFAI,EAAOA,EAAKqC,MAAMH,EAAStC,GAC3BsC,IACOE,EAEX,IAAK,IAAIE,EAAI,EAAGA,EAAIT,EAAQE,SAAUO,EAAG,CACrC,IAAIC,EAAMJ,EAAK,GACf,GAAII,IAAQV,EAAQS,GAChB,OAAO,EAGf,OAAO,EA7oEME,CAAiBP,GAClB,MAAM,IAAI9B,MAAM,oCAEpB,GAAIJ,EAAckC,GAAW,IACzB,MAAM,IAAI9B,MAAM,4DAA8DJ,EAAckC,IAEhGvD,GAAU,IAAIW,GAAamC,MAAMS,GA+lE7C,IAA2BzC,EACnBqC,EA7lEA,OAAO,IAAI5C,EADS,IAAIZ,EAAMoE,cAAczD,KAAKH,SAASyC,QAAQtC,KAAK0D,cAAgBzB,GAAM0B,eAAe3D,KAAK4D,aACzE5D,KAAKH,SAAS2C,MAAM9C,MAOpEO,EAAcqB,WACVI,YAAazB,EACbuC,MAAO,WACH7C,EAAcK,KAAK6D,mBACnB,IAAIC,EAAS9D,KAAK+D,cACdC,EAAWhE,KAAKiE,cAAcH,GAC9BI,EAAYlE,KAAKmE,eAAeH,GAChCI,EAAYpE,KAAKqE,iBACjBC,GAAc,IAAInE,GAAiBqC,MAAM4B,GAE7C,OADApE,KAAKuE,WAAWH,EAAWE,EAAaJ,GACjCtE,GAEXiE,iBAAkB,WACd,IAAIW,EAAgB,IAAIC,IACpB,gBAAiB/E,GACIA,EAAQgF,YAAY/E,YAC1BgF,QAAQ,SAAUC,GAC7B,IAAIC,EAASD,EAAc,GACvBE,EAAOF,EAAc,GACrBG,EAAeH,EAAc,GAC5BJ,EAAcQ,IAAIH,IACnBL,EAAcS,IAAIJ,GACdK,WACAC,cAGR,IAAIC,GACAC,GAAIP,EACJC,aAAcA,GAElBP,EAAcc,IAAIT,GAAQK,QAAQK,KAAKH,GAClCZ,EAAcQ,IAAIF,IACnBN,EAAcS,IAAIH,GACdI,WACAC,cAGR,IAAIK,GACAH,GAAIR,EACJE,aAAcA,GAElBP,EAAcc,IAAIR,GAAMK,SAASI,KAAKC,KAG9C,OAAOhB,GAEXT,YAAa,WACT,IAAID,KACA2B,KACJ,GAAI,UAAW/F,EAAQgG,QAAS,CAC5B,IAAIC,EAAajG,EAAQgG,QAAQE,MACjC,IAAK,IAAIC,KAAUF,EAAY,CAC3B,IAAIG,EAAYH,EAAWE,GAG3B,GADA/B,EADIiC,EAAK7E,SAAS2E,IACLC,EAAUE,kBAAoBF,EAAUG,SACjD,YAAaH,EAAW,CACxB,IAAII,EAAqBJ,EAAUK,mBAAmBC,aAAeN,EAAUK,QAAQrD,WAAa,EAChGuD,EAA6C,iBAAtBP,EAAUK,SAA8C,KAAtBL,EAAUK,QACvE,GAAID,GAAsBG,EAAe,CACrC,IAAIC,EAAQtG,KAAKuG,WAAWZ,EAAWE,IACvCJ,EAAMK,EAAUE,kBAAoBF,EAAUG,UAAYK,KAK1E,IAAK,IAAIP,KAAMjC,EAAQ,CACnB,IAAI0C,EAAW1C,EAAOiC,QACElF,IAApB4E,EAAMe,GACN1C,EAAOiC,GAAMN,EAAMe,GAEnB1C,EAAOiC,GAAMjC,EAAOiC,GAAIU,MAAM,MAAMC,MAE5C,OAAO5C,GAEXyC,WAAY,SAAUT,GAClB,IAGIa,EAHAC,EAAUd,EAAUK,QACpBU,EAAWf,EAAUE,kBAAoBF,EAAUG,SACnDa,EAAYD,EAASxD,MAAMwD,EAASE,YAAY,KAAO,GAAGC,cAE9D,OAAQF,GACR,IAAK,MACDH,EAAO,YACP,MACJ,IAAK,MACL,IAAK,OACDA,EAAO,aACP,MACJ,IAAK,MACDA,EAAO,YACP,MACJ,IAAK,MACDA,EAAO,aACP,MACJ,IAAK,MACuC,OAApC3G,KAAKH,QAAQoH,WAAW,SACxBC,QAAQC,KAAK,6CAA8CN,GAE/DF,EAAO,YACP,MACJ,QAEI,YADAO,QAAQC,KAAK,0BAA4BL,EAAY,uBAGzD,GAAuB,iBAAZF,EACP,MAAO,QAAUD,EAAO,WAAaC,EAErC,IAAIQ,EAAQ,IAAIC,WAAWT,GAC3B,OAAOU,OAAOC,IAAIC,gBAAgB,IAAIC,MAAML,IAAUT,KAAMA,MAGpE1C,cAAe,SAAUH,GACrB,IAAI4D,EAAa,IAAIjD,IACrB,GAAI,YAAa/E,EAAQgG,QAAS,CAC9B,IAAIiC,EAAejI,EAAQgG,QAAQ7E,UACnC,IAAK,IAAIgF,KAAU8B,EAAc,CAC7B,IAAIC,EAAU5H,KAAK6H,aAAaF,EAAa9B,GAAS/B,GACtD4D,EAAWzC,IAAI/D,SAAS2E,GAAS+B,IAGzC,OAAOF,GAEXG,aAAc,SAAUC,EAAahE,GACjC,IAAI8D,EAAU5H,KAAK+H,YAAYD,EAAahE,GAC5C8D,EAAQvC,GAAKyC,EAAY/B,GACzB6B,EAAQI,KAAOF,EAAYG,SAC3B,IAAIC,EAAYJ,EAAYK,UACxBC,EAAYN,EAAYO,UACxBC,OAAuBzH,IAAdqH,EAA0BA,EAAUK,MAAQ,EACrDC,OAAuB3H,IAAduH,EAA0BA,EAAUG,MAAQ,EAGzD,GAFAX,EAAQa,MAAmB,IAAXH,EAAejJ,EAAMqJ,eAAiBrJ,EAAMsJ,oBAC5Df,EAAQgB,MAAmB,IAAXJ,EAAenJ,EAAMqJ,eAAiBrJ,EAAMsJ,oBACxD,YAAab,EAAa,CAC1B,IAAIe,EAASf,EAAYgB,QAAQP,MACjCX,EAAQmB,OAAOC,EAAIH,EAAO,GAC1BjB,EAAQmB,OAAOE,EAAIJ,EAAO,GAE9B,OAAOjB,GAEXG,YAAa,SAAUD,EAAahE,GAChC,IAAI+C,EASAe,EARAsB,EAAclJ,KAAKE,cAAc+B,KACjCkD,EAAWxF,EAAY2F,IAAIwC,EAAY/B,IAAIZ,cAC9BtE,IAAbsE,GAA0BA,EAASpC,OAAS,QAAgClC,IAA3BiD,EAAOqB,EAAS,GAAGE,MAElC,KADlCwB,EAAW/C,EAAOqB,EAAS,GAAGE,KACjB8D,QAAQ,UAAgD,IAA9BtC,EAASsC,QAAQ,UACpDnJ,KAAKE,cAAcoC,aAAQzB,IAInC,IAAIiG,EAAYgB,EAAYsB,SAAS/F,OAAO,GAAG2D,cAC/C,GAAkB,QAAdF,EAAqB,CACrB,IAAI1E,EAASpC,KAAKH,QAAQoH,WAAW,QACtB,OAAX7E,GACA8E,QAAQC,KAAK,oEAAqEW,EAAY9B,kBAC9F4B,EAAU,IAAIvI,EAAMgK,SAEpBzB,EAAUxF,EAAOT,KAAKkF,OAEL,QAAdC,GACPI,QAAQC,KAAK,8EAA+EW,EAAY9B,kBACxG4B,EAAU,IAAIvI,EAAMgK,SAEpBzB,EAAU5H,KAAKE,cAAcyB,KAAKkF,GAGtC,OADA7G,KAAKE,cAAcoC,QAAQ4G,GACpBtB,GAEXzD,eAAgB,SAAUuD,GACtB,IAAI4B,EAAc,IAAI7E,IACtB,GAAI,aAAc/E,EAAQgG,QAAS,CAC/B,IAAI6D,EAAgB7J,EAAQgG,QAAQ8D,SACpC,IAAK,IAAI3D,KAAU0D,EAAe,CAC9B,IAAIE,EAAWzJ,KAAK0J,cAAcH,EAAc1D,GAAS6B,GACxC,OAAb+B,GACAH,EAAYrE,IAAI/D,SAAS2E,GAAS4D,IAG9C,OAAOH,GAEXI,cAAe,SAAUC,EAAcjC,GACnC,IAAIrC,EAAKsE,EAAa5D,GAClBiC,EAAO2B,EAAa1B,SACpBtB,EAAOgD,EAAaC,aAIxB,GAHoB,iBAATjD,IACPA,EAAOA,EAAK4B,QAEX5I,EAAYqF,IAAIK,GACjB,OAAO,KACX,IACIoE,EADAI,EAAa7J,KAAK8J,gBAAgBH,EAAcjC,EAAYrC,GAEhE,OAAQsB,EAAKK,eACb,IAAK,QACDyC,EAAW,IAAIpK,EAAM0K,kBACrB,MACJ,IAAK,UACDN,EAAW,IAAIpK,EAAM2K,oBACrB,MACJ,QACI9C,QAAQC,KAAK,gFAAiFR,GAC9F8C,EAAW,IAAIpK,EAAM0K,kBAKzB,OAFAN,EAASQ,UAAUJ,GACnBJ,EAASzB,KAAOA,EACTyB,GAEXK,gBAAiB,SAAUH,EAAcjC,EAAYrC,GACjD,IAAIwE,KACAF,EAAaO,aACbL,EAAWM,UAAYR,EAAaO,WAAW3B,OAE/CoB,EAAaS,QACbP,EAAWQ,OAAQ,IAAIhL,EAAMiL,OAAQC,UAAUZ,EAAaS,QAAQ7B,OAC7DoB,EAAaa,cAAmD,UAAnCb,EAAaa,aAAa7D,OAC9DkD,EAAWQ,OAAQ,IAAIhL,EAAMiL,OAAQC,UAAUZ,EAAaa,aAAajC,QAEzEoB,EAAac,qBACbZ,EAAWa,kBAAoBf,EAAac,mBAAmBlC,OAE/DoB,EAAagB,SACbd,EAAWe,UAAW,IAAIvL,EAAMiL,OAAQC,UAAUZ,EAAagB,SAASpC,OACjEoB,EAAakB,eAAqD,UAApClB,EAAakB,cAAclE,OAChEkD,EAAWe,UAAW,IAAIvL,EAAMiL,OAAQC,UAAUZ,EAAakB,cAActC,QAE7EoB,EAAamB,iBACbjB,EAAWkB,kBAAoBC,WAAWrB,EAAamB,eAAevC,QAEtEoB,EAAasB,UACbpB,EAAWqB,QAAUF,WAAWrB,EAAasB,QAAQ1C,QAErDsB,EAAWqB,QAAU,IACrBrB,EAAWsB,aAAc,GAEzBxB,EAAayB,mBACbvB,EAAWwB,aAAe1B,EAAayB,iBAAiB7C,OAExDoB,EAAa2B,YACbzB,EAAW0B,UAAY5B,EAAa2B,UAAU/C,OAE9CoB,EAAa6B,SACb3B,EAAW4B,UAAW,IAAIpM,EAAMiL,OAAQC,UAAUZ,EAAa6B,SAASjD,OACjEoB,EAAa+B,eAAqD,UAApC/B,EAAa+B,cAAc/E,OAChEkD,EAAW4B,UAAW,IAAIpM,EAAMiL,OAAQC,UAAUZ,EAAa+B,cAAcnD,QAEjF,IAAIvG,EAAOhC,KAgDX,OA/CAL,EAAY2F,IAAID,GAAIF,SAASR,QAAQ,SAAUgH,GAC3C,IAAIhF,EAAOgF,EAAM5G,aACjB,OAAQ4B,GACR,IAAK,OACDkD,EAAW+B,QAAU5J,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IACvD,MACJ,IAAK,kBACDwE,EAAWiC,MAAQ9J,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IACrD,MACJ,IAAK,eACL,IAAK,qBACDwE,EAAWkC,IAAM/J,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IACnDwE,EAAWkC,IAAIC,SAAW3M,EAAM4M,aAChC,MACJ,IAAK,oBACDpC,EAAWqC,gBAAkBlK,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IAC/D,MACJ,IAAK,gBACDwE,EAAWsC,YAAcnK,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IAC3DwE,EAAWsC,YAAYH,SAAW3M,EAAM4M,aACxC,MACJ,IAAK,YACL,IAAK,sBACDpC,EAAWuC,UAAYpK,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IACzD,MACJ,IAAK,kBACDwE,EAAWwC,OAASrK,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IACtDwE,EAAWwC,OAAOC,QAAUjN,EAAMkN,iCAClC1C,EAAWwC,OAAOL,SAAW3M,EAAM4M,aACnC,MACJ,IAAK,gBACDpC,EAAW2C,YAAcxK,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IAC3DwE,EAAW2C,YAAYR,SAAW3M,EAAM4M,aACxC,MACJ,IAAK,mBACDpC,EAAW4C,SAAWzK,EAAK6J,WAAWnE,EAAYiE,EAAMtG,IACxDwE,EAAWsB,aAAc,EACzB,MACJ,IAAK,eACL,IAAK,oBACL,IAAK,iBACL,IAAK,0BACL,QACIjE,QAAQC,KAAK,0EAA2ER,MAIzFkD,GAEXgC,WAAY,SAAUnE,EAAY3B,GAK9B,MAJI,mBAAoBrG,EAAQgG,SAAWK,KAAMrG,EAAQgG,QAAQgH,iBAC7DxF,QAAQC,KAAK,oGACbpB,EAAKpG,EAAY2F,IAAIS,GAAIZ,SAAS,GAAGE,IAElCqC,EAAWpC,IAAIS,IAE1B1B,eAAgB,WACZ,IAAIsI,KACAC,KACJ,GAAI,aAAclN,EAAQgG,QAAS,CAC/B,IAAImH,EAAgBnN,EAAQgG,QAAQoH,SACpC,IAAK,IAAIjH,KAAUgH,EAAe,CAC9B,IAAIE,EAAeF,EAAchH,GAC7BmH,EAAgBrN,EAAY2F,IAAIpE,SAAS2E,IAC7C,GAA8B,SAA1BkH,EAAaE,SAAqB,CAClC,IAAIC,EAAWlN,KAAKmN,cAAcH,EAAeH,GACjDK,EAAS7H,GAAKQ,EACVmH,EAAc9H,QAAQnC,OAAS,GAC/BmE,QAAQC,KAAK,kFACjB+F,EAASE,WAAaJ,EAAc9H,QAAQ,GAAGG,GAC/CsH,EAAU9G,GAAUqH,OACjB,GAA8B,eAA1BH,EAAaE,SAA2B,CAC/C,IAAII,GAAgBtH,GAAIF,GACxBwH,EAAYC,WAAatN,KAAKuN,kBAAkBP,EAAeH,GAC/DQ,EAAYtH,GAAKF,EACbmH,EAAc9H,QAAQnC,OAAS,GAC/BmE,QAAQC,KAAK,sFACjByF,EAAa/G,GAAUwH,IAInC,OACIV,UAAWA,EACXC,aAAcA,IAGtBO,cAAe,SAAUH,EAAeQ,GACpC,IAAIC,KAiBJ,OAhBAT,EAAc7H,SAASR,QAAQ,SAAUgH,GACrC,IAAI+B,EAAWF,EAAc7B,EAAMtG,IACnC,GAA0B,YAAtBqI,EAAST,SAAb,CAEA,IAAIU,GACAtI,GAAIsG,EAAMtG,GACVuI,WACAC,WACAC,eAAe,IAAIzO,EAAM0O,SAAUxD,UAAUmD,EAASM,cAAcC,IAEpE,YAAaP,IACbC,EAAQC,QAAUF,EAASQ,QAAQD,EACnCN,EAAQE,QAAUH,EAASS,QAAQF,GAEvCR,EAASlI,KAAKoI,OAGdF,SAAUA,EACVW,WAGRb,kBAAmB,SAAUP,EAAeQ,GAExC,IADA,IAAIa,KACK/K,EAAI,EAAGA,EAAI0J,EAAc7H,SAASpC,OAAQO,IAAK,CACpD,IAAIqI,EAAQqB,EAAc7H,SAAS7B,GAC/BgL,EAAkBd,EAAc7B,EAAMtG,IACtCkJ,GACAvG,KAAMsG,EAAgBrG,SACtBuG,cAAeF,EAAgBG,cAC/B1I,GAAIuI,EAAgBvI,GACpB2I,YAAaJ,EAAgBK,YAAYV,GAE7C,GAAiC,sBAA7BK,EAAgBrB,SAChB,OACJsB,EAAeK,MAAQjP,EAAY2F,IAAIpE,SAASyK,EAAMtG,KAAKF,SAAS0J,OAAO,SAAUlD,GACjF,YAA8B9K,IAAvB8K,EAAM5G,eACd,GAAGM,GACNgJ,EAAgB9I,KAAKgJ,GAEzB,OAAOF,GAEX9J,WAAY,SAAUH,EAAWE,EAAagF,GAC1C1J,EAAa,IAAIP,EAAMyP,MACvB,IAAIC,EAAW/O,KAAKgP,YAAY5K,EAAUuI,UAAWrI,EAAagF,GAC9D2F,EAAavP,EAAQgG,QAAQwJ,MAC7BlN,EAAOhC,KACX+O,EAASpK,QAAQ,SAAUwK,GACvB,IAAIC,EAAYH,EAAWE,EAAM9J,IACjCrD,EAAKqN,oBAAoBF,EAAOC,GACRzP,EAAY2F,IAAI6J,EAAM9J,IAAIH,QAChCP,QAAQ,SAAU2K,GAChC,IAAIC,EAASR,EAASzJ,IAAIgK,EAAWjK,SACtBxE,IAAX0O,GACAA,EAAOC,IAAIL,KAEE,OAAjBA,EAAMI,QACN3P,EAAW4P,IAAIL,KAGvBnP,KAAKyP,aAAarL,EAAUuI,UAAWrI,EAAayK,GACpD/O,KAAK0P,qBACL1P,KAAK2P,sBACL/P,EAAWgQ,SAAS,SAAUC,GAC1B,GAAIA,EAAKC,SAASC,cAAe,CACzBF,EAAKN,SACLM,EAAKC,SAASC,cAAcC,kBAAoBH,EAAKN,OAAOU,QAChE,IAAIC,EAAYC,EAAkBN,EAAKC,SAASC,eAChDF,EAAKO,aAAaF,MAG1B,IAAIG,GAAa,IAAIjQ,GAAkBoC,QACJ,IAA/B5C,EAAWuF,SAASpC,QAAgBnD,EAAWuF,SAAS,GAAGmL,UAC3D1Q,EAAWuF,SAAS,GAAGkL,WAAaA,EACpCzQ,EAAaA,EAAWuF,SAAS,IAErCvF,EAAWyQ,WAAaA,GAE5BrB,YAAa,SAAUrC,EAAWrI,EAAagF,GAC3C,IAAIyF,EAAW,IAAItK,IACfwK,EAAavP,EAAQgG,QAAQwJ,MACjC,IAAK,IAAIrJ,KAAUoJ,EAAY,CAC3B,IAAIlJ,EAAK7E,SAAS2E,GACdgK,EAAOZ,EAAWpJ,GAClBmH,EAAgBrN,EAAY2F,IAAIS,GAChCoJ,EAAQnP,KAAKuQ,cAAcvD,EAAeL,EAAW5G,EAAI8J,EAAK5H,UAClE,IAAKkH,EAAO,CACR,OAAQU,EAAK5C,UACb,IAAK,SACDkC,EAAQnP,KAAKwQ,aAAaxD,GAC1B,MACJ,IAAK,QACDmC,EAAQnP,KAAKyQ,YAAYzD,GACzB,MACJ,IAAK,OACDmC,EAAQnP,KAAK0Q,WAAW1D,EAAe1I,EAAagF,GACpD,MACJ,IAAK,aACD6F,EAAQnP,KAAK2Q,YAAY3D,EAAe1I,GACxC,MACJ,IAAK,WACL,IAAK,OACD6K,EAAQ,IAAI9P,EAAMuR,KAClB,MACJ,IAAK,OACL,QACIzB,EAAQ,IAAI9P,EAAMyP,MAGtBK,EAAMnH,KAAO6H,EAAK5H,SAAW5I,EAAMwR,gBAAgBC,iBAAiBjB,EAAK5H,UAAY,GACrFkH,EAAM9J,GAAKU,EAEf/F,KAAK+Q,iBAAiB5B,EAAOU,GAC7Bd,EAAS9J,IAAIc,EAAIoJ,GAErB,OAAOJ,GAEXwB,cAAe,SAAUvD,EAAeL,EAAW5G,EAAIiC,GACnD,IAAIgJ,EAAO,KAmBX,OAlBAhE,EAAc9H,QAAQP,QAAQ,SAAU4K,GACpC,IAAK,IAAIlK,KAAMsH,EAAW,CACtB,IAAIO,EAAWP,EAAUtH,GACzB6H,EAASO,SAAS9I,QAAQ,SAAUgJ,EAASrK,GACzC,GAAIqK,EAAQtI,KAAOkK,EAAOlK,GAAI,CAC1B,IAAI4L,EAAUD,GACdA,EAAO,IAAI3R,EAAMuR,MACZM,YAAYC,KAAKxD,EAAQG,eAC9BkD,EAAKhJ,KAAOA,EAAO3I,EAAMwR,gBAAgBC,iBAAiB9I,GAAQ,GAClEgJ,EAAK3L,GAAKU,EACVmH,EAASkB,MAAM9K,GAAK0N,EACJ,OAAZC,GACAD,EAAKxB,IAAIyB,SAMtBD,GAEXR,aAAc,SAAUxD,GACpB,IAAImC,EACAiC,EAOJ,GANApE,EAAc7H,SAASR,QAAQ,SAAUgH,GACrC,IAAI0F,EAAO3R,EAAQgG,QAAQ4L,cAAc3F,EAAMtG,SAClCxE,IAATwQ,IACAD,EAAkBC,UAGFxQ,IAApBuQ,EACAjC,EAAQ,IAAI9P,EAAMkS,aACf,CACH,IAAI5K,EAAO,OACkC9F,IAAzCuQ,EAAgBI,sBAAqF,IAA/CJ,EAAgBI,qBAAqBjJ,QAC3F5B,EAAO,GAEX,IAAI8K,EAAoB,OACU5Q,IAA9BuQ,EAAgBM,YAChBD,EAAoBL,EAAgBM,UAAUnJ,MAAQ,KAE1D,IAAIoJ,EAAmB,SACU9Q,IAA7BuQ,EAAgBQ,WAChBD,EAAmBP,EAAgBQ,SAASrJ,MAAQ,KAExD,IAAIsJ,EAAQvK,OAAOwK,WACfC,EAASzK,OAAO0K,iBACgBnR,IAAhCuQ,EAAgBa,kBAA8DpR,IAAjCuQ,EAAgBc,eAC7DL,EAAQT,EAAgBa,YAAY1J,MACpCwJ,EAASX,EAAgBc,aAAa3J,OAE1C,IAAI4J,EAASN,EAAQE,EACjBK,EAAM,QAC0BvR,IAAhCuQ,EAAgBiB,cAChBD,EAAMhB,EAAgBiB,YAAY9J,OAEtC,IAAI+J,EAAclB,EAAgBmB,YAAcnB,EAAgBmB,YAAYhK,MAAQ,KACpF,OAAQ5B,GACR,KAAK,EACDwI,EAAQ,IAAI9P,EAAMmT,kBAAkBJ,EAAKD,EAAQV,EAAmBE,GAChD,OAAhBW,GACAnD,EAAMsD,eAAeH,GACzB,MACJ,KAAK,EACDnD,EAAQ,IAAI9P,EAAMqT,oBAAoBb,EAAQ,EAAGA,EAAQ,EAAGE,EAAS,GAAIA,EAAS,EAAGN,EAAmBE,GACxG,MACJ,QACIzK,QAAQC,KAAK,wCAA0CR,EAAO,KAC9DwI,EAAQ,IAAI9P,EAAMkS,UAI1B,OAAOpC,GAEXsB,YAAa,SAAUzD,GACnB,IAAImC,EACAwD,EAOJ,GANA3F,EAAc7H,SAASR,QAAQ,SAAUgH,GACrC,IAAI0F,EAAO3R,EAAQgG,QAAQ4L,cAAc3F,EAAMtG,SAClCxE,IAATwQ,IACAsB,EAAiBtB,UAGFxQ,IAAnB8R,EACAxD,EAAQ,IAAI9P,EAAMkS,aACf,CACH,IAAI5K,EAEAA,OAD6B9F,IAA7B8R,EAAeC,UACR,EAEAD,EAAeC,UAAUrK,MAEpC,IAAI8B,EAAQ,cACqBxJ,IAA7B8R,EAAe9R,YACfwJ,GAAQ,IAAIhL,EAAMiL,OAAQC,UAAUoI,EAAe9R,UAAU0H,QAEjE,IAAIsK,OAAyChS,IAA7B8R,EAAeG,UAA0B,EAAIH,EAAeG,UAAUvK,MAAQ,SACrD1H,IAArC8R,EAAeI,mBAA8E,IAA3CJ,EAAeI,kBAAkBxK,QACnFsK,EAAY,GAEhB,IAAIG,EAAW,OAC0BnS,IAArC8R,EAAeM,oBAEXD,OADwCnS,IAAxC8R,EAAeO,sBAAoF,IAA9CP,EAAeO,qBAAqB3K,MAC9E,EAEAoK,EAAeM,kBAAkB1K,OAIpD,OAAQ5B,GACR,KAAK,EACDwI,EAAQ,IAAI9P,EAAM8T,WAAW9I,EAAOwI,EAAWG,EAHvC,GAIR,MACJ,KAAK,EACD7D,EAAQ,IAAI9P,EAAM+T,iBAAiB/I,EAAOwI,GAC1C,MACJ,KAAK,EACD,IAAIQ,EAAQC,KAAKC,GAAK,OACY1S,IAA9B8R,EAAea,aACfH,EAAQhU,EAAMoU,UAAUC,SAASf,EAAea,WAAWjL,QAE/D,IAAIoL,EAAW,OACmB9S,IAA9B8R,EAAeiB,aACfD,EAAWtU,EAAMoU,UAAUC,SAASf,EAAeiB,WAAWrL,OAC9DoL,EAAWL,KAAKO,IAAIF,EAAU,IAElCxE,EAAQ,IAAI9P,EAAMyU,UAAUzJ,EAAOwI,EAAWG,EAAUK,EAAOM,EAlBvD,GAmBR,MACJ,QACIzM,QAAQC,KAAK,uCAAyCwL,EAAeC,UAAUrK,MAAQ,iCACvF4G,EAAQ,IAAI9P,EAAM8T,WAAW9I,EAAOwI,QAGLhS,IAA/B8R,EAAeoB,aAAkE,IAArCpB,EAAeoB,YAAYxL,QACvE4G,EAAM6E,YAAa,GAG3B,OAAO7E,GAEXuB,WAAY,SAAU1D,EAAe1I,EAAagF,GAC9C,IAAI6F,EACA8E,EAAW,KACXxK,EAAW,KACXvF,KA+BJ,OA9BA8I,EAAc7H,SAASR,QAAQ,SAAUgH,GACjCrH,EAAYU,IAAI2G,EAAMtG,MACtB4O,EAAW3P,EAAYgB,IAAIqG,EAAMtG,KAEjCiE,EAAYtE,IAAI2G,EAAMtG,KACtBnB,EAAUqB,KAAK+D,EAAYhE,IAAIqG,EAAMtG,OAGzCnB,EAAUnB,OAAS,EACnB0G,EAAWvF,EACJA,EAAUnB,OAAS,EAC1B0G,EAAWvF,EAAU,IAErBuF,EAAW,IAAIpK,EAAM0K,mBAAoBM,MAAO,WAChDnG,EAAUqB,KAAKkE,IAEf,UAAWwK,EAASC,YACpBhQ,EAAUS,QAAQ,SAAU8E,GACxBA,EAAS0K,cAAe,IAG5BF,EAASG,cACTlQ,EAAUS,QAAQ,SAAU8E,GACxBA,EAAS4K,UAAW,KAExBlF,EAAQ,IAAI9P,EAAMiV,YAAYL,EAAUxK,IAClC8K,wBAENpF,EAAQ,IAAI9P,EAAMmV,KAAKP,EAAUxK,GAE9B0F,GAEXwB,YAAa,SAAU3D,EAAe1I,GAClC,IAAI2P,EAAWjH,EAAc7H,SAASsP,OAAO,SAAUC,EAAK/I,GAGxD,OAFIrH,EAAYU,IAAI2G,EAAMtG,MACtBqP,EAAMpQ,EAAYgB,IAAIqG,EAAMtG,KACzBqP,GACR,MACCjL,EAAW,IAAIpK,EAAMsV,mBACrBtK,MAAO,QACPuK,UAAW,IAEf,OAAO,IAAIvV,EAAMwV,KAAKZ,EAAUxK,IAEpCsH,iBAAkB,SAAU5B,EAAOC,GAC/B,IAAIW,KACA,gBAAiBX,IACjBW,EAAc+E,YAAc5T,SAASkO,EAAU2F,YAAYxM,QAE3DwH,EAAciF,WADd,kBAAmB5F,EACQ6F,EAAc7F,EAAU8F,cAAc3M,OAEtC,MAC3B,oBAAqB6G,IACrBW,EAAcoF,YAAc/F,EAAUgG,gBAAgB7M,OACtD,gBAAiB6G,IACjBW,EAAcsF,YAAcjG,EAAUkG,YAAY/M,OAClD,iBAAkB6G,IAClBW,EAAcwF,SAAWnG,EAAUoG,aAAajN,OAChD,iBAAkB6G,IAClBW,EAAc0F,aAAerG,EAAUsG,aAAanN,OACpD,gBAAiB6G,IACjBW,EAAc4F,MAAQvG,EAAUwG,YAAYrN,OAC5C,kBAAmB6G,IACnBW,EAAc8F,cAAgBzG,EAAU0G,cAAcvN,OACtD,iBAAkB6G,IAClBW,EAAcgG,aAAe3G,EAAU4G,aAAazN,OACpD,mBAAoB6G,IACpBW,EAAckG,eAAiB7G,EAAU8G,eAAe3N,OACxD,kBAAmB6G,IACnBW,EAAcoG,cAAgB/G,EAAUgH,cAAc7N,OAC1D4G,EAAMW,SAASC,cAAgBA,GAEnCV,oBAAqB,SAAUF,EAAOC,GAC9B,mBAAoBA,GACLzP,EAAY2F,IAAI6J,EAAM9J,IAAIF,SAChCR,QAAQ,SAAUgH,GACvB,GAA2B,mBAAvBA,EAAM5G,aAAmC,CACzC,IAAIsR,EAAe3W,EAAQgG,QAAQwJ,MAAMvD,EAAMtG,IAC/C,GAAI,oBAAqBgR,EAAc,CACnC,IAAIC,EAAMD,EAAajB,gBAAgB7M,WAClB1H,IAAjBsO,EAAMoH,QACNpH,EAAMoH,OAAOC,SAASjM,UAAU+L,GAChC1W,EAAW4P,IAAIL,EAAMoH,SAErBpH,EAAMsH,QAAO,IAAIpX,EAAMqX,SAAUnM,UAAU+L,SAOnE7G,aAAc,SAAU9C,EAAWrI,EAAayK,GAC5C,IAAI4H,EAAe3W,KAAK4W,iBACxB,IAAK,IAAIvR,KAAMsH,EAAW,CACtB,IAAIO,EAAWP,EAAUtH,GACX1F,EAAY2F,IAAIpE,SAASgM,EAAS7H,KAAKH,QAC7CP,QAAQ,SAAU4K,GACtB,GAAIjL,EAAYU,IAAIuK,EAAOlK,IAAK,CAC5B,IAAIuJ,EAAQW,EAAOlK,GACI1F,EAAY2F,IAAIsJ,GACtB1J,QAAQP,QAAQ,SAAUkS,GACnC9H,EAAS/J,IAAI6R,EAAcxR,KACf0J,EAASzJ,IAAIuR,EAAcxR,IACjCyR,KAAK,IAAIzX,EAAM0X,SAAS7J,EAASkB,OAAQuI,EAAaE,EAAcxR,YAOlGuR,eAAgB,WACZ,IAAID,KACJ,GAAI,SAAUjX,EAAQgG,QAAS,CAC3B,IAAIsR,EAAetX,EAAQgG,QAAQuR,KACnC,IAAK,IAAIpR,KAAUmR,EACf,GAAsC,aAAlCA,EAAanR,GAAQoH,SAAyB,CAC9C,IAAIiK,EAAYF,EAAanR,GAAQsR,SACjCC,MAAMC,QAAQH,GACdA,EAAUvS,QAAQ,SAAU2S,GACxBX,EAAaW,EAASC,OAAQ,IAAIlY,EAAM0O,SAAUxD,UAAU+M,EAASE,OAAOvJ,KAGhF0I,EAAaO,EAAUK,OAAQ,IAAIlY,EAAM0O,SAAUxD,UAAU2M,EAAUM,OAAOvJ,IAK9F,OAAO0I,GAEXjH,mBAAoB,WAChB,GAAI,mBAAoBhQ,GAAW,iBAAkBA,EAAQ+X,eAAgB,CACzE,IAAIC,EAAehY,EAAQ+X,eAAeE,aAAapP,MACnDqP,EAAIF,EAAa,GACjBG,EAAIH,EAAa,GACjBI,EAAIJ,EAAa,GACrB,GAAU,IAANE,GAAiB,IAANC,GAAiB,IAANC,EAAS,CAC/B,IAAIzN,EAAQ,IAAIhL,EAAMiL,MAAMsN,EAAGC,EAAGC,GAClClY,EAAW4P,IAAI,IAAInQ,EAAM0Y,aAAa1N,EAAO,OAIzDsF,oBAAqB,WACjB,IAAI3N,EAAOhC,KACXJ,EAAWgQ,SAAS,SAAUjE,GACtBA,EAAMqM,QACFrM,EAAMsI,SAASgE,gBAAgBzB,UAAY7K,EAAMsI,SAASgE,gBAAgBzB,SAASzT,SAC/EqU,MAAMC,QAAQ1L,EAAMlC,UACpBkC,EAAMlC,SAAS9E,QAAQ,SAAU8E,EAAUnG,GACvCtB,EAAKkW,mBAAmBvM,EAAOlC,EAAUnG,KAG7CtB,EAAKkW,mBAAmBvM,EAAOA,EAAMlC,cAMzDyO,mBAAoB,SAAUvM,EAAOlC,EAAU0O,GAC3C,IAAIC,EAAOzM,EAAMyM,KACbC,EAAU5O,EAAS2O,KACnBE,GAAY,EAYhB,GAXA1Y,EAAWgQ,SAAS,SAAUC,GACtBA,EAAKmI,SACDZ,MAAMC,QAAQxH,EAAKpG,UACnBoG,EAAKpG,SAAS9E,QAAQ,SAAU4T,GACxBA,EAAIH,OAASC,GAAWxI,EAAKuI,OAASA,IACtCE,GAAY,KAEbzI,EAAKpG,SAAS2O,OAASC,GAAWxI,EAAKuI,OAASA,IACvDE,GAAY,OAGN,IAAdA,EAAoB,CACpB,IAAIE,EAAY/O,EAASgP,QACzBD,EAAU5L,cAAe,OACX/L,IAAVsX,EACAxM,EAAMlC,SAAW+O,EAEjB7M,EAAMlC,SAAS0O,GAASK,OAE5B/O,EAASmD,cAAe,IAKpCzM,EAAemB,WACXI,YAAavB,EACbqC,MAAO,SAAU4B,GACb,IAAIE,EAAc,IAAIG,IACtB,GAAI,aAAc/E,EAAQgG,QAAS,CAC/B,IAAIgT,EAAWhZ,EAAQgG,QAAQiT,SAC/B,IAAK,IAAI9S,KAAU6S,EAAU,CACzB,IAAI1L,EAAgBrN,EAAY2F,IAAIpE,SAAS2E,IACzC6O,EAAM1U,KAAK4Y,cAAc5L,EAAe0L,EAAS7S,GAASzB,GAC9DE,EAAYW,IAAI/D,SAAS2E,GAAS6O,IAG1C,OAAOpQ,GAEXsU,cAAe,SAAU5L,EAAe6L,EAASzU,GAC7C,OAAQyU,EAAQ5L,UAChB,IAAK,OACD,OAAOjN,KAAK8Y,kBAAkB9L,EAAe6L,EAASzU,GAE1D,IAAK,aACD,OAAOpE,KAAK+Y,mBAAmBF,KAIvCC,kBAAmB,SAAU9L,EAAe6L,EAASzU,GACjD,IAAIuI,EAAYvI,EAAUuI,UACtBC,KACAqC,EAAajC,EAAc9H,QAAQ6G,IAAI,SAAUwD,GACjD,OAAO7P,EAAQgG,QAAQwJ,MAAMK,EAAOlK,MAExC,GAA0B,IAAtB4J,EAAWlM,OAAf,CAEA,IAAImK,EAAWF,EAAc7H,SAASsP,OAAO,SAAUvH,EAAUvB,GAG7D,YAF4B9K,IAAxB8L,EAAUhB,EAAMtG,MAChB6H,EAAWP,EAAUhB,EAAMtG,KACxB6H,GACR,MACHF,EAAc7H,SAASR,QAAQ,SAAUgH,QACI9K,IAArCuD,EAAUwI,aAAajB,EAAMtG,KAC7BuH,EAAarH,KAAKnB,EAAUwI,aAAajB,EAAMtG,OAGvD,IAAI+J,EAAYH,EAAW,GACvBc,KACA,kBAAmBX,IACnBW,EAAciF,WAAaC,EAAc7F,EAAU8F,cAAc3M,QACjE,gBAAiB6G,IACjBW,EAAc+E,YAAc5T,SAASkO,EAAU2F,YAAYxM,QAC3D,yBAA0B6G,IAC1BW,EAAcoF,YAAc/F,EAAU4J,qBAAqBzQ,OAC3D,sBAAuB6G,IACvBW,EAAcwF,SAAWnG,EAAU6J,kBAAkB1Q,OACrD,qBAAsB6G,IACtBW,EAAc4F,MAAQvG,EAAU8J,iBAAiB3Q,OACrD,IAAI2H,EAAYC,EAAkBJ,GAClC,OAAO/P,KAAKmZ,YAAYN,EAAS3L,EAAUN,EAAcsD,KAE7DiJ,YAAa,SAAUN,EAAS3L,EAAUN,EAAcwM,GACpD,IAAI1E,EAAM,IAAIrV,EAAMga,eAChBR,EAAQ5Q,WACRyM,EAAI1M,KAAO6Q,EAAQ5Q,UACvB,IAAIqR,EAAUtZ,KAAKuZ,aAAaV,EAAS3L,GACrCsM,EAAUxZ,KAAKyZ,WAAWH,GAC1BI,EAAoB,IAAIra,EAAMsa,uBAAuBH,EAAQI,OAAQ,GAWzE,GAVAF,EAAkBtJ,aAAagJ,GAC/B1E,EAAImF,aAAa,WAAYH,GACzBF,EAAQM,OAAO/W,OAAS,GACxB2R,EAAImF,aAAa,QAAS,IAAIxa,EAAMsa,uBAAuBH,EAAQM,OAAQ,IAE3E5M,IACAwH,EAAImF,aAAa,YAAa,IAAIxa,EAAM0a,sBAAsBP,EAAQQ,eAAgB,IACtFtF,EAAImF,aAAa,aAAc,IAAIxa,EAAMsa,uBAAuBH,EAAQS,cAAe,IACvFvF,EAAIN,aAAelH,GAEnBsM,EAAQU,OAAOnX,OAAS,EAAG,CAC3B,IAAIoX,GAAe,IAAI9a,EAAM+a,SAAUC,gBAAgBjB,GACnDkB,EAAkB,IAAIjb,EAAMsa,uBAAuBH,EAAQU,OAAQ,GACvEI,EAAgBC,kBAAkBJ,GAClCzF,EAAImF,aAAa,SAAUS,GAS/B,GAPAd,EAAQgB,IAAI7V,QAAQ,SAAU8V,EAAUnX,GACpC,IAAI0E,EAAO,MAAQ1E,EAAI,GAAGoX,WAChB,IAANpX,IACA0E,EAAO,MAEX0M,EAAImF,aAAa7R,EAAM,IAAI3I,EAAMsa,uBAAuBH,EAAQgB,IAAIlX,GAAI,MAExEgW,EAAQ7P,UAA6C,YAAjC6P,EAAQ7P,SAASkR,YAA2B,CAChE,IAAIC,EAAoBpB,EAAQqB,cAAc,GAC1CC,EAAa,EAQjB,GAPAtB,EAAQqB,cAAclW,QAAQ,SAAUoW,EAAczX,GAC9CyX,IAAiBH,IACjBlG,EAAIsG,SAASF,EAAYxX,EAAIwX,EAAYF,GACzCA,EAAoBG,EACpBD,EAAaxX,KAGjBoR,EAAIuG,OAAOlY,OAAS,EAAG,CACvB,IAAImY,EAAYxG,EAAIuG,OAAOvG,EAAIuG,OAAOlY,OAAS,GAC3CoY,EAAYD,EAAUE,MAAQF,EAAUG,MACxCF,IAAc3B,EAAQqB,cAAc9X,QACpC2R,EAAIsG,SAASG,EAAW3B,EAAQqB,cAAc9X,OAASoY,EAAWP,GAGhD,IAAtBlG,EAAIuG,OAAOlY,QACX2R,EAAIsG,SAAS,EAAGxB,EAAQqB,cAAc9X,OAAQyW,EAAQqB,cAAc,IAI5E,OADA7a,KAAKsb,gBAAgB5G,EAAKmE,EAASjM,EAAcwM,GAC1C1E,GAEX6E,aAAc,SAAUV,EAAS3L,GAC7B,IAAIoM,KAYJ,GAXAA,EAAQiC,qBAAuC1a,IAArBgY,EAAQ2C,SAAyB3C,EAAQ2C,SAASvN,KAC5EqL,EAAQmC,mBAA+C5a,IAA/BgY,EAAQ6C,mBAAmC7C,EAAQ6C,mBAAmBzN,KAC1F4K,EAAQ8C,oBACRrC,EAAQjP,MAAQrK,KAAK4b,kBAAkB/C,EAAQ8C,kBAAkB,KAEjE9C,EAAQgD,uBACRvC,EAAQ7P,SAAWzJ,KAAK8b,qBAAqBjD,EAAQgD,qBAAqB,KAE1EhD,EAAQkD,qBACRzC,EAAQY,OAASla,KAAKgc,aAAanD,EAAQkD,mBAAmB,KAE9DlD,EAAQoD,eAAgB,CACxB3C,EAAQ4C,MAER,IADA,IAAI5Y,EAAI,EACDuV,EAAQoD,eAAe3Y,IAC1BgW,EAAQ4C,GAAG3W,KAAKvF,KAAKmc,SAAStD,EAAQoD,eAAe3Y,KACrDA,IAiBR,OAdAgW,EAAQ8C,eACS,OAAblP,IACAoM,EAAQpM,SAAWA,EACnBA,EAASO,SAAS9I,QAAQ,SAAUgJ,EAASrK,GACzCqK,EAAQC,QAAQjJ,QAAQ,SAAUwT,EAAOkE,QACFxb,IAA/ByY,EAAQ8C,YAAYjE,KACpBmB,EAAQ8C,YAAYjE,OACxBmB,EAAQ8C,YAAYjE,GAAO5S,MACvBQ,GAAIzC,EACJgZ,OAAQ3O,EAAQE,QAAQwO,UAKjC/C,GAEXG,WAAY,SAAUH,GAClB,IAAIE,GACAI,UACAM,UACAJ,UACAU,OACAK,iBACAZ,iBACAD,mBAEAuC,EAAe,EACfC,EAAa,EACbC,GAA0B,EAC1BC,KACAC,KACAC,KACAC,KACAC,KACAC,KACA/a,EAAOhC,KA6FX,OA5FAsZ,EAAQmC,cAAc9W,QAAQ,SAAUqY,EAAaC,GACjD,IAAIC,GAAY,EACZF,EAAc,IACdA,IAA6B,EAC7BE,GAAY,GAEhB,IAAIC,KACAtP,KAEJ,GADA6O,EAAoBnX,KAAmB,EAAdyX,EAA+B,EAAdA,EAAkB,EAAiB,EAAdA,EAAkB,GAC7E1D,EAAQjP,MAAO,CACf,IAAI+S,EAAOC,EAAQJ,EAAoBV,EAAcS,EAAa1D,EAAQjP,OAC1EuS,EAAWrX,KAAK6X,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAE3C,GAAI9D,EAAQpM,SAAU,CAOlB,QANyCrM,IAArCyY,EAAQ8C,YAAYY,IACpB1D,EAAQ8C,YAAYY,GAAarY,QAAQ,SAAU2Y,GAC/CzP,EAAQtI,KAAK+X,EAAGhB,QAChBa,EAAc5X,KAAK+X,EAAGvX,MAG1B8H,EAAQ9K,OAAS,EAAG,CACf0Z,IACDvV,QAAQC,KAAK,6GACbsV,GAA0B,GAE9B,IAAIc,GACA,EACA,EACA,EACA,GAEAC,GACA,EACA,EACA,EACA,GAEJ3P,EAAQlJ,QAAQ,SAAU2X,EAAQmB,GAC9B,IAAIC,EAAgBpB,EAChBvB,EAAeoC,EAAcM,GACjCD,EAAO7Y,QAAQ,SAAUgZ,EAAgBC,EAAqBC,GAC1D,GAAIH,EAAgBC,EAAgB,CAChCE,EAAoBD,GAAuBF,EAC3CA,EAAgBC,EAChB,IAAIG,EAAMP,EAAOK,GACjBL,EAAOK,GAAuB7C,EAC9BA,EAAe+C,OAI3BX,EAAgBI,EAChB1P,EAAU2P,EAEd,KAAO3P,EAAQ9K,OAAS,GACpB8K,EAAQtI,KAAK,GACb4X,EAAc5X,KAAK,GAEvB,IAAK,IAAIjC,EAAI,EAAGA,EAAI,IAAKA,EACrBwZ,EAAYvX,KAAKsI,EAAQvK,IACzByZ,EAAkBxX,KAAK4X,EAAc7Z,IAG7C,GAAIgW,EAAQY,OAAQ,CACZkD,EAAOC,EAAQJ,EAAoBV,EAAcS,EAAa1D,EAAQY,QAC1EyC,EAAYpX,KAAK6X,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAE5C,GAAI9D,EAAQ7P,UAA6C,YAAjC6P,EAAQ7P,SAASkR,YACrC,IAAIE,EAAgBwC,EAAQJ,EAAoBV,EAAcS,EAAa1D,EAAQ7P,UAAU,GAE7F6P,EAAQ4C,IACR5C,EAAQ4C,GAAGvX,QAAQ,SAAUuX,EAAI5Y,GAC7B,IAAI8Z,EAAOC,EAAQJ,EAAoBV,EAAcS,EAAad,QAC/Crb,IAAfgc,EAAQvZ,KACRuZ,EAAQvZ,OAEZuZ,EAAQvZ,GAAGiC,KAAK6X,EAAK,IACrBP,EAAQvZ,GAAGiC,KAAK6X,EAAK,MAG7BZ,IACIU,IACAlb,EAAK+b,QAAQvE,EAASF,EAASoD,EAAqB7B,EAAe8B,EAAaC,EAAYC,EAASC,EAAaC,EAAmBP,GACrID,IACAC,EAAa,EACbE,KACAC,KACAC,KACAC,KACAC,KACAC,QAGDvD,GAEXuE,QAAS,SAAUvE,EAASF,EAASoD,EAAqB7B,EAAe8B,EAAaC,EAAYC,EAASC,EAAaC,EAAmBP,GACvI,IAAK,IAAIlZ,EAAI,EAAGA,EAAIkZ,EAAYlZ,IAC5BkW,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAAoB,KAChElD,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAAoB,KAChElD,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAAoB,KAChElD,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAA8B,GAATpZ,EAAI,MACrEkW,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAA8B,GAATpZ,EAAI,GAAS,KAC9EkW,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAA8B,GAATpZ,EAAI,GAAS,KAC9EkW,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAAwB,EAAJpZ,KAChEkW,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAAwB,EAAJpZ,EAAQ,KACxEkW,EAAQI,OAAOrU,KAAK+T,EAAQiC,gBAAgBmB,EAAwB,EAAJpZ,EAAQ,KACpEgW,EAAQpM,WACRsM,EAAQS,cAAc1U,KAAKuX,EAAY,IACvCtD,EAAQS,cAAc1U,KAAKuX,EAAY,IACvCtD,EAAQS,cAAc1U,KAAKuX,EAAY,IACvCtD,EAAQS,cAAc1U,KAAKuX,EAAY,IACvCtD,EAAQS,cAAc1U,KAAKuX,EAAsB,GAATxZ,EAAI,KAC5CkW,EAAQS,cAAc1U,KAAKuX,EAAsB,GAATxZ,EAAI,GAAS,IACrDkW,EAAQS,cAAc1U,KAAKuX,EAAsB,GAATxZ,EAAI,GAAS,IACrDkW,EAAQS,cAAc1U,KAAKuX,EAAsB,GAATxZ,EAAI,GAAS,IACrDkW,EAAQS,cAAc1U,KAAKuX,EAAgB,EAAJxZ,IACvCkW,EAAQS,cAAc1U,KAAKuX,EAAgB,EAAJxZ,EAAQ,IAC/CkW,EAAQS,cAAc1U,KAAKuX,EAAgB,EAAJxZ,EAAQ,IAC/CkW,EAAQS,cAAc1U,KAAKuX,EAAgB,EAAJxZ,EAAQ,IAC/CkW,EAAQQ,eAAezU,KAAKwX,EAAkB,IAC9CvD,EAAQQ,eAAezU,KAAKwX,EAAkB,IAC9CvD,EAAQQ,eAAezU,KAAKwX,EAAkB,IAC9CvD,EAAQQ,eAAezU,KAAKwX,EAAkB,IAC9CvD,EAAQQ,eAAezU,KAAKwX,EAA4B,GAATzZ,EAAI,KACnDkW,EAAQQ,eAAezU,KAAKwX,EAA4B,GAATzZ,EAAI,GAAS,IAC5DkW,EAAQQ,eAAezU,KAAKwX,EAA4B,GAATzZ,EAAI,GAAS,IAC5DkW,EAAQQ,eAAezU,KAAKwX,EAA4B,GAATzZ,EAAI,GAAS,IAC5DkW,EAAQQ,eAAezU,KAAKwX,EAAsB,EAAJzZ,IAC9CkW,EAAQQ,eAAezU,KAAKwX,EAAsB,EAAJzZ,EAAQ,IACtDkW,EAAQQ,eAAezU,KAAKwX,EAAsB,EAAJzZ,EAAQ,IACtDkW,EAAQQ,eAAezU,KAAKwX,EAAsB,EAAJzZ,EAAQ,KAEtDgW,EAAQjP,QACRmP,EAAQM,OAAOvU,KAAKqX,EAAW,IAC/BpD,EAAQM,OAAOvU,KAAKqX,EAAW,IAC/BpD,EAAQM,OAAOvU,KAAKqX,EAAW,IAC/BpD,EAAQM,OAAOvU,KAAKqX,EAAqB,GAATtZ,EAAI,KACpCkW,EAAQM,OAAOvU,KAAKqX,EAAqB,GAATtZ,EAAI,GAAS,IAC7CkW,EAAQM,OAAOvU,KAAKqX,EAAqB,GAATtZ,EAAI,GAAS,IAC7CkW,EAAQM,OAAOvU,KAAKqX,EAAe,EAAJtZ,IAC/BkW,EAAQM,OAAOvU,KAAKqX,EAAe,EAAJtZ,EAAQ,IACvCkW,EAAQM,OAAOvU,KAAKqX,EAAe,EAAJtZ,EAAQ,KAEvCgW,EAAQ7P,UAA6C,YAAjC6P,EAAQ7P,SAASkR,cACrCnB,EAAQqB,cAActV,KAAKsV,GAC3BrB,EAAQqB,cAActV,KAAKsV,GAC3BrB,EAAQqB,cAActV,KAAKsV,IAE3BvB,EAAQY,SACRV,EAAQU,OAAO3U,KAAKoX,EAAY,IAChCnD,EAAQU,OAAO3U,KAAKoX,EAAY,IAChCnD,EAAQU,OAAO3U,KAAKoX,EAAY,IAChCnD,EAAQU,OAAO3U,KAAKoX,EAAsB,GAATrZ,EAAI,KACrCkW,EAAQU,OAAO3U,KAAKoX,EAAsB,GAATrZ,EAAI,GAAS,IAC9CkW,EAAQU,OAAO3U,KAAKoX,EAAsB,GAATrZ,EAAI,GAAS,IAC9CkW,EAAQU,OAAO3U,KAAKoX,EAAgB,EAAJrZ,IAChCkW,EAAQU,OAAO3U,KAAKoX,EAAgB,EAAJrZ,EAAQ,IACxCkW,EAAQU,OAAO3U,KAAKoX,EAAgB,EAAJrZ,EAAQ,KAExCgW,EAAQ4C,IACR5C,EAAQ4C,GAAGvX,QAAQ,SAAUuX,EAAIG,QACNxb,IAAnB2Y,EAAQgB,IAAI6B,KACZ7C,EAAQgB,IAAI6B,OAChB7C,EAAQgB,IAAI6B,GAAG9W,KAAKsX,EAAQR,GAAG,IAC/B7C,EAAQgB,IAAI6B,GAAG9W,KAAKsX,EAAQR,GAAG,IAC/B7C,EAAQgB,IAAI6B,GAAG9W,KAAKsX,EAAQR,GAAa,GAAT/Y,EAAI,KACpCkW,EAAQgB,IAAI6B,GAAG9W,KAAKsX,EAAQR,GAAa,GAAT/Y,EAAI,GAAS,IAC7CkW,EAAQgB,IAAI6B,GAAG9W,KAAKsX,EAAQR,GAAO,EAAJ/Y,IAC/BkW,EAAQgB,IAAI6B,GAAG9W,KAAKsX,EAAQR,GAAO,EAAJ/Y,EAAQ,OAKvDgY,gBAAiB,SAAU0C,EAAWC,EAAerR,EAAcwM,GAC/D,GAA4B,IAAxBxM,EAAa7J,OAAjB,CAEAib,EAAUE,sBAAuB,EACjCF,EAAU/F,gBAAgBzB,YAC1B,IAAIxU,EAAOhC,KACX4M,EAAajI,QAAQ,SAAU0I,GAC3BA,EAAYC,WAAW3I,QAAQ,SAAUwZ,GACrC,IAAIC,EAAe1e,EAAQgG,QAAQiT,SAASwF,EAAUvP,YACjC/N,IAAjBud,GACApc,EAAKqc,iBAAiBL,EAAWC,EAAeG,EAAchF,EAAc+E,EAAUnW,YAKtGqW,iBAAkB,SAAUL,EAAWC,EAAeG,EAAchF,EAAcpR,GAM9E,IALA,IAAIyT,OAAqD5a,IAArCod,EAAcvC,mBAAmCuC,EAAcvC,mBAAmBzN,KAClGqQ,OAAiDzd,IAA1Bud,EAAa5C,SAAyB4C,EAAa5C,SAASvN,KACnFL,OAAmC/M,IAAzBud,EAAalQ,QAAwBkQ,EAAalQ,QAAQD,KACpElL,EAA+C,EAAtCib,EAAU9J,WAAWsC,SAAS6E,MACvCkD,EAAiB,IAAIC,aAAazb,GAC7BO,EAAI,EAAGA,EAAIsK,EAAQ7K,OAAQO,IAAK,CACrC,IAAImb,EAA0B,EAAb7Q,EAAQtK,GACzBib,EAAeE,GAAcH,EAAyB,EAAJhb,GAClDib,EAAeE,EAAa,GAAKH,EAAyB,EAAJhb,EAAQ,GAC9Dib,EAAeE,EAAa,GAAKH,EAAyB,EAAJhb,EAAQ,GAElE,IAAIob,GACAjD,cAAeA,EACfF,gBAAiBgD,GAEjBI,EAAe3e,KAAKyZ,WAAWiF,GAC/BhF,EAAoB,IAAIra,EAAMsa,uBAAuBgF,EAAa/E,OAAQ,GAC9EF,EAAkB1R,KAAOA,GAAQoW,EAAanW,SAC9CyR,EAAkBtJ,aAAagJ,GAC/B4E,EAAU/F,gBAAgBzB,SAASjR,KAAKmU,IAE5CsC,aAAc,SAAU4C,GACpB,IAAIjE,EAAciE,EAAWC,uBACzBC,EAAgBF,EAAWG,yBAC3Bve,EAASoe,EAAWI,QAAQ/Q,EAC5BgR,KAQJ,MAPsB,kBAAlBH,IACI,gBAAiBF,EACjBK,EAAcL,EAAWM,YAAYjR,EAC9B,iBAAkB2Q,IACzBK,EAAcL,EAAWO,aAAalR,KAI1CmR,SAAU,EACV5e,OAAQA,EACRoN,QAASqR,EACTtE,YAAaA,EACbmE,cAAeA,IAGvB3C,SAAU,SAAUkD,GAChB,IAAI1E,EAAc0E,EAAOR,uBACrBC,EAAgBO,EAAON,yBACvBve,EAAS6e,EAAOC,GAAGrR,EACnBgR,KAIJ,MAHsB,kBAAlBH,IACAG,EAAcI,EAAOE,QAAQtR,IAG7BmR,SAAU,EACV5e,OAAQA,EACRoN,QAASqR,EACTtE,YAAaA,EACbmE,cAAeA,IAGvBlD,kBAAmB,SAAU4D,GACzB,IAAI7E,EAAc6E,EAAUX,uBACxBC,EAAgBU,EAAUT,yBAC1Bve,EAASgf,EAAUC,OAAOxR,EAC1BgR,KAIJ,MAHsB,kBAAlBH,IACAG,EAAcO,EAAUE,WAAWzR,IAGnCmR,SAAU,EACV5e,OAAQA,EACRoN,QAASqR,EACTtE,YAAaA,EACbmE,cAAeA,IAGvBhD,qBAAsB,SAAU6D,GAC5B,IAAIhF,EAAcgF,EAAad,uBAC3BC,EAAgBa,EAAaZ,yBACjC,GAAoB,yBAAhBpE,EACA,OACIyE,SAAU,EACV5e,QAAS,GACToN,SAAU,GACV+M,YAAa,UACbmE,cAAeA,GAKvB,IAFA,IAAIc,EAAsBD,EAAaE,UAAU5R,EAC7C6R,KACKxc,EAAI,EAAGA,EAAIsc,EAAoB7c,SAAUO,EAC9Cwc,EAAgBva,KAAKjC,GAEzB,OACI8b,SAAU,EACV5e,OAAQof,EACRhS,QAASkS,EACTnF,YAAaA,EACbmE,cAAeA,IAGvB/F,mBAAoB,SAAUF,GAC1B,QAAqBhY,IAAjBkf,EAAEvgB,WAEF,OADA0H,QAAQzE,MAAM,8HACP,IAAIpD,EAAMga,eAErB,IAAI2G,EAAQ9e,SAAS2X,EAAQoH,OAC7B,GAAIC,MAAMF,GAEN,OADA9Y,QAAQzE,MAAM,8DAA+DoW,EAAQoH,MAAOpH,EAAQ9S,IAC7F,IAAI1G,EAAMga,eAMrB,IAJA,IAOI8G,EAAWC,EAPXC,EAASL,EAAQ,EACjBM,EAAQzH,EAAQ0H,WAAWtS,EAC3BuS,KACAC,EAAe5H,EAAQ6H,OAAOzS,EACzB3K,EAAI,EAAGqd,EAAIF,EAAa1d,OAAQO,EAAIqd,EAAGrd,GAAK,EACjDkd,EAAcjb,MAAK,IAAIlG,EAAMuhB,SAAUrW,UAAUkW,EAAcnd,IAGnE,GAAqB,WAAjBuV,EAAQgI,KACRL,EAAcjb,KAAKib,EAAc,SAC9B,GAAqB,aAAjB3H,EAAQgI,KAAqB,CACpCV,EAAYE,EACZD,EAAUE,EAAMvd,OAAS,EAAIod,EAC7B,IAAS7c,EAAI,EAAGA,EAAI+c,IAAU/c,EAC1Bkd,EAAcjb,KAAKib,EAAcld,IAGzC,IACIwd,EADQ,IAAIthB,EAAW6gB,EAAQC,EAAOE,EAAeL,EAAWC,GAC/CW,UAAiC,EAAvBP,EAAczd,QACzCie,EAAY,IAAIxC,aAA+B,EAAlBsC,EAAS/d,QAC1C+d,EAASnc,QAAQ,SAAUiV,EAAQtW,GAC/BsW,EAAOqH,QAAQD,EAAe,EAAJ1d,KAE9B,IAAI2Q,EAAW,IAAI5U,EAAMga,eAEzB,OADApF,EAAS4F,aAAa,WAAY,IAAIxa,EAAM6hB,gBAAgBF,EAAW,IAChE/M,IAKf7T,EAAgBkB,WACZI,YAAatB,EACboC,MAAO,WACH,IAAI2e,KACAC,EAAWphB,KAAKqhB,aACpB,QAAiBxgB,IAAbugB,EACA,IAAK,IAAIE,KAAOF,EAAU,CACtB,IAAIG,EAAUH,EAASE,GACnBE,EAAOxhB,KAAKyhB,QAAQF,GACxBJ,EAAe5b,KAAKic,GAG5B,OAAOL,GAEXE,WAAY,WACR,QAAuCxgB,IAAnCnB,EAAQgG,QAAQgc,eAApB,CAEA,IAAIC,EAAgB3hB,KAAK4hB,2BACzB5hB,KAAK6hB,qBAAqBF,GAC1B,IAAIG,EAAY9hB,KAAK+hB,qBAAqBJ,GAE1C,OADe3hB,KAAKgiB,gBAAgBF,KAGxCF,yBAA0B,WACtB,IAAIK,EAAgBviB,EAAQgG,QAAQwc,mBAChCP,EAAgB,IAAIld,IACxB,IAAK,IAAIoB,KAAUoc,EAAe,CAC9B,IAAIE,EAAeF,EAAcpc,GACjC,GAA2D,OAAvDsc,EAAala,SAAShH,MAAM,uBAAiC,CAC7D,IAAImhB,GACArc,GAAIoc,EAAapc,GACjBsL,KAAM8Q,EAAala,SACnBoa,WAEJV,EAAc1c,IAAImd,EAAUrc,GAAIqc,IAGxC,OAAOT,GAEXE,qBAAsB,SAAUF,GAC5B,IAAIW,EAAY5iB,EAAQgG,QAAQgc,eAChC,IAAK,IAAI7b,KAAUyc,EAAW,CAC1B,IAAIC,GACAxc,GAAIuc,EAAUzc,GAAQE,GACtByc,MAAOF,EAAUzc,GAAQ4c,QAAQxU,EAAElC,IAAI3K,GACvCyH,OAAQyZ,EAAUzc,GAAQ6c,cAAczU,GAExCjB,EAAgBrN,EAAY2F,IAAIid,EAAexc,IACnD,QAAsBlF,IAAlBmM,EAA6B,CAC7B,IAAI2V,EAAmB3V,EAAc9H,QAAQ,GAAGG,GAC5Cud,EAA6B5V,EAAc9H,QAAQ,GAAGH,aACtD6d,EAA2B3hB,MAAM,KACjC0gB,EAAcrc,IAAIqd,GAAkBN,OAAU,EAAIE,EAC3CK,EAA2B3hB,MAAM,KACxC0gB,EAAcrc,IAAIqd,GAAkBN,OAAU,EAAIE,EAC3CK,EAA2B3hB,MAAM,KACxC0gB,EAAcrc,IAAIqd,GAAkBN,OAAU,EAAIE,EAC3CK,EAA2B3hB,MAAM,oBAAsB0gB,EAAc3c,IAAI2d,KAChFhB,EAAcrc,IAAIqd,GAAkBN,OAAc,MAAIE,MAKtER,qBAAsB,SAAUJ,GAC5B,IAAIkB,EAAYnjB,EAAQgG,QAAQod,eAC5BhB,EAAY,IAAIrd,IACpB,IAAK,IAAIoB,KAAUgd,EAAW,CAC1B,IAAIE,KACAzT,EAAa3P,EAAY2F,IAAIpE,SAAS2E,IAC1C,QAAmBhF,IAAfyO,EACeA,EAAWnK,SACjBR,QAAQ,SAAUgH,EAAOrI,GAC9B,GAAIqe,EAAc3c,IAAI2G,EAAMtG,IAAK,CAC7B,IAAI+c,EAAYT,EAAcrc,IAAIqG,EAAMtG,IACxC,QAA2BxE,IAAvBuhB,EAAUC,OAAOrZ,QAA0CnI,IAAvBuhB,EAAUC,OAAOpZ,QAA0CpI,IAAvBuhB,EAAUC,OAAOW,EAAiB,CAC1G,QAA2BniB,IAAvBkiB,EAAgBzf,GAIhB,QAAgBzC,KAHZoiB,EAAUtjB,EAAY2F,IAAIqG,EAAMtG,IAAIH,QAAQ2J,OAAO,SAAUU,GAC7D,YAA+B1O,IAAxB0O,EAAOxK,eACf,GAAGM,IACqB,CACvB,IACIwK,GACAqT,WAFAC,EAAWzjB,EAAQgG,QAAQwJ,MAAM+T,EAAQvI,aAErBzS,SAAW5I,EAAMwR,gBAAgBC,iBAAiBqS,EAASlb,UAAY,GAC3F5C,GAAI8d,EAASpd,GACbqd,iBACI,EACA,EACA,GAEJC,iBACI,EACA,EACA,GAEJC,cACI,EACA,EACA,IAGR1jB,EAAWgQ,SAAS,SAAUjE,GACtBA,EAAMtG,KAAO8d,EAASpd,KACtB8J,EAAKK,UAAYvE,EAAMsE,OACnBtE,EAAMmE,SAASC,gBACfF,EAAKmF,WAAarJ,EAAMmE,SAASC,cAAciF,eAGtDnF,EAAKK,YACNL,EAAKK,UAAY,IAAI7Q,EAAM0O,SAC3B,gBAAiBoV,IACjBtT,EAAKwF,YAAc8N,EAAS7N,YAAY/M,OACxC,iBAAkB4a,IAClBtT,EAAK4F,aAAe0N,EAASzN,aAAanN,OAC9Cwa,EAAgBzf,GAAKuM,EAGzBkT,EAAgBzf,KAChByf,EAAgBzf,GAAG8e,EAAU/Q,MAAQ+Q,QACtC,QAA+BvhB,IAA3BuhB,EAAUC,OAAOkB,MAAqB,CAC7C,QAA2B1iB,IAAvBkiB,EAAgBzf,GAAkB,CAClC,IAMI6f,EANAK,EAAa7jB,EAAY2F,IAAIqG,EAAMtG,IAAIH,QAAQ2J,OAAO,SAAUU,GAChE,YAA+B1O,IAAxB0O,EAAOxK,eACf,GAAGM,GACFoe,EAAY9jB,EAAY2F,IAAIke,GAAYte,QAAQ,GAAGG,GACnDuJ,EAAQjP,EAAY2F,IAAIme,GAAWve,QAAQ,GAAGG,GAC9C4d,EAAUtjB,EAAY2F,IAAIsJ,GAAO1J,QAAQ,GAAGG,GAE5CwK,GACAqT,WAFAC,EAAWzjB,EAAQgG,QAAQwJ,MAAM+T,IAEbhb,SAAW5I,EAAMwR,gBAAgBC,iBAAiBqS,EAASlb,UAAY,GAC3Fyb,UAAWhkB,EAAQgG,QAAQoH,SAAS0W,GAAYvb,UAEpD8a,EAAgBzf,GAAKuM,EAEzBkT,EAAgBzf,GAAG8e,EAAU/Q,MAAQ+Q,MAIjDN,EAAU7c,IAAI/D,SAAS2E,GAASkd,GAGxC,OAAOjB,GAEXE,gBAAiB,SAAUF,GACvB,IAAI6B,EAAYjkB,EAAQgG,QAAQke,eAC5BxC,KACJ,IAAK,IAAIvb,KAAU8d,EAAW,CAC1B,IAAIxe,EAAWxF,EAAY2F,IAAIpE,SAAS2E,IAASV,SAC7CA,EAASpC,OAAS,GAClBmE,QAAQC,KAAK,sIAEjB,IAAI0c,EAAQ/B,EAAUxc,IAAIH,EAAS,GAAGE,IACtC+b,EAASvb,IACLmC,KAAM2b,EAAU9d,GAAQoC,SACxB4b,MAAOA,GAGf,OAAOzC,GAEXK,QAAS,SAAUF,GACf,IAAIuC,KACA9hB,EAAOhC,KAIX,OAHAuhB,EAAQsC,MAAMlf,QAAQ,SAAUof,GAC5BD,EAASA,EAAOE,OAAOhiB,EAAKiiB,eAAeF,MAExC,IAAI1kB,EAAM6kB,cAAc3C,EAAQvZ,MAAO,EAAG8b,IAErDG,eAAgB,SAAUF,GACtB,IAAID,KACAV,EAAkB,IAAI/jB,EAAMqX,QAC5B2M,EAAkB,IAAIhkB,EAAM8kB,WAC5Bb,EAAe,IAAIjkB,EAAMqX,QAM7B,GALIqN,EAAU7T,WACV6T,EAAU7T,UAAUkU,UAAUhB,EAAiBC,EAAiBC,GACpEF,EAAkBA,EAAgBnC,UAClCoC,GAAkB,IAAIhkB,EAAMglB,OAAQC,kBAAkBjB,EAAiBU,EAAU/O,YAAYiM,UAC7FqC,EAAeA,EAAarC,eACRpgB,IAAhBkjB,EAAUQ,GAAmBhjB,OAAOijB,KAAKT,EAAUQ,EAAElC,QAAQtf,OAAS,EAAG,CACzE,IAAI0hB,EAAgBzkB,KAAK0kB,oBAAoBX,EAAUb,UAAWa,EAAUQ,EAAElC,OAAQe,EAAiB,iBACjFviB,IAAlB4jB,GACAX,EAAOve,KAAKkf,GAEpB,QAAoB5jB,IAAhBkjB,EAAUY,GAAmBpjB,OAAOijB,KAAKT,EAAUY,EAAEtC,QAAQtf,OAAS,EAAG,CACzE,IAAI6hB,EAAgB5kB,KAAK6kB,sBAAsBd,EAAUb,UAAWa,EAAUY,EAAEtC,OAAQgB,EAAiBU,EAAU1O,YAAa0O,EAAUtO,aAAcsO,EAAU/O,iBAC5InU,IAAlB+jB,GACAd,EAAOve,KAAKqf,GAEpB,QAAoB/jB,IAAhBkjB,EAAUe,GAAmBvjB,OAAOijB,KAAKT,EAAUe,EAAEzC,QAAQtf,OAAS,EAAG,CACzE,IAAIgiB,EAAa/kB,KAAK0kB,oBAAoBX,EAAUb,UAAWa,EAAUe,EAAEzC,OAAQiB,EAAc,cAC9EziB,IAAfkkB,GACAjB,EAAOve,KAAKwf,GAEpB,QAAgClkB,IAA5BkjB,EAAUtV,cAA6B,CACvC,IAAIuW,EAAahlB,KAAKilB,mBAAmBlB,QACtBljB,IAAfmkB,GACAlB,EAAOve,KAAKyf,GAEpB,OAAOlB,GAEXY,oBAAqB,SAAUxB,EAAWb,EAAQ6C,EAAcve,GAC5D,IAAI6b,EAAQxiB,KAAKmlB,mBAAmB9C,GAChCxZ,EAAS7I,KAAKolB,uBAAuB5C,EAAOH,EAAQ6C,GACxD,OAAO,IAAI7lB,EAAMgmB,oBAAoBnC,EAAY,IAAMvc,EAAM6b,EAAO3Z,IAExEgc,sBAAuB,SAAU3B,EAAWb,EAAQ6C,EAAc7P,EAAaI,EAAcT,QACxEnU,IAAbwhB,EAAOrZ,IACPhJ,KAAKslB,qBAAqBjD,EAAOrZ,GACjCqZ,EAAOrZ,EAAEH,OAASwZ,EAAOrZ,EAAEH,OAAOkD,IAAI1M,EAAMoU,UAAUC,gBAEzC7S,IAAbwhB,EAAOpZ,IACPjJ,KAAKslB,qBAAqBjD,EAAOpZ,GACjCoZ,EAAOpZ,EAAEJ,OAASwZ,EAAOpZ,EAAEJ,OAAOkD,IAAI1M,EAAMoU,UAAUC,gBAEzC7S,IAAbwhB,EAAOW,IACPhjB,KAAKslB,qBAAqBjD,EAAOW,GACjCX,EAAOW,EAAEna,OAASwZ,EAAOW,EAAEna,OAAOkD,IAAI1M,EAAMoU,UAAUC,WAE1D,IAAI8O,EAAQxiB,KAAKmlB,mBAAmB9C,GAChCxZ,EAAS7I,KAAKolB,uBAAuB5C,EAAOH,EAAQ6C,QACpCrkB,IAAhBwU,KACAA,EAAcA,EAAYtJ,IAAI1M,EAAMoU,UAAUC,WAClCnO,KAAKyP,GACjBK,GAAc,IAAIhW,EAAMglB,OAAQ9Z,UAAU8K,GAC1CA,GAAc,IAAIhW,EAAM8kB,YAAaoB,aAAalQ,SAEjCxU,IAAjB4U,KACAA,EAAeA,EAAa1J,IAAI1M,EAAMoU,UAAUC,WACnCnO,KAAKyP,GAClBS,GAAe,IAAIpW,EAAMglB,OAAQ9Z,UAAUkL,GAC3CA,GAAe,IAAIpW,EAAM8kB,YAAaoB,aAAa9P,GAAc+P,WAKrE,IAHA,IAAIC,EAAa,IAAIpmB,EAAM8kB,WACvBuB,EAAQ,IAAIrmB,EAAMglB,MAClBsB,KACKriB,EAAI,EAAGA,EAAIuF,EAAO9F,OAAQO,GAAK,EACpCoiB,EAAMzgB,IAAI4D,EAAOvF,GAAIuF,EAAOvF,EAAI,GAAIuF,EAAOvF,EAAI,GAAI0R,GACnDyQ,EAAWF,aAAaG,QACJ7kB,IAAhBwU,GACAoQ,EAAWG,YAAYvQ,QACNxU,IAAjB4U,GACAgQ,EAAWI,SAASpQ,GACxBgQ,EAAWxE,QAAQ0E,EAAkBriB,EAAI,EAAI,GAEjD,OAAO,IAAIjE,EAAMymB,wBAAwB5C,EAAY,cAAeV,EAAOmD,IAE/EV,mBAAoB,SAAUlB,GAC1B,IAAI1B,EAAS0B,EAAUtV,cAAc4T,OAAOkB,MACxC1a,EAASwZ,EAAOxZ,OAAOkD,IAAI,SAAUga,GACrC,OAAOA,EAAM,MAEbC,EAAWpmB,EAAWqmB,gBAAgBlC,EAAUb,WAAWgD,sBAAsBnC,EAAUL,WAC/F,OAAO,IAAIrkB,EAAM8mB,oBAAoBpC,EAAUb,UAAY,0BAA4B8C,EAAW,IAAK3D,EAAOG,MAAO3Z,IAEzHsc,mBAAoB,SAAU9C,GAC1B,IAAIG,KAYJ,YAXiB3hB,IAAbwhB,EAAOrZ,IACPwZ,EAAQA,EAAMwB,OAAO3B,EAAOrZ,EAAEwZ,aACjB3hB,IAAbwhB,EAAOpZ,IACPuZ,EAAQA,EAAMwB,OAAO3B,EAAOpZ,EAAEuZ,aACjB3hB,IAAbwhB,EAAOW,IACPR,EAAQA,EAAMwB,OAAO3B,EAAOW,EAAER,QAClCA,EAAQA,EAAM4D,KAAK,SAAUnY,EAAG6J,GAC5B,OAAO7J,EAAI6J,IACZjJ,OAAO,SAAUwX,EAAMlO,EAAO/Q,GAC7B,OAAOA,EAAM+B,QAAQkd,IAASlO,KAItCiN,uBAAwB,SAAU5C,EAAOH,EAAQ6C,GAC7C,IAAIoB,EAAYpB,EACZrc,KACA0d,GAAU,EACVC,GAAU,EACVC,GAAU,EA8Bd,OA7BAjE,EAAM7d,QAAQ,SAAUtD,GAOpB,GANIghB,EAAOrZ,IACPud,EAASlE,EAAOrZ,EAAEwZ,MAAMrZ,QAAQ9H,IAChCghB,EAAOpZ,IACPud,EAASnE,EAAOpZ,EAAEuZ,MAAMrZ,QAAQ9H,IAChCghB,EAAOW,IACPyD,EAASpE,EAAOW,EAAER,MAAMrZ,QAAQ9H,KACpB,IAAZklB,EAAe,CACf,IAAIG,EAASrE,EAAOrZ,EAAEH,OAAO0d,GAC7B1d,EAAOtD,KAAKmhB,GACZJ,EAAU,GAAKI,OAEf7d,EAAOtD,KAAK+gB,EAAU,IAE1B,IAAgB,IAAZE,EAAe,CACf,IAAIG,EAAStE,EAAOpZ,EAAEJ,OAAO2d,GAC7B3d,EAAOtD,KAAKohB,GACZL,EAAU,GAAKK,OAEf9d,EAAOtD,KAAK+gB,EAAU,IAE1B,IAAgB,IAAZG,EAAe,CACf,IAAIG,EAASvE,EAAOW,EAAEna,OAAO4d,GAC7B5d,EAAOtD,KAAKqhB,GACZN,EAAU,GAAKM,OAEf/d,EAAOtD,KAAK+gB,EAAU,MAGvBzd,GAEXyc,qBAAsB,SAAUuB,GAC5B,IAAK,IAAIvjB,EAAI,EAAGA,EAAIujB,EAAMhe,OAAO9F,OAAQO,IAAK,CAC1C,IAAI4hB,EAAe2B,EAAMhe,OAAOvF,EAAI,GAChCwjB,EAAaD,EAAMhe,OAAOvF,GAAK4hB,EAC/B6B,EAAezT,KAAK0T,IAAIF,GAC5B,GAAIC,GAAgB,IAAK,CAUrB,IATA,IAAIE,EAAkBF,EAAe,IACjCG,EAAOJ,EAAaG,EACpBE,EAAYjC,EAAegC,EAC3BE,EAAcP,EAAMrE,MAAMlf,EAAI,GAE9B+jB,GADWR,EAAMrE,MAAMlf,GAAK8jB,GACNH,EACtBK,EAAWF,EAAcC,EACzBE,KACAC,KACGF,EAAWT,EAAMrE,MAAMlf,IAC1BikB,EAAkBhiB,KAAK+hB,GACvBA,GAAYD,EACZG,EAAmBjiB,KAAK4hB,GACxBA,GAAaD,EAEjBL,EAAMrE,MAAQiF,EAAOZ,EAAMrE,MAAOlf,EAAGikB,GACrCV,EAAMhe,OAAS4e,EAAOZ,EAAMhe,OAAQvF,EAAGkkB,OAOvDnnB,EAAWiB,WACPI,YAAarB,EACbqnB,YAAa,WACT,OAAO1nB,KAAK2nB,UAAU3nB,KAAK4nB,cAAgB,IAE/CC,eAAgB,WACZ,OAAO7nB,KAAK2nB,UAAU3nB,KAAK4nB,cAAgB,IAE/CE,eAAgB,WACZ,OAAO9nB,KAAK+nB,aAEhBC,UAAW,SAAUnY,GACjB7P,KAAK2nB,UAAUpiB,KAAKsK,GACpB7P,KAAK4nB,eAAiB,GAE1BK,SAAU,WACNjoB,KAAK2nB,UAAUjhB,MACf1G,KAAK4nB,eAAiB,GAE1BM,eAAgB,SAAUnC,EAAK/d,GAC3BhI,KAAK+nB,YAAchC,EACnB/lB,KAAKmoB,gBAAkBngB,GAE3BxF,MAAO,SAAUxB,GACbhB,KAAK4nB,cAAgB,EACrB5nB,KAAKooB,SAAW,IAAItnB,EACpBd,KAAK2nB,aACL3nB,KAAK+nB,eACL/nB,KAAKmoB,gBAAkB,GACvB,IAAInmB,EAAOhC,KACPyG,EAAQzF,EAAKyF,MAAM,WAmBvB,OAlBAA,EAAM9B,QAAQ,SAAU0jB,EAAM/kB,GAC1B,IAAIglB,EAAeD,EAAKpnB,MAAM,aAC1BsnB,EAAaF,EAAKpnB,MAAM,aAC5B,IAAIqnB,IAAgBC,EAApB,CAEA,IAAIC,EAAiBH,EAAKpnB,MAAM,QAAUe,EAAK4lB,cAAgB,gBAAiB,IAC5Ea,EAAgBJ,EAAKpnB,MAAM,QAAUe,EAAK4lB,cAAgB,8BAC1Dc,EAAWL,EAAKpnB,MAAM,SAAWe,EAAK4lB,cAAgB,GAAK,MAC3DY,EACAxmB,EAAK2mB,eAAeN,EAAMG,GACnBC,EACPzmB,EAAK4mB,kBAAkBP,EAAMI,EAAehiB,IAAQnD,IAC7ColB,EACP1mB,EAAKimB,WACEI,EAAKpnB,MAAM,cAClBe,EAAK6mB,2BAA2BR,MAGjCroB,KAAKooB,UAEhBO,eAAgB,SAAUN,EAAMS,GAC5B,IAAIC,EAAWD,EAAS,GAAGE,OAAOC,QAAQ,KAAM,IAAIA,QAAQ,KAAM,IAC9DC,EAAYJ,EAAS,GAAGriB,MAAM,KAAKsF,IAAI,SAAUsF,GACjD,OAAOA,EAAK2X,OAAOC,QAAQ,KAAM,IAAIA,QAAQ,KAAM,MAEnDpZ,GAAS7H,KAAM+gB,GACfI,EAAQnpB,KAAKopB,cAAcF,GAC3BG,EAAcrpB,KAAK6nB,iBACI,IAAvB7nB,KAAK4nB,cACL5nB,KAAKooB,SAAS5Y,IAAIuZ,EAAUlZ,GAExBkZ,KAAYM,GACK,aAAbN,EACAM,EAAYlS,SAAS5R,KAAKsK,QACUhP,IAA7BwoB,EAAYN,GAAUhjB,KAC7BsjB,EAAYN,MACZM,EAAYN,GAAUM,EAAYN,GAAUhjB,IAAMsjB,EAAYN,IAEjD,KAAbI,EAAMpjB,KACNsjB,EAAYN,GAAUI,EAAMpjB,IAAM8J,IACX,iBAAbsZ,EAAMpjB,IACpBsjB,EAAYN,MACZM,EAAYN,GAAUI,EAAMpjB,IAAM8J,GACd,iBAAbkZ,IAEHM,EAAYN,GADC,aAAbA,GACyBlZ,GAEDA,GAGZ,iBAAbsZ,EAAMpjB,KACb8J,EAAK9J,GAAKojB,EAAMpjB,IACD,KAAfojB,EAAMnhB,OACN6H,EAAK5H,SAAWkhB,EAAMnhB,MACP,KAAfmhB,EAAMxiB,OACNkJ,EAAK5C,SAAWkc,EAAMxiB,MAC1B3G,KAAKgoB,UAAUnY,IAEnBuZ,cAAe,SAAUD,GACrB,IAAIpjB,EAAKojB,EAAM,GACE,KAAbA,EAAM,KACNpjB,EAAK7E,SAASioB,EAAM,IAChBjJ,MAAMna,KACNA,EAAKojB,EAAM,KAGnB,IAAInhB,EAAO,GAAIrB,EAAO,GAKtB,OAJIwiB,EAAMpmB,OAAS,IACfiF,EAAOmhB,EAAM,GAAGF,QAAQ,WAAY,IACpCtiB,EAAOwiB,EAAM,KAGbpjB,GAAIA,EACJiC,KAAMA,EACNrB,KAAMA,IAGdiiB,kBAAmB,SAAUP,EAAMS,EAAUQ,GACzC,IAAIC,EAAWT,EAAS,GAAGG,QAAQ,KAAM,IAAIA,QAAQ,KAAM,IAAID,OAC3DQ,EAAYV,EAAS,GAAGG,QAAQ,KAAM,IAAIA,QAAQ,KAAM,IAAID,OAC/C,YAAbO,GAAwC,MAAdC,IAC1BA,EAAYF,EAAYL,QAAQ,KAAM,IAAIA,QAAQ,KAAM,IAAID,QAEhE,IAAIK,EAAcrpB,KAAK6nB,iBAEvB,GAAmB,iBADFwB,EAAYrhB,KAC7B,CAIA,GAAiB,MAAbuhB,EAAkB,CAClB,IAAIE,EAAYD,EAAU/iB,MAAM,KAAKpD,MAAM,GACvCqmB,EAAOxoB,SAASuoB,EAAU,IAC1BE,EAAKzoB,SAASuoB,EAAU,IACxBG,EAAOJ,EAAU/iB,MAAM,KAAKpD,MAAM,GAItCkmB,EAAW,cAmkBvB,SAAgBtb,EAAG6J,GACf,IAAK,IAAIxU,EAAI,EAAG+Y,EAAIpO,EAAElL,OAAQ4d,EAAI7I,EAAE/U,OAAQO,EAAIqd,EAAGrd,IAAK+Y,IACpDpO,EAAEoO,GAAKvE,EAAExU,GAhkBLumB,CAJAL,GACIE,EACAC,GANJC,EAAOA,EAAK7d,IAAI,SAAUsa,GACtB,OAAOA,EAAK2C,OAAOC,QAAQ,KAAM,YAQPpoB,IAA1BwoB,EAAYE,KACZF,EAAYE,OAGH,SAAbA,IACAF,EAAYtjB,GAAKyjB,GACjBD,KAAYF,GAAejS,MAAMC,QAAQgS,EAAYE,IACrDF,EAAYE,GAAUhkB,KAAKikB,GAEV,MAAbD,EACAF,EAAYE,GAAYC,EAExBH,EAAYpb,EAAIub,EAExBxpB,KAAKkoB,eAAemB,EAAaE,GAChB,MAAbA,GAA4C,MAAxBC,EAAUnmB,OAAO,KACrCgmB,EAAYpb,EAAI6b,EAAiBN,SAjCjCxpB,KAAK+pB,yBAAyB1B,EAAMkB,EAAUC,IAoCtDX,2BAA4B,SAAUR,GAClC,IAAIgB,EAAcrpB,KAAK6nB,iBACvBwB,EAAYpb,GAAKoa,EACM,MAAnBA,EAAKhlB,OAAO,KACZgmB,EAAYpb,EAAI6b,EAAiBT,EAAYpb,KAGrD8b,yBAA0B,SAAU1B,EAAMkB,EAAUC,GAChD,IAAIQ,EAAQR,EAAU/iB,MAAM,MAAMsF,IAAI,SAAUke,GAC5C,OAAOA,EAAKjB,OAAOC,QAAQ,MAAO,IAAIA,QAAQ,KAAM,OAEpDiB,EAAgBF,EAAM,GACtBG,EAAiBH,EAAM,GACvBI,EAAiBJ,EAAM,GACvBK,EAAgBL,EAAM,GACtBM,EAAiBN,EAAM,GAC3B,OAAQG,GACR,IAAK,MACL,IAAK,OACL,IAAK,OACL,IAAK,YACL,IAAK,SACL,IAAK,SACL,IAAK,cACDG,EAAiBtf,WAAWsf,GAC5B,MACJ,IAAK,QACL,IAAK,WACL,IAAK,WACL,IAAK,kBACL,IAAK,eACL,IAAK,cACDA,EAAiBR,EAAiBQ,GAGtCtqB,KAAK0nB,cAAcwC,IACfvjB,KAAQwjB,EACRI,MAASH,EACTI,KAAQH,EACR9hB,MAAS+hB,GAEbtqB,KAAKkoB,eAAeloB,KAAK0nB,cAAewC,KAKhD5pB,EAAagB,WACTI,YAAapB,EACbkC,MAAO,SAAUhC,GACb,IAAIiqB,EAAS,IAAIlqB,EAAaC,GAC9BiqB,EAAOC,KAAK,IACZ,IAAIC,EAAUF,EAAOG,YACrB1jB,QAAQ2jB,IAAI,wCAA0CF,GAEtD,IADA,IAAIvC,EAAW,IAAItnB,GACXd,KAAK8qB,aAAaL,IAAS,CAC/B,IAAI5a,EAAO7P,KAAK+qB,UAAUN,EAAQE,GACrB,OAAT9a,GACAuY,EAAS5Y,IAAIK,EAAK7H,KAAM6H,GAEhC,OAAOuY,GAEX0C,aAAc,SAAUL,GACpB,OAAIA,EAAOO,OAAS,IAAO,GACfP,EAAOQ,YAAc,IAAM,IAAK,KAAQR,EAAOO,OAEhDP,EAAOQ,YAAc,IAAM,IAAMR,EAAOO,QAGvDD,UAAW,SAAUN,EAAQE,GACzB,IAAI9a,KACAqb,EAAYP,GAAW,KAAOF,EAAOU,YAAcV,EAAOG,YAC1DQ,EAAgBT,GAAW,KAAOF,EAAOU,YAAcV,EAAOG,YAE9DS,GADkBV,GAAW,KAAOF,EAAOU,YAAcV,EAAOG,YACtDH,EAAOa,YACjBtjB,EAAOyiB,EAAOc,UAAUF,GAC5B,GAAkB,IAAdH,EACA,OAAO,KAEX,IADA,IAAIM,KACKloB,EAAI,EAAGA,EAAI8nB,EAAe9nB,IAC/BkoB,EAAajmB,KAAKvF,KAAKyrB,cAAchB,IAEzC,IAAI1kB,EAAKylB,EAAazoB,OAAS,EAAIyoB,EAAa,GAAK,GACjDvjB,EAAWujB,EAAazoB,OAAS,EAAIyoB,EAAa,GAAK,GACvDve,EAAWue,EAAazoB,OAAS,EAAIyoB,EAAa,GAAK,GAE3D,IADA3b,EAAK6b,eAAmC,IAAlBN,GAAuBX,EAAOQ,cAAgBC,EAC7DA,EAAYT,EAAOQ,aAAa,CACnC,IAAIU,EAAU3rB,KAAK+qB,UAAUN,EAAQE,GACrB,OAAZgB,GACA3rB,KAAK4rB,aAAa5jB,EAAM6H,EAAM8b,GAWtC,OATA9b,EAAK2b,aAAeA,EACF,iBAAPzlB,IACP8J,EAAK9J,GAAKA,GACG,KAAbkC,IACA4H,EAAK5H,SAAWA,GACH,KAAbgF,IACA4C,EAAK5C,SAAWA,GACP,KAATjF,IACA6H,EAAK7H,KAAOA,GACT6H,GAEX+b,aAAc,SAAU5jB,EAAM6H,EAAM8b,GAChC,IAA+B,IAA3BA,EAAQD,eAAyB,CACjC,IAAInjB,EAAQojB,EAAQH,aAAa,GAC7BpU,MAAMC,QAAQ9O,IACdsH,EAAK8b,EAAQ3jB,MAAQ2jB,EACrBA,EAAQ1d,EAAI1F,GAEZsH,EAAK8b,EAAQ3jB,MAAQO,OAEtB,GAAa,gBAATP,GAA2C,MAAjB2jB,EAAQ3jB,KAAc,CACvD,IAAIZ,KACJukB,EAAQH,aAAa7mB,QAAQ,SAAUmkB,EAAUxlB,GACnC,IAANA,GACA8D,EAAM7B,KAAKujB,UAEMjoB,IAArBgP,EAAKlQ,cACLkQ,EAAKlQ,gBAETkQ,EAAKlQ,YAAY4F,KAAK6B,QACnB,GAAqB,iBAAjBukB,EAAQ3jB,KAAyB,CAC7BzG,OAAOijB,KAAKmH,GAClBhnB,QAAQ,SAAU2c,GACnBzR,EAAKyR,GAAOqK,EAAQrK,UAErB,GAAa,iBAATtZ,GAA4C,MAAjB2jB,EAAQ3jB,KAAc,CACxD,IAIIsiB,EAJAJ,EAAgByB,EAAQH,aAAa,GACrCrB,EAAiBwB,EAAQH,aAAa,GACtCpB,EAAiBuB,EAAQH,aAAa,GACtCnB,EAAgBsB,EAAQH,aAAa,GAEH,IAAlCtB,EAAc/gB,QAAQ,UACtB+gB,EAAgBA,EAAcjB,QAAQ,OAAQ,SACX,IAAnCkB,EAAehhB,QAAQ,UACvBghB,EAAiBA,EAAelB,QAAQ,OAAQ,SAEhDqB,EADmB,UAAnBH,GAAiD,aAAnBA,GAAoD,WAAnBA,GAAkD,aAAnBA,GAAoE,IAAnCA,EAAehhB,QAAQ,SAElJwiB,EAAQH,aAAa,GACrBG,EAAQH,aAAa,GACrBG,EAAQH,aAAa,IAGRG,EAAQH,aAAa,GAE1C3b,EAAKqa,IACDvjB,KAAQwjB,EACRI,MAASH,EACTI,KAAQH,EACR9hB,MAAS+hB,aAEiBzpB,IAAvBgP,EAAK8b,EAAQ3jB,MACM,iBAAf2jB,EAAQ5lB,IACf8J,EAAK8b,EAAQ3jB,SACb6H,EAAK8b,EAAQ3jB,MAAM2jB,EAAQ5lB,IAAM4lB,GAEjC9b,EAAK8b,EAAQ3jB,MAAQ2jB,EAGJ,aAAjBA,EAAQ3jB,MACHoP,MAAMC,QAAQxH,EAAK8b,EAAQ3jB,SAC5B6H,EAAK8b,EAAQ3jB,OAAS6H,EAAK8b,EAAQ3jB,QAEvC6H,EAAK8b,EAAQ3jB,MAAMzC,KAAKomB,SACkB9qB,IAAnCgP,EAAK8b,EAAQ3jB,MAAM2jB,EAAQ5lB,MAClC8J,EAAK8b,EAAQ3jB,MAAM2jB,EAAQ5lB,IAAM4lB,IAI7CF,cAAe,SAAUhB,GACrB,IAAI9jB,EAAO8jB,EAAOc,UAAU,GAC5B,OAAQ5kB,GACR,IAAK,IACD,OAAO8jB,EAAOoB,aAClB,IAAK,IACD,OAAOpB,EAAOqB,aAClB,IAAK,IACD,OAAOrB,EAAOsB,aAClB,IAAK,IACD,OAAOtB,EAAOuB,WAClB,IAAK,IACD,OAAOvB,EAAOwB,WAClB,IAAK,IACD,IAAIlpB,EAAS0nB,EAAOG,YACpB,OAAOH,EAAOyB,eAAenpB,GACjC,IAAK,IACGA,EAAS0nB,EAAOG,YACpB,OAAOH,EAAOc,UAAUxoB,GAC5B,IAAK,IACD,OAAO0nB,EAAO0B,WAClB,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,IAAIC,EAAc3B,EAAOG,YACrB5e,EAAWye,EAAOG,YAClByB,EAAmB5B,EAAOG,YAC9B,GAAiB,IAAb5e,EACA,OAAQrF,GACR,IAAK,IACL,IAAK,IACD,OAAO8jB,EAAO6B,gBAAgBF,GAClC,IAAK,IACD,OAAO3B,EAAO8B,gBAAgBH,GAClC,IAAK,IACD,OAAO3B,EAAO+B,gBAAgBJ,GAClC,IAAK,IACD,OAAO3B,EAAOgC,cAAcL,GAChC,IAAK,IACD,OAAO3B,EAAOiC,cAAcN,GAMpC,IACIO,EAAU,IAAIpsB,EADJ,IAAIhB,EAAQ,IAAI8H,WAAWojB,EAAOyB,eAAeG,KACxBO,aAAapsB,QACpD,OAAQmG,GACR,IAAK,IACL,IAAK,IACD,OAAOgmB,EAAQL,gBAAgBF,GACnC,IAAK,IACD,OAAOO,EAAQJ,gBAAgBH,GACnC,IAAK,IACD,OAAOO,EAAQH,gBAAgBJ,GACnC,IAAK,IACD,OAAOO,EAAQF,cAAcL,GACjC,IAAK,IACD,OAAOO,EAAQD,cAAcN,GAErC,QACI,MAAM,IAAIjrB,MAAM,0CAA4CwF,MASxEpG,EAAae,WACTI,YAAanB,EACb0qB,UAAW,WACP,OAAOjrB,KAAKY,QAEhBoqB,KAAM,WACF,OAAOhrB,KAAKU,GAAGF,OAAOsC,YAE1B4nB,KAAM,SAAU3nB,GACZ/C,KAAKY,QAAUmC,GAEnB8oB,WAAY,WACR,OAAiC,IAAP,EAAlB7rB,KAAKsrB,aAEjBgB,gBAAiB,SAAUtB,GAEvB,IADA,IAAI/c,KACK3K,EAAI,EAAGA,EAAI0nB,EAAM1nB,IACtB2K,EAAE1I,KAAKvF,KAAK6rB,cAEhB,OAAO5d,GAEXqd,SAAU,WACN,IAAI/iB,EAAQvI,KAAKU,GAAG4qB,SAAStrB,KAAKY,QAElC,OADAZ,KAAKY,QAAU,EACR2H,GAEX4jB,SAAU,WACN,IAAI5jB,EAAQvI,KAAKU,GAAGyrB,SAASnsB,KAAKY,OAAQZ,KAAKS,cAE/C,OADAT,KAAKY,QAAU,EACR2H,GAEXyjB,SAAU,WACN,IAAIzjB,EAAQvI,KAAKU,GAAGsrB,SAAShsB,KAAKY,OAAQZ,KAAKS,cAE/C,OADAT,KAAKY,QAAU,EACR2H,GAEXkkB,cAAe,SAAUzB,GAErB,IADA,IAAI/c,KACK3K,EAAI,EAAGA,EAAI0nB,EAAM1nB,IACtB2K,EAAE1I,KAAKvF,KAAKgsB,YAEhB,OAAO/d,GAEX2c,UAAW,WACP,IAAIriB,EAAQvI,KAAKU,GAAGkqB,UAAU5qB,KAAKY,OAAQZ,KAAKS,cAEhD,OADAT,KAAKY,QAAU,EACR2H,GAEX0jB,SAAU,WACN,IAAIY,EAAKC,EAQT,OAPI9sB,KAAKS,cACLosB,EAAM7sB,KAAK4qB,YACXkC,EAAO9sB,KAAK4qB,cAEZkC,EAAO9sB,KAAK4qB,YACZiC,EAAM7sB,KAAK4qB,aAEJ,WAAPkC,GACAA,EAAe,YAAPA,EAEI,cADZD,EAAa,YAANA,KAEHC,EAAOA,EAAO,EAAI,cAEN,WAAPA,GADTD,EAAMA,EAAM,EAAI,cAGN,WAAPC,EAAoBD,GAE/BH,cAAe,SAAU1B,GAErB,IADA,IAAI/c,KACK3K,EAAI,EAAGA,EAAI0nB,EAAM1nB,IACtB2K,EAAE1I,KAAKvF,KAAKisB,YAEhB,OAAOhe,GAEXkd,UAAW,WACP,IAAI0B,EAAKC,EAQT,OAPI9sB,KAAKS,cACLosB,EAAM7sB,KAAK4qB,YACXkC,EAAO9sB,KAAK4qB,cAEZkC,EAAO9sB,KAAK4qB,YACZiC,EAAM7sB,KAAK4qB,aAED,WAAPkC,EAAoBD,GAE/Bd,WAAY,WACR,IAAIxjB,EAAQvI,KAAKU,GAAGqrB,WAAW/rB,KAAKY,OAAQZ,KAAKS,cAEjD,OADAT,KAAKY,QAAU,EACR2H,GAEXikB,gBAAiB,SAAUxB,GAEvB,IADA,IAAI/c,KACK3K,EAAI,EAAGA,EAAI0nB,EAAM1nB,IACtB2K,EAAE1I,KAAKvF,KAAK+rB,cAEhB,OAAO9d,GAEX6d,WAAY,WACR,IAAIvjB,EAAQvI,KAAKU,GAAGorB,WAAW9rB,KAAKY,OAAQZ,KAAKS,cAEjD,OADAT,KAAKY,QAAU,EACR2H,GAEXgkB,gBAAiB,SAAUvB,GAEvB,IADA,IAAI/c,KACK3K,EAAI,EAAGA,EAAI0nB,EAAM1nB,IACtB2K,EAAE1I,KAAKvF,KAAK8rB,cAEhB,OAAO7d,GAEXie,eAAgB,SAAUlB,GACtB,IAAIziB,EAAQvI,KAAKU,GAAGF,OAAO6C,MAAMrD,KAAKY,OAAQZ,KAAKY,OAASoqB,GAE5D,OADAhrB,KAAKY,QAAUoqB,EACRziB,GAEXgjB,UAAW,SAAUP,GAEjB,IADA,IAAI/c,KACK3K,EAAI,EAAGA,EAAI0nB,EAAM1nB,IACtB2K,EAAE3K,GAAKtD,KAAKsrB,WAEhB,IAAIyB,EAAW9e,EAAE9E,QAAQ,GAGzB,OAFI4jB,GAAY,IACZ9e,EAAIA,EAAE5K,MAAM,EAAG0pB,IACZ1tB,EAAM6C,YAAY8qB,WAAW,IAAI3lB,WAAW4G,MAK3DnN,EAAQQ,WACJI,YAAaZ,EACb0O,IAAK,SAAU8R,EAAKyE,GAChB/lB,KAAKshB,GAAOyE,IAyDpB,IAAIkH,KACJ,SAAS5P,EAAQJ,EAAoBV,EAAcS,EAAakQ,GAC5D,IAAI/U,EACJ,OAAQ+U,EAAWvS,aACnB,IAAK,kBACDxC,EAAQ8E,EACR,MACJ,IAAK,YACD9E,EAAQoE,EACR,MACJ,IAAK,YACDpE,EAAQ6E,EACR,MACJ,IAAK,UACD7E,EAAQ+U,EAAWtf,QAAQ,GAC3B,MACJ,QACI1G,QAAQC,KAAK,mDAAqD+lB,EAAWvS,aAEhD,kBAA7BuS,EAAWpO,gBACX3G,EAAQ+U,EAAWtf,QAAQuK,IAC/B,IAAIuR,EAAOvR,EAAQ+U,EAAW9N,SAC1BuK,EAAKD,EAAOwD,EAAW9N,SAC3B,OA4GJ,SAAenR,EAAG6J,EAAG4R,EAAMC,GACvB,IAAK,IAAIrmB,EAAIomB,EAAMrN,EAAI,EAAG/Y,EAAIqmB,EAAIrmB,IAAK+Y,IACnCpO,EAAEoO,GAAKvE,EAAExU,GAEb,OAAO2K,EAhHA5K,CAAM4pB,EAAWC,EAAW1sB,OAAQkpB,EAAMC,GAErD,IAAIwD,EAAY,IAAI9tB,EAAMglB,MACtB+I,EAAU,IAAI/tB,EAAMqX,QACxB,SAASvG,EAAkBJ,GACvB,IAyBQ3I,EAzBJimB,EAAgB,IAAIhuB,EAAM0O,QAC1Buf,EAAgB,IAAIjuB,EAAM0O,QAC1Bwf,EAAa,IAAIluB,EAAM0O,QACvByf,EAAiB,IAAInuB,EAAM0O,QAC3B0f,EAAY,IAAIpuB,EAAM0O,QACtB2f,EAAiB,IAAIruB,EAAM0O,QAC3B4f,EAAkB,IAAItuB,EAAM0O,QAC5B6f,EAAmB,IAAIvuB,EAAM0O,QAC7B8f,EAAkB,IAAIxuB,EAAM0O,QAC5B+f,EAAY,IAAIzuB,EAAM0O,QACtBggB,EAAW,IAAI1uB,EAAM0O,QACrB+G,EAAc/E,EAAc+E,YAAc/E,EAAc+E,YAAc,GACtE/E,EAAcoF,aACdkY,EAAcW,YAAYZ,EAAQ7iB,UAAUwF,EAAcoF,cAC1DpF,EAAcsF,gBACVjO,EAAQ2I,EAAcsF,YAAYtJ,IAAI1M,EAAMoU,UAAUC,WACpDnO,KAAKwK,EAAciF,YACzBsY,EAAcW,sBAAsBd,EAAU5iB,UAAUnD,KAExD2I,EAAcwF,YACVnO,EAAQ2I,EAAcwF,SAASxJ,IAAI1M,EAAMoU,UAAUC,WACjDnO,KAAKwK,EAAciF,YACzBuY,EAAWU,sBAAsBd,EAAU5iB,UAAUnD,KAErD2I,EAAc0F,gBACVrO,EAAQ2I,EAAc0F,aAAa1J,IAAI1M,EAAMoU,UAAUC,WACrDnO,KAAKwK,EAAciF,YACzBwY,EAAeS,sBAAsBd,EAAU5iB,UAAUnD,KAEzD2I,EAAc4F,OACd8X,EAAU9X,MAAMyX,EAAQ7iB,UAAUwF,EAAc4F,QAChD5F,EAAc8F,eACd8X,EAAgBK,YAAYZ,EAAQ7iB,UAAUwF,EAAc8F,gBAC5D9F,EAAcgG,cACd2X,EAAeM,YAAYZ,EAAQ7iB,UAAUwF,EAAcgG,eAC3DhG,EAAckG,gBACd2X,EAAiBI,YAAYZ,EAAQ7iB,UAAUwF,EAAckG,iBAC7DlG,EAAcoG,eACd0X,EAAgBG,YAAYZ,EAAQ7iB,UAAUwF,EAAcoG,gBAC5DpG,EAAcC,oBACd8d,EAAY/d,EAAcC,mBAC9B,IAAIke,EAAOZ,EAAczH,SAAS0H,GAAY1H,SAAS2H,GACnDW,EAAa,IAAI9uB,EAAM0O,QAC3B+f,EAAUM,gBAAgBD,GAC1B,IACIE,EACAC,EACAC,EAKAC,EARAC,EAAY,IAAIpvB,EAAM0O,QAS1B,GALA0gB,EAAUC,aAAaZ,GACvBS,EAAcE,EAAUE,WAAWF,GAAW5I,SAASiI,GACvDQ,EAAaH,EAAWQ,WAAWR,GAAYtI,SAAS0I,GACxDF,EAAOZ,EAEa,IAAhB3Y,EACA0Z,EAAYL,EAAWtI,SAASqI,GAAMrI,SAASyI,GAAYzI,SAASwI,QACjE,GAAoB,IAAhBvZ,EACP0Z,EAAYL,EAAWtI,SAASyI,GAAYzI,SAASqI,GAAMrI,SAASwI,OACjE,CACH,IAAIO,GAAa,IAAIvvB,EAAM0O,SAAUoD,KAAKsc,GACtCoB,EAAqBP,EAAWzI,SAAS+I,EAAWD,WAAWC,IACnEJ,EAAYL,EAAWtI,SAASqI,GAAMrI,SAASgJ,GAAoBhJ,SAASwI,GAEhF,IAAIS,EAAazB,EAAcxH,SAAS+H,GAAkB/H,SAASgI,GAAiBhI,SAASyH,GAAezH,SAAS0H,GAAY1H,SAAS2H,GAAgB3H,SAASgI,EAAgBc,WAAWd,IAAkBhI,SAAS8H,GAAiB9H,SAAS6H,GAAgB7H,SAAS4H,GAAW5H,SAAS6H,EAAeiB,WAAWjB,IACtTqB,GAAmC,IAAI1vB,EAAM0O,SAAU2gB,aAAaI,GACpEE,EAAqBlB,EAAUjI,SAASkJ,GAG5C,OAFAhB,EAASW,aAAaM,GACtBF,EAAaf,EAASlI,SAAS2I,GAGnC,SAASvZ,EAAc+K,GAEnB,IAAIiP,GACA,MACA,MACA,MACA,MACA,MACA,OAEJ,OAAc,KATdjP,EAAQA,GAAS,IAUb9Y,QAAQC,KAAK,uGACN8nB,EAAM,IAEVA,EAAMjP,GAEjB,SAAS8J,EAAiBvhB,GAItB,OAHYA,EAAM9B,MAAM,KAAKsF,IAAI,SAAUga,GACvC,OAAO/a,WAAW+a,KAI1B,SAAS/iB,EAA2BxC,EAAQkpB,EAAMC,GAK9C,YAJa9oB,IAAT6oB,IACAA,EAAO,QACA7oB,IAAP8oB,IACAA,EAAKnpB,EAAOsC,YACTzD,EAAM6C,YAAY8qB,WAAW,IAAI3lB,WAAW7G,EAAQkpB,EAAMC,IAarE,SAASlC,EAAOyH,EAAI/W,EAAOgX,GACvB,OAAOD,EAAG7rB,MAAM,EAAG8U,GAAO6L,OAAOmL,GAAInL,OAAOkL,EAAG7rB,MAAM8U,IAEzD,OAAO1Y,EAv0EK,GAy0EhB,OAAOH,EAAO8vB,QAAQ3vB,UAAYA","file":"../../loaders/FBXLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    'skylark-zlib/Inflate',\r\n    '../curves/NURBSCurve'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    Inflate, \r\n    NURBSCurve\r\n) {\r\n    'use strict';\r\n    var FBXLoader = function () {\r\n        var fbxTree;\r\n        var connections;\r\n        var sceneGraph;\r\n        function FBXLoader(manager) {\r\n            THREE.Loader.call(this, manager);\r\n        }\r\n        FBXLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n            constructor: FBXLoader,\r\n            load: function (url, onLoad, onProgress, onError) {\r\n                var self = this;\r\n                var path = self.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : self.path;\r\n                var loader = new THREE.FileLoader(this.manager);\r\n                loader.setPath(self.path);\r\n                loader.setResponseType('arraybuffer');\r\n                loader.load(url, function (buffer) {\r\n                    try {\r\n                        onLoad(self.parse(buffer, path));\r\n                    } catch (error) {\r\n                        setTimeout(function () {\r\n                            if (onError)\r\n                                onError(error);\r\n                            self.manager.itemError(url);\r\n                        }, 0);\r\n                    }\r\n                }, onProgress, onError);\r\n            },\r\n            parse: function (FBXBuffer, path) {\r\n                if (isFbxFormatBinary(FBXBuffer)) {\r\n                    fbxTree = new BinaryParser().parse(FBXBuffer);\r\n                } else {\r\n                    var FBXText = convertArrayBufferToString(FBXBuffer);\r\n                    if (!isFbxFormatASCII(FBXText)) {\r\n                        throw new Error('THREE.FBXLoader: Unknown format.');\r\n                    }\r\n                    if (getFbxVersion(FBXText) < 7000) {\r\n                        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\r\n                    }\r\n                    fbxTree = new TextParser().parse(FBXText);\r\n                }\r\n                var textureLoader = new THREE.TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\r\n                return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\r\n            }\r\n        });\r\n        function FBXTreeParser(textureLoader, manager) {\r\n            this.textureLoader = textureLoader;\r\n            this.manager = manager;\r\n        }\r\n        FBXTreeParser.prototype = {\r\n            constructor: FBXTreeParser,\r\n            parse: function () {\r\n                connections = this.parseConnections();\r\n                var images = this.parseImages();\r\n                var textures = this.parseTextures(images);\r\n                var materials = this.parseMaterials(textures);\r\n                var deformers = this.parseDeformers();\r\n                var geometryMap = new GeometryParser().parse(deformers);\r\n                this.parseScene(deformers, geometryMap, materials);\r\n                return sceneGraph;\r\n            },\r\n            parseConnections: function () {\r\n                var connectionMap = new Map();\r\n                if ('Connections' in fbxTree) {\r\n                    var rawConnections = fbxTree.Connections.connections;\r\n                    rawConnections.forEach(function (rawConnection) {\r\n                        var fromID = rawConnection[0];\r\n                        var toID = rawConnection[1];\r\n                        var relationship = rawConnection[2];\r\n                        if (!connectionMap.has(fromID)) {\r\n                            connectionMap.set(fromID, {\r\n                                parents: [],\r\n                                children: []\r\n                            });\r\n                        }\r\n                        var parentRelationship = {\r\n                            ID: toID,\r\n                            relationship: relationship\r\n                        };\r\n                        connectionMap.get(fromID).parents.push(parentRelationship);\r\n                        if (!connectionMap.has(toID)) {\r\n                            connectionMap.set(toID, {\r\n                                parents: [],\r\n                                children: []\r\n                            });\r\n                        }\r\n                        var childRelationship = {\r\n                            ID: fromID,\r\n                            relationship: relationship\r\n                        };\r\n                        connectionMap.get(toID).children.push(childRelationship);\r\n                    });\r\n                }\r\n                return connectionMap;\r\n            },\r\n            parseImages: function () {\r\n                var images = {};\r\n                var blobs = {};\r\n                if ('Video' in fbxTree.Objects) {\r\n                    var videoNodes = fbxTree.Objects.Video;\r\n                    for (var nodeID in videoNodes) {\r\n                        var videoNode = videoNodes[nodeID];\r\n                        var id = parseInt(nodeID);\r\n                        images[id] = videoNode.RelativeFilename || videoNode.Filename;\r\n                        if ('Content' in videoNode) {\r\n                            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\r\n                            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\r\n                            if (arrayBufferContent || base64Content) {\r\n                                var image = this.parseImage(videoNodes[nodeID]);\r\n                                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (var id in images) {\r\n                    var filename = images[id];\r\n                    if (blobs[filename] !== undefined)\r\n                        images[id] = blobs[filename];\r\n                    else\r\n                        images[id] = images[id].split('\\\\').pop();\r\n                }\r\n                return images;\r\n            },\r\n            parseImage: function (videoNode) {\r\n                var content = videoNode.Content;\r\n                var fileName = videoNode.RelativeFilename || videoNode.Filename;\r\n                var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\r\n                var type;\r\n                switch (extension) {\r\n                case 'bmp':\r\n                    type = 'image/bmp';\r\n                    break;\r\n                case 'jpg':\r\n                case 'jpeg':\r\n                    type = 'image/jpeg';\r\n                    break;\r\n                case 'png':\r\n                    type = 'image/png';\r\n                    break;\r\n                case 'tif':\r\n                    type = 'image/tiff';\r\n                    break;\r\n                case 'tga':\r\n                    if (this.manager.getHandler('.tga') === null) {\r\n                        console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\r\n                    }\r\n                    type = 'image/tga';\r\n                    break;\r\n                default:\r\n                    console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\r\n                    return;\r\n                }\r\n                if (typeof content === 'string') {\r\n                    return 'data:' + type + ';base64,' + content;\r\n                } else {\r\n                    var array = new Uint8Array(content);\r\n                    return window.URL.createObjectURL(new Blob([array], { type: type }));\r\n                }\r\n            },\r\n            parseTextures: function (images) {\r\n                var textureMap = new Map();\r\n                if ('Texture' in fbxTree.Objects) {\r\n                    var textureNodes = fbxTree.Objects.undefined;\r\n                    for (var nodeID in textureNodes) {\r\n                        var texture = this.parseTexture(textureNodes[nodeID], images);\r\n                        textureMap.set(parseInt(nodeID), texture);\r\n                    }\r\n                }\r\n                return textureMap;\r\n            },\r\n            parseTexture: function (textureNode, images) {\r\n                var texture = this.loadTexture(textureNode, images);\r\n                texture.ID = textureNode.id;\r\n                texture.name = textureNode.attrName;\r\n                var wrapModeU = textureNode.WrapModeU;\r\n                var wrapModeV = textureNode.WrapModeV;\r\n                var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\r\n                var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\r\n                texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\r\n                texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\r\n                if ('Scaling' in textureNode) {\r\n                    var values = textureNode.Scaling.value;\r\n                    texture.repeat.x = values[0];\r\n                    texture.repeat.y = values[1];\r\n                }\r\n                return texture;\r\n            },\r\n            loadTexture: function (textureNode, images) {\r\n                var fileName;\r\n                var currentPath = this.textureLoader.path;\r\n                var children = connections.get(textureNode.id).children;\r\n                if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\r\n                    fileName = images[children[0].ID];\r\n                    if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\r\n                        this.textureLoader.setPath(undefined);\r\n                    }\r\n                }\r\n                var texture;\r\n                var extension = textureNode.FileName.slice(-3).toLowerCase();\r\n                if (extension === 'tga') {\r\n                    var loader = this.manager.getHandler('.tga');\r\n                    if (loader === null) {\r\n                        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\r\n                        texture = new THREE.Texture();\r\n                    } else {\r\n                        texture = loader.load(fileName);\r\n                    }\r\n                } else if (extension === 'psd') {\r\n                    console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\r\n                    texture = new THREE.Texture();\r\n                } else {\r\n                    texture = this.textureLoader.load(fileName);\r\n                }\r\n                this.textureLoader.setPath(currentPath);\r\n                return texture;\r\n            },\r\n            parseMaterials: function (textureMap) {\r\n                var materialMap = new Map();\r\n                if ('Material' in fbxTree.Objects) {\r\n                    var materialNodes = fbxTree.Objects.Material;\r\n                    for (var nodeID in materialNodes) {\r\n                        var material = this.parseMaterial(materialNodes[nodeID], textureMap);\r\n                        if (material !== null)\r\n                            materialMap.set(parseInt(nodeID), material);\r\n                    }\r\n                }\r\n                return materialMap;\r\n            },\r\n            parseMaterial: function (materialNode, textureMap) {\r\n                var ID = materialNode.id;\r\n                var name = materialNode.attrName;\r\n                var type = materialNode.ShadingModel;\r\n                if (typeof type === 'object') {\r\n                    type = type.value;\r\n                }\r\n                if (!connections.has(ID))\r\n                    return null;\r\n                var parameters = this.parseParameters(materialNode, textureMap, ID);\r\n                var material;\r\n                switch (type.toLowerCase()) {\r\n                case 'phong':\r\n                    material = new THREE.MeshPhongMaterial();\r\n                    break;\r\n                case 'lambert':\r\n                    material = new THREE.MeshLambertMaterial();\r\n                    break;\r\n                default:\r\n                    console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\r\n                    material = new THREE.MeshPhongMaterial();\r\n                    break;\r\n                }\r\n                material.setValues(parameters);\r\n                material.name = name;\r\n                return material;\r\n            },\r\n            parseParameters: function (materialNode, textureMap, ID) {\r\n                var parameters = {};\r\n                if (materialNode.BumpFactor) {\r\n                    parameters.bumpScale = materialNode.BumpFactor.value;\r\n                }\r\n                if (materialNode.Diffuse) {\r\n                    parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\r\n                } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\r\n                    parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\r\n                }\r\n                if (materialNode.DisplacementFactor) {\r\n                    parameters.displacementScale = materialNode.DisplacementFactor.value;\r\n                }\r\n                if (materialNode.Emissive) {\r\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\r\n                } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\r\n                    parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\r\n                }\r\n                if (materialNode.EmissiveFactor) {\r\n                    parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\r\n                }\r\n                if (materialNode.Opacity) {\r\n                    parameters.opacity = parseFloat(materialNode.Opacity.value);\r\n                }\r\n                if (parameters.opacity < 1) {\r\n                    parameters.transparent = true;\r\n                }\r\n                if (materialNode.ReflectionFactor) {\r\n                    parameters.reflectivity = materialNode.ReflectionFactor.value;\r\n                }\r\n                if (materialNode.Shininess) {\r\n                    parameters.shininess = materialNode.Shininess.value;\r\n                }\r\n                if (materialNode.Specular) {\r\n                    parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\r\n                } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\r\n                    parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\r\n                }\r\n                var self = this;\r\n                connections.get(ID).children.forEach(function (child) {\r\n                    var type = child.relationship;\r\n                    switch (type) {\r\n                    case 'Bump':\r\n                        parameters.bumpMap = self.getTexture(textureMap, child.ID);\r\n                        break;\r\n                    case 'Maya|TEX_ao_map':\r\n                        parameters.aoMap = self.getTexture(textureMap, child.ID);\r\n                        break;\r\n                    case 'DiffuseColor':\r\n                    case 'Maya|TEX_color_map':\r\n                        parameters.map = self.getTexture(textureMap, child.ID);\r\n                        parameters.map.encoding = THREE.sRGBEncoding;\r\n                        break;\r\n                    case 'DisplacementColor':\r\n                        parameters.displacementMap = self.getTexture(textureMap, child.ID);\r\n                        break;\r\n                    case 'EmissiveColor':\r\n                        parameters.emissiveMap = self.getTexture(textureMap, child.ID);\r\n                        parameters.emissiveMap.encoding = THREE.sRGBEncoding;\r\n                        break;\r\n                    case 'NormalMap':\r\n                    case 'Maya|TEX_normal_map':\r\n                        parameters.normalMap = self.getTexture(textureMap, child.ID);\r\n                        break;\r\n                    case 'ReflectionColor':\r\n                        parameters.envMap = self.getTexture(textureMap, child.ID);\r\n                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\r\n                        parameters.envMap.encoding = THREE.sRGBEncoding;\r\n                        break;\r\n                    case 'SpecularColor':\r\n                        parameters.specularMap = self.getTexture(textureMap, child.ID);\r\n                        parameters.specularMap.encoding = THREE.sRGBEncoding;\r\n                        break;\r\n                    case 'TransparentColor':\r\n                        parameters.alphaMap = self.getTexture(textureMap, child.ID);\r\n                        parameters.transparent = true;\r\n                        break;\r\n                    case 'AmbientColor':\r\n                    case 'ShininessExponent':\r\n                    case 'SpecularFactor':\r\n                    case 'VectorDisplacementColor':\r\n                    default:\r\n                        console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\r\n                        break;\r\n                    }\r\n                });\r\n                return parameters;\r\n            },\r\n            getTexture: function (textureMap, id) {\r\n                if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\r\n                    console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\r\n                    id = connections.get(id).children[0].ID;\r\n                }\r\n                return textureMap.get(id);\r\n            },\r\n            parseDeformers: function () {\r\n                var skeletons = {};\r\n                var morphTargets = {};\r\n                if ('Deformer' in fbxTree.Objects) {\r\n                    var DeformerNodes = fbxTree.Objects.Deformer;\r\n                    for (var nodeID in DeformerNodes) {\r\n                        var deformerNode = DeformerNodes[nodeID];\r\n                        var relationships = connections.get(parseInt(nodeID));\r\n                        if (deformerNode.attrType === 'Skin') {\r\n                            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\r\n                            skeleton.ID = nodeID;\r\n                            if (relationships.parents.length > 1)\r\n                                console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\r\n                            skeleton.geometryID = relationships.parents[0].ID;\r\n                            skeletons[nodeID] = skeleton;\r\n                        } else if (deformerNode.attrType === 'BlendShape') {\r\n                            var morphTarget = { id: nodeID };\r\n                            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\r\n                            morphTarget.id = nodeID;\r\n                            if (relationships.parents.length > 1)\r\n                                console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\r\n                            morphTargets[nodeID] = morphTarget;\r\n                        }\r\n                    }\r\n                }\r\n                return {\r\n                    skeletons: skeletons,\r\n                    morphTargets: morphTargets\r\n                };\r\n            },\r\n            parseSkeleton: function (relationships, deformerNodes) {\r\n                var rawBones = [];\r\n                relationships.children.forEach(function (child) {\r\n                    var boneNode = deformerNodes[child.ID];\r\n                    if (boneNode.attrType !== 'Cluster')\r\n                        return;\r\n                    var rawBone = {\r\n                        ID: child.ID,\r\n                        indices: [],\r\n                        weights: [],\r\n                        transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)\r\n                    };\r\n                    if ('Indexes' in boneNode) {\r\n                        rawBone.indices = boneNode.Indexes.a;\r\n                        rawBone.weights = boneNode.Weights.a;\r\n                    }\r\n                    rawBones.push(rawBone);\r\n                });\r\n                return {\r\n                    rawBones: rawBones,\r\n                    bones: []\r\n                };\r\n            },\r\n            parseMorphTargets: function (relationships, deformerNodes) {\r\n                var rawMorphTargets = [];\r\n                for (var i = 0; i < relationships.children.length; i++) {\r\n                    var child = relationships.children[i];\r\n                    var morphTargetNode = deformerNodes[child.ID];\r\n                    var rawMorphTarget = {\r\n                        name: morphTargetNode.attrName,\r\n                        initialWeight: morphTargetNode.DeformPercent,\r\n                        id: morphTargetNode.id,\r\n                        fullWeights: morphTargetNode.FullWeights.a\r\n                    };\r\n                    if (morphTargetNode.attrType !== 'BlendShapeChannel')\r\n                        return;\r\n                    rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\r\n                        return child.relationship === undefined;\r\n                    })[0].ID;\r\n                    rawMorphTargets.push(rawMorphTarget);\r\n                }\r\n                return rawMorphTargets;\r\n            },\r\n            parseScene: function (deformers, geometryMap, materialMap) {\r\n                sceneGraph = new THREE.Group();\r\n                var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\r\n                var modelNodes = fbxTree.Objects.Model;\r\n                var self = this;\r\n                modelMap.forEach(function (model) {\r\n                    var modelNode = modelNodes[model.ID];\r\n                    self.setLookAtProperties(model, modelNode);\r\n                    var parentConnections = connections.get(model.ID).parents;\r\n                    parentConnections.forEach(function (connection) {\r\n                        var parent = modelMap.get(connection.ID);\r\n                        if (parent !== undefined)\r\n                            parent.add(model);\r\n                    });\r\n                    if (model.parent === null) {\r\n                        sceneGraph.add(model);\r\n                    }\r\n                });\r\n                this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\r\n                this.createAmbientLight();\r\n                this.setupMorphMaterials();\r\n                sceneGraph.traverse(function (node) {\r\n                    if (node.userData.transformData) {\r\n                        if (node.parent)\r\n                            node.userData.transformData.parentMatrixWorld = node.parent.matrix;\r\n                        var transform = generateTransform(node.userData.transformData);\r\n                        node.applyMatrix4(transform);\r\n                    }\r\n                });\r\n                var animations = new AnimationParser().parse();\r\n                if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\r\n                    sceneGraph.children[0].animations = animations;\r\n                    sceneGraph = sceneGraph.children[0];\r\n                }\r\n                sceneGraph.animations = animations;\r\n            },\r\n            parseModels: function (skeletons, geometryMap, materialMap) {\r\n                var modelMap = new Map();\r\n                var modelNodes = fbxTree.Objects.Model;\r\n                for (var nodeID in modelNodes) {\r\n                    var id = parseInt(nodeID);\r\n                    var node = modelNodes[nodeID];\r\n                    var relationships = connections.get(id);\r\n                    var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\r\n                    if (!model) {\r\n                        switch (node.attrType) {\r\n                        case 'Camera':\r\n                            model = this.createCamera(relationships);\r\n                            break;\r\n                        case 'Light':\r\n                            model = this.createLight(relationships);\r\n                            break;\r\n                        case 'Mesh':\r\n                            model = this.createMesh(relationships, geometryMap, materialMap);\r\n                            break;\r\n                        case 'NurbsCurve':\r\n                            model = this.createCurve(relationships, geometryMap);\r\n                            break;\r\n                        case 'LimbNode':\r\n                        case 'Root':\r\n                            model = new THREE.Bone();\r\n                            break;\r\n                        case 'Null':\r\n                        default:\r\n                            model = new THREE.Group();\r\n                            break;\r\n                        }\r\n                        model.name = node.attrName ? THREE.PropertyBinding.sanitizeNodeName(node.attrName) : '';\r\n                        model.ID = id;\r\n                    }\r\n                    this.getTransformData(model, node);\r\n                    modelMap.set(id, model);\r\n                }\r\n                return modelMap;\r\n            },\r\n            buildSkeleton: function (relationships, skeletons, id, name) {\r\n                var bone = null;\r\n                relationships.parents.forEach(function (parent) {\r\n                    for (var ID in skeletons) {\r\n                        var skeleton = skeletons[ID];\r\n                        skeleton.rawBones.forEach(function (rawBone, i) {\r\n                            if (rawBone.ID === parent.ID) {\r\n                                var subBone = bone;\r\n                                bone = new THREE.Bone();\r\n                                bone.matrixWorld.copy(rawBone.transformLink);\r\n                                bone.name = name ? THREE.PropertyBinding.sanitizeNodeName(name) : '';\r\n                                bone.ID = id;\r\n                                skeleton.bones[i] = bone;\r\n                                if (subBone !== null) {\r\n                                    bone.add(subBone);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                return bone;\r\n            },\r\n            createCamera: function (relationships) {\r\n                var model;\r\n                var cameraAttribute;\r\n                relationships.children.forEach(function (child) {\r\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\r\n                    if (attr !== undefined) {\r\n                        cameraAttribute = attr;\r\n                    }\r\n                });\r\n                if (cameraAttribute === undefined) {\r\n                    model = new THREE.Object3D();\r\n                } else {\r\n                    var type = 0;\r\n                    if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\r\n                        type = 1;\r\n                    }\r\n                    var nearClippingPlane = 1;\r\n                    if (cameraAttribute.NearPlane !== undefined) {\r\n                        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\r\n                    }\r\n                    var farClippingPlane = 1000;\r\n                    if (cameraAttribute.FarPlane !== undefined) {\r\n                        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\r\n                    }\r\n                    var width = window.innerWidth;\r\n                    var height = window.innerHeight;\r\n                    if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\r\n                        width = cameraAttribute.AspectWidth.value;\r\n                        height = cameraAttribute.AspectHeight.value;\r\n                    }\r\n                    var aspect = width / height;\r\n                    var fov = 45;\r\n                    if (cameraAttribute.FieldOfView !== undefined) {\r\n                        fov = cameraAttribute.FieldOfView.value;\r\n                    }\r\n                    var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\r\n                    switch (type) {\r\n                    case 0:\r\n                        model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\r\n                        if (focalLength !== null)\r\n                            model.setFocalLength(focalLength);\r\n                        break;\r\n                    case 1:\r\n                        model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\r\n                        break;\r\n                    default:\r\n                        console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\r\n                        model = new THREE.Object3D();\r\n                        break;\r\n                    }\r\n                }\r\n                return model;\r\n            },\r\n            createLight: function (relationships) {\r\n                var model;\r\n                var lightAttribute;\r\n                relationships.children.forEach(function (child) {\r\n                    var attr = fbxTree.Objects.NodeAttribute[child.ID];\r\n                    if (attr !== undefined) {\r\n                        lightAttribute = attr;\r\n                    }\r\n                });\r\n                if (lightAttribute === undefined) {\r\n                    model = new THREE.Object3D();\r\n                } else {\r\n                    var type;\r\n                    if (lightAttribute.LightType === undefined) {\r\n                        type = 0;\r\n                    } else {\r\n                        type = lightAttribute.LightType.value;\r\n                    }\r\n                    var color = 16777215;\r\n                    if (lightAttribute.undefined !== undefined) {\r\n                        color = new THREE.Color().fromArray(lightAttribute.undefined.value);\r\n                    }\r\n                    var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\r\n                    if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\r\n                        intensity = 0;\r\n                    }\r\n                    var distance = 0;\r\n                    if (lightAttribute.FarAttenuationEnd !== undefined) {\r\n                        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\r\n                            distance = 0;\r\n                        } else {\r\n                            distance = lightAttribute.FarAttenuationEnd.value;\r\n                        }\r\n                    }\r\n                    var decay = 1;\r\n                    switch (type) {\r\n                    case 0:\r\n                        model = new THREE.PointLight(color, intensity, distance, decay);\r\n                        break;\r\n                    case 1:\r\n                        model = new THREE.DirectionalLight(color, intensity);\r\n                        break;\r\n                    case 2:\r\n                        var angle = Math.PI / 3;\r\n                        if (lightAttribute.InnerAngle !== undefined) {\r\n                            angle = THREE.MathUtils.degToRad(lightAttribute.InnerAngle.value);\r\n                        }\r\n                        var penumbra = 0;\r\n                        if (lightAttribute.OuterAngle !== undefined) {\r\n                            penumbra = THREE.MathUtils.degToRad(lightAttribute.OuterAngle.value);\r\n                            penumbra = Math.max(penumbra, 1);\r\n                        }\r\n                        model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\r\n                        break;\r\n                    default:\r\n                        console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\r\n                        model = new THREE.PointLight(color, intensity);\r\n                        break;\r\n                    }\r\n                    if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\r\n                        model.castShadow = true;\r\n                    }\r\n                }\r\n                return model;\r\n            },\r\n            createMesh: function (relationships, geometryMap, materialMap) {\r\n                var model;\r\n                var geometry = null;\r\n                var material = null;\r\n                var materials = [];\r\n                relationships.children.forEach(function (child) {\r\n                    if (geometryMap.has(child.ID)) {\r\n                        geometry = geometryMap.get(child.ID);\r\n                    }\r\n                    if (materialMap.has(child.ID)) {\r\n                        materials.push(materialMap.get(child.ID));\r\n                    }\r\n                });\r\n                if (materials.length > 1) {\r\n                    material = materials;\r\n                } else if (materials.length > 0) {\r\n                    material = materials[0];\r\n                } else {\r\n                    material = new THREE.MeshPhongMaterial({ color: 13421772 });\r\n                    materials.push(material);\r\n                }\r\n                if ('color' in geometry.attributes) {\r\n                    materials.forEach(function (material) {\r\n                        material.vertexColors = true;\r\n                    });\r\n                }\r\n                if (geometry.FBX_Deformer) {\r\n                    materials.forEach(function (material) {\r\n                        material.skinning = true;\r\n                    });\r\n                    model = new THREE.SkinnedMesh(geometry, material);\r\n                    model.normalizeSkinWeights();\r\n                } else {\r\n                    model = new THREE.Mesh(geometry, material);\r\n                }\r\n                return model;\r\n            },\r\n            createCurve: function (relationships, geometryMap) {\r\n                var geometry = relationships.children.reduce(function (geo, child) {\r\n                    if (geometryMap.has(child.ID))\r\n                        geo = geometryMap.get(child.ID);\r\n                    return geo;\r\n                }, null);\r\n                var material = new THREE.LineBasicMaterial({\r\n                    color: 3342591,\r\n                    linewidth: 1\r\n                });\r\n                return new THREE.Line(geometry, material);\r\n            },\r\n            getTransformData: function (model, modelNode) {\r\n                var transformData = {};\r\n                if ('InheritType' in modelNode)\r\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\r\n                if ('RotationOrder' in modelNode)\r\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\r\n                else\r\n                    transformData.eulerOrder = 'ZYX';\r\n                if ('Lcl_Translation' in modelNode)\r\n                    transformData.translation = modelNode.Lcl_Translation.value;\r\n                if ('PreRotation' in modelNode)\r\n                    transformData.preRotation = modelNode.PreRotation.value;\r\n                if ('Lcl_Rotation' in modelNode)\r\n                    transformData.rotation = modelNode.Lcl_Rotation.value;\r\n                if ('PostRotation' in modelNode)\r\n                    transformData.postRotation = modelNode.PostRotation.value;\r\n                if ('Lcl_Scaling' in modelNode)\r\n                    transformData.scale = modelNode.Lcl_Scaling.value;\r\n                if ('ScalingOffset' in modelNode)\r\n                    transformData.scalingOffset = modelNode.ScalingOffset.value;\r\n                if ('ScalingPivot' in modelNode)\r\n                    transformData.scalingPivot = modelNode.ScalingPivot.value;\r\n                if ('RotationOffset' in modelNode)\r\n                    transformData.rotationOffset = modelNode.RotationOffset.value;\r\n                if ('RotationPivot' in modelNode)\r\n                    transformData.rotationPivot = modelNode.RotationPivot.value;\r\n                model.userData.transformData = transformData;\r\n            },\r\n            setLookAtProperties: function (model, modelNode) {\r\n                if ('LookAtProperty' in modelNode) {\r\n                    var children = connections.get(model.ID).children;\r\n                    children.forEach(function (child) {\r\n                        if (child.relationship === 'LookAtProperty') {\r\n                            var lookAtTarget = fbxTree.Objects.Model[child.ID];\r\n                            if ('Lcl_Translation' in lookAtTarget) {\r\n                                var pos = lookAtTarget.Lcl_Translation.value;\r\n                                if (model.target !== undefined) {\r\n                                    model.target.position.fromArray(pos);\r\n                                    sceneGraph.add(model.target);\r\n                                } else {\r\n                                    model.lookAt(new THREE.Vector3().fromArray(pos));\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            bindSkeleton: function (skeletons, geometryMap, modelMap) {\r\n                var bindMatrices = this.parsePoseNodes();\r\n                for (var ID in skeletons) {\r\n                    var skeleton = skeletons[ID];\r\n                    var parents = connections.get(parseInt(skeleton.ID)).parents;\r\n                    parents.forEach(function (parent) {\r\n                        if (geometryMap.has(parent.ID)) {\r\n                            var geoID = parent.ID;\r\n                            var geoRelationships = connections.get(geoID);\r\n                            geoRelationships.parents.forEach(function (geoConnParent) {\r\n                                if (modelMap.has(geoConnParent.ID)) {\r\n                                    var model = modelMap.get(geoConnParent.ID);\r\n                                    model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            parsePoseNodes: function () {\r\n                var bindMatrices = {};\r\n                if ('Pose' in fbxTree.Objects) {\r\n                    var BindPoseNode = fbxTree.Objects.Pose;\r\n                    for (var nodeID in BindPoseNode) {\r\n                        if (BindPoseNode[nodeID].attrType === 'BindPose') {\r\n                            var poseNodes = BindPoseNode[nodeID].PoseNode;\r\n                            if (Array.isArray(poseNodes)) {\r\n                                poseNodes.forEach(function (poseNode) {\r\n                                    bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\r\n                                });\r\n                            } else {\r\n                                bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return bindMatrices;\r\n            },\r\n            createAmbientLight: function () {\r\n                if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\r\n                    var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\r\n                    var r = ambientColor[0];\r\n                    var g = ambientColor[1];\r\n                    var b = ambientColor[2];\r\n                    if (r !== 0 || g !== 0 || b !== 0) {\r\n                        var color = new THREE.Color(r, g, b);\r\n                        sceneGraph.add(new THREE.AmbientLight(color, 1));\r\n                    }\r\n                }\r\n            },\r\n            setupMorphMaterials: function () {\r\n                var self = this;\r\n                sceneGraph.traverse(function (child) {\r\n                    if (child.isMesh) {\r\n                        if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\r\n                            if (Array.isArray(child.material)) {\r\n                                child.material.forEach(function (material, i) {\r\n                                    self.setupMorphMaterial(child, material, i);\r\n                                });\r\n                            } else {\r\n                                self.setupMorphMaterial(child, child.material);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            setupMorphMaterial: function (child, material, index) {\r\n                var uuid = child.uuid;\r\n                var matUuid = material.uuid;\r\n                var sharedMat = false;\r\n                sceneGraph.traverse(function (node) {\r\n                    if (node.isMesh) {\r\n                        if (Array.isArray(node.material)) {\r\n                            node.material.forEach(function (mat) {\r\n                                if (mat.uuid === matUuid && node.uuid !== uuid)\r\n                                    sharedMat = true;\r\n                            });\r\n                        } else if (node.material.uuid === matUuid && node.uuid !== uuid)\r\n                            sharedMat = true;\r\n                    }\r\n                });\r\n                if (sharedMat === true) {\r\n                    var clonedMat = material.clone();\r\n                    clonedMat.morphTargets = true;\r\n                    if (index === undefined)\r\n                        child.material = clonedMat;\r\n                    else\r\n                        child.material[index] = clonedMat;\r\n                } else\r\n                    material.morphTargets = true;\r\n            }\r\n        };\r\n        function GeometryParser() {\r\n        }\r\n        GeometryParser.prototype = {\r\n            constructor: GeometryParser,\r\n            parse: function (deformers) {\r\n                var geometryMap = new Map();\r\n                if ('Geometry' in fbxTree.Objects) {\r\n                    var geoNodes = fbxTree.Objects.Geometry;\r\n                    for (var nodeID in geoNodes) {\r\n                        var relationships = connections.get(parseInt(nodeID));\r\n                        var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\r\n                        geometryMap.set(parseInt(nodeID), geo);\r\n                    }\r\n                }\r\n                return geometryMap;\r\n            },\r\n            parseGeometry: function (relationships, geoNode, deformers) {\r\n                switch (geoNode.attrType) {\r\n                case 'Mesh':\r\n                    return this.parseMeshGeometry(relationships, geoNode, deformers);\r\n                    break;\r\n                case 'NurbsCurve':\r\n                    return this.parseNurbsGeometry(geoNode);\r\n                    break;\r\n                }\r\n            },\r\n            parseMeshGeometry: function (relationships, geoNode, deformers) {\r\n                var skeletons = deformers.skeletons;\r\n                var morphTargets = [];\r\n                var modelNodes = relationships.parents.map(function (parent) {\r\n                    return fbxTree.Objects.Model[parent.ID];\r\n                });\r\n                if (modelNodes.length === 0)\r\n                    return;\r\n                var skeleton = relationships.children.reduce(function (skeleton, child) {\r\n                    if (skeletons[child.ID] !== undefined)\r\n                        skeleton = skeletons[child.ID];\r\n                    return skeleton;\r\n                }, null);\r\n                relationships.children.forEach(function (child) {\r\n                    if (deformers.morphTargets[child.ID] !== undefined) {\r\n                        morphTargets.push(deformers.morphTargets[child.ID]);\r\n                    }\r\n                });\r\n                var modelNode = modelNodes[0];\r\n                var transformData = {};\r\n                if ('RotationOrder' in modelNode)\r\n                    transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\r\n                if ('InheritType' in modelNode)\r\n                    transformData.inheritType = parseInt(modelNode.InheritType.value);\r\n                if ('GeometricTranslation' in modelNode)\r\n                    transformData.translation = modelNode.GeometricTranslation.value;\r\n                if ('GeometricRotation' in modelNode)\r\n                    transformData.rotation = modelNode.GeometricRotation.value;\r\n                if ('GeometricScaling' in modelNode)\r\n                    transformData.scale = modelNode.GeometricScaling.value;\r\n                var transform = generateTransform(transformData);\r\n                return this.genGeometry(geoNode, skeleton, morphTargets, transform);\r\n            },\r\n            genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\r\n                var geo = new THREE.BufferGeometry();\r\n                if (geoNode.attrName)\r\n                    geo.name = geoNode.attrName;\r\n                var geoInfo = this.parseGeoNode(geoNode, skeleton);\r\n                var buffers = this.genBuffers(geoInfo);\r\n                var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\r\n                positionAttribute.applyMatrix4(preTransform);\r\n                geo.setAttribute('position', positionAttribute);\r\n                if (buffers.colors.length > 0) {\r\n                    geo.setAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\r\n                }\r\n                if (skeleton) {\r\n                    geo.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\r\n                    geo.setAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));\r\n                    geo.FBX_Deformer = skeleton;\r\n                }\r\n                if (buffers.normal.length > 0) {\r\n                    var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\r\n                    var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\r\n                    normalAttribute.applyNormalMatrix(normalMatrix);\r\n                    geo.setAttribute('normal', normalAttribute);\r\n                }\r\n                buffers.uvs.forEach(function (uvBuffer, i) {\r\n                    var name = 'uv' + (i + 1).toString();\r\n                    if (i === 0) {\r\n                        name = 'uv';\r\n                    }\r\n                    geo.setAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\r\n                });\r\n                if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\r\n                    var prevMaterialIndex = buffers.materialIndex[0];\r\n                    var startIndex = 0;\r\n                    buffers.materialIndex.forEach(function (currentIndex, i) {\r\n                        if (currentIndex !== prevMaterialIndex) {\r\n                            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\r\n                            prevMaterialIndex = currentIndex;\r\n                            startIndex = i;\r\n                        }\r\n                    });\r\n                    if (geo.groups.length > 0) {\r\n                        var lastGroup = geo.groups[geo.groups.length - 1];\r\n                        var lastIndex = lastGroup.start + lastGroup.count;\r\n                        if (lastIndex !== buffers.materialIndex.length) {\r\n                            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\r\n                        }\r\n                    }\r\n                    if (geo.groups.length === 0) {\r\n                        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\r\n                    }\r\n                }\r\n                this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\r\n                return geo;\r\n            },\r\n            parseGeoNode: function (geoNode, skeleton) {\r\n                var geoInfo = {};\r\n                geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\r\n                geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\r\n                if (geoNode.LayerElementColor) {\r\n                    geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\r\n                }\r\n                if (geoNode.LayerElementMaterial) {\r\n                    geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\r\n                }\r\n                if (geoNode.LayerElementNormal) {\r\n                    geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\r\n                }\r\n                if (geoNode.LayerElementUV) {\r\n                    geoInfo.uv = [];\r\n                    var i = 0;\r\n                    while (geoNode.LayerElementUV[i]) {\r\n                        geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\r\n                        i++;\r\n                    }\r\n                }\r\n                geoInfo.weightTable = {};\r\n                if (skeleton !== null) {\r\n                    geoInfo.skeleton = skeleton;\r\n                    skeleton.rawBones.forEach(function (rawBone, i) {\r\n                        rawBone.indices.forEach(function (index, j) {\r\n                            if (geoInfo.weightTable[index] === undefined)\r\n                                geoInfo.weightTable[index] = [];\r\n                            geoInfo.weightTable[index].push({\r\n                                id: i,\r\n                                weight: rawBone.weights[j]\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n                return geoInfo;\r\n            },\r\n            genBuffers: function (geoInfo) {\r\n                var buffers = {\r\n                    vertex: [],\r\n                    normal: [],\r\n                    colors: [],\r\n                    uvs: [],\r\n                    materialIndex: [],\r\n                    vertexWeights: [],\r\n                    weightsIndices: []\r\n                };\r\n                var polygonIndex = 0;\r\n                var faceLength = 0;\r\n                var displayedWeightsWarning = false;\r\n                var facePositionIndexes = [];\r\n                var faceNormals = [];\r\n                var faceColors = [];\r\n                var faceUVs = [];\r\n                var faceWeights = [];\r\n                var faceWeightIndices = [];\r\n                var self = this;\r\n                geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\r\n                    var endOfFace = false;\r\n                    if (vertexIndex < 0) {\r\n                        vertexIndex = vertexIndex ^ -1;\r\n                        endOfFace = true;\r\n                    }\r\n                    var weightIndices = [];\r\n                    var weights = [];\r\n                    facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\r\n                    if (geoInfo.color) {\r\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\r\n                        faceColors.push(data[0], data[1], data[2]);\r\n                    }\r\n                    if (geoInfo.skeleton) {\r\n                        if (geoInfo.weightTable[vertexIndex] !== undefined) {\r\n                            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\r\n                                weights.push(wt.weight);\r\n                                weightIndices.push(wt.id);\r\n                            });\r\n                        }\r\n                        if (weights.length > 4) {\r\n                            if (!displayedWeightsWarning) {\r\n                                console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\r\n                                displayedWeightsWarning = true;\r\n                            }\r\n                            var wIndex = [\r\n                                0,\r\n                                0,\r\n                                0,\r\n                                0\r\n                            ];\r\n                            var Weight = [\r\n                                0,\r\n                                0,\r\n                                0,\r\n                                0\r\n                            ];\r\n                            weights.forEach(function (weight, weightIndex) {\r\n                                var currentWeight = weight;\r\n                                var currentIndex = weightIndices[weightIndex];\r\n                                Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\r\n                                    if (currentWeight > comparedWeight) {\r\n                                        comparedWeightArray[comparedWeightIndex] = currentWeight;\r\n                                        currentWeight = comparedWeight;\r\n                                        var tmp = wIndex[comparedWeightIndex];\r\n                                        wIndex[comparedWeightIndex] = currentIndex;\r\n                                        currentIndex = tmp;\r\n                                    }\r\n                                });\r\n                            });\r\n                            weightIndices = wIndex;\r\n                            weights = Weight;\r\n                        }\r\n                        while (weights.length < 4) {\r\n                            weights.push(0);\r\n                            weightIndices.push(0);\r\n                        }\r\n                        for (var i = 0; i < 4; ++i) {\r\n                            faceWeights.push(weights[i]);\r\n                            faceWeightIndices.push(weightIndices[i]);\r\n                        }\r\n                    }\r\n                    if (geoInfo.normal) {\r\n                        var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\r\n                        faceNormals.push(data[0], data[1], data[2]);\r\n                    }\r\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\r\n                        var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\r\n                    }\r\n                    if (geoInfo.uv) {\r\n                        geoInfo.uv.forEach(function (uv, i) {\r\n                            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\r\n                            if (faceUVs[i] === undefined) {\r\n                                faceUVs[i] = [];\r\n                            }\r\n                            faceUVs[i].push(data[0]);\r\n                            faceUVs[i].push(data[1]);\r\n                        });\r\n                    }\r\n                    faceLength++;\r\n                    if (endOfFace) {\r\n                        self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\r\n                        polygonIndex++;\r\n                        faceLength = 0;\r\n                        facePositionIndexes = [];\r\n                        faceNormals = [];\r\n                        faceColors = [];\r\n                        faceUVs = [];\r\n                        faceWeights = [];\r\n                        faceWeightIndices = [];\r\n                    }\r\n                });\r\n                return buffers;\r\n            },\r\n            genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\r\n                for (var i = 2; i < faceLength; i++) {\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\r\n                    buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\r\n                    if (geoInfo.skeleton) {\r\n                        buffers.vertexWeights.push(faceWeights[0]);\r\n                        buffers.vertexWeights.push(faceWeights[1]);\r\n                        buffers.vertexWeights.push(faceWeights[2]);\r\n                        buffers.vertexWeights.push(faceWeights[3]);\r\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\r\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\r\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\r\n                        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\r\n                        buffers.vertexWeights.push(faceWeights[i * 4]);\r\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\r\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\r\n                        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[0]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[1]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[2]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[3]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\r\n                        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\r\n                    }\r\n                    if (geoInfo.color) {\r\n                        buffers.colors.push(faceColors[0]);\r\n                        buffers.colors.push(faceColors[1]);\r\n                        buffers.colors.push(faceColors[2]);\r\n                        buffers.colors.push(faceColors[(i - 1) * 3]);\r\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\r\n                        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\r\n                        buffers.colors.push(faceColors[i * 3]);\r\n                        buffers.colors.push(faceColors[i * 3 + 1]);\r\n                        buffers.colors.push(faceColors[i * 3 + 2]);\r\n                    }\r\n                    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\r\n                        buffers.materialIndex.push(materialIndex);\r\n                        buffers.materialIndex.push(materialIndex);\r\n                        buffers.materialIndex.push(materialIndex);\r\n                    }\r\n                    if (geoInfo.normal) {\r\n                        buffers.normal.push(faceNormals[0]);\r\n                        buffers.normal.push(faceNormals[1]);\r\n                        buffers.normal.push(faceNormals[2]);\r\n                        buffers.normal.push(faceNormals[(i - 1) * 3]);\r\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\r\n                        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\r\n                        buffers.normal.push(faceNormals[i * 3]);\r\n                        buffers.normal.push(faceNormals[i * 3 + 1]);\r\n                        buffers.normal.push(faceNormals[i * 3 + 2]);\r\n                    }\r\n                    if (geoInfo.uv) {\r\n                        geoInfo.uv.forEach(function (uv, j) {\r\n                            if (buffers.uvs[j] === undefined)\r\n                                buffers.uvs[j] = [];\r\n                            buffers.uvs[j].push(faceUVs[j][0]);\r\n                            buffers.uvs[j].push(faceUVs[j][1]);\r\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\r\n                            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\r\n                            buffers.uvs[j].push(faceUVs[j][i * 2]);\r\n                            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\r\n                if (morphTargets.length === 0)\r\n                    return;\r\n                parentGeo.morphTargetsRelative = true;\r\n                parentGeo.morphAttributes.position = [];\r\n                var self = this;\r\n                morphTargets.forEach(function (morphTarget) {\r\n                    morphTarget.rawTargets.forEach(function (rawTarget) {\r\n                        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\r\n                        if (morphGeoNode !== undefined) {\r\n                            self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n            genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\r\n                var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\r\n                var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\r\n                var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\r\n                var length = parentGeo.attributes.position.count * 3;\r\n                var morphPositions = new Float32Array(length);\r\n                for (var i = 0; i < indices.length; i++) {\r\n                    var morphIndex = indices[i] * 3;\r\n                    morphPositions[morphIndex] = morphPositionsSparse[i * 3];\r\n                    morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\r\n                    morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\r\n                }\r\n                var morphGeoInfo = {\r\n                    vertexIndices: vertexIndices,\r\n                    vertexPositions: morphPositions\r\n                };\r\n                var morphBuffers = this.genBuffers(morphGeoInfo);\r\n                var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\r\n                positionAttribute.name = name || morphGeoNode.attrName;\r\n                positionAttribute.applyMatrix4(preTransform);\r\n                parentGeo.morphAttributes.position.push(positionAttribute);\r\n            },\r\n            parseNormals: function (NormalNode) {\r\n                var mappingType = NormalNode.MappingInformationType;\r\n                var referenceType = NormalNode.ReferenceInformationType;\r\n                var buffer = NormalNode.Normals.a;\r\n                var indexBuffer = [];\r\n                if (referenceType === 'IndexToDirect') {\r\n                    if ('NormalIndex' in NormalNode) {\r\n                        indexBuffer = NormalNode.NormalIndex.a;\r\n                    } else if ('NormalsIndex' in NormalNode) {\r\n                        indexBuffer = NormalNode.NormalsIndex.a;\r\n                    }\r\n                }\r\n                return {\r\n                    dataSize: 3,\r\n                    buffer: buffer,\r\n                    indices: indexBuffer,\r\n                    mappingType: mappingType,\r\n                    referenceType: referenceType\r\n                };\r\n            },\r\n            parseUVs: function (UVNode) {\r\n                var mappingType = UVNode.MappingInformationType;\r\n                var referenceType = UVNode.ReferenceInformationType;\r\n                var buffer = UVNode.UV.a;\r\n                var indexBuffer = [];\r\n                if (referenceType === 'IndexToDirect') {\r\n                    indexBuffer = UVNode.UVIndex.a;\r\n                }\r\n                return {\r\n                    dataSize: 2,\r\n                    buffer: buffer,\r\n                    indices: indexBuffer,\r\n                    mappingType: mappingType,\r\n                    referenceType: referenceType\r\n                };\r\n            },\r\n            parseVertexColors: function (ColorNode) {\r\n                var mappingType = ColorNode.MappingInformationType;\r\n                var referenceType = ColorNode.ReferenceInformationType;\r\n                var buffer = ColorNode.Colors.a;\r\n                var indexBuffer = [];\r\n                if (referenceType === 'IndexToDirect') {\r\n                    indexBuffer = ColorNode.ColorIndex.a;\r\n                }\r\n                return {\r\n                    dataSize: 4,\r\n                    buffer: buffer,\r\n                    indices: indexBuffer,\r\n                    mappingType: mappingType,\r\n                    referenceType: referenceType\r\n                };\r\n            },\r\n            parseMaterialIndices: function (MaterialNode) {\r\n                var mappingType = MaterialNode.MappingInformationType;\r\n                var referenceType = MaterialNode.ReferenceInformationType;\r\n                if (mappingType === 'NoMappingInformation') {\r\n                    return {\r\n                        dataSize: 1,\r\n                        buffer: [0],\r\n                        indices: [0],\r\n                        mappingType: 'AllSame',\r\n                        referenceType: referenceType\r\n                    };\r\n                }\r\n                var materialIndexBuffer = MaterialNode.Materials.a;\r\n                var materialIndices = [];\r\n                for (var i = 0; i < materialIndexBuffer.length; ++i) {\r\n                    materialIndices.push(i);\r\n                }\r\n                return {\r\n                    dataSize: 1,\r\n                    buffer: materialIndexBuffer,\r\n                    indices: materialIndices,\r\n                    mappingType: mappingType,\r\n                    referenceType: referenceType\r\n                };\r\n            },\r\n            parseNurbsGeometry: function (geoNode) {\r\n                if (c.NURBSCurve === undefined) {\r\n                    console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\r\n                    return new THREE.BufferGeometry();\r\n                }\r\n                var order = parseInt(geoNode.Order);\r\n                if (isNaN(order)) {\r\n                    console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\r\n                    return new THREE.BufferGeometry();\r\n                }\r\n                var degree = order - 1;\r\n                var knots = geoNode.KnotVector.a;\r\n                var controlPoints = [];\r\n                var pointsValues = geoNode.Points.a;\r\n                for (var i = 0, l = pointsValues.length; i < l; i += 4) {\r\n                    controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\r\n                }\r\n                var startKnot, endKnot;\r\n                if (geoNode.Form === 'Closed') {\r\n                    controlPoints.push(controlPoints[0]);\r\n                } else if (geoNode.Form === 'Periodic') {\r\n                    startKnot = degree;\r\n                    endKnot = knots.length - 1 - startKnot;\r\n                    for (var i = 0; i < degree; ++i) {\r\n                        controlPoints.push(controlPoints[i]);\r\n                    }\r\n                }\r\n                var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\r\n                var vertices = curve.getPoints(controlPoints.length * 7);\r\n                var positions = new Float32Array(vertices.length * 3);\r\n                vertices.forEach(function (vertex, i) {\r\n                    vertex.toArray(positions, i * 3);\r\n                });\r\n                var geometry = new THREE.BufferGeometry();\r\n                geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n                return geometry;\r\n            }\r\n        };\r\n        function AnimationParser() {\r\n        }\r\n        AnimationParser.prototype = {\r\n            constructor: AnimationParser,\r\n            parse: function () {\r\n                var animationClips = [];\r\n                var rawClips = this.parseClips();\r\n                if (rawClips !== undefined) {\r\n                    for (var key in rawClips) {\r\n                        var rawClip = rawClips[key];\r\n                        var clip = this.addClip(rawClip);\r\n                        animationClips.push(clip);\r\n                    }\r\n                }\r\n                return animationClips;\r\n            },\r\n            parseClips: function () {\r\n                if (fbxTree.Objects.AnimationCurve === undefined)\r\n                    return undefined;\r\n                var curveNodesMap = this.parseAnimationCurveNodes();\r\n                this.parseAnimationCurves(curveNodesMap);\r\n                var layersMap = this.parseAnimationLayers(curveNodesMap);\r\n                var rawClips = this.parseAnimStacks(layersMap);\r\n                return rawClips;\r\n            },\r\n            parseAnimationCurveNodes: function () {\r\n                var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\r\n                var curveNodesMap = new Map();\r\n                for (var nodeID in rawCurveNodes) {\r\n                    var rawCurveNode = rawCurveNodes[nodeID];\r\n                    if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\r\n                        var curveNode = {\r\n                            id: rawCurveNode.id,\r\n                            attr: rawCurveNode.attrName,\r\n                            curves: {}\r\n                        };\r\n                        curveNodesMap.set(curveNode.id, curveNode);\r\n                    }\r\n                }\r\n                return curveNodesMap;\r\n            },\r\n            parseAnimationCurves: function (curveNodesMap) {\r\n                var rawCurves = fbxTree.Objects.AnimationCurve;\r\n                for (var nodeID in rawCurves) {\r\n                    var animationCurve = {\r\n                        id: rawCurves[nodeID].id,\r\n                        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\r\n                        values: rawCurves[nodeID].KeyValueFloat.a\r\n                    };\r\n                    var relationships = connections.get(animationCurve.id);\r\n                    if (relationships !== undefined) {\r\n                        var animationCurveID = relationships.parents[0].ID;\r\n                        var animationCurveRelationship = relationships.parents[0].relationship;\r\n                        if (animationCurveRelationship.match(/X/)) {\r\n                            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\r\n                        } else if (animationCurveRelationship.match(/Y/)) {\r\n                            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\r\n                        } else if (animationCurveRelationship.match(/Z/)) {\r\n                            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\r\n                        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\r\n                            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            parseAnimationLayers: function (curveNodesMap) {\r\n                var rawLayers = fbxTree.Objects.AnimationLayer;\r\n                var layersMap = new Map();\r\n                for (var nodeID in rawLayers) {\r\n                    var layerCurveNodes = [];\r\n                    var connection = connections.get(parseInt(nodeID));\r\n                    if (connection !== undefined) {\r\n                        var children = connection.children;\r\n                        children.forEach(function (child, i) {\r\n                            if (curveNodesMap.has(child.ID)) {\r\n                                var curveNode = curveNodesMap.get(child.ID);\r\n                                if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\r\n                                    if (layerCurveNodes[i] === undefined) {\r\n                                        var modelID = connections.get(child.ID).parents.filter(function (parent) {\r\n                                            return parent.relationship !== undefined;\r\n                                        })[0].ID;\r\n                                        if (modelID !== undefined) {\r\n                                            var rawModel = fbxTree.Objects.Model[modelID.toString()];\r\n                                            var node = {\r\n                                                modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\r\n                                                ID: rawModel.id,\r\n                                                initialPosition: [\r\n                                                    0,\r\n                                                    0,\r\n                                                    0\r\n                                                ],\r\n                                                initialRotation: [\r\n                                                    0,\r\n                                                    0,\r\n                                                    0\r\n                                                ],\r\n                                                initialScale: [\r\n                                                    1,\r\n                                                    1,\r\n                                                    1\r\n                                                ]\r\n                                            };\r\n                                            sceneGraph.traverse(function (child) {\r\n                                                if (child.ID === rawModel.id) {\r\n                                                    node.transform = child.matrix;\r\n                                                    if (child.userData.transformData)\r\n                                                        node.eulerOrder = child.userData.transformData.eulerOrder;\r\n                                                }\r\n                                            });\r\n                                            if (!node.transform)\r\n                                                node.transform = new THREE.Matrix4();\r\n                                            if ('PreRotation' in rawModel)\r\n                                                node.preRotation = rawModel.PreRotation.value;\r\n                                            if ('PostRotation' in rawModel)\r\n                                                node.postRotation = rawModel.PostRotation.value;\r\n                                            layerCurveNodes[i] = node;\r\n                                        }\r\n                                    }\r\n                                    if (layerCurveNodes[i])\r\n                                        layerCurveNodes[i][curveNode.attr] = curveNode;\r\n                                } else if (curveNode.curves.morph !== undefined) {\r\n                                    if (layerCurveNodes[i] === undefined) {\r\n                                        var deformerID = connections.get(child.ID).parents.filter(function (parent) {\r\n                                            return parent.relationship !== undefined;\r\n                                        })[0].ID;\r\n                                        var morpherID = connections.get(deformerID).parents[0].ID;\r\n                                        var geoID = connections.get(morpherID).parents[0].ID;\r\n                                        var modelID = connections.get(geoID).parents[0].ID;\r\n                                        var rawModel = fbxTree.Objects.Model[modelID];\r\n                                        var node = {\r\n                                            modelName: rawModel.attrName ? THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\r\n                                            morphName: fbxTree.Objects.Deformer[deformerID].attrName\r\n                                        };\r\n                                        layerCurveNodes[i] = node;\r\n                                    }\r\n                                    layerCurveNodes[i][curveNode.attr] = curveNode;\r\n                                }\r\n                            }\r\n                        });\r\n                        layersMap.set(parseInt(nodeID), layerCurveNodes);\r\n                    }\r\n                }\r\n                return layersMap;\r\n            },\r\n            parseAnimStacks: function (layersMap) {\r\n                var rawStacks = fbxTree.Objects.AnimationStack;\r\n                var rawClips = {};\r\n                for (var nodeID in rawStacks) {\r\n                    var children = connections.get(parseInt(nodeID)).children;\r\n                    if (children.length > 1) {\r\n                        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\r\n                    }\r\n                    var layer = layersMap.get(children[0].ID);\r\n                    rawClips[nodeID] = {\r\n                        name: rawStacks[nodeID].attrName,\r\n                        layer: layer\r\n                    };\r\n                }\r\n                return rawClips;\r\n            },\r\n            addClip: function (rawClip) {\r\n                var tracks = [];\r\n                var self = this;\r\n                rawClip.layer.forEach(function (rawTracks) {\r\n                    tracks = tracks.concat(self.generateTracks(rawTracks));\r\n                });\r\n                return new THREE.AnimationClip(rawClip.name, -1, tracks);\r\n            },\r\n            generateTracks: function (rawTracks) {\r\n                var tracks = [];\r\n                var initialPosition = new THREE.Vector3();\r\n                var initialRotation = new THREE.Quaternion();\r\n                var initialScale = new THREE.Vector3();\r\n                if (rawTracks.transform)\r\n                    rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\r\n                initialPosition = initialPosition.toArray();\r\n                initialRotation = new THREE.Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\r\n                initialScale = initialScale.toArray();\r\n                if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\r\n                    var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\r\n                    if (positionTrack !== undefined)\r\n                        tracks.push(positionTrack);\r\n                }\r\n                if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\r\n                    var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\r\n                    if (rotationTrack !== undefined)\r\n                        tracks.push(rotationTrack);\r\n                }\r\n                if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\r\n                    var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\r\n                    if (scaleTrack !== undefined)\r\n                        tracks.push(scaleTrack);\r\n                }\r\n                if (rawTracks.DeformPercent !== undefined) {\r\n                    var morphTrack = this.generateMorphTrack(rawTracks);\r\n                    if (morphTrack !== undefined)\r\n                        tracks.push(morphTrack);\r\n                }\r\n                return tracks;\r\n            },\r\n            generateVectorTrack: function (modelName, curves, initialValue, type) {\r\n                var times = this.getTimesForAllAxes(curves);\r\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\r\n                return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\r\n            },\r\n            generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\r\n                if (curves.x !== undefined) {\r\n                    this.interpolateRotations(curves.x);\r\n                    curves.x.values = curves.x.values.map(THREE.MathUtils.degToRad);\r\n                }\r\n                if (curves.y !== undefined) {\r\n                    this.interpolateRotations(curves.y);\r\n                    curves.y.values = curves.y.values.map(THREE.MathUtils.degToRad);\r\n                }\r\n                if (curves.z !== undefined) {\r\n                    this.interpolateRotations(curves.z);\r\n                    curves.z.values = curves.z.values.map(THREE.MathUtils.degToRad);\r\n                }\r\n                var times = this.getTimesForAllAxes(curves);\r\n                var values = this.getKeyframeTrackValues(times, curves, initialValue);\r\n                if (preRotation !== undefined) {\r\n                    preRotation = preRotation.map(THREE.MathUtils.degToRad);\r\n                    preRotation.push(eulerOrder);\r\n                    preRotation = new THREE.Euler().fromArray(preRotation);\r\n                    preRotation = new THREE.Quaternion().setFromEuler(preRotation);\r\n                }\r\n                if (postRotation !== undefined) {\r\n                    postRotation = postRotation.map(THREE.MathUtils.degToRad);\r\n                    postRotation.push(eulerOrder);\r\n                    postRotation = new THREE.Euler().fromArray(postRotation);\r\n                    postRotation = new THREE.Quaternion().setFromEuler(postRotation).inverse();\r\n                }\r\n                var quaternion = new THREE.Quaternion();\r\n                var euler = new THREE.Euler();\r\n                var quaternionValues = [];\r\n                for (var i = 0; i < values.length; i += 3) {\r\n                    euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\r\n                    quaternion.setFromEuler(euler);\r\n                    if (preRotation !== undefined)\r\n                        quaternion.premultiply(preRotation);\r\n                    if (postRotation !== undefined)\r\n                        quaternion.multiply(postRotation);\r\n                    quaternion.toArray(quaternionValues, i / 3 * 4);\r\n                }\r\n                return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\r\n            },\r\n            generateMorphTrack: function (rawTracks) {\r\n                var curves = rawTracks.DeformPercent.curves.morph;\r\n                var values = curves.values.map(function (val) {\r\n                    return val / 100;\r\n                });\r\n                var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\r\n                return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\r\n            },\r\n            getTimesForAllAxes: function (curves) {\r\n                var times = [];\r\n                if (curves.x !== undefined)\r\n                    times = times.concat(curves.x.times);\r\n                if (curves.y !== undefined)\r\n                    times = times.concat(curves.y.times);\r\n                if (curves.z !== undefined)\r\n                    times = times.concat(curves.z.times);\r\n                times = times.sort(function (a, b) {\r\n                    return a - b;\r\n                }).filter(function (elem, index, array) {\r\n                    return array.indexOf(elem) == index;\r\n                });\r\n                return times;\r\n            },\r\n            getKeyframeTrackValues: function (times, curves, initialValue) {\r\n                var prevValue = initialValue;\r\n                var values = [];\r\n                var xIndex = -1;\r\n                var yIndex = -1;\r\n                var zIndex = -1;\r\n                times.forEach(function (time) {\r\n                    if (curves.x)\r\n                        xIndex = curves.x.times.indexOf(time);\r\n                    if (curves.y)\r\n                        yIndex = curves.y.times.indexOf(time);\r\n                    if (curves.z)\r\n                        zIndex = curves.z.times.indexOf(time);\r\n                    if (xIndex !== -1) {\r\n                        var xValue = curves.x.values[xIndex];\r\n                        values.push(xValue);\r\n                        prevValue[0] = xValue;\r\n                    } else {\r\n                        values.push(prevValue[0]);\r\n                    }\r\n                    if (yIndex !== -1) {\r\n                        var yValue = curves.y.values[yIndex];\r\n                        values.push(yValue);\r\n                        prevValue[1] = yValue;\r\n                    } else {\r\n                        values.push(prevValue[1]);\r\n                    }\r\n                    if (zIndex !== -1) {\r\n                        var zValue = curves.z.values[zIndex];\r\n                        values.push(zValue);\r\n                        prevValue[2] = zValue;\r\n                    } else {\r\n                        values.push(prevValue[2]);\r\n                    }\r\n                });\r\n                return values;\r\n            },\r\n            interpolateRotations: function (curve) {\r\n                for (var i = 1; i < curve.values.length; i++) {\r\n                    var initialValue = curve.values[i - 1];\r\n                    var valuesSpan = curve.values[i] - initialValue;\r\n                    var absoluteSpan = Math.abs(valuesSpan);\r\n                    if (absoluteSpan >= 180) {\r\n                        var numSubIntervals = absoluteSpan / 180;\r\n                        var step = valuesSpan / numSubIntervals;\r\n                        var nextValue = initialValue + step;\r\n                        var initialTime = curve.times[i - 1];\r\n                        var timeSpan = curve.times[i] - initialTime;\r\n                        var interval = timeSpan / numSubIntervals;\r\n                        var nextTime = initialTime + interval;\r\n                        var interpolatedTimes = [];\r\n                        var interpolatedValues = [];\r\n                        while (nextTime < curve.times[i]) {\r\n                            interpolatedTimes.push(nextTime);\r\n                            nextTime += interval;\r\n                            interpolatedValues.push(nextValue);\r\n                            nextValue += step;\r\n                        }\r\n                        curve.times = inject(curve.times, i, interpolatedTimes);\r\n                        curve.values = inject(curve.values, i, interpolatedValues);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        function TextParser() {\r\n        }\r\n        TextParser.prototype = {\r\n            constructor: TextParser,\r\n            getPrevNode: function () {\r\n                return this.nodeStack[this.currentIndent - 2];\r\n            },\r\n            getCurrentNode: function () {\r\n                return this.nodeStack[this.currentIndent - 1];\r\n            },\r\n            getCurrentProp: function () {\r\n                return this.currentProp;\r\n            },\r\n            pushStack: function (node) {\r\n                this.nodeStack.push(node);\r\n                this.currentIndent += 1;\r\n            },\r\n            popStack: function () {\r\n                this.nodeStack.pop();\r\n                this.currentIndent -= 1;\r\n            },\r\n            setCurrentProp: function (val, name) {\r\n                this.currentProp = val;\r\n                this.currentPropName = name;\r\n            },\r\n            parse: function (text) {\r\n                this.currentIndent = 0;\r\n                this.allNodes = new FBXTree();\r\n                this.nodeStack = [];\r\n                this.currentProp = [];\r\n                this.currentPropName = '';\r\n                var self = this;\r\n                var split = text.split(/[\\r\\n]+/);\r\n                split.forEach(function (line, i) {\r\n                    var matchComment = line.match(/^[\\s\\t]*;/);\r\n                    var matchEmpty = line.match(/^[\\s\\t]*$/);\r\n                    if (matchComment || matchEmpty)\r\n                        return;\r\n                    var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\r\n                    var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\r\n                    var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\r\n                    if (matchBeginning) {\r\n                        self.parseNodeBegin(line, matchBeginning);\r\n                    } else if (matchProperty) {\r\n                        self.parseNodeProperty(line, matchProperty, split[++i]);\r\n                    } else if (matchEnd) {\r\n                        self.popStack();\r\n                    } else if (line.match(/^[^\\s\\t}]/)) {\r\n                        self.parseNodePropertyContinued(line);\r\n                    }\r\n                });\r\n                return this.allNodes;\r\n            },\r\n            parseNodeBegin: function (line, property) {\r\n                var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\r\n                var nodeAttrs = property[2].split(',').map(function (attr) {\r\n                    return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\r\n                });\r\n                var node = { name: nodeName };\r\n                var attrs = this.parseNodeAttr(nodeAttrs);\r\n                var currentNode = this.getCurrentNode();\r\n                if (this.currentIndent === 0) {\r\n                    this.allNodes.add(nodeName, node);\r\n                } else {\r\n                    if (nodeName in currentNode) {\r\n                        if (nodeName === 'PoseNode') {\r\n                            currentNode.PoseNode.push(node);\r\n                        } else if (currentNode[nodeName].id !== undefined) {\r\n                            currentNode[nodeName] = {};\r\n                            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\r\n                        }\r\n                        if (attrs.id !== '')\r\n                            currentNode[nodeName][attrs.id] = node;\r\n                    } else if (typeof attrs.id === 'number') {\r\n                        currentNode[nodeName] = {};\r\n                        currentNode[nodeName][attrs.id] = node;\r\n                    } else if (nodeName !== 'Properties70') {\r\n                        if (nodeName === 'PoseNode')\r\n                            currentNode[nodeName] = [node];\r\n                        else\r\n                            currentNode[nodeName] = node;\r\n                    }\r\n                }\r\n                if (typeof attrs.id === 'number')\r\n                    node.id = attrs.id;\r\n                if (attrs.name !== '')\r\n                    node.attrName = attrs.name;\r\n                if (attrs.type !== '')\r\n                    node.attrType = attrs.type;\r\n                this.pushStack(node);\r\n            },\r\n            parseNodeAttr: function (attrs) {\r\n                var id = attrs[0];\r\n                if (attrs[0] !== '') {\r\n                    id = parseInt(attrs[0]);\r\n                    if (isNaN(id)) {\r\n                        id = attrs[0];\r\n                    }\r\n                }\r\n                var name = '', type = '';\r\n                if (attrs.length > 1) {\r\n                    name = attrs[1].replace(/^(\\w+)::/, '');\r\n                    type = attrs[2];\r\n                }\r\n                return {\r\n                    id: id,\r\n                    name: name,\r\n                    type: type\r\n                };\r\n            },\r\n            parseNodeProperty: function (line, property, contentLine) {\r\n                var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\r\n                var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\r\n                if (propName === 'Content' && propValue === ',') {\r\n                    propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\r\n                }\r\n                var currentNode = this.getCurrentNode();\r\n                var parentName = currentNode.name;\r\n                if (parentName === 'Properties70') {\r\n                    this.parseNodeSpecialProperty(line, propName, propValue);\r\n                    return;\r\n                }\r\n                if (propName === 'C') {\r\n                    var connProps = propValue.split(',').slice(1);\r\n                    var from = parseInt(connProps[0]);\r\n                    var to = parseInt(connProps[1]);\r\n                    var rest = propValue.split(',').slice(3);\r\n                    rest = rest.map(function (elem) {\r\n                        return elem.trim().replace(/^\"/, '');\r\n                    });\r\n                    propName = 'connections';\r\n                    propValue = [\r\n                        from,\r\n                        to\r\n                    ];\r\n                    append(propValue, rest);\r\n                    if (currentNode[propName] === undefined) {\r\n                        currentNode[propName] = [];\r\n                    }\r\n                }\r\n                if (propName === 'Node')\r\n                    currentNode.id = propValue;\r\n                if (propName in currentNode && Array.isArray(currentNode[propName])) {\r\n                    currentNode[propName].push(propValue);\r\n                } else {\r\n                    if (propName !== 'a')\r\n                        currentNode[propName] = propValue;\r\n                    else\r\n                        currentNode.a = propValue;\r\n                }\r\n                this.setCurrentProp(currentNode, propName);\r\n                if (propName === 'a' && propValue.slice(-1) !== ',') {\r\n                    currentNode.a = parseNumberArray(propValue);\r\n                }\r\n            },\r\n            parseNodePropertyContinued: function (line) {\r\n                var currentNode = this.getCurrentNode();\r\n                currentNode.a += line;\r\n                if (line.slice(-1) !== ',') {\r\n                    currentNode.a = parseNumberArray(currentNode.a);\r\n                }\r\n            },\r\n            parseNodeSpecialProperty: function (line, propName, propValue) {\r\n                var props = propValue.split('\",').map(function (prop) {\r\n                    return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\r\n                });\r\n                var innerPropName = props[0];\r\n                var innerPropType1 = props[1];\r\n                var innerPropType2 = props[2];\r\n                var innerPropFlag = props[3];\r\n                var innerPropValue = props[4];\r\n                switch (innerPropType1) {\r\n                case 'int':\r\n                case 'enum':\r\n                case 'bool':\r\n                case 'ULongLong':\r\n                case 'double':\r\n                case 'Number':\r\n                case 'FieldOfView':\r\n                    innerPropValue = parseFloat(innerPropValue);\r\n                    break;\r\n                case 'Color':\r\n                case 'ColorRGB':\r\n                case 'Vector3D':\r\n                case 'Lcl_Translation':\r\n                case 'Lcl_Rotation':\r\n                case 'Lcl_Scaling':\r\n                    innerPropValue = parseNumberArray(innerPropValue);\r\n                    break;\r\n                }\r\n                this.getPrevNode()[innerPropName] = {\r\n                    'type': innerPropType1,\r\n                    'type2': innerPropType2,\r\n                    'flag': innerPropFlag,\r\n                    'value': innerPropValue\r\n                };\r\n                this.setCurrentProp(this.getPrevNode(), innerPropName);\r\n            }\r\n        };\r\n        function BinaryParser() {\r\n        }\r\n        BinaryParser.prototype = {\r\n            constructor: BinaryParser,\r\n            parse: function (buffer) {\r\n                var reader = new BinaryReader(buffer);\r\n                reader.skip(23);\r\n                var version = reader.getUint32();\r\n                console.log('THREE.FBXLoader: FBX binary version: ' + version);\r\n                var allNodes = new FBXTree();\r\n                while (!this.endOfContent(reader)) {\r\n                    var node = this.parseNode(reader, version);\r\n                    if (node !== null)\r\n                        allNodes.add(node.name, node);\r\n                }\r\n                return allNodes;\r\n            },\r\n            endOfContent: function (reader) {\r\n                if (reader.size() % 16 === 0) {\r\n                    return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\r\n                } else {\r\n                    return reader.getOffset() + 160 + 16 >= reader.size();\r\n                }\r\n            },\r\n            parseNode: function (reader, version) {\r\n                var node = {};\r\n                var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n                var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n                var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n                var nameLen = reader.getUint8();\r\n                var name = reader.getString(nameLen);\r\n                if (endOffset === 0)\r\n                    return null;\r\n                var propertyList = [];\r\n                for (var i = 0; i < numProperties; i++) {\r\n                    propertyList.push(this.parseProperty(reader));\r\n                }\r\n                var id = propertyList.length > 0 ? propertyList[0] : '';\r\n                var attrName = propertyList.length > 1 ? propertyList[1] : '';\r\n                var attrType = propertyList.length > 2 ? propertyList[2] : '';\r\n                node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\r\n                while (endOffset > reader.getOffset()) {\r\n                    var subNode = this.parseNode(reader, version);\r\n                    if (subNode !== null)\r\n                        this.parseSubNode(name, node, subNode);\r\n                }\r\n                node.propertyList = propertyList;\r\n                if (typeof id === 'number')\r\n                    node.id = id;\r\n                if (attrName !== '')\r\n                    node.attrName = attrName;\r\n                if (attrType !== '')\r\n                    node.attrType = attrType;\r\n                if (name !== '')\r\n                    node.name = name;\r\n                return node;\r\n            },\r\n            parseSubNode: function (name, node, subNode) {\r\n                if (subNode.singleProperty === true) {\r\n                    var value = subNode.propertyList[0];\r\n                    if (Array.isArray(value)) {\r\n                        node[subNode.name] = subNode;\r\n                        subNode.a = value;\r\n                    } else {\r\n                        node[subNode.name] = value;\r\n                    }\r\n                } else if (name === 'Connections' && subNode.name === 'C') {\r\n                    var array = [];\r\n                    subNode.propertyList.forEach(function (property, i) {\r\n                        if (i !== 0)\r\n                            array.push(property);\r\n                    });\r\n                    if (node.connections === undefined) {\r\n                        node.connections = [];\r\n                    }\r\n                    node.connections.push(array);\r\n                } else if (subNode.name === 'Properties70') {\r\n                    var keys = Object.keys(subNode);\r\n                    keys.forEach(function (key) {\r\n                        node[key] = subNode[key];\r\n                    });\r\n                } else if (name === 'Properties70' && subNode.name === 'P') {\r\n                    var innerPropName = subNode.propertyList[0];\r\n                    var innerPropType1 = subNode.propertyList[1];\r\n                    var innerPropType2 = subNode.propertyList[2];\r\n                    var innerPropFlag = subNode.propertyList[3];\r\n                    var innerPropValue;\r\n                    if (innerPropName.indexOf('Lcl ') === 0)\r\n                        innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\r\n                    if (innerPropType1.indexOf('Lcl ') === 0)\r\n                        innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\r\n                    if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\r\n                        innerPropValue = [\r\n                            subNode.propertyList[4],\r\n                            subNode.propertyList[5],\r\n                            subNode.propertyList[6]\r\n                        ];\r\n                    } else {\r\n                        innerPropValue = subNode.propertyList[4];\r\n                    }\r\n                    node[innerPropName] = {\r\n                        'type': innerPropType1,\r\n                        'type2': innerPropType2,\r\n                        'flag': innerPropFlag,\r\n                        'value': innerPropValue\r\n                    };\r\n                } else if (node[subNode.name] === undefined) {\r\n                    if (typeof subNode.id === 'number') {\r\n                        node[subNode.name] = {};\r\n                        node[subNode.name][subNode.id] = subNode;\r\n                    } else {\r\n                        node[subNode.name] = subNode;\r\n                    }\r\n                } else {\r\n                    if (subNode.name === 'PoseNode') {\r\n                        if (!Array.isArray(node[subNode.name])) {\r\n                            node[subNode.name] = [node[subNode.name]];\r\n                        }\r\n                        node[subNode.name].push(subNode);\r\n                    } else if (node[subNode.name][subNode.id] === undefined) {\r\n                        node[subNode.name][subNode.id] = subNode;\r\n                    }\r\n                }\r\n            },\r\n            parseProperty: function (reader) {\r\n                var type = reader.getString(1);\r\n                switch (type) {\r\n                case 'C':\r\n                    return reader.getBoolean();\r\n                case 'D':\r\n                    return reader.getFloat64();\r\n                case 'F':\r\n                    return reader.getFloat32();\r\n                case 'I':\r\n                    return reader.getInt32();\r\n                case 'L':\r\n                    return reader.getInt64();\r\n                case 'R':\r\n                    var length = reader.getUint32();\r\n                    return reader.getArrayBuffer(length);\r\n                case 'S':\r\n                    var length = reader.getUint32();\r\n                    return reader.getString(length);\r\n                case 'Y':\r\n                    return reader.getInt16();\r\n                case 'b':\r\n                case 'c':\r\n                case 'd':\r\n                case 'f':\r\n                case 'i':\r\n                case 'l':\r\n                    var arrayLength = reader.getUint32();\r\n                    var encoding = reader.getUint32();\r\n                    var compressedLength = reader.getUint32();\r\n                    if (encoding === 0) {\r\n                        switch (type) {\r\n                        case 'b':\r\n                        case 'c':\r\n                            return reader.getBooleanArray(arrayLength);\r\n                        case 'd':\r\n                            return reader.getFloat64Array(arrayLength);\r\n                        case 'f':\r\n                            return reader.getFloat32Array(arrayLength);\r\n                        case 'i':\r\n                            return reader.getInt32Array(arrayLength);\r\n                        case 'l':\r\n                            return reader.getInt64Array(arrayLength);\r\n                        }\r\n                    }\r\n                    //if (typeof b.Zlib === 'undefined') {\r\n                    //    console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib');\r\n                    //}\r\n                    var inflate = new Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));\r\n                    var reader2 = new BinaryReader(inflate.decompress().buffer);\r\n                    switch (type) {\r\n                    case 'b':\r\n                    case 'c':\r\n                        return reader2.getBooleanArray(arrayLength);\r\n                    case 'd':\r\n                        return reader2.getFloat64Array(arrayLength);\r\n                    case 'f':\r\n                        return reader2.getFloat32Array(arrayLength);\r\n                    case 'i':\r\n                        return reader2.getInt32Array(arrayLength);\r\n                    case 'l':\r\n                        return reader2.getInt64Array(arrayLength);\r\n                    }\r\n                default:\r\n                    throw new Error('THREE.FBXLoader: Unknown property type ' + type);\r\n                }\r\n            }\r\n        };\r\n        function BinaryReader(buffer, littleEndian) {\r\n            this.dv = new DataView(buffer);\r\n            this.offset = 0;\r\n            this.littleEndian = littleEndian !== undefined ? littleEndian : true;\r\n        }\r\n        BinaryReader.prototype = {\r\n            constructor: BinaryReader,\r\n            getOffset: function () {\r\n                return this.offset;\r\n            },\r\n            size: function () {\r\n                return this.dv.buffer.byteLength;\r\n            },\r\n            skip: function (length) {\r\n                this.offset += length;\r\n            },\r\n            getBoolean: function () {\r\n                return (this.getUint8() & 1) === 1;\r\n            },\r\n            getBooleanArray: function (size) {\r\n                var a = [];\r\n                for (var i = 0; i < size; i++) {\r\n                    a.push(this.getBoolean());\r\n                }\r\n                return a;\r\n            },\r\n            getUint8: function () {\r\n                var value = this.dv.getUint8(this.offset);\r\n                this.offset += 1;\r\n                return value;\r\n            },\r\n            getInt16: function () {\r\n                var value = this.dv.getInt16(this.offset, this.littleEndian);\r\n                this.offset += 2;\r\n                return value;\r\n            },\r\n            getInt32: function () {\r\n                var value = this.dv.getInt32(this.offset, this.littleEndian);\r\n                this.offset += 4;\r\n                return value;\r\n            },\r\n            getInt32Array: function (size) {\r\n                var a = [];\r\n                for (var i = 0; i < size; i++) {\r\n                    a.push(this.getInt32());\r\n                }\r\n                return a;\r\n            },\r\n            getUint32: function () {\r\n                var value = this.dv.getUint32(this.offset, this.littleEndian);\r\n                this.offset += 4;\r\n                return value;\r\n            },\r\n            getInt64: function () {\r\n                var low, high;\r\n                if (this.littleEndian) {\r\n                    low = this.getUint32();\r\n                    high = this.getUint32();\r\n                } else {\r\n                    high = this.getUint32();\r\n                    low = this.getUint32();\r\n                }\r\n                if (high & 2147483648) {\r\n                    high = ~high & 4294967295;\r\n                    low = ~low & 4294967295;\r\n                    if (low === 4294967295)\r\n                        high = high + 1 & 4294967295;\r\n                    low = low + 1 & 4294967295;\r\n                    return -(high * 4294967296 + low);\r\n                }\r\n                return high * 4294967296 + low;\r\n            },\r\n            getInt64Array: function (size) {\r\n                var a = [];\r\n                for (var i = 0; i < size; i++) {\r\n                    a.push(this.getInt64());\r\n                }\r\n                return a;\r\n            },\r\n            getUint64: function () {\r\n                var low, high;\r\n                if (this.littleEndian) {\r\n                    low = this.getUint32();\r\n                    high = this.getUint32();\r\n                } else {\r\n                    high = this.getUint32();\r\n                    low = this.getUint32();\r\n                }\r\n                return high * 4294967296 + low;\r\n            },\r\n            getFloat32: function () {\r\n                var value = this.dv.getFloat32(this.offset, this.littleEndian);\r\n                this.offset += 4;\r\n                return value;\r\n            },\r\n            getFloat32Array: function (size) {\r\n                var a = [];\r\n                for (var i = 0; i < size; i++) {\r\n                    a.push(this.getFloat32());\r\n                }\r\n                return a;\r\n            },\r\n            getFloat64: function () {\r\n                var value = this.dv.getFloat64(this.offset, this.littleEndian);\r\n                this.offset += 8;\r\n                return value;\r\n            },\r\n            getFloat64Array: function (size) {\r\n                var a = [];\r\n                for (var i = 0; i < size; i++) {\r\n                    a.push(this.getFloat64());\r\n                }\r\n                return a;\r\n            },\r\n            getArrayBuffer: function (size) {\r\n                var value = this.dv.buffer.slice(this.offset, this.offset + size);\r\n                this.offset += size;\r\n                return value;\r\n            },\r\n            getString: function (size) {\r\n                var a = [];\r\n                for (var i = 0; i < size; i++) {\r\n                    a[i] = this.getUint8();\r\n                }\r\n                var nullByte = a.indexOf(0);\r\n                if (nullByte >= 0)\r\n                    a = a.slice(0, nullByte);\r\n                return THREE.LoaderUtils.decodeText(new Uint8Array(a));\r\n            }\r\n        };\r\n        function FBXTree() {\r\n        }\r\n        FBXTree.prototype = {\r\n            constructor: FBXTree,\r\n            add: function (key, val) {\r\n                this[key] = val;\r\n            }\r\n        };\r\n        function isFbxFormatBinary(buffer) {\r\n            var CORRECT = 'Kaydara FBX Binary  \\0';\r\n            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\r\n        }\r\n        function isFbxFormatASCII(text) {\r\n            var CORRECT = [\r\n                'K',\r\n                'a',\r\n                'y',\r\n                'd',\r\n                'a',\r\n                'r',\r\n                'a',\r\n                '\\\\',\r\n                'F',\r\n                'B',\r\n                'X',\r\n                '\\\\',\r\n                'B',\r\n                'i',\r\n                'n',\r\n                'a',\r\n                'r',\r\n                'y',\r\n                '\\\\',\r\n                '\\\\'\r\n            ];\r\n            var cursor = 0;\r\n            function read(offset) {\r\n                var result = text[offset - 1];\r\n                text = text.slice(cursor + offset);\r\n                cursor++;\r\n                return result;\r\n            }\r\n            for (var i = 0; i < CORRECT.length; ++i) {\r\n                var num = read(1);\r\n                if (num === CORRECT[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        function getFbxVersion(text) {\r\n            var versionRegExp = /FBXVersion: (\\d+)/;\r\n            var match = text.match(versionRegExp);\r\n            if (match) {\r\n                var version = parseInt(match[1]);\r\n                return version;\r\n            }\r\n            throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\r\n        }\r\n        function convertFBXTimeToSeconds(time) {\r\n            return time / 46186158000;\r\n        }\r\n        var dataArray = [];\r\n        function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\r\n            var index;\r\n            switch (infoObject.mappingType) {\r\n            case 'ByPolygonVertex':\r\n                index = polygonVertexIndex;\r\n                break;\r\n            case 'ByPolygon':\r\n                index = polygonIndex;\r\n                break;\r\n            case 'ByVertice':\r\n                index = vertexIndex;\r\n                break;\r\n            case 'AllSame':\r\n                index = infoObject.indices[0];\r\n                break;\r\n            default:\r\n                console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\r\n            }\r\n            if (infoObject.referenceType === 'IndexToDirect')\r\n                index = infoObject.indices[index];\r\n            var from = index * infoObject.dataSize;\r\n            var to = from + infoObject.dataSize;\r\n            return slice(dataArray, infoObject.buffer, from, to);\r\n        }\r\n        var tempEuler = new THREE.Euler();\r\n        var tempVec = new THREE.Vector3();\r\n        function generateTransform(transformData) {\r\n            var lTranslationM = new THREE.Matrix4();\r\n            var lPreRotationM = new THREE.Matrix4();\r\n            var lRotationM = new THREE.Matrix4();\r\n            var lPostRotationM = new THREE.Matrix4();\r\n            var lScalingM = new THREE.Matrix4();\r\n            var lScalingPivotM = new THREE.Matrix4();\r\n            var lScalingOffsetM = new THREE.Matrix4();\r\n            var lRotationOffsetM = new THREE.Matrix4();\r\n            var lRotationPivotM = new THREE.Matrix4();\r\n            var lParentGX = new THREE.Matrix4();\r\n            var lGlobalT = new THREE.Matrix4();\r\n            var inheritType = transformData.inheritType ? transformData.inheritType : 0;\r\n            if (transformData.translation)\r\n                lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\r\n            if (transformData.preRotation) {\r\n                var array = transformData.preRotation.map(THREE.MathUtils.degToRad);\r\n                array.push(transformData.eulerOrder);\r\n                lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n            }\r\n            if (transformData.rotation) {\r\n                var array = transformData.rotation.map(THREE.MathUtils.degToRad);\r\n                array.push(transformData.eulerOrder);\r\n                lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n            }\r\n            if (transformData.postRotation) {\r\n                var array = transformData.postRotation.map(THREE.MathUtils.degToRad);\r\n                array.push(transformData.eulerOrder);\r\n                lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n            }\r\n            if (transformData.scale)\r\n                lScalingM.scale(tempVec.fromArray(transformData.scale));\r\n            if (transformData.scalingOffset)\r\n                lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\r\n            if (transformData.scalingPivot)\r\n                lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\r\n            if (transformData.rotationOffset)\r\n                lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\r\n            if (transformData.rotationPivot)\r\n                lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\r\n            if (transformData.parentMatrixWorld)\r\n                lParentGX = transformData.parentMatrixWorld;\r\n            var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\r\n            var lParentGRM = new THREE.Matrix4();\r\n            lParentGX.extractRotation(lParentGRM);\r\n            var lParentTM = new THREE.Matrix4();\r\n            var lLSM;\r\n            var lParentGSM;\r\n            var lParentGRSM;\r\n            lParentTM.copyPosition(lParentGX);\r\n            lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\r\n            lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\r\n            lLSM = lScalingM;\r\n            var lGlobalRS;\r\n            if (inheritType === 0) {\r\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\r\n            } else if (inheritType === 1) {\r\n                lGlobalRS = lParentGRM.multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\r\n            } else {\r\n                var lParentLSM = new THREE.Matrix4().copy(lScalingM);\r\n                var lParentGSM_noLocal = lParentGSM.multiply(lParentLSM.getInverse(lParentLSM));\r\n                lGlobalRS = lParentGRM.multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\r\n            }\r\n            var lTransform = lTranslationM.multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM.getInverse(lRotationPivotM)).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM.getInverse(lScalingPivotM));\r\n            var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(lTransform);\r\n            var lGlobalTranslation = lParentGX.multiply(lLocalTWithAllPivotAndOffsetInfo);\r\n            lGlobalT.copyPosition(lGlobalTranslation);\r\n            lTransform = lGlobalT.multiply(lGlobalRS);\r\n            return lTransform;\r\n        }\r\n        function getEulerOrder(order) {\r\n            order = order || 0;\r\n            var enums = [\r\n                'ZYX',\r\n                'YZX',\r\n                'XZY',\r\n                'ZXY',\r\n                'YXZ',\r\n                'XYZ'\r\n            ];\r\n            if (order === 6) {\r\n                console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\r\n                return enums[0];\r\n            }\r\n            return enums[order];\r\n        }\r\n        function parseNumberArray(value) {\r\n            var array = value.split(',').map(function (val) {\r\n                return parseFloat(val);\r\n            });\r\n            return array;\r\n        }\r\n        function convertArrayBufferToString(buffer, from, to) {\r\n            if (from === undefined)\r\n                from = 0;\r\n            if (to === undefined)\r\n                to = buffer.byteLength;\r\n            return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\r\n        }\r\n        function append(a, b) {\r\n            for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\r\n                a[j] = b[i];\r\n            }\r\n        }\r\n        function slice(a, b, from, to) {\r\n            for (var i = from, j = 0; i < to; i++, j++) {\r\n                a[j] = b[i];\r\n            }\r\n            return a;\r\n        }\r\n        function inject(a1, index, a2) {\r\n            return a1.slice(0, index).concat(a2).concat(a1.slice(index));\r\n        }\r\n        return FBXLoader;\r\n    }();\r\n    return threex.loaders.FBXLoader = FBXLoader;\r\n});"]}