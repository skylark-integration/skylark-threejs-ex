{"version":3,"sources":["loaders/KMZLoader.js"],"names":["define","THREE","threex","ColladaLoader","KMZLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","text","parse","data","LoadingManager","setURLModifier","image","zip","files","substr","length","findFile","console","log","blob","Blob","asArrayBuffer","type","URL","createObjectURL","JSZip","model","DOMParser","parseFromString","asText","querySelector","textContent","warn","split","pop","toLowerCase","error","scene","Group","loaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,mBACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,GACtBJ,EAAMK,OAAOC,KAAKC,KAAMH,IAsD5B,OApDAD,EAAUK,UAAYC,OAAOC,OAAOD,OAAOE,OAAOX,EAAMK,OAAOG,YAC3DI,YAAaT,EACbU,KAAM,SAAUC,EAAKC,EAAQC,EAAYC,GACrC,IAAIC,EAAQX,KACRY,EAAS,IAAInB,EAAMoB,WAAWF,EAAMd,SACxCe,EAAOE,QAAQH,EAAMI,MACrBH,EAAOI,gBAAgB,eACvBJ,EAAON,KAAKC,EAAK,SAAUU,GACvBT,EAAOG,EAAMO,MAAMD,KACpBR,EAAYC,IAEnBQ,MAAO,SAAUC,GAQb,IAAItB,EAAU,IAAIJ,EAAM2B,eACxBvB,EAAQwB,eAAe,SAAUd,GAC7B,IAAIe,EATR,SAAkBf,GACd,IAAK,IAAIQ,KAAQQ,EAAIC,MACjB,GAAIT,EAAKU,QAAQlB,EAAImB,UAAYnB,EAC7B,OAAOgB,EAAIC,MAAMT,GAMbY,CAASpB,GACrB,GAAIe,EAAO,CACPM,QAAQC,IAAI,UAAWtB,GACvB,IAAIuB,EAAO,IAAIC,MAAMT,EAAMU,kBAAoBC,KAAM,6BACrD,OAAOC,IAAIC,gBAAgBL,GAE/B,OAAOvB,IAEX,IAAIgB,EAAM,IAAIa,MAAMjB,GACpB,GAAII,EAAIC,MAAM,WAAY,CACtB,IACIa,GADM,IAAIC,WAAYC,gBAAgBhB,EAAIC,MAAM,WAAWgB,SAAU,mBACzDC,cAAc,6BAC9B,GAAIJ,EAEA,OADa,IAAI1C,EAAcE,GACjBqB,MAAMK,EAAIC,MAAMa,EAAMK,aAAaF,eAIrD,IAAK,IAAIzB,KADTa,QAAQe,KAAK,oCACIpB,EAAIC,MAAO,CAExB,GAAkB,QADFT,EAAK6B,MAAM,KAAKC,MAAMC,cAGlC,OADa,IAAInD,EAAcE,GACjBqB,MAAMK,EAAIC,MAAMT,GAAMyB,UAKhD,OADAZ,QAAQmB,MAAM,wCACLC,MAAO,IAAIvD,EAAMwD,UAI3BvD,EAAOwD,QAAQtD,UAAYA","file":"../../loaders/KMZLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    './ColladaLoader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    ColladaLoader\r\n) {\r\n    'use strict';\r\n    var KMZLoader = function (manager) {\r\n        THREE.Loader.call(this, manager);\r\n    };\r\n    KMZLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n        constructor: KMZLoader,\r\n        load: function (url, onLoad, onProgress, onError) {\r\n            var scope = this;\r\n            var loader = new THREE.FileLoader(scope.manager);\r\n            loader.setPath(scope.path);\r\n            loader.setResponseType('arraybuffer');\r\n            loader.load(url, function (text) {\r\n                onLoad(scope.parse(text));\r\n            }, onProgress, onError);\r\n        },\r\n        parse: function (data) {\r\n            function findFile(url) {\r\n                for (var path in zip.files) {\r\n                    if (path.substr(-url.length) === url) {\r\n                        return zip.files[path];\r\n                    }\r\n                }\r\n            }\r\n            var manager = new THREE.LoadingManager();\r\n            manager.setURLModifier(function (url) {\r\n                var image = findFile(url);\r\n                if (image) {\r\n                    console.log('Loading', url);\r\n                    var blob = new Blob([image.asArrayBuffer()], { type: 'application/octet-stream' });\r\n                    return URL.createObjectURL(blob);\r\n                }\r\n                return url;\r\n            });\r\n            var zip = new JSZip(data);\r\n            if (zip.files['doc.kml']) {\r\n                var xml = new DOMParser().parseFromString(zip.files['doc.kml'].asText(), 'application/xml');\r\n                var model = xml.querySelector('Placemark Model Link href');\r\n                if (model) {\r\n                    var loader = new ColladaLoader(manager);\r\n                    return loader.parse(zip.files[model.textContent].asText());\r\n                }\r\n            } else {\r\n                console.warn('KMZLoader: Missing doc.kml file.');\r\n                for (var path in zip.files) {\r\n                    var extension = path.split('.').pop().toLowerCase();\r\n                    if (extension === 'dae') {\r\n                        var loader = new ColladaLoader(manager);\r\n                        return loader.parse(zip.files[path].asText());\r\n                    }\r\n                }\r\n            }\r\n            console.error(\"KMZLoader: Couldn't find .dae file.\");\r\n            return { scene: new THREE.Group() };\r\n        }\r\n    });\r\n\r\n    return threex.loaders.KMZLoader = KMZLoader;\r\n});"]}