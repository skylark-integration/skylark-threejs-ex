{"version":3,"sources":["loaders/BabylonLoader.js"],"names":["define","THREE","threex","BabylonLoader","manager","this","undefined","DefaultLoadingManager","prototype","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","JSON","value","json","parseGeometry","geometry","BufferGeometry","indices","positions","normals","uvs","setIndex","j","jl","length","addAttribute","Float32BufferAttribute","subMeshes","subMesh","addGroup","indexStart","indexCount","materials","objects","scene","Scene","cameras","i","l","data","camera","PerspectiveCamera","fov","Math","PI","minZ","maxZ","name","position","fromArray","rotation","id","lights","light","type","PointLight","DirectionalLight","SpotLight","HemisphereLight","set","color","diffuse","groundColor","intensity","add","meshes","object","Mesh","materialId","Group","rotationQuaternion","quaternion","scale","scaling","parentId","parseObjects","material","MeshPhongMaterial","emissive","specular","shininess","specularPower","opacity","alpha","multiMaterials","console","warn","parseMaterials","loaders"],"mappings":"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","file":"../../loaders/BabylonLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t function BabylonLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t};\n\n\tBabylonLoader.prototype = {\n\n\t\tconstructor: BabylonLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tfunction parseMaterials( json ) {\n\n\t\t\t\tvar materials = {};\n\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json.materials[ i ];\n\n\t\t\t\t\tvar material = new THREE.MeshPhongMaterial();\n\t\t\t\t\tmaterial.name = data.name;\n\t\t\t\t\tmaterial.color.fromArray( data.diffuse );\n\t\t\t\t\tmaterial.emissive.fromArray( data.emissive );\n\t\t\t\t\tmaterial.specular.fromArray( data.specular );\n\t\t\t\t\tmaterial.shininess = data.specularPower;\n\t\t\t\t\tmaterial.opacity = data.alpha;\n\n\t\t\t\t\tmaterials[ data.id ] = material;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.multiMaterials ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.multiMaterials.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar data = json.multiMaterials[ i ];\n\n\t\t\t\t\t\tconsole.warn( 'BabylonLoader: Multi materials not yet supported.' );\n\n\t\t\t\t\t\tmaterials[ data.id ] = new THREE.MeshPhongMaterial();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn materials;\n\n\t\t\t}\n\n\t\t\tfunction parseGeometry( json ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar indices = json.indices;\n\t\t\t\tvar positions = json.positions;\n\t\t\t\tvar normals = json.normals;\n\t\t\t\tvar uvs = json.uvs;\n\n\t\t\t\t// indices\n\n\t\t\t\tgeometry.setIndex( indices );\n\n\t\t\t\t// positions\n\n\t\t\t\tfor ( var j = 2, jl = positions.length; j < jl; j += 3 ) {\n\n\t\t\t\t\tpositions[ j ] = - positions[ j ];\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( normals ) {\n\n\t\t\t\t\tfor ( var j = 2, jl = normals.length; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tnormals[ j ] = - normals[ j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// uvs\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tgeometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// offsets\n\n\t\t\t\tvar subMeshes = json.subMeshes;\n\n\t\t\t\tif ( subMeshes ) {\n\n\t\t\t\t\tfor ( var j = 0, jl = subMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar subMesh = subMeshes[ j ];\n\n\t\t\t\t\t\tgeometry.addGroup( subMesh.indexStart, subMesh.indexCount );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t\tfunction parseObjects( json, materials ) {\n\n\t\t\t\tvar objects = {};\n\t\t\t\tvar scene = new THREE.Scene();\n\n\t\t\t\tvar cameras = json.cameras;\n\n\t\t\t\tfor ( var i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = cameras[ i ];\n\n\t\t\t\t\tvar camera = new THREE.PerspectiveCamera( ( data.fov / Math.PI ) * 180, 1.33, data.minZ, data.maxZ );\n\n\t\t\t\t\tcamera.name = data.name;\n\t\t\t\t\tcamera.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation ) camera.rotation.fromArray( data.rotation );\n\n\t\t\t\t\tobjects[ data.id ] = camera;\n\n\t\t\t\t}\n\n\t\t\t\tvar lights = json.lights;\n\n\t\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = lights[ i ];\n\n\t\t\t\t\tvar light;\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tlight = new THREE.PointLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tlight = new THREE.DirectionalLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tlight = new THREE.SpotLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tlight = new THREE.HemisphereLight();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlight.name = data.name;\n\t\t\t\t\tif ( data.position ) light.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );\n\t\t\t\t\tlight.color.fromArray( data.diffuse );\n\t\t\t\t\tif ( data.groundColor ) light.groundColor.fromArray( data.groundColor );\n\t\t\t\t\tif ( data.intensity ) light.intensity = data.intensity;\n\n\t\t\t\t\tobjects[ data.id ] = light;\n\n\t\t\t\t\tscene.add( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar meshes = json.meshes;\n\n\t\t\t\tfor ( var i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = meshes[ i ];\n\n\t\t\t\t\tvar object;\n\n\t\t\t\t\tif ( data.indices ) {\n\n\t\t\t\t\t\tvar geometry = parseGeometry( data );\n\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, materials[ data.materialId ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.name = data.name;\n\t\t\t\t\tobject.position.set( data.position[ 0 ], data.position[ 1 ], - data.position[ 2 ] );\n\t\t\t\t\tobject.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.rotationQuaternion ) object.quaternion.fromArray( data.rotationQuaternion );\n\t\t\t\t\tobject.scale.fromArray( data.scaling );\n\t\t\t\t\t// object.visible = data.isVisible;\n\n\t\t\t\t\tif ( data.parentId ) {\n\n\t\t\t\t\t\tobjects[ data.parentId ].add( object );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tscene.add( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ data.id ] = object;\n\n\t\t\t\t}\n\n\t\t\t\treturn scene;\n\n\t\t\t}\n\n\t\t\tvar materials = parseMaterials( json );\n\t\t\tvar scene = parseObjects( json, materials );\n\n\t\t\treturn scene;\n\n\t\t}\n\n\t};\n\t\n\treturn threex.loaders.BabylonLoader = BabylonLoader;\n});"]}