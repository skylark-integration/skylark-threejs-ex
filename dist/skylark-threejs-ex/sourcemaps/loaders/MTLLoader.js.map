{"version":3,"sources":["loaders/MTLLoader.js"],"names":["define","THREE","threex","MTLLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","getIndex","materialName","getAsArray","index","undefined","createMaterial_","params","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","test","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","DefaultLoadingManager","getHandler","TextureLoader","loaders"],"mappings":"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","file":"../../loaders/MTLLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var MTLLoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    MTLLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: MTLLoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var path = this.path === '' ? THREE.LoaderUtils.extractUrlBase(url) : this.path;\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setPath(this.path);\n            loader.load(url, function (text) {\n                onLoad(scope.parse(text, path));\n            }, onProgress, onError);\n        },\n        setMaterialOptions: function (value) {\n            this.materialOptions = value;\n            return this;\n        },\n        parse: function (text, path) {\n            var lines = text.split('\\n');\n            var info = {};\n            var delimiter_pattern = /\\s+/;\n            var materialsInfo = {};\n            for (var i = 0; i < lines.length; i++) {\n                var line = lines[i];\n                line = line.trim();\n                if (line.length === 0 || line.charAt(0) === '#') {\n                    continue;\n                }\n                var pos = line.indexOf(' ');\n                var key = pos >= 0 ? line.substring(0, pos) : line;\n                key = key.toLowerCase();\n                var value = pos >= 0 ? line.substring(pos + 1) : '';\n                value = value.trim();\n                if (key === 'newmtl') {\n                    info = { name: value };\n                    materialsInfo[value] = info;\n                } else {\n                    if (key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke') {\n                        var ss = value.split(delimiter_pattern, 3);\n                        info[key] = [\n                            parseFloat(ss[0]),\n                            parseFloat(ss[1]),\n                            parseFloat(ss[2])\n                        ];\n                    } else {\n                        info[key] = value;\n                    }\n                }\n            }\n            var materialCreator = new MTLLoader.MaterialCreator(this.resourcePath || path, this.materialOptions);\n            materialCreator.setCrossOrigin(this.crossOrigin);\n            materialCreator.setManager(this.manager);\n            materialCreator.setMaterials(materialsInfo);\n            return materialCreator;\n        }\n    });\n    MTLLoader.MaterialCreator = function (baseUrl, options) {\n        this.baseUrl = baseUrl || '';\n        this.options = options;\n        this.materialsInfo = {};\n        this.materials = {};\n        this.materialsArray = [];\n        this.nameLookup = {};\n        this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n        this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n    };\n    MTLLoader.MaterialCreator.prototype = {\n        constructor: MTLLoader.MaterialCreator,\n        crossOrigin: 'anonymous',\n        setCrossOrigin: function (value) {\n            this.crossOrigin = value;\n            return this;\n        },\n        setManager: function (value) {\n            this.manager = value;\n        },\n        setMaterials: function (materialsInfo) {\n            this.materialsInfo = this.convert(materialsInfo);\n            this.materials = {};\n            this.materialsArray = [];\n            this.nameLookup = {};\n        },\n        convert: function (materialsInfo) {\n            if (!this.options)\n                return materialsInfo;\n            var converted = {};\n            for (var mn in materialsInfo) {\n                var mat = materialsInfo[mn];\n                var covmat = {};\n                converted[mn] = covmat;\n                for (var prop in mat) {\n                    var save = true;\n                    var value = mat[prop];\n                    var lprop = prop.toLowerCase();\n                    switch (lprop) {\n                    case 'kd':\n                    case 'ka':\n                    case 'ks':\n                        if (this.options && this.options.normalizeRGB) {\n                            value = [\n                                value[0] / 255,\n                                value[1] / 255,\n                                value[2] / 255\n                            ];\n                        }\n                        if (this.options && this.options.ignoreZeroRGBs) {\n                            if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                                save = false;\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                    }\n                    if (save) {\n                        covmat[lprop] = value;\n                    }\n                }\n            }\n            return converted;\n        },\n        preload: function () {\n            for (var mn in this.materialsInfo) {\n                this.create(mn);\n            }\n        },\n        getIndex: function (materialName) {\n            return this.nameLookup[materialName];\n        },\n        getAsArray: function () {\n            var index = 0;\n            for (var mn in this.materialsInfo) {\n                this.materialsArray[index] = this.create(mn);\n                this.nameLookup[mn] = index;\n                index++;\n            }\n            return this.materialsArray;\n        },\n        create: function (materialName) {\n            if (this.materials[materialName] === undefined) {\n                this.createMaterial_(materialName);\n            }\n            return this.materials[materialName];\n        },\n        createMaterial_: function (materialName) {\n            var scope = this;\n            var mat = this.materialsInfo[materialName];\n            var params = {\n                name: materialName,\n                side: this.side\n            };\n            function resolveURL(baseUrl, url) {\n                if (typeof url !== 'string' || url === '')\n                    return '';\n                if (/^https?:\\/\\//i.test(url))\n                    return url;\n                return baseUrl + url;\n            }\n            function setMapForType(mapType, value) {\n                if (params[mapType])\n                    return;\n                var texParams = scope.getTextureParams(value, params);\n                var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n                map.repeat.copy(texParams.scale);\n                map.offset.copy(texParams.offset);\n                map.wrapS = scope.wrap;\n                map.wrapT = scope.wrap;\n                params[mapType] = map;\n            }\n            for (var prop in mat) {\n                var value = mat[prop];\n                var n;\n                if (value === '')\n                    continue;\n                switch (prop.toLowerCase()) {\n                case 'kd':\n                    params.color = new THREE.Color().fromArray(value);\n                    break;\n                case 'ks':\n                    params.specular = new THREE.Color().fromArray(value);\n                    break;\n                case 'ke':\n                    params.emissive = new THREE.Color().fromArray(value);\n                    break;\n                case 'map_kd':\n                    setMapForType('map', value);\n                    break;\n                case 'map_ks':\n                    setMapForType('specularMap', value);\n                    break;\n                case 'map_ke':\n                    setMapForType('emissiveMap', value);\n                    break;\n                case 'norm':\n                    setMapForType('normalMap', value);\n                    break;\n                case 'map_bump':\n                case 'bump':\n                    setMapForType('bumpMap', value);\n                    break;\n                case 'map_d':\n                    setMapForType('alphaMap', value);\n                    params.transparent = true;\n                    break;\n                case 'ns':\n                    params.shininess = parseFloat(value);\n                    break;\n                case 'd':\n                    n = parseFloat(value);\n                    if (n < 1) {\n                        params.opacity = n;\n                        params.transparent = true;\n                    }\n                    break;\n                case 'tr':\n                    n = parseFloat(value);\n                    if (this.options && this.options.invertTrProperty)\n                        n = 1 - n;\n                    if (n > 0) {\n                        params.opacity = 1 - n;\n                        params.transparent = true;\n                    }\n                    break;\n                default:\n                    break;\n                }\n            }\n            this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n            return this.materials[materialName];\n        },\n        getTextureParams: function (value, matParams) {\n            var texParams = {\n                scale: new THREE.Vector2(1, 1),\n                offset: new THREE.Vector2(0, 0)\n            };\n            var items = value.split(/\\s+/);\n            var pos;\n            pos = items.indexOf('-bm');\n            if (pos >= 0) {\n                matParams.bumpScale = parseFloat(items[pos + 1]);\n                items.splice(pos, 2);\n            }\n            pos = items.indexOf('-s');\n            if (pos >= 0) {\n                texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            pos = items.indexOf('-o');\n            if (pos >= 0) {\n                texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n                items.splice(pos, 4);\n            }\n            texParams.url = items.join(' ').trim();\n            return texParams;\n        },\n        loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n            var texture;\n            var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n            var loader = manager.getHandler(url);\n            if (loader === null) {\n                loader = new THREE.TextureLoader(manager);\n            }\n            if (loader.setCrossOrigin)\n                loader.setCrossOrigin(this.crossOrigin);\n            texture = loader.load(url, onLoad, onProgress, onError);\n            if (mapping !== undefined)\n                texture.mapping = mapping;\n            return texture;\n        }\n    };\n    return threex.loaders.MTLLoader = MTLLoader;\n});"]}