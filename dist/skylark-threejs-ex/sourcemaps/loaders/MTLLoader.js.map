{"version":3,"sources":["loaders/MTLLoader.js"],"names":["define","THREE","MTLLoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","text","parse","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","getIndex","materialName","getAsArray","index","undefined","createMaterial_","params","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","test","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","DefaultLoadingManager","getHandler","TextureLoader"],"mappings":"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","file":"../../loaders/MTLLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * Loads a Wavefront .mtl file specifying materials\n\t *\n\t * @author angelxuanchang\n\t */\n\n\tTHREE.MTLLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t};\n\n\tTHREE.MTLLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.MTLLoader,\n\n\t\t/**\n\t\t * Loads and parses a MTL asset from a URL.\n\t\t *\n\t\t * @param {String} url - URL to the MTL file.\n\t\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t\t * @param {Function} [onProgress] - Callback for download progress.\n\t\t * @param {Function} [onError] - Callback for download errors.\n\t\t *\n\t\t * @see setPath setResourcePath\n\t\t *\n\t\t * @note In order for relative texture references to resolve correctly\n\t\t * you must call setResourcePath() explicitly prior to load.\n\t\t */\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? THREE.LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterialOptions: function ( value ) {\n\n\t\t\tthis.materialOptions = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Parses a MTL file.\n\t\t *\n\t\t * @param {String} text - Content of MTL file\n\t\t * @return {THREE.MTLLoader.MaterialCreator}\n\t\t *\n\t\t * @see setPath setResourcePath\n\t\t *\n\t\t * @note In order for relative texture references to resolve correctly\n\t\t * you must call setResourcePath() explicitly prior to parse.\n\t\t */\n\t\tparse: function ( text, path ) {\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar info = {};\n\t\t\tvar delimiter_pattern = /\\s+/;\n\t\t\tvar materialsInfo = {};\n\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tvar line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t\t// Blank line or comment ignore\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\t\tkey = key.toLowerCase();\n\n\t\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\t\tvalue = value.trim();\n\n\t\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t\t// New material\n\n\t\t\t\t\tinfo = { name: value };\n\t\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\t\tmaterialCreator.setManager( this.manager );\n\t\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\t\treturn materialCreator;\n\n\t\t}\n\n\t} );\n\n\n\t/**\n\t * Create a new THREE.MTLLoader.MaterialCreator\n\t * @param baseUrl - Url relative to which textures are loaded\n\t * @param options - Set of options on how to construct the materials\n\t *                  side: Which side to apply the material\n\t *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n\t *                  wrap: What type of wrapping to apply for textures\n\t *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n\t *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n\t *                                Default: false, assumed to be already normalized\n\t *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n\t *                                  Default: false\n\t * @constructor\n\t */\n\n\tTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\t\tthis.baseUrl = baseUrl || '';\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\t\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n\t};\n\n\tTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\t\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetManager: function ( value ) {\n\n\t\t\tthis.manager = value;\n\n\t\t},\n\n\t\tsetMaterials: function ( materialsInfo ) {\n\n\t\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\t\tthis.materials = {};\n\t\t\tthis.materialsArray = [];\n\t\t\tthis.nameLookup = {};\n\n\t\t},\n\n\t\tconvert: function ( materialsInfo ) {\n\n\t\t\tif ( ! this.options ) return materialsInfo;\n\n\t\t\tvar converted = {};\n\n\t\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\t\tvar covmat = {};\n\n\t\t\t\tconverted[ mn ] = covmat;\n\n\t\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\t\tvar save = true;\n\t\t\t\t\tvar value = mat[ prop ];\n\t\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\t\tcase 'kd':\n\t\t\t\t\t\tcase 'ka':\n\t\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( save ) {\n\n\t\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn converted;\n\n\t\t},\n\n\t\tpreload: function () {\n\n\t\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\t\tthis.create( mn );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetIndex: function ( materialName ) {\n\n\t\t\treturn this.nameLookup[ materialName ];\n\n\t\t},\n\n\t\tgetAsArray: function () {\n\n\t\t\tvar index = 0;\n\n\t\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\treturn this.materialsArray;\n\n\t\t},\n\n\t\tcreate: function ( materialName ) {\n\n\t\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\t\tthis.createMaterial_( materialName );\n\n\t\t\t}\n\n\t\t\treturn this.materials[ materialName ];\n\n\t\t},\n\n\t\tcreateMaterial_: function ( materialName ) {\n\n\t\t\t// Create material\n\n\t\t\tvar scope = this;\n\t\t\tvar mat = this.materialsInfo[ materialName ];\n\t\t\tvar params = {\n\n\t\t\t\tname: materialName,\n\t\t\t\tside: this.side\n\n\t\t\t};\n\n\t\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\t\treturn '';\n\n\t\t\t\t// Absolute URL\n\t\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\t\treturn baseUrl + url;\n\n\t\t\t}\n\n\t\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\t\tmap.wrapS = scope.wrap;\n\t\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\t\tparams[ mapType ] = map;\n\n\t\t\t}\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar n;\n\n\t\t\t\tif ( value === '' ) continue;\n\n\t\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\t\tcase 'kd':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ke':\n\n\t\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\t\tparams.emissive = new THREE.Color().fromArray( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t\t// Specular map\n\n\t\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t\t// Emissive map\n\n\t\t\t\t\t\tsetMapForType( \"emissiveMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'norm':\n\n\t\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_bump':\n\t\t\t\t\tcase 'bump':\n\n\t\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t\t// Alpha map\n\n\t\t\t\t\t\tsetMapForType( \"alphaMap\", value );\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ns':\n\n\t\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tr':\n\t\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\t\treturn this.materials[ materialName ];\n\n\t\t},\n\n\t\tgetTextureParams: function ( value, matParams ) {\n\n\t\t\tvar texParams = {\n\n\t\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t\t };\n\n\t\t\tvar items = value.split( /\\s+/ );\n\t\t\tvar pos;\n\n\t\t\tpos = items.indexOf( '-bm' );\n\n\t\t\tif ( pos >= 0 ) {\n\n\t\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\t\titems.splice( pos, 2 );\n\n\t\t\t}\n\n\t\t\tpos = items.indexOf( '-s' );\n\n\t\t\tif ( pos >= 0 ) {\n\n\t\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t\t}\n\n\t\t\tpos = items.indexOf( '-o' );\n\n\t\t\tif ( pos >= 0 ) {\n\n\t\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t\t}\n\n\t\t\ttexParams.url = items.join( ' ' ).trim();\n\t\t\treturn texParams;\n\n\t\t},\n\n\t\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture;\n\t\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\t\t\tvar loader = manager.getHandler( url );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t\t}\n\n\t\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.MTLLoader;\n});\n"]}