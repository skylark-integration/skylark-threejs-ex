{"version":3,"sources":["loaders/KTXLoader.js"],"names":["define","THREE","KTXLoader","manager","CompressedTextureLoader","call","this","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","arrayBuffer","facesExpected","identifier","Uint8Array","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","littleEndian","getUint32","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","Math","max","loadType","COMPRESSED_2D","console","warn","error","dataOffset","HEADER_LEN","level","imageSize","Int32Array","face","byteArray","push","data","COMPRESSED_3D","TEX_2D","TEX_3D"],"mappings":"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","file":"../../loaders/KTXLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author amakaseev / https://github.com/amakaseev\n\t *\n\t * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n\t * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n\t *\n\t * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n\t */\n\n\n\tTHREE.KTXLoader = function ( manager ) {\n\n\t\tTHREE.CompressedTextureLoader.call( this, manager );\n\n\t};\n\n\tTHREE.KTXLoader.prototype = Object.assign( Object.create( THREE.CompressedTextureLoader.prototype ), {\n\n\t\tconstructor: THREE.KTXLoader,\n\n\t\tparse: function ( buffer, loadMipmaps ) {\n\n\t\t\tvar ktx = new KhronosTextureContainer( buffer, 1 );\n\n\t\t\treturn {\n\t\t\t\tmipmaps: ktx.mipmaps( loadMipmaps ),\n\t\t\t\twidth: ktx.pixelWidth,\n\t\t\t\theight: ktx.pixelHeight,\n\t\t\t\tformat: ktx.glInternalFormat,\n\t\t\t\tisCubemap: ktx.numberOfFaces === 6,\n\t\t\t\tmipmapCount: ktx.numberOfMipmapLevels\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\tvar KhronosTextureContainer = ( function () {\n\n\t\t/**\n\t\t * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n\t\t * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n\t\t * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n\t\t * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n\t\t */\n\t\tfunction KhronosTextureContainer( arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */ ) {\n\n\t\t\tthis.arrayBuffer = arrayBuffer;\n\n\t\t\t// Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n\t\t\t// '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t\t\t// 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\t\t\tvar identifier = new Uint8Array( this.arrayBuffer, 0, 12 );\n\t\t\tif ( identifier[ 0 ] !== 0xAB ||\n\t\t\t\tidentifier[ 1 ] !== 0x4B ||\n\t\t\t\tidentifier[ 2 ] !== 0x54 ||\n\t\t\t\tidentifier[ 3 ] !== 0x58 ||\n\t\t\t\tidentifier[ 4 ] !== 0x20 ||\n\t\t\t\tidentifier[ 5 ] !== 0x31 ||\n\t\t\t\tidentifier[ 6 ] !== 0x31 ||\n\t\t\t\tidentifier[ 7 ] !== 0xBB ||\n\t\t\t\tidentifier[ 8 ] !== 0x0D ||\n\t\t\t\tidentifier[ 9 ] !== 0x0A ||\n\t\t\t\tidentifier[ 10 ] !== 0x1A ||\n\t\t\t\tidentifier[ 11 ] !== 0x0A ) {\n\n\t\t\t\tconsole.error( 'texture missing KTX identifier' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// load the reset of the header in native 32 bit uint\n\t\t\tvar dataSize = Uint32Array.BYTES_PER_ELEMENT;\n\t\t\tvar headerDataView = new DataView( this.arrayBuffer, 12, 13 * dataSize );\n\t\t\tvar endianness = headerDataView.getUint32( 0, true );\n\t\t\tvar littleEndian = endianness === 0x04030201;\n\n\t\t\tthis.glType = headerDataView.getUint32( 1 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\t\tthis.glTypeSize = headerDataView.getUint32( 2 * dataSize, littleEndian ); // must be 1 for compressed textures\n\t\t\tthis.glFormat = headerDataView.getUint32( 3 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\t\tthis.glInternalFormat = headerDataView.getUint32( 4 * dataSize, littleEndian ); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\t\t\tthis.glBaseInternalFormat = headerDataView.getUint32( 5 * dataSize, littleEndian ); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\t\t\tthis.pixelWidth = headerDataView.getUint32( 6 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\t\t\tthis.pixelHeight = headerDataView.getUint32( 7 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\t\t\tthis.pixelDepth = headerDataView.getUint32( 8 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\t\t\tthis.numberOfArrayElements = headerDataView.getUint32( 9 * dataSize, littleEndian ); // used for texture arrays\n\t\t\tthis.numberOfFaces = headerDataView.getUint32( 10 * dataSize, littleEndian ); // used for cubemap textures, should either be 1 or 6\n\t\t\tthis.numberOfMipmapLevels = headerDataView.getUint32( 11 * dataSize, littleEndian ); // number of levels; disregard possibility of 0 for compressed textures\n\t\t\tthis.bytesOfKeyValueData = headerDataView.getUint32( 12 * dataSize, littleEndian ); // the amount of space after the header for meta-data\n\n\t\t\t// Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\t\t\tif ( this.glType !== 0 ) {\n\n\t\t\t\tconsole.warn( 'only compressed formats currently supported' );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n\t\t\t\tthis.numberOfMipmapLevels = Math.max( 1, this.numberOfMipmapLevels );\n\n\t\t\t}\n\t\t\tif ( this.pixelHeight === 0 || this.pixelDepth !== 0 ) {\n\n\t\t\t\tconsole.warn( 'only 2D textures currently supported' );\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\tif ( this.numberOfArrayElements !== 0 ) {\n\n\t\t\t\tconsole.warn( 'texture arrays not currently supported' );\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\tif ( this.numberOfFaces !== facesExpected ) {\n\n\t\t\t\tconsole.warn( 'number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces );\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\t// we now have a completely validated file, so could use existence of loadType as success\n\t\t\t// would need to make this more elaborate & adjust checks above to support more than one load type\n\t\t\tthis.loadType = KhronosTextureContainer.COMPRESSED_2D;\n\n\t\t}\n\n\t\t// return mipmaps for THREE.js\n\t\tKhronosTextureContainer.prototype.mipmaps = function ( loadMipmaps ) {\n\n\t\t\tvar mipmaps = [];\n\n\t\t\t// initialize width & height for level 1\n\t\t\tvar dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n\t\t\tvar width = this.pixelWidth;\n\t\t\tvar height = this.pixelHeight;\n\t\t\tvar mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n\t\t\tfor ( var level = 0; level < mipmapCount; level ++ ) {\n\n\t\t\t\tvar imageSize = new Int32Array( this.arrayBuffer, dataOffset, 1 )[ 0 ]; // size per face, since not supporting array cubemaps\n\t\t\t\tdataOffset += 4; // size of the image + 4 for the imageSize field\n\n\t\t\t\tfor ( var face = 0; face < this.numberOfFaces; face ++ ) {\n\n\t\t\t\t\tvar byteArray = new Uint8Array( this.arrayBuffer, dataOffset, imageSize );\n\n\t\t\t\t\tmipmaps.push( { \"data\": byteArray, \"width\": width, \"height\": height } );\n\n\t\t\t\t\tdataOffset += imageSize;\n\t\t\t\t\tdataOffset += 3 - ( ( imageSize + 3 ) % 4 ); // add padding for odd sized image\n\n\t\t\t\t}\n\t\t\t\twidth = Math.max( 1.0, width * 0.5 );\n\t\t\t\theight = Math.max( 1.0, height * 0.5 );\n\n\t\t\t}\n\n\t\t\treturn mipmaps;\n\n\t\t};\n\n\t\tKhronosTextureContainer.HEADER_LEN = 12 + ( 13 * 4 ); // identifier + header elements (not including key value meta-data pairs)\n\t\t// load types\n\t\tKhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\t\tKhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\t\tKhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\t\tKhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n\t\treturn KhronosTextureContainer;\n\n\t}() );\n\n\t\n\treturn THREE.KTXLoader;\n});\n"]}