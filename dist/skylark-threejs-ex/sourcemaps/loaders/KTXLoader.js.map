{"version":3,"sources":["loaders/KTXLoader.js"],"names":["define","THREE","threex","KTXLoader","manager","CompressedTextureLoader","call","this","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","arrayBuffer","facesExpected","identifier","Uint8Array","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","littleEndian","getUint32","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","Math","max","loadType","COMPRESSED_2D","console","warn","error","dataOffset","HEADER_LEN","level","imageSize","Int32Array","face","byteArray","push","data","COMPRESSED_3D","TEX_2D","TEX_3D","loaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,GACtBH,EAAMI,wBAAwBC,KAAKC,KAAMH,IAE7CD,EAAUK,UAAYC,OAAOC,OAAOD,OAAOE,OAAOV,EAAMI,wBAAwBG,YAC5EI,YAAaT,EACbU,MAAO,SAAUC,EAAQC,GACrB,IAAIC,EAAM,IAAIC,EAAwBH,EAAQ,GAC9C,OACII,QAASF,EAAIE,QAAQH,GACrBI,MAAOH,EAAII,WACXC,OAAQL,EAAIM,YACZC,OAAQP,EAAIQ,iBACZC,UAAiC,IAAtBT,EAAIU,cACfC,YAAaX,EAAIY,yBAI7B,IAAIX,EAA0B,WAC1B,SAASA,EAAwBY,EAAaC,GAC1CvB,KAAKsB,YAAcA,EACnB,IAAIE,EAAa,IAAIC,WAAWzB,KAAKsB,YAAa,EAAG,IACrD,GAAsB,MAAlBE,EAAW,IAAgC,KAAlBA,EAAW,IAA+B,KAAlBA,EAAW,IAA+B,KAAlBA,EAAW,IAA+B,KAAlBA,EAAW,IAA+B,KAAlBA,EAAW,IAA+B,KAAlBA,EAAW,IAA+B,MAAlBA,EAAW,IAAgC,KAAlBA,EAAW,IAA+B,KAAlBA,EAAW,IAAgC,KAAnBA,EAAW,KAAiC,KAAnBA,EAAW,IAA1R,CAIA,IAAIE,EAAWC,YAAYC,kBACvBC,EAAiB,IAAIC,SAAS9B,KAAKsB,YAAa,GAAI,GAAKI,GAEzDK,EAA8B,WADjBF,EAAeG,UAAU,GAAG,GAE7ChC,KAAKiC,OAASJ,EAAeG,UAAU,EAAIN,EAAUK,GACrD/B,KAAKkC,WAAaL,EAAeG,UAAU,EAAIN,EAAUK,GACzD/B,KAAKmC,SAAWN,EAAeG,UAAU,EAAIN,EAAUK,GACvD/B,KAAKiB,iBAAmBY,EAAeG,UAAU,EAAIN,EAAUK,GAC/D/B,KAAKoC,qBAAuBP,EAAeG,UAAU,EAAIN,EAAUK,GACnE/B,KAAKa,WAAagB,EAAeG,UAAU,EAAIN,EAAUK,GACzD/B,KAAKe,YAAcc,EAAeG,UAAU,EAAIN,EAAUK,GAC1D/B,KAAKqC,WAAaR,EAAeG,UAAU,EAAIN,EAAUK,GACzD/B,KAAKsC,sBAAwBT,EAAeG,UAAU,EAAIN,EAAUK,GACpE/B,KAAKmB,cAAgBU,EAAeG,UAAU,GAAKN,EAAUK,GAC7D/B,KAAKqB,qBAAuBQ,EAAeG,UAAU,GAAKN,EAAUK,GACpE/B,KAAKuC,oBAAsBV,EAAeG,UAAU,GAAKN,EAAUK,GAC/C,IAAhB/B,KAAKiC,QAILjC,KAAKqB,qBAAuBmB,KAAKC,IAAI,EAAGzC,KAAKqB,sBAExB,IAArBrB,KAAKe,aAAyC,IAApBf,KAAKqC,WAIA,IAA/BrC,KAAKsC,sBAILtC,KAAKmB,gBAAkBI,EAI3BvB,KAAK0C,SAAWhC,EAAwBiC,cAHpCC,QAAQC,KAAK,2BAA6BtB,EAAgB,eAAiBvB,KAAKmB,eAJhFyB,QAAQC,KAAK,0CAJbD,QAAQC,KAAK,yCANbD,QAAQC,KAAK,oDApBbD,QAAQE,MAAM,kCAoEtB,OA7BApC,EAAwBT,UAAUU,QAAU,SAAUH,GAMlD,IALA,IAAIG,KACAoC,EAAarC,EAAwBsC,WAAahD,KAAKuC,oBACvD3B,EAAQZ,KAAKa,WACbC,EAASd,KAAKe,YACdK,EAAcZ,EAAcR,KAAKqB,qBAAuB,EACnD4B,EAAQ,EAAGA,EAAQ7B,EAAa6B,IAAS,CAC9C,IAAIC,EAAY,IAAIC,WAAWnD,KAAKsB,YAAayB,EAAY,GAAG,GAChEA,GAAc,EACd,IAAK,IAAIK,EAAO,EAAGA,EAAOpD,KAAKmB,cAAeiC,IAAQ,CAClD,IAAIC,EAAY,IAAI5B,WAAWzB,KAAKsB,YAAayB,EAAYG,GAC7DvC,EAAQ2C,MACJC,KAAQF,EACRzC,MAASA,EACTE,OAAUA,IAEdiC,GAAcG,EACdH,GAAc,GAAKG,EAAY,GAAK,EAExCtC,EAAQ4B,KAAKC,IAAI,EAAW,GAAR7B,GACpBE,EAAS0B,KAAKC,IAAI,EAAY,GAAT3B,GAEzB,OAAOH,GAEXD,EAAwBsC,WAAa,GACrCtC,EAAwBiC,cAAgB,EACxCjC,EAAwB8C,cAAgB,EACxC9C,EAAwB+C,OAAS,EACjC/C,EAAwBgD,OAAS,EAC1BhD,EAzEmB,GA4E9B,OAAOf,EAAOgE,QAAQ/D,UAAYA","file":"../../loaders/KTXLoader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var KTXLoader = function (manager) {\n        THREE.CompressedTextureLoader.call(this, manager);\n    };\n    KTXLoader.prototype = Object.assign(Object.create(THREE.CompressedTextureLoader.prototype), {\n        constructor: KTXLoader,\n        parse: function (buffer, loadMipmaps) {\n            var ktx = new KhronosTextureContainer(buffer, 1);\n            return {\n                mipmaps: ktx.mipmaps(loadMipmaps),\n                width: ktx.pixelWidth,\n                height: ktx.pixelHeight,\n                format: ktx.glInternalFormat,\n                isCubemap: ktx.numberOfFaces === 6,\n                mipmapCount: ktx.numberOfMipmapLevels\n            };\n        }\n    });\n    var KhronosTextureContainer = function () {\n        function KhronosTextureContainer(arrayBuffer, facesExpected) {\n            this.arrayBuffer = arrayBuffer;\n            var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n            if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n                console.error('texture missing KTX identifier');\n                return;\n            }\n            var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n            var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n            var endianness = headerDataView.getUint32(0, true);\n            var littleEndian = endianness === 67305985;\n            this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n            this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n            this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n            this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n            this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n            this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n            this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n            this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n            this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n            this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n            this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n            this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n            if (this.glType !== 0) {\n                console.warn('only compressed formats currently supported');\n                return;\n            } else {\n                this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n            }\n            if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n                console.warn('only 2D textures currently supported');\n                return;\n            }\n            if (this.numberOfArrayElements !== 0) {\n                console.warn('texture arrays not currently supported');\n                return;\n            }\n            if (this.numberOfFaces !== facesExpected) {\n                console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n                return;\n            }\n            this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n        }\n        KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n            var mipmaps = [];\n            var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n            var width = this.pixelWidth;\n            var height = this.pixelHeight;\n            var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n            for (var level = 0; level < mipmapCount; level++) {\n                var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n                dataOffset += 4;\n                for (var face = 0; face < this.numberOfFaces; face++) {\n                    var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n                    mipmaps.push({\n                        'data': byteArray,\n                        'width': width,\n                        'height': height\n                    });\n                    dataOffset += imageSize;\n                    dataOffset += 3 - (imageSize + 3) % 4;\n                }\n                width = Math.max(1, width * 0.5);\n                height = Math.max(1, height * 0.5);\n            }\n            return mipmaps;\n        };\n        KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4;\n        KhronosTextureContainer.COMPRESSED_2D = 0;\n        KhronosTextureContainer.COMPRESSED_3D = 1;\n        KhronosTextureContainer.TEX_2D = 2;\n        KhronosTextureContainer.TEX_3D = 3;\n        return KhronosTextureContainer;\n    }();\n\n    return threex.loaders.KTXLoader = KTXLoader;\n});"]}