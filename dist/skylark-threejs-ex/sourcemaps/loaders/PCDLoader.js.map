{"version":3,"sources":["loaders/PCDLoader.js"],"names":["define","THREE","threex","PCDLoader","manager","Loader","call","this","littleEndian","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","data","parse","e","textData","LoaderUtils","decodeText","Uint8Array","PCDheader","result1","search","result2","exec","substr","headerLen","length","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","parseHeader","position","normal","color","lines","line","undefined","y","z","rgb","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","slice","compressedSize","decompressedSize","decompressed","inData","outLength","ctrl","len","ref","inLength","outData","inPtr","outPtr","Error","decompressLZF","dataview","DataView","buffer","getFloat32","getUint8","row","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","computeBoundingSphere","material","PointsMaterial","vertexColors","setHex","Math","random","mesh","Points","name","reverse","join","loaders"],"mappings":"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","file":"../../loaders/PCDLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var PCDLoader = function (manager) {\r\n        THREE.Loader.call(this, manager);\r\n        this.littleEndian = true;\r\n    };\r\n    PCDLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n        constructor: PCDLoader,\r\n        load: function (url, onLoad, onProgress, onError) {\r\n            var scope = this;\r\n            var loader = new THREE.FileLoader(scope.manager);\r\n            loader.setPath(scope.path);\r\n            loader.setResponseType('arraybuffer');\r\n            loader.load(url, function (data) {\r\n                try {\r\n                    onLoad(scope.parse(data, url));\r\n                } catch (e) {\r\n                    if (onError) {\r\n                        onError(e);\r\n                    } else {\r\n                        throw e;\r\n                    }\r\n                }\r\n            }, onProgress, onError);\r\n        },\r\n        parse: function (data, url) {\r\n            function decompressLZF(inData, outLength) {\r\n                var inLength = inData.length;\r\n                var outData = new Uint8Array(outLength);\r\n                var inPtr = 0;\r\n                var outPtr = 0;\r\n                var ctrl;\r\n                var len;\r\n                var ref;\r\n                do {\r\n                    ctrl = inData[inPtr++];\r\n                    if (ctrl < 1 << 5) {\r\n                        ctrl++;\r\n                        if (outPtr + ctrl > outLength)\r\n                            throw new Error('Output buffer is not large enough');\r\n                        if (inPtr + ctrl > inLength)\r\n                            throw new Error('Invalid compressed data');\r\n                        do {\r\n                            outData[outPtr++] = inData[inPtr++];\r\n                        } while (--ctrl);\r\n                    } else {\r\n                        len = ctrl >> 5;\r\n                        ref = outPtr - ((ctrl & 31) << 8) - 1;\r\n                        if (inPtr >= inLength)\r\n                            throw new Error('Invalid compressed data');\r\n                        if (len === 7) {\r\n                            len += inData[inPtr++];\r\n                            if (inPtr >= inLength)\r\n                                throw new Error('Invalid compressed data');\r\n                        }\r\n                        ref -= inData[inPtr++];\r\n                        if (outPtr + len + 2 > outLength)\r\n                            throw new Error('Output buffer is not large enough');\r\n                        if (ref < 0)\r\n                            throw new Error('Invalid compressed data');\r\n                        if (ref >= outPtr)\r\n                            throw new Error('Invalid compressed data');\r\n                        do {\r\n                            outData[outPtr++] = outData[ref++];\r\n                        } while (--len + 2);\r\n                    }\r\n                } while (inPtr < inLength);\r\n                return outData;\r\n            }\r\n            function parseHeader(data) {\r\n                var PCDheader = {};\r\n                var result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\r\n                var result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\r\n                PCDheader.data = result2[1];\r\n                PCDheader.headerLen = result2[0].length + result1;\r\n                PCDheader.str = data.substr(0, PCDheader.headerLen);\r\n                PCDheader.str = PCDheader.str.replace(/\\#.*/gi, '');\r\n                PCDheader.version = /VERSION (.*)/i.exec(PCDheader.str);\r\n                PCDheader.fields = /FIELDS (.*)/i.exec(PCDheader.str);\r\n                PCDheader.size = /SIZE (.*)/i.exec(PCDheader.str);\r\n                PCDheader.type = /TYPE (.*)/i.exec(PCDheader.str);\r\n                PCDheader.count = /COUNT (.*)/i.exec(PCDheader.str);\r\n                PCDheader.width = /WIDTH (.*)/i.exec(PCDheader.str);\r\n                PCDheader.height = /HEIGHT (.*)/i.exec(PCDheader.str);\r\n                PCDheader.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader.str);\r\n                PCDheader.points = /POINTS (.*)/i.exec(PCDheader.str);\r\n                if (PCDheader.version !== null)\r\n                    PCDheader.version = parseFloat(PCDheader.version[1]);\r\n                if (PCDheader.fields !== null)\r\n                    PCDheader.fields = PCDheader.fields[1].split(' ');\r\n                if (PCDheader.type !== null)\r\n                    PCDheader.type = PCDheader.type[1].split(' ');\r\n                if (PCDheader.width !== null)\r\n                    PCDheader.width = parseInt(PCDheader.width[1]);\r\n                if (PCDheader.height !== null)\r\n                    PCDheader.height = parseInt(PCDheader.height[1]);\r\n                if (PCDheader.viewpoint !== null)\r\n                    PCDheader.viewpoint = PCDheader.viewpoint[1];\r\n                if (PCDheader.points !== null)\r\n                    PCDheader.points = parseInt(PCDheader.points[1], 10);\r\n                if (PCDheader.points === null)\r\n                    PCDheader.points = PCDheader.width * PCDheader.height;\r\n                if (PCDheader.size !== null) {\r\n                    PCDheader.size = PCDheader.size[1].split(' ').map(function (x) {\r\n                        return parseInt(x, 10);\r\n                    });\r\n                }\r\n                if (PCDheader.count !== null) {\r\n                    PCDheader.count = PCDheader.count[1].split(' ').map(function (x) {\r\n                        return parseInt(x, 10);\r\n                    });\r\n                } else {\r\n                    PCDheader.count = [];\r\n                    for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\r\n                        PCDheader.count.push(1);\r\n                    }\r\n                }\r\n                PCDheader.offset = {};\r\n                var sizeSum = 0;\r\n                for (var i = 0, l = PCDheader.fields.length; i < l; i++) {\r\n                    if (PCDheader.data === 'ascii') {\r\n                        PCDheader.offset[PCDheader.fields[i]] = i;\r\n                    } else {\r\n                        PCDheader.offset[PCDheader.fields[i]] = sizeSum;\r\n                        sizeSum += PCDheader.size[i];\r\n                    }\r\n                }\r\n                PCDheader.rowSize = sizeSum;\r\n                return PCDheader;\r\n            }\r\n            var textData = THREE.LoaderUtils.decodeText(new Uint8Array(data));\r\n            var PCDheader = parseHeader(textData);\r\n            var position = [];\r\n            var normal = [];\r\n            var color = [];\r\n            if (PCDheader.data === 'ascii') {\r\n                var offset = PCDheader.offset;\r\n                var pcdData = textData.substr(PCDheader.headerLen);\r\n                var lines = pcdData.split('\\n');\r\n                for (var i = 0, l = lines.length; i < l; i++) {\r\n                    if (lines[i] === '')\r\n                        continue;\r\n                    var line = lines[i].split(' ');\r\n                    if (offset.x !== undefined) {\r\n                        position.push(parseFloat(line[offset.x]));\r\n                        position.push(parseFloat(line[offset.y]));\r\n                        position.push(parseFloat(line[offset.z]));\r\n                    }\r\n                    if (offset.rgb !== undefined) {\r\n                        var rgb = parseFloat(line[offset.rgb]);\r\n                        var r = rgb >> 16 & 255;\r\n                        var g = rgb >> 8 & 255;\r\n                        var b = rgb >> 0 & 255;\r\n                        color.push(r / 255, g / 255, b / 255);\r\n                    }\r\n                    if (offset.normal_x !== undefined) {\r\n                        normal.push(parseFloat(line[offset.normal_x]));\r\n                        normal.push(parseFloat(line[offset.normal_y]));\r\n                        normal.push(parseFloat(line[offset.normal_z]));\r\n                    }\r\n                }\r\n            }\r\n            if (PCDheader.data === 'binary_compressed') {\r\n                var sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\r\n                var compressedSize = sizes[0];\r\n                var decompressedSize = sizes[1];\r\n                var decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\r\n                var dataview = new DataView(decompressed.buffer);\r\n                var offset = PCDheader.offset;\r\n                for (var i = 0; i < PCDheader.points; i++) {\r\n                    if (offset.x !== undefined) {\r\n                        position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\r\n                        position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\r\n                        position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\r\n                    }\r\n                    if (offset.rgb !== undefined) {\r\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);\r\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);\r\n                        color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);\r\n                    }\r\n                    if (offset.normal_x !== undefined) {\r\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\r\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\r\n                        normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\r\n                    }\r\n                }\r\n            }\r\n            if (PCDheader.data === 'binary') {\r\n                var dataview = new DataView(data, PCDheader.headerLen);\r\n                var offset = PCDheader.offset;\r\n                for (var i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\r\n                    if (offset.x !== undefined) {\r\n                        position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\r\n                        position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\r\n                        position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\r\n                    }\r\n                    if (offset.rgb !== undefined) {\r\n                        color.push(dataview.getUint8(row + offset.rgb + 2) / 255);\r\n                        color.push(dataview.getUint8(row + offset.rgb + 1) / 255);\r\n                        color.push(dataview.getUint8(row + offset.rgb + 0) / 255);\r\n                    }\r\n                    if (offset.normal_x !== undefined) {\r\n                        normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\r\n                        normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\r\n                        normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\r\n                    }\r\n                }\r\n            }\r\n            var geometry = new THREE.BufferGeometry();\r\n            if (position.length > 0)\r\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\r\n            if (normal.length > 0)\r\n                geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normal, 3));\r\n            if (color.length > 0)\r\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(color, 3));\r\n            geometry.computeBoundingSphere();\r\n            var material = new THREE.PointsMaterial({ size: 0.005 });\r\n            if (color.length > 0) {\r\n                material.vertexColors = true;\r\n            } else {\r\n                material.color.setHex(Math.random() * 16777215);\r\n            }\r\n            var mesh = new THREE.Points(geometry, material);\r\n            var name = url.split('').reverse().join('');\r\n            name = /([^\\/]*)/.exec(name);\r\n            name = name[1].split('').reverse().join('');\r\n            mesh.name = name;\r\n            return mesh;\r\n        }\r\n    });\r\n\r\n    return threex.loaders.PCDLoader = PCDLoader;\r\n});"]}