{"version":3,"sources":["loaders/TTFLoader.js"],"names":["define","THREE","threex","TTFLoader","manager","Loader","call","this","reversed","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","buffer","parse","arraybuffer","reverseCommands","commands","paths","forEach","c","type","toLowerCase","push","p","result","x","length","y","i","command","undefined","x2","y2","x1","y1","opentype","console","warn","font","round","Math","glyphs","scale","unitsPerEm","glyphIndexMap","encoding","cmap","unicodes","keys","unicode","glyph","token","ha","advanceWidth","x_min","xMin","x_max","xMax","o","String","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","boundingBox","head","yMin","yMax","resolution","original_font_information","name","convert","loaders"],"mappings":"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","file":"../../loaders/TTFLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var TTFLoader = function (manager) {\r\n        THREE.Loader.call(this, manager);\r\n        this.reversed = false;\r\n    };\r\n    TTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n        constructor: TTFLoader,\r\n        load: function (url, onLoad, onProgress, onError) {\r\n            var scope = this;\r\n            var loader = new THREE.FileLoader(this.manager);\r\n            loader.setPath(this.path);\r\n            loader.setResponseType('arraybuffer');\r\n            loader.load(url, function (buffer) {\r\n                onLoad(scope.parse(buffer));\r\n            }, onProgress, onError);\r\n        },\r\n        parse: function (arraybuffer) {\r\n            function convert(font, reversed) {\r\n                var round = Math.round;\r\n                var glyphs = {};\r\n                var scale = 100000 / ((font.unitsPerEm || 2048) * 72);\r\n                var glyphIndexMap = font.encoding.cmap.glyphIndexMap;\r\n                var unicodes = Object.keys(glyphIndexMap);\r\n                for (var i = 0; i < unicodes.length; i++) {\r\n                    var unicode = unicodes[i];\r\n                    var glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\r\n                    if (unicode !== undefined) {\r\n                        var token = {\r\n                            ha: round(glyph.advanceWidth * scale),\r\n                            x_min: round(glyph.xMin * scale),\r\n                            x_max: round(glyph.xMax * scale),\r\n                            o: ''\r\n                        };\r\n                        if (reversed) {\r\n                            glyph.path.commands = reverseCommands(glyph.path.commands);\r\n                        }\r\n                        glyph.path.commands.forEach(function (command) {\r\n                            if (command.type.toLowerCase() === 'c') {\r\n                                command.type = 'b';\r\n                            }\r\n                            token.o += command.type.toLowerCase() + ' ';\r\n                            if (command.x !== undefined && command.y !== undefined) {\r\n                                token.o += round(command.x * scale) + ' ' + round(command.y * scale) + ' ';\r\n                            }\r\n                            if (command.x1 !== undefined && command.y1 !== undefined) {\r\n                                token.o += round(command.x1 * scale) + ' ' + round(command.y1 * scale) + ' ';\r\n                            }\r\n                            if (command.x2 !== undefined && command.y2 !== undefined) {\r\n                                token.o += round(command.x2 * scale) + ' ' + round(command.y2 * scale) + ' ';\r\n                            }\r\n                        });\r\n                        glyphs[String.fromCodePoint(glyph.unicode)] = token;\r\n                    }\r\n                }\r\n                return {\r\n                    glyphs: glyphs,\r\n                    familyName: font.getEnglishName('fullName'),\r\n                    ascender: round(font.ascender * scale),\r\n                    descender: round(font.descender * scale),\r\n                    underlinePosition: font.tables.post.underlinePosition,\r\n                    underlineThickness: font.tables.post.underlineThickness,\r\n                    boundingBox: {\r\n                        xMin: font.tables.head.xMin,\r\n                        xMax: font.tables.head.xMax,\r\n                        yMin: font.tables.head.yMin,\r\n                        yMax: font.tables.head.yMax\r\n                    },\r\n                    resolution: 1000,\r\n                    original_font_information: font.tables.name\r\n                };\r\n            }\r\n            function reverseCommands(commands) {\r\n                var paths = [];\r\n                var path;\r\n                commands.forEach(function (c) {\r\n                    if (c.type.toLowerCase() === 'm') {\r\n                        path = [c];\r\n                        paths.push(path);\r\n                    } else if (c.type.toLowerCase() !== 'z') {\r\n                        path.push(c);\r\n                    }\r\n                });\r\n                var reversed = [];\r\n                paths.forEach(function (p) {\r\n                    var result = {\r\n                        type: 'm',\r\n                        x: p[p.length - 1].x,\r\n                        y: p[p.length - 1].y\r\n                    };\r\n                    reversed.push(result);\r\n                    for (var i = p.length - 1; i > 0; i--) {\r\n                        var command = p[i];\r\n                        var result = { type: command.type };\r\n                        if (command.x2 !== undefined && command.y2 !== undefined) {\r\n                            result.x1 = command.x2;\r\n                            result.y1 = command.y2;\r\n                            result.x2 = command.x1;\r\n                            result.y2 = command.y1;\r\n                        } else if (command.x1 !== undefined && command.y1 !== undefined) {\r\n                            result.x1 = command.x1;\r\n                            result.y1 = command.y1;\r\n                        }\r\n                        result.x = p[i - 1].x;\r\n                        result.y = p[i - 1].y;\r\n                        reversed.push(result);\r\n                    }\r\n                });\r\n                return reversed;\r\n            }\r\n            if (typeof opentype === 'undefined') {\r\n                console.warn(\"THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader.\");\r\n                return null;\r\n            }\r\n            return convert(opentype.parse(arraybuffer), this.reversed);\r\n        }\r\n    });\r\n    return threex.loaders.TTFLoader = TTFLoader;\r\n});"]}