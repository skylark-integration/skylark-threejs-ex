{"version":3,"sources":["loaders/TTFLoader.js"],"names":["define","THREE","TTFLoader","manager","Loader","call","this","reversed","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","buffer","parse","arraybuffer","reverseCommands","commands","paths","forEach","c","type","toLowerCase","push","p","result","x","length","y","i","command","undefined","x2","y2","x1","y1","opentype","console","warn","font","round","Math","glyphs","scale","unitsPerEm","glyphIndexMap","encoding","cmap","unicodes","keys","unicode","glyph","token","ha","advanceWidth","x_min","xMin","x_max","xMax","o","String","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","boundingBox","head","yMin","yMax","resolution","original_font_information","name","convert"],"mappings":"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","file":"../../loaders/TTFLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author gero3 / https://github.com/gero3\n\t * @author tentone / https://github.com/tentone\n\t * @author troy351 / https://github.com/troy351\n\t *\n\t * Requires opentype.js to be included in the project.\n\t * Loads TTF files and converts them into typeface JSON that can be used directly\n\t * to create THREE.Font objects.\n\t */\n\n\tTHREE.TTFLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.reversed = false;\n\n\t};\n\n\n\tTHREE.TTFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.TTFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( arraybuffer ) {\n\n\t\t\tfunction convert( font, reversed ) {\n\n\t\t\t\tvar round = Math.round;\n\n\t\t\t\tvar glyphs = {};\n\t\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\t\tvar token = {\n\t\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\t\to: ''\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tglyphs: glyphs,\n\t\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\t\tboundingBox: {\n\t\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t\t},\n\t\t\t\t\tresolution: 1000,\n\t\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction reverseCommands( commands ) {\n\n\t\t\t\tvar paths = [];\n\t\t\t\tvar path;\n\n\t\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\t\tpath = [ c ];\n\t\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\t\tpath.push( c );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tvar reversed = [];\n\n\t\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\t\tvar result = {\n\t\t\t\t\t\ttype: 'm',\n\t\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t\t};\n\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\t\treversed.push( result );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn reversed;\n\n\t\t\t}\n\n\t\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.TTFLoader;\n});\n"]}