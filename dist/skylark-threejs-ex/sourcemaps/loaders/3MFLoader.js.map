{"version":3,"sources":["loaders/3MFLoader.js"],"names":["define","THREE","ThreeMFLoader","manager","Loader","call","this","availableExtensions","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","buffer","parse","data","textureLoader","TextureLoader","parseRelsXml","relsFileText","relationships","relsNodes","DOMParser","parseFromString","querySelectorAll","i","length","relsNode","relationship","target","getAttribute","id","type","push","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialData","parseBasematerialNode","index","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","Color","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","name","metallicness","roughness","basematerialNode","parseComponentNode","componentNode","componentData","transform","parseTransform","t","split","forEach","s","matrix","Matrix4","set","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","triangleProperty","parseInt","keys","Uint32Array","parseMeshNode","componentsNode","components","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","unit","metadataNodes","metadataData","metadataNode","indexOf","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","texture2DNode","textures2DNodes","textures2DNode","texture2DData","contenttype","tilestyleu","tilestylev","filter","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","objects","textureData","texture2d","resources","blob","Blob","sourceURI","URL","createObjectURL","texture","revokeObjectURL","encoding","sRGBEncoding","wrapS","RepeatWrapping","MirroredRepeatWrapping","ClampToEdgeWrapping","wrapT","magFilter","LinearFilter","minFilter","LinearMipmapLinearFilter","NearestFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","BufferGeometry","positionData","j","jl","setAttribute","Float32BufferAttribute","mesh","Mesh","buildTexturedMesh","uvData","MeshPhongMaterial","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","BufferAttribute","getResourceType","buildGroup","group","Group","resourceMap","il","resourceId","newMeshes","console","error","buildMeshes","objectPid","analyzeObject","add","builder","build","materialData","pbmetallicdisplayproperties","MeshStandardMaterial","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","extensions","modelXml","ns","extension","apply","applyExtensions","data3mf","relsName","modelRelsName","rels","modelRels","zip","file","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelParts","texturesParts","JSZip","e","ReferenceError","files","match","relsView","Uint8Array","asArrayBuffer","LoaderUtils","decodeText","modelPart","view","fileText","xmlData","documentElement","nodeName","toLowerCase","attributes","attr","value","RegExp","$1","texturesPartName","model","printTicket","other","loadDocument","modelsData","modelsKeys","modelRel","textureKey","objectIds","buildObjects","addExtension"],"mappings":"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","file":"../../loaders/3MFLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author technohippy / https://github.com/technohippy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n\t *\n\t * The following features from the core specification are supported:\n\t *\n\t * - 3D Models\n\t * - Object Resources (Meshes and Components)\n\t * - Material Resources (Base Materials)\n\t *\n\t * 3MF Materials and Properties Extension are only partially supported.\n\t *\n\t * - Texture 2D\n\t * - Texture 2D Groups\n\t * - Color Groups (Vertex Colors)\n\t * - Metallic Display Properties (PBR)\n\t */\n\n\tTHREE.ThreeMFLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.availableExtensions = [];\n\n\t};\n\n\tTHREE.ThreeMFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.ThreeMFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( data ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager );\n\n\t\t\tfunction loadDocument( data ) {\n\n\t\t\t\tvar zip = null;\n\t\t\t\tvar file = null;\n\n\t\t\t\tvar relsName;\n\t\t\t\tvar modelRelsName;\n\t\t\t\tvar modelPartNames = [];\n\t\t\t\tvar printTicketPartNames = [];\n\t\t\t\tvar texturesPartNames = [];\n\t\t\t\tvar otherPartNames = [];\n\n\t\t\t\tvar rels;\n\t\t\t\tvar modelRels;\n\t\t\t\tvar modelParts = {};\n\t\t\t\tvar printTicketParts = {};\n\t\t\t\tvar texturesParts = {};\n\t\t\t\tvar otherParts = {};\n\n\t\t\t\ttry {\n\n\t\t\t\t\tzip = new JSZip( data ); // eslint-disable-line no-undef\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: jszip missing and file is compressed.' );\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( file in zip.files ) {\n\n\t\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\n\n\t\t\t\t\t\trelsName = file;\n\n\t\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\n\n\t\t\t\t\t\tmodelRelsName = file;\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/.*\\.model$/ ) ) {\n\n\t\t\t\t\t\tmodelPartNames.push( file );\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/Metadata\\/.*\\.xml$/ ) ) {\n\n\t\t\t\t\t\tprintTicketPartNames.push( file );\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\n\n\t\t\t\t\t\ttexturesPartNames.push( file );\n\n\t\t\t\t\t} else if ( file.match( /^3D\\/Other\\/.*/ ) ) {\n\n\t\t\t\t\t\totherPartNames.push( file );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar relsView = new Uint8Array( zip.file( relsName ).asArrayBuffer() );\n\t\t\t\tvar relsFileText = THREE.LoaderUtils.decodeText( relsView );\n\t\t\t\trels = parseRelsXml( relsFileText );\n\n\t\t\t\t//\n\n\t\t\t\tif ( modelRelsName ) {\n\n\t\t\t\t\tvar relsView = new Uint8Array( zip.file( modelRelsName ).asArrayBuffer() );\n\t\t\t\t\tvar relsFileText = THREE.LoaderUtils.decodeText( relsView );\n\t\t\t\t\tmodelRels = parseRelsXml( relsFileText );\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tfor ( var i = 0; i < modelPartNames.length; i ++ ) {\n\n\t\t\t\t\tvar modelPart = modelPartNames[ i ];\n\t\t\t\t\tvar view = new Uint8Array( zip.file( modelPart ).asArrayBuffer() );\n\n\t\t\t\t\tvar fileText = THREE.LoaderUtils.decodeText( view );\n\t\t\t\t\tvar xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar modelNode = xmlData.querySelector( 'model' );\n\t\t\t\t\tvar extensions = {};\n\n\t\t\t\t\tfor ( var i = 0; i < modelNode.attributes.length; i ++ ) {\n\n\t\t\t\t\t\tvar attr = modelNode.attributes[ i ];\n\t\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\n\n\t\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar modelData = parseModelNode( modelNode );\n\t\t\t\t\tmodelData[ 'xml' ] = modelNode;\n\n\t\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\n\n\t\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodelParts[ modelPart ] = modelData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tfor ( var i = 0; i < texturesPartNames.length; i ++ ) {\n\n\t\t\t\t\tvar texturesPartName = texturesPartNames[ i ];\n\t\t\t\t\ttexturesParts[ texturesPartName ] = zip.file( texturesPartName ).asArrayBuffer();\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\trels: rels,\n\t\t\t\t\tmodelRels: modelRels,\n\t\t\t\t\tmodel: modelParts,\n\t\t\t\t\tprintTicket: printTicketParts,\n\t\t\t\t\ttexture: texturesParts,\n\t\t\t\t\tother: otherParts\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction parseRelsXml( relsFileText ) {\n\n\t\t\t\tvar relationships = [];\n\n\t\t\t\tvar relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\n\n\t\t\t\tvar relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\n\n\t\t\t\tfor ( var i = 0; i < relsNodes.length; i ++ ) {\n\n\t\t\t\t\tvar relsNode = relsNodes[ i ];\n\n\t\t\t\t\tvar relationship = {\n\t\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\n\t\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\n\t\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\n\t\t\t\t\t};\n\n\t\t\t\t\trelationships.push( relationship );\n\n\t\t\t\t}\n\n\t\t\t\treturn relationships;\n\n\t\t\t}\n\n\t\t\tfunction parseMetadataNodes( metadataNodes ) {\n\n\t\t\t\tvar metadataData = {};\n\n\t\t\t\tfor ( var i = 0; i < metadataNodes.length; i ++ ) {\n\n\t\t\t\t\tvar metadataNode = metadataNodes[ i ];\n\t\t\t\t\tvar name = metadataNode.getAttribute( 'name' );\n\t\t\t\t\tvar validNames = [\n\t\t\t\t\t\t'Title',\n\t\t\t\t\t\t'Designer',\n\t\t\t\t\t\t'Description',\n\t\t\t\t\t\t'Copyright',\n\t\t\t\t\t\t'LicenseTerms',\n\t\t\t\t\t\t'Rating',\n\t\t\t\t\t\t'CreationDate',\n\t\t\t\t\t\t'ModificationDate'\n\t\t\t\t\t];\n\n\t\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\n\n\t\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn metadataData;\n\n\t\t\t}\n\n\t\t\tfunction parseBasematerialsNode( basematerialsNode ) {\n\n\t\t\t\tvar basematerialsData = {\n\t\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\n\t\t\t\t\tbasematerials: []\n\t\t\t\t};\n\n\t\t\t\tvar basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\n\n\t\t\t\tfor ( var i = 0; i < basematerialNodes.length; i ++ ) {\n\n\t\t\t\t\tvar basematerialNode = basematerialNodes[ i ];\n\t\t\t\t\tvar basematerialData = parseBasematerialNode( basematerialNode );\n\t\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\t\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\n\n\t\t\t\t}\n\n\t\t\t\treturn basematerialsData;\n\n\t\t\t}\n\n\t\t\tfunction parseTexture2DNode( texture2DNode ) {\n\n\t\t\t\tvar texture2dData = {\n\t\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\n\t\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\n\t\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\n\t\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\n\t\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\n\t\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\n\t\t\t\t};\n\n\t\t\t\treturn texture2dData;\n\n\t\t\t}\n\n\t\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\n\n\t\t\t\tvar texture2DGroupData = {\n\t\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\n\t\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\n\t\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t\t};\n\n\t\t\t\tvar tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\n\n\t\t\t\tvar uvs = [];\n\n\t\t\t\tfor ( var i = 0; i < tex2coordNodes.length; i ++ ) {\n\n\t\t\t\t\tvar tex2coordNode = tex2coordNodes[ i ];\n\t\t\t\t\tvar u = tex2coordNode.getAttribute( 'u' );\n\t\t\t\t\tvar v = tex2coordNode.getAttribute( 'v' );\n\n\t\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\n\n\t\t\t\t}\n\n\t\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\n\n\t\t\t\treturn texture2DGroupData;\n\n\t\t\t}\n\n\t\t\tfunction parseColorGroupNode( colorGroupNode ) {\n\n\t\t\t\tvar colorGroupData = {\n\t\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\n\t\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t\t};\n\n\t\t\t\tvar colorNodes = colorGroupNode.querySelectorAll( 'color' );\n\n\t\t\t\tvar colors = [];\n\t\t\t\tvar colorObject = new THREE.Color();\n\n\t\t\t\tfor ( var i = 0; i < colorNodes.length; i ++ ) {\n\n\t\t\t\t\tvar colorNode = colorNodes[ i ];\n\t\t\t\t\tvar color = colorNode.getAttribute( 'color' );\n\n\t\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ) );\n\t\t\t\t\tcolorObject.convertSRGBToLinear(); // color is in sRGB\n\n\t\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\n\n\t\t\t\t}\n\n\t\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\n\n\t\t\t\treturn colorGroupData;\n\n\t\t\t}\n\n\t\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\n\n\t\t\t\tvar metallicDisplaypropertiesData = {\n\t\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\n\t\t\t\t};\n\n\t\t\t\tvar metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\n\n\t\t\t\tvar metallicData = [];\n\n\t\t\t\tfor ( var i = 0; i < metallicNodes.length; i ++ ) {\n\n\t\t\t\t\tvar metallicNode = metallicNodes[ i ];\n\n\t\t\t\t\tmetallicData.push( {\n\t\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\n\t\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\n\t\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tmetallicDisplaypropertiesData.data = metallicData;\n\n\t\t\t\treturn metallicDisplaypropertiesData;\n\n\t\t\t}\n\n\t\t\tfunction parseBasematerialNode( basematerialNode ) {\n\n\t\t\t\tvar basematerialData = {};\n\n\t\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\n\t\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\n\t\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\n\n\t\t\t\treturn basematerialData;\n\n\t\t\t}\n\n\t\t\tfunction parseMeshNode( meshNode ) {\n\n\t\t\t\tvar meshData = {};\n\n\t\t\t\tvar vertices = [];\n\t\t\t\tvar vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\n\n\t\t\t\tfor ( var i = 0; i < vertexNodes.length; i ++ ) {\n\n\t\t\t\t\tvar vertexNode = vertexNodes[ i ];\n\t\t\t\t\tvar x = vertexNode.getAttribute( 'x' );\n\t\t\t\t\tvar y = vertexNode.getAttribute( 'y' );\n\t\t\t\t\tvar z = vertexNode.getAttribute( 'z' );\n\n\t\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\n\n\t\t\t\t}\n\n\t\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\n\n\t\t\t\tvar triangleProperties = [];\n\t\t\t\tvar triangles = [];\n\t\t\t\tvar triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\n\n\t\t\t\tfor ( var i = 0; i < triangleNodes.length; i ++ ) {\n\n\t\t\t\t\tvar triangleNode = triangleNodes[ i ];\n\t\t\t\t\tvar v1 = triangleNode.getAttribute( 'v1' );\n\t\t\t\t\tvar v2 = triangleNode.getAttribute( 'v2' );\n\t\t\t\t\tvar v3 = triangleNode.getAttribute( 'v3' );\n\t\t\t\t\tvar p1 = triangleNode.getAttribute( 'p1' );\n\t\t\t\t\tvar p2 = triangleNode.getAttribute( 'p2' );\n\t\t\t\t\tvar p3 = triangleNode.getAttribute( 'p3' );\n\t\t\t\t\tvar pid = triangleNode.getAttribute( 'pid' );\n\n\t\t\t\t\tvar triangleProperty = {};\n\n\t\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\n\t\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\n\t\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\n\n\t\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\n\n\t\t\t\t\t// optional\n\n\t\t\t\t\tif ( p1 ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( p2 ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( p3 ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pid ) {\n\n\t\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\n\n\t\t\t\t\t\ttriangleProperties.push( triangleProperty );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\n\t\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\n\n\t\t\t\treturn meshData;\n\n\t\t\t}\n\n\t\t\tfunction parseComponentsNode( componentsNode ) {\n\n\t\t\t\tvar components = [];\n\n\t\t\t\tvar componentNodes = componentsNode.querySelectorAll( 'component' );\n\n\t\t\t\tfor ( var i = 0; i < componentNodes.length; i ++ ) {\n\n\t\t\t\t\tvar componentNode = componentNodes[ i ];\n\t\t\t\t\tvar componentData = parseComponentNode( componentNode );\n\t\t\t\t\tcomponents.push( componentData );\n\n\t\t\t\t}\n\n\t\t\t\treturn components;\n\n\t\t\t}\n\n\t\t\tfunction parseComponentNode( componentNode ) {\n\n\t\t\t\tvar componentData = {};\n\n\t\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\n\n\t\t\t\tvar transform = componentNode.getAttribute( 'transform' );\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t}\n\n\t\t\t\treturn componentData;\n\n\t\t\t}\n\n\t\t\tfunction parseTransform( transform ) {\n\n\t\t\t\tvar t = [];\n\t\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\n\n\t\t\t\t\tt.push( parseFloat( s ) );\n\n\t\t\t\t} );\n\n\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\tmatrix.set(\n\t\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\n\t\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\n\t\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\n\t\t\t\t\t 0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\treturn matrix;\n\n\t\t\t}\n\n\t\t\tfunction parseObjectNode( objectNode ) {\n\n\t\t\t\tvar objectData = {\n\t\t\t\t\ttype: objectNode.getAttribute( 'type' )\n\t\t\t\t};\n\n\t\t\t\tvar id = objectNode.getAttribute( 'id' );\n\n\t\t\t\tif ( id ) {\n\n\t\t\t\t\tobjectData[ 'id' ] = id;\n\n\t\t\t\t}\n\n\t\t\t\tvar pid = objectNode.getAttribute( 'pid' );\n\n\t\t\t\tif ( pid ) {\n\n\t\t\t\t\tobjectData[ 'pid' ] = pid;\n\n\t\t\t\t}\n\n\t\t\t\tvar pindex = objectNode.getAttribute( 'pindex' );\n\n\t\t\t\tif ( pindex ) {\n\n\t\t\t\t\tobjectData[ 'pindex' ] = pindex;\n\n\t\t\t\t}\n\n\t\t\t\tvar thumbnail = objectNode.getAttribute( 'thumbnail' );\n\n\t\t\t\tif ( thumbnail ) {\n\n\t\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\n\n\t\t\t\t}\n\n\t\t\t\tvar partnumber = objectNode.getAttribute( 'partnumber' );\n\n\t\t\t\tif ( partnumber ) {\n\n\t\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\n\n\t\t\t\t}\n\n\t\t\t\tvar name = objectNode.getAttribute( 'name' );\n\n\t\t\t\tif ( name ) {\n\n\t\t\t\t\tobjectData[ 'name' ] = name;\n\n\t\t\t\t}\n\n\t\t\t\tvar meshNode = objectNode.querySelector( 'mesh' );\n\n\t\t\t\tif ( meshNode ) {\n\n\t\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\n\n\t\t\t\t}\n\n\t\t\t\tvar componentsNode = objectNode.querySelector( 'components' );\n\n\t\t\t\tif ( componentsNode ) {\n\n\t\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\n\n\t\t\t\t}\n\n\t\t\t\treturn objectData;\n\n\t\t\t}\n\n\t\t\tfunction parseResourcesNode( resourcesNode ) {\n\n\t\t\t\tvar resourcesData = {};\n\n\t\t\t\tresourcesData[ 'basematerials' ] = {};\n\t\t\t\tvar basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\n\n\t\t\t\tfor ( var i = 0; i < basematerialsNodes.length; i ++ ) {\n\n\t\t\t\t\tvar basematerialsNode = basematerialsNodes[ i ];\n\t\t\t\t\tvar basematerialsData = parseBasematerialsNode( basematerialsNode );\n\t\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'texture2d' ] = {};\n\t\t\t\tvar textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\n\n\t\t\t\tfor ( var i = 0; i < textures2DNodes.length; i ++ ) {\n\n\t\t\t\t\tvar textures2DNode = textures2DNodes[ i ];\n\t\t\t\t\tvar texture2DData = parseTexture2DNode( textures2DNode );\n\t\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'colorgroup' ] = {};\n\t\t\t\tvar colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\n\n\t\t\t\tfor ( var i = 0; i < colorGroupNodes.length; i ++ ) {\n\n\t\t\t\t\tvar colorGroupNode = colorGroupNodes[ i ];\n\t\t\t\t\tvar colorGroupData = parseColorGroupNode( colorGroupNode );\n\t\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\n\t\t\t\tvar pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\n\n\t\t\t\tfor ( var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\n\n\t\t\t\t\tvar pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\n\t\t\t\t\tvar pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\n\t\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'texture2dgroup' ] = {};\n\t\t\t\tvar textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\n\n\t\t\t\tfor ( var i = 0; i < textures2DGroupNodes.length; i ++ ) {\n\n\t\t\t\t\tvar textures2DGroupNode = textures2DGroupNodes[ i ];\n\t\t\t\t\tvar textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\n\t\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tresourcesData[ 'object' ] = {};\n\t\t\t\tvar objectNodes = resourcesNode.querySelectorAll( 'object' );\n\n\t\t\t\tfor ( var i = 0; i < objectNodes.length; i ++ ) {\n\n\t\t\t\t\tvar objectNode = objectNodes[ i ];\n\t\t\t\t\tvar objectData = parseObjectNode( objectNode );\n\t\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\n\n\t\t\t\t}\n\n\t\t\t\treturn resourcesData;\n\n\t\t\t}\n\n\t\t\tfunction parseBuildNode( buildNode ) {\n\n\t\t\t\tvar buildData = [];\n\t\t\t\tvar itemNodes = buildNode.querySelectorAll( 'item' );\n\n\t\t\t\tfor ( var i = 0; i < itemNodes.length; i ++ ) {\n\n\t\t\t\t\tvar itemNode = itemNodes[ i ];\n\t\t\t\t\tvar buildItem = {\n\t\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\n\t\t\t\t\t};\n\t\t\t\t\tvar transform = itemNode.getAttribute( 'transform' );\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbuildData.push( buildItem );\n\n\t\t\t\t}\n\n\t\t\t\treturn buildData;\n\n\t\t\t}\n\n\t\t\tfunction parseModelNode( modelNode ) {\n\n\t\t\t\tvar modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\n\t\t\t\tvar metadataNodes = modelNode.querySelectorAll( 'metadata' );\n\n\t\t\t\tif ( metadataNodes ) {\n\n\t\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\n\n\t\t\t\t}\n\n\t\t\t\tvar resourcesNode = modelNode.querySelector( 'resources' );\n\n\t\t\t\tif ( resourcesNode ) {\n\n\t\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\n\n\t\t\t\t}\n\n\t\t\t\tvar buildNode = modelNode.querySelector( 'build' );\n\n\t\t\t\tif ( buildNode ) {\n\n\t\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\n\n\t\t\t\t}\n\n\t\t\t\treturn modelData;\n\n\t\t\t}\n\n\t\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\n\n\t\t\t\tvar texid = texture2dgroup.texid;\n\t\t\t\tvar texture2ds = modelData.resources.texture2d;\n\t\t\t\tvar texture2d = texture2ds[ texid ];\n\n\t\t\t\tif ( texture2d ) {\n\n\t\t\t\t\tvar data = textureData[ texture2d.path ];\n\t\t\t\t\tvar type = texture2d.contenttype;\n\n\t\t\t\t\tvar blob = new Blob( [ data ], { type: type } );\n\t\t\t\t\tvar sourceURI = URL.createObjectURL( blob );\n\n\t\t\t\t\tvar texture = textureLoader.load( sourceURI, function () {\n\n\t\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\ttexture.encoding = THREE.sRGBEncoding;\n\n\t\t\t\t\t// texture parameters\n\n\t\t\t\t\tswitch ( texture2d.tilestyleu ) {\n\n\t\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\t\ttexture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\t\ttexture.wrapS = THREE.MirroredRepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\t\ttexture.wrapS = THREE.ClampToEdgeWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttexture.wrapS = THREE.RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( texture2d.tilestylev ) {\n\n\t\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\t\ttexture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\t\ttexture.wrapT = THREE.MirroredRepeatWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'none':\n\t\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\t\ttexture.wrapT = THREE.ClampToEdgeWrapping;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttexture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( texture2d.filter ) {\n\n\t\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearMipmapLinearFilter;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'linear':\n\t\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'nearest':\n\t\t\t\t\t\t\ttexture.magFilter = THREE.NearestFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.NearestFilter;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearMipmapLinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, modelData, meshData, textureData, objectData ) {\n\n\t\t\t\tvar objectPindex = objectData.pindex;\n\n\t\t\t\tvar materialMap = {};\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\t\t\t\t\tvar pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\n\n\t\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\n\n\t\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar keys = Object.keys( materialMap );\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar materialIndex = keys[ i ];\n\t\t\t\t\tvar trianglePropertiesProps = materialMap[ materialIndex ];\n\t\t\t\t\tvar basematerialData = basematerials.basematerials[ materialIndex ];\n\t\t\t\t\tvar material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\t\tvar positionData = [];\n\n\t\t\t\t\tvar vertices = meshData.vertices;\n\n\t\t\t\t\tfor ( var j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar triangleProperty = trianglePropertiesProps[ j ];\n\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positionData, 3 ) );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\t\t\t\t\tmeshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\treturn meshes;\n\n\t\t\t}\n\n\t\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData ) {\n\n\t\t\t\t// geometry\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar positionData = [];\n\t\t\t\tvar uvData = [];\n\n\t\t\t\tvar vertices = meshData.vertices;\n\t\t\t\tvar uvs = texture2dgroup.uvs;\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\n\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\n\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\n\t\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positionData, 3 ) );\n\t\t\t\tgeometry.setAttribute( 'uv', new THREE.Float32BufferAttribute( uvData, 2 ) );\n\n\t\t\t\t// material\n\n\t\t\t\tvar texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial( { map: texture, flatShading: true } );\n\n\t\t\t\t// mesh\n\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\treturn mesh;\n\n\t\t\t}\n\n\t\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, modelData, meshData ) {\n\n\t\t\t\t// geometry\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\t\tvar positionData = [];\n\t\t\t\tvar colorData = [];\n\n\t\t\t\tvar vertices = meshData.vertices;\n\t\t\t\tvar colors = colorgroup.colors;\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\n\t\t\t\t\tvar v1 = triangleProperty.v1;\n\t\t\t\t\tvar v2 = triangleProperty.v2;\n\t\t\t\t\tvar v3 = triangleProperty.v3;\n\n\t\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\n\n\t\t\t\t\t//\n\n\t\t\t\t\tvar p1 = triangleProperty.p1;\n\t\t\t\t\tvar p2 = triangleProperty.p2;\n\t\t\t\t\tvar p3 = triangleProperty.p3;\n\n\t\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\n\t\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\n\t\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\n\n\t\t\t\t\tcolorData.push( colors[ ( ( p2 || p1 ) * 3 ) + 0 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p2 || p1 ) * 3 ) + 1 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p2 || p1 ) * 3 ) + 2 ] );\n\n\t\t\t\t\tcolorData.push( colors[ ( ( p3 || p1 ) * 3 ) + 0 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p3 || p1 ) * 3 ) + 1 ] );\n\t\t\t\t\tcolorData.push( colors[ ( ( p3 || p1 ) * 3 ) + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positionData, 3 ) );\n\t\t\t\tgeometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colorData, 3 ) );\n\n\t\t\t\t// material\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial( { vertexColors: true, flatShading: true } );\n\n\t\t\t\t// mesh\n\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\treturn mesh;\n\n\t\t\t}\n\n\t\t\tfunction buildDefaultMesh( meshData ) {\n\n\t\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( meshData[ 'triangles' ], 1 ) );\n\t\t\t\tgeometry.setAttribute( 'position', new THREE.BufferAttribute( meshData[ 'vertices' ], 3 ) );\n\n\t\t\t\tvar material = new THREE.MeshPhongMaterial( { color: 0xaaaaff, flatShading: true } );\n\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, material );\n\n\t\t\t\treturn mesh;\n\n\t\t\t}\n\n\t\t\tfunction buildMeshes( resourceMap, modelData, meshData, textureData, objectData ) {\n\n\t\t\t\tvar keys = Object.keys( resourceMap );\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar resourceId = keys[ i ];\n\t\t\t\t\tvar triangleProperties = resourceMap[ resourceId ];\n\t\t\t\t\tvar resourceType = getResourceType( resourceId, modelData );\n\n\t\t\t\t\tswitch ( resourceType ) {\n\n\t\t\t\t\t\tcase 'material':\n\t\t\t\t\t\t\tvar basematerials = modelData.resources.basematerials[ resourceId ];\n\t\t\t\t\t\t\tvar newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, modelData, meshData, textureData, objectData );\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = newMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\t\tvar texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\n\t\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tvar colorgroup = modelData.resources.colorgroup[ resourceId ];\n\t\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, modelData, meshData ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'default':\n\t\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn meshes;\n\n\t\t\t}\n\n\t\t\tfunction getResourceType( pid, modelData ) {\n\n\t\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\n\n\t\t\t\t\treturn 'texture';\n\n\t\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\n\n\t\t\t\t\treturn 'material';\n\n\t\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\n\n\t\t\t\t\treturn 'vertexColors';\n\n\t\t\t\t} else if ( pid === 'default' ) {\n\n\t\t\t\t\treturn 'default';\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction analyzeObject( modelData, meshData, objectData ) {\n\n\t\t\t\tvar resourceMap = {};\n\n\t\t\t\tvar triangleProperties = meshData[ 'triangleProperties' ];\n\n\t\t\t\tvar objectPid = objectData.pid;\n\n\t\t\t\tfor ( var i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar triangleProperty = triangleProperties[ i ];\n\t\t\t\t\tvar pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\n\n\t\t\t\t\tif ( pid === undefined ) pid = 'default';\n\n\t\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\n\n\t\t\t\t\tresourceMap[ pid ].push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t\treturn resourceMap;\n\n\t\t\t}\n\n\t\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tvar resourceMap = analyzeObject( modelData, meshData, objectData );\n\t\t\t\tvar meshes = buildMeshes( resourceMap, modelData, meshData, textureData, objectData );\n\n\t\t\t\tfor ( var i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t}\n\n\t\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\n\n\t\t\t\tif ( ! extensions ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar availableExtensions = [];\n\t\t\t\tvar keys = Object.keys( extensions );\n\n\t\t\t\tfor ( var i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\t\tvar ns = keys[ i ];\n\n\t\t\t\t\tfor ( var j = 0; j < scope.availableExtensions.length; j ++ ) {\n\n\t\t\t\t\t\tvar extension = scope.availableExtensions[ j ];\n\n\t\t\t\t\t\tif ( extension.ns === ns ) {\n\n\t\t\t\t\t\t\tavailableExtensions.push( extension );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < availableExtensions.length; i ++ ) {\n\n\t\t\t\t\tvar extension = availableExtensions[ i ];\n\t\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\n\n\t\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\n\n\t\t\t\treturn data.build;\n\n\t\t\t}\n\n\t\t\tfunction buildBasematerial( materialData, objects, modelData ) {\n\n\t\t\t\tvar material;\n\n\t\t\t\tvar displaypropertiesid = materialData.displaypropertiesid;\n\t\t\t\tvar pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n\t\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\n\n\t\t\t\t\t// metallic display property, use StandardMaterial\n\n\t\t\t\t\tvar pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\n\t\t\t\t\tvar metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\n\n\t\t\t\t\tmaterial = new THREE.MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// otherwise use PhongMaterial\n\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { flatShading: true } );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.name = materialData.name;\n\n\t\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n\t\t\t\tvar displaycolor = materialData.displaycolor;\n\n\t\t\t\tvar color = displaycolor.substring( 0, 7 );\n\t\t\t\tmaterial.color.setStyle( color );\n\t\t\t\tmaterial.color.convertSRGBToLinear(); // displaycolor is in sRGB\n\n\t\t\t\t// process alpha if set\n\n\t\t\t\tif ( displaycolor.length === 9 ) {\n\n\t\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\n\n\t\t\t\tvar composite = new THREE.Group();\n\n\t\t\t\tfor ( var j = 0; j < compositeData.length; j ++ ) {\n\n\t\t\t\t\tvar component = compositeData[ j ];\n\t\t\t\t\tvar build = objects[ component.objectId ];\n\n\t\t\t\t\tif ( build === undefined ) {\n\n\t\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\n\t\t\t\t\t\tbuild = objects[ component.objectId ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar object3D = build.clone();\n\n\t\t\t\t\t// apply component transfrom\n\n\t\t\t\t\tvar transform = component.transform;\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcomposite.add( object3D );\n\n\t\t\t\t}\n\n\t\t\t\treturn composite;\n\n\t\t\t}\n\n\t\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\n\n\t\t\t\tvar objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\n\n\t\t\t\tif ( objectData[ 'mesh' ] ) {\n\n\t\t\t\t\tvar meshData = objectData[ 'mesh' ];\n\n\t\t\t\t\tvar extensions = modelData[ 'extensions' ];\n\t\t\t\t\tvar modelXml = modelData[ 'xml' ];\n\n\t\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\n\n\t\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar compositeData = objectData[ 'components' ];\n\n\t\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction buildObjects( data3mf ) {\n\n\t\t\t\tvar modelsData = data3mf.model;\n\t\t\t\tvar modelRels = data3mf.modelRels;\n\t\t\t\tvar objects = {};\n\t\t\t\tvar modelsKeys = Object.keys( modelsData );\n\t\t\t\tvar textureData = {};\n\n\t\t\t\t// evaluate model relationships to textures\n\n\t\t\t\tif ( modelRels ) {\n\n\t\t\t\t\tfor ( var i = 0, l = modelRels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar modelRel = modelRels[ i ];\n\t\t\t\t\t\tvar textureKey = modelRel.target.substring( 1 );\n\n\t\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\n\n\t\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// start build\n\n\t\t\t\tfor ( var i = 0; i < modelsKeys.length; i ++ ) {\n\n\t\t\t\t\tvar modelsKey = modelsKeys[ i ];\n\t\t\t\t\tvar modelData = modelsData[ modelsKey ];\n\n\t\t\t\t\tvar objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\n\n\t\t\t\t\tfor ( var j = 0; j < objectIds.length; j ++ ) {\n\n\t\t\t\t\t\tvar objectId = objectIds[ j ];\n\n\t\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn objects;\n\n\t\t\t}\n\n\t\t\tfunction build( objects, data3mf ) {\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tvar relationship = data3mf[ 'rels' ][ 0 ];\n\t\t\t\tvar buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\n\n\t\t\t\tfor ( var i = 0; i < buildData.length; i ++ ) {\n\n\t\t\t\t\tvar buildItem = buildData[ i ];\n\t\t\t\t\tvar object3D = objects[ buildItem[ 'objectId' ] ];\n\n\t\t\t\t\t// apply transform\n\n\t\t\t\t\tvar transform = buildItem[ 'transform' ];\n\n\t\t\t\t\tif ( transform ) {\n\n\t\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup.add( object3D );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t}\n\n\t\t\tvar data3mf = loadDocument( data );\n\t\t\tvar objects = buildObjects( data3mf );\n\n\t\t\treturn build( objects, data3mf );\n\n\t\t},\n\n\t\taddExtension: function ( extension ) {\n\n\t\t\tthis.availableExtensions.push( extension );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.ThreeMFLoader;\n});\n"]}