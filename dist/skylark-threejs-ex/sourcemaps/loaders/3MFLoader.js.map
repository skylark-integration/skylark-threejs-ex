{"version":3,"sources":["loaders/3MFLoader.js"],"names":["define","THREE","threex","ThreeMFLoader","manager","Loader","call","this","availableExtensions","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","buffer","parse","data","textureLoader","TextureLoader","parseRelsXml","relsFileText","relationships","relsNodes","DOMParser","parseFromString","querySelectorAll","i","length","relsNode","relationship","target","getAttribute","id","type","push","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialData","parseBasematerialNode","index","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","Color","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","name","metallicness","roughness","basematerialNode","parseComponentNode","componentNode","componentData","transform","parseTransform","t","split","forEach","s","matrix","Matrix4","set","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","triangleProperty","parseInt","keys","Uint32Array","parseMeshNode","componentsNode","components","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","unit","metadataNodes","metadataData","metadataNode","indexOf","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","texture2DNode","textures2DNodes","textures2DNode","texture2DData","contenttype","tilestyleu","tilestylev","filter","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","objects","textureData","texture2d","resources","blob","Blob","sourceURI","URL","createObjectURL","texture","revokeObjectURL","encoding","sRGBEncoding","wrapS","RepeatWrapping","MirroredRepeatWrapping","ClampToEdgeWrapping","wrapT","magFilter","LinearFilter","minFilter","LinearMipmapLinearFilter","NearestFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","BufferGeometry","positionData","j","jl","setAttribute","Float32BufferAttribute","mesh","Mesh","buildTexturedMesh","uvData","MeshPhongMaterial","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","BufferAttribute","getResourceType","buildGroup","group","Group","resourceMap","il","resourceId","newMeshes","console","error","buildMeshes","objectPid","analyzeObject","add","builder","build","materialData","pbmetallicdisplayproperties","MeshStandardMaterial","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","extensions","modelXml","ns","extension","apply","applyExtensions","data3mf","relsName","modelRelsName","rels","modelRels","zip","file","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelParts","texturesParts","JSZip","e","ReferenceError","files","match","relsView","Uint8Array","asArrayBuffer","LoaderUtils","decodeText","modelPart","view","fileText","xmlData","documentElement","nodeName","toLowerCase","attributes","attr","value","RegExp","$1","texturesPartName","model","printTicket","other","loadDocument","modelsData","modelsKeys","modelRel","textureKey","objectIds","buildObjects","addExtension","loaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAgB,SAAUC,GAC1BH,EAAMI,OAAOC,KAAKC,KAAMH,GACxBG,KAAKC,wBA0xBT,OAxxBAL,EAAcM,UAAYC,OAAOC,OAAOD,OAAOE,OAAOX,EAAMI,OAAOI,YAC/DI,YAAaV,EACbW,KAAM,SAAUC,EAAKC,EAAQC,EAAYC,GACrC,IAAIC,EAAQZ,KACRa,EAAS,IAAInB,EAAMoB,WAAWF,EAAMf,SACxCgB,EAAOE,QAAQH,EAAMI,MACrBH,EAAOI,gBAAgB,eACvBJ,EAAON,KAAKC,EAAK,SAAUU,GACvBT,EAAOG,EAAMO,MAAMD,KACpBR,EAAYC,IAEnBQ,MAAO,SAAUC,GACb,IAAIR,EAAQZ,KACRqB,EAAgB,IAAI3B,EAAM4B,cAActB,KAAKH,SAmFjD,SAAS0B,EAAaC,GAIlB,IAHA,IAAIC,KAEAC,GADc,IAAIC,WAAYC,gBAAgBJ,EAAc,mBACpCK,iBAAiB,gBACpCC,EAAI,EAAGA,EAAIJ,EAAUK,OAAQD,IAAK,CACvC,IAAIE,EAAWN,EAAUI,GACrBG,GACAC,OAAQF,EAASG,aAAa,UAC9BC,GAAIJ,EAASG,aAAa,MAC1BE,KAAML,EAASG,aAAa,SAEhCV,EAAca,KAAKL,GAEvB,OAAOR,EAuBX,SAASc,EAAuBC,GAM5B,IALA,IAAIC,GACAL,GAAII,EAAkBL,aAAa,MACnCO,kBAEAC,EAAoBH,EAAkBX,iBAAiB,QAClDC,EAAI,EAAGA,EAAIa,EAAkBZ,OAAQD,IAAK,CAC/C,IACIc,EAAmBC,EADAF,EAAkBb,IAEzCc,EAAiBE,MAAQhB,EACzBW,EAAkBC,cAAcJ,KAAKM,GAEzC,OAAOH,EAaX,SAASM,EAAyBC,GAQ9B,IAPA,IAAIC,GACAb,GAAIY,EAAmBb,aAAa,MACpCe,MAAOF,EAAmBb,aAAa,SACvCgB,oBAAqBH,EAAmBb,aAAa,wBAErDiB,EAAiBJ,EAAmBnB,iBAAiB,aACrDwB,KACKvB,EAAI,EAAGA,EAAIsB,EAAerB,OAAQD,IAAK,CAC5C,IAAIwB,EAAgBF,EAAetB,GAC/ByB,EAAID,EAAcnB,aAAa,KAC/BqB,EAAIF,EAAcnB,aAAa,KACnCkB,EAAIf,KAAKmB,WAAWF,GAAIE,WAAWD,IAGvC,OADAP,EAAwB,IAAI,IAAIS,aAAaL,GACtCJ,EAEX,SAASU,EAAoBC,GAQzB,IAPA,IAAIC,GACAzB,GAAIwB,EAAezB,aAAa,MAChCgB,oBAAqBS,EAAezB,aAAa,wBAEjD2B,EAAaF,EAAe/B,iBAAiB,SAC7CkC,KACAC,EAAc,IAAItE,EAAMuE,MACnBnC,EAAI,EAAGA,EAAIgC,EAAW/B,OAAQD,IAAK,CACxC,IACIoC,EADYJ,EAAWhC,GACLK,aAAa,SACnC6B,EAAYG,SAASD,EAAME,UAAU,EAAG,IACxCJ,EAAYK,sBACZN,EAAOzB,KAAK0B,EAAYM,EAAGN,EAAYO,EAAGP,EAAYQ,GAG1D,OADAX,EAAuB,OAAI,IAAIH,aAAaK,GACrCF,EAEX,SAASY,EAAmCC,GAIxC,IAHA,IAAIC,GAAkCvC,GAAIsC,EAA6BvC,aAAa,OAChFyC,EAAgBF,EAA6B7C,iBAAiB,cAC9DgD,KACK/C,EAAI,EAAGA,EAAI8C,EAAc7C,OAAQD,IAAK,CAC3C,IAAIgD,EAAeF,EAAc9C,GACjC+C,EAAavC,MACTyC,KAAMD,EAAa3C,aAAa,QAChC6C,aAAcvB,WAAWqB,EAAa3C,aAAa,iBACnD8C,UAAWxB,WAAWqB,EAAa3C,aAAa,gBAIxD,OADAwC,EAA8BvD,KAAOyD,EAC9BF,EAEX,SAAS9B,EAAsBqC,GAC3B,IAAItC,KAIJ,OAHAA,EAAuB,KAAIsC,EAAiB/C,aAAa,QACzDS,EAA+B,aAAIsC,EAAiB/C,aAAa,gBACjES,EAAsC,oBAAIsC,EAAiB/C,aAAa,uBACjES,EA6DX,SAASuC,EAAmBC,GACxB,IAAIC,KACJA,EAAwB,SAAID,EAAcjD,aAAa,YACvD,IAAImD,EAAYF,EAAcjD,aAAa,aAI3C,OAHImD,IACAD,EAAyB,UAAIE,EAAeD,IAEzCD,EAEX,SAASE,EAAeD,GACpB,IAAIE,KACJF,EAAUG,MAAM,KAAKC,QAAQ,SAAUC,GACnCH,EAAElD,KAAKmB,WAAWkC,MAEtB,IAAIC,EAAS,IAAIlG,EAAMmG,QAEvB,OADAD,EAAOE,IAAIN,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAAKA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAAK,EAAG,EAAG,EAAG,GACvFI,EAEX,SAASG,EAAgBC,GACrB,IAAIC,GAAe5D,KAAM2D,EAAW7D,aAAa,SAC7CC,EAAK4D,EAAW7D,aAAa,MAC7BC,IACA6D,EAAe,GAAI7D,GAEvB,IAAI8D,EAAMF,EAAW7D,aAAa,OAC9B+D,IACAD,EAAgB,IAAIC,GAExB,IAAIC,EAASH,EAAW7D,aAAa,UACjCgE,IACAF,EAAmB,OAAIE,GAE3B,IAAIC,EAAYJ,EAAW7D,aAAa,aACpCiE,IACAH,EAAsB,UAAIG,GAE9B,IAAIC,EAAaL,EAAW7D,aAAa,cACrCkE,IACAJ,EAAuB,WAAII,GAE/B,IAAItB,EAAOiB,EAAW7D,aAAa,QAC/B4C,IACAkB,EAAiB,KAAIlB,GAEzB,IAAIuB,EAAWN,EAAWO,cAAc,QACpCD,IACAL,EAAiB,KAzGzB,SAAuBK,GAInB,IAHA,IAAIE,KACAC,KACAC,EAAcJ,EAASzE,iBAAiB,mBACnCC,EAAI,EAAGA,EAAI4E,EAAY3E,OAAQD,IAAK,CACzC,IAAI6E,EAAaD,EAAY5E,GACzB8E,EAAID,EAAWxE,aAAa,KAC5B0E,EAAIF,EAAWxE,aAAa,KAC5B2E,EAAIH,EAAWxE,aAAa,KAChCsE,EAASnE,KAAKmB,WAAWmD,GAAInD,WAAWoD,GAAIpD,WAAWqD,IAE3DN,EAAmB,SAAI,IAAI9C,aAAa+C,GACxC,IAAIM,KACAC,KACAC,EAAgBX,EAASzE,iBAAiB,sBAC9C,IAASC,EAAI,EAAGA,EAAImF,EAAclF,OAAQD,IAAK,CAC3C,IAAIoF,EAAeD,EAAcnF,GAC7BqF,EAAKD,EAAa/E,aAAa,MAC/BiF,EAAKF,EAAa/E,aAAa,MAC/BkF,EAAKH,EAAa/E,aAAa,MAC/BmF,EAAKJ,EAAa/E,aAAa,MAC/BoF,EAAKL,EAAa/E,aAAa,MAC/BqF,EAAKN,EAAa/E,aAAa,MAC/B+D,EAAMgB,EAAa/E,aAAa,OAChCsF,KACJA,EAAqB,GAAIC,SAASP,EAAI,IACtCM,EAAqB,GAAIC,SAASN,EAAI,IACtCK,EAAqB,GAAIC,SAASL,EAAI,IACtCL,EAAU1E,KAAKmF,EAAqB,GAAGA,EAAqB,GAAGA,EAAqB,IAChFH,IACAG,EAAqB,GAAIC,SAASJ,EAAI,KAEtCC,IACAE,EAAqB,GAAIC,SAASH,EAAI,KAEtCC,IACAC,EAAqB,GAAIC,SAASF,EAAI,KAEtCtB,IACAuB,EAAsB,IAAIvB,GAE1B,EAAI/F,OAAOwH,KAAKF,GAAkB1F,QAClCgF,EAAmBzE,KAAKmF,GAKhC,OAFAjB,EAA6B,mBAAIO,EACjCP,EAAoB,UAAI,IAAIoB,YAAYZ,GACjCR,EA0DkBqB,CAAcvB,IAEvC,IAAIwB,EAAiB9B,EAAWO,cAAc,cAI9C,OAHIuB,IACA7B,EAAuB,WA5D/B,SAA6B6B,GAGzB,IAFA,IAAIC,KACAC,EAAiBF,EAAejG,iBAAiB,aAC5CC,EAAI,EAAGA,EAAIkG,EAAejG,OAAQD,IAAK,CAC5C,IACIuD,EAAgBF,EADA6C,EAAelG,IAEnCiG,EAAWzF,KAAK+C,GAEpB,OAAO0C,EAoDwBE,CAAoBH,IAE5C7B,EA8DX,SAASiC,EAAeC,GACpB,IAAIC,GAAcC,KAAMF,EAAUhG,aAAa,SAAW,cACtDmG,EAAgBH,EAAUtG,iBAAiB,YAC3CyG,IACAF,EAAoB,SAxR5B,SAA4BE,GAExB,IADA,IAAIC,KACKzG,EAAI,EAAGA,EAAIwG,EAAcvG,OAAQD,IAAK,CAC3C,IAAI0G,EAAeF,EAAcxG,GAC7BiD,EAAOyD,EAAarG,aAAa,QAWjC,IATA,QACA,WACA,cACA,YACA,eACA,SACA,eACA,oBAEgBsG,QAAQ1D,KACxBwD,EAAaxD,GAAQyD,EAAaE,aAG1C,OAAOH,EAqQqBI,CAAmBL,IAE/C,IAAIM,EAAgBT,EAAU5B,cAAc,aACxCqC,IACAR,EAAqB,UApE7B,SAA4BQ,GAIxB,IAHA,IAAIC,GACJnG,kBACIoG,EAAqBF,EAAc/G,iBAAiB,iBAC/CC,EAAI,EAAGA,EAAIgH,EAAmB/G,OAAQD,IAAK,CAChD,IACIW,EAAoBF,EADAuG,EAAmBhH,IAE3C+G,EAA6B,cAAEpG,EAAsB,IAAKA,EAE9DoG,EAAyB,aACzB,IA/LwBE,EA+LpBC,EAAkBJ,EAAc/G,iBAAiB,aACrD,IAASC,EAAI,EAAGA,EAAIkH,EAAgBjH,OAAQD,IAAK,CAC7C,IAAImH,EAAiBD,EAAgBlH,GACjCoH,GAhMJ9G,IAFoB2G,EAkMmBE,GAhMrB9G,aAAa,MAC/BnB,KAAM+H,EAAc5G,aAAa,QACjCgH,YAAaJ,EAAc5G,aAAa,eACxCiH,WAAYL,EAAc5G,aAAa,cACvCkH,WAAYN,EAAc5G,aAAa,cACvCmH,OAAQP,EAAc5G,aAAa,WA4LnC0G,EAAyB,UAAEK,EAAkB,IAAKA,EAEtDL,EAA0B,cAC1B,IAAIU,EAAkBX,EAAc/G,iBAAiB,cACrD,IAASC,EAAI,EAAGA,EAAIyH,EAAgBxH,OAAQD,IAAK,CAC7C,IACI+B,EAAiBF,EADA4F,EAAgBzH,IAErC+G,EAA0B,WAAEhF,EAAmB,IAAKA,EAExDgF,EAA2C,+BAC3C,IAAIW,EAAmCZ,EAAc/G,iBAAiB,+BACtE,IAASC,EAAI,EAAGA,EAAI0H,EAAiCzH,OAAQD,IAAK,CAC9D,IACI2H,EAAkChF,EADA+E,EAAiC1H,IAEvE+G,EAA2C,4BAAEY,EAAoC,IAAKA,EAE1FZ,EAA8B,kBAC9B,IAAIa,EAAuBd,EAAc/G,iBAAiB,kBAC1D,IAASC,EAAI,EAAGA,EAAI4H,EAAqB3H,OAAQD,IAAK,CAClD,IACI6H,EAAsB5G,EADA2G,EAAqB5H,IAE/C+G,EAA8B,eAAEc,EAAwB,IAAKA,EAEjEd,EAAsB,UACtB,IAAIe,EAAchB,EAAc/G,iBAAiB,UACjD,IAASC,EAAI,EAAGA,EAAI8H,EAAY7H,OAAQD,IAAK,CACzC,IACImE,EAAaF,EADA6D,EAAY9H,IAE7B+G,EAAsB,OAAE5C,EAAe,IAAKA,EAEhD,OAAO4C,EAwBsBgB,CAAmBjB,IAEhD,IAAIkB,EAAY3B,EAAU5B,cAAc,SAIxC,OAHIuD,IACA1B,EAAiB,MA1BzB,SAAwB0B,GAGpB,IAFA,IAAIC,KACAC,EAAYF,EAAUjI,iBAAiB,QAClCC,EAAI,EAAGA,EAAIkI,EAAUjI,OAAQD,IAAK,CACvC,IAAImI,EAAWD,EAAUlI,GACrBoI,GAAcC,SAAUF,EAAS9H,aAAa,aAC9CmD,EAAY2E,EAAS9H,aAAa,aAClCmD,IACA4E,EAAqB,UAAI3E,EAAeD,IAE5CyE,EAAUzH,KAAK4H,GAEnB,OAAOH,EAckBK,CAAeN,IAEjC1B,EAEX,SAASiC,EAAaC,EAAgBC,EAASnC,EAAWoC,GACtD,IAAItH,EAAQoH,EAAepH,MAEvBuH,EADarC,EAAUsC,UAAUD,UACVvH,GAC3B,GAAIuH,EAAW,CACX,IAAIrJ,EAAOoJ,EAAYC,EAAUzJ,MAC7BqB,EAAOoI,EAAUtB,YACjBwB,EAAO,IAAIC,MAAMxJ,IAASiB,KAAMA,IAChCwI,EAAYC,IAAIC,gBAAgBJ,GAChCK,EAAU3J,EAAcd,KAAKsK,EAAW,WACxCC,IAAIG,gBAAgBJ,KAGxB,OADAG,EAAQE,SAAWxL,EAAMyL,aACjBV,EAAUrB,YAClB,IAAK,OACD4B,EAAQI,MAAQ1L,EAAM2L,eACtB,MACJ,IAAK,SACDL,EAAQI,MAAQ1L,EAAM4L,uBACtB,MACJ,IAAK,OACL,IAAK,QACDN,EAAQI,MAAQ1L,EAAM6L,oBACtB,MACJ,QACIP,EAAQI,MAAQ1L,EAAM2L,eAE1B,OAAQZ,EAAUpB,YAClB,IAAK,OACD2B,EAAQQ,MAAQ9L,EAAM2L,eACtB,MACJ,IAAK,SACDL,EAAQQ,MAAQ9L,EAAM4L,uBACtB,MACJ,IAAK,OACL,IAAK,QACDN,EAAQQ,MAAQ9L,EAAM6L,oBACtB,MACJ,QACIP,EAAQQ,MAAQ9L,EAAM2L,eAE1B,OAAQZ,EAAUnB,QAClB,IAAK,OACD0B,EAAQS,UAAY/L,EAAMgM,aAC1BV,EAAQW,UAAYjM,EAAMkM,yBAC1B,MACJ,IAAK,SACDZ,EAAQS,UAAY/L,EAAMgM,aAC1BV,EAAQW,UAAYjM,EAAMgM,aAC1B,MACJ,IAAK,UACDV,EAAQS,UAAY/L,EAAMmM,cAC1Bb,EAAQW,UAAYjM,EAAMmM,cAC1B,MACJ,QACIb,EAAQS,UAAY/L,EAAMgM,aAC1BV,EAAQW,UAAYjM,EAAMkM,yBAE9B,OAAOZ,EAEP,OAAO,KAGf,SAASc,EAAyBpJ,EAAeqE,EAAoBqB,EAAW5B,EAAUgE,EAAavE,GAGnG,IAFA,IAAI8F,EAAe9F,EAAWE,OAC1B6F,KACKlK,EAAI,EAAGmK,EAAIlF,EAAmBhF,OAAQD,EAAImK,EAAGnK,IAAK,CACvD,IACIqE,OAAiC+F,KADjCzE,EAAmBV,EAAmBjF,IACZwF,GAAmBG,EAAiBH,GAAKyE,OAC3CG,IAAxBF,EAAY7F,KACZ6F,EAAY7F,OAChB6F,EAAY7F,GAAQ7D,KAAKmF,GAE7B,IAAIE,EAAOxH,OAAOwH,KAAKqE,GACnBG,KACJ,IAASrK,EAAI,EAAGmK,EAAItE,EAAK5F,OAAQD,EAAImK,EAAGnK,IAAK,CAQzC,IAPA,IAAIsK,EAAgBzE,EAAK7F,GACrBuK,EAA0BL,EAAYI,GAEtCE,EAAWC,EADQ7J,EAAcA,cAAc0J,GACT7B,EAASnC,EAAWoC,EAAavE,EAAYuG,GACnFC,EAAW,IAAI/M,EAAMgN,eACrBC,KACAlG,EAAWD,EAASC,SACfmG,EAAI,EAAGC,EAAKR,EAAwBtK,OAAQ6K,EAAIC,EAAID,IAAK,CAC9D,IAAInF,EAAmB4E,EAAwBO,GAC/CD,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBN,GAAS,IACrDwF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBN,GAAS,IACrDwF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBN,GAAS,IACrDwF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBL,GAAS,IACrDuF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBL,GAAS,IACrDuF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBL,GAAS,IACrDuF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBJ,GAAS,IACrDsF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBJ,GAAS,IACrDsF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBJ,GAAS,IAEzDoF,EAASK,aAAa,WAAY,IAAIpN,EAAMqN,uBAAuBJ,EAAc,IACjF,IAAIK,EAAO,IAAItN,EAAMuN,KAAKR,EAAUH,GACpCH,EAAO7J,KAAK0K,GAEhB,OAAOb,EAEX,SAASe,EAAkB5C,EAAgBvD,EAAoBqB,EAAW5B,EAAUgE,EAAavE,GAM7F,IALA,IAAIwG,EAAW,IAAI/M,EAAMgN,eACrBC,KACAQ,KACA1G,EAAWD,EAASC,SACpBpD,EAAMiH,EAAejH,IAChBvB,EAAI,EAAGmK,EAAIlF,EAAmBhF,OAAQD,EAAImK,EAAGnK,IAAK,CACvD,IAAI2F,EAAmBV,EAAmBjF,GAC1C6K,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBN,GAAS,IACrDwF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBN,GAAS,IACrDwF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBN,GAAS,IACrDwF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBL,GAAS,IACrDuF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBL,GAAS,IACrDuF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBL,GAAS,IACrDuF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBJ,GAAS,IACrDsF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBJ,GAAS,IACrDsF,EAAarK,KAAKmE,EAA+B,EAAtBgB,EAAiBJ,GAAS,IACrD8F,EAAO7K,KAAKe,EAA0B,EAAtBoE,EAAiBH,GAAS,IAC1C6F,EAAO7K,KAAKe,EAA0B,EAAtBoE,EAAiBH,GAAS,IAC1C6F,EAAO7K,KAAKe,EAA0B,EAAtBoE,EAAiBF,GAAS,IAC1C4F,EAAO7K,KAAKe,EAA0B,EAAtBoE,EAAiBF,GAAS,IAC1C4F,EAAO7K,KAAKe,EAA0B,EAAtBoE,EAAiBD,GAAS,IAC1C2F,EAAO7K,KAAKe,EAA0B,EAAtBoE,EAAiBD,GAAS,IAE9CiF,EAASK,aAAa,WAAY,IAAIpN,EAAMqN,uBAAuBJ,EAAc,IACjFF,EAASK,aAAa,KAAM,IAAIpN,EAAMqN,uBAAuBI,EAAQ,IACrE,IAAInC,EAAUuB,EAASjC,EAAgBC,EAASnC,EAAWoC,EAAavE,EAAYoE,GAChFiC,EAAW,IAAI5M,EAAM0N,mBACrBC,IAAKrC,EACLsC,aAAa,IAGjB,OADW,IAAI5N,EAAMuN,KAAKR,EAAUH,GAGxC,SAASiB,EAAqBC,EAAYzG,EAAoBqB,EAAW5B,GAMrE,IALA,IAAIiG,EAAW,IAAI/M,EAAMgN,eACrBC,KACAc,KACAhH,EAAWD,EAASC,SACpB1C,EAASyJ,EAAWzJ,OACfjC,EAAI,EAAGmK,EAAIlF,EAAmBhF,OAAQD,EAAImK,EAAGnK,IAAK,CACvD,IAAI2F,EAAmBV,EAAmBjF,GACtCqF,EAAKM,EAAiBN,GACtBC,EAAKK,EAAiBL,GACtBC,EAAKI,EAAiBJ,GAC1BsF,EAAarK,KAAKmE,EAAc,EAALU,EAAS,IACpCwF,EAAarK,KAAKmE,EAAc,EAALU,EAAS,IACpCwF,EAAarK,KAAKmE,EAAc,EAALU,EAAS,IACpCwF,EAAarK,KAAKmE,EAAc,EAALW,EAAS,IACpCuF,EAAarK,KAAKmE,EAAc,EAALW,EAAS,IACpCuF,EAAarK,KAAKmE,EAAc,EAALW,EAAS,IACpCuF,EAAarK,KAAKmE,EAAc,EAALY,EAAS,IACpCsF,EAAarK,KAAKmE,EAAc,EAALY,EAAS,IACpCsF,EAAarK,KAAKmE,EAAc,EAALY,EAAS,IACpC,IAAIC,EAAKG,EAAiBH,GACtBC,EAAKE,EAAiBF,GACtBC,EAAKC,EAAiBD,GAC1BiG,EAAUnL,KAAKyB,EAAY,EAALuD,EAAS,IAC/BmG,EAAUnL,KAAKyB,EAAY,EAALuD,EAAS,IAC/BmG,EAAUnL,KAAKyB,EAAY,EAALuD,EAAS,IAC/BmG,EAAUnL,KAAKyB,EAAoB,GAAZwD,GAAMD,GAAU,IACvCmG,EAAUnL,KAAKyB,EAAoB,GAAZwD,GAAMD,GAAU,IACvCmG,EAAUnL,KAAKyB,EAAoB,GAAZwD,GAAMD,GAAU,IACvCmG,EAAUnL,KAAKyB,EAAoB,GAAZyD,GAAMF,GAAU,IACvCmG,EAAUnL,KAAKyB,EAAoB,GAAZyD,GAAMF,GAAU,IACvCmG,EAAUnL,KAAKyB,EAAoB,GAAZyD,GAAMF,GAAU,IAE3CmF,EAASK,aAAa,WAAY,IAAIpN,EAAMqN,uBAAuBJ,EAAc,IACjFF,EAASK,aAAa,QAAS,IAAIpN,EAAMqN,uBAAuBU,EAAW,IAC3E,IAAInB,EAAW,IAAI5M,EAAM0N,mBACrBM,cAAc,EACdJ,aAAa,IAGjB,OADW,IAAI5N,EAAMuN,KAAKR,EAAUH,GAGxC,SAASqB,EAAiBnH,GACtB,IAAIiG,EAAW,IAAI/M,EAAMgN,eACzBD,EAASmB,SAAS,IAAIlO,EAAMmO,gBAAgBrH,EAAoB,UAAG,IACnEiG,EAASK,aAAa,WAAY,IAAIpN,EAAMmO,gBAAgBrH,EAAmB,SAAG,IAClF,IAAI8F,EAAW,IAAI5M,EAAM0N,mBACrBlJ,MAAO,SACPoJ,aAAa,IAGjB,OADW,IAAI5N,EAAMuN,KAAKR,EAAUH,GAmCxC,SAASwB,EAAgB5H,EAAKkC,GAC1B,YAAgD8D,IAA5C9D,EAAUsC,UAAUJ,eAAepE,GAC5B,eAC2CgG,IAA3C9D,EAAUsC,UAAUhI,cAAcwD,GAClC,gBACwCgG,IAAxC9D,EAAUsC,UAAU8C,WAAWtH,GAC/B,eACQ,YAARA,EACA,eAEP,EAkBR,SAAS6H,EAAWvH,EAAU+D,EAASnC,EAAWoC,EAAavE,GAI3D,IAHA,IAAI+H,EAAQ,IAAItO,EAAMuO,MAElB9B,EA/DR,SAAqB+B,EAAa9F,EAAW5B,EAAUgE,EAAavE,GAGhE,IAFA,IAAI0B,EAAOxH,OAAOwH,KAAKuG,GACnB/B,KACKrK,EAAI,EAAGqM,EAAKxG,EAAK5F,OAAQD,EAAIqM,EAAIrM,IAAK,CAC3C,IAAIsM,EAAazG,EAAK7F,GAClBiF,EAAqBmH,EAAYE,GAErC,OADmBN,EAAgBM,EAAYhG,IAE/C,IAAK,WAGD,IAFA,IACIiG,EAAYvC,EADI1D,EAAUsC,UAAUhI,cAAc0L,GACErH,EAAoBqB,EAAW5B,EAAUgE,EAAavE,GACrG2G,EAAI,EAAGC,EAAKwB,EAAUtM,OAAQ6K,EAAIC,EAAID,IAC3CT,EAAO7J,KAAK+L,EAAUzB,IAE1B,MACJ,IAAK,UACD,IAAItC,EAAiBlC,EAAUsC,UAAUJ,eAAe8D,GACxDjC,EAAO7J,KAAK4K,EAAkB5C,EAAgBvD,EAAoBqB,EAAW5B,EAAUgE,EAAavE,IACpG,MACJ,IAAK,eACD,IAAIuH,EAAapF,EAAUsC,UAAU8C,WAAWY,GAChDjC,EAAO7J,KAAKiL,EAAqBC,EAAYzG,EAAoBqB,EAAW5B,IAC5E,MACJ,IAAK,UACD2F,EAAO7J,KAAKqL,EAAiBnH,IAC7B,MACJ,QACI8H,QAAQC,MAAM,gDAGtB,OAAOpC,EAiCMqC,CAlBjB,SAAuBpG,EAAW5B,EAAUP,GAIxC,IAHA,IAAIiI,KACAnH,EAAqBP,EAA6B,mBAClDiI,EAAYxI,EAAWC,IAClBpE,EAAI,EAAGmK,EAAIlF,EAAmBhF,OAAQD,EAAImK,EAAGnK,IAAK,CACvD,IAAI2F,EAAmBV,EAAmBjF,GACtCoE,OAA+BgG,IAAzBzE,EAAiBvB,IAAoBuB,EAAiBvB,IAAMuI,OAC1DvC,IAARhG,IACAA,EAAM,gBACegG,IAArBgC,EAAYhI,KACZgI,EAAYhI,OAChBgI,EAAYhI,GAAK5D,KAAKmF,GAE1B,OAAOyG,EAIWQ,CAActG,EAAW5B,EAAUP,GACfmC,EAAW5B,EAAUgE,EAAavE,GAC/DnE,EAAI,EAAGmK,EAAIE,EAAOpK,OAAQD,EAAImK,EAAGnK,IACtCkM,EAAMW,IAAIxC,EAAOrK,IAErB,OAAOkM,EAsBX,SAASzB,EAASnL,EAAMmJ,EAASnC,EAAWoC,EAAavE,EAAY2I,GACjE,YAAmB1C,IAAf9K,EAAKyN,MACEzN,EAAKyN,OAChBzN,EAAKyN,MAAQD,EAAQxN,EAAMmJ,EAASnC,EAAWoC,EAAavE,GACrD7E,EAAKyN,OAEhB,SAASrC,EAAkBsC,EAAcvE,EAASnC,GAC9C,IAAIkE,EACAnJ,EAAsB2L,EAAa3L,oBACnC4L,EAA8B3G,EAAUsC,UAAUqE,4BACtD,GAA4B,OAAxB5L,QAAqF+I,IAArD6C,EAA4B5L,GAAoC,CAChG,IACI0B,EAD4BkK,EAA4B5L,GACf/B,KAAK0N,EAAahM,OAC/DwJ,EAAW,IAAI5M,EAAMsP,sBACjB1B,aAAa,EACbrI,UAAWJ,EAAaI,UACxBgK,UAAWpK,EAAaG,oBAG5BsH,EAAW,IAAI5M,EAAM0N,mBAAoBE,aAAa,IAE1DhB,EAASvH,KAAO+J,EAAa/J,KAC7B,IAAImK,EAAeJ,EAAaI,aAC5BhL,EAAQgL,EAAa9K,UAAU,EAAG,GAMtC,OALAkI,EAASpI,MAAMC,SAASD,GACxBoI,EAASpI,MAAMG,sBACa,IAAxB6K,EAAanN,SACbuK,EAAS6C,QAAUzH,SAASwH,EAAaE,OAAO,GAAKF,EAAaE,OAAO,GAAI,IAAM,KAEhF9C,EAEX,SAAS+C,EAAeC,EAAe/E,EAASnC,EAAWoC,GAEvD,IADA,IAAI+E,EAAY,IAAI7P,EAAMuO,MACjBrB,EAAI,EAAGA,EAAI0C,EAAcvN,OAAQ6K,IAAK,CAC3C,IAAI4C,EAAYF,EAAc1C,GAC1BiC,EAAQtE,EAAQiF,EAAUrF,eAChB+B,IAAV2C,IACAY,EAAYD,EAAUrF,SAAUI,EAASnC,EAAWoC,GACpDqE,EAAQtE,EAAQiF,EAAUrF,WAE9B,IAAIuF,EAAWb,EAAMc,QACjBrK,EAAYkK,EAAUlK,UACtBA,GACAoK,EAASE,aAAatK,GAE1BiK,EAAUZ,IAAIe,GAElB,OAAOH,EAEX,SAASE,EAAYtF,EAAUI,EAASnC,EAAWoC,GAC/C,IAAIvE,EAAamC,EAAqB,UAAU,OAAE+B,GAClD,GAAIlE,EAAiB,KAAG,CACpB,IAAIO,EAAWP,EAAiB,MAxExC,SAAyB4J,EAAYrJ,EAAUsJ,GAC3C,GAAKD,EAAL,CAKA,IAFA,IAAI5P,KACA0H,EAAOxH,OAAOwH,KAAKkI,GACd/N,EAAI,EAAGA,EAAI6F,EAAK5F,OAAQD,IAE7B,IADA,IAAIiO,EAAKpI,EAAK7F,GACL8K,EAAI,EAAGA,EAAIhM,EAAMX,oBAAoB8B,OAAQ6K,KAC9CoD,EAAYpP,EAAMX,oBAAoB2M,IAC5BmD,KAAOA,GACjB9P,EAAoBqC,KAAK0N,GAIrC,IAASlO,EAAI,EAAGA,EAAI7B,EAAoB8B,OAAQD,IAAK,CACjD,IAAIkO,GAAAA,EAAY/P,EAAoB6B,IAC1BmO,MAAMH,EAAUD,EAAWG,EAAc,IAAIxJ,KA0DvD0J,CAFiB9H,EAAsB,WAEX5B,EADb4B,EAAe,KAE9BmC,EAAQtE,EAAW7D,IAAMmK,EAAS/F,EAAU+D,EAASnC,EAAWoC,EAAavE,EAAY8H,OACtF,CACH,IAAIuB,EAAgBrJ,EAAuB,WAC3CsE,EAAQtE,EAAW7D,IAAMmK,EAAS+C,EAAe/E,EAASnC,EAAWoC,EAAavE,EAAYoJ,IA4CtG,IAAIc,EAjwBJ,SAAsB/O,GAClB,IAEIgP,EACAC,EAKAC,EACAC,EATAC,EAAM,KACNC,EAAO,KAGPC,KACAC,KACAC,KACAC,KAGAC,KAEAC,KAEJ,IACIP,EAAM,IAAIQ,MAAM5P,GAClB,MAAO6P,GACL,GAAIA,aAAaC,eAEb,OADA5C,QAAQC,MAAM,0DACP,KAGf,IAAKkC,KAAQD,EAAIW,MACTV,EAAKW,MAAM,kBACXhB,EAAWK,EACJA,EAAKW,MAAM,+BAClBf,EAAgBI,EACTA,EAAKW,MAAM,mBAClBV,EAAepO,KAAKmO,GACbA,EAAKW,MAAM,2BAClBT,EAAqBrO,KAAKmO,GACnBA,EAAKW,MAAM,sBAClBR,EAAkBtO,KAAKmO,GAChBA,EAAKW,MAAM,mBAClBP,EAAevO,KAAKmO,GAG5B,IAAIY,EAAW,IAAIC,WAAWd,EAAIC,KAAKL,GAAUmB,iBAEjDjB,EAAO/O,EADY7B,EAAM8R,YAAYC,WAAWJ,IAE5ChB,IACIgB,EAAW,IAAIC,WAAWd,EAAIC,KAAKJ,GAAekB,iBAEtDhB,EAAYhP,EADO7B,EAAM8R,YAAYC,WAAWJ,KAGpD,IAAK,IAAIvP,EAAI,EAAGA,EAAI4O,EAAe3O,OAAQD,IAAK,CAC5C,IAAI4P,EAAYhB,EAAe5O,GAC3B6P,EAAO,IAAIL,WAAWd,EAAIC,KAAKiB,GAAWH,iBAC1CK,EAAWlS,EAAM8R,YAAYC,WAAWE,GACxCE,GAAU,IAAIlQ,WAAYC,gBAAgBgQ,EAAU,mBACD,UAAnDC,EAAQC,gBAAgBC,SAASC,eACjC1D,QAAQC,MAAM,+DAAgEmD,GAElF,IAAIvJ,EAAY0J,EAAQtL,cAAc,SAClCsJ,KACJ,IAAS/N,EAAI,EAAGA,EAAIqG,EAAU8J,WAAWlQ,OAAQD,IAAK,CAClD,IAAIoQ,EAAO/J,EAAU8J,WAAWnQ,GAC5BoQ,EAAKnN,KAAKqM,MAAM,kBAChBvB,EAAWqC,EAAKC,OAASC,OAAOC,IAGxC,IAAIjK,EAAYF,EAAeC,GAC/BC,EAAe,IAAID,EACf,EAAIhI,OAAOwH,KAAKkI,GAAY9N,SAC5BqG,EAAsB,WAAIyH,GAE9BiB,EAAWY,GAAatJ,EAE5B,IAAStG,EAAI,EAAGA,EAAI8O,EAAkB7O,OAAQD,IAAK,CAC/C,IAAIwQ,EAAmB1B,EAAkB9O,GACzCiP,EAAcuB,GAAoB9B,EAAIC,KAAK6B,GAAkBf,gBAEjE,OACIjB,KAAMA,EACNC,UAAWA,EACXgC,MAAOzB,EACP0B,eACAxH,QAAS+F,EACT0B,UAkrBMC,CAAatR,GACvBmJ,EA1CJ,SAAsB4F,GAClB,IAAIwC,EAAaxC,EAAQoC,MACrBhC,EAAYJ,EAAQI,UACpBhG,KACAqI,EAAazS,OAAOwH,KAAKgL,GACzBnI,KACJ,GAAI+F,EACA,IAAK,IAAIzO,EAAI,EAAGmK,EAAIsE,EAAUxO,OAAQD,EAAImK,EAAGnK,IAAK,CAC9C,IAAI+Q,EAAWtC,EAAUzO,GACrBgR,EAAaD,EAAS3Q,OAAOkC,UAAU,GACvC+L,EAAQnF,QAAQ8H,KAChBtI,EAAYqI,EAAS3Q,QAAUiO,EAAQnF,QAAQ8H,IAI3D,IAAShR,EAAI,EAAGA,EAAI8Q,EAAW7Q,OAAQD,IAInC,IAHA,IACIsG,EAAYuK,EADAC,EAAW9Q,IAEvBiR,EAAY5S,OAAOwH,KAAKS,EAAqB,UAAU,QAClDwE,EAAI,EAAGA,EAAImG,EAAUhR,OAAQ6K,IAElC6C,EADesD,EAAUnG,GACHrC,EAASnC,EAAWoC,GAGlD,OAAOD,EAkBGyI,CAAa7C,GAC3B,OAjBA,SAAe5F,EAAS4F,GAIpB,IAHA,IAAInC,EAAQ,IAAItO,EAAMuO,MAClBhM,EAAekO,EAAc,KAAE,GAC/BpG,EAAYoG,EAAQoC,MAAMtQ,EAAqB,OAAEmC,UAAU,IAAW,MACjEtC,EAAI,EAAGA,EAAIiI,EAAUhI,OAAQD,IAAK,CACvC,IAAIoI,EAAYH,EAAUjI,GACtB4N,EAAWnF,EAAQL,EAAoB,UACvC5E,EAAY4E,EAAqB,UACjC5E,GACAoK,EAASE,aAAatK,GAE1B0I,EAAMW,IAAIe,GAEd,OAAO1B,EAIJa,CAAMtE,EAAS4F,IAE1B8C,aAAc,SAAUjD,GACpBhQ,KAAKC,oBAAoBqC,KAAK0N,MAI/BrQ,EAAOuT,QAAQtT,cAAgBA","file":"../../loaders/3MFLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var ThreeMFLoader = function (manager) {\r\n        THREE.Loader.call(this, manager);\r\n        this.availableExtensions = [];\r\n    };\r\n    ThreeMFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n        constructor: ThreeMFLoader,\r\n        load: function (url, onLoad, onProgress, onError) {\r\n            var scope = this;\r\n            var loader = new THREE.FileLoader(scope.manager);\r\n            loader.setPath(scope.path);\r\n            loader.setResponseType('arraybuffer');\r\n            loader.load(url, function (buffer) {\r\n                onLoad(scope.parse(buffer));\r\n            }, onProgress, onError);\r\n        },\r\n        parse: function (data) {\r\n            var scope = this;\r\n            var textureLoader = new THREE.TextureLoader(this.manager);\r\n            function loadDocument(data) {\r\n                var zip = null;\r\n                var file = null;\r\n                var relsName;\r\n                var modelRelsName;\r\n                var modelPartNames = [];\r\n                var printTicketPartNames = [];\r\n                var texturesPartNames = [];\r\n                var otherPartNames = [];\r\n                var rels;\r\n                var modelRels;\r\n                var modelParts = {};\r\n                var printTicketParts = {};\r\n                var texturesParts = {};\r\n                var otherParts = {};\r\n                try {\r\n                    zip = new JSZip(data);\r\n                } catch (e) {\r\n                    if (e instanceof ReferenceError) {\r\n                        console.error('THREE.3MFLoader: jszip missing and file is compressed.');\r\n                        return null;\r\n                    }\r\n                }\r\n                for (file in zip.files) {\r\n                    if (file.match(/\\_rels\\/.rels$/)) {\r\n                        relsName = file;\r\n                    } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\r\n                        modelRelsName = file;\r\n                    } else if (file.match(/^3D\\/.*\\.model$/)) {\r\n                        modelPartNames.push(file);\r\n                    } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\r\n                        printTicketPartNames.push(file);\r\n                    } else if (file.match(/^3D\\/Textures?\\/.*/)) {\r\n                        texturesPartNames.push(file);\r\n                    } else if (file.match(/^3D\\/Other\\/.*/)) {\r\n                        otherPartNames.push(file);\r\n                    }\r\n                }\r\n                var relsView = new Uint8Array(zip.file(relsName).asArrayBuffer());\r\n                var relsFileText = THREE.LoaderUtils.decodeText(relsView);\r\n                rels = parseRelsXml(relsFileText);\r\n                if (modelRelsName) {\r\n                    var relsView = new Uint8Array(zip.file(modelRelsName).asArrayBuffer());\r\n                    var relsFileText = THREE.LoaderUtils.decodeText(relsView);\r\n                    modelRels = parseRelsXml(relsFileText);\r\n                }\r\n                for (var i = 0; i < modelPartNames.length; i++) {\r\n                    var modelPart = modelPartNames[i];\r\n                    var view = new Uint8Array(zip.file(modelPart).asArrayBuffer());\r\n                    var fileText = THREE.LoaderUtils.decodeText(view);\r\n                    var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\r\n                    if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\r\n                        console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\r\n                    }\r\n                    var modelNode = xmlData.querySelector('model');\r\n                    var extensions = {};\r\n                    for (var i = 0; i < modelNode.attributes.length; i++) {\r\n                        var attr = modelNode.attributes[i];\r\n                        if (attr.name.match(/^xmlns:(.+)$/)) {\r\n                            extensions[attr.value] = RegExp.$1;\r\n                        }\r\n                    }\r\n                    var modelData = parseModelNode(modelNode);\r\n                    modelData['xml'] = modelNode;\r\n                    if (0 < Object.keys(extensions).length) {\r\n                        modelData['extensions'] = extensions;\r\n                    }\r\n                    modelParts[modelPart] = modelData;\r\n                }\r\n                for (var i = 0; i < texturesPartNames.length; i++) {\r\n                    var texturesPartName = texturesPartNames[i];\r\n                    texturesParts[texturesPartName] = zip.file(texturesPartName).asArrayBuffer();\r\n                }\r\n                return {\r\n                    rels: rels,\r\n                    modelRels: modelRels,\r\n                    model: modelParts,\r\n                    printTicket: printTicketParts,\r\n                    texture: texturesParts,\r\n                    other: otherParts\r\n                };\r\n            }\r\n            function parseRelsXml(relsFileText) {\r\n                var relationships = [];\r\n                var relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\r\n                var relsNodes = relsXmlData.querySelectorAll('Relationship');\r\n                for (var i = 0; i < relsNodes.length; i++) {\r\n                    var relsNode = relsNodes[i];\r\n                    var relationship = {\r\n                        target: relsNode.getAttribute('Target'),\r\n                        id: relsNode.getAttribute('Id'),\r\n                        type: relsNode.getAttribute('Type')\r\n                    };\r\n                    relationships.push(relationship);\r\n                }\r\n                return relationships;\r\n            }\r\n            function parseMetadataNodes(metadataNodes) {\r\n                var metadataData = {};\r\n                for (var i = 0; i < metadataNodes.length; i++) {\r\n                    var metadataNode = metadataNodes[i];\r\n                    var name = metadataNode.getAttribute('name');\r\n                    var validNames = [\r\n                        'Title',\r\n                        'Designer',\r\n                        'Description',\r\n                        'Copyright',\r\n                        'LicenseTerms',\r\n                        'Rating',\r\n                        'CreationDate',\r\n                        'ModificationDate'\r\n                    ];\r\n                    if (0 <= validNames.indexOf(name)) {\r\n                        metadataData[name] = metadataNode.textContent;\r\n                    }\r\n                }\r\n                return metadataData;\r\n            }\r\n            function parseBasematerialsNode(basematerialsNode) {\r\n                var basematerialsData = {\r\n                    id: basematerialsNode.getAttribute('id'),\r\n                    basematerials: []\r\n                };\r\n                var basematerialNodes = basematerialsNode.querySelectorAll('base');\r\n                for (var i = 0; i < basematerialNodes.length; i++) {\r\n                    var basematerialNode = basematerialNodes[i];\r\n                    var basematerialData = parseBasematerialNode(basematerialNode);\r\n                    basematerialData.index = i;\r\n                    basematerialsData.basematerials.push(basematerialData);\r\n                }\r\n                return basematerialsData;\r\n            }\r\n            function parseTexture2DNode(texture2DNode) {\r\n                var texture2dData = {\r\n                    id: texture2DNode.getAttribute('id'),\r\n                    path: texture2DNode.getAttribute('path'),\r\n                    contenttype: texture2DNode.getAttribute('contenttype'),\r\n                    tilestyleu: texture2DNode.getAttribute('tilestyleu'),\r\n                    tilestylev: texture2DNode.getAttribute('tilestylev'),\r\n                    filter: texture2DNode.getAttribute('filter')\r\n                };\r\n                return texture2dData;\r\n            }\r\n            function parseTextures2DGroupNode(texture2DGroupNode) {\r\n                var texture2DGroupData = {\r\n                    id: texture2DGroupNode.getAttribute('id'),\r\n                    texid: texture2DGroupNode.getAttribute('texid'),\r\n                    displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\r\n                };\r\n                var tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\r\n                var uvs = [];\r\n                for (var i = 0; i < tex2coordNodes.length; i++) {\r\n                    var tex2coordNode = tex2coordNodes[i];\r\n                    var u = tex2coordNode.getAttribute('u');\r\n                    var v = tex2coordNode.getAttribute('v');\r\n                    uvs.push(parseFloat(u), parseFloat(v));\r\n                }\r\n                texture2DGroupData['uvs'] = new Float32Array(uvs);\r\n                return texture2DGroupData;\r\n            }\r\n            function parseColorGroupNode(colorGroupNode) {\r\n                var colorGroupData = {\r\n                    id: colorGroupNode.getAttribute('id'),\r\n                    displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\r\n                };\r\n                var colorNodes = colorGroupNode.querySelectorAll('color');\r\n                var colors = [];\r\n                var colorObject = new THREE.Color();\r\n                for (var i = 0; i < colorNodes.length; i++) {\r\n                    var colorNode = colorNodes[i];\r\n                    var color = colorNode.getAttribute('color');\r\n                    colorObject.setStyle(color.substring(0, 7));\r\n                    colorObject.convertSRGBToLinear();\r\n                    colors.push(colorObject.r, colorObject.g, colorObject.b);\r\n                }\r\n                colorGroupData['colors'] = new Float32Array(colors);\r\n                return colorGroupData;\r\n            }\r\n            function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\r\n                var metallicDisplaypropertiesData = { id: metallicDisplaypropetiesNode.getAttribute('id') };\r\n                var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\r\n                var metallicData = [];\r\n                for (var i = 0; i < metallicNodes.length; i++) {\r\n                    var metallicNode = metallicNodes[i];\r\n                    metallicData.push({\r\n                        name: metallicNode.getAttribute('name'),\r\n                        metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\r\n                        roughness: parseFloat(metallicNode.getAttribute('roughness'))\r\n                    });\r\n                }\r\n                metallicDisplaypropertiesData.data = metallicData;\r\n                return metallicDisplaypropertiesData;\r\n            }\r\n            function parseBasematerialNode(basematerialNode) {\r\n                var basematerialData = {};\r\n                basematerialData['name'] = basematerialNode.getAttribute('name');\r\n                basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor');\r\n                basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\r\n                return basematerialData;\r\n            }\r\n            function parseMeshNode(meshNode) {\r\n                var meshData = {};\r\n                var vertices = [];\r\n                var vertexNodes = meshNode.querySelectorAll('vertices vertex');\r\n                for (var i = 0; i < vertexNodes.length; i++) {\r\n                    var vertexNode = vertexNodes[i];\r\n                    var x = vertexNode.getAttribute('x');\r\n                    var y = vertexNode.getAttribute('y');\r\n                    var z = vertexNode.getAttribute('z');\r\n                    vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\r\n                }\r\n                meshData['vertices'] = new Float32Array(vertices);\r\n                var triangleProperties = [];\r\n                var triangles = [];\r\n                var triangleNodes = meshNode.querySelectorAll('triangles triangle');\r\n                for (var i = 0; i < triangleNodes.length; i++) {\r\n                    var triangleNode = triangleNodes[i];\r\n                    var v1 = triangleNode.getAttribute('v1');\r\n                    var v2 = triangleNode.getAttribute('v2');\r\n                    var v3 = triangleNode.getAttribute('v3');\r\n                    var p1 = triangleNode.getAttribute('p1');\r\n                    var p2 = triangleNode.getAttribute('p2');\r\n                    var p3 = triangleNode.getAttribute('p3');\r\n                    var pid = triangleNode.getAttribute('pid');\r\n                    var triangleProperty = {};\r\n                    triangleProperty['v1'] = parseInt(v1, 10);\r\n                    triangleProperty['v2'] = parseInt(v2, 10);\r\n                    triangleProperty['v3'] = parseInt(v3, 10);\r\n                    triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']);\r\n                    if (p1) {\r\n                        triangleProperty['p1'] = parseInt(p1, 10);\r\n                    }\r\n                    if (p2) {\r\n                        triangleProperty['p2'] = parseInt(p2, 10);\r\n                    }\r\n                    if (p3) {\r\n                        triangleProperty['p3'] = parseInt(p3, 10);\r\n                    }\r\n                    if (pid) {\r\n                        triangleProperty['pid'] = pid;\r\n                    }\r\n                    if (0 < Object.keys(triangleProperty).length) {\r\n                        triangleProperties.push(triangleProperty);\r\n                    }\r\n                }\r\n                meshData['triangleProperties'] = triangleProperties;\r\n                meshData['triangles'] = new Uint32Array(triangles);\r\n                return meshData;\r\n            }\r\n            function parseComponentsNode(componentsNode) {\r\n                var components = [];\r\n                var componentNodes = componentsNode.querySelectorAll('component');\r\n                for (var i = 0; i < componentNodes.length; i++) {\r\n                    var componentNode = componentNodes[i];\r\n                    var componentData = parseComponentNode(componentNode);\r\n                    components.push(componentData);\r\n                }\r\n                return components;\r\n            }\r\n            function parseComponentNode(componentNode) {\r\n                var componentData = {};\r\n                componentData['objectId'] = componentNode.getAttribute('objectid');\r\n                var transform = componentNode.getAttribute('transform');\r\n                if (transform) {\r\n                    componentData['transform'] = parseTransform(transform);\r\n                }\r\n                return componentData;\r\n            }\r\n            function parseTransform(transform) {\r\n                var t = [];\r\n                transform.split(' ').forEach(function (s) {\r\n                    t.push(parseFloat(s));\r\n                });\r\n                var matrix = new THREE.Matrix4();\r\n                matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\r\n                return matrix;\r\n            }\r\n            function parseObjectNode(objectNode) {\r\n                var objectData = { type: objectNode.getAttribute('type') };\r\n                var id = objectNode.getAttribute('id');\r\n                if (id) {\r\n                    objectData['id'] = id;\r\n                }\r\n                var pid = objectNode.getAttribute('pid');\r\n                if (pid) {\r\n                    objectData['pid'] = pid;\r\n                }\r\n                var pindex = objectNode.getAttribute('pindex');\r\n                if (pindex) {\r\n                    objectData['pindex'] = pindex;\r\n                }\r\n                var thumbnail = objectNode.getAttribute('thumbnail');\r\n                if (thumbnail) {\r\n                    objectData['thumbnail'] = thumbnail;\r\n                }\r\n                var partnumber = objectNode.getAttribute('partnumber');\r\n                if (partnumber) {\r\n                    objectData['partnumber'] = partnumber;\r\n                }\r\n                var name = objectNode.getAttribute('name');\r\n                if (name) {\r\n                    objectData['name'] = name;\r\n                }\r\n                var meshNode = objectNode.querySelector('mesh');\r\n                if (meshNode) {\r\n                    objectData['mesh'] = parseMeshNode(meshNode);\r\n                }\r\n                var componentsNode = objectNode.querySelector('components');\r\n                if (componentsNode) {\r\n                    objectData['components'] = parseComponentsNode(componentsNode);\r\n                }\r\n                return objectData;\r\n            }\r\n            function parseResourcesNode(resourcesNode) {\r\n                var resourcesData = {};\r\n                resourcesData['basematerials'] = {};\r\n                var basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\r\n                for (var i = 0; i < basematerialsNodes.length; i++) {\r\n                    var basematerialsNode = basematerialsNodes[i];\r\n                    var basematerialsData = parseBasematerialsNode(basematerialsNode);\r\n                    resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\r\n                }\r\n                resourcesData['texture2d'] = {};\r\n                var textures2DNodes = resourcesNode.querySelectorAll('texture2d');\r\n                for (var i = 0; i < textures2DNodes.length; i++) {\r\n                    var textures2DNode = textures2DNodes[i];\r\n                    var texture2DData = parseTexture2DNode(textures2DNode);\r\n                    resourcesData['texture2d'][texture2DData['id']] = texture2DData;\r\n                }\r\n                resourcesData['colorgroup'] = {};\r\n                var colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\r\n                for (var i = 0; i < colorGroupNodes.length; i++) {\r\n                    var colorGroupNode = colorGroupNodes[i];\r\n                    var colorGroupData = parseColorGroupNode(colorGroupNode);\r\n                    resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\r\n                }\r\n                resourcesData['pbmetallicdisplayproperties'] = {};\r\n                var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\r\n                for (var i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\r\n                    var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\r\n                    var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\r\n                    resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\r\n                }\r\n                resourcesData['texture2dgroup'] = {};\r\n                var textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\r\n                for (var i = 0; i < textures2DGroupNodes.length; i++) {\r\n                    var textures2DGroupNode = textures2DGroupNodes[i];\r\n                    var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\r\n                    resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\r\n                }\r\n                resourcesData['object'] = {};\r\n                var objectNodes = resourcesNode.querySelectorAll('object');\r\n                for (var i = 0; i < objectNodes.length; i++) {\r\n                    var objectNode = objectNodes[i];\r\n                    var objectData = parseObjectNode(objectNode);\r\n                    resourcesData['object'][objectData['id']] = objectData;\r\n                }\r\n                return resourcesData;\r\n            }\r\n            function parseBuildNode(buildNode) {\r\n                var buildData = [];\r\n                var itemNodes = buildNode.querySelectorAll('item');\r\n                for (var i = 0; i < itemNodes.length; i++) {\r\n                    var itemNode = itemNodes[i];\r\n                    var buildItem = { objectId: itemNode.getAttribute('objectid') };\r\n                    var transform = itemNode.getAttribute('transform');\r\n                    if (transform) {\r\n                        buildItem['transform'] = parseTransform(transform);\r\n                    }\r\n                    buildData.push(buildItem);\r\n                }\r\n                return buildData;\r\n            }\r\n            function parseModelNode(modelNode) {\r\n                var modelData = { unit: modelNode.getAttribute('unit') || 'millimeter' };\r\n                var metadataNodes = modelNode.querySelectorAll('metadata');\r\n                if (metadataNodes) {\r\n                    modelData['metadata'] = parseMetadataNodes(metadataNodes);\r\n                }\r\n                var resourcesNode = modelNode.querySelector('resources');\r\n                if (resourcesNode) {\r\n                    modelData['resources'] = parseResourcesNode(resourcesNode);\r\n                }\r\n                var buildNode = modelNode.querySelector('build');\r\n                if (buildNode) {\r\n                    modelData['build'] = parseBuildNode(buildNode);\r\n                }\r\n                return modelData;\r\n            }\r\n            function buildTexture(texture2dgroup, objects, modelData, textureData) {\r\n                var texid = texture2dgroup.texid;\r\n                var texture2ds = modelData.resources.texture2d;\r\n                var texture2d = texture2ds[texid];\r\n                if (texture2d) {\r\n                    var data = textureData[texture2d.path];\r\n                    var type = texture2d.contenttype;\r\n                    var blob = new Blob([data], { type: type });\r\n                    var sourceURI = URL.createObjectURL(blob);\r\n                    var texture = textureLoader.load(sourceURI, function () {\r\n                        URL.revokeObjectURL(sourceURI);\r\n                    });\r\n                    texture.encoding = THREE.sRGBEncoding;\r\n                    switch (texture2d.tilestyleu) {\r\n                    case 'wrap':\r\n                        texture.wrapS = THREE.RepeatWrapping;\r\n                        break;\r\n                    case 'mirror':\r\n                        texture.wrapS = THREE.MirroredRepeatWrapping;\r\n                        break;\r\n                    case 'none':\r\n                    case 'clamp':\r\n                        texture.wrapS = THREE.ClampToEdgeWrapping;\r\n                        break;\r\n                    default:\r\n                        texture.wrapS = THREE.RepeatWrapping;\r\n                    }\r\n                    switch (texture2d.tilestylev) {\r\n                    case 'wrap':\r\n                        texture.wrapT = THREE.RepeatWrapping;\r\n                        break;\r\n                    case 'mirror':\r\n                        texture.wrapT = THREE.MirroredRepeatWrapping;\r\n                        break;\r\n                    case 'none':\r\n                    case 'clamp':\r\n                        texture.wrapT = THREE.ClampToEdgeWrapping;\r\n                        break;\r\n                    default:\r\n                        texture.wrapT = THREE.RepeatWrapping;\r\n                    }\r\n                    switch (texture2d.filter) {\r\n                    case 'auto':\r\n                        texture.magFilter = THREE.LinearFilter;\r\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\r\n                        break;\r\n                    case 'linear':\r\n                        texture.magFilter = THREE.LinearFilter;\r\n                        texture.minFilter = THREE.LinearFilter;\r\n                        break;\r\n                    case 'nearest':\r\n                        texture.magFilter = THREE.NearestFilter;\r\n                        texture.minFilter = THREE.NearestFilter;\r\n                        break;\r\n                    default:\r\n                        texture.magFilter = THREE.LinearFilter;\r\n                        texture.minFilter = THREE.LinearMipmapLinearFilter;\r\n                    }\r\n                    return texture;\r\n                } else {\r\n                    return null;\r\n                }\r\n            }\r\n            function buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData) {\r\n                var objectPindex = objectData.pindex;\r\n                var materialMap = {};\r\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\r\n                    var triangleProperty = triangleProperties[i];\r\n                    var pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\r\n                    if (materialMap[pindex] === undefined)\r\n                        materialMap[pindex] = [];\r\n                    materialMap[pindex].push(triangleProperty);\r\n                }\r\n                var keys = Object.keys(materialMap);\r\n                var meshes = [];\r\n                for (var i = 0, l = keys.length; i < l; i++) {\r\n                    var materialIndex = keys[i];\r\n                    var trianglePropertiesProps = materialMap[materialIndex];\r\n                    var basematerialData = basematerials.basematerials[materialIndex];\r\n                    var material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial);\r\n                    var geometry = new THREE.BufferGeometry();\r\n                    var positionData = [];\r\n                    var vertices = meshData.vertices;\r\n                    for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\r\n                        var triangleProperty = trianglePropertiesProps[j];\r\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\r\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\r\n                        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\r\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\r\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\r\n                        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\r\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\r\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\r\n                        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\r\n                    }\r\n                    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\r\n                    var mesh = new THREE.Mesh(geometry, material);\r\n                    meshes.push(mesh);\r\n                }\r\n                return meshes;\r\n            }\r\n            function buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData) {\r\n                var geometry = new THREE.BufferGeometry();\r\n                var positionData = [];\r\n                var uvData = [];\r\n                var vertices = meshData.vertices;\r\n                var uvs = texture2dgroup.uvs;\r\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\r\n                    var triangleProperty = triangleProperties[i];\r\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\r\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\r\n                    positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\r\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\r\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\r\n                    positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\r\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\r\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\r\n                    positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\r\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\r\n                    uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\r\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\r\n                    uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\r\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\r\n                    uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\r\n                }\r\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\r\n                geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvData, 2));\r\n                var texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\r\n                var material = new THREE.MeshPhongMaterial({\r\n                    map: texture,\r\n                    flatShading: true\r\n                });\r\n                var mesh = new THREE.Mesh(geometry, material);\r\n                return mesh;\r\n            }\r\n            function buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData) {\r\n                var geometry = new THREE.BufferGeometry();\r\n                var positionData = [];\r\n                var colorData = [];\r\n                var vertices = meshData.vertices;\r\n                var colors = colorgroup.colors;\r\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\r\n                    var triangleProperty = triangleProperties[i];\r\n                    var v1 = triangleProperty.v1;\r\n                    var v2 = triangleProperty.v2;\r\n                    var v3 = triangleProperty.v3;\r\n                    positionData.push(vertices[v1 * 3 + 0]);\r\n                    positionData.push(vertices[v1 * 3 + 1]);\r\n                    positionData.push(vertices[v1 * 3 + 2]);\r\n                    positionData.push(vertices[v2 * 3 + 0]);\r\n                    positionData.push(vertices[v2 * 3 + 1]);\r\n                    positionData.push(vertices[v2 * 3 + 2]);\r\n                    positionData.push(vertices[v3 * 3 + 0]);\r\n                    positionData.push(vertices[v3 * 3 + 1]);\r\n                    positionData.push(vertices[v3 * 3 + 2]);\r\n                    var p1 = triangleProperty.p1;\r\n                    var p2 = triangleProperty.p2;\r\n                    var p3 = triangleProperty.p3;\r\n                    colorData.push(colors[p1 * 3 + 0]);\r\n                    colorData.push(colors[p1 * 3 + 1]);\r\n                    colorData.push(colors[p1 * 3 + 2]);\r\n                    colorData.push(colors[(p2 || p1) * 3 + 0]);\r\n                    colorData.push(colors[(p2 || p1) * 3 + 1]);\r\n                    colorData.push(colors[(p2 || p1) * 3 + 2]);\r\n                    colorData.push(colors[(p3 || p1) * 3 + 0]);\r\n                    colorData.push(colors[(p3 || p1) * 3 + 1]);\r\n                    colorData.push(colors[(p3 || p1) * 3 + 2]);\r\n                }\r\n                geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionData, 3));\r\n                geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorData, 3));\r\n                var material = new THREE.MeshPhongMaterial({\r\n                    vertexColors: true,\r\n                    flatShading: true\r\n                });\r\n                var mesh = new THREE.Mesh(geometry, material);\r\n                return mesh;\r\n            }\r\n            function buildDefaultMesh(meshData) {\r\n                var geometry = new THREE.BufferGeometry();\r\n                geometry.setIndex(new THREE.BufferAttribute(meshData['triangles'], 1));\r\n                geometry.setAttribute('position', new THREE.BufferAttribute(meshData['vertices'], 3));\r\n                var material = new THREE.MeshPhongMaterial({\r\n                    color: 11184895,\r\n                    flatShading: true\r\n                });\r\n                var mesh = new THREE.Mesh(geometry, material);\r\n                return mesh;\r\n            }\r\n            function buildMeshes(resourceMap, modelData, meshData, textureData, objectData) {\r\n                var keys = Object.keys(resourceMap);\r\n                var meshes = [];\r\n                for (var i = 0, il = keys.length; i < il; i++) {\r\n                    var resourceId = keys[i];\r\n                    var triangleProperties = resourceMap[resourceId];\r\n                    var resourceType = getResourceType(resourceId, modelData);\r\n                    switch (resourceType) {\r\n                    case 'material':\r\n                        var basematerials = modelData.resources.basematerials[resourceId];\r\n                        var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, modelData, meshData, textureData, objectData);\r\n                        for (var j = 0, jl = newMeshes.length; j < jl; j++) {\r\n                            meshes.push(newMeshes[j]);\r\n                        }\r\n                        break;\r\n                    case 'texture':\r\n                        var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\r\n                        meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, modelData, meshData, textureData, objectData));\r\n                        break;\r\n                    case 'vertexColors':\r\n                        var colorgroup = modelData.resources.colorgroup[resourceId];\r\n                        meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, modelData, meshData));\r\n                        break;\r\n                    case 'default':\r\n                        meshes.push(buildDefaultMesh(meshData));\r\n                        break;\r\n                    default:\r\n                        console.error('THREE.3MFLoader: Unsupported resource type.');\r\n                    }\r\n                }\r\n                return meshes;\r\n            }\r\n            function getResourceType(pid, modelData) {\r\n                if (modelData.resources.texture2dgroup[pid] !== undefined) {\r\n                    return 'texture';\r\n                } else if (modelData.resources.basematerials[pid] !== undefined) {\r\n                    return 'material';\r\n                } else if (modelData.resources.colorgroup[pid] !== undefined) {\r\n                    return 'vertexColors';\r\n                } else if (pid === 'default') {\r\n                    return 'default';\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            }\r\n            function analyzeObject(modelData, meshData, objectData) {\r\n                var resourceMap = {};\r\n                var triangleProperties = meshData['triangleProperties'];\r\n                var objectPid = objectData.pid;\r\n                for (var i = 0, l = triangleProperties.length; i < l; i++) {\r\n                    var triangleProperty = triangleProperties[i];\r\n                    var pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\r\n                    if (pid === undefined)\r\n                        pid = 'default';\r\n                    if (resourceMap[pid] === undefined)\r\n                        resourceMap[pid] = [];\r\n                    resourceMap[pid].push(triangleProperty);\r\n                }\r\n                return resourceMap;\r\n            }\r\n            function buildGroup(meshData, objects, modelData, textureData, objectData) {\r\n                var group = new THREE.Group();\r\n                var resourceMap = analyzeObject(modelData, meshData, objectData);\r\n                var meshes = buildMeshes(resourceMap, modelData, meshData, textureData, objectData);\r\n                for (var i = 0, l = meshes.length; i < l; i++) {\r\n                    group.add(meshes[i]);\r\n                }\r\n                return group;\r\n            }\r\n            function applyExtensions(extensions, meshData, modelXml) {\r\n                if (!extensions) {\r\n                    return;\r\n                }\r\n                var availableExtensions = [];\r\n                var keys = Object.keys(extensions);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var ns = keys[i];\r\n                    for (var j = 0; j < scope.availableExtensions.length; j++) {\r\n                        var extension = scope.availableExtensions[j];\r\n                        if (extension.ns === ns) {\r\n                            availableExtensions.push(extension);\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < availableExtensions.length; i++) {\r\n                    var extension = availableExtensions[i];\r\n                    extension.apply(modelXml, extensions[extension['ns']], meshData);\r\n                }\r\n            }\r\n            function getBuild(data, objects, modelData, textureData, objectData, builder) {\r\n                if (data.build !== undefined)\r\n                    return data.build;\r\n                data.build = builder(data, objects, modelData, textureData, objectData);\r\n                return data.build;\r\n            }\r\n            function buildBasematerial(materialData, objects, modelData) {\r\n                var material;\r\n                var displaypropertiesid = materialData.displaypropertiesid;\r\n                var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\r\n                if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\r\n                    var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\r\n                    var metallicData = pbmetallicdisplayproperty.data[materialData.index];\r\n                    material = new THREE.MeshStandardMaterial({\r\n                        flatShading: true,\r\n                        roughness: metallicData.roughness,\r\n                        metalness: metallicData.metallicness\r\n                    });\r\n                } else {\r\n                    material = new THREE.MeshPhongMaterial({ flatShading: true });\r\n                }\r\n                material.name = materialData.name;\r\n                var displaycolor = materialData.displaycolor;\r\n                var color = displaycolor.substring(0, 7);\r\n                material.color.setStyle(color);\r\n                material.color.convertSRGBToLinear();\r\n                if (displaycolor.length === 9) {\r\n                    material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\r\n                }\r\n                return material;\r\n            }\r\n            function buildComposite(compositeData, objects, modelData, textureData) {\r\n                var composite = new THREE.Group();\r\n                for (var j = 0; j < compositeData.length; j++) {\r\n                    var component = compositeData[j];\r\n                    var build = objects[component.objectId];\r\n                    if (build === undefined) {\r\n                        buildObject(component.objectId, objects, modelData, textureData);\r\n                        build = objects[component.objectId];\r\n                    }\r\n                    var object3D = build.clone();\r\n                    var transform = component.transform;\r\n                    if (transform) {\r\n                        object3D.applyMatrix4(transform);\r\n                    }\r\n                    composite.add(object3D);\r\n                }\r\n                return composite;\r\n            }\r\n            function buildObject(objectId, objects, modelData, textureData) {\r\n                var objectData = modelData['resources']['object'][objectId];\r\n                if (objectData['mesh']) {\r\n                    var meshData = objectData['mesh'];\r\n                    var extensions = modelData['extensions'];\r\n                    var modelXml = modelData['xml'];\r\n                    applyExtensions(extensions, meshData, modelXml);\r\n                    objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\r\n                } else {\r\n                    var compositeData = objectData['components'];\r\n                    objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\r\n                }\r\n            }\r\n            function buildObjects(data3mf) {\r\n                var modelsData = data3mf.model;\r\n                var modelRels = data3mf.modelRels;\r\n                var objects = {};\r\n                var modelsKeys = Object.keys(modelsData);\r\n                var textureData = {};\r\n                if (modelRels) {\r\n                    for (var i = 0, l = modelRels.length; i < l; i++) {\r\n                        var modelRel = modelRels[i];\r\n                        var textureKey = modelRel.target.substring(1);\r\n                        if (data3mf.texture[textureKey]) {\r\n                            textureData[modelRel.target] = data3mf.texture[textureKey];\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < modelsKeys.length; i++) {\r\n                    var modelsKey = modelsKeys[i];\r\n                    var modelData = modelsData[modelsKey];\r\n                    var objectIds = Object.keys(modelData['resources']['object']);\r\n                    for (var j = 0; j < objectIds.length; j++) {\r\n                        var objectId = objectIds[j];\r\n                        buildObject(objectId, objects, modelData, textureData);\r\n                    }\r\n                }\r\n                return objects;\r\n            }\r\n            function build(objects, data3mf) {\r\n                var group = new THREE.Group();\r\n                var relationship = data3mf['rels'][0];\r\n                var buildData = data3mf.model[relationship['target'].substring(1)]['build'];\r\n                for (var i = 0; i < buildData.length; i++) {\r\n                    var buildItem = buildData[i];\r\n                    var object3D = objects[buildItem['objectId']];\r\n                    var transform = buildItem['transform'];\r\n                    if (transform) {\r\n                        object3D.applyMatrix4(transform);\r\n                    }\r\n                    group.add(object3D);\r\n                }\r\n                return group;\r\n            }\r\n            var data3mf = loadDocument(data);\r\n            var objects = buildObjects(data3mf);\r\n            return build(objects, data3mf);\r\n        },\r\n        addExtension: function (extension) {\r\n            this.availableExtensions.push(extension);\r\n        }\r\n    });\r\n\r\n    return threex.loaders.ThreeMFLoader = ThreeMFLoader;\r\n});"]}