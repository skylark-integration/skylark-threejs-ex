{"version":3,"sources":["loaders/OBJLoader.js"],"names":["define","THREE","threex","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","OBJLoader","manager","Loader","call","this","materials","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setMaterials","state","objects","object","vertices","normals","colors","uvs","materialLibraries","startObject","name","fromDeclaration","previousMaterial","currentMaterial","undefined","_finalize","geometry","smooth","startMaterial","libraries","previous","inherited","groupCount","splice","index","material","length","mtllib","Array","isArray","groupStart","groupEnd","clone","cloned","bind","push","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","value","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","uvLen","nLen","addPointGeometry","type","vi","l","addLineGeometry","uvi","indexOf","replace","lines","split","line","lineFirstChar","result","trimLeft","i","trim","charAt","data","parseFloat","vertexData","substr","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","substring","lineVertices","lineUVs","li","llen","parts","pointData","exec","test","console","warn","toLowerCase","container","Group","concat","isLine","isPoints","hasVertexColors","buffergeometry","BufferGeometry","setAttribute","Float32BufferAttribute","computeVertexNormals","mesh","createdMaterials","miLen","materialHash","sourceMaterial","LineBasicMaterial","PointsMaterial","materialPoints","size","sizeAttenuation","Material","copy","color","map","materialLine","MeshPhongMaterial","flatShading","vertexColors","addGroup","LineSegments","Points","Mesh","add","loaders"],"mappings":"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","file":"../../loaders/OBJLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var OBJLoader = function () {\r\n        var object_pattern = /^[og]\\s*(.+)?/;\r\n        var material_library_pattern = /^mtllib /;\r\n        var material_use_pattern = /^usemtl /;\r\n        var map_use_pattern = /^usemap /;\r\n        function ParserState() {\r\n            var state = {\r\n                objects: [],\r\n                object: {},\r\n                vertices: [],\r\n                normals: [],\r\n                colors: [],\r\n                uvs: [],\r\n                materials: {},\r\n                materialLibraries: [],\r\n                startObject: function (name, fromDeclaration) {\r\n                    if (this.object && this.object.fromDeclaration === false) {\r\n                        this.object.name = name;\r\n                        this.object.fromDeclaration = fromDeclaration !== false;\r\n                        return;\r\n                    }\r\n                    var previousMaterial = this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined;\r\n                    if (this.object && typeof this.object._finalize === 'function') {\r\n                        this.object._finalize(true);\r\n                    }\r\n                    this.object = {\r\n                        name: name || '',\r\n                        fromDeclaration: fromDeclaration !== false,\r\n                        geometry: {\r\n                            vertices: [],\r\n                            normals: [],\r\n                            colors: [],\r\n                            uvs: []\r\n                        },\r\n                        materials: [],\r\n                        smooth: true,\r\n                        startMaterial: function (name, libraries) {\r\n                            var previous = this._finalize(false);\r\n                            if (previous && (previous.inherited || previous.groupCount <= 0)) {\r\n                                this.materials.splice(previous.index, 1);\r\n                            }\r\n                            var material = {\r\n                                index: this.materials.length,\r\n                                name: name || '',\r\n                                mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : '',\r\n                                smooth: previous !== undefined ? previous.smooth : this.smooth,\r\n                                groupStart: previous !== undefined ? previous.groupEnd : 0,\r\n                                groupEnd: -1,\r\n                                groupCount: -1,\r\n                                inherited: false,\r\n                                clone: function (index) {\r\n                                    var cloned = {\r\n                                        index: typeof index === 'number' ? index : this.index,\r\n                                        name: this.name,\r\n                                        mtllib: this.mtllib,\r\n                                        smooth: this.smooth,\r\n                                        groupStart: 0,\r\n                                        groupEnd: -1,\r\n                                        groupCount: -1,\r\n                                        inherited: false\r\n                                    };\r\n                                    cloned.clone = this.clone.bind(cloned);\r\n                                    return cloned;\r\n                                }\r\n                            };\r\n                            this.materials.push(material);\r\n                            return material;\r\n                        },\r\n                        currentMaterial: function () {\r\n                            if (this.materials.length > 0) {\r\n                                return this.materials[this.materials.length - 1];\r\n                            }\r\n                            return undefined;\r\n                        },\r\n                        _finalize: function (end) {\r\n                            var lastMultiMaterial = this.currentMaterial();\r\n                            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\r\n                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\r\n                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\r\n                                lastMultiMaterial.inherited = false;\r\n                            }\r\n                            if (end && this.materials.length > 1) {\r\n                                for (var mi = this.materials.length - 1; mi >= 0; mi--) {\r\n                                    if (this.materials[mi].groupCount <= 0) {\r\n                                        this.materials.splice(mi, 1);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (end && this.materials.length === 0) {\r\n                                this.materials.push({\r\n                                    name: '',\r\n                                    smooth: this.smooth\r\n                                });\r\n                            }\r\n                            return lastMultiMaterial;\r\n                        }\r\n                    };\r\n                    if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function') {\r\n                        var declared = previousMaterial.clone(0);\r\n                        declared.inherited = true;\r\n                        this.object.materials.push(declared);\r\n                    }\r\n                    this.objects.push(this.object);\r\n                },\r\n                finalize: function () {\r\n                    if (this.object && typeof this.object._finalize === 'function') {\r\n                        this.object._finalize(true);\r\n                    }\r\n                },\r\n                parseVertexIndex: function (value, len) {\r\n                    var index = parseInt(value, 10);\r\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\r\n                },\r\n                parseNormalIndex: function (value, len) {\r\n                    var index = parseInt(value, 10);\r\n                    return (index >= 0 ? index - 1 : index + len / 3) * 3;\r\n                },\r\n                parseUVIndex: function (value, len) {\r\n                    var index = parseInt(value, 10);\r\n                    return (index >= 0 ? index - 1 : index + len / 2) * 2;\r\n                },\r\n                addVertex: function (a, b, c) {\r\n                    var src = this.vertices;\r\n                    var dst = this.object.geometry.vertices;\r\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\r\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\r\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\r\n                },\r\n                addVertexPoint: function (a) {\r\n                    var src = this.vertices;\r\n                    var dst = this.object.geometry.vertices;\r\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\r\n                },\r\n                addVertexLine: function (a) {\r\n                    var src = this.vertices;\r\n                    var dst = this.object.geometry.vertices;\r\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\r\n                },\r\n                addNormal: function (a, b, c) {\r\n                    var src = this.normals;\r\n                    var dst = this.object.geometry.normals;\r\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\r\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\r\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\r\n                },\r\n                addColor: function (a, b, c) {\r\n                    var src = this.colors;\r\n                    var dst = this.object.geometry.colors;\r\n                    dst.push(src[a + 0], src[a + 1], src[a + 2]);\r\n                    dst.push(src[b + 0], src[b + 1], src[b + 2]);\r\n                    dst.push(src[c + 0], src[c + 1], src[c + 2]);\r\n                },\r\n                addUV: function (a, b, c) {\r\n                    var src = this.uvs;\r\n                    var dst = this.object.geometry.uvs;\r\n                    dst.push(src[a + 0], src[a + 1]);\r\n                    dst.push(src[b + 0], src[b + 1]);\r\n                    dst.push(src[c + 0], src[c + 1]);\r\n                },\r\n                addUVLine: function (a) {\r\n                    var src = this.uvs;\r\n                    var dst = this.object.geometry.uvs;\r\n                    dst.push(src[a + 0], src[a + 1]);\r\n                },\r\n                addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\r\n                    var vLen = this.vertices.length;\r\n                    var ia = this.parseVertexIndex(a, vLen);\r\n                    var ib = this.parseVertexIndex(b, vLen);\r\n                    var ic = this.parseVertexIndex(c, vLen);\r\n                    this.addVertex(ia, ib, ic);\r\n                    if (this.colors.length > 0) {\r\n                        this.addColor(ia, ib, ic);\r\n                    }\r\n                    if (ua !== undefined && ua !== '') {\r\n                        var uvLen = this.uvs.length;\r\n                        ia = this.parseUVIndex(ua, uvLen);\r\n                        ib = this.parseUVIndex(ub, uvLen);\r\n                        ic = this.parseUVIndex(uc, uvLen);\r\n                        this.addUV(ia, ib, ic);\r\n                    }\r\n                    if (na !== undefined && na !== '') {\r\n                        var nLen = this.normals.length;\r\n                        ia = this.parseNormalIndex(na, nLen);\r\n                        ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\r\n                        ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\r\n                        this.addNormal(ia, ib, ic);\r\n                    }\r\n                },\r\n                addPointGeometry: function (vertices) {\r\n                    this.object.geometry.type = 'Points';\r\n                    var vLen = this.vertices.length;\r\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\r\n                        this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\r\n                    }\r\n                },\r\n                addLineGeometry: function (vertices, uvs) {\r\n                    this.object.geometry.type = 'Line';\r\n                    var vLen = this.vertices.length;\r\n                    var uvLen = this.uvs.length;\r\n                    for (var vi = 0, l = vertices.length; vi < l; vi++) {\r\n                        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\r\n                    }\r\n                    for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\r\n                        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\r\n                    }\r\n                }\r\n            };\r\n            state.startObject('', false);\r\n            return state;\r\n        }\r\n        function OBJLoader(manager) {\r\n            THREE.Loader.call(this, manager);\r\n            this.materials = null;\r\n        }\r\n        OBJLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n            constructor: OBJLoader,\r\n            load: function (url, onLoad, onProgress, onError) {\r\n                var scope = this;\r\n                var loader = new THREE.FileLoader(scope.manager);\r\n                loader.setPath(this.path);\r\n                loader.load(url, function (text) {\r\n                    onLoad(scope.parse(text));\r\n                }, onProgress, onError);\r\n            },\r\n            setMaterials: function (materials) {\r\n                this.materials = materials;\r\n                return this;\r\n            },\r\n            parse: function (text) {\r\n                var state = new ParserState();\r\n                if (text.indexOf('\\r\\n') !== -1) {\r\n                    text = text.replace(/\\r\\n/g, '\\n');\r\n                }\r\n                if (text.indexOf('\\\\\\n') !== -1) {\r\n                    text = text.replace(/\\\\\\n/g, '');\r\n                }\r\n                var lines = text.split('\\n');\r\n                var line = '', lineFirstChar = '';\r\n                var lineLength = 0;\r\n                var result = [];\r\n                var trimLeft = typeof ''.trimLeft === 'function';\r\n                for (var i = 0, l = lines.length; i < l; i++) {\r\n                    line = lines[i];\r\n                    line = trimLeft ? line.trimLeft() : line.trim();\r\n                    lineLength = line.length;\r\n                    if (lineLength === 0)\r\n                        continue;\r\n                    lineFirstChar = line.charAt(0);\r\n                    if (lineFirstChar === '#')\r\n                        continue;\r\n                    if (lineFirstChar === 'v') {\r\n                        var data = line.split(/\\s+/);\r\n                        switch (data[0]) {\r\n                        case 'v':\r\n                            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\r\n                            if (data.length >= 7) {\r\n                                state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\r\n                            }\r\n                            break;\r\n                        case 'vn':\r\n                            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\r\n                            break;\r\n                        case 'vt':\r\n                            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\r\n                            break;\r\n                        }\r\n                    } else if (lineFirstChar === 'f') {\r\n                        var lineData = line.substr(1).trim();\r\n                        var vertexData = lineData.split(/\\s+/);\r\n                        var faceVertices = [];\r\n                        for (var j = 0, jl = vertexData.length; j < jl; j++) {\r\n                            var vertex = vertexData[j];\r\n                            if (vertex.length > 0) {\r\n                                var vertexParts = vertex.split('/');\r\n                                faceVertices.push(vertexParts);\r\n                            }\r\n                        }\r\n                        var v1 = faceVertices[0];\r\n                        for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\r\n                            var v2 = faceVertices[j];\r\n                            var v3 = faceVertices[j + 1];\r\n                            state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\r\n                        }\r\n                    } else if (lineFirstChar === 'l') {\r\n                        var lineParts = line.substring(1).trim().split(' ');\r\n                        var lineVertices = [], lineUVs = [];\r\n                        if (line.indexOf('/') === -1) {\r\n                            lineVertices = lineParts;\r\n                        } else {\r\n                            for (var li = 0, llen = lineParts.length; li < llen; li++) {\r\n                                var parts = lineParts[li].split('/');\r\n                                if (parts[0] !== '')\r\n                                    lineVertices.push(parts[0]);\r\n                                if (parts[1] !== '')\r\n                                    lineUVs.push(parts[1]);\r\n                            }\r\n                        }\r\n                        state.addLineGeometry(lineVertices, lineUVs);\r\n                    } else if (lineFirstChar === 'p') {\r\n                        var lineData = line.substr(1).trim();\r\n                        var pointData = lineData.split(' ');\r\n                        state.addPointGeometry(pointData);\r\n                    } else if ((result = object_pattern.exec(line)) !== null) {\r\n                        var name = (' ' + result[0].substr(1).trim()).substr(1);\r\n                        state.startObject(name);\r\n                    } else if (material_use_pattern.test(line)) {\r\n                        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\r\n                    } else if (material_library_pattern.test(line)) {\r\n                        state.materialLibraries.push(line.substring(7).trim());\r\n                    } else if (map_use_pattern.test(line)) {\r\n                        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\r\n                    } else if (lineFirstChar === 's') {\r\n                        result = line.split(' ');\r\n                        if (result.length > 1) {\r\n                            var value = result[1].trim().toLowerCase();\r\n                            state.object.smooth = value !== '0' && value !== 'off';\r\n                        } else {\r\n                            state.object.smooth = true;\r\n                        }\r\n                        var material = state.object.currentMaterial();\r\n                        if (material)\r\n                            material.smooth = state.object.smooth;\r\n                    } else {\r\n                        if (line === '\\0')\r\n                            continue;\r\n                        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\r\n                    }\r\n                }\r\n                state.finalize();\r\n                var container = new THREE.Group();\r\n                container.materialLibraries = [].concat(state.materialLibraries);\r\n                for (var i = 0, l = state.objects.length; i < l; i++) {\r\n                    var object = state.objects[i];\r\n                    var geometry = object.geometry;\r\n                    var materials = object.materials;\r\n                    var isLine = geometry.type === 'Line';\r\n                    var isPoints = geometry.type === 'Points';\r\n                    var hasVertexColors = false;\r\n                    if (geometry.vertices.length === 0)\r\n                        continue;\r\n                    var buffergeometry = new THREE.BufferGeometry();\r\n                    buffergeometry.setAttribute('position', new THREE.Float32BufferAttribute(geometry.vertices, 3));\r\n                    if (geometry.normals.length > 0) {\r\n                        buffergeometry.setAttribute('normal', new THREE.Float32BufferAttribute(geometry.normals, 3));\r\n                    } else {\r\n                        buffergeometry.computeVertexNormals();\r\n                    }\r\n                    if (geometry.colors.length > 0) {\r\n                        hasVertexColors = true;\r\n                        buffergeometry.setAttribute('color', new THREE.Float32BufferAttribute(geometry.colors, 3));\r\n                    }\r\n                    if (geometry.uvs.length > 0) {\r\n                        buffergeometry.setAttribute('uv', new THREE.Float32BufferAttribute(geometry.uvs, 2));\r\n                    }\r\n                    var createdMaterials = [];\r\n                    for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\r\n                        var sourceMaterial = materials[mi];\r\n                        var materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\r\n                        var material = state.materials[materialHash];\r\n                        if (this.materials !== null) {\r\n                            material = this.materials.create(sourceMaterial.name);\r\n                            if (isLine && material && !(material instanceof THREE.LineBasicMaterial)) {\r\n                                var materialLine = new THREE.LineBasicMaterial();\r\n                                THREE.Material.prototype.copy.call(materialLine, material);\r\n                                materialLine.color.copy(material.color);\r\n                                material = materialLine;\r\n                            } else if (isPoints && material && !(material instanceof THREE.PointsMaterial)) {\r\n                                var materialPoints = new THREE.PointsMaterial({\r\n                                    size: 10,\r\n                                    sizeAttenuation: false\r\n                                });\r\n                                THREE.Material.prototype.copy.call(materialPoints, material);\r\n                                materialPoints.color.copy(material.color);\r\n                                materialPoints.map = material.map;\r\n                                material = materialPoints;\r\n                            }\r\n                        }\r\n                        if (material === undefined) {\r\n                            if (isLine) {\r\n                                material = new THREE.LineBasicMaterial();\r\n                            } else if (isPoints) {\r\n                                material = new THREE.PointsMaterial({\r\n                                    size: 1,\r\n                                    sizeAttenuation: false\r\n                                });\r\n                            } else {\r\n                                material = new THREE.MeshPhongMaterial();\r\n                            }\r\n                            material.name = sourceMaterial.name;\r\n                            material.flatShading = sourceMaterial.smooth ? false : true;\r\n                            material.vertexColors = hasVertexColors;\r\n                            state.materials[materialHash] = material;\r\n                        }\r\n                        createdMaterials.push(material);\r\n                    }\r\n                    var mesh;\r\n                    if (createdMaterials.length > 1) {\r\n                        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\r\n                            var sourceMaterial = materials[mi];\r\n                            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\r\n                        }\r\n                        if (isLine) {\r\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\r\n                        } else if (isPoints) {\r\n                            mesh = new THREE.Points(buffergeometry, createdMaterials);\r\n                        } else {\r\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\r\n                        }\r\n                    } else {\r\n                        if (isLine) {\r\n                            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\r\n                        } else if (isPoints) {\r\n                            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\r\n                        } else {\r\n                            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\r\n                        }\r\n                    }\r\n                    mesh.name = object.name;\r\n                    container.add(mesh);\r\n                }\r\n                return container;\r\n            }\r\n        });\r\n        return threex.loaders.OBJLoader = OBJLoader;\r\n    }();\r\n    return OBJLoader;\r\n});"]}