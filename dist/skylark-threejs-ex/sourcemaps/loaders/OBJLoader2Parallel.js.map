{"version":3,"sources":["loaders/OBJLoader2Parallel.js"],"names":["define","THREE","WorkerExecutionSupport","CodeSerializer","OBJLoader2","OBJLoader2Parser","WorkerRunner","OBJLoader2Parallel","manager","call","this","preferJsmWorker","jsmWorkerUrl","executeParallel","workerExecutionSupport","OBJLOADER2_PARALLEL_VERSION","console","info","DEFAULT_JSM_WORKER_PATH","prototype","Object","assign","create","constructor","setExecuteParallel","setJsmWorker","undefined","getWorkerExecutionSupport","buildWorkerCode","codeBuilderInstructions","CodeBuilderInstructions","isSupportsJsmWorker","setJsmWorkerUrl","isSupportsStandardWorker","objectManipulator","ObjectManipulator","defaultWorkerPayloadHandler","DefaultWorkerPayloadHandler","parser","workerRunner","addCodeFragment","serializeClass","startCode","name","addStartCode","load","content","onLoad","onFileLoadProgress","onError","onMeshAlter","scope","object3d","message","logging","enabled","debug","parse","callbacks","_onLoad","isWorkerLoaded","buildWorker","scopedOnAssetAvailable","payload","_onAssetAvailable","updateCallbacks","baseObject3d","materialHandler","createDefaultMaterials","params","modelName","instanceNo","useIndices","disregardNormals","materialPerSmoothingGroup","useOAsMesh","materials","getMaterialsJSON","data","input","options","dummy","Object3D"],"mappings":"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","file":"../../loaders/OBJLoader2Parallel.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    './obj2/worker/main/WorkerExecutionSupport',\n    './obj2/utils/CodeSerializer',\n    './OBJLoader2',\n    './obj2/OBJLoader2Parser',\n    './obj2/worker/parallel/WorkerRunner'\n], function (\n    THREE, \n    WorkerExecutionSupport, \n    CodeSerializer, \n    OBJLoader2, \n    OBJLoader2Parser, \n    WorkerRunner\n) {\n    'use strict';\n    const OBJLoader2Parallel = function (manager) {\n        OBJLoader2.call(this, manager);\n        this.preferJsmWorker = false;\n        this.jsmWorkerUrl = null;\n        this.executeParallel = true;\n        this.workerExecutionSupport = new WorkerExecutionSupport();\n    };\n    OBJLoader2Parallel.OBJLOADER2_PARALLEL_VERSION = '3.2.0';\n    console.info('Using OBJLoader2Parallel version: ' + OBJLoader2Parallel.OBJLOADER2_PARALLEL_VERSION);\n    OBJLoader2Parallel.DEFAULT_JSM_WORKER_PATH = './jsm/loaders/obj2/worker/parallel/OBJLoader2JsmWorker';\n    OBJLoader2Parallel.prototype = Object.assign(Object.create(OBJLoader2.prototype), {\n        constructor: OBJLoader2Parallel,\n        setExecuteParallel: function (executeParallel) {\n            this.executeParallel = executeParallel === true;\n            return this;\n        },\n        setJsmWorker: function (preferJsmWorker, jsmWorkerUrl) {\n            this.preferJsmWorker = preferJsmWorker === true;\n            if (jsmWorkerUrl === undefined || jsmWorkerUrl === null) {\n                throw 'The url to the jsm worker is not valid. Aborting...';\n            }\n            this.jsmWorkerUrl = jsmWorkerUrl;\n            return this;\n        },\n        getWorkerExecutionSupport: function () {\n            return this.workerExecutionSupport;\n        },\n        buildWorkerCode: function () {\n            let codeBuilderInstructions = new CodeBuilderInstructions(true, true, this.preferJsmWorker);\n            if (codeBuilderInstructions.isSupportsJsmWorker()) {\n                codeBuilderInstructions.setJsmWorkerUrl(this.jsmWorkerUrl);\n            }\n            if (codeBuilderInstructions.isSupportsStandardWorker()) {\n                let objectManipulator = new ObjectManipulator();\n                let defaultWorkerPayloadHandler = new DefaultWorkerPayloadHandler(this.parser);\n                let workerRunner = new WorkerRunner({});\n                codeBuilderInstructions.addCodeFragment(CodeSerializer.serializeClass(OBJLoader2Parser, this.parser));\n                codeBuilderInstructions.addCodeFragment(CodeSerializer.serializeClass(ObjectManipulator, objectManipulator));\n                codeBuilderInstructions.addCodeFragment(CodeSerializer.serializeClass(DefaultWorkerPayloadHandler, defaultWorkerPayloadHandler));\n                codeBuilderInstructions.addCodeFragment(CodeSerializer.serializeClass(WorkerRunner, workerRunner));\n                let startCode = 'new ' + workerRunner.constructor.name + '( new ' + defaultWorkerPayloadHandler.constructor.name + '( new ' + this.parser.constructor.name + '() ) );';\n                codeBuilderInstructions.addStartCode(startCode);\n            }\n            return codeBuilderInstructions;\n        },\n        load: function (content, onLoad, onFileLoadProgress, onError, onMeshAlter) {\n            let scope = this;\n            function interceptOnLoad(object3d, message) {\n                if (object3d.name === 'OBJLoader2ParallelDummy') {\n                    if (scope.parser.logging.enabled && scope.parser.logging.debug) {\n                        console.debug('Received dummy answer from OBJLoader2Parallel#parse');\n                    }\n                } else {\n                    onLoad(object3d, message);\n                }\n            }\n            OBJLoader2.prototype.load.call(this, content, interceptOnLoad, onFileLoadProgress, onError, onMeshAlter);\n        },\n        parse: function (content) {\n            if (this.executeParallel) {\n                if (this.parser.callbacks.onLoad === this.parser._onLoad) {\n                    throw 'No callback other than the default callback was provided! Aborting!';\n                }\n                if (!this.workerExecutionSupport.isWorkerLoaded(this.preferJsmWorker)) {\n                    this.workerExecutionSupport.buildWorker(this.buildWorkerCode());\n                    let scope = this;\n                    let scopedOnAssetAvailable = function (payload) {\n                        scope._onAssetAvailable(payload);\n                    };\n                    function scopedOnLoad(message) {\n                        scope.parser.callbacks.onLoad(scope.baseObject3d, message);\n                    }\n                    this.workerExecutionSupport.updateCallbacks(scopedOnAssetAvailable, scopedOnLoad);\n                }\n                this.materialHandler.createDefaultMaterials(false);\n                this.workerExecutionSupport.executeParallel({\n                    params: {\n                        modelName: this.modelName,\n                        instanceNo: this.instanceNo,\n                        useIndices: this.parser.useIndices,\n                        disregardNormals: this.parser.disregardNormals,\n                        materialPerSmoothingGroup: this.parser.materialPerSmoothingGroup,\n                        useOAsMesh: this.parser.useOAsMesh,\n                        materials: this.materialHandler.getMaterialsJSON()\n                    },\n                    data: {\n                        input: content,\n                        options: null\n                    },\n                    logging: {\n                        enabled: this.parser.logging.enabled,\n                        debug: this.parser.logging.debug\n                    }\n                });\n                let dummy = new THREE.Object3D();\n                dummy.name = 'OBJLoader2ParallelDummy';\n                return dummy;\n            } else {\n                return OBJLoader2.prototype.parse.call(this, content);\n            }\n        }\n    });\n    return OBJLoader2Parallel;\n});"]}