{"version":3,"sources":["loaders/TGALoader.js"],"names":["define","THREE","TGALoader","manager","Loader","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","texture","Texture","loader","FileLoader","setResponseType","setPath","path","buffer","image","parse","needsUpdate","undefined","TGA_TYPE_NO_DATA","TGA_TYPE_INDEXED","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_INDEXED","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_BL","TGA_ORIGIN_BR","TGA_ORIGIN_UL","TGA_ORIGIN_UR","length","console","error","content","Uint8Array","offset","header","id_length","colormap_type","image_type","colormap_index","colormap_length","colormap_size","origin","width","height","pixel_size","flags","tgaCheckHeader","use_rle","use_pal","use_grey","useOffscreen","OffscreenCanvas","canvas","document","createElement","context","getContext","imageData","createImageData","result","data","pixel_data","pixel_total","palettes","subarray","c","count","i","shift","pixels","set","tgaParse","palette","x_start","y_start","x_step","y_step","x_end","y_end","color","x","y","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","colormap","tgaGetImageData8bits","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","getTgaRGBA","putImageData","transferToImageBitmap"],"mappings":"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","file":"../../loaders/TGALoader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TGALoader = function (manager) {\n        THREE.Loader.call(this, manager);\n    };\n    TGALoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: TGALoader,\n        load: function (url, onLoad, onProgress, onError) {\n            var scope = this;\n            var texture = new THREE.Texture();\n            var loader = new THREE.FileLoader(this.manager);\n            loader.setResponseType('arraybuffer');\n            loader.setPath(this.path);\n            loader.load(url, function (buffer) {\n                texture.image = scope.parse(buffer);\n                texture.needsUpdate = true;\n                if (onLoad !== undefined) {\n                    onLoad(texture);\n                }\n            }, onProgress, onError);\n            return texture;\n        },\n        parse: function (buffer) {\n            function tgaCheckHeader(header) {\n                switch (header.image_type) {\n                case TGA_TYPE_INDEXED:\n                case TGA_TYPE_RLE_INDEXED:\n                    if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n                    }\n                    break;\n                case TGA_TYPE_RGB:\n                case TGA_TYPE_GREY:\n                case TGA_TYPE_RLE_RGB:\n                case TGA_TYPE_RLE_GREY:\n                    if (header.colormap_type) {\n                        console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n                    }\n                    break;\n                case TGA_TYPE_NO_DATA:\n                    console.error('THREE.TGALoader: No data.');\n                default:\n                    console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n                }\n                if (header.width <= 0 || header.height <= 0) {\n                    console.error('THREE.TGALoader: Invalid image size.');\n                }\n                if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n                    console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n                }\n            }\n            function tgaParse(use_rle, use_pal, header, offset, data) {\n                var pixel_data, pixel_size, pixel_total, palettes;\n                pixel_size = header.pixel_size >> 3;\n                pixel_total = header.width * header.height * pixel_size;\n                if (use_pal) {\n                    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n                }\n                if (use_rle) {\n                    pixel_data = new Uint8Array(pixel_total);\n                    var c, count, i;\n                    var shift = 0;\n                    var pixels = new Uint8Array(pixel_size);\n                    while (shift < pixel_total) {\n                        c = data[offset++];\n                        count = (c & 127) + 1;\n                        if (c & 128) {\n                            for (i = 0; i < pixel_size; ++i) {\n                                pixels[i] = data[offset++];\n                            }\n                            for (i = 0; i < count; ++i) {\n                                pixel_data.set(pixels, shift + i * pixel_size);\n                            }\n                            shift += pixel_size * count;\n                        } else {\n                            count *= pixel_size;\n                            for (i = 0; i < count; ++i) {\n                                pixel_data[shift + i] = data[offset++];\n                            }\n                            shift += count;\n                        }\n                    }\n                } else {\n                    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n                }\n                return {\n                    pixel_data: pixel_data,\n                    palettes: palettes\n                };\n            }\n            function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n                var colormap = palettes;\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n                        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n                        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        color = image[i + 0] + (image[i + 1] << 8);\n                        imageData[(x + width * y) * 4 + 0] = (color & 31744) >> 7;\n                        imageData[(x + width * y) * 4 + 1] = (color & 992) >> 2;\n                        imageData[(x + width * y) * 4 + 2] = (color & 31) >> 3;\n                        imageData[(x + width * y) * 4 + 3] = color & 32768 ? 0 : 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 3) {\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 4) {\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n                        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 3];\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var color, i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i++) {\n                        color = image[i];\n                        imageData[(x + width * y) * 4 + 0] = color;\n                        imageData[(x + width * y) * 4 + 1] = color;\n                        imageData[(x + width * y) * 4 + 2] = color;\n                        imageData[(x + width * y) * 4 + 3] = 255;\n                    }\n                }\n                return imageData;\n            }\n            function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n                var i = 0, x, y;\n                var width = header.width;\n                for (y = y_start; y !== y_end; y += y_step) {\n                    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n                        imageData[(x + width * y) * 4 + 0] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 1] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n                        imageData[(x + width * y) * 4 + 3] = image[i + 1];\n                    }\n                }\n                return imageData;\n            }\n            function getTgaRGBA(data, width, height, image, palette) {\n                var x_start, y_start, x_step, y_step, x_end, y_end;\n                switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n                default:\n                case TGA_ORIGIN_UL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BL:\n                    x_start = 0;\n                    x_step = 1;\n                    x_end = width;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                case TGA_ORIGIN_UR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = 0;\n                    y_step = 1;\n                    y_end = height;\n                    break;\n                case TGA_ORIGIN_BR:\n                    x_start = width - 1;\n                    x_step = -1;\n                    x_end = -1;\n                    y_start = height - 1;\n                    y_step = -1;\n                    y_end = -1;\n                    break;\n                }\n                if (use_grey) {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 16:\n                        tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                } else {\n                    switch (header.pixel_size) {\n                    case 8:\n                        tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n                        break;\n                    case 16:\n                        tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 24:\n                        tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    case 32:\n                        tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n                        break;\n                    default:\n                        console.error('THREE.TGALoader: Format not supported.');\n                        break;\n                    }\n                }\n                return data;\n            }\n            var TGA_TYPE_NO_DATA = 0, TGA_TYPE_INDEXED = 1, TGA_TYPE_RGB = 2, TGA_TYPE_GREY = 3, TGA_TYPE_RLE_INDEXED = 9, TGA_TYPE_RLE_RGB = 10, TGA_TYPE_RLE_GREY = 11, TGA_ORIGIN_MASK = 48, TGA_ORIGIN_SHIFT = 4, TGA_ORIGIN_BL = 0, TGA_ORIGIN_BR = 1, TGA_ORIGIN_UL = 2, TGA_ORIGIN_UR = 3;\n            if (buffer.length < 19)\n                console.error('THREE.TGALoader: Not enough data to contain header.');\n            var content = new Uint8Array(buffer), offset = 0, header = {\n                    id_length: content[offset++],\n                    colormap_type: content[offset++],\n                    image_type: content[offset++],\n                    colormap_index: content[offset++] | content[offset++] << 8,\n                    colormap_length: content[offset++] | content[offset++] << 8,\n                    colormap_size: content[offset++],\n                    origin: [\n                        content[offset++] | content[offset++] << 8,\n                        content[offset++] | content[offset++] << 8\n                    ],\n                    width: content[offset++] | content[offset++] << 8,\n                    height: content[offset++] | content[offset++] << 8,\n                    pixel_size: content[offset++],\n                    flags: content[offset++]\n                };\n            tgaCheckHeader(header);\n            if (header.id_length + offset > buffer.length) {\n                console.error('THREE.TGALoader: No data.');\n            }\n            offset += header.id_length;\n            var use_rle = false, use_pal = false, use_grey = false;\n            switch (header.image_type) {\n            case TGA_TYPE_RLE_INDEXED:\n                use_rle = true;\n                use_pal = true;\n                break;\n            case TGA_TYPE_INDEXED:\n                use_pal = true;\n                break;\n            case TGA_TYPE_RLE_RGB:\n                use_rle = true;\n                break;\n            case TGA_TYPE_RGB:\n                break;\n            case TGA_TYPE_RLE_GREY:\n                use_rle = true;\n                use_grey = true;\n                break;\n            case TGA_TYPE_GREY:\n                use_grey = true;\n                break;\n            }\n            var useOffscreen = typeof OffscreenCanvas !== 'undefined';\n            var canvas = useOffscreen ? new OffscreenCanvas(header.width, header.height) : document.createElement('canvas');\n            canvas.width = header.width;\n            canvas.height = header.height;\n            var context = canvas.getContext('2d');\n            var imageData = context.createImageData(header.width, header.height);\n            var result = tgaParse(use_rle, use_pal, header, offset, content);\n            var rgbaData = getTgaRGBA(imageData.data, header.width, header.height, result.pixel_data, result.palettes);\n            context.putImageData(imageData, 0, 0);\n            return useOffscreen ? canvas.transferToImageBitmap() : canvas;\n        }\n    });\n    return  TGALoader;\n});"]}