{"version":3,"sources":["loaders/DRACOLoader.js"],"names":["define","THREE","threex","DRACOLoader","manager","Loader","call","this","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","prototype","Object","assign","create","constructor","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","setVerbosity","console","warn","setDrawMode","setSkipDequantization","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","setResponseType","crossOrigin","setWithCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","type","undefined","BYTES_PER_ELEMENT","name","worker","taskKey","JSON","stringify","taskCache","has","cachedTask","get","key","promise","byteLength","Error","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","finally","_releaseTask","set","geometryData","BufferGeometry","index","setIndex","BufferAttribute","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","error","sort","a","b","debug","log","map","dispose","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","Float32Array","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","Uint8Array","DracoUInt8Array","GetAttributeUInt8ForAllPoints","Uint16Array","DracoUInt16Array","GetAttributeUInt16ForAllPoints","Uint32Array","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","indexArray","GetFaceFromMesh","j","buffers","attr","WeakMap","releaseDecoderModule","getDecoderModule","loaders"],"mappings":"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","file":"../../loaders/DRACOLoader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var DRACOLoader = function (manager) {\r\n        THREE.Loader.call(this, manager);\r\n        this.decoderPath = '';\r\n        this.decoderConfig = {};\r\n        this.decoderBinary = null;\r\n        this.decoderPending = null;\r\n        this.workerLimit = 4;\r\n        this.workerPool = [];\r\n        this.workerNextTaskID = 1;\r\n        this.workerSourceURL = '';\r\n        this.defaultAttributeIDs = {\r\n            position: 'POSITION',\r\n            normal: 'NORMAL',\r\n            color: 'COLOR',\r\n            uv: 'TEX_COORD'\r\n        };\r\n        this.defaultAttributeTypes = {\r\n            position: 'Float32Array',\r\n            normal: 'Float32Array',\r\n            color: 'Float32Array',\r\n            uv: 'Float32Array'\r\n        };\r\n    };\r\n    DRACOLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\r\n        constructor: DRACOLoader,\r\n        setDecoderPath: function (path) {\r\n            this.decoderPath = path;\r\n            return this;\r\n        },\r\n        setDecoderConfig: function (config) {\r\n            this.decoderConfig = config;\r\n            return this;\r\n        },\r\n        setWorkerLimit: function (workerLimit) {\r\n            this.workerLimit = workerLimit;\r\n            return this;\r\n        },\r\n        setVerbosity: function () {\r\n            console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\r\n        },\r\n        setDrawMode: function () {\r\n            console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\r\n        },\r\n        setSkipDequantization: function () {\r\n            console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\r\n        },\r\n        load: function (url, onLoad, onProgress, onError) {\r\n            var loader = new THREE.FileLoader(this.manager);\r\n            loader.setPath(this.path);\r\n            loader.setResponseType('arraybuffer');\r\n            if (this.crossOrigin === 'use-credentials') {\r\n                loader.setWithCredentials(true);\r\n            }\r\n            loader.load(url, buffer => {\r\n                var taskConfig = {\r\n                    attributeIDs: this.defaultAttributeIDs,\r\n                    attributeTypes: this.defaultAttributeTypes,\r\n                    useUniqueIDs: false\r\n                };\r\n                this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\r\n            }, onProgress, onError);\r\n        },\r\n        decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {\r\n            var taskConfig = {\r\n                attributeIDs: attributeIDs || this.defaultAttributeIDs,\r\n                attributeTypes: attributeTypes || this.defaultAttributeTypes,\r\n                useUniqueIDs: !!attributeIDs\r\n            };\r\n            this.decodeGeometry(buffer, taskConfig).then(callback);\r\n        },\r\n        decodeGeometry: function (buffer, taskConfig) {\r\n            for (var attribute in taskConfig.attributeTypes) {\r\n                var type = taskConfig.attributeTypes[attribute];\r\n                if (type.BYTES_PER_ELEMENT !== undefined) {\r\n                    taskConfig.attributeTypes[attribute] = type.name;\r\n                }\r\n            }\r\n            var taskKey = JSON.stringify(taskConfig);\r\n            if (DRACOLoader.taskCache.has(buffer)) {\r\n                var cachedTask = DRACOLoader.taskCache.get(buffer);\r\n                if (cachedTask.key === taskKey) {\r\n                    return cachedTask.promise;\r\n                } else if (buffer.byteLength === 0) {\r\n                    throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\r\n                }\r\n            }\r\n            var worker;\r\n            var taskID = this.workerNextTaskID++;\r\n            var taskCost = buffer.byteLength;\r\n            var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\r\n                worker = _worker;\r\n                return new Promise((resolve, reject) => {\r\n                    worker._callbacks[taskID] = {\r\n                        resolve,\r\n                        reject\r\n                    };\r\n                    worker.postMessage({\r\n                        type: 'decode',\r\n                        id: taskID,\r\n                        taskConfig,\r\n                        buffer\r\n                    }, [buffer]);\r\n                });\r\n            }).then(message => this._createGeometry(message.geometry));\r\n            geometryPending.finally(() => {\r\n                if (worker && taskID) {\r\n                    this._releaseTask(worker, taskID);\r\n                }\r\n            });\r\n            DRACOLoader.taskCache.set(buffer, {\r\n                key: taskKey,\r\n                promise: geometryPending\r\n            });\r\n            return geometryPending;\r\n        },\r\n        _createGeometry: function (geometryData) {\r\n            var geometry = new THREE.BufferGeometry();\r\n            if (geometryData.index) {\r\n                geometry.setIndex(new THREE.BufferAttribute(geometryData.index.array, 1));\r\n            }\r\n            for (var i = 0; i < geometryData.attributes.length; i++) {\r\n                var attribute = geometryData.attributes[i];\r\n                var name = attribute.name;\r\n                var array = attribute.array;\r\n                var itemSize = attribute.itemSize;\r\n                geometry.setAttribute(name, new THREE.BufferAttribute(array, itemSize));\r\n            }\r\n            return geometry;\r\n        },\r\n        _loadLibrary: function (url, responseType) {\r\n            var loader = new THREE.FileLoader(this.manager);\r\n            loader.setPath(this.decoderPath);\r\n            loader.setResponseType(responseType);\r\n            return new Promise((resolve, reject) => {\r\n                loader.load(url, resolve, undefined, reject);\r\n            });\r\n        },\r\n        preload: function () {\r\n            this._initDecoder();\r\n            return this;\r\n        },\r\n        _initDecoder: function () {\r\n            if (this.decoderPending)\r\n                return this.decoderPending;\r\n            var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\r\n            var librariesPending = [];\r\n            if (useJS) {\r\n                librariesPending.push(this._loadLibrary('draco_decoder', 'text'));\r\n            } else {\r\n                librariesPending.push(this._loadLibrary('draco_wasm_wrapper', 'text'));\r\n                librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\r\n            }\r\n            this.decoderPending = Promise.all(librariesPending).then(libraries => {\r\n                var jsContent = libraries[0];\r\n                if (!useJS) {\r\n                    this.decoderConfig.wasmBinary = libraries[1];\r\n                }\r\n                var fn = DRACOLoader.DRACOWorker.toString();\r\n                var body = [\r\n                    '/* draco decoder */',\r\n                    jsContent,\r\n                    '',\r\n                    '/* worker */',\r\n                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\r\n                ].join('\\n');\r\n                this.workerSourceURL = URL.createObjectURL(new Blob([body]));\r\n            });\r\n            return this.decoderPending;\r\n        },\r\n        _getWorker: function (taskID, taskCost) {\r\n            return this._initDecoder().then(() => {\r\n                if (this.workerPool.length < this.workerLimit) {\r\n                    var worker = new Worker(this.workerSourceURL);\r\n                    worker._callbacks = {};\r\n                    worker._taskCosts = {};\r\n                    worker._taskLoad = 0;\r\n                    worker.postMessage({\r\n                        type: 'init',\r\n                        decoderConfig: this.decoderConfig\r\n                    });\r\n                    worker.onmessage = function (e) {\r\n                        var message = e.data;\r\n                        switch (message.type) {\r\n                        case 'decode':\r\n                            worker._callbacks[message.id].resolve(message);\r\n                            break;\r\n                        case 'error':\r\n                            worker._callbacks[message.id].reject(message);\r\n                            break;\r\n                        default:\r\n                            console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\r\n                        }\r\n                    };\r\n                    this.workerPool.push(worker);\r\n                } else {\r\n                    this.workerPool.sort(function (a, b) {\r\n                        return a._taskLoad > b._taskLoad ? -1 : 1;\r\n                    });\r\n                }\r\n                var worker = this.workerPool[this.workerPool.length - 1];\r\n                worker._taskCosts[taskID] = taskCost;\r\n                worker._taskLoad += taskCost;\r\n                return worker;\r\n            });\r\n        },\r\n        _releaseTask: function (worker, taskID) {\r\n            worker._taskLoad -= worker._taskCosts[taskID];\r\n            delete worker._callbacks[taskID];\r\n            delete worker._taskCosts[taskID];\r\n        },\r\n        debug: function () {\r\n            console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\r\n        },\r\n        dispose: function () {\r\n            for (var i = 0; i < this.workerPool.length; ++i) {\r\n                this.workerPool[i].terminate();\r\n            }\r\n            this.workerPool.length = 0;\r\n            return this;\r\n        }\r\n    });\r\n    DRACOLoader.DRACOWorker = function () {\r\n        var decoderConfig;\r\n        var decoderPending;\r\n        onmessage = function (e) {\r\n            var message = e.data;\r\n            switch (message.type) {\r\n            case 'init':\r\n                decoderConfig = message.decoderConfig;\r\n                decoderPending = new Promise(function (resolve) {\r\n                    decoderConfig.onModuleLoaded = function (draco) {\r\n                        resolve({ draco: draco });\r\n                    };\r\n                    DracoDecoderModule(decoderConfig);\r\n                });\r\n                break;\r\n            case 'decode':\r\n                var buffer = message.buffer;\r\n                var taskConfig = message.taskConfig;\r\n                decoderPending.then(module => {\r\n                    var draco = module.draco;\r\n                    var decoder = new draco.Decoder();\r\n                    var decoderBuffer = new draco.DecoderBuffer();\r\n                    decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\r\n                    try {\r\n                        var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\r\n                        var buffers = geometry.attributes.map(attr => attr.array.buffer);\r\n                        if (geometry.index)\r\n                            buffers.push(geometry.index.array.buffer);\r\n                        self.postMessage({\r\n                            type: 'decode',\r\n                            id: message.id,\r\n                            geometry\r\n                        }, buffers);\r\n                    } catch (error) {\r\n                        console.error(error);\r\n                        self.postMessage({\r\n                            type: 'error',\r\n                            id: message.id,\r\n                            error: error.message\r\n                        });\r\n                    } finally {\r\n                        draco.destroy(decoderBuffer);\r\n                        draco.destroy(decoder);\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        };\r\n        function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\r\n            var attributeIDs = taskConfig.attributeIDs;\r\n            var attributeTypes = taskConfig.attributeTypes;\r\n            var dracoGeometry;\r\n            var decodingStatus;\r\n            var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\r\n            if (geometryType === draco.TRIANGULAR_MESH) {\r\n                dracoGeometry = new draco.Mesh();\r\n                decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\r\n            } else if (geometryType === draco.POINT_CLOUD) {\r\n                dracoGeometry = new draco.PointCloud();\r\n                decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\r\n            } else {\r\n                throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\r\n            }\r\n            if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\r\n                throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\r\n            }\r\n            var geometry = {\r\n                index: null,\r\n                attributes: []\r\n            };\r\n            for (var attributeName in attributeIDs) {\r\n                var attributeType = self[attributeTypes[attributeName]];\r\n                var attribute;\r\n                var attributeID;\r\n                if (taskConfig.useUniqueIDs) {\r\n                    attributeID = attributeIDs[attributeName];\r\n                    attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\r\n                } else {\r\n                    attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\r\n                    if (attributeID === -1)\r\n                        continue;\r\n                    attribute = decoder.GetAttribute(dracoGeometry, attributeID);\r\n                }\r\n                geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\r\n            }\r\n            if (geometryType === draco.TRIANGULAR_MESH) {\r\n                var numFaces = dracoGeometry.num_faces();\r\n                var numIndices = numFaces * 3;\r\n                var index = new Uint32Array(numIndices);\r\n                var indexArray = new draco.DracoInt32Array();\r\n                for (var i = 0; i < numFaces; ++i) {\r\n                    decoder.GetFaceFromMesh(dracoGeometry, i, indexArray);\r\n                    for (var j = 0; j < 3; ++j) {\r\n                        index[i * 3 + j] = indexArray.GetValue(j);\r\n                    }\r\n                }\r\n                geometry.index = {\r\n                    array: index,\r\n                    itemSize: 1\r\n                };\r\n                draco.destroy(indexArray);\r\n            }\r\n            draco.destroy(dracoGeometry);\r\n            return geometry;\r\n        }\r\n        function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\r\n            var numComponents = attribute.num_components();\r\n            var numPoints = dracoGeometry.num_points();\r\n            var numValues = numPoints * numComponents;\r\n            var dracoArray;\r\n            var array;\r\n            switch (attributeType) {\r\n            case Float32Array:\r\n                dracoArray = new draco.DracoFloat32Array();\r\n                decoder.GetAttributeFloatForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Float32Array(numValues);\r\n                break;\r\n            case Int8Array:\r\n                dracoArray = new draco.DracoInt8Array();\r\n                decoder.GetAttributeInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Int8Array(numValues);\r\n                break;\r\n            case Int16Array:\r\n                dracoArray = new draco.DracoInt16Array();\r\n                decoder.GetAttributeInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Int16Array(numValues);\r\n                break;\r\n            case Int32Array:\r\n                dracoArray = new draco.DracoInt32Array();\r\n                decoder.GetAttributeInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Int32Array(numValues);\r\n                break;\r\n            case Uint8Array:\r\n                dracoArray = new draco.DracoUInt8Array();\r\n                decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Uint8Array(numValues);\r\n                break;\r\n            case Uint16Array:\r\n                dracoArray = new draco.DracoUInt16Array();\r\n                decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Uint16Array(numValues);\r\n                break;\r\n            case Uint32Array:\r\n                dracoArray = new draco.DracoUInt32Array();\r\n                decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, attribute, dracoArray);\r\n                array = new Uint32Array(numValues);\r\n                break;\r\n            default:\r\n                throw new Error('THREE.DRACOLoader: Unexpected attribute type.');\r\n            }\r\n            for (var i = 0; i < numValues; i++) {\r\n                array[i] = dracoArray.GetValue(i);\r\n            }\r\n            draco.destroy(dracoArray);\r\n            return {\r\n                name: attributeName,\r\n                array: array,\r\n                itemSize: numComponents\r\n            };\r\n        }\r\n    };\r\n    DRACOLoader.taskCache = new WeakMap();\r\n    DRACOLoader.setDecoderPath = function () {\r\n        console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\r\n    };\r\n    DRACOLoader.setDecoderConfig = function () {\r\n        console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\r\n    };\r\n    DRACOLoader.releaseDecoderModule = function () {\r\n        console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\r\n    };\r\n    DRACOLoader.getDecoderModule = function () {\r\n        console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\r\n    };\r\n\r\n    return threex.loaders.DRACOLoader = DRACOLoader;\r\n});"]}