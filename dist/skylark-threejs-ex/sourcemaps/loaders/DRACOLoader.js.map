{"version":3,"sources":["loaders/DRACOLoader.js"],"names":["define","THREE","DRACOLoader","manager","Loader","call","this","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","prototype","Object","assign","create","constructor","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","setVerbosity","console","warn","setDrawMode","setSkipDequantization","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","setResponseType","crossOrigin","setWithCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","type","undefined","BYTES_PER_ELEMENT","name","worker","taskKey","JSON","stringify","taskCache","has","cachedTask","get","key","promise","byteLength","Error","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","finally","_releaseTask","set","geometryData","BufferGeometry","index","setIndex","BufferAttribute","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","error","sort","a","b","debug","log","map","dispose","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","Float32Array","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","Uint8Array","DracoUInt8Array","GetAttributeUInt8ForAllPoints","Uint16Array","DracoUInt16Array","GetAttributeUInt16ForAllPoints","Uint32Array","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","module","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","numIndices","indexArray","GetFaceFromMesh","j","buffers","attr","WeakMap","releaseDecoderModule","getDecoderModule"],"mappings":"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","file":"../../loaders/DRACOLoader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tTHREE.DRACOLoader = function ( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t};\n\n\tTHREE.DRACOLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: THREE.DRACOLoader,\n\n\t\tsetDecoderPath: function ( path ) {\n\n\t\t\tthis.decoderPath = path;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDecoderConfig: function ( config ) {\n\n\t\t\tthis.decoderConfig = config;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\t\tthis.workerLimit = workerLimit;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/** @deprecated */\n\t\tsetVerbosity: function () {\n\n\t\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t\t},\n\n\t\t/** @deprecated */\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t\t},\n\n\t\t/** @deprecated */\n\t\tsetSkipDequantization: function () {\n\n\t\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t\tvar taskConfig = {\n\t\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\t\tuseUniqueIDs: false\n\t\t\t\t};\n\n\t\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t\t.then( onLoad )\n\t\t\t\t\t.catch( onError );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\t\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t\t},\n\n\t\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t\t// references (rather than names) to typed array constructors. These must be\n\t\t\t// serialized before sending them to the worker.\n\t\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( THREE.DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\t\tvar cachedTask = THREE.DRACOLoader.taskCache.get( buffer );\n\n\t\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\t\treturn cachedTask.promise;\n\n\t\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\t\tthrow new Error(\n\n\t\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar worker;\n\t\t\tvar taskID = this.workerNextTaskID ++;\n\t\t\tvar taskCost = buffer.byteLength;\n\n\t\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t\t// when the task completes.\n\t\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t\t.then( ( _worker ) => {\n\n\t\t\t\t\tworker = _worker;\n\n\t\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t\t// this.debug();\n\n\t\t\t\t\t} );\n\n\t\t\t\t} )\n\t\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t\t// Remove task from the task list.\n\t\t\tgeometryPending\n\t\t\t\t.finally( () => {\n\n\t\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t\t// this.debug();\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t// Cache the task result.\n\t\t\tTHREE.DRACOLoader.taskCache.set( buffer, {\n\n\t\t\t\tkey: taskKey,\n\t\t\t\tpromise: geometryPending\n\n\t\t\t} );\n\n\t\t\treturn geometryPending;\n\n\t\t},\n\n\t\t_createGeometry: function ( geometryData ) {\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\t\tif ( geometryData.index ) {\n\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\t\tvar name = attribute.name;\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tgeometry.setAttribute( name, new THREE.BufferAttribute( array, itemSize ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t},\n\n\t\t_loadLibrary: function ( url, responseType ) {\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setPath( this.decoderPath );\n\t\t\tloader.setResponseType( responseType );\n\n\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tpreload: function () {\n\n\t\t\tthis._initDecoder();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_initDecoder: function () {\n\n\t\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\t\tvar librariesPending = [];\n\n\t\t\tif ( useJS ) {\n\n\t\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t\t} else {\n\n\t\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t\t}\n\n\t\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t\t.then( ( libraries ) => {\n\n\t\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar fn = THREE.DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'',\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t\t} );\n\n\t\t\treturn this.decoderPending;\n\n\t\t},\n\n\t\t_getWorker: function ( taskID, taskCost ) {\n\n\t\t\treturn this._initDecoder().then( () => {\n\n\t\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\t\tworker._callbacks = {};\n\t\t\t\t\tworker._taskCosts = {};\n\t\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\t\tworker._taskLoad += taskCost;\n\t\t\t\treturn worker;\n\n\t\t\t} );\n\n\t\t},\n\n\t\t_releaseTask: function ( worker, taskID ) {\n\n\t\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\t\tdelete worker._callbacks[ taskID ];\n\t\t\tdelete worker._taskCosts[ taskID ];\n\n\t\t},\n\n\t\tdebug: function () {\n\n\t\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t\t}\n\n\t\t\tthis.workerPool.length = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/* WEB WORKER */\n\n\tTHREE.DRACOLoader.DRACOWorker = function () {\n\n\t\tvar decoderConfig;\n\t\tvar decoderPending;\n\n\t\tonmessage = function ( e ) {\n\n\t\t\tvar message = e.data;\n\n\t\t\tswitch ( message.type ) {\n\n\t\t\t\tcase 'init':\n\t\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'decode':\n\t\t\t\t\tvar buffer = message.buffer;\n\t\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t\t} finally {\n\n\t\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\t\tvar dracoGeometry;\n\t\t\tvar decodingStatus;\n\n\t\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t\t}\n\n\t\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t\t}\n\n\t\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t\t// Gather all vertex attributes.\n\t\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\t\tvar attribute;\n\t\t\t\tvar attributeID;\n\n\t\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t\t}\n\n\t\t\t// Add index.\n\t\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t\t// Generate mesh faces.\n\t\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\t\tvar numIndices = numFaces * 3;\n\t\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\t\tdraco.destroy( indexArray );\n\n\t\t\t}\n\n\t\t\tdraco.destroy( dracoGeometry );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\t\tvar numComponents = attribute.num_components();\n\t\t\tvar numPoints = dracoGeometry.num_points();\n\t\t\tvar numValues = numPoints * numComponents;\n\t\t\tvar dracoArray;\n\n\t\t\tvar array;\n\n\t\t\tswitch ( attributeType ) {\n\n\t\t\t\tcase Float32Array:\n\t\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int8Array:\n\t\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int16Array:\n\t\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Int32Array:\n\t\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint8Array:\n\t\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint16Array:\n\t\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase Uint32Array:\n\t\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t\t}\n\n\t\t\tdraco.destroy( dracoArray );\n\n\t\t\treturn {\n\t\t\t\tname: attributeName,\n\t\t\t\tarray: array,\n\t\t\t\titemSize: numComponents\n\t\t\t};\n\n\t\t}\n\n\t};\n\n\tTHREE.DRACOLoader.taskCache = new WeakMap();\n\n\t/** Deprecated static methods */\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.setDecoderPath = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n\t};\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.setDecoderConfig = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n\t};\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.releaseDecoderModule = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n\t};\n\n\t/** @deprecated */\n\tTHREE.DRACOLoader.getDecoderModule = function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n\t};\n\t\n\treturn THREE.DRACOLoader;\n});\n"]}