{"version":3,"sources":["lines/LineGeometry.js"],"names":["define","THREE","LineGeometry","LineSegmentsGeometry","call","this","type","prototype","Object","assign","create","constructor","isLineGeometry","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","isGeometry","vertices","isBufferGeometry","position","copy"],"mappings":";;;;;;;AAAAA,QACC,kBACA,0BACC,SAASC,GAoGV,OA9FAA,EAAMC,aAAe,WAEpBD,EAAME,qBAAqBC,KAAMC,MAEjCA,KAAKC,KAAO,gBAIbL,EAAMC,aAAaK,UAAYC,OAAOC,OAAQD,OAAOE,OAAQT,EAAME,qBAAqBI,YAEvFI,YAAaV,EAAMC,aAEnBU,gBAAgB,EAEhBC,aAAc,SAAWC,GAOxB,IAHA,IAAIC,EAASD,EAAMC,OAAS,EACxBC,EAAS,IAAIC,aAAc,EAAIF,GAEzBG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAEjCF,EAAQ,EAAIE,GAAMJ,EAAOI,GACzBF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GACjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GAEjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GACjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GACjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GAMlC,OAFAjB,EAAME,qBAAqBI,UAAUM,aAAaT,KAAMC,KAAMW,GAEvDX,MAIRc,UAAW,SAAWL,GAOrB,IAHA,IAAIC,EAASD,EAAMC,OAAS,EACxBK,EAAS,IAAIH,aAAc,EAAIF,GAEzBG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAEjCE,EAAQ,EAAIF,GAAMJ,EAAOI,GACzBE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GACjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GAEjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GACjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GACjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GAMlC,OAFAjB,EAAME,qBAAqBI,UAAUY,UAAUf,KAAMC,KAAMe,GAEpDf,MAIRgB,SAAU,SAAWC,GAEpB,IAAIC,EAAWD,EAAKC,SAcpB,OAZKA,EAASC,WAEbnB,KAAKQ,aAAcU,EAASE,UAEjBF,EAASG,kBAEpBrB,KAAKQ,aAAcU,EAASI,SAASb,OAM/BT,MAIRuB,KAAM,WAIL,OAAOvB,QAMFJ,EAAMC","file":"../../lines/LineGeometry.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"./LineSegmentsGeometry\"\n],function(THREE){\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t */\n\n\tTHREE.LineGeometry = function () {\n\n\t\tTHREE.LineSegmentsGeometry.call( this );\n\n\t\tthis.type = 'LineGeometry';\n\n\t};\n\n\tTHREE.LineGeometry.prototype = Object.assign( Object.create( THREE.LineSegmentsGeometry.prototype ), {\n\n\t\tconstructor: THREE.LineGeometry,\n\n\t\tisLineGeometry: true,\n\n\t\tsetPositions: function ( array ) {\n\n\t\t\t// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n\t\t\tvar length = array.length - 3;\n\t\t\tvar points = new Float32Array( 2 * length );\n\n\t\t\tfor ( var i = 0; i < length; i += 3 ) {\n\n\t\t\t\tpoints[ 2 * i ] = array[ i ];\n\t\t\t\tpoints[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\t\tpoints[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\t\tpoints[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\t\tpoints[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\t\tpoints[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t\t}\n\n\t\t\tTHREE.LineSegmentsGeometry.prototype.setPositions.call( this, points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColors: function ( array ) {\n\n\t\t\t// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n\t\t\tvar length = array.length - 3;\n\t\t\tvar colors = new Float32Array( 2 * length );\n\n\t\t\tfor ( var i = 0; i < length; i += 3 ) {\n\n\t\t\t\tcolors[ 2 * i ] = array[ i ];\n\t\t\t\tcolors[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\t\tcolors[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\t\tcolors[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\t\tcolors[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\t\tcolors[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t\t}\n\n\t\t\tTHREE.LineSegmentsGeometry.prototype.setColors.call( this, colors );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromLine: function ( line ) {\n\n\t\t\tvar geometry = line.geometry;\n\n\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\tthis.setPositions( geometry.vertices );\n\n\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\tthis.setPositions( geometry.position.array ); // assumes non-indexed\n\n\t\t\t}\n\n\t\t\t// set colors, maybe\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( /* source */ ) {\n\n\t\t\t// todo\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.LineGeometry;\n});\n"]}