{"version":3,"sources":["lines/LineGeometry.js"],"names":["define","threex","LineSegmentsGeometry","LineGeometry","call","this","type","prototype","Object","assign","create","constructor","isLineGeometry","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","isGeometry","vertices","isBufferGeometry","position","copy","lines"],"mappings":";;;;;;;AAAAA,QACI,YACA,0BACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAe,WACfD,EAAqBE,KAAKC,MAC1BA,KAAKC,KAAO,gBA+ChB,OA7CAH,EAAaI,UAAYC,OAAOC,OAAOD,OAAOE,OAAOR,EAAqBK,YACtEI,YAAaR,EACbS,gBAAgB,EAChBC,aAAc,SAAUC,GAGpB,IAFA,IAAIC,EAASD,EAAMC,OAAS,EACxBC,EAAS,IAAIC,aAAa,EAAIF,GACzBG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC7BF,EAAO,EAAIE,GAAKJ,EAAMI,GACtBF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAGlC,OADAhB,EAAqBK,UAAUM,aAAaT,KAAKC,KAAMW,GAChDX,MAEXc,UAAW,SAAUL,GAGjB,IAFA,IAAIC,EAASD,EAAMC,OAAS,EACxBK,EAAS,IAAIH,aAAa,EAAIF,GACzBG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC7BE,EAAO,EAAIF,GAAKJ,EAAMI,GACtBE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAGlC,OADAhB,EAAqBK,UAAUY,UAAUf,KAAKC,KAAMe,GAC7Cf,MAEXgB,SAAU,SAAUC,GAChB,IAAIC,EAAWD,EAAKC,SAMpB,OALIA,EAASC,WACTnB,KAAKQ,aAAaU,EAASE,UACpBF,EAASG,kBAChBrB,KAAKQ,aAAaU,EAASI,SAASb,OAEjCT,MAEXuB,KAAM,WACF,OAAOvB,QAIRJ,EAAO4B,MAAM1B,aAAeA","file":"../../lines/LineGeometry.js","sourcesContent":["define([\r\n    \"../threex\",\r\n    './LineSegmentsGeometry'\r\n], function (\r\n    threex,\r\n    LineSegmentsGeometry\r\n) {\r\n    'use strict';\r\n    var LineGeometry = function () {\r\n        LineSegmentsGeometry.call(this);\r\n        this.type = 'LineGeometry';\r\n    };\r\n    LineGeometry.prototype = Object.assign(Object.create(LineSegmentsGeometry.prototype), {\r\n        constructor: LineGeometry,\r\n        isLineGeometry: true,\r\n        setPositions: function (array) {\r\n            var length = array.length - 3;\r\n            var points = new Float32Array(2 * length);\r\n            for (var i = 0; i < length; i += 3) {\r\n                points[2 * i] = array[i];\r\n                points[2 * i + 1] = array[i + 1];\r\n                points[2 * i + 2] = array[i + 2];\r\n                points[2 * i + 3] = array[i + 3];\r\n                points[2 * i + 4] = array[i + 4];\r\n                points[2 * i + 5] = array[i + 5];\r\n            }\r\n            LineSegmentsGeometry.prototype.setPositions.call(this, points);\r\n            return this;\r\n        },\r\n        setColors: function (array) {\r\n            var length = array.length - 3;\r\n            var colors = new Float32Array(2 * length);\r\n            for (var i = 0; i < length; i += 3) {\r\n                colors[2 * i] = array[i];\r\n                colors[2 * i + 1] = array[i + 1];\r\n                colors[2 * i + 2] = array[i + 2];\r\n                colors[2 * i + 3] = array[i + 3];\r\n                colors[2 * i + 4] = array[i + 4];\r\n                colors[2 * i + 5] = array[i + 5];\r\n            }\r\n            LineSegmentsGeometry.prototype.setColors.call(this, colors);\r\n            return this;\r\n        },\r\n        fromLine: function (line) {\r\n            var geometry = line.geometry;\r\n            if (geometry.isGeometry) {\r\n                this.setPositions(geometry.vertices);\r\n            } else if (geometry.isBufferGeometry) {\r\n                this.setPositions(geometry.position.array);\r\n            }\r\n            return this;\r\n        },\r\n        copy: function () {\r\n            return this;\r\n        }\r\n    });\r\n    \r\n    return threex.lines.LineGeometry = LineGeometry;\r\n});"]}