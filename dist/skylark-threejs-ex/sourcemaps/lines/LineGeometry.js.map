{"version":3,"sources":["lines/LineGeometry.js"],"names":["define","LineSegmentsGeometry","LineGeometry","call","this","type","prototype","Object","assign","create","constructor","isLineGeometry","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","isGeometry","vertices","isBufferGeometry","position","copy"],"mappings":";;;;;;;AAAAA,QACI,0BACD,SAAUC,GACT,aACA,IAAIC,EAAe,WACfD,EAAqBE,KAAKC,MAC1BA,KAAKC,KAAO,gBA8ChB,OA5CAH,EAAaI,UAAYC,OAAOC,OAAOD,OAAOE,OAAOR,EAAqBK,YACtEI,YAAaR,EACbS,gBAAgB,EAChBC,aAAc,SAAUC,GAGpB,IAFA,IAAIC,EAASD,EAAMC,OAAS,EACxBC,EAAS,IAAIC,aAAa,EAAIF,GACzBG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC7BF,EAAO,EAAIE,GAAKJ,EAAMI,GACtBF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAC9BF,EAAO,EAAIE,EAAI,GAAKJ,EAAMI,EAAI,GAGlC,OADAhB,EAAqBK,UAAUM,aAAaT,KAAKC,KAAMW,GAChDX,MAEXc,UAAW,SAAUL,GAGjB,IAFA,IAAIC,EAASD,EAAMC,OAAS,EACxBK,EAAS,IAAIH,aAAa,EAAIF,GACzBG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC7BE,EAAO,EAAIF,GAAKJ,EAAMI,GACtBE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAC9BE,EAAO,EAAIF,EAAI,GAAKJ,EAAMI,EAAI,GAGlC,OADAhB,EAAqBK,UAAUY,UAAUf,KAAKC,KAAMe,GAC7Cf,MAEXgB,SAAU,SAAUC,GAChB,IAAIC,EAAWD,EAAKC,SAMpB,OALIA,EAASC,WACTnB,KAAKQ,aAAaU,EAASE,UACpBF,EAASG,kBAChBrB,KAAKQ,aAAaU,EAASI,SAASb,OAEjCT,MAEXuB,KAAM,WACF,OAAOvB,QAGRF","file":"../../lines/LineGeometry.js","sourcesContent":["define([\n    './LineSegmentsGeometry'\n], function (LineSegmentsGeometry) {\n    'use strict';\n    var LineGeometry = function () {\n        LineSegmentsGeometry.call(this);\n        this.type = 'LineGeometry';\n    };\n    LineGeometry.prototype = Object.assign(Object.create(LineSegmentsGeometry.prototype), {\n        constructor: LineGeometry,\n        isLineGeometry: true,\n        setPositions: function (array) {\n            var length = array.length - 3;\n            var points = new Float32Array(2 * length);\n            for (var i = 0; i < length; i += 3) {\n                points[2 * i] = array[i];\n                points[2 * i + 1] = array[i + 1];\n                points[2 * i + 2] = array[i + 2];\n                points[2 * i + 3] = array[i + 3];\n                points[2 * i + 4] = array[i + 4];\n                points[2 * i + 5] = array[i + 5];\n            }\n            LineSegmentsGeometry.prototype.setPositions.call(this, points);\n            return this;\n        },\n        setColors: function (array) {\n            var length = array.length - 3;\n            var colors = new Float32Array(2 * length);\n            for (var i = 0; i < length; i += 3) {\n                colors[2 * i] = array[i];\n                colors[2 * i + 1] = array[i + 1];\n                colors[2 * i + 2] = array[i + 2];\n                colors[2 * i + 3] = array[i + 3];\n                colors[2 * i + 4] = array[i + 4];\n                colors[2 * i + 5] = array[i + 5];\n            }\n            LineSegmentsGeometry.prototype.setColors.call(this, colors);\n            return this;\n        },\n        fromLine: function (line) {\n            var geometry = line.geometry;\n            if (geometry.isGeometry) {\n                this.setPositions(geometry.vertices);\n            } else if (geometry.isBufferGeometry) {\n                this.setPositions(geometry.position.array);\n            }\n            return this;\n        },\n        copy: function () {\n            return this;\n        }\n    });\n    return LineGeometry;\n});"]}