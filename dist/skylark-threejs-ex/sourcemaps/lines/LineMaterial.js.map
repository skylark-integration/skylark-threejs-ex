{"version":3,"sources":["lines/LineMaterial.js"],"names":["define","THREE","UniformsLib","line","linewidth","value","resolution","Vector2","dashScale","dashSize","gapSize","ShaderLib","uniforms","UniformsUtils","merge","common","fog","vertexShader","fragmentShader","LineMaterial","parameters","ShaderMaterial","call","this","type","clone","clipping","dashed","Object","defineProperties","color","enumerable","get","diffuse","set","copy","setValues","prototype","create","constructor","isLineMaterial"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA2XV,OA5WAA,EAAMC,YAAYC,MAEjBC,WAAaC,MAAO,GACpBC,YAAcD,MAAO,IAAIJ,EAAMM,QAAS,EAAG,IAC3CC,WAAaH,MAAO,GACpBI,UAAYJ,MAAO,GACnBK,SAAWL,MAAO,IAInBJ,EAAMU,UAAkB,MAEvBC,SAAUX,EAAMY,cAAcC,OAC7Bb,EAAMC,YAAYa,OAClBd,EAAMC,YAAYc,IAClBf,EAAMC,YAAYC,OAGnBc,aACC,26HAkJDC,eACC,izCA2DFjB,EAAMkB,aAAe,SAAWC,GAE/BnB,EAAMoB,eAAeC,KAAMC,MAE1BC,KAAM,eAENZ,SAAUX,EAAMY,cAAcY,MAAOxB,EAAMU,UAAkB,KAAEC,UAE/DK,aAAchB,EAAMU,UAAkB,KAAEM,aACxCC,eAAgBjB,EAAMU,UAAkB,KAAEO,eAE1CQ,UAAU,IAIXH,KAAKI,QAAS,EAEdC,OAAOC,iBAAkBN,MAExBO,OAECC,YAAY,EAEZC,IAAK,WAEJ,OAAOT,KAAKX,SAASqB,QAAQ5B,OAI9B6B,IAAK,SAAW7B,GAEfkB,KAAKX,SAASqB,QAAQ5B,MAAQA,IAMhCD,WAEC2B,YAAY,EAEZC,IAAK,WAEJ,OAAOT,KAAKX,SAASR,UAAUC,OAIhC6B,IAAK,SAAW7B,GAEfkB,KAAKX,SAASR,UAAUC,MAAQA,IAMlCG,WAECuB,YAAY,EAEZC,IAAK,WAEJ,OAAOT,KAAKX,SAASJ,UAAUH,OAIhC6B,IAAK,SAAW7B,GAEfkB,KAAKX,SAASJ,UAAUH,MAAQA,IAMlCI,UAECsB,YAAY,EAEZC,IAAK,WAEJ,OAAOT,KAAKX,SAASH,SAASJ,OAI/B6B,IAAK,SAAW7B,GAEfkB,KAAKX,SAASH,SAASJ,MAAQA,IAMjCK,SAECqB,YAAY,EAEZC,IAAK,WAEJ,OAAOT,KAAKX,SAASF,QAAQL,OAI9B6B,IAAK,SAAW7B,GAEfkB,KAAKX,SAASF,QAAQL,MAAQA,IAMhCC,YAECyB,YAAY,EAEZC,IAAK,WAEJ,OAAOT,KAAKX,SAASN,WAAWD,OAIjC6B,IAAK,SAAW7B,GAEfkB,KAAKX,SAASN,WAAWD,MAAM8B,KAAM9B,OAQxCkB,KAAKa,UAAWhB,IAIjBnB,EAAMkB,aAAakB,UAAYT,OAAOU,OAAQrC,EAAMoB,eAAegB,WACnEpC,EAAMkB,aAAakB,UAAUE,YAActC,EAAMkB,aAEjDlB,EAAMkB,aAAakB,UAAUG,gBAAiB,EAGvCvC,EAAMkB","file":"../../lines/LineMaterial.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  linewidth: <float>,\n\t *  dashed: <boolean>,\n\t *  dashScale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>,\n\t *  resolution: <Vector2>, // to be set by renderer\n\t * }\n\t */\n\n\tTHREE.UniformsLib.line = {\n\n\t\tlinewidth: { value: 1 },\n\t\tresolution: { value: new THREE.Vector2( 1, 1 ) },\n\t\tdashScale: { value: 1 },\n\t\tdashSize: { value: 1 },\n\t\tgapSize: { value: 1 } // todo FIX - maybe change to totalSize\n\n\t};\n\n\tTHREE.ShaderLib[ 'line' ] = {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib.common,\n\t\t\tTHREE.UniformsLib.fog,\n\t\t\tTHREE.UniformsLib.line\n\t\t] ),\n\n\t\tvertexShader:\n\t\t\t`\n\t\t\t#include <common>\n\t\t\t#include <color_pars_vertex>\n\t\t\t#include <fog_pars_vertex>\n\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t#include <clipping_planes_pars_vertex>\n\n\t\t\tuniform float linewidth;\n\t\t\tuniform vec2 resolution;\n\n\t\t\tattribute vec3 instanceStart;\n\t\t\tattribute vec3 instanceEnd;\n\n\t\t\tattribute vec3 instanceColorStart;\n\t\t\tattribute vec3 instanceColorEnd;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tuniform float dashScale;\n\t\t\t\tattribute float instanceDistanceStart;\n\t\t\t\tattribute float instanceDistanceEnd;\n\t\t\t\tvarying float vLineDistance;\n\n\t\t\t#endif\n\n\t\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t\t// conservative estimate of the near plane\n\t\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\t#ifdef USE_COLOR\n\n\t\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t\t#endif\n\n\t\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\t// camera space\n\t\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\t\tif ( perspective ) {\n\n\t\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// clip space\n\t\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t\t// ndc space\n\t\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t\t// direction\n\t\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t\t// account for clip-space aspect ratio\n\t\t\t\tdir.x *= aspect;\n\t\t\t\tdir = normalize( dir );\n\n\t\t\t\t// perpendicular to dir\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t\tgl_Position = clip;\n\n\t\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t#include <fog_vertex>\n\n\t\t\t}\n\t\t\t`,\n\n\t\tfragmentShader:\n\t\t\t`\n\t\t\tuniform vec3 diffuse;\n\t\t\tuniform float opacity;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tuniform float dashSize;\n\t\t\t\tuniform float gapSize;\n\n\t\t\t#endif\n\n\t\t\tvarying float vLineDistance;\n\n\t\t\t#include <common>\n\t\t\t#include <color_pars_fragment>\n\t\t\t#include <fog_pars_fragment>\n\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t#include <clipping_planes_pars_fragment>\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t\t#endif\n\n\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t}\n\n\t\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t#include <color_fragment>\n\n\t\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\n\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t#include <encodings_fragment>\n\t\t\t\t#include <fog_fragment>\n\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t}\n\t\t\t`\n\t};\n\n\tTHREE.LineMaterial = function ( parameters ) {\n\n\t\tTHREE.ShaderMaterial.call( this, {\n\n\t\t\ttype: 'LineMaterial',\n\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.ShaderLib[ 'line' ].uniforms ),\n\n\t\t\tvertexShader: THREE.ShaderLib[ 'line' ].vertexShader,\n\t\t\tfragmentShader: THREE.ShaderLib[ 'line' ].fragmentShader,\n\n\t\t\tclipping: true // required for clipping support\n\n\t\t} );\n\n\t\tthis.dashed = false;\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tcolor: {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.diffuse.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.diffuse.value = value;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tlinewidth: {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.linewidth.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.linewidth.value = value;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tdashScale: {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.dashScale.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.dashScale.value = value;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tdashSize: {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.dashSize.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.dashSize.value = value;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tgapSize: {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.gapSize.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.gapSize.value = value;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tresolution: {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.resolution.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.resolution.value.copy( value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t};\n\n\tTHREE.LineMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\n\tTHREE.LineMaterial.prototype.constructor = THREE.LineMaterial;\n\n\tTHREE.LineMaterial.prototype.isLineMaterial = true;\n\n\t\n\treturn THREE.LineMaterial;\n});\n"]}