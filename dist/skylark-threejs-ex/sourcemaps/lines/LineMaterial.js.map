{"version":3,"sources":["lines/LineMaterial.js"],"names":["define","THREE","UniformsLib","line","linewidth","value","resolution","Vector2","dashScale","dashSize","gapSize","ShaderLib","uniforms","UniformsUtils","merge","common","fog","vertexShader","fragmentShader","LineMaterial","parameters","ShaderMaterial","call","this","type","clone","clipping","dashed","Object","defineProperties","color","enumerable","get","diffuse","set","copy","setValues","prototype","create","constructor","isLineMaterial"],"mappings":";;;;;;;AAAAA,QACC,mBACE,SAAUC,GACT,aACAA,EAAMC,YAAYC,MACdC,WAAaC,MAAO,GACpBC,YAAcD,MAAO,IAAIJ,EAAMM,QAAQ,EAAG,IAC1CC,WAAaH,MAAO,GACpBI,UAAYJ,MAAO,GACnBK,SAAWL,MAAO,IAEtBJ,EAAMU,UAAgB,MAClBC,SAAUX,EAAMY,cAAcC,OAC1Bb,EAAMC,YAAYa,OAClBd,EAAMC,YAAYc,IAClBf,EAAMC,YAAYC,OAEtBc,aAAc,qvHAiJdC,eAAgB,2uCA0DpB,IAAIC,EAAe,SAAUC,GACzBnB,EAAMoB,eAAeC,KAAKC,MACtBC,KAAM,eACNZ,SAAUX,EAAMY,cAAcY,MAAMxB,EAAMU,UAAgB,KAAEC,UAC5DK,aAAchB,EAAMU,UAAgB,KAAEM,aACtCC,eAAgBjB,EAAMU,UAAgB,KAAEO,eACxCQ,UAAU,IAEdH,KAAKI,QAAS,EACdC,OAAOC,iBAAiBN,MACpBO,OACIC,YAAY,EACZC,IAAK,WACD,OAAOT,KAAKX,SAASqB,QAAQ5B,OAEjC6B,IAAK,SAAU7B,GACXkB,KAAKX,SAASqB,QAAQ5B,MAAQA,IAGtCD,WACI2B,YAAY,EACZC,IAAK,WACD,OAAOT,KAAKX,SAASR,UAAUC,OAEnC6B,IAAK,SAAU7B,GACXkB,KAAKX,SAASR,UAAUC,MAAQA,IAGxCG,WACIuB,YAAY,EACZC,IAAK,WACD,OAAOT,KAAKX,SAASJ,UAAUH,OAEnC6B,IAAK,SAAU7B,GACXkB,KAAKX,SAASJ,UAAUH,MAAQA,IAGxCI,UACIsB,YAAY,EACZC,IAAK,WACD,OAAOT,KAAKX,SAASH,SAASJ,OAElC6B,IAAK,SAAU7B,GACXkB,KAAKX,SAASH,SAASJ,MAAQA,IAGvCK,SACIqB,YAAY,EACZC,IAAK,WACD,OAAOT,KAAKX,SAASF,QAAQL,OAEjC6B,IAAK,SAAU7B,GACXkB,KAAKX,SAASF,QAAQL,MAAQA,IAGtCC,YACIyB,YAAY,EACZC,IAAK,WACD,OAAOT,KAAKX,SAASN,WAAWD,OAEpC6B,IAAK,SAAU7B,GACXkB,KAAKX,SAASN,WAAWD,MAAM8B,KAAK9B,OAIhDkB,KAAKa,UAAUhB,IAKnB,OAHAD,EAAakB,UAAYT,OAAOU,OAAOrC,EAAMoB,eAAegB,YACrCE,YAAcpB,EACrCA,EAAakB,UAAUG,gBAAiB,EACjCrB","file":"../../lines/LineMaterial.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    THREE.UniformsLib.line = {\n        linewidth: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        dashScale: { value: 1 },\n        dashSize: { value: 1 },\n        gapSize: { value: 1 }\n    };\n    THREE.ShaderLib['line'] = {\n        uniforms: THREE.UniformsUtils.merge([\n            THREE.UniformsLib.common,\n            THREE.UniformsLib.fog,\n            THREE.UniformsLib.line\n        ]),\n        vertexShader: `\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec2 ndcStart = clipStart.xy / clipStart.w;\n\t\t\tvec2 ndcEnd = clipEnd.xy / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd - ndcStart;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t// perpendicular to dir\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n        fragmentShader: `\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, diffuseColor.a );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n    };\n    var LineMaterial = function (parameters) {\n        THREE.ShaderMaterial.call(this, {\n            type: 'LineMaterial',\n            uniforms: THREE.UniformsUtils.clone(THREE.ShaderLib['line'].uniforms),\n            vertexShader: THREE.ShaderLib['line'].vertexShader,\n            fragmentShader: THREE.ShaderLib['line'].fragmentShader,\n            clipping: true\n        });\n        this.dashed = false;\n        Object.defineProperties(this, {\n            color: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.diffuse.value;\n                },\n                set: function (value) {\n                    this.uniforms.diffuse.value = value;\n                }\n            },\n            linewidth: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.linewidth.value;\n                },\n                set: function (value) {\n                    this.uniforms.linewidth.value = value;\n                }\n            },\n            dashScale: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.dashScale.value;\n                },\n                set: function (value) {\n                    this.uniforms.dashScale.value = value;\n                }\n            },\n            dashSize: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.dashSize.value;\n                },\n                set: function (value) {\n                    this.uniforms.dashSize.value = value;\n                }\n            },\n            gapSize: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.gapSize.value;\n                },\n                set: function (value) {\n                    this.uniforms.gapSize.value = value;\n                }\n            },\n            resolution: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.resolution.value;\n                },\n                set: function (value) {\n                    this.uniforms.resolution.value.copy(value);\n                }\n            }\n        });\n        this.setValues(parameters);\n    };\n    LineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\n    LineMaterial.prototype.constructor = LineMaterial;\n    LineMaterial.prototype.isLineMaterial = true;\n    return LineMaterial;\n});"]}