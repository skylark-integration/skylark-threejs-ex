{"version":3,"sources":["lines/LineSegments2.js"],"names":["define","THREE","LineSegmentsGeometry","LineMaterial","start","end","LineSegments2","geometry","material","Mesh","call","this","type","undefined","color","Math","random","prototype","Object","assign","create","constructor","isLineSegments2","computeLineDistances","Vector3","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","data","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","InstancedInterleavedBuffer","setAttribute","InterleavedBufferAttribute","raycast","Vector4","ssOrigin","ssOrigin3","mvMatrix","Matrix4","line","Line3","closestPoint","raycaster","intersects","camera","console","error","ray","projectionMatrix","resolution","lineWidth","linewidth","at","w","applyMatrix4","matrixWorldInverse","multiplyScalar","x","y","z","copy","matrixWorld","multiplyMatrices","isBehindCameraNear","isPastCameraFar","param","closestPointToPointParameter","zPos","MathUtils","lerp","isInClipSpace","isInside","pointOnLine","point","distanceSqToSegment","push","distance","origin","object","face","faceIndex","uv","uv2"],"mappings":"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","file":"../../lines/LineSegments2.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    './LineSegmentsGeometry',\n    './LineMaterial'\n], function (THREE, LineSegmentsGeometry, LineMaterial) {\n    'use strict';\n    var LineSegments2 = function (geometry, material) {\n        THREE.Mesh.call(this);\n        this.type = 'LineSegments2';\n        this.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\n        this.material = material !== undefined ? material : new LineMaterial({ color: Math.random() * 16777215 });\n    };\n    LineSegments2.prototype = Object.assign(Object.create(THREE.Mesh.prototype), {\n        constructor: LineSegments2,\n        isLineSegments2: true,\n        computeLineDistances: function () {\n            var start = new THREE.Vector3();\n            var end = new THREE.Vector3();\n            return function computeLineDistances() {\n                var geometry = this.geometry;\n                var instanceStart = geometry.attributes.instanceStart;\n                var instanceEnd = geometry.attributes.instanceEnd;\n                var lineDistances = new Float32Array(2 * instanceStart.data.count);\n                for (var i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n                    start.fromBufferAttribute(instanceStart, i);\n                    end.fromBufferAttribute(instanceEnd, i);\n                    lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n                    lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\n                }\n                var instanceDistanceBuffer = new THREE.InstancedInterleavedBuffer(lineDistances, 2, 1);\n                geometry.setAttribute('instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n                geometry.setAttribute('instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n                return this;\n            };\n        }(),\n        raycast: function () {\n            var start = new THREE.Vector4();\n            var end = new THREE.Vector4();\n            var ssOrigin = new THREE.Vector4();\n            var ssOrigin3 = new THREE.Vector3();\n            var mvMatrix = new THREE.Matrix4();\n            var line = new THREE.Line3();\n            var closestPoint = new THREE.Vector3();\n            return function raycast(raycaster, intersects) {\n                if (raycaster.camera === null) {\n                    console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n                }\n                var ray = raycaster.ray;\n                var camera = raycaster.camera;\n                var projectionMatrix = camera.projectionMatrix;\n                var geometry = this.geometry;\n                var material = this.material;\n                var resolution = material.resolution;\n                var lineWidth = material.linewidth;\n                var instanceStart = geometry.attributes.instanceStart;\n                var instanceEnd = geometry.attributes.instanceEnd;\n                ray.at(1, ssOrigin);\n                ssOrigin.w = 1;\n                ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n                ssOrigin.applyMatrix4(projectionMatrix);\n                ssOrigin.multiplyScalar(1 / ssOrigin.w);\n                ssOrigin.x *= resolution.x / 2;\n                ssOrigin.y *= resolution.y / 2;\n                ssOrigin.z = 0;\n                ssOrigin3.copy(ssOrigin);\n                var matrixWorld = this.matrixWorld;\n                mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n                for (var i = 0, l = instanceStart.count; i < l; i++) {\n                    start.fromBufferAttribute(instanceStart, i);\n                    end.fromBufferAttribute(instanceEnd, i);\n                    start.w = 1;\n                    end.w = 1;\n                    start.applyMatrix4(mvMatrix);\n                    end.applyMatrix4(mvMatrix);\n                    start.applyMatrix4(projectionMatrix);\n                    end.applyMatrix4(projectionMatrix);\n                    start.multiplyScalar(1 / start.w);\n                    end.multiplyScalar(1 / end.w);\n                    var isBehindCameraNear = start.z < -1 && end.z < -1;\n                    var isPastCameraFar = start.z > 1 && end.z > 1;\n                    if (isBehindCameraNear || isPastCameraFar) {\n                        continue;\n                    }\n                    start.x *= resolution.x / 2;\n                    start.y *= resolution.y / 2;\n                    end.x *= resolution.x / 2;\n                    end.y *= resolution.y / 2;\n                    line.start.copy(start);\n                    line.start.z = 0;\n                    line.end.copy(end);\n                    line.end.z = 0;\n                    var param = line.closestPointToPointParameter(ssOrigin3, true);\n                    line.at(param, closestPoint);\n                    var zPos = THREE.MathUtils.lerp(start.z, end.z, param);\n                    var isInClipSpace = zPos >= -1 && zPos <= 1;\n                    var isInside = ssOrigin3.distanceTo(closestPoint) < lineWidth * 0.5;\n                    if (isInClipSpace && isInside) {\n                        line.start.fromBufferAttribute(instanceStart, i);\n                        line.end.fromBufferAttribute(instanceEnd, i);\n                        line.start.applyMatrix4(matrixWorld);\n                        line.end.applyMatrix4(matrixWorld);\n                        var pointOnLine = new THREE.Vector3();\n                        var point = new THREE.Vector3();\n                        ray.distanceSqToSegment(line.start, line.end, point, pointOnLine);\n                        intersects.push({\n                            point: point,\n                            pointOnLine: pointOnLine,\n                            distance: ray.origin.distanceTo(point),\n                            object: this,\n                            face: null,\n                            faceIndex: i,\n                            uv: null,\n                            uv2: null\n                        });\n                    }\n                }\n            };\n        }()\n    });\n    return LineSegments2;\n});"]}