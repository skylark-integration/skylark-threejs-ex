{"version":3,"sources":["lines/Wireframe.js"],"names":["ddefine","THREE","start","end","Wireframe","geometry","material","Mesh","call","this","type","undefined","LineSegmentsGeometry","LineMaterial","color","Math","random","prototype","Object","assign","create","constructor","isWireframe","computeLineDistances","Vector3","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","data","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","InstancedInterleavedBuffer","setAttribute","InterleavedBufferAttribute"],"mappings":";;;;;;;AAAAA,SACC,kBACA,yBACA,kBACC,SAASC,GAuBe,IAEnBC,EACAC,EAiCN,OArDAF,EAAMG,UAAY,SAAWC,EAAUC,GAEtCL,EAAMM,KAAKC,KAAMC,MAEjBA,KAAKC,KAAO,YAEZD,KAAKJ,cAAwBM,IAAbN,EAAyBA,EAAW,IAAIJ,EAAMW,qBAC9DH,KAAKH,cAAwBK,IAAbL,EAAyBA,EAAW,IAAIL,EAAMY,cAAgBC,MAAuB,SAAhBC,KAAKC,YAI3Ff,EAAMG,UAAUa,UAAYC,OAAOC,OAAQD,OAAOE,OAAQnB,EAAMM,KAAKU,YAEpEI,YAAapB,EAAMG,UAEnBkB,aAAa,EAEbC,sBAEKrB,EAAQ,IAAID,EAAMuB,QAClBrB,EAAM,IAAIF,EAAMuB,QAEb,WAQN,IANA,IAAInB,EAAWI,KAAKJ,SAEhBoB,EAAgBpB,EAASqB,WAAWD,cACpCE,EAActB,EAASqB,WAAWC,YAClCC,EAAgB,IAAIC,aAAc,EAAIJ,EAAcK,KAAKC,OAEnDC,EAAI,EAAGC,EAAI,EAAGC,EAAIT,EAAcK,KAAKC,MAAOC,EAAIE,EAAGF,IAAMC,GAAK,EAEvE/B,EAAMiC,oBAAqBV,EAAeO,GAC1C7B,EAAIgC,oBAAqBR,EAAaK,GAEtCJ,EAAeK,GAAc,IAANA,EAAY,EAAIL,EAAeK,EAAI,GAC1DL,EAAeK,EAAI,GAAML,EAAeK,GAAM/B,EAAMkC,WAAYjC,GAIjE,IAAIkC,EAAyB,IAAIpC,EAAMqC,2BAA4BV,EAAe,EAAG,GAKrF,OAHAvB,EAASkC,aAAc,wBAAyB,IAAItC,EAAMuC,2BAA4BH,EAAwB,EAAG,IACjHhC,EAASkC,aAAc,sBAAuB,IAAItC,EAAMuC,2BAA4BH,EAAwB,EAAG,IAExG5B,SAQHR,EAAMG","file":"../../lines/Wireframe.js","sourcesContent":["ddefine([\n\t\"skylark-threejs\",\n\t\"./LineSegmentsGeometry\",\n\t\"./LineMaterial\"\n],function(THREE){\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t */\n\n\tTHREE.Wireframe = function ( geometry, material ) {\n\n\t\tTHREE.Mesh.call( this );\n\n\t\tthis.type = 'Wireframe';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.LineSegmentsGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.LineMaterial( { color: Math.random() * 0xffffff } );\n\n\t};\n\n\tTHREE.Wireframe.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\n\t\tconstructor: THREE.Wireframe,\n\n\t\tisWireframe: true,\n\n\t\tcomputeLineDistances: ( function () { // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n\n\t\t\tvar start = new THREE.Vector3();\n\t\t\tvar end = new THREE.Vector3();\n\n\t\t\treturn function computeLineDistances() {\n\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tvar instanceStart = geometry.attributes.instanceStart;\n\t\t\t\tvar instanceEnd = geometry.attributes.instanceEnd;\n\t\t\t\tvar lineDistances = new Float32Array( 2 * instanceStart.data.count );\n\n\t\t\t\tfor ( var i = 0, j = 0, l = instanceStart.data.count; i < l; i ++, j += 2 ) {\n\n\t\t\t\t\tstart.fromBufferAttribute( instanceStart, i );\n\t\t\t\t\tend.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + start.distanceTo( end );\n\n\t\t\t\t}\n\n\t\t\t\tvar instanceDistanceBuffer = new THREE.InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\t\t\tgeometry.setAttribute( 'instanceDistanceStart', new THREE.InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\t\t\tgeometry.setAttribute( 'instanceDistanceEnd', new THREE.InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}() )\n\n\t} );\n\t\n\treturn THREE.Wireframe;\n});\n"]}