{"version":3,"sources":["exporters/OBJExporter.js"],"names":["define","THREE","OBJExporter","prototype","constructor","parse","object","i","j","k","l","m","output","indexVertex","indexVertexUvs","indexNormals","vertex","Vector3","normal","uv","Vector2","face","traverse","child","Mesh","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","Matrix3","Geometry","BufferGeometry","setFromObject","vertices","getAttribute","normals","uvs","indices","getIndex","name","material","undefined","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","join","console","warn","parseMesh","Line","line","type","parseLine"],"mappings":"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","file":"../../exporters/OBJExporter.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.OBJExporter = function () {};\n\n\tTHREE.OBJExporter.prototype = {\n\n\t\tconstructor: THREE.OBJExporter,\n\n\t\tparse: function ( object ) {\n\n\t\t\tvar output = '';\n\n\t\t\tvar indexVertex = 0;\n\t\t\tvar indexVertexUvs = 0;\n\t\t\tvar indexNormals = 0;\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvar normal = new THREE.Vector3();\n\t\t\tvar uv = new THREE.Vector2();\n\n\t\t\tvar i, j, k, l, m, face = [];\n\n\t\t\tvar parseMesh = function ( mesh ) {\n\n\t\t\t\tvar nbVertex = 0;\n\t\t\t\tvar nbNormals = 0;\n\t\t\t\tvar nbVertexUvs = 0;\n\n\t\t\t\tvar geometry = mesh.geometry;\n\n\t\t\t\tvar normalMatrixWorld = new THREE.Matrix3();\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tgeometry = new THREE.BufferGeometry().setFromObject( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t// shortcuts\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\t\t\t\t\tvar normals = geometry.getAttribute( 'normal' );\n\t\t\t\t\tvar uvs = geometry.getAttribute( 'uv' );\n\t\t\t\t\tvar indices = geometry.getIndex();\n\n\t\t\t\t\t// name of the mesh object\n\t\t\t\t\toutput += 'o ' + mesh.name + '\\n';\n\n\t\t\t\t\t// name of the mesh material\n\t\t\t\t\tif ( mesh.material && mesh.material.name ) {\n\n\t\t\t\t\t\toutput += 'usemtl ' + mesh.material.name + '\\n';\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertices\n\n\t\t\t\t\tif ( vertices !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.count; i < l; i ++, nbVertex ++ ) {\n\n\t\t\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\t\t\t// transfrom the vertex to world space\n\t\t\t\t\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\n\t\t\t\t\t\t\t// transform the vertex to export format\n\t\t\t\t\t\t\toutput += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = uvs.count; i < l; i ++, nbVertexUvs ++ ) {\n\n\t\t\t\t\t\t\tuv.x = uvs.getX( i );\n\t\t\t\t\t\t\tuv.y = uvs.getY( i );\n\n\t\t\t\t\t\t\t// transform the uv to export format\n\t\t\t\t\t\t\toutput += 'vt ' + uv.x + ' ' + uv.y + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// normals\n\n\t\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\t\tnormalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\t\t\t\tfor ( i = 0, l = normals.count; i < l; i ++, nbNormals ++ ) {\n\n\t\t\t\t\t\t\tnormal.x = normals.getX( i );\n\t\t\t\t\t\t\tnormal.y = normals.getY( i );\n\t\t\t\t\t\t\tnormal.z = normals.getZ( i );\n\n\t\t\t\t\t\t\t// transfrom the normal to world space\n\t\t\t\t\t\t\tnormal.applyMatrix3( normalMatrixWorld ).normalize();\n\n\t\t\t\t\t\t\t// transform the normal to export format\n\t\t\t\t\t\t\toutput += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif ( indices !== null ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = indices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tfor ( m = 0; m < 3; m ++ ) {\n\n\t\t\t\t\t\t\t\tj = indices.getX( i + m ) + 1;\n\n\t\t\t\t\t\t\t\tface[ m ] = ( indexVertex + j ) + ( normals || uvs ? '/' + ( uvs ? ( indexVertexUvs + j ) : '' ) + ( normals ? '/' + ( indexNormals + j ) : '' ) : '' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transform the face to export format\n\t\t\t\t\t\t\toutput += 'f ' + face.join( ' ' ) + \"\\n\";\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\tfor ( m = 0; m < 3; m ++ ) {\n\n\t\t\t\t\t\t\t\tj = i + m + 1;\n\n\t\t\t\t\t\t\t\tface[ m ] = ( indexVertex + j ) + ( normals || uvs ? '/' + ( uvs ? ( indexVertexUvs + j ) : '' ) + ( normals ? '/' + ( indexNormals + j ) : '' ) : '' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transform the face to export format\n\t\t\t\t\t\t\toutput += 'f ' + face.join( ' ' ) + \"\\n\";\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry );\n\n\t\t\t\t}\n\n\t\t\t\t// update index\n\t\t\t\tindexVertex += nbVertex;\n\t\t\t\tindexVertexUvs += nbVertexUvs;\n\t\t\t\tindexNormals += nbNormals;\n\n\t\t\t};\n\n\t\t\tvar parseLine = function ( line ) {\n\n\t\t\t\tvar nbVertex = 0;\n\n\t\t\t\tvar geometry = line.geometry;\n\t\t\t\tvar type = line.type;\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tgeometry = new THREE.BufferGeometry().setFromObject( line );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t// shortcuts\n\t\t\t\t\tvar vertices = geometry.getAttribute( 'position' );\n\n\t\t\t\t\t// name of the line object\n\t\t\t\t\toutput += 'o ' + line.name + '\\n';\n\n\t\t\t\t\tif ( vertices !== undefined ) {\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.count; i < l; i ++, nbVertex ++ ) {\n\n\t\t\t\t\t\t\tvertex.x = vertices.getX( i );\n\t\t\t\t\t\t\tvertex.y = vertices.getY( i );\n\t\t\t\t\t\t\tvertex.z = vertices.getZ( i );\n\n\t\t\t\t\t\t\t// transfrom the vertex to world space\n\t\t\t\t\t\t\tvertex.applyMatrix4( line.matrixWorld );\n\n\t\t\t\t\t\t\t// transform the vertex to export format\n\t\t\t\t\t\t\toutput += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type === 'Line' ) {\n\n\t\t\t\t\t\toutput += 'l ';\n\n\t\t\t\t\t\tfor ( j = 1, l = vertices.count; j <= l; j ++ ) {\n\n\t\t\t\t\t\t\toutput += ( indexVertex + j ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput += '\\n';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type === 'LineSegments' ) {\n\n\t\t\t\t\t\tfor ( j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1 ) {\n\n\t\t\t\t\t\t\toutput += 'l ' + ( indexVertex + j ) + ' ' + ( indexVertex + k ) + '\\n';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJExporter.parseLine(): geometry type unsupported', geometry );\n\n\t\t\t\t}\n\n\t\t\t\t// update index\n\t\t\t\tindexVertex += nbVertex;\n\n\t\t\t};\n\n\t\t\tobject.traverse( function ( child ) {\n\n\t\t\t\tif ( child instanceof THREE.Mesh ) {\n\n\t\t\t\t\tparseMesh( child );\n\n\t\t\t\t}\n\n\t\t\t\tif ( child instanceof THREE.Line ) {\n\n\t\t\t\t\tparseLine( child );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn output;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.OBJExporter;\n});\n"]}