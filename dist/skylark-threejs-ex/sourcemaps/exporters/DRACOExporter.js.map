{"version":3,"sources":["exporters/DRACOExporter.js"],"names":["define","THREE","threex","DRACOExporter","prototype","constructor","parse","geometry","options","undefined","DracoEncoderModule","Error","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","dracoEncoder","encoder","Encoder","builder","MeshBuilder","mesh","Mesh","isGeometry","bufferGeometry","BufferGeometry","fromGeometry","isBufferGeometry","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","Uint32Array","Uint16Array","i","length","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue","MESH_SEQUENTIAL_ENCODING","POINT_CLOUD","TRIANGULAR_MESH","INVALID","GENERIC","exporters"],"mappings":"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","file":"../../exporters/DRACOExporter.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var DRACOExporter = function () {\r\n    };\r\n    DRACOExporter.prototype = {\r\n        constructor: DRACOExporter,\r\n        parse: function (geometry, options) {\r\n            if (DracoEncoderModule === undefined) {\r\n                throw new Error('THREE.DRACOExporter: required the draco_decoder to work.');\r\n            }\r\n            if (options === undefined) {\r\n                options = {\r\n                    decodeSpeed: 5,\r\n                    encodeSpeed: 5,\r\n                    encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\r\n                    quantization: [\r\n                        16,\r\n                        8,\r\n                        8,\r\n                        8,\r\n                        8\r\n                    ],\r\n                    exportUvs: true,\r\n                    exportNormals: true,\r\n                    exportColor: false\r\n                };\r\n            }\r\n            var dracoEncoder = DracoEncoderModule();\r\n            var encoder = new dracoEncoder.Encoder();\r\n            var builder = new dracoEncoder.MeshBuilder();\r\n            var mesh = new dracoEncoder.Mesh();\r\n            if (geometry.isGeometry === true) {\r\n                var bufferGeometry = new THREE.BufferGeometry();\r\n                bufferGeometry.fromGeometry(geometry);\r\n                geometry = bufferGeometry;\r\n            }\r\n            if (geometry.isBufferGeometry !== true) {\r\n                throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.Geometry or BufferGeometry instance.');\r\n            }\r\n            var vertices = geometry.getAttribute('position');\r\n            builder.AddFloatAttributeToMesh(mesh, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\r\n            var faces = geometry.getIndex();\r\n            if (faces !== null) {\r\n                builder.AddFacesToMesh(mesh, faces.count, faces.array);\r\n            } else {\r\n                var faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\r\n                for (var i = 0; i < faces.length; i++) {\r\n                    faces[i] = i;\r\n                }\r\n                builder.AddFacesToMesh(mesh, vertices.count, faces);\r\n            }\r\n            if (options.exportNormals === true) {\r\n                var normals = geometry.getAttribute('normal');\r\n                if (normals !== undefined) {\r\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\r\n                }\r\n            }\r\n            if (options.exportUvs === true) {\r\n                var uvs = geometry.getAttribute('uv');\r\n                if (uvs !== undefined) {\r\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\r\n                }\r\n            }\r\n            if (options.exportColor === true) {\r\n                var colors = geometry.getAttribute('color');\r\n                if (colors !== undefined) {\r\n                    builder.AddFloatAttributeToMesh(mesh, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\r\n                }\r\n            }\r\n            var encodedData = new dracoEncoder.DracoInt8Array();\r\n            encoder.SetSpeedOptions(options.encodeSpeed || 5, options.decodeSpeed || 5);\r\n            if (options.encoderMethod !== undefined) {\r\n                encoder.SetEncodingMethod(options.encoderMethod);\r\n            }\r\n            if (options.quantization !== undefined) {\r\n                for (var i = 0; i < 5; i++) {\r\n                    if (options.quantization[i] !== undefined) {\r\n                        encoder.SetAttributeQuantization(i, options.quantization[i]);\r\n                    }\r\n                }\r\n            }\r\n            var length = encoder.EncodeMeshToDracoBuffer(mesh, encodedData);\r\n            dracoEncoder.destroy(mesh);\r\n            if (length === 0) {\r\n                throw new Error('THREE.DRACOExporter: Draco encoding failed.');\r\n            }\r\n            var outputData = new Int8Array(new ArrayBuffer(length));\r\n            for (var i = 0; i < length; i++) {\r\n                outputData[i] = encodedData.GetValue(i);\r\n            }\r\n            dracoEncoder.destroy(encodedData);\r\n            dracoEncoder.destroy(encoder);\r\n            dracoEncoder.destroy(builder);\r\n            return outputData;\r\n        }\r\n    };\r\n    DRACOExporter.MESH_EDGEBREAKER_ENCODING = 1;\r\n    DRACOExporter.MESH_SEQUENTIAL_ENCODING = 0;\r\n    DRACOExporter.POINT_CLOUD = 0;\r\n    DRACOExporter.TRIANGULAR_MESH = 1;\r\n    DRACOExporter.INVALID = -1;\r\n    DRACOExporter.POSITION = 0;\r\n    DRACOExporter.NORMAL = 1;\r\n    DRACOExporter.COLOR = 2;\r\n    DRACOExporter.TEX_COORD = 3;\r\n    DRACOExporter.GENERIC = 4;\r\n\r\n    return threex.exporters.DRACOExporter = DRACOExporter;\r\n});"]}