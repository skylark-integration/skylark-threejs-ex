{"version":3,"sources":["exporters/STLExporter.js"],"names":["define","THREE","threex","vector","normalMatrixWorld","STLExporter","prototype","constructor","parse","Vector3","Matrix3","scene","options","undefined","binary","objects","triangles","traverse","object","isMesh","geometry","isBufferGeometry","Geometry","fromBufferGeometry","isGeometry","faces","length","push","matrixWorld","offset","arrayBuffer","ArrayBuffer","output","DataView","setUint32","i","il","vertices","getNormalMatrix","j","jl","face","copy","normal","applyMatrix3","normalize","setFloat32","x","y","z","indices","a","b","c","k","applyMatrix4","setUint16","exporters"],"mappings":"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","file":"../../exporters/STLExporter.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var STLExporter = function () {\n    };\n    STLExporter.prototype = {\n        constructor: STLExporter,\n        parse: function () {\n            var vector = new THREE.Vector3();\n            var normalMatrixWorld = new THREE.Matrix3();\n            return function parse(scene, options) {\n                if (options === undefined)\n                    options = {};\n                var binary = options.binary !== undefined ? options.binary : false;\n                var objects = [];\n                var triangles = 0;\n                scene.traverse(function (object) {\n                    if (object.isMesh) {\n                        var geometry = object.geometry;\n                        if (geometry.isBufferGeometry) {\n                            geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n                        }\n                        if (geometry.isGeometry) {\n                            triangles += geometry.faces.length;\n                            objects.push({\n                                geometry: geometry,\n                                matrixWorld: object.matrixWorld\n                            });\n                        }\n                    }\n                });\n                if (binary) {\n                    var offset = 80;\n                    var bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n                    var arrayBuffer = new ArrayBuffer(bufferLength);\n                    var output = new DataView(arrayBuffer);\n                    output.setUint32(offset, triangles, true);\n                    offset += 4;\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output.setFloat32(offset, vector.x, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.y, true);\n                            offset += 4;\n                            output.setFloat32(offset, vector.z, true);\n                            offset += 4;\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output.setFloat32(offset, vector.x, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.y, true);\n                                offset += 4;\n                                output.setFloat32(offset, vector.z, true);\n                                offset += 4;\n                            }\n                            output.setUint16(offset, 0, true);\n                            offset += 2;\n                        }\n                    }\n                    return output;\n                } else {\n                    var output = '';\n                    output += 'solid exported\\n';\n                    for (var i = 0, il = objects.length; i < il; i++) {\n                        var object = objects[i];\n                        var vertices = object.geometry.vertices;\n                        var faces = object.geometry.faces;\n                        var matrixWorld = object.matrixWorld;\n                        normalMatrixWorld.getNormalMatrix(matrixWorld);\n                        for (var j = 0, jl = faces.length; j < jl; j++) {\n                            var face = faces[j];\n                            vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n                            output += '\\tfacet normal ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            output += '\\t\\touter loop\\n';\n                            var indices = [\n                                face.a,\n                                face.b,\n                                face.c\n                            ];\n                            for (var k = 0; k < 3; k++) {\n                                vector.copy(vertices[indices[k]]).applyMatrix4(matrixWorld);\n                                output += '\\t\\t\\tvertex ' + vector.x + ' ' + vector.y + ' ' + vector.z + '\\n';\n                            }\n                            output += '\\t\\tendloop\\n';\n                            output += '\\tendfacet\\n';\n                        }\n                    }\n                    output += 'endsolid exported\\n';\n                    return output;\n                }\n            };\n        }()\n    };\n    return threex.exporters.STLExporter = STLExporter;\n});"]}