{"version":3,"sources":["exporters/PLYExporter.js"],"names":["define","THREE","threex","PLYExporter","prototype","constructor","parse","object","onDone","options","traverseMeshes","cb","traverse","child","isMesh","mesh","geometry","isGeometry","geomToBufferGeom","get","isBufferGeometry","undefined","getAttribute","console","warn","excludeAttributes","Object","assign","binary","littleEndian","WeakMap","includeNormals","includeColors","includeUVs","vertexCount","faceCount","bufferGeometry","BufferGeometry","setFromObject","set","vertices","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","header","vertex","Vector3","normalMatrixWorld","Matrix3","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","vOffset","fOffset","writtenVertices","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame","exporters"],"mappings":"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","file":"../../exporters/PLYExporter.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var PLYExporter = function () {\r\n    };\r\n    PLYExporter.prototype = {\r\n        constructor: PLYExporter,\r\n        parse: function (object, onDone, options) {\r\n            if (onDone && typeof onDone === 'object') {\r\n                console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\r\n                options = onDone;\r\n                onDone = undefined;\r\n            }\r\n            function traverseMeshes(cb) {\r\n                object.traverse(function (child) {\r\n                    if (child.isMesh === true) {\r\n                        var mesh = child;\r\n                        var geometry = mesh.geometry;\r\n                        if (geometry.isGeometry === true) {\r\n                            geometry = geomToBufferGeom.get(geometry);\r\n                        }\r\n                        if (geometry.isBufferGeometry === true) {\r\n                            if (geometry.getAttribute('position') !== undefined) {\r\n                                cb(mesh, geometry);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            var defaultOptions = {\r\n                binary: false,\r\n                excludeAttributes: [],\r\n                littleEndian: false\r\n            };\r\n            options = Object.assign(defaultOptions, options);\r\n            var excludeAttributes = options.excludeAttributes;\r\n            var geomToBufferGeom = new WeakMap();\r\n            var includeNormals = false;\r\n            var includeColors = false;\r\n            var includeUVs = false;\r\n            var vertexCount = 0;\r\n            var faceCount = 0;\r\n            object.traverse(function (child) {\r\n                if (child.isMesh === true) {\r\n                    var mesh = child;\r\n                    var geometry = mesh.geometry;\r\n                    if (geometry.isGeometry === true) {\r\n                        var bufferGeometry = geomToBufferGeom.get(geometry) || new THREE.BufferGeometry().setFromObject(mesh);\r\n                        geomToBufferGeom.set(geometry, bufferGeometry);\r\n                        geometry = bufferGeometry;\r\n                    }\r\n                    if (geometry.isBufferGeometry === true) {\r\n                        var vertices = geometry.getAttribute('position');\r\n                        var normals = geometry.getAttribute('normal');\r\n                        var uvs = geometry.getAttribute('uv');\r\n                        var colors = geometry.getAttribute('color');\r\n                        var indices = geometry.getIndex();\r\n                        if (vertices === undefined) {\r\n                            return;\r\n                        }\r\n                        vertexCount += vertices.count;\r\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\r\n                        if (normals !== undefined)\r\n                            includeNormals = true;\r\n                        if (uvs !== undefined)\r\n                            includeUVs = true;\r\n                        if (colors !== undefined)\r\n                            includeColors = true;\r\n                    }\r\n                }\r\n            });\r\n            var includeIndices = excludeAttributes.indexOf('index') === -1;\r\n            includeNormals = includeNormals && excludeAttributes.indexOf('normal') === -1;\r\n            includeColors = includeColors && excludeAttributes.indexOf('color') === -1;\r\n            includeUVs = includeUVs && excludeAttributes.indexOf('uv') === -1;\r\n            if (includeIndices && faceCount !== Math.floor(faceCount)) {\r\n                console.error('PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' + 'number of indices is not divisible by 3.');\r\n                return null;\r\n            }\r\n            var indexByteCount = 4;\r\n            var header = 'ply\\n' + `format ${ options.binary ? options.littleEndian ? 'binary_little_endian' : 'binary_big_endian' : 'ascii' } 1.0\\n` + `element vertex ${ vertexCount }\\n` + 'property float x\\n' + 'property float y\\n' + 'property float z\\n';\r\n            if (includeNormals === true) {\r\n                header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n';\r\n            }\r\n            if (includeUVs === true) {\r\n                header += 'property float s\\n' + 'property float t\\n';\r\n            }\r\n            if (includeColors === true) {\r\n                header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n';\r\n            }\r\n            if (includeIndices === true) {\r\n                header += `element face ${ faceCount }\\n` + `property list uchar int vertex_index\\n`;\r\n            }\r\n            header += 'end_header\\n';\r\n            var vertex = new THREE.Vector3();\r\n            var normalMatrixWorld = new THREE.Matrix3();\r\n            var result = null;\r\n            if (options.binary === true) {\r\n                var headerBin = new TextEncoder().encode(header);\r\n                var vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\r\n                var faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\r\n                var output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\r\n                new Uint8Array(output.buffer).set(headerBin, 0);\r\n                var vOffset = headerBin.length;\r\n                var fOffset = headerBin.length + vertexListLength;\r\n                var writtenVertices = 0;\r\n                traverseMeshes(function (mesh, geometry) {\r\n                    var vertices = geometry.getAttribute('position');\r\n                    var normals = geometry.getAttribute('normal');\r\n                    var uvs = geometry.getAttribute('uv');\r\n                    var colors = geometry.getAttribute('color');\r\n                    var indices = geometry.getIndex();\r\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\r\n                    for (var i = 0, l = vertices.count; i < l; i++) {\r\n                        vertex.x = vertices.getX(i);\r\n                        vertex.y = vertices.getY(i);\r\n                        vertex.z = vertices.getZ(i);\r\n                        vertex.applyMatrix4(mesh.matrixWorld);\r\n                        output.setFloat32(vOffset, vertex.x, options.littleEndian);\r\n                        vOffset += 4;\r\n                        output.setFloat32(vOffset, vertex.y, options.littleEndian);\r\n                        vOffset += 4;\r\n                        output.setFloat32(vOffset, vertex.z, options.littleEndian);\r\n                        vOffset += 4;\r\n                        if (includeNormals === true) {\r\n                            if (normals != null) {\r\n                                vertex.x = normals.getX(i);\r\n                                vertex.y = normals.getY(i);\r\n                                vertex.z = normals.getZ(i);\r\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\r\n                                output.setFloat32(vOffset, vertex.x, options.littleEndian);\r\n                                vOffset += 4;\r\n                                output.setFloat32(vOffset, vertex.y, options.littleEndian);\r\n                                vOffset += 4;\r\n                                output.setFloat32(vOffset, vertex.z, options.littleEndian);\r\n                                vOffset += 4;\r\n                            } else {\r\n                                output.setFloat32(vOffset, 0, options.littleEndian);\r\n                                vOffset += 4;\r\n                                output.setFloat32(vOffset, 0, options.littleEndian);\r\n                                vOffset += 4;\r\n                                output.setFloat32(vOffset, 0, options.littleEndian);\r\n                                vOffset += 4;\r\n                            }\r\n                        }\r\n                        if (includeUVs === true) {\r\n                            if (uvs != null) {\r\n                                output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\r\n                                vOffset += 4;\r\n                                output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\r\n                                vOffset += 4;\r\n                            } else if (includeUVs !== false) {\r\n                                output.setFloat32(vOffset, 0, options.littleEndian);\r\n                                vOffset += 4;\r\n                                output.setFloat32(vOffset, 0, options.littleEndian);\r\n                                vOffset += 4;\r\n                            }\r\n                        }\r\n                        if (includeColors === true) {\r\n                            if (colors != null) {\r\n                                output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\r\n                                vOffset += 1;\r\n                                output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\r\n                                vOffset += 1;\r\n                                output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\r\n                                vOffset += 1;\r\n                            } else {\r\n                                output.setUint8(vOffset, 255);\r\n                                vOffset += 1;\r\n                                output.setUint8(vOffset, 255);\r\n                                vOffset += 1;\r\n                                output.setUint8(vOffset, 255);\r\n                                vOffset += 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (includeIndices === true) {\r\n                        if (indices !== null) {\r\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\r\n                                output.setUint8(fOffset, 3);\r\n                                fOffset += 1;\r\n                                output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\r\n                                fOffset += indexByteCount;\r\n                                output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\r\n                                fOffset += indexByteCount;\r\n                                output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\r\n                                fOffset += indexByteCount;\r\n                            }\r\n                        } else {\r\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\r\n                                output.setUint8(fOffset, 3);\r\n                                fOffset += 1;\r\n                                output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\r\n                                fOffset += indexByteCount;\r\n                                output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\r\n                                fOffset += indexByteCount;\r\n                                output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\r\n                                fOffset += indexByteCount;\r\n                            }\r\n                        }\r\n                    }\r\n                    writtenVertices += vertices.count;\r\n                });\r\n                result = output.buffer;\r\n            } else {\r\n                var writtenVertices = 0;\r\n                var vertexList = '';\r\n                var faceList = '';\r\n                traverseMeshes(function (mesh, geometry) {\r\n                    var vertices = geometry.getAttribute('position');\r\n                    var normals = geometry.getAttribute('normal');\r\n                    var uvs = geometry.getAttribute('uv');\r\n                    var colors = geometry.getAttribute('color');\r\n                    var indices = geometry.getIndex();\r\n                    normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\r\n                    for (var i = 0, l = vertices.count; i < l; i++) {\r\n                        vertex.x = vertices.getX(i);\r\n                        vertex.y = vertices.getY(i);\r\n                        vertex.z = vertices.getZ(i);\r\n                        vertex.applyMatrix4(mesh.matrixWorld);\r\n                        var line = vertex.x + ' ' + vertex.y + ' ' + vertex.z;\r\n                        if (includeNormals === true) {\r\n                            if (normals != null) {\r\n                                vertex.x = normals.getX(i);\r\n                                vertex.y = normals.getY(i);\r\n                                vertex.z = normals.getZ(i);\r\n                                vertex.applyMatrix3(normalMatrixWorld).normalize();\r\n                                line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z;\r\n                            } else {\r\n                                line += ' 0 0 0';\r\n                            }\r\n                        }\r\n                        if (includeUVs === true) {\r\n                            if (uvs != null) {\r\n                                line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i);\r\n                            } else if (includeUVs !== false) {\r\n                                line += ' 0 0';\r\n                            }\r\n                        }\r\n                        if (includeColors === true) {\r\n                            if (colors != null) {\r\n                                line += ' ' + Math.floor(colors.getX(i) * 255) + ' ' + Math.floor(colors.getY(i) * 255) + ' ' + Math.floor(colors.getZ(i) * 255);\r\n                            } else {\r\n                                line += ' 255 255 255';\r\n                            }\r\n                        }\r\n                        vertexList += line + '\\n';\r\n                    }\r\n                    if (includeIndices === true) {\r\n                        if (indices !== null) {\r\n                            for (var i = 0, l = indices.count; i < l; i += 3) {\r\n                                faceList += `3 ${ indices.getX(i + 0) + writtenVertices }`;\r\n                                faceList += ` ${ indices.getX(i + 1) + writtenVertices }`;\r\n                                faceList += ` ${ indices.getX(i + 2) + writtenVertices }\\n`;\r\n                            }\r\n                        } else {\r\n                            for (var i = 0, l = vertices.count; i < l; i += 3) {\r\n                                faceList += `3 ${ writtenVertices + i } ${ writtenVertices + i + 1 } ${ writtenVertices + i + 2 }\\n`;\r\n                            }\r\n                        }\r\n                        faceCount += indices ? indices.count / 3 : vertices.count / 3;\r\n                    }\r\n                    writtenVertices += vertices.count;\r\n                });\r\n                result = `${ header }${ vertexList }${ includeIndices ? `${ faceList }\\n` : '\\n' }`;\r\n            }\r\n            if (typeof onDone === 'function')\r\n                requestAnimationFrame(() => onDone(result));\r\n            return result;\r\n        }\r\n    };\r\n    \r\n    return threex.exporters.PLYExporter = PLYExporter;\r\n});"]}