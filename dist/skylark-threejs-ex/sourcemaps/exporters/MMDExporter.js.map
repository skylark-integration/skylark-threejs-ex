{"version":3,"sources":["exporters/MMDExporter.js"],"names":["define","THREE","MMDParser","u2sTable","this","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","slice","toStringsFromArray","array","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","poseSkin","clone","pose","getBindBones","position","Vector3","quaternion","Quaternion","quaternion2","matrix","Matrix4","name","replace","bone","bone2","undefined","userData","ik","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","str","table","CharsetEncoder","s2uTable","keys","Object","key","value","parseInt","code","charCodeAt","Uint8Array","unicodeToShiftjis"],"mappings":"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","file":"../../exporters/MMDExporter.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../utils/mmdparser'\n], function (THREE, MMDParser) {\n    'use strict';\n    var MMDExporter = function () {\n        var u2sTable;\n        function unicodeToShiftjis(str) {\n            if (u2sTable === undefined) {\n                var encoder = new MMDParser.CharsetEncoder();\n                var table = encoder.s2uTable;\n                u2sTable = {};\n                var keys = Object.keys(table);\n                for (var i = 0, il = keys.length; i < il; i++) {\n                    var key = keys[i];\n                    var value = table[key];\n                    key = parseInt(key);\n                    u2sTable[value] = key;\n                }\n            }\n            var array = [];\n            for (var i = 0, il = str.length; i < il; i++) {\n                var code = str.charCodeAt(i);\n                var value = u2sTable[code];\n                if (value === undefined) {\n                    throw 'cannot convert charcode 0x' + code.toString(16);\n                } else if (value > 255) {\n                    array.push(value >> 8 & 255);\n                    array.push(value & 255);\n                } else {\n                    array.push(value & 255);\n                }\n            }\n            return new Uint8Array(array);\n        }\n        function getBindBones(skin) {\n            var poseSkin = skin.clone();\n            poseSkin.pose();\n            return poseSkin.skeleton.bones;\n        }\n        this.parseVpd = function (skin, outputShiftJis, useOriginalBones) {\n            if (skin.isSkinnedMesh !== true) {\n                console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n                return null;\n            }\n            function toStringsFromNumber(num) {\n                if (Math.abs(num) < 0.000001)\n                    num = 0;\n                var a = num.toString();\n                if (a.indexOf('.') === -1) {\n                    a += '.';\n                }\n                a += '000000';\n                var index = a.indexOf('.');\n                var d = a.slice(0, index);\n                var p = a.slice(index + 1, index + 7);\n                return d + '.' + p;\n            }\n            function toStringsFromArray(array) {\n                var a = [];\n                for (var i = 0, il = array.length; i < il; i++) {\n                    a.push(toStringsFromNumber(array[i]));\n                }\n                return a.join(',');\n            }\n            skin.updateMatrixWorld(true);\n            var bones = skin.skeleton.bones;\n            var bones2 = getBindBones(skin);\n            var position = new THREE.Vector3();\n            var quaternion = new THREE.Quaternion();\n            var quaternion2 = new THREE.Quaternion();\n            var matrix = new THREE.Matrix4();\n            var array = [];\n            array.push('Vocaloid Pose Data file');\n            array.push('');\n            array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n            array.push(bones.length + ';');\n            array.push('');\n            for (var i = 0, il = bones.length; i < il; i++) {\n                var bone = bones[i];\n                var bone2 = bones2[i];\n                if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n                    matrix.fromArray(bone.userData.ik.originalMatrix);\n                } else {\n                    matrix.copy(bone.matrix);\n                }\n                position.setFromMatrixPosition(matrix);\n                quaternion.setFromRotationMatrix(matrix);\n                var pArray = position.sub(bone2.position).toArray();\n                var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n                pArray[2] = -pArray[2];\n                qArray[0] = -qArray[0];\n                qArray[1] = -qArray[1];\n                array.push('Bone' + i + '{' + bone.name);\n                array.push('  ' + toStringsFromArray(pArray) + ';');\n                array.push('  ' + toStringsFromArray(qArray) + ';');\n                array.push('}');\n                array.push('');\n            }\n            array.push('');\n            var lines = array.join('\\n');\n            return outputShiftJis === true ? unicodeToShiftjis(lines) : lines;\n        };\n    };\n    return MMDExporter;\n});"]}