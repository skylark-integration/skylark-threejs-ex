{"version":3,"sources":["controls/TransformControlsGizmo.js"],"names":["define","THREE","TransformControlsGizmo","Object3D","call","this","type","gizmoMaterial","MeshBasicMaterial","depthTest","depthWrite","transparent","side","DoubleSide","fog","gizmoLineMaterial","LineBasicMaterial","linewidth","matInvisible","clone","opacity","matHelper","matRed","color","set","matGreen","matBlue","matWhiteTransparent","matYellowTransparent","matCyanTransparent","matMagentaTransparent","matLineRed","matLineGreen","matLineBlue","matLineCyan","matLineMagenta","matLineYellow","matLineGray","matLineYellowTransparent","arrowGeometry","CylinderBufferGeometry","scaleHandleGeometry","BoxBufferGeometry","lineGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","geometry","CircleGeometry","radius","arc","vertices","i","push","Math","cos","PI","sin","gizmoTranslate","X","Mesh","Line","Y","Z","XYZ","OctahedronBufferGeometry","XY","PlaneBufferGeometry","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","gizmoRotate","E","XYZE","helperRotate","AXIS","pickerRotate","TorusBufferGeometry","SphereBufferGeometry","gizmoScale","XYZX","XYZY","XYZZ","pickerScale","helperScale","setupGizmo","gizmoMap","gizmo","name","length","object","position","rotation","scale","tag","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","Infinity","add","tempVector","Vector3","tempEuler","Euler","alignVector","zeroVector","lookAtMatrix","Matrix4","tempQuaternion","Quaternion","tempQuaternion2","identityQuaternion","unitX","unitY","unitZ","picker","helper","visible","updateMatrixWorld","space","mode","quaternion","worldQuaternion","handles","concat","children","handle","copy","worldPosition","eyeDistance","distanceTo","cameraPosition","multiplyScalar","size","abs","applyQuaternion","dot","eye","search","x","y","z","inverse","setFromRotationMatrix","lookAt","setFromAxisAngle","atan2","multiplyQuaternions","indexOf","showX","showY","showZ","material","_opacity","_color","enabled","axis","lerp","Color","split","some","worldPositionStart","setFromEuler","multiply","rotationAxis","dragging","worldQuaternionStart","sub","prototype","Object","assign","create","constructor","isTransformControlsGizmo"],"mappings":"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","file":"../../controls/TransformControlsGizmo.js","sourcesContent":["define([\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var TransformControlsGizmo = function () {\n        'use strict';\n        THREE.Object3D.call(this);\n        this.type = 'TransformControlsGizmo';\n        var gizmoMaterial = new THREE.MeshBasicMaterial({\n            depthTest: false,\n            depthWrite: false,\n            transparent: true,\n            side: THREE.DoubleSide,\n            fog: false\n        });\n        var gizmoLineMaterial = new THREE.LineBasicMaterial({\n            depthTest: false,\n            depthWrite: false,\n            transparent: true,\n            linewidth: 1,\n            fog: false\n        });\n        var matInvisible = gizmoMaterial.clone();\n        matInvisible.opacity = 0.15;\n        var matHelper = gizmoMaterial.clone();\n        matHelper.opacity = 0.33;\n        var matRed = gizmoMaterial.clone();\n        matRed.color.set(16711680);\n        var matGreen = gizmoMaterial.clone();\n        matGreen.color.set(65280);\n        var matBlue = gizmoMaterial.clone();\n        matBlue.color.set(255);\n        var matWhiteTransparent = gizmoMaterial.clone();\n        matWhiteTransparent.opacity = 0.25;\n        var matYellowTransparent = matWhiteTransparent.clone();\n        matYellowTransparent.color.set(16776960);\n        var matCyanTransparent = matWhiteTransparent.clone();\n        matCyanTransparent.color.set(65535);\n        var matMagentaTransparent = matWhiteTransparent.clone();\n        matMagentaTransparent.color.set(16711935);\n        var matYellow = gizmoMaterial.clone();\n        matYellow.color.set(16776960);\n        var matLineRed = gizmoLineMaterial.clone();\n        matLineRed.color.set(16711680);\n        var matLineGreen = gizmoLineMaterial.clone();\n        matLineGreen.color.set(65280);\n        var matLineBlue = gizmoLineMaterial.clone();\n        matLineBlue.color.set(255);\n        var matLineCyan = gizmoLineMaterial.clone();\n        matLineCyan.color.set(65535);\n        var matLineMagenta = gizmoLineMaterial.clone();\n        matLineMagenta.color.set(16711935);\n        var matLineYellow = gizmoLineMaterial.clone();\n        matLineYellow.color.set(16776960);\n        var matLineGray = gizmoLineMaterial.clone();\n        matLineGray.color.set(7895160);\n        var matLineYellowTransparent = matLineYellow.clone();\n        matLineYellowTransparent.opacity = 0.25;\n        var arrowGeometry = new THREE.CylinderBufferGeometry(0, 0.05, 0.2, 12, 1, false);\n        var scaleHandleGeometry = new THREE.BoxBufferGeometry(0.125, 0.125, 0.125);\n        var lineGeometry = new THREE.BufferGeometry();\n        lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute([\n            0,\n            0,\n            0,\n            1,\n            0,\n            0\n        ], 3));\n        var CircleGeometry = function (radius, arc) {\n            var geometry = new THREE.BufferGeometry();\n            var vertices = [];\n            for (var i = 0; i <= 64 * arc; ++i) {\n                vertices.push(0, Math.cos(i / 32 * Math.PI) * radius, Math.sin(i / 32 * Math.PI) * radius);\n            }\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n            return geometry;\n        };\n        var TranslateHelperGeometry = function () {\n            var geometry = new THREE.BufferGeometry();\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute([\n                0,\n                0,\n                0,\n                1,\n                1,\n                1\n            ], 3));\n            return geometry;\n        };\n        var gizmoTranslate = {\n            X: [\n                [\n                    new THREE.Mesh(arrowGeometry, matRed),\n                    [\n                        1,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ],\n                    null,\n                    'fwd'\n                ],\n                [\n                    new THREE.Mesh(arrowGeometry, matRed),\n                    [\n                        1,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    null,\n                    'bwd'\n                ],\n                [new THREE.Line(lineGeometry, matLineRed)]\n            ],\n            Y: [\n                [\n                    new THREE.Mesh(arrowGeometry, matGreen),\n                    [\n                        0,\n                        1,\n                        0\n                    ],\n                    null,\n                    null,\n                    'fwd'\n                ],\n                [\n                    new THREE.Mesh(arrowGeometry, matGreen),\n                    [\n                        0,\n                        1,\n                        0\n                    ],\n                    [\n                        Math.PI,\n                        0,\n                        0\n                    ],\n                    null,\n                    'bwd'\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineGreen),\n                    null,\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new THREE.Mesh(arrowGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        1\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ],\n                    null,\n                    'fwd'\n                ],\n                [\n                    new THREE.Mesh(arrowGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        1\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ],\n                    null,\n                    'bwd'\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineBlue),\n                    null,\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            XYZ: [[\n                    new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.1, 0), matWhiteTransparent.clone()),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0\n                    ]\n                ]],\n            XY: [\n                [\n                    new THREE.Mesh(new THREE.PlaneBufferGeometry(0.295, 0.295), matYellowTransparent.clone()),\n                    [\n                        0.15,\n                        0.15,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineYellow),\n                    [\n                        0.18,\n                        0.3,\n                        0\n                    ],\n                    null,\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineYellow),\n                    [\n                        0.3,\n                        0.18,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            YZ: [\n                [\n                    new THREE.Mesh(new THREE.PlaneBufferGeometry(0.295, 0.295), matCyanTransparent.clone()),\n                    [\n                        0,\n                        0.15,\n                        0.15\n                    ],\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineCyan),\n                    [\n                        0,\n                        0.18,\n                        0.3\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineCyan),\n                    [\n                        0,\n                        0.3,\n                        0.18\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            XZ: [\n                [\n                    new THREE.Mesh(new THREE.PlaneBufferGeometry(0.295, 0.295), matMagentaTransparent.clone()),\n                    [\n                        0.15,\n                        0,\n                        0.15\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineMagenta),\n                    [\n                        0.18,\n                        0,\n                        0.3\n                    ],\n                    null,\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineMagenta),\n                    [\n                        0.3,\n                        0,\n                        0.18\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ]\n            ]\n        };\n        var pickerTranslate = {\n            X: [[\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), matInvisible),\n                    [\n                        0.6,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ]],\n            Y: [[\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), matInvisible),\n                    [\n                        0,\n                        0.6,\n                        0\n                    ]\n                ]],\n            Z: [[\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), matInvisible),\n                    [\n                        0,\n                        0,\n                        0.6\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]],\n            XYZ: [[new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.2, 0), matInvisible)]],\n            XY: [[\n                    new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), matInvisible),\n                    [\n                        0.2,\n                        0.2,\n                        0\n                    ]\n                ]],\n            YZ: [[\n                    new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), matInvisible),\n                    [\n                        0,\n                        0.2,\n                        0.2\n                    ],\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]],\n            XZ: [[\n                    new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), matInvisible),\n                    [\n                        0.2,\n                        0,\n                        0.2\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]]\n        };\n        var helperTranslate = {\n            START: [[\n                    new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.01, 2), matHelper),\n                    null,\n                    null,\n                    null,\n                    'helper'\n                ]],\n            END: [[\n                    new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.01, 2), matHelper),\n                    null,\n                    null,\n                    null,\n                    'helper'\n                ]],\n            DELTA: [[\n                    new THREE.Line(TranslateHelperGeometry(), matHelper),\n                    null,\n                    null,\n                    null,\n                    'helper'\n                ]],\n            X: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        -1000,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]],\n            Y: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        -1000,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]],\n            Z: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        0,\n                        -1000\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]]\n        };\n        var gizmoRotate = {\n            X: [\n                [new THREE.Line(CircleGeometry(1, 0.5), matLineRed)],\n                [\n                    new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.04, 0), matRed),\n                    [\n                        0,\n                        0,\n                        0.99\n                    ],\n                    null,\n                    [\n                        1,\n                        3,\n                        1\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new THREE.Line(CircleGeometry(1, 0.5), matLineGreen),\n                    null,\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.04, 0), matGreen),\n                    [\n                        0,\n                        0,\n                        0.99\n                    ],\n                    null,\n                    [\n                        3,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new THREE.Line(CircleGeometry(1, 0.5), matLineBlue),\n                    null,\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.04, 0), matBlue),\n                    [\n                        0.99,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1,\n                        3,\n                        1\n                    ]\n                ]\n            ],\n            E: [\n                [\n                    new THREE.Line(CircleGeometry(1.25, 1), matLineYellowTransparent),\n                    null,\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n                    [\n                        1.17,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ],\n                    [\n                        1,\n                        1,\n                        0.001\n                    ]\n                ],\n                [\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n                    [\n                        -1.17,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        1,\n                        1,\n                        0.001\n                    ]\n                ],\n                [\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n                    [\n                        0,\n                        -1.17,\n                        0\n                    ],\n                    [\n                        Math.PI,\n                        0,\n                        0\n                    ],\n                    [\n                        1,\n                        1,\n                        0.001\n                    ]\n                ],\n                [\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n                    [\n                        0,\n                        1.17,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        1,\n                        1,\n                        0.001\n                    ]\n                ]\n            ],\n            XYZE: [[\n                    new THREE.Line(CircleGeometry(1, 1), matLineGray),\n                    null,\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]]\n        };\n        var helperRotate = {\n            AXIS: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        -1000,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]]\n        };\n        var pickerRotate = {\n            X: [[\n                    new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.1, 4, 24), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        -Math.PI / 2\n                    ]\n                ]],\n            Y: [[\n                    new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.1, 4, 24), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]],\n            Z: [[\n                    new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.1, 4, 24), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ]],\n            E: [[new THREE.Mesh(new THREE.TorusBufferGeometry(1.25, 0.1, 2, 24), matInvisible)]],\n            XYZE: [[new THREE.Mesh(new THREE.SphereBufferGeometry(0.7, 10, 8), matInvisible)]]\n        };\n        var gizmoScale = {\n            X: [\n                [\n                    new THREE.Mesh(scaleHandleGeometry, matRed),\n                    [\n                        0.8,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineRed),\n                    null,\n                    null,\n                    [\n                        0.8,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new THREE.Mesh(scaleHandleGeometry, matGreen),\n                    [\n                        0,\n                        0.8,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineGreen),\n                    null,\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        0.8,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new THREE.Mesh(scaleHandleGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        0.8\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineBlue),\n                    null,\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        0.8,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            XY: [\n                [\n                    new THREE.Mesh(scaleHandleGeometry, matYellowTransparent),\n                    [\n                        0.85,\n                        0.85,\n                        0\n                    ],\n                    null,\n                    [\n                        2,\n                        2,\n                        0.2\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineYellow),\n                    [\n                        0.855,\n                        0.98,\n                        0\n                    ],\n                    null,\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineYellow),\n                    [\n                        0.98,\n                        0.855,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            YZ: [\n                [\n                    new THREE.Mesh(scaleHandleGeometry, matCyanTransparent),\n                    [\n                        0,\n                        0.85,\n                        0.85\n                    ],\n                    null,\n                    [\n                        0.2,\n                        2,\n                        2\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineCyan),\n                    [\n                        0,\n                        0.855,\n                        0.98\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineCyan),\n                    [\n                        0,\n                        0.98,\n                        0.855\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            XZ: [\n                [\n                    new THREE.Mesh(scaleHandleGeometry, matMagentaTransparent),\n                    [\n                        0.85,\n                        0,\n                        0.85\n                    ],\n                    null,\n                    [\n                        2,\n                        0.2,\n                        2\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineMagenta),\n                    [\n                        0.855,\n                        0,\n                        0.98\n                    ],\n                    null,\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ],\n                [\n                    new THREE.Line(lineGeometry, matLineMagenta),\n                    [\n                        0.98,\n                        0,\n                        0.855\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        0.125,\n                        1,\n                        1\n                    ]\n                ]\n            ],\n            XYZX: [[\n                    new THREE.Mesh(new THREE.BoxBufferGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()),\n                    [\n                        1.1,\n                        0,\n                        0\n                    ]\n                ]],\n            XYZY: [[\n                    new THREE.Mesh(new THREE.BoxBufferGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()),\n                    [\n                        0,\n                        1.1,\n                        0\n                    ]\n                ]],\n            XYZZ: [[\n                    new THREE.Mesh(new THREE.BoxBufferGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()),\n                    [\n                        0,\n                        0,\n                        1.1\n                    ]\n                ]]\n        };\n        var pickerScale = {\n            X: [[\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible),\n                    [\n                        0.5,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ]],\n            Y: [[\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible),\n                    [\n                        0,\n                        0.5,\n                        0\n                    ]\n                ]],\n            Z: [[\n                    new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible),\n                    [\n                        0,\n                        0,\n                        0.5\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]],\n            XY: [[\n                    new THREE.Mesh(scaleHandleGeometry, matInvisible),\n                    [\n                        0.85,\n                        0.85,\n                        0\n                    ],\n                    null,\n                    [\n                        3,\n                        3,\n                        0.2\n                    ]\n                ]],\n            YZ: [[\n                    new THREE.Mesh(scaleHandleGeometry, matInvisible),\n                    [\n                        0,\n                        0.85,\n                        0.85\n                    ],\n                    null,\n                    [\n                        0.2,\n                        3,\n                        3\n                    ]\n                ]],\n            XZ: [[\n                    new THREE.Mesh(scaleHandleGeometry, matInvisible),\n                    [\n                        0.85,\n                        0,\n                        0.85\n                    ],\n                    null,\n                    [\n                        3,\n                        0.2,\n                        3\n                    ]\n                ]],\n            XYZX: [[\n                    new THREE.Mesh(new THREE.BoxBufferGeometry(0.2, 0.2, 0.2), matInvisible),\n                    [\n                        1.1,\n                        0,\n                        0\n                    ]\n                ]],\n            XYZY: [[\n                    new THREE.Mesh(new THREE.BoxBufferGeometry(0.2, 0.2, 0.2), matInvisible),\n                    [\n                        0,\n                        1.1,\n                        0\n                    ]\n                ]],\n            XYZZ: [[\n                    new THREE.Mesh(new THREE.BoxBufferGeometry(0.2, 0.2, 0.2), matInvisible),\n                    [\n                        0,\n                        0,\n                        1.1\n                    ]\n                ]]\n        };\n        var helperScale = {\n            X: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        -1000,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]],\n            Y: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        -1000,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]],\n            Z: [[\n                    new THREE.Line(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        0,\n                        -1000\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        1000000,\n                        1,\n                        1\n                    ],\n                    'helper'\n                ]]\n        };\n        var setupGizmo = function (gizmoMap) {\n            var gizmo = new THREE.Object3D();\n            for (var name in gizmoMap) {\n                for (var i = gizmoMap[name].length; i--;) {\n                    var object = gizmoMap[name][i][0].clone();\n                    var position = gizmoMap[name][i][1];\n                    var rotation = gizmoMap[name][i][2];\n                    var scale = gizmoMap[name][i][3];\n                    var tag = gizmoMap[name][i][4];\n                    object.name = name;\n                    object.tag = tag;\n                    if (position) {\n                        object.position.set(position[0], position[1], position[2]);\n                    }\n                    if (rotation) {\n                        object.rotation.set(rotation[0], rotation[1], rotation[2]);\n                    }\n                    if (scale) {\n                        object.scale.set(scale[0], scale[1], scale[2]);\n                    }\n                    object.updateMatrix();\n                    var tempGeometry = object.geometry.clone();\n                    tempGeometry.applyMatrix4(object.matrix);\n                    object.geometry = tempGeometry;\n                    object.renderOrder = Infinity;\n                    object.position.set(0, 0, 0);\n                    object.rotation.set(0, 0, 0);\n                    object.scale.set(1, 1, 1);\n                    gizmo.add(object);\n                }\n            }\n            return gizmo;\n        };\n        var tempVector = new THREE.Vector3(0, 0, 0);\n        var tempEuler = new THREE.Euler();\n        var alignVector = new THREE.Vector3(0, 1, 0);\n        var zeroVector = new THREE.Vector3(0, 0, 0);\n        var lookAtMatrix = new THREE.Matrix4();\n        var tempQuaternion = new THREE.Quaternion();\n        var tempQuaternion2 = new THREE.Quaternion();\n        var identityQuaternion = new THREE.Quaternion();\n        var unitX = new THREE.Vector3(1, 0, 0);\n        var unitY = new THREE.Vector3(0, 1, 0);\n        var unitZ = new THREE.Vector3(0, 0, 1);\n        this.gizmo = {};\n        this.picker = {};\n        this.helper = {};\n        this.add(this.gizmo['translate'] = setupGizmo(gizmoTranslate));\n        this.add(this.gizmo['rotate'] = setupGizmo(gizmoRotate));\n        this.add(this.gizmo['scale'] = setupGizmo(gizmoScale));\n        this.add(this.picker['translate'] = setupGizmo(pickerTranslate));\n        this.add(this.picker['rotate'] = setupGizmo(pickerRotate));\n        this.add(this.picker['scale'] = setupGizmo(pickerScale));\n        this.add(this.helper['translate'] = setupGizmo(helperTranslate));\n        this.add(this.helper['rotate'] = setupGizmo(helperRotate));\n        this.add(this.helper['scale'] = setupGizmo(helperScale));\n        this.picker['translate'].visible = false;\n        this.picker['rotate'].visible = false;\n        this.picker['scale'].visible = false;\n        this.updateMatrixWorld = function () {\n            var space = this.space;\n            if (this.mode === 'scale')\n                space = 'local';\n            var quaternion = space === 'local' ? this.worldQuaternion : identityQuaternion;\n            this.gizmo['translate'].visible = this.mode === 'translate';\n            this.gizmo['rotate'].visible = this.mode === 'rotate';\n            this.gizmo['scale'].visible = this.mode === 'scale';\n            this.helper['translate'].visible = this.mode === 'translate';\n            this.helper['rotate'].visible = this.mode === 'rotate';\n            this.helper['scale'].visible = this.mode === 'scale';\n            var handles = [];\n            handles = handles.concat(this.picker[this.mode].children);\n            handles = handles.concat(this.gizmo[this.mode].children);\n            handles = handles.concat(this.helper[this.mode].children);\n            for (var i = 0; i < handles.length; i++) {\n                var handle = handles[i];\n                handle.visible = true;\n                handle.rotation.set(0, 0, 0);\n                handle.position.copy(this.worldPosition);\n                var eyeDistance = this.worldPosition.distanceTo(this.cameraPosition);\n                handle.scale.set(1, 1, 1).multiplyScalar(eyeDistance * this.size / 7);\n                if (handle.tag === 'helper') {\n                    handle.visible = false;\n                    if (handle.name === 'AXIS') {\n                        handle.position.copy(this.worldPositionStart);\n                        handle.visible = !!this.axis;\n                        if (this.axis === 'X') {\n                            tempQuaternion.setFromEuler(tempEuler.set(0, 0, 0));\n                            handle.quaternion.copy(quaternion).multiply(tempQuaternion);\n                            if (Math.abs(alignVector.copy(unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n                                handle.visible = false;\n                            }\n                        }\n                        if (this.axis === 'Y') {\n                            tempQuaternion.setFromEuler(tempEuler.set(0, 0, Math.PI / 2));\n                            handle.quaternion.copy(quaternion).multiply(tempQuaternion);\n                            if (Math.abs(alignVector.copy(unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n                                handle.visible = false;\n                            }\n                        }\n                        if (this.axis === 'Z') {\n                            tempQuaternion.setFromEuler(tempEuler.set(0, Math.PI / 2, 0));\n                            handle.quaternion.copy(quaternion).multiply(tempQuaternion);\n                            if (Math.abs(alignVector.copy(unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n                                handle.visible = false;\n                            }\n                        }\n                        if (this.axis === 'XYZE') {\n                            tempQuaternion.setFromEuler(tempEuler.set(0, Math.PI / 2, 0));\n                            alignVector.copy(this.rotationAxis);\n                            handle.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(zeroVector, alignVector, unitY));\n                            handle.quaternion.multiply(tempQuaternion);\n                            handle.visible = this.dragging;\n                        }\n                        if (this.axis === 'E') {\n                            handle.visible = false;\n                        }\n                    } else if (handle.name === 'START') {\n                        handle.position.copy(this.worldPositionStart);\n                        handle.visible = this.dragging;\n                    } else if (handle.name === 'END') {\n                        handle.position.copy(this.worldPosition);\n                        handle.visible = this.dragging;\n                    } else if (handle.name === 'DELTA') {\n                        handle.position.copy(this.worldPositionStart);\n                        handle.quaternion.copy(this.worldQuaternionStart);\n                        tempVector.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);\n                        tempVector.applyQuaternion(this.worldQuaternionStart.clone().inverse());\n                        handle.scale.copy(tempVector);\n                        handle.visible = this.dragging;\n                    } else {\n                        handle.quaternion.copy(quaternion);\n                        if (this.dragging) {\n                            handle.position.copy(this.worldPositionStart);\n                        } else {\n                            handle.position.copy(this.worldPosition);\n                        }\n                        if (this.axis) {\n                            handle.visible = this.axis.search(handle.name) !== -1;\n                        }\n                    }\n                    continue;\n                }\n                handle.quaternion.copy(quaternion);\n                if (this.mode === 'translate' || this.mode === 'scale') {\n                    var AXIS_HIDE_TRESHOLD = 0.99;\n                    var PLANE_HIDE_TRESHOLD = 0.2;\n                    var AXIS_FLIP_TRESHOLD = 0;\n                    if (handle.name === 'X' || handle.name === 'XYZX') {\n                        if (Math.abs(alignVector.copy(unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD) {\n                            handle.scale.set(1e-10, 1e-10, 1e-10);\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name === 'Y' || handle.name === 'XYZY') {\n                        if (Math.abs(alignVector.copy(unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD) {\n                            handle.scale.set(1e-10, 1e-10, 1e-10);\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name === 'Z' || handle.name === 'XYZZ') {\n                        if (Math.abs(alignVector.copy(unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD) {\n                            handle.scale.set(1e-10, 1e-10, 1e-10);\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name === 'XY') {\n                        if (Math.abs(alignVector.copy(unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD) {\n                            handle.scale.set(1e-10, 1e-10, 1e-10);\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name === 'YZ') {\n                        if (Math.abs(alignVector.copy(unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD) {\n                            handle.scale.set(1e-10, 1e-10, 1e-10);\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name === 'XZ') {\n                        if (Math.abs(alignVector.copy(unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD) {\n                            handle.scale.set(1e-10, 1e-10, 1e-10);\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name.search('X') !== -1) {\n                        if (alignVector.copy(unitX).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n                            if (handle.tag === 'fwd') {\n                                handle.visible = false;\n                            } else {\n                                handle.scale.x *= -1;\n                            }\n                        } else if (handle.tag === 'bwd') {\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name.search('Y') !== -1) {\n                        if (alignVector.copy(unitY).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n                            if (handle.tag === 'fwd') {\n                                handle.visible = false;\n                            } else {\n                                handle.scale.y *= -1;\n                            }\n                        } else if (handle.tag === 'bwd') {\n                            handle.visible = false;\n                        }\n                    }\n                    if (handle.name.search('Z') !== -1) {\n                        if (alignVector.copy(unitZ).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n                            if (handle.tag === 'fwd') {\n                                handle.visible = false;\n                            } else {\n                                handle.scale.z *= -1;\n                            }\n                        } else if (handle.tag === 'bwd') {\n                            handle.visible = false;\n                        }\n                    }\n                } else if (this.mode === 'rotate') {\n                    tempQuaternion2.copy(quaternion);\n                    alignVector.copy(this.eye).applyQuaternion(tempQuaternion.copy(quaternion).inverse());\n                    if (handle.name.search('E') !== -1) {\n                        handle.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(this.eye, zeroVector, unitY));\n                    }\n                    if (handle.name === 'X') {\n                        tempQuaternion.setFromAxisAngle(unitX, Math.atan2(-alignVector.y, alignVector.z));\n                        tempQuaternion.multiplyQuaternions(tempQuaternion2, tempQuaternion);\n                        handle.quaternion.copy(tempQuaternion);\n                    }\n                    if (handle.name === 'Y') {\n                        tempQuaternion.setFromAxisAngle(unitY, Math.atan2(alignVector.x, alignVector.z));\n                        tempQuaternion.multiplyQuaternions(tempQuaternion2, tempQuaternion);\n                        handle.quaternion.copy(tempQuaternion);\n                    }\n                    if (handle.name === 'Z') {\n                        tempQuaternion.setFromAxisAngle(unitZ, Math.atan2(alignVector.y, alignVector.x));\n                        tempQuaternion.multiplyQuaternions(tempQuaternion2, tempQuaternion);\n                        handle.quaternion.copy(tempQuaternion);\n                    }\n                }\n                handle.visible = handle.visible && (handle.name.indexOf('X') === -1 || this.showX);\n                handle.visible = handle.visible && (handle.name.indexOf('Y') === -1 || this.showY);\n                handle.visible = handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ);\n                handle.visible = handle.visible && (handle.name.indexOf('E') === -1 || this.showX && this.showY && this.showZ);\n                handle.material._opacity = handle.material._opacity || handle.material.opacity;\n                handle.material._color = handle.material._color || handle.material.color.clone();\n                handle.material.color.copy(handle.material._color);\n                handle.material.opacity = handle.material._opacity;\n                if (!this.enabled) {\n                    handle.material.opacity *= 0.5;\n                    handle.material.color.lerp(new THREE.Color(1, 1, 1), 0.5);\n                } else if (this.axis) {\n                    if (handle.name === this.axis) {\n                        handle.material.opacity = 1;\n                        handle.material.color.lerp(new THREE.Color(1, 1, 1), 0.5);\n                    } else if (this.axis.split('').some(function (THREE) {\n                            return handle.name === THREE;\n                        })) {\n                        handle.material.opacity = 1;\n                        handle.material.color.lerp(new THREE.Color(1, 1, 1), 0.5);\n                    } else {\n                        handle.material.opacity *= 0.25;\n                        handle.material.color.lerp(new THREE.Color(1, 1, 1), 0.5);\n                    }\n                }\n            }\n            THREE.Object3D.prototype.updateMatrixWorld.call(this);\n        };\n    };\n    TransformControlsGizmo.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n        constructor: TransformControlsGizmo,\n        isTransformControlsGizmo: true\n    });\n \n    return  TransformControlsGizmo;\n});"]}