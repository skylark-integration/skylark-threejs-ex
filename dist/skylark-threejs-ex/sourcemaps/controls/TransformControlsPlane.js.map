{"version":3,"sources":["controls/TransformControlsPlane.js"],"names":["define","THREE","threex","TransformControlsPlane","Mesh","call","this","PlaneBufferGeometry","MeshBasicMaterial","visible","wireframe","side","DoubleSide","transparent","opacity","type","unitX","Vector3","unitY","unitZ","tempVector","dirVector","alignVector","tempMatrix","Matrix4","identityQuaternion","Quaternion","updateMatrixWorld","space","position","copy","worldPosition","mode","set","applyQuaternion","worldQuaternion","axis","eye","cross","length","quaternion","cameraQuaternion","lookAt","setFromRotationMatrix","Object3D","prototype","Object","assign","create","constructor","isTransformControlsPlane","controls"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aAEA,IAAIC,EAAyB,WAEzBF,EAAMG,KAAKC,KAAKC,KAAM,IAAIL,EAAMM,oBAAoB,IAAQ,IAAQ,EAAG,GAAI,IAAIN,EAAMO,mBACjFC,SAAS,EACTC,WAAW,EACXC,KAAMV,EAAMW,WACZC,aAAa,EACbC,QAAS,MAEbR,KAAKS,KAAO,yBACZ,IAAIC,EAAQ,IAAIf,EAAMgB,QAAQ,EAAG,EAAG,GAChCC,EAAQ,IAAIjB,EAAMgB,QAAQ,EAAG,EAAG,GAChCE,EAAQ,IAAIlB,EAAMgB,QAAQ,EAAG,EAAG,GAChCG,EAAa,IAAInB,EAAMgB,QACvBI,EAAY,IAAIpB,EAAMgB,QACtBK,EAAc,IAAIrB,EAAMgB,QACxBM,EAAa,IAAItB,EAAMuB,QACvBC,EAAqB,IAAIxB,EAAMyB,WACnCpB,KAAKqB,kBAAoB,WACrB,IAAIC,EAAQtB,KAAKsB,MAQjB,OAPAtB,KAAKuB,SAASC,KAAKxB,KAAKyB,eACN,UAAdzB,KAAK0B,OACLJ,EAAQ,SACZZ,EAAMiB,IAAI,EAAG,EAAG,GAAGC,gBAA0B,UAAVN,EAAoBtB,KAAK6B,gBAAkBV,GAC9EP,EAAMe,IAAI,EAAG,EAAG,GAAGC,gBAA0B,UAAVN,EAAoBtB,KAAK6B,gBAAkBV,GAC9EN,EAAMc,IAAI,EAAG,EAAG,GAAGC,gBAA0B,UAAVN,EAAoBtB,KAAK6B,gBAAkBV,GAC9EH,EAAYQ,KAAKZ,GACTZ,KAAK0B,MACb,IAAK,YACL,IAAK,QACD,OAAQ1B,KAAK8B,MACb,IAAK,IACDd,EAAYQ,KAAKxB,KAAK+B,KAAKC,MAAMtB,GACjCK,EAAUS,KAAKd,GAAOsB,MAAMhB,GAC5B,MACJ,IAAK,IACDA,EAAYQ,KAAKxB,KAAK+B,KAAKC,MAAMpB,GACjCG,EAAUS,KAAKZ,GAAOoB,MAAMhB,GAC5B,MACJ,IAAK,IACDA,EAAYQ,KAAKxB,KAAK+B,KAAKC,MAAMnB,GACjCE,EAAUS,KAAKX,GAAOmB,MAAMhB,GAC5B,MACJ,IAAK,KACDD,EAAUS,KAAKX,GACf,MACJ,IAAK,KACDE,EAAUS,KAAKd,GACf,MACJ,IAAK,KACDM,EAAYQ,KAAKX,GACjBE,EAAUS,KAAKZ,GACf,MACJ,IAAK,MACL,IAAK,IACDG,EAAUY,IAAI,EAAG,EAAG,GAGxB,MACJ,IAAK,SACL,QACIZ,EAAUY,IAAI,EAAG,EAAG,GAEG,IAAvBZ,EAAUkB,SACVjC,KAAKkC,WAAWV,KAAKxB,KAAKmC,mBAE1BlB,EAAWmB,OAAOtB,EAAWa,IAAI,EAAG,EAAG,GAAIZ,EAAWC,GACtDhB,KAAKkC,WAAWG,sBAAsBpB,IAE1CtB,EAAM2C,SAASC,UAAUlB,kBAAkBtB,KAAKC,QAQxD,OALAH,EAAuB0C,UAAYC,OAAOC,OAAOD,OAAOE,OAAO/C,EAAMG,KAAKyC,YACtEI,YAAa9C,EACb+C,0BAA0B,IAGtBhD,EAAOiD,SAAShD,uBAAyBA","file":"../../controls/TransformControlsPlane.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n\r\n    var TransformControlsPlane = function () {\r\n        'use strict';\r\n        THREE.Mesh.call(this, new THREE.PlaneBufferGeometry(100000, 100000, 2, 2), new THREE.MeshBasicMaterial({\r\n            visible: false,\r\n            wireframe: true,\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            opacity: 0.1\r\n        }));\r\n        this.type = 'TransformControlsPlane';\r\n        var unitX = new THREE.Vector3(1, 0, 0);\r\n        var unitY = new THREE.Vector3(0, 1, 0);\r\n        var unitZ = new THREE.Vector3(0, 0, 1);\r\n        var tempVector = new THREE.Vector3();\r\n        var dirVector = new THREE.Vector3();\r\n        var alignVector = new THREE.Vector3();\r\n        var tempMatrix = new THREE.Matrix4();\r\n        var identityQuaternion = new THREE.Quaternion();\r\n        this.updateMatrixWorld = function () {\r\n            var space = this.space;\r\n            this.position.copy(this.worldPosition);\r\n            if (this.mode === 'scale')\r\n                space = 'local';\r\n            unitX.set(1, 0, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : identityQuaternion);\r\n            unitY.set(0, 1, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : identityQuaternion);\r\n            unitZ.set(0, 0, 1).applyQuaternion(space === 'local' ? this.worldQuaternion : identityQuaternion);\r\n            alignVector.copy(unitY);\r\n            switch (this.mode) {\r\n            case 'translate':\r\n            case 'scale':\r\n                switch (this.axis) {\r\n                case 'X':\r\n                    alignVector.copy(this.eye).cross(unitX);\r\n                    dirVector.copy(unitX).cross(alignVector);\r\n                    break;\r\n                case 'Y':\r\n                    alignVector.copy(this.eye).cross(unitY);\r\n                    dirVector.copy(unitY).cross(alignVector);\r\n                    break;\r\n                case 'Z':\r\n                    alignVector.copy(this.eye).cross(unitZ);\r\n                    dirVector.copy(unitZ).cross(alignVector);\r\n                    break;\r\n                case 'XY':\r\n                    dirVector.copy(unitZ);\r\n                    break;\r\n                case 'YZ':\r\n                    dirVector.copy(unitX);\r\n                    break;\r\n                case 'XZ':\r\n                    alignVector.copy(unitZ);\r\n                    dirVector.copy(unitY);\r\n                    break;\r\n                case 'XYZ':\r\n                case 'E':\r\n                    dirVector.set(0, 0, 0);\r\n                    break;\r\n                }\r\n                break;\r\n            case 'rotate':\r\n            default:\r\n                dirVector.set(0, 0, 0);\r\n            }\r\n            if (dirVector.length() === 0) {\r\n                this.quaternion.copy(this.cameraQuaternion);\r\n            } else {\r\n                tempMatrix.lookAt(tempVector.set(0, 0, 0), dirVector, alignVector);\r\n                this.quaternion.setFromRotationMatrix(tempMatrix);\r\n            }\r\n            THREE.Object3D.prototype.updateMatrixWorld.call(this);\r\n        };\r\n    };\r\n    TransformControlsPlane.prototype = Object.assign(Object.create(THREE.Mesh.prototype), {\r\n        constructor: TransformControlsPlane,\r\n        isTransformControlsPlane: true\r\n    });\r\n    \r\n    return  threex.controls.TransformControlsPlane = TransformControlsPlane;\r\n});"]}