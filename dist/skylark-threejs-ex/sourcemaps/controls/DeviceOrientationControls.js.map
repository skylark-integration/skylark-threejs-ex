{"version":3,"sources":["controls/DeviceOrientationControls.js"],"names":["define","THREE","DeviceOrientationControls","object","scope","this","rotation","reorder","enabled","deviceOrientation","screenOrientation","alphaOffset","zee","euler","q0","q1","onDeviceOrientationChangeEvent","event","onScreenOrientationChangeEvent","window","orientation","setObjectQuaternion","Vector3","Euler","Quaternion","Math","sqrt","quaternion","alpha","beta","gamma","orient","set","setFromEuler","multiply","setFromAxisAngle","connect","undefined","DeviceOrientationEvent","requestPermission","then","response","addEventListener","catch","error","console","disconnect","removeEventListener","update","device","MathUtils","degToRad","dispose"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAwIV,OAhIAA,EAAMC,0BAA4B,SAAWC,GAE5C,IAAIC,EAAQC,KAEZA,KAAKF,OAASA,EACdE,KAAKF,OAAOG,SAASC,QAAS,OAE9BF,KAAKG,SAAU,EAEfH,KAAKI,qBACLJ,KAAKK,kBAAoB,EAEzBL,KAAKM,YAAc,EAEnB,IAgBKC,EAEAC,EAEAC,EAEAC,EAtBDC,EAAiC,SAAWC,GAE/Cb,EAAMK,kBAAoBQ,GAIvBC,EAAiC,WAEpCd,EAAMM,kBAAoBS,OAAOC,aAAe,GAM7CC,GAECT,EAAM,IAAIX,EAAMqB,QAAS,EAAG,EAAG,GAE/BT,EAAQ,IAAIZ,EAAMsB,MAElBT,EAAK,IAAIb,EAAMuB,WAEfT,EAAK,IAAId,EAAMuB,YAAcC,KAAKC,KAAM,IAAO,EAAG,EAAGD,KAAKC,KAAM,KAE7D,SAAWC,EAAYC,EAAOC,EAAMC,EAAOC,GAEjDlB,EAAMmB,IAAKH,EAAMD,GAASE,EAAO,OAEjCH,EAAWM,aAAcpB,GAEzBc,EAAWO,SAAUnB,GAErBY,EAAWO,SAAUpB,EAAGqB,iBAAkBvB,GAAOmB,MAMnD1B,KAAK+B,QAAU,WAEdlB,SAIuCmB,IAAlClB,OAAOmB,wBAAmG,mBAApDnB,OAAOmB,uBAAuBC,kBAExFpB,OAAOmB,uBAAuBC,oBAAoBC,KAAM,SAAWC,GAEjD,WAAZA,IAEJtB,OAAOuB,iBAAkB,oBAAqBxB,GAAgC,GAC9EC,OAAOuB,iBAAkB,oBAAqB1B,GAAgC,MAI5E2B,MAAO,SAAWC,GAErBC,QAAQD,MAAO,wEAAyEA,MAMzFzB,OAAOuB,iBAAkB,oBAAqBxB,GAAgC,GAC9EC,OAAOuB,iBAAkB,oBAAqB1B,GAAgC,IAI/EZ,EAAMI,SAAU,GAIjBH,KAAKyC,WAAa,WAEjB3B,OAAO4B,oBAAqB,oBAAqB7B,GAAgC,GACjFC,OAAO4B,oBAAqB,oBAAqB/B,GAAgC,GAEjFZ,EAAMI,SAAU,GAIjBH,KAAK2C,OAAS,WAEb,IAAuB,IAAlB5C,EAAMI,QAAX,CAEA,IAAIyC,EAAS7C,EAAMK,kBAEnB,GAAKwC,EAAS,CAEb,IAAIrB,EAAQqB,EAAOrB,MAAQ3B,EAAMiD,UAAUC,SAAUF,EAAOrB,OAAUxB,EAAMO,YAAc,EAEtFkB,EAAOoB,EAAOpB,KAAO5B,EAAMiD,UAAUC,SAAUF,EAAOpB,MAAS,EAE/DC,EAAQmB,EAAOnB,MAAQ7B,EAAMiD,UAAUC,SAAUF,EAAOnB,OAAU,EAElEC,EAAS3B,EAAMM,kBAAoBT,EAAMiD,UAAUC,SAAU/C,EAAMM,mBAAsB,EAE7FW,EAAqBjB,EAAMD,OAAOwB,WAAYC,EAAOC,EAAMC,EAAOC,MAOpE1B,KAAK+C,QAAU,WAEdhD,EAAM0C,cAIPzC,KAAK+B,WAICnC,EAAMC","file":"../../controls/DeviceOrientationControls.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author richt / http://richt.me\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n\t */\n\n\tTHREE.DeviceOrientationControls = function ( object ) {\n\n\t\tvar scope = this;\n\n\t\tthis.object = object;\n\t\tthis.object.rotation.reorder( 'YXZ' );\n\n\t\tthis.enabled = true;\n\n\t\tthis.deviceOrientation = {};\n\t\tthis.screenOrientation = 0;\n\n\t\tthis.alphaOffset = 0; // radians\n\n\t\tvar onDeviceOrientationChangeEvent = function ( event ) {\n\n\t\t\tscope.deviceOrientation = event;\n\n\t\t};\n\n\t\tvar onScreenOrientationChangeEvent = function () {\n\n\t\t\tscope.screenOrientation = window.orientation || 0;\n\n\t\t};\n\n\t\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\t\tvar setObjectQuaternion = function () {\n\n\t\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\n\t\t\tvar euler = new THREE.Euler();\n\n\t\t\tvar q0 = new THREE.Quaternion();\n\n\t\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\t\treturn function ( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.connect = function () {\n\n\t\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\t\t// iOS 13+\n\n\t\t\tif ( window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function' ) {\n\n\t\t\t\twindow.DeviceOrientationEvent.requestPermission().then( function ( response ) {\n\n\t\t\t\t\tif ( response == 'granted' ) {\n\n\t\t\t\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\t\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} ).catch( function ( error ) {\n\n\t\t\t\t\tconsole.error( 'THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\t\t}\n\n\t\t\tscope.enabled = true;\n\n\t\t};\n\n\t\tthis.disconnect = function () {\n\n\t\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\t\tscope.enabled = false;\n\n\t\t};\n\n\t\tthis.update = function () {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tvar device = scope.deviceOrientation;\n\n\t\t\tif ( device ) {\n\n\t\t\t\tvar alpha = device.alpha ? THREE.MathUtils.degToRad( device.alpha ) + scope.alphaOffset : 0; // Z\n\n\t\t\t\tvar beta = device.beta ? THREE.MathUtils.degToRad( device.beta ) : 0; // X'\n\n\t\t\t\tvar gamma = device.gamma ? THREE.MathUtils.degToRad( device.gamma ) : 0; // Y''\n\n\t\t\t\tvar orient = scope.screenOrientation ? THREE.MathUtils.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\t\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tscope.disconnect();\n\n\t\t};\n\n\t\tthis.connect();\n\n\t};\n\n\treturn THREE.DeviceOrientationControls;\n});\n"]}