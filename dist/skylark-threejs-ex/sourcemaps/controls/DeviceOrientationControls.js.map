{"version":3,"sources":["controls/DeviceOrientationControls.js"],"names":["define","THREE","object","scope","this","rotation","reorder","enabled","deviceOrientation","screenOrientation","alphaOffset","zee","euler","q0","q1","onDeviceOrientationChangeEvent","event","onScreenOrientationChangeEvent","window","orientation","setObjectQuaternion","Vector3","Euler","Quaternion","Math","sqrt","quaternion","alpha","beta","gamma","orient","set","setFromEuler","multiply","setFromAxisAngle","connect","undefined","DeviceOrientationEvent","requestPermission","then","response","addEventListener","catch","error","console","disconnect","removeEventListener","update","device","MathUtils","degToRad","dispose"],"mappings":";;;;;;;AAAAA,QACI,mBACD,SAAUC,GACT,aAkEA,OAjEgC,SAAUC,GACtC,IAAIC,EAAQC,KACZA,KAAKF,OAASA,EACdE,KAAKF,OAAOG,SAASC,QAAQ,OAC7BF,KAAKG,SAAU,EACfH,KAAKI,qBACLJ,KAAKK,kBAAoB,EACzBL,KAAKM,YAAc,EACnB,IAOQC,EACAC,EACAC,EACAC,EAVJC,EAAiC,SAAUC,GAC3Cb,EAAMK,kBAAoBQ,GAE1BC,EAAiC,WACjCd,EAAMM,kBAAoBS,OAAOC,aAAe,GAEhDC,GACIT,EAAM,IAAIV,EAAMoB,QAAQ,EAAG,EAAG,GAC9BT,EAAQ,IAAIX,EAAMqB,MAClBT,EAAK,IAAIZ,EAAMsB,WACfT,EAAK,IAAIb,EAAMsB,YAAYC,KAAKC,KAAK,IAAM,EAAG,EAAGD,KAAKC,KAAK,KACxD,SAAUC,EAAYC,EAAOC,EAAMC,EAAOC,GAC7ClB,EAAMmB,IAAIH,EAAMD,GAAQE,EAAO,OAC/BH,EAAWM,aAAapB,GACxBc,EAAWO,SAASnB,GACpBY,EAAWO,SAASpB,EAAGqB,iBAAiBvB,GAAMmB,MAGtD1B,KAAK+B,QAAU,WACXlB,SACsCmB,IAAlClB,OAAOmB,wBAAmG,mBAApDnB,OAAOmB,uBAAuBC,kBACpFpB,OAAOmB,uBAAuBC,oBAAoBC,KAAK,SAAUC,GAC7C,WAAZA,IACAtB,OAAOuB,iBAAiB,oBAAqBxB,GAAgC,GAC7EC,OAAOuB,iBAAiB,oBAAqB1B,GAAgC,MAElF2B,MAAM,SAAUC,GACfC,QAAQD,MAAM,wEAAyEA,MAG3FzB,OAAOuB,iBAAiB,oBAAqBxB,GAAgC,GAC7EC,OAAOuB,iBAAiB,oBAAqB1B,GAAgC,IAEjFZ,EAAMI,SAAU,GAEpBH,KAAKyC,WAAa,WACd3B,OAAO4B,oBAAoB,oBAAqB7B,GAAgC,GAChFC,OAAO4B,oBAAoB,oBAAqB/B,GAAgC,GAChFZ,EAAMI,SAAU,GAEpBH,KAAK2C,OAAS,WACV,IAAsB,IAAlB5C,EAAMI,QAAV,CAEA,IAAIyC,EAAS7C,EAAMK,kBACnB,GAAIwC,EAAQ,CACR,IAAIrB,EAAQqB,EAAOrB,MAAQ1B,EAAMgD,UAAUC,SAASF,EAAOrB,OAASxB,EAAMO,YAAc,EACpFkB,EAAOoB,EAAOpB,KAAO3B,EAAMgD,UAAUC,SAASF,EAAOpB,MAAQ,EAC7DC,EAAQmB,EAAOnB,MAAQ5B,EAAMgD,UAAUC,SAASF,EAAOnB,OAAS,EAChEC,EAAS3B,EAAMM,kBAAoBR,EAAMgD,UAAUC,SAAS/C,EAAMM,mBAAqB,EAC3FW,EAAoBjB,EAAMD,OAAOwB,WAAYC,EAAOC,EAAMC,EAAOC,MAGzE1B,KAAK+C,QAAU,WACXhD,EAAM0C,cAEVzC,KAAK+B","file":"../../controls/DeviceOrientationControls.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var DeviceOrientationControls = function (object) {\n        var scope = this;\n        this.object = object;\n        this.object.rotation.reorder('YXZ');\n        this.enabled = true;\n        this.deviceOrientation = {};\n        this.screenOrientation = 0;\n        this.alphaOffset = 0;\n        var onDeviceOrientationChangeEvent = function (event) {\n            scope.deviceOrientation = event;\n        };\n        var onScreenOrientationChangeEvent = function () {\n            scope.screenOrientation = window.orientation || 0;\n        };\n        var setObjectQuaternion = function () {\n            var zee = new THREE.Vector3(0, 0, 1);\n            var euler = new THREE.Euler();\n            var q0 = new THREE.Quaternion();\n            var q1 = new THREE.Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n            return function (quaternion, alpha, beta, gamma, orient) {\n                euler.set(beta, alpha, -gamma, 'YXZ');\n                quaternion.setFromEuler(euler);\n                quaternion.multiply(q1);\n                quaternion.multiply(q0.setFromAxisAngle(zee, -orient));\n            };\n        }();\n        this.connect = function () {\n            onScreenOrientationChangeEvent();\n            if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n                window.DeviceOrientationEvent.requestPermission().then(function (response) {\n                    if (response == 'granted') {\n                        window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n                        window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n                    }\n                }).catch(function (error) {\n                    console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n                });\n            } else {\n                window.addEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n                window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n            }\n            scope.enabled = true;\n        };\n        this.disconnect = function () {\n            window.removeEventListener('orientationchange', onScreenOrientationChangeEvent, false);\n            window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent, false);\n            scope.enabled = false;\n        };\n        this.update = function () {\n            if (scope.enabled === false)\n                return;\n            var device = scope.deviceOrientation;\n            if (device) {\n                var alpha = device.alpha ? THREE.MathUtils.degToRad(device.alpha) + scope.alphaOffset : 0;\n                var beta = device.beta ? THREE.MathUtils.degToRad(device.beta) : 0;\n                var gamma = device.gamma ? THREE.MathUtils.degToRad(device.gamma) : 0;\n                var orient = scope.screenOrientation ? THREE.MathUtils.degToRad(scope.screenOrientation) : 0;\n                setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);\n            }\n        };\n        this.dispose = function () {\n            scope.disconnect();\n        };\n        this.connect();\n    };\n    return DeviceOrientationControls;\n});"]}