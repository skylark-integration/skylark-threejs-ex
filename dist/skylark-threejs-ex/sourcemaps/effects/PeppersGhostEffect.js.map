{"version":3,"sources":["effects/PeppersGhostEffect.js"],"names":["define","THREE","renderer","_halfWidth","_width","_height","scope","this","cameraDistance","reflectFromAbove","_cameraF","PerspectiveCamera","_cameraB","_cameraL","_cameraR","_position","Vector3","_quaternion","Quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"mappings":";;;;;;;AAAAA,QACI,mBACD,SAAUC,GAET,aAmFA,OAlFyB,SAAUC,GAC/B,IAGIC,EAAYC,EAAQC,EAHpBC,EAAQC,KACZD,EAAME,eAAiB,GACvBF,EAAMG,kBAAmB,EAEzB,IAAIC,EAAW,IAAIT,EAAMU,kBACrBC,EAAW,IAAIX,EAAMU,kBACrBE,EAAW,IAAIZ,EAAMU,kBACrBG,EAAW,IAAIb,EAAMU,kBACrBI,EAAY,IAAId,EAAMe,QACtBC,EAAc,IAAIhB,EAAMiB,WACxBC,EAAS,IAAIlB,EAAMe,QACvBd,EAASkB,WAAY,EACrBb,KAAKc,QAAU,SAAUC,EAAOC,GAC5BpB,EAAamB,EAAQ,EACjBA,EAAQC,GACRnB,EAASkB,EAAQ,EACjBjB,EAAUiB,EAAQ,IAElBlB,EAASmB,EAAS,EAClBlB,EAAUkB,EAAS,GAEvBrB,EAASmB,QAAQC,EAAOC,IAE5BhB,KAAKiB,OAAS,SAAUC,EAAOC,GAC3BD,EAAME,oBACgB,OAAlBD,EAAOE,QACPF,EAAOC,oBACXD,EAAOG,YAAYC,UAAUf,EAAWE,EAAaE,GACrDT,EAASqB,SAASC,KAAKjB,GACvBL,EAASuB,WAAWD,KAAKf,GACzBP,EAASwB,WAAW5B,EAAME,gBAC1BE,EAASyB,OAAOV,EAAMM,UACtBnB,EAASmB,SAASC,KAAKjB,GACvBH,EAASqB,WAAWD,KAAKf,GACzBL,EAASsB,YAAY5B,EAAME,gBAC3BI,EAASuB,OAAOV,EAAMM,UACtBnB,EAASwB,SAASC,GAAYC,KAAKC,GAAK,IAAjB,IACvB1B,EAASkB,SAASC,KAAKjB,GACvBF,EAASoB,WAAWD,KAAKf,GACzBJ,EAAS2B,YAAYlC,EAAME,gBAC3BK,EAASsB,OAAOV,EAAMM,UACtBlB,EAASuB,SAASK,GAAWH,KAAKC,GAAK,IAAhB,GACvBzB,EAASiB,SAASC,KAAKjB,GACvBD,EAASmB,WAAWD,KAAKf,GACzBH,EAAS0B,WAAWlC,EAAME,gBAC1BM,EAASqB,OAAOV,EAAMM,UACtBjB,EAASsB,SAASK,GAAWH,KAAKC,GAAK,IAAhB,GACvBrC,EAASwC,QACTxC,EAASyC,gBAAe,GACxBzC,EAAS0C,WAAWzC,EAAaC,EAAS,EAAa,EAAVC,EAAaD,EAAQC,GAClEH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAa,EAAVC,EAAaD,EAAQC,GAC/DC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOb,GAEvBV,EAASsB,OAAOC,EAAOf,GAE3BR,EAAS0C,WAAWzC,EAAaC,EAAS,EAAG,EAAGA,EAAQC,GACxDH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAG,EAAGA,EAAQC,GACrDC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOf,GAEvBR,EAASsB,OAAOC,EAAOb,GAE3BV,EAAS0C,WAAWzC,EAAaC,EAAS,EAAIA,EAAQC,EAASD,EAAQC,GACvEH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAIA,EAAQC,EAASD,EAAQC,GACpEC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOX,GAEvBZ,EAASsB,OAAOC,EAAOZ,GAE3BX,EAAS0C,WAAWzC,EAAaC,EAAS,EAAGC,EAASD,EAAQC,GAC9DH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAGC,EAASD,EAAQC,GAC3DC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOZ,GAEvBX,EAASsB,OAAOC,EAAOX,GAE3BZ,EAASyC,gBAAe","file":"../../effects/PeppersGhostEffect.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n\n    'use strict';\n    var PeppersGhostEffect = function (renderer) {\n        var scope = this;\n        scope.cameraDistance = 15;\n        scope.reflectFromAbove = false;\n        var _halfWidth, _width, _height;\n        var _cameraF = new THREE.PerspectiveCamera();\n        var _cameraB = new THREE.PerspectiveCamera();\n        var _cameraL = new THREE.PerspectiveCamera();\n        var _cameraR = new THREE.PerspectiveCamera();\n        var _position = new THREE.Vector3();\n        var _quaternion = new THREE.Quaternion();\n        var _scale = new THREE.Vector3();\n        renderer.autoClear = false;\n        this.setSize = function (width, height) {\n            _halfWidth = width / 2;\n            if (width < height) {\n                _width = width / 3;\n                _height = width / 3;\n            } else {\n                _width = height / 3;\n                _height = height / 3;\n            }\n            renderer.setSize(width, height);\n        };\n        this.render = function (scene, camera) {\n            scene.updateMatrixWorld();\n            if (camera.parent === null)\n                camera.updateMatrixWorld();\n            camera.matrixWorld.decompose(_position, _quaternion, _scale);\n            _cameraF.position.copy(_position);\n            _cameraF.quaternion.copy(_quaternion);\n            _cameraF.translateZ(scope.cameraDistance);\n            _cameraF.lookAt(scene.position);\n            _cameraB.position.copy(_position);\n            _cameraB.quaternion.copy(_quaternion);\n            _cameraB.translateZ(-scope.cameraDistance);\n            _cameraB.lookAt(scene.position);\n            _cameraB.rotation.z += 180 * (Math.PI / 180);\n            _cameraL.position.copy(_position);\n            _cameraL.quaternion.copy(_quaternion);\n            _cameraL.translateX(-scope.cameraDistance);\n            _cameraL.lookAt(scene.position);\n            _cameraL.rotation.x += 90 * (Math.PI / 180);\n            _cameraR.position.copy(_position);\n            _cameraR.quaternion.copy(_quaternion);\n            _cameraR.translateX(scope.cameraDistance);\n            _cameraR.lookAt(scene.position);\n            _cameraR.rotation.x += 90 * (Math.PI / 180);\n            renderer.clear();\n            renderer.setScissorTest(true);\n            renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n            renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n            if (scope.reflectFromAbove) {\n                renderer.render(scene, _cameraB);\n            } else {\n                renderer.render(scene, _cameraF);\n            }\n            renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n            renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n            if (scope.reflectFromAbove) {\n                renderer.render(scene, _cameraF);\n            } else {\n                renderer.render(scene, _cameraB);\n            }\n            renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n            renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n            if (scope.reflectFromAbove) {\n                renderer.render(scene, _cameraR);\n            } else {\n                renderer.render(scene, _cameraL);\n            }\n            renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n            renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n            if (scope.reflectFromAbove) {\n                renderer.render(scene, _cameraL);\n            } else {\n                renderer.render(scene, _cameraR);\n            }\n            renderer.setScissorTest(false);\n        };\n    };\n\n    return PeppersGhostEffect;\n});"]}