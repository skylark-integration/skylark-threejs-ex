{"version":3,"sources":["effects/PeppersGhostEffect.js"],"names":["define","THREE","threex","effects","PeppersGhostEffect","renderer","_halfWidth","_width","_height","scope","this","cameraDistance","reflectFromAbove","_cameraF","PerspectiveCamera","_cameraB","_cameraL","_cameraR","_position","Vector3","_quaternion","Quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAGA,aAmFA,OAAOA,EAAOC,QAAQC,mBAlFG,SAAUC,GAC/B,IAGIC,EAAYC,EAAQC,EAHpBC,EAAQC,KACZD,EAAME,eAAiB,GACvBF,EAAMG,kBAAmB,EAEzB,IAAIC,EAAW,IAAIZ,EAAMa,kBACrBC,EAAW,IAAId,EAAMa,kBACrBE,EAAW,IAAIf,EAAMa,kBACrBG,EAAW,IAAIhB,EAAMa,kBACrBI,EAAY,IAAIjB,EAAMkB,QACtBC,EAAc,IAAInB,EAAMoB,WACxBC,EAAS,IAAIrB,EAAMkB,QACvBd,EAASkB,WAAY,EACrBb,KAAKc,QAAU,SAAUC,EAAOC,GAC5BpB,EAAamB,EAAQ,EACjBA,EAAQC,GACRnB,EAASkB,EAAQ,EACjBjB,EAAUiB,EAAQ,IAElBlB,EAASmB,EAAS,EAClBlB,EAAUkB,EAAS,GAEvBrB,EAASmB,QAAQC,EAAOC,IAE5BhB,KAAKiB,OAAS,SAAUC,EAAOC,GAC3BD,EAAME,oBACgB,OAAlBD,EAAOE,QACPF,EAAOC,oBACXD,EAAOG,YAAYC,UAAUf,EAAWE,EAAaE,GACrDT,EAASqB,SAASC,KAAKjB,GACvBL,EAASuB,WAAWD,KAAKf,GACzBP,EAASwB,WAAW5B,EAAME,gBAC1BE,EAASyB,OAAOV,EAAMM,UACtBnB,EAASmB,SAASC,KAAKjB,GACvBH,EAASqB,WAAWD,KAAKf,GACzBL,EAASsB,YAAY5B,EAAME,gBAC3BI,EAASuB,OAAOV,EAAMM,UACtBnB,EAASwB,SAASC,GAAYC,KAAKC,GAAK,IAAjB,IACvB1B,EAASkB,SAASC,KAAKjB,GACvBF,EAASoB,WAAWD,KAAKf,GACzBJ,EAAS2B,YAAYlC,EAAME,gBAC3BK,EAASsB,OAAOV,EAAMM,UACtBlB,EAASuB,SAASK,GAAWH,KAAKC,GAAK,IAAhB,GACvBzB,EAASiB,SAASC,KAAKjB,GACvBD,EAASmB,WAAWD,KAAKf,GACzBH,EAAS0B,WAAWlC,EAAME,gBAC1BM,EAASqB,OAAOV,EAAMM,UACtBjB,EAASsB,SAASK,GAAWH,KAAKC,GAAK,IAAhB,GACvBrC,EAASwC,QACTxC,EAASyC,gBAAe,GACxBzC,EAAS0C,WAAWzC,EAAaC,EAAS,EAAa,EAAVC,EAAaD,EAAQC,GAClEH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAa,EAAVC,EAAaD,EAAQC,GAC/DC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOb,GAEvBV,EAASsB,OAAOC,EAAOf,GAE3BR,EAAS0C,WAAWzC,EAAaC,EAAS,EAAG,EAAGA,EAAQC,GACxDH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAG,EAAGA,EAAQC,GACrDC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOf,GAEvBR,EAASsB,OAAOC,EAAOb,GAE3BV,EAAS0C,WAAWzC,EAAaC,EAAS,EAAIA,EAAQC,EAASD,EAAQC,GACvEH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAIA,EAAQC,EAASD,EAAQC,GACpEC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOX,GAEvBZ,EAASsB,OAAOC,EAAOZ,GAE3BX,EAAS0C,WAAWzC,EAAaC,EAAS,EAAGC,EAASD,EAAQC,GAC9DH,EAAS2C,YAAY1C,EAAaC,EAAS,EAAGC,EAASD,EAAQC,GAC3DC,EAAMG,iBACNP,EAASsB,OAAOC,EAAOZ,GAEvBX,EAASsB,OAAOC,EAAOX,GAE3BZ,EAASyC,gBAAe","file":"../../effects/PeppersGhostEffect.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n\r\n    'use strict';\r\n    var PeppersGhostEffect = function (renderer) {\r\n        var scope = this;\r\n        scope.cameraDistance = 15;\r\n        scope.reflectFromAbove = false;\r\n        var _halfWidth, _width, _height;\r\n        var _cameraF = new THREE.PerspectiveCamera();\r\n        var _cameraB = new THREE.PerspectiveCamera();\r\n        var _cameraL = new THREE.PerspectiveCamera();\r\n        var _cameraR = new THREE.PerspectiveCamera();\r\n        var _position = new THREE.Vector3();\r\n        var _quaternion = new THREE.Quaternion();\r\n        var _scale = new THREE.Vector3();\r\n        renderer.autoClear = false;\r\n        this.setSize = function (width, height) {\r\n            _halfWidth = width / 2;\r\n            if (width < height) {\r\n                _width = width / 3;\r\n                _height = width / 3;\r\n            } else {\r\n                _width = height / 3;\r\n                _height = height / 3;\r\n            }\r\n            renderer.setSize(width, height);\r\n        };\r\n        this.render = function (scene, camera) {\r\n            scene.updateMatrixWorld();\r\n            if (camera.parent === null)\r\n                camera.updateMatrixWorld();\r\n            camera.matrixWorld.decompose(_position, _quaternion, _scale);\r\n            _cameraF.position.copy(_position);\r\n            _cameraF.quaternion.copy(_quaternion);\r\n            _cameraF.translateZ(scope.cameraDistance);\r\n            _cameraF.lookAt(scene.position);\r\n            _cameraB.position.copy(_position);\r\n            _cameraB.quaternion.copy(_quaternion);\r\n            _cameraB.translateZ(-scope.cameraDistance);\r\n            _cameraB.lookAt(scene.position);\r\n            _cameraB.rotation.z += 180 * (Math.PI / 180);\r\n            _cameraL.position.copy(_position);\r\n            _cameraL.quaternion.copy(_quaternion);\r\n            _cameraL.translateX(-scope.cameraDistance);\r\n            _cameraL.lookAt(scene.position);\r\n            _cameraL.rotation.x += 90 * (Math.PI / 180);\r\n            _cameraR.position.copy(_position);\r\n            _cameraR.quaternion.copy(_quaternion);\r\n            _cameraR.translateX(scope.cameraDistance);\r\n            _cameraR.lookAt(scene.position);\r\n            _cameraR.rotation.x += 90 * (Math.PI / 180);\r\n            renderer.clear();\r\n            renderer.setScissorTest(true);\r\n            renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\r\n            renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\r\n            if (scope.reflectFromAbove) {\r\n                renderer.render(scene, _cameraB);\r\n            } else {\r\n                renderer.render(scene, _cameraF);\r\n            }\r\n            renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\r\n            renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\r\n            if (scope.reflectFromAbove) {\r\n                renderer.render(scene, _cameraF);\r\n            } else {\r\n                renderer.render(scene, _cameraB);\r\n            }\r\n            renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\r\n            renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\r\n            if (scope.reflectFromAbove) {\r\n                renderer.render(scene, _cameraR);\r\n            } else {\r\n                renderer.render(scene, _cameraL);\r\n            }\r\n            renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\r\n            renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\r\n            if (scope.reflectFromAbove) {\r\n                renderer.render(scene, _cameraL);\r\n            } else {\r\n                renderer.render(scene, _cameraR);\r\n            }\r\n            renderer.setScissorTest(false);\r\n        };\r\n    };\r\n\r\n    return threex.effects.PeppersGhostEffect = PeppersGhostEffect;\r\n});"]}