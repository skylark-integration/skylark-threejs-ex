{"version":3,"sources":["effects/StereoEffect.js"],"names":["define","THREE","threex","effects","StereoEffect","renderer","_stereo","StereoCamera","aspect","size","Vector2","this","setEyeSeparation","eyeSep","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","update","getSize","autoClear","clear","setScissorTest","setScissor","setViewport","cameraL","cameraR"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aA8BA,OAAOA,EAAOC,QAAQC,aA7BH,SAAUC,GACzB,IAAIC,EAAU,IAAIL,EAAMM,aACxBD,EAAQE,OAAS,GACjB,IAAIC,EAAO,IAAIR,EAAMS,QACrBC,KAAKC,iBAAmB,SAAUC,GAC9BP,EAAQO,OAASA,GAErBF,KAAKG,QAAU,SAAUC,EAAOC,GAC5BX,EAASS,QAAQC,EAAOC,IAE5BL,KAAKM,OAAS,SAAUC,EAAOC,GAC3BD,EAAME,oBACgB,OAAlBD,EAAOE,QACPF,EAAOC,oBACXd,EAAQgB,OAAOH,GACfd,EAASkB,QAAQd,GACbJ,EAASmB,WACTnB,EAASoB,QACbpB,EAASqB,gBAAe,GACxBrB,EAASsB,WAAW,EAAG,EAAGlB,EAAKM,MAAQ,EAAGN,EAAKO,QAC/CX,EAASuB,YAAY,EAAG,EAAGnB,EAAKM,MAAQ,EAAGN,EAAKO,QAChDX,EAASY,OAAOC,EAAOZ,EAAQuB,SAC/BxB,EAASsB,WAAWlB,EAAKM,MAAQ,EAAG,EAAGN,EAAKM,MAAQ,EAAGN,EAAKO,QAC5DX,EAASuB,YAAYnB,EAAKM,MAAQ,EAAG,EAAGN,EAAKM,MAAQ,EAAGN,EAAKO,QAC7DX,EAASY,OAAOC,EAAOZ,EAAQwB,SAC/BzB,EAASqB,gBAAe","file":"../../effects/StereoEffect.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var StereoEffect = function (renderer) {\n        var _stereo = new THREE.StereoCamera();\n        _stereo.aspect = 0.5;\n        var size = new THREE.Vector2();\n        this.setEyeSeparation = function (eyeSep) {\n            _stereo.eyeSep = eyeSep;\n        };\n        this.setSize = function (width, height) {\n            renderer.setSize(width, height);\n        };\n        this.render = function (scene, camera) {\n            scene.updateMatrixWorld();\n            if (camera.parent === null)\n                camera.updateMatrixWorld();\n            _stereo.update(camera);\n            renderer.getSize(size);\n            if (renderer.autoClear)\n                renderer.clear();\n            renderer.setScissorTest(true);\n            renderer.setScissor(0, 0, size.width / 2, size.height);\n            renderer.setViewport(0, 0, size.width / 2, size.height);\n            renderer.render(scene, _stereo.cameraL);\n            renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);\n            renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);\n            renderer.render(scene, _stereo.cameraR);\n            renderer.setScissorTest(false);\n        };\n    };\n\n    return threex.effects.StereoEffect = StereoEffect;\n});"]}