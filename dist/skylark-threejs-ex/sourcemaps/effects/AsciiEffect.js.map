{"version":3,"sources":["effects/AsciiEffect.js"],"names":["define","threex","effects","AsciiEffect","renderer","charSet","options","undefined","width","height","bResolution","iScale","bColor","bAlpha","bBlock","bInvert","domElement","document","createElement","style","cursor","iWidth","iHeight","oImg","oAscii","appendChild","this","setSize","w","h","Math","round","fResolution","oCanvas","backgroundColor","rows","cells","color","cellSpacing","cellPadding","oStyle","display","whiteSpace","margin","padding","letterSpacing","fLetterSpacing","fontFamily","strFont","fontSize","fFontSize","lineHeight","fLineHeight","textAlign","textDecoration","initAsciiSize","render","scene","camera","canvasRenderer","oCtx","clearRect","drawImage","oCanvasImg","oImgData","getImageData","data","strChars","y","x","iCharIdx","fBrightness","iOffset","iRed","iGreen","iBlue","iAlpha","floor","aCharList","length","strThisChar","innerHTML","asciifyImage","aDefaultCharList","split","aDefaultColorCharList","getContext"],"mappings":"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","file":"../../effects/AsciiEffect.js","sourcesContent":["define([\r\n    \"../threex\",\r\n], function (threex) {\r\n    'use strict';\r\n    var AsciiEffect = function (renderer, charSet, options) {\r\n        charSet = charSet === undefined ? ' .:-=+*#%@' : charSet;\r\n        if (!options)\r\n            options = {};\r\n        var bResolution = !options['resolution'] ? 0.15 : options['resolution'];\r\n        var iScale = !options['scale'] ? 1 : options['scale'];\r\n        var bColor = !options['color'] ? false : options['color'];\r\n        var bAlpha = !options['alpha'] ? false : options['alpha'];\r\n        var bBlock = !options['block'] ? false : options['block'];\r\n        var bInvert = !options['invert'] ? false : options['invert'];\r\n        var strResolution = 'low';\r\n        var width, height;\r\n        var domElement = document.createElement('div');\r\n        domElement.style.cursor = 'default';\r\n        var oAscii = document.createElement('table');\r\n        domElement.appendChild(oAscii);\r\n        var iWidth, iHeight;\r\n        var oImg;\r\n        this.setSize = function (w, h) {\r\n            width = w;\r\n            height = h;\r\n            renderer.setSize(w, h);\r\n            initAsciiSize();\r\n        };\r\n        this.render = function (scene, camera) {\r\n            renderer.render(scene, camera);\r\n            asciifyImage(renderer, oAscii);\r\n        };\r\n        this.domElement = domElement;\r\n        function initAsciiSize() {\r\n            iWidth = Math.round(width * fResolution);\r\n            iHeight = Math.round(height * fResolution);\r\n            oCanvas.width = iWidth;\r\n            oCanvas.height = iHeight;\r\n            oImg = renderer.domElement;\r\n            if (oImg.style.backgroundColor) {\r\n                oAscii.rows[0].cells[0].style.backgroundColor = oImg.style.backgroundColor;\r\n                oAscii.rows[0].cells[0].style.color = oImg.style.color;\r\n            }\r\n            oAscii.cellSpacing = 0;\r\n            oAscii.cellPadding = 0;\r\n            var oStyle = oAscii.style;\r\n            oStyle.display = 'inline';\r\n            oStyle.width = Math.round(iWidth / fResolution * iScale) + 'px';\r\n            oStyle.height = Math.round(iHeight / fResolution * iScale) + 'px';\r\n            oStyle.whiteSpace = 'pre';\r\n            oStyle.margin = '0px';\r\n            oStyle.padding = '0px';\r\n            oStyle.letterSpacing = fLetterSpacing + 'px';\r\n            oStyle.fontFamily = strFont;\r\n            oStyle.fontSize = fFontSize + 'px';\r\n            oStyle.lineHeight = fLineHeight + 'px';\r\n            oStyle.textAlign = 'left';\r\n            oStyle.textDecoration = 'none';\r\n        }\r\n        var aDefaultCharList = ' .,:;i1tfLCG08@'.split('');\r\n        var aDefaultColorCharList = ' CGO08@'.split('');\r\n        var strFont = 'courier new, monospace';\r\n        var oCanvasImg = renderer.domElement;\r\n        var oCanvas = document.createElement('canvas');\r\n        if (!oCanvas.getContext) {\r\n            return;\r\n        }\r\n        var oCtx = oCanvas.getContext('2d');\r\n        if (!oCtx.getImageData) {\r\n            return;\r\n        }\r\n        var aCharList = bColor ? aDefaultColorCharList : aDefaultCharList;\r\n        if (charSet)\r\n            aCharList = charSet;\r\n        var fResolution = 0.5;\r\n        switch (strResolution) {\r\n        case 'low':\r\n            fResolution = 0.25;\r\n            break;\r\n        case 'medium':\r\n            fResolution = 0.5;\r\n            break;\r\n        case 'high':\r\n            fResolution = 1;\r\n            break;\r\n        }\r\n        if (bResolution)\r\n            fResolution = bResolution;\r\n        var fFontSize = 2 / fResolution * iScale;\r\n        var fLineHeight = 2 / fResolution * iScale;\r\n        var fLetterSpacing = 0;\r\n        if (strResolution == 'low') {\r\n            switch (iScale) {\r\n            case 1:\r\n                fLetterSpacing = -1;\r\n                break;\r\n            case 2:\r\n            case 3:\r\n                fLetterSpacing = -2.1;\r\n                break;\r\n            case 4:\r\n                fLetterSpacing = -3.1;\r\n                break;\r\n            case 5:\r\n                fLetterSpacing = -4.15;\r\n                break;\r\n            }\r\n        }\r\n        if (strResolution == 'medium') {\r\n            switch (iScale) {\r\n            case 1:\r\n                fLetterSpacing = 0;\r\n                break;\r\n            case 2:\r\n                fLetterSpacing = -1;\r\n                break;\r\n            case 3:\r\n                fLetterSpacing = -1.04;\r\n                break;\r\n            case 4:\r\n            case 5:\r\n                fLetterSpacing = -2.1;\r\n                break;\r\n            }\r\n        }\r\n        if (strResolution == 'high') {\r\n            switch (iScale) {\r\n            case 1:\r\n            case 2:\r\n                fLetterSpacing = 0;\r\n                break;\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n                fLetterSpacing = -1;\r\n                break;\r\n            }\r\n        }\r\n        function asciifyImage(canvasRenderer, oAscii) {\r\n            oCtx.clearRect(0, 0, iWidth, iHeight);\r\n            oCtx.drawImage(oCanvasImg, 0, 0, iWidth, iHeight);\r\n            var oImgData = oCtx.getImageData(0, 0, iWidth, iHeight).data;\r\n            var strChars = '';\r\n            for (var y = 0; y < iHeight; y += 2) {\r\n                for (var x = 0; x < iWidth; x++) {\r\n                    var iOffset = (y * iWidth + x) * 4;\r\n                    var iRed = oImgData[iOffset];\r\n                    var iGreen = oImgData[iOffset + 1];\r\n                    var iBlue = oImgData[iOffset + 2];\r\n                    var iAlpha = oImgData[iOffset + 3];\r\n                    var iCharIdx;\r\n                    var fBrightness;\r\n                    fBrightness = (0.3 * iRed + 0.59 * iGreen + 0.11 * iBlue) / 255;\r\n                    if (iAlpha == 0) {\r\n                        fBrightness = 1;\r\n                    }\r\n                    iCharIdx = Math.floor((1 - fBrightness) * (aCharList.length - 1));\r\n                    if (bInvert) {\r\n                        iCharIdx = aCharList.length - iCharIdx - 1;\r\n                    }\r\n                    var strThisChar = aCharList[iCharIdx];\r\n                    if (strThisChar === undefined || strThisChar == ' ')\r\n                        strThisChar = '&nbsp;';\r\n                    if (bColor) {\r\n                        strChars += \"<span style='\" + 'color:rgb(' + iRed + ',' + iGreen + ',' + iBlue + ');' + (bBlock ? 'background-color:rgb(' + iRed + ',' + iGreen + ',' + iBlue + ');' : '') + (bAlpha ? 'opacity:' + iAlpha / 255 + ';' : '') + \"'>\" + strThisChar + '</span>';\r\n                    } else {\r\n                        strChars += strThisChar;\r\n                    }\r\n                }\r\n                strChars += '<br/>';\r\n            }\r\n            oAscii.innerHTML = '<tr><td>' + strChars + '</td></tr>';\r\n        }\r\n    };\r\n\r\n    return threex.effects.AsciiEffect = AsciiEffect;\r\n});"]}