{"version":3,"sources":["effects/AnaglyphEffect.js"],"names":["define","THREE","threex","effects","AnaglyphEffect","renderer","width","height","this","colorMatrixLeft","Matrix3","fromArray","colorMatrixRight","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","undefined","_renderTargetL","WebGLRenderTarget","_renderTargetR","_material","ShaderMaterial","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","Mesh","PlaneBufferGeometry","add","setSize","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aAsHA,OAAOA,EAAOC,QAAQC,eArHD,SAAUC,EAAUC,EAAOC,GAC5CC,KAAKC,iBAAkB,IAAIR,EAAMS,SAAUC,WACvC,oBACC,qBACD,sBACC,qBACA,uBACA,sBACA,mBACD,uBACC,wBAELH,KAAKI,kBAAmB,IAAIX,EAAMS,SAAUC,YACvC,mBACA,mBACD,qBACC,mBACD,mBACC,mBACD,sBACC,oBACD,mBAEJ,IAAIE,EAAU,IAAIZ,EAAMa,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACxDC,EAAS,IAAId,EAAMe,MACnBC,EAAU,IAAIhB,EAAMiB,aACpBC,GACAC,UAAWnB,EAAMoB,aACjBC,UAAWrB,EAAMsB,cACjBC,OAAQvB,EAAMwB,iBAEJC,IAAVpB,IACAA,EAAQ,UACGoB,IAAXnB,IACAA,EAAS,KACb,IAAIoB,EAAiB,IAAI1B,EAAM2B,kBAAkBtB,EAAOC,EAAQY,GAC5DU,EAAiB,IAAI5B,EAAM2B,kBAAkBtB,EAAOC,EAAQY,GAC5DW,EAAY,IAAI7B,EAAM8B,gBACtBC,UACIC,SAAaC,MAAOP,EAAeQ,SACnCC,UAAcF,MAAOL,EAAeM,SACpC1B,iBAAqByB,MAAO1B,KAAKC,iBACjCG,kBAAsBsB,MAAO1B,KAAKI,mBAEtCyB,cACI,oBACA,gBACA,8BACA,8EACA,KACFC,KAAK,MACPC,gBACI,6BACA,8BACA,oBACA,gCACA,iCACA,yBACA,6CACA,qDACA,IACA,uBACA,4DACA,IACA,yBACA,sCACA,6CACA,IACA,gBACA,mBACA,mDACA,oDACA,wBACA,uCACA,iDACA,yBACA,wDACA,qCACA,KACFD,KAAK,QAEPE,EAAQ,IAAIvC,EAAMwC,KAAK,IAAIxC,EAAMyC,oBAAoB,EAAG,GAAIZ,GAChEf,EAAO4B,IAAIH,GACXhC,KAAKoC,QAAU,SAAUtC,EAAOC,GAC5BF,EAASuC,QAAQtC,EAAOC,GACxB,IAAIsC,EAAaxC,EAASyC,gBAC1BnB,EAAeiB,QAAQtC,EAAQuC,EAAYtC,EAASsC,GACpDhB,EAAee,QAAQtC,EAAQuC,EAAYtC,EAASsC,IAExDrC,KAAKuC,OAAS,SAAUC,EAAOC,GAC3B,IAAIC,EAAsB7C,EAAS8C,kBACnCH,EAAMI,oBACgB,OAAlBH,EAAOI,QACPJ,EAAOG,oBACXnC,EAAQqC,OAAOL,GACf5C,EAASkD,gBAAgB5B,GACzBtB,EAASmD,QACTnD,EAAS0C,OAAOC,EAAO/B,EAAQwC,SAC/BpD,EAASkD,gBAAgB1B,GACzBxB,EAASmD,QACTnD,EAAS0C,OAAOC,EAAO/B,EAAQyC,SAC/BrD,EAASkD,gBAAgB,MACzBlD,EAAS0C,OAAOhC,EAAQF,GACxBR,EAASkD,gBAAgBL,IAE7B1C,KAAKmD,QAAU,WACPhC,GACAA,EAAegC,UACf9B,GACAA,EAAe8B,UACfnB,GACAA,EAAMoB,SAASD,UACf7B,GACAA,EAAU6B","file":"../../effects/AnaglyphEffect.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var AnaglyphEffect = function (renderer, width, height) {\r\n        this.colorMatrixLeft = new THREE.Matrix3().fromArray([\r\n            1.0671679973602295,\r\n            -0.0016435992438346148,\r\n            0.0001777536963345483,\r\n            -0.028107794001698494,\r\n            -0.00019593400065787137,\r\n            -0.0002875397040043026,\r\n            -0.04279090091586113,\r\n            0.000015809757314855233,\r\n            -0.00024287120322696865\r\n        ]);\r\n        this.colorMatrixRight = new THREE.Matrix3().fromArray([\r\n            -0.0355340838432312,\r\n            -0.06440307199954987,\r\n            0.018319187685847282,\r\n            -0.10269022732973099,\r\n            0.8079727292060852,\r\n            -0.04835830628871918,\r\n            0.0001224992738571018,\r\n            -0.009558862075209618,\r\n            0.567823588848114\r\n        ]);\r\n        var _camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n        var _scene = new THREE.Scene();\r\n        var _stereo = new THREE.StereoCamera();\r\n        var _params = {\r\n            minFilter: THREE.LinearFilter,\r\n            magFilter: THREE.NearestFilter,\r\n            format: THREE.RGBAFormat\r\n        };\r\n        if (width === undefined)\r\n            width = 512;\r\n        if (height === undefined)\r\n            height = 512;\r\n        var _renderTargetL = new THREE.WebGLRenderTarget(width, height, _params);\r\n        var _renderTargetR = new THREE.WebGLRenderTarget(width, height, _params);\r\n        var _material = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                'mapLeft': { value: _renderTargetL.texture },\r\n                'mapRight': { value: _renderTargetR.texture },\r\n                'colorMatrixLeft': { value: this.colorMatrixLeft },\r\n                'colorMatrixRight': { value: this.colorMatrixRight }\r\n            },\r\n            vertexShader: [\r\n                'varying vec2 vUv;',\r\n                'void main() {',\r\n                '\\tvUv = vec2( uv.x, uv.y );',\r\n                '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n                '}'\r\n            ].join('\\n'),\r\n            fragmentShader: [\r\n                'uniform sampler2D mapLeft;',\r\n                'uniform sampler2D mapRight;',\r\n                'varying vec2 vUv;',\r\n                'uniform mat3 colorMatrixLeft;',\r\n                'uniform mat3 colorMatrixRight;',\r\n                'float lin( float c ) {',\r\n                '\\treturn c <= 0.04045 ? c * 0.0773993808 :',\r\n                '\\t\\t\\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );',\r\n                '}',\r\n                'vec4 lin( vec4 c ) {',\r\n                '\\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );',\r\n                '}',\r\n                'float dev( float c ) {',\r\n                '\\treturn c <= 0.0031308 ? c * 12.92',\r\n                '\\t\\t\\t: pow( c, 0.41666 ) * 1.055 - 0.055;',\r\n                '}',\r\n                'void main() {',\r\n                '\\tvec2 uv = vUv;',\r\n                '\\tvec4 colorL = lin( texture2D( mapLeft, uv ) );',\r\n                '\\tvec4 colorR = lin( texture2D( mapRight, uv ) );',\r\n                '\\tvec3 color = clamp(',\r\n                '\\t\\t\\tcolorMatrixLeft * colorL.rgb +',\r\n                '\\t\\t\\tcolorMatrixRight * colorR.rgb, 0., 1. );',\r\n                '\\tgl_FragColor = vec4(',\r\n                '\\t\\t\\tdev( color.r ), dev( color.g ), dev( color.b ),',\r\n                '\\t\\t\\tmax( colorL.a, colorR.a ) );',\r\n                '}'\r\n            ].join('\\n')\r\n        });\r\n        var _mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), _material);\r\n        _scene.add(_mesh);\r\n        this.setSize = function (width, height) {\r\n            renderer.setSize(width, height);\r\n            var pixelRatio = renderer.getPixelRatio();\r\n            _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\r\n            _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\r\n        };\r\n        this.render = function (scene, camera) {\r\n            var currentRenderTarget = renderer.getRenderTarget();\r\n            scene.updateMatrixWorld();\r\n            if (camera.parent === null)\r\n                camera.updateMatrixWorld();\r\n            _stereo.update(camera);\r\n            renderer.setRenderTarget(_renderTargetL);\r\n            renderer.clear();\r\n            renderer.render(scene, _stereo.cameraL);\r\n            renderer.setRenderTarget(_renderTargetR);\r\n            renderer.clear();\r\n            renderer.render(scene, _stereo.cameraR);\r\n            renderer.setRenderTarget(null);\r\n            renderer.render(_scene, _camera);\r\n            renderer.setRenderTarget(currentRenderTarget);\r\n        };\r\n        this.dispose = function () {\r\n            if (_renderTargetL)\r\n                _renderTargetL.dispose();\r\n            if (_renderTargetR)\r\n                _renderTargetR.dispose();\r\n            if (_mesh)\r\n                _mesh.geometry.dispose();\r\n            if (_material)\r\n                _material.dispose();\r\n        };\r\n    };\r\n\r\n    return threex.effects.AnaglyphEffect = AnaglyphEffect;\r\n});"]}