{"version":3,"sources":["effects/AnaglyphEffect.js"],"names":["define","THREE","AnaglyphEffect","renderer","width","height","this","colorMatrixLeft","Matrix3","fromArray","colorMatrixRight","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","undefined","_renderTargetL","WebGLRenderTarget","_renderTargetR","_material","ShaderMaterial","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","Mesh","PlaneBufferGeometry","add","setSize","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAsKV,OA9JAA,EAAMC,eAAiB,SAAWC,EAAUC,EAAOC,GAKlDC,KAAKC,iBAAkB,IAAIN,EAAMO,SAAUC,WAE1C,oBAAsB,qBAAuB,sBAC3C,qBAAwB,uBAA0B,sBAClD,mBAAqB,uBAA2B,wBAMnDH,KAAKI,kBAAmB,IAAIT,EAAMO,SAAUC,YAEzC,mBAAsB,mBAAqB,qBAC3C,mBAAqB,mBAAsB,mBAC7C,sBAAyB,oBAAsB,mBAIhD,IAAIE,EAAU,IAAIV,EAAMW,oBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAE3DC,EAAS,IAAIZ,EAAMa,MAEnBC,EAAU,IAAId,EAAMe,aAEpBC,GAAYC,UAAWjB,EAAMkB,aAAcC,UAAWnB,EAAMoB,cAAeC,OAAQrB,EAAMsB,iBAE9EC,IAAVpB,IAAsBA,EAAQ,UACnBoB,IAAXnB,IAAuBA,EAAS,KAErC,IAAIoB,EAAiB,IAAIxB,EAAMyB,kBAAmBtB,EAAOC,EAAQY,GAC7DU,EAAiB,IAAI1B,EAAMyB,kBAAmBtB,EAAOC,EAAQY,GAE7DW,EAAY,IAAI3B,EAAM4B,gBAEzBC,UAECC,SAAaC,MAAOP,EAAeQ,SACnCC,UAAcF,MAAOL,EAAeM,SAEpC1B,iBAAqByB,MAAO1B,KAAKC,iBACjCG,kBAAsBsB,MAAO1B,KAAKI,mBAInCyB,cAEC,oBAEA,gBAEA,8BACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,6BACA,8BACA,oBAEA,gCACA,iCAIA,yBACA,6CACA,qDACA,IAEA,uBACA,4DACA,IAEA,yBACA,sCACA,6CACA,IAGA,gBAEA,mBAEA,mDACA,oDAEA,wBACA,uCACA,iDAEA,yBACA,wDACA,qCAEA,KAECD,KAAM,QAILE,EAAQ,IAAIrC,EAAMsC,KAAM,IAAItC,EAAMuC,oBAAqB,EAAG,GAAKZ,GACnEf,EAAO4B,IAAKH,GAEZhC,KAAKoC,QAAU,SAAWtC,EAAOC,GAEhCF,EAASuC,QAAStC,EAAOC,GAEzB,IAAIsC,EAAaxC,EAASyC,gBAE1BnB,EAAeiB,QAAStC,EAAQuC,EAAYtC,EAASsC,GACrDhB,EAAee,QAAStC,EAAQuC,EAAYtC,EAASsC,IAItDrC,KAAKuC,OAAS,SAAWC,EAAOC,GAE/B,IAAIC,EAAsB7C,EAAS8C,kBAEnCH,EAAMI,oBAEiB,OAAlBH,EAAOI,QAAkBJ,EAAOG,oBAErCnC,EAAQqC,OAAQL,GAEhB5C,EAASkD,gBAAiB5B,GAC1BtB,EAASmD,QACTnD,EAAS0C,OAAQC,EAAO/B,EAAQwC,SAEhCpD,EAASkD,gBAAiB1B,GAC1BxB,EAASmD,QACTnD,EAAS0C,OAAQC,EAAO/B,EAAQyC,SAEhCrD,EAASkD,gBAAiB,MAC1BlD,EAAS0C,OAAQhC,EAAQF,GAEzBR,EAASkD,gBAAiBL,IAI3B1C,KAAKmD,QAAU,WAEThC,GAAiBA,EAAegC,UAChC9B,GAAiBA,EAAe8B,UAChCnB,GAAQA,EAAMoB,SAASD,UACvB7B,GAAYA,EAAU6B,YAKtBxD,EAAMC","file":"../../effects/AnaglyphEffect.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author marklundin / http://mark-lundin.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author tschw\n\t */\n\n\tTHREE.AnaglyphEffect = function ( renderer, width, height ) {\n\n\t\t// Matrices generated with angler.js https://github.com/tschw/angler.js/\n\t\t// (in column-major element order, as accepted by WebGL)\n\n\t\tthis.colorMatrixLeft = new THREE.Matrix3().fromArray( [\n\n\t\t\t1.0671679973602295, - 0.0016435992438346148, 0.0001777536963345483, // r out\n\t\t\t- 0.028107794001698494, - 0.00019593400065787137, - 0.0002875397040043026, // g out\n\t\t\t- 0.04279090091586113, 0.000015809757314855233, - 0.00024287120322696865 // b out\n\n\t\t] );\n\n\t\t//\t\tred\t\t\t\t\t\tgreen \t\t\t\t\t\tblue  \t\t\t\t\t\tin\n\n\t\tthis.colorMatrixRight = new THREE.Matrix3().fromArray( [\n\n\t\t\t- 0.0355340838432312, - 0.06440307199954987, 0.018319187685847282, // r out\n\t\t\t- 0.10269022732973099, 0.8079727292060852, - 0.04835830628871918, // g out\n\t\t\t0.0001224992738571018, - 0.009558862075209618, 0.567823588848114 // b out\n\n\t\t] );\n\n\t\tvar _camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\tvar _scene = new THREE.Scene();\n\n\t\tvar _stereo = new THREE.StereoCamera();\n\n\t\tvar _params = { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\tif ( width === undefined ) width = 512;\n\t\tif ( height === undefined ) height = 512;\n\n\t\tvar _renderTargetL = new THREE.WebGLRenderTarget( width, height, _params );\n\t\tvar _renderTargetR = new THREE.WebGLRenderTarget( width, height, _params );\n\n\t\tvar _material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\n\t\t\t\t\"mapLeft\": { value: _renderTargetL.texture },\n\t\t\t\t\"mapRight\": { value: _renderTargetR.texture },\n\n\t\t\t\t\"colorMatrixLeft\": { value: this.colorMatrixLeft },\n\t\t\t\t\"colorMatrixRight\": { value: this.colorMatrixRight }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvUv = vec2( uv.x, uv.y );\",\n\t\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D mapLeft;\",\n\t\t\t\t\"uniform sampler2D mapRight;\",\n\t\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\t\"uniform mat3 colorMatrixLeft;\",\n\t\t\t\t\"uniform mat3 colorMatrixRight;\",\n\n\t\t\t\t// These functions implement sRGB linearization and gamma correction\n\n\t\t\t\t\"float lin( float c ) {\",\n\t\t\t\t\"\treturn c <= 0.04045 ? c * 0.0773993808 :\",\n\t\t\t\t\"\t\t\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"vec4 lin( vec4 c ) {\",\n\t\t\t\t\"\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );\",\n\t\t\t\t\"}\",\n\n\t\t\t\t\"float dev( float c ) {\",\n\t\t\t\t\"\treturn c <= 0.0031308 ? c * 12.92\",\n\t\t\t\t\"\t\t\t: pow( c, 0.41666 ) * 1.055 - 0.055;\",\n\t\t\t\t\"}\",\n\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec2 uv = vUv;\",\n\n\t\t\t\t\"\tvec4 colorL = lin( texture2D( mapLeft, uv ) );\",\n\t\t\t\t\"\tvec4 colorR = lin( texture2D( mapRight, uv ) );\",\n\n\t\t\t\t\"\tvec3 color = clamp(\",\n\t\t\t\t\"\t\t\tcolorMatrixLeft * colorL.rgb +\",\n\t\t\t\t\"\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );\",\n\n\t\t\t\t\"\tgl_FragColor = vec4(\",\n\t\t\t\t\"\t\t\tdev( color.r ), dev( color.g ), dev( color.b ),\",\n\t\t\t\t\"\t\t\tmax( colorL.a, colorR.a ) );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" )\n\n\t\t} );\n\n\t\tvar _mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), _material );\n\t\t_scene.add( _mesh );\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t\tvar pixelRatio = renderer.getPixelRatio();\n\n\t\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tscene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.setRenderTarget( _renderTargetL );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setRenderTarget( _renderTargetR );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( _scene, _camera );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tif ( _renderTargetL ) _renderTargetL.dispose();\n\t\t\tif ( _renderTargetR ) _renderTargetR.dispose();\n\t\t\tif ( _mesh ) _mesh.geometry.dispose();\n\t\t\tif ( _material ) _material.dispose();\n\n\t\t};\n\n\t};\n\treturn THREE.AnaglyphEffect;\n});\n"]}