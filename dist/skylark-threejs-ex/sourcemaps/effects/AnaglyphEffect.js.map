{"version":3,"sources":["effects/AnaglyphEffect.js"],"names":["define","THREE","threex","effects","AnaglyphEffect","renderer","width","height","this","colorMatrixLeft","Matrix3","fromArray","colorMatrixRight","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","undefined","_renderTargetL","WebGLRenderTarget","_renderTargetR","_material","ShaderMaterial","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","Mesh","PlaneBufferGeometry","add","setSize","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aAsHA,OAAOA,EAAOC,QAAQC,eArHD,SAAUC,EAAUC,EAAOC,GAC5CC,KAAKC,iBAAkB,IAAIR,EAAMS,SAAUC,WACvC,oBACC,qBACD,sBACC,qBACA,uBACA,sBACA,mBACD,uBACC,wBAELH,KAAKI,kBAAmB,IAAIX,EAAMS,SAAUC,YACvC,mBACA,mBACD,qBACC,mBACD,mBACC,mBACD,sBACC,oBACD,mBAEJ,IAAIE,EAAU,IAAIZ,EAAMa,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACxDC,EAAS,IAAId,EAAMe,MACnBC,EAAU,IAAIhB,EAAMiB,aACpBC,GACAC,UAAWnB,EAAMoB,aACjBC,UAAWrB,EAAMsB,cACjBC,OAAQvB,EAAMwB,iBAEJC,IAAVpB,IACAA,EAAQ,UACGoB,IAAXnB,IACAA,EAAS,KACb,IAAIoB,EAAiB,IAAI1B,EAAM2B,kBAAkBtB,EAAOC,EAAQY,GAC5DU,EAAiB,IAAI5B,EAAM2B,kBAAkBtB,EAAOC,EAAQY,GAC5DW,EAAY,IAAI7B,EAAM8B,gBACtBC,UACIC,SAAaC,MAAOP,EAAeQ,SACnCC,UAAcF,MAAOL,EAAeM,SACpC1B,iBAAqByB,MAAO1B,KAAKC,iBACjCG,kBAAsBsB,MAAO1B,KAAKI,mBAEtCyB,cACI,oBACA,gBACA,8BACA,8EACA,KACFC,KAAK,MACPC,gBACI,6BACA,8BACA,oBACA,gCACA,iCACA,yBACA,6CACA,qDACA,IACA,uBACA,4DACA,IACA,yBACA,sCACA,6CACA,IACA,gBACA,mBACA,mDACA,oDACA,wBACA,uCACA,iDACA,yBACA,wDACA,qCACA,KACFD,KAAK,QAEPE,EAAQ,IAAIvC,EAAMwC,KAAK,IAAIxC,EAAMyC,oBAAoB,EAAG,GAAIZ,GAChEf,EAAO4B,IAAIH,GACXhC,KAAKoC,QAAU,SAAUtC,EAAOC,GAC5BF,EAASuC,QAAQtC,EAAOC,GACxB,IAAIsC,EAAaxC,EAASyC,gBAC1BnB,EAAeiB,QAAQtC,EAAQuC,EAAYtC,EAASsC,GACpDhB,EAAee,QAAQtC,EAAQuC,EAAYtC,EAASsC,IAExDrC,KAAKuC,OAAS,SAAUC,EAAOC,GAC3B,IAAIC,EAAsB7C,EAAS8C,kBACnCH,EAAMI,oBACgB,OAAlBH,EAAOI,QACPJ,EAAOG,oBACXnC,EAAQqC,OAAOL,GACf5C,EAASkD,gBAAgB5B,GACzBtB,EAASmD,QACTnD,EAAS0C,OAAOC,EAAO/B,EAAQwC,SAC/BpD,EAASkD,gBAAgB1B,GACzBxB,EAASmD,QACTnD,EAAS0C,OAAOC,EAAO/B,EAAQyC,SAC/BrD,EAASkD,gBAAgB,MACzBlD,EAAS0C,OAAOhC,EAAQF,GACxBR,EAASkD,gBAAgBL,IAE7B1C,KAAKmD,QAAU,WACPhC,GACAA,EAAegC,UACf9B,GACAA,EAAe8B,UACfnB,GACAA,EAAMoB,SAASD,UACf7B,GACAA,EAAU6B","file":"../../effects/AnaglyphEffect.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var AnaglyphEffect = function (renderer, width, height) {\n        this.colorMatrixLeft = new THREE.Matrix3().fromArray([\n            1.0671679973602295,\n            -0.0016435992438346148,\n            0.0001777536963345483,\n            -0.028107794001698494,\n            -0.00019593400065787137,\n            -0.0002875397040043026,\n            -0.04279090091586113,\n            0.000015809757314855233,\n            -0.00024287120322696865\n        ]);\n        this.colorMatrixRight = new THREE.Matrix3().fromArray([\n            -0.0355340838432312,\n            -0.06440307199954987,\n            0.018319187685847282,\n            -0.10269022732973099,\n            0.8079727292060852,\n            -0.04835830628871918,\n            0.0001224992738571018,\n            -0.009558862075209618,\n            0.567823588848114\n        ]);\n        var _camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        var _scene = new THREE.Scene();\n        var _stereo = new THREE.StereoCamera();\n        var _params = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n        };\n        if (width === undefined)\n            width = 512;\n        if (height === undefined)\n            height = 512;\n        var _renderTargetL = new THREE.WebGLRenderTarget(width, height, _params);\n        var _renderTargetR = new THREE.WebGLRenderTarget(width, height, _params);\n        var _material = new THREE.ShaderMaterial({\n            uniforms: {\n                'mapLeft': { value: _renderTargetL.texture },\n                'mapRight': { value: _renderTargetR.texture },\n                'colorMatrixLeft': { value: this.colorMatrixLeft },\n                'colorMatrixRight': { value: this.colorMatrixRight }\n            },\n            vertexShader: [\n                'varying vec2 vUv;',\n                'void main() {',\n                '\\tvUv = vec2( uv.x, uv.y );',\n                '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'uniform sampler2D mapLeft;',\n                'uniform sampler2D mapRight;',\n                'varying vec2 vUv;',\n                'uniform mat3 colorMatrixLeft;',\n                'uniform mat3 colorMatrixRight;',\n                'float lin( float c ) {',\n                '\\treturn c <= 0.04045 ? c * 0.0773993808 :',\n                '\\t\\t\\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );',\n                '}',\n                'vec4 lin( vec4 c ) {',\n                '\\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );',\n                '}',\n                'float dev( float c ) {',\n                '\\treturn c <= 0.0031308 ? c * 12.92',\n                '\\t\\t\\t: pow( c, 0.41666 ) * 1.055 - 0.055;',\n                '}',\n                'void main() {',\n                '\\tvec2 uv = vUv;',\n                '\\tvec4 colorL = lin( texture2D( mapLeft, uv ) );',\n                '\\tvec4 colorR = lin( texture2D( mapRight, uv ) );',\n                '\\tvec3 color = clamp(',\n                '\\t\\t\\tcolorMatrixLeft * colorL.rgb +',\n                '\\t\\t\\tcolorMatrixRight * colorR.rgb, 0., 1. );',\n                '\\tgl_FragColor = vec4(',\n                '\\t\\t\\tdev( color.r ), dev( color.g ), dev( color.b ),',\n                '\\t\\t\\tmax( colorL.a, colorR.a ) );',\n                '}'\n            ].join('\\n')\n        });\n        var _mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), _material);\n        _scene.add(_mesh);\n        this.setSize = function (width, height) {\n            renderer.setSize(width, height);\n            var pixelRatio = renderer.getPixelRatio();\n            _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n            _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n        };\n        this.render = function (scene, camera) {\n            var currentRenderTarget = renderer.getRenderTarget();\n            scene.updateMatrixWorld();\n            if (camera.parent === null)\n                camera.updateMatrixWorld();\n            _stereo.update(camera);\n            renderer.setRenderTarget(_renderTargetL);\n            renderer.clear();\n            renderer.render(scene, _stereo.cameraL);\n            renderer.setRenderTarget(_renderTargetR);\n            renderer.clear();\n            renderer.render(scene, _stereo.cameraR);\n            renderer.setRenderTarget(null);\n            renderer.render(_scene, _camera);\n            renderer.setRenderTarget(currentRenderTarget);\n        };\n        this.dispose = function () {\n            if (_renderTargetL)\n                _renderTargetL.dispose();\n            if (_renderTargetR)\n                _renderTargetR.dispose();\n            if (_mesh)\n                _mesh.geometry.dispose();\n            if (_material)\n                _material.dispose();\n        };\n    };\n\n    return threex.effects.AnaglyphEffect = AnaglyphEffect;\n});"]}