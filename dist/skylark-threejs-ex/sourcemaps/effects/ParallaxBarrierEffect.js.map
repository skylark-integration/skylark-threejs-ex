{"version":3,"sources":["effects/ParallaxBarrierEffect.js"],"names":["define","THREE","ParallaxBarrierEffect","renderer","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","_renderTargetL","WebGLRenderTarget","_renderTargetR","_material","ShaderMaterial","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","mesh","Mesh","PlaneBufferGeometry","add","this","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAyGV,OAlGAA,EAAMC,sBAAwB,SAAWC,GAExC,IAAIC,EAAU,IAAIH,EAAMI,oBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAE3DC,EAAS,IAAIL,EAAMM,MAEnBC,EAAU,IAAIP,EAAMQ,aAEpBC,GAAYC,UAAWV,EAAMW,aAAcC,UAAWZ,EAAMa,cAAeC,OAAQd,EAAMe,YAEzFC,EAAiB,IAAIhB,EAAMiB,kBAAmB,IAAK,IAAKR,GACxDS,EAAiB,IAAIlB,EAAMiB,kBAAmB,IAAK,IAAKR,GAExDU,EAAY,IAAInB,EAAMoB,gBAEzBC,UAECC,SAAaC,MAAOP,EAAeQ,SACnCC,UAAcF,MAAOL,EAAeM,UAIrCE,cAEC,oBAEA,gBAEA,8BACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,6BACA,8BACA,oBAEA,gBAEA,mBAEA,mDAEA,+CAEA,aAEA,gDAEA,MAEA,KAECD,KAAM,QAILE,EAAO,IAAI7B,EAAM8B,KAAM,IAAI9B,EAAM+B,oBAAqB,EAAG,GAAKZ,GAClEd,EAAO2B,IAAKH,GAEZI,KAAKC,QAAU,SAAWC,EAAOC,GAEhClC,EAASgC,QAASC,EAAOC,GAEzB,IAAIC,EAAanC,EAASoC,gBAE1BtB,EAAekB,QAASC,EAAQE,EAAYD,EAASC,GACrDnB,EAAegB,QAASC,EAAQE,EAAYD,EAASC,IAItDJ,KAAKM,OAAS,SAAWC,EAAOC,GAE/BD,EAAME,oBAEiB,OAAlBD,EAAOE,QAAkBF,EAAOC,oBAErCnC,EAAQqC,OAAQH,GAEhBvC,EAAS2C,gBAAiB7B,GAC1Bd,EAAS4C,QACT5C,EAASqC,OAAQC,EAAOjC,EAAQwC,SAEhC7C,EAAS2C,gBAAiB3B,GAC1BhB,EAAS4C,QACT5C,EAASqC,OAAQC,EAAOjC,EAAQyC,SAEhC9C,EAAS2C,gBAAiB,MAC1B3C,EAASqC,OAAQlC,EAAQF,KAMpBH,EAAMC","file":"../../effects/ParallaxBarrierEffect.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author marklundin / http://mark-lundin.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.ParallaxBarrierEffect = function ( renderer ) {\n\n\t\tvar _camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\tvar _scene = new THREE.Scene();\n\n\t\tvar _stereo = new THREE.StereoCamera();\n\n\t\tvar _params = { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\tvar _renderTargetL = new THREE.WebGLRenderTarget( 512, 512, _params );\n\t\tvar _renderTargetR = new THREE.WebGLRenderTarget( 512, 512, _params );\n\n\t\tvar _material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\n\t\t\t\t\"mapLeft\": { value: _renderTargetL.texture },\n\t\t\t\t\"mapRight\": { value: _renderTargetR.texture }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvUv = vec2( uv.x, uv.y );\",\n\t\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D mapLeft;\",\n\t\t\t\t\"uniform sampler2D mapRight;\",\n\t\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec2 uv = vUv;\",\n\n\t\t\t\t\"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\",\n\n\t\t\t\t\"\t\tgl_FragColor = texture2D( mapLeft, uv );\",\n\n\t\t\t\t\"\t} else {\",\n\n\t\t\t\t\"\t\tgl_FragColor = texture2D( mapRight, uv );\",\n\n\t\t\t\t\"\t}\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" )\n\n\t\t} );\n\n\t\tvar mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), _material );\n\t\t_scene.add( mesh );\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t\tvar pixelRatio = renderer.getPixelRatio();\n\n\t\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tscene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.setRenderTarget( _renderTargetL );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setRenderTarget( _renderTargetR );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( _scene, _camera );\n\n\t\t};\n\n\t};\n\t\n\treturn THREE.ParallaxBarrierEffect;\n});\n"]}