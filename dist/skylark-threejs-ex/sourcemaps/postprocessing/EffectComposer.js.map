{"version":3,"sources":["postprocessing/EffectComposer.js"],"names":["define","THREE","EffectComposer","renderer","renderTarget","this","undefined","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","CopyShader","console","error","ShaderPass","copyPass","clock","Clock","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","MaskPass","ClearMaskPass","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"mappings":"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","file":"../../postprocessing/EffectComposer.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/CopyShader\",\n\t\"./ShaderPass\",\n\t\"./MaskPass\"\n],function(THREE){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.EffectComposer = function ( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar parameters = {\n\t\t\t\tminFilter: THREE.LinearFilter,\n\t\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\t\tformat: THREE.RGBAFormat,\n\t\t\t\tstencilBuffer: false\n\t\t\t};\n\n\t\t\tvar size = renderer.getSize( new THREE.Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new THREE.WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( THREE.CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on THREE.CopyShader' );\n\n\t\t}\n\n\t\tif ( THREE.ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on THREE.ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\n\n\t\tthis.clock = new THREE.Clock();\n\n\t};\n\n\tObject.assign( THREE.EffectComposer.prototype, {\n\n\t\tswapBuffers: function () {\n\n\t\t\tvar tmp = this.readBuffer;\n\t\t\tthis.readBuffer = this.writeBuffer;\n\t\t\tthis.writeBuffer = tmp;\n\n\t\t},\n\n\t\taddPass: function ( pass ) {\n\n\t\t\tthis.passes.push( pass );\n\t\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t},\n\n\t\tinsertPass: function ( pass, index ) {\n\n\t\t\tthis.passes.splice( index, 0, pass );\n\n\t\t},\n\n\t\tisLastEnabledPass: function ( passIndex ) {\n\n\t\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\trender: function ( deltaTime ) {\n\n\t\t\t// deltaTime value is in seconds\n\n\t\t\tif ( deltaTime === undefined ) {\n\n\t\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\t\tvar maskActive = false;\n\n\t\t\tvar pass, i, il = this.passes.length;\n\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tpass = this.passes[ i ];\n\n\t\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.swapBuffers();\n\n\t\t\t\t}\n\n\t\t\t\tif ( THREE.MaskPass !== undefined ) {\n\n\t\t\t\t\tif ( pass instanceof THREE.MaskPass ) {\n\n\t\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\n\n\t\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t\t},\n\n\t\treset: function ( renderTarget ) {\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\tvar size = this.renderer.getSize( new THREE.Vector2() );\n\t\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\t\tthis._width = size.width;\n\t\t\t\tthis._height = size.height;\n\n\t\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t\t}\n\n\t\t\tthis.renderTarget1.dispose();\n\t\t\tthis.renderTarget2.dispose();\n\t\t\tthis.renderTarget1 = renderTarget;\n\t\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis._width = width;\n\t\t\tthis._height = height;\n\n\t\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\t\tthis._pixelRatio = pixelRatio;\n\n\t\t\tthis.setSize( this._width, this._height );\n\n\t\t}\n\n\t} );\n\n\n\t\n\treturn THREE.EffectComposer;\n});\n"]}