{"version":3,"sources":["postprocessing/TexturePass.js"],"names":["define","THREE","TexturePass","map","opacity","Pass","call","this","undefined","CopyShader","console","error","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","depthTest","depthWrite","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","value","transparent","setRenderTarget","renderToScreen","clear"],"mappings":";;;;;;;AAAAA,QACC,kBACA,wBACA,UACC,SAASC,GA4DV,OAvDAA,EAAMC,YAAc,SAAWC,EAAKC,GAEnCH,EAAMI,KAAKC,KAAMC,WAESC,IAArBP,EAAMQ,YACVC,QAAQC,MAAO,gDAEhB,IAAIC,EAASX,EAAMQ,WAEnBF,KAAKJ,IAAMA,EACXI,KAAKH,aAAwBI,IAAZJ,EAA0BA,EAAU,EAErDG,KAAKM,SAAWZ,EAAMa,cAAcC,MAAOH,EAAOC,UAElDN,KAAKS,SAAW,IAAIf,EAAMgB,gBAEzBJ,SAAUN,KAAKM,SACfK,aAAcN,EAAOM,aACrBC,eAAgBP,EAAOO,eACvBC,WAAW,EACXC,YAAY,IAIbd,KAAKe,WAAY,EAEjBf,KAAKgB,OAAS,IAAItB,EAAMI,KAAKmB,eAAgB,OAI9CvB,EAAMC,YAAYuB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQ3B,EAAMI,KAAKoB,YAEtEI,YAAa5B,EAAMC,YAEnB4B,OAAQ,SAAWC,EAAUC,EAAaC,GAEzC,IAAIC,EAAeH,EAASI,UAC5BJ,EAASI,WAAY,EAErB5B,KAAKgB,OAAOP,SAAWT,KAAKS,SAE5BT,KAAKM,SAAoB,QAAEuB,MAAQ7B,KAAKH,QACxCG,KAAKM,SAAqB,SAAEuB,MAAQ7B,KAAKJ,IACzCI,KAAKS,SAASqB,YAAgB9B,KAAKH,QAAU,EAE7C2B,EAASO,gBAAiB/B,KAAKgC,eAAiB,KAAON,GAClD1B,KAAKiC,OAAQT,EAASS,QAC3BjC,KAAKgB,OAAOO,OAAQC,GAEpBA,EAASI,UAAYD,KAMhBjC,EAAMC","file":"../../postprocessing/TexturePass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/CopyShader\",\n\t\"./Pass\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.TexturePass = function ( map, opacity ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.TexturePass relies on THREE.CopyShader\" );\n\n\t\tvar shader = THREE.CopyShader;\n\n\t\tthis.map = map;\n\t\tthis.opacity = ( opacity !== undefined ) ? opacity : 1.0;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n\t};\n\n\tTHREE.TexturePass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.TexturePass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tthis.fsQuad.material = this.material;\n\n\t\t\tthis.uniforms[ \"opacity\" ].value = this.opacity;\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = this.map;\n\t\t\tthis.material.transparent = ( this.opacity < 1.0 );\n\n\t\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.TexturePass;\n});\n"]}