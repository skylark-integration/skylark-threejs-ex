{"version":3,"sources":["postprocessing/TexturePass.js"],"names":["define","THREE","Pass","CopyShader","TexturePass","map","opacity","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","depthTest","depthWrite","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","value","transparent","setRenderTarget","renderToScreen","clear"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACA,yBACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAc,SAAUC,EAAKC,GAC7BJ,EAAKK,KAAKC,WACSC,IAAfN,GACAO,QAAQC,MAAM,oCAClB,IAAIC,EAAST,EACbK,KAAKH,IAAMA,EACXG,KAAKF,aAAsBG,IAAZH,EAAwBA,EAAU,EACjDE,KAAKK,SAAWZ,EAAMa,cAAcC,MAAMH,EAAOC,UACjDL,KAAKQ,SAAW,IAAIf,EAAMgB,gBACtBJ,SAAUL,KAAKK,SACfK,aAAcN,EAAOM,aACrBC,eAAgBP,EAAOO,eACvBC,WAAW,EACXC,YAAY,IAEhBb,KAAKc,WAAY,EACjBd,KAAKe,OAAS,IAAIrB,EAAKsB,eAAe,OAkB1C,OAhBApB,EAAYqB,UAAYC,OAAOC,OAAOD,OAAOE,OAAO1B,EAAKuB,YACrDI,YAAazB,EACb0B,OAAQ,SAAUC,EAAUC,EAAaC,GACrC,IAAIC,EAAeH,EAASI,UAC5BJ,EAASI,WAAY,EACrB3B,KAAKe,OAAOP,SAAWR,KAAKQ,SAC5BR,KAAKK,SAAkB,QAAEuB,MAAQ5B,KAAKF,QACtCE,KAAKK,SAAmB,SAAEuB,MAAQ5B,KAAKH,IACvCG,KAAKQ,SAASqB,YAAc7B,KAAKF,QAAU,EAC3CyB,EAASO,gBAAgB9B,KAAK+B,eAAiB,KAAON,GAClDzB,KAAKgC,OACLT,EAASS,QACbhC,KAAKe,OAAOO,OAAOC,GACnBA,EAASI,UAAYD,KAGtB9B","file":"../../postprocessing/TexturePass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../postprocessing/Pass',\n    '../shaders/CopyShader'\n], function (\n    THREE, \n    Pass, \n    CopyShader\n) {\n    'use strict';\n    var TexturePass = function (map, opacity) {\n        Pass.call(this);\n        if (CopyShader === undefined)\n            console.error('TexturePass relies on CopyShader');\n        var shader = CopyShader;\n        this.map = map;\n        this.opacity = opacity !== undefined ? opacity : 1;\n        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            depthTest: false,\n            depthWrite: false\n        });\n        this.needsSwap = false;\n        this.fsQuad = new Pass.FullScreenQuad(null);\n    };\n    TexturePass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: TexturePass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            this.fsQuad.material = this.material;\n            this.uniforms['opacity'].value = this.opacity;\n            this.uniforms['tDiffuse'].value = this.map;\n            this.material.transparent = this.opacity < 1;\n            renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n            if (this.clear)\n                renderer.clear();\n            this.fsQuad.render(renderer);\n            renderer.autoClear = oldAutoClear;\n        }\n    });\n    return TexturePass;\n});"]}