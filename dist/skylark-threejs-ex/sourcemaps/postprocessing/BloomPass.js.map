{"version":3,"sources":["postprocessing/BloomPass.js"],"names":["define","THREE","threex","Pass","CopyShader","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","call","this","undefined","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetX","WebGLRenderTarget","texture","name","renderTargetY","console","error","copyShader","copyUniforms","UniformsUtils","clone","uniforms","value","materialCopy","ShaderMaterial","vertexShader","fragmentShader","blending","AdditiveBlending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","Vector2","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,yBACA,wBACA,gCACD,SACCC,EACAC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,EAAUC,EAAYC,EAAOC,GACnDP,EAAKQ,KAAKC,MACVL,OAAwBM,IAAbN,EAAyBA,EAAW,EAC/CC,OAA4BK,IAAfL,EAA2BA,EAAa,GACrDC,OAAkBI,IAAVJ,EAAsBA,EAAQ,EACtCC,OAA4BG,IAAfH,EAA2BA,EAAa,IACrD,IAAII,GACAC,UAAWd,EAAMe,aACjBC,UAAWhB,EAAMe,aACjBE,OAAQjB,EAAMkB,YAElBP,KAAKQ,cAAgB,IAAInB,EAAMoB,kBAAkBX,EAAYA,EAAYI,GACzEF,KAAKQ,cAAcE,QAAQC,KAAO,cAClCX,KAAKY,cAAgB,IAAIvB,EAAMoB,kBAAkBX,EAAYA,EAAYI,GACzEF,KAAKY,cAAcF,QAAQC,KAAO,mBACfV,IAAfT,GACAqB,QAAQC,MAAM,kCAClB,IAAIC,EAAavB,EACjBQ,KAAKgB,aAAe3B,EAAM4B,cAAcC,MAAMH,EAAWI,UACzDnB,KAAKgB,aAAsB,QAAEI,MAAQzB,EACrCK,KAAKqB,aAAe,IAAIhC,EAAMiC,gBAC1BH,SAAUnB,KAAKgB,aACfO,aAAcR,EAAWQ,aACzBC,eAAgBT,EAAWS,eAC3BC,SAAUpC,EAAMqC,iBAChBC,aAAa,SAES1B,IAAtBR,GACAoB,QAAQC,MAAM,yCAClB,IAAIc,EAAoBnC,EACxBO,KAAK6B,oBAAsBxC,EAAM4B,cAAcC,MAAMU,EAAkBT,UACvEnB,KAAK6B,oBAAqC,gBAAET,MAAQ1B,EAAUoC,MAC9D9B,KAAK6B,oBAA6B,QAAET,MAAQ3B,EAAkBsC,YAAYlC,GAC1EG,KAAKgC,oBAAsB,IAAI3C,EAAMiC,gBACjCH,SAAUnB,KAAK6B,oBACfN,aAAcK,EAAkBL,aAChCC,eAAgBI,EAAkBJ,eAClCS,SACIC,kBAAqBtC,EAAWuC,QAAQ,GACxCC,gBAAmBxC,EAAWuC,QAAQ,MAG9CnC,KAAKqC,WAAY,EACjBrC,KAAKsC,OAAS,IAAI/C,EAAKgD,eAAe,OA+B1C,OA7BA7C,EAAU8C,UAAYC,OAAOC,OAAOD,OAAOE,OAAOpD,EAAKiD,YACnDI,YAAalD,EACbmD,OAAQ,SAAUC,EAAUC,EAAaC,EAAYC,EAAWC,GACxDA,GACAJ,EAASK,MAAMC,QAAQC,QAAQC,SAAQ,GAC3CtD,KAAKsC,OAAOiB,SAAWvD,KAAKgC,oBAC5BhC,KAAK6B,oBAA8B,SAAET,MAAQ4B,EAAWtC,QACxDV,KAAK6B,oBAAqC,gBAAET,MAAQ1B,EAAUoC,MAC9DgB,EAASU,gBAAgBxD,KAAKQ,eAC9BsC,EAASW,QACTzD,KAAKsC,OAAOO,OAAOC,GACnB9C,KAAK6B,oBAA8B,SAAET,MAAQpB,KAAKQ,cAAcE,QAChEV,KAAK6B,oBAAqC,gBAAET,MAAQ1B,EAAUgE,MAC9DZ,EAASU,gBAAgBxD,KAAKY,eAC9BkC,EAASW,QACTzD,KAAKsC,OAAOO,OAAOC,GACnB9C,KAAKsC,OAAOiB,SAAWvD,KAAKqB,aAC5BrB,KAAKgB,aAAuB,SAAEI,MAAQpB,KAAKY,cAAcF,QACrDwC,GACAJ,EAASK,MAAMC,QAAQC,QAAQC,SAAQ,GAC3CR,EAASU,gBAAgBR,GACrBhD,KAAKyD,OACLX,EAASW,QACbzD,KAAKsC,OAAOO,OAAOC,MAG3BpD,EAAUoC,MAAQ,IAAIzC,EAAMsE,QAAQ,WAAa,GACjDjE,EAAUgE,MAAQ,IAAIrE,EAAMsE,QAAQ,EAAG,YAEhCrE,EAAOsE,eAAelE,UAAYA","file":"../../postprocessing/BloomPass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../postprocessing/Pass',\r\n    '../shaders/CopyShader',\r\n    '../shaders/ConvolutionShader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    Pass, \r\n    CopyShader, \r\n    ConvolutionShader\r\n) {\r\n    'use strict';\r\n    var BloomPass = function (strength, kernelSize, sigma, resolution) {\r\n        Pass.call(this);\r\n        strength = strength !== undefined ? strength : 1;\r\n        kernelSize = kernelSize !== undefined ? kernelSize : 25;\r\n        sigma = sigma !== undefined ? sigma : 4;\r\n        resolution = resolution !== undefined ? resolution : 256;\r\n        var pars = {\r\n            minFilter: THREE.LinearFilter,\r\n            magFilter: THREE.LinearFilter,\r\n            format: THREE.RGBAFormat\r\n        };\r\n        this.renderTargetX = new THREE.WebGLRenderTarget(resolution, resolution, pars);\r\n        this.renderTargetX.texture.name = 'BloomPass.x';\r\n        this.renderTargetY = new THREE.WebGLRenderTarget(resolution, resolution, pars);\r\n        this.renderTargetY.texture.name = 'BloomPass.y';\r\n        if (CopyShader === undefined)\r\n            console.error('BloomPass relies on CopyShader');\r\n        var copyShader = CopyShader;\r\n        this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\r\n        this.copyUniforms['opacity'].value = strength;\r\n        this.materialCopy = new THREE.ShaderMaterial({\r\n            uniforms: this.copyUniforms,\r\n            vertexShader: copyShader.vertexShader,\r\n            fragmentShader: copyShader.fragmentShader,\r\n            blending: THREE.AdditiveBlending,\r\n            transparent: true\r\n        });\r\n        if (ConvolutionShader === undefined)\r\n            console.error('BloomPass relies on ConvolutionShader');\r\n        var convolutionShader = ConvolutionShader;\r\n        this.convolutionUniforms = THREE.UniformsUtils.clone(convolutionShader.uniforms);\r\n        this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\r\n        this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\r\n        this.materialConvolution = new THREE.ShaderMaterial({\r\n            uniforms: this.convolutionUniforms,\r\n            vertexShader: convolutionShader.vertexShader,\r\n            fragmentShader: convolutionShader.fragmentShader,\r\n            defines: {\r\n                'KERNEL_SIZE_FLOAT': kernelSize.toFixed(1),\r\n                'KERNEL_SIZE_INT': kernelSize.toFixed(0)\r\n            }\r\n        });\r\n        this.needsSwap = false;\r\n        this.fsQuad = new Pass.FullScreenQuad(null);\r\n    };\r\n    BloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: BloomPass,\r\n        render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\r\n            if (maskActive)\r\n                renderer.state.buffers.stencil.setTest(false);\r\n            this.fsQuad.material = this.materialConvolution;\r\n            this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\r\n            this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\r\n            renderer.setRenderTarget(this.renderTargetX);\r\n            renderer.clear();\r\n            this.fsQuad.render(renderer);\r\n            this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\r\n            this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\r\n            renderer.setRenderTarget(this.renderTargetY);\r\n            renderer.clear();\r\n            this.fsQuad.render(renderer);\r\n            this.fsQuad.material = this.materialCopy;\r\n            this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\r\n            if (maskActive)\r\n                renderer.state.buffers.stencil.setTest(true);\r\n            renderer.setRenderTarget(readBuffer);\r\n            if (this.clear)\r\n                renderer.clear();\r\n            this.fsQuad.render(renderer);\r\n        }\r\n    });\r\n    BloomPass.blurX = new THREE.Vector2(0.001953125, 0);\r\n    BloomPass.blurY = new THREE.Vector2(0, 0.001953125);\r\n\r\n    return threex.postprocessing.BloomPass = BloomPass;\r\n});"]}