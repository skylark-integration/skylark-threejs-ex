{"version":3,"sources":["postprocessing/BloomPass.js"],"names":["define","THREE","CopyShader","ConvolutionShader","Pass","BloomPass","strength","kernelSize","sigma","resolution","call","this","undefined","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetX","WebGLRenderTarget","texture","name","renderTargetY","console","error","copyShader","copyUniforms","UniformsUtils","clone","uniforms","value","materialCopy","ShaderMaterial","vertexShader","fragmentShader","blending","AdditiveBlending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","Vector2"],"mappings":"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","file":"../../postprocessing/BloomPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/CopyShader\",\n\t \"../shaders/ConvolutionShader\",\n\t\"./Pass\"\n],function(THREE,CopyShader,ConvolutionShader,Pass){\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.BloomPass = function ( strength, kernelSize, sigma, resolution ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tstrength = ( strength !== undefined ) ? strength : 1;\n\t\tkernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;\n\t\tsigma = ( sigma !== undefined ) ? sigma : 4.0;\n\t\tresolution = ( resolution !== undefined ) ? resolution : 256;\n\n\t\t// render targets\n\n\t\tvar pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n\n\t\tthis.renderTargetX = new THREE.WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetX.texture.name = \"BloomPass.x\";\n\t\tthis.renderTargetY = new THREE.WebGLRenderTarget( resolution, resolution, pars );\n\t\tthis.renderTargetY.texture.name = \"BloomPass.y\";\n\n\t\t// copy material\n\n\t\tif ( THREE.CopyShader === undefined )\n\t\t\tconsole.error( \"THREE.BloomPass relies on THREE.CopyShader\" );\n\n\t\tvar copyShader = THREE.CopyShader;\n\n\t\tthis.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.copyUniforms[ \"opacity\" ].value = strength;\n\n\t\tthis.materialCopy = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tif ( THREE.ConvolutionShader === undefined )\n\t\t\tconsole.error( \"THREE.BloomPass relies on THREE.ConvolutionShader\" );\n\n\t\tvar convolutionShader = THREE.ConvolutionShader;\n\n\t\tthis.convolutionUniforms = THREE.UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurX;\n\t\tthis.convolutionUniforms[ \"cKernel\" ].value = THREE.ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader: convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_SIZE_FLOAT\": kernelSize.toFixed( 1 ),\n\t\t\t\t\"KERNEL_SIZE_INT\": kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n\t};\n\n\tTHREE.BloomPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.BloomPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurX;\n\n\t\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\n\t\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = this.renderTargetX.texture;\n\t\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = THREE.BloomPass.blurY;\n\n\t\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Render original scene with superimposed blur to texture\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\n\t\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetY.texture;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t} );\n\n\tTHREE.BloomPass.blurX = new THREE.Vector2( 0.001953125, 0.0 );\n\tTHREE.BloomPass.blurY = new THREE.Vector2( 0.0, 0.001953125 );\n\t\n\treturn THREE.BloomPass;\n});\n"]}