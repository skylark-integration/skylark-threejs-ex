{"version":3,"sources":["postprocessing/BloomPass.js"],"names":["define","THREE","threex","Pass","CopyShader","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","call","this","undefined","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetX","WebGLRenderTarget","texture","name","renderTargetY","console","error","copyShader","copyUniforms","UniformsUtils","clone","uniforms","value","materialCopy","ShaderMaterial","vertexShader","fragmentShader","blending","AdditiveBlending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","Vector2","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,yBACA,wBACA,gCACD,SACCC,EACAC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,EAAUC,EAAYC,EAAOC,GACnDP,EAAKQ,KAAKC,MACVL,OAAwBM,IAAbN,EAAyBA,EAAW,EAC/CC,OAA4BK,IAAfL,EAA2BA,EAAa,GACrDC,OAAkBI,IAAVJ,EAAsBA,EAAQ,EACtCC,OAA4BG,IAAfH,EAA2BA,EAAa,IACrD,IAAII,GACAC,UAAWd,EAAMe,aACjBC,UAAWhB,EAAMe,aACjBE,OAAQjB,EAAMkB,YAElBP,KAAKQ,cAAgB,IAAInB,EAAMoB,kBAAkBX,EAAYA,EAAYI,GACzEF,KAAKQ,cAAcE,QAAQC,KAAO,cAClCX,KAAKY,cAAgB,IAAIvB,EAAMoB,kBAAkBX,EAAYA,EAAYI,GACzEF,KAAKY,cAAcF,QAAQC,KAAO,mBACfV,IAAfT,GACAqB,QAAQC,MAAM,kCAClB,IAAIC,EAAavB,EACjBQ,KAAKgB,aAAe3B,EAAM4B,cAAcC,MAAMH,EAAWI,UACzDnB,KAAKgB,aAAsB,QAAEI,MAAQzB,EACrCK,KAAKqB,aAAe,IAAIhC,EAAMiC,gBAC1BH,SAAUnB,KAAKgB,aACfO,aAAcR,EAAWQ,aACzBC,eAAgBT,EAAWS,eAC3BC,SAAUpC,EAAMqC,iBAChBC,aAAa,SAES1B,IAAtBR,GACAoB,QAAQC,MAAM,yCAClB,IAAIc,EAAoBnC,EACxBO,KAAK6B,oBAAsBxC,EAAM4B,cAAcC,MAAMU,EAAkBT,UACvEnB,KAAK6B,oBAAqC,gBAAET,MAAQ1B,EAAUoC,MAC9D9B,KAAK6B,oBAA6B,QAAET,MAAQ3B,EAAkBsC,YAAYlC,GAC1EG,KAAKgC,oBAAsB,IAAI3C,EAAMiC,gBACjCH,SAAUnB,KAAK6B,oBACfN,aAAcK,EAAkBL,aAChCC,eAAgBI,EAAkBJ,eAClCS,SACIC,kBAAqBtC,EAAWuC,QAAQ,GACxCC,gBAAmBxC,EAAWuC,QAAQ,MAG9CnC,KAAKqC,WAAY,EACjBrC,KAAKsC,OAAS,IAAI/C,EAAKgD,eAAe,OA+B1C,OA7BA7C,EAAU8C,UAAYC,OAAOC,OAAOD,OAAOE,OAAOpD,EAAKiD,YACnDI,YAAalD,EACbmD,OAAQ,SAAUC,EAAUC,EAAaC,EAAYC,EAAWC,GACxDA,GACAJ,EAASK,MAAMC,QAAQC,QAAQC,SAAQ,GAC3CtD,KAAKsC,OAAOiB,SAAWvD,KAAKgC,oBAC5BhC,KAAK6B,oBAA8B,SAAET,MAAQ4B,EAAWtC,QACxDV,KAAK6B,oBAAqC,gBAAET,MAAQ1B,EAAUoC,MAC9DgB,EAASU,gBAAgBxD,KAAKQ,eAC9BsC,EAASW,QACTzD,KAAKsC,OAAOO,OAAOC,GACnB9C,KAAK6B,oBAA8B,SAAET,MAAQpB,KAAKQ,cAAcE,QAChEV,KAAK6B,oBAAqC,gBAAET,MAAQ1B,EAAUgE,MAC9DZ,EAASU,gBAAgBxD,KAAKY,eAC9BkC,EAASW,QACTzD,KAAKsC,OAAOO,OAAOC,GACnB9C,KAAKsC,OAAOiB,SAAWvD,KAAKqB,aAC5BrB,KAAKgB,aAAuB,SAAEI,MAAQpB,KAAKY,cAAcF,QACrDwC,GACAJ,EAASK,MAAMC,QAAQC,QAAQC,SAAQ,GAC3CR,EAASU,gBAAgBR,GACrBhD,KAAKyD,OACLX,EAASW,QACbzD,KAAKsC,OAAOO,OAAOC,MAG3BpD,EAAUoC,MAAQ,IAAIzC,EAAMsE,QAAQ,WAAa,GACjDjE,EAAUgE,MAAQ,IAAIrE,EAAMsE,QAAQ,EAAG,YAEhCrE,EAAOsE,eAAelE,UAAYA","file":"../../postprocessing/BloomPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    '../postprocessing/Pass',\n    '../shaders/CopyShader',\n    '../shaders/ConvolutionShader'\n], function (\n    THREE, \n    threex,\n    Pass, \n    CopyShader, \n    ConvolutionShader\n) {\n    'use strict';\n    var BloomPass = function (strength, kernelSize, sigma, resolution) {\n        Pass.call(this);\n        strength = strength !== undefined ? strength : 1;\n        kernelSize = kernelSize !== undefined ? kernelSize : 25;\n        sigma = sigma !== undefined ? sigma : 4;\n        resolution = resolution !== undefined ? resolution : 256;\n        var pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n        this.renderTargetX = new THREE.WebGLRenderTarget(resolution, resolution, pars);\n        this.renderTargetX.texture.name = 'BloomPass.x';\n        this.renderTargetY = new THREE.WebGLRenderTarget(resolution, resolution, pars);\n        this.renderTargetY.texture.name = 'BloomPass.y';\n        if (CopyShader === undefined)\n            console.error('BloomPass relies on CopyShader');\n        var copyShader = CopyShader;\n        this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n        this.copyUniforms['opacity'].value = strength;\n        this.materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.copyUniforms,\n            vertexShader: copyShader.vertexShader,\n            fragmentShader: copyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            transparent: true\n        });\n        if (ConvolutionShader === undefined)\n            console.error('BloomPass relies on ConvolutionShader');\n        var convolutionShader = ConvolutionShader;\n        this.convolutionUniforms = THREE.UniformsUtils.clone(convolutionShader.uniforms);\n        this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n        this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n        this.materialConvolution = new THREE.ShaderMaterial({\n            uniforms: this.convolutionUniforms,\n            vertexShader: convolutionShader.vertexShader,\n            fragmentShader: convolutionShader.fragmentShader,\n            defines: {\n                'KERNEL_SIZE_FLOAT': kernelSize.toFixed(1),\n                'KERNEL_SIZE_INT': kernelSize.toFixed(0)\n            }\n        });\n        this.needsSwap = false;\n        this.fsQuad = new Pass.FullScreenQuad(null);\n    };\n    BloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: BloomPass,\n        render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n            if (maskActive)\n                renderer.state.buffers.stencil.setTest(false);\n            this.fsQuad.material = this.materialConvolution;\n            this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n            this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n            renderer.setRenderTarget(this.renderTargetX);\n            renderer.clear();\n            this.fsQuad.render(renderer);\n            this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n            this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\n            renderer.setRenderTarget(this.renderTargetY);\n            renderer.clear();\n            this.fsQuad.render(renderer);\n            this.fsQuad.material = this.materialCopy;\n            this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\n            if (maskActive)\n                renderer.state.buffers.stencil.setTest(true);\n            renderer.setRenderTarget(readBuffer);\n            if (this.clear)\n                renderer.clear();\n            this.fsQuad.render(renderer);\n        }\n    });\n    BloomPass.blurX = new THREE.Vector2(0.001953125, 0);\n    BloomPass.blurY = new THREE.Vector2(0, 0.001953125);\n\n    return threex.postprocessing.BloomPass = BloomPass;\n});"]}