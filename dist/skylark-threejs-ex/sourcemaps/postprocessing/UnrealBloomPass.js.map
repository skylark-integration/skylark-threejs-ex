{"version":3,"sources":["postprocessing/UnrealBloomPass.js"],"names":["define","THREE","Pass","CopyShader","LuminosityHighPassShader","UnrealBloomPass","resolution","strength","radius","threshold","call","this","undefined","Vector2","x","y","clearColor","Color","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","WebGLRenderTarget","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","console","error","highPassShader","highPassUniforms","UniformsUtils","clone","uniforms","value","materialHighPassFilter","ShaderMaterial","vertexShader","fragmentShader","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","enabled","needsSwap","oldClearColor","oldClearAlpha","basic","MeshBasicMaterial","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius"],"mappings":"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","file":"../../postprocessing/UnrealBloomPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    './Pass',\n    '../shaders/CopyShader',\n    '../shaders/LuminosityHighPassShader'\n], function (\n    THREE, \n    Pass, \n    CopyShader, \n    LuminosityHighPassShader\n) {\n    'use strict';\n    var UnrealBloomPass = function (resolution, strength, radius, threshold) {\n        Pass.call(this);\n        this.strength = strength !== undefined ? strength : 1;\n        this.radius = radius;\n        this.threshold = threshold;\n        this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);\n        this.clearColor = new THREE.Color(0, 0, 0);\n        var pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n        this.renderTargetsHorizontal = [];\n        this.renderTargetsVertical = [];\n        this.nMips = 5;\n        var resx = Math.round(this.resolution.x / 2);\n        var resy = Math.round(this.resolution.y / 2);\n        this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n        this.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n        this.renderTargetBright.texture.generateMipmaps = false;\n        for (var i = 0; i < this.nMips; i++) {\n            var renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n            renderTargetHorizonal.texture.generateMipmaps = false;\n            this.renderTargetsHorizontal.push(renderTargetHorizonal);\n            var renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n            renderTargetVertical.texture.generateMipmaps = false;\n            this.renderTargetsVertical.push(renderTargetVertical);\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n        if (LuminosityHighPassShader === undefined)\n            console.error('UnrealBloomPass relies on LuminosityHighPassShader');\n        var highPassShader = LuminosityHighPassShader;\n        this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);\n        this.highPassUniforms['luminosityThreshold'].value = threshold;\n        this.highPassUniforms['smoothWidth'].value = 0.01;\n        this.materialHighPassFilter = new THREE.ShaderMaterial({\n            uniforms: this.highPassUniforms,\n            vertexShader: highPassShader.vertexShader,\n            fragmentShader: highPassShader.fragmentShader,\n            defines: {}\n        });\n        this.separableBlurMaterials = [];\n        var kernelSizeArray = [\n            3,\n            5,\n            7,\n            9,\n            11\n        ];\n        var resx = Math.round(this.resolution.x / 2);\n        var resy = Math.round(this.resolution.y / 2);\n        for (var i = 0; i < this.nMips; i++) {\n            this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n            this.separableBlurMaterials[i].uniforms['texSize'].value = new THREE.Vector2(resx, resy);\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n        this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n        this.compositeMaterial.uniforms['blurTexture1'].value = this.renderTargetsVertical[0].texture;\n        this.compositeMaterial.uniforms['blurTexture2'].value = this.renderTargetsVertical[1].texture;\n        this.compositeMaterial.uniforms['blurTexture3'].value = this.renderTargetsVertical[2].texture;\n        this.compositeMaterial.uniforms['blurTexture4'].value = this.renderTargetsVertical[3].texture;\n        this.compositeMaterial.uniforms['blurTexture5'].value = this.renderTargetsVertical[4].texture;\n        this.compositeMaterial.uniforms['bloomStrength'].value = strength;\n        this.compositeMaterial.uniforms['bloomRadius'].value = 0.1;\n        this.compositeMaterial.needsUpdate = true;\n        var bloomFactors = [\n            1,\n            0.8,\n            0.6,\n            0.4,\n            0.2\n        ];\n        this.compositeMaterial.uniforms['bloomFactors'].value = bloomFactors;\n        this.bloomTintColors = [\n            new THREE.Vector3(1, 1, 1),\n            new THREE.Vector3(1, 1, 1),\n            new THREE.Vector3(1, 1, 1),\n            new THREE.Vector3(1, 1, 1),\n            new THREE.Vector3(1, 1, 1)\n        ];\n        this.compositeMaterial.uniforms['bloomTintColors'].value = this.bloomTintColors;\n        if (CopyShader === undefined) {\n            console.error('UnrealBloomPass relies on CopyShader');\n        }\n        var copyShader = CopyShader;\n        this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n        this.copyUniforms['opacity'].value = 1;\n        this.materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.copyUniforms,\n            vertexShader: copyShader.vertexShader,\n            fragmentShader: copyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n            transparent: true\n        });\n        this.enabled = true;\n        this.needsSwap = false;\n        this.oldClearColor = new THREE.Color();\n        this.oldClearAlpha = 1;\n        this.basic = new THREE.MeshBasicMaterial();\n        this.fsQuad = new Pass.FullScreenQuad(null);\n    };\n    UnrealBloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: UnrealBloomPass,\n        dispose: function () {\n            for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n                this.renderTargetsHorizontal[i].dispose();\n            }\n            for (var i = 0; i < this.renderTargetsVertical.length; i++) {\n                this.renderTargetsVertical[i].dispose();\n            }\n            this.renderTargetBright.dispose();\n        },\n        setSize: function (width, height) {\n            var resx = Math.round(width / 2);\n            var resy = Math.round(height / 2);\n            this.renderTargetBright.setSize(resx, resy);\n            for (var i = 0; i < this.nMips; i++) {\n                this.renderTargetsHorizontal[i].setSize(resx, resy);\n                this.renderTargetsVertical[i].setSize(resx, resy);\n                this.separableBlurMaterials[i].uniforms['texSize'].value = new THREE.Vector2(resx, resy);\n                resx = Math.round(resx / 2);\n                resy = Math.round(resy / 2);\n            }\n        },\n        render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n            this.oldClearColor.copy(renderer.getClearColor());\n            this.oldClearAlpha = renderer.getClearAlpha();\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            renderer.setClearColor(this.clearColor, 0);\n            if (maskActive)\n                renderer.state.buffers.stencil.setTest(false);\n            if (this.renderToScreen) {\n                this.fsQuad.material = this.basic;\n                this.basic.map = readBuffer.texture;\n                renderer.setRenderTarget(null);\n                renderer.clear();\n                this.fsQuad.render(renderer);\n            }\n            this.highPassUniforms['tDiffuse'].value = readBuffer.texture;\n            this.highPassUniforms['luminosityThreshold'].value = this.threshold;\n            this.fsQuad.material = this.materialHighPassFilter;\n            renderer.setRenderTarget(this.renderTargetBright);\n            renderer.clear();\n            this.fsQuad.render(renderer);\n            var inputRenderTarget = this.renderTargetBright;\n            for (var i = 0; i < this.nMips; i++) {\n                this.fsQuad.material = this.separableBlurMaterials[i];\n                this.separableBlurMaterials[i].uniforms['colorTexture'].value = inputRenderTarget.texture;\n                this.separableBlurMaterials[i].uniforms['direction'].value = UnrealBloomPass.BlurDirectionX;\n                renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n                renderer.clear();\n                this.fsQuad.render(renderer);\n                this.separableBlurMaterials[i].uniforms['colorTexture'].value = this.renderTargetsHorizontal[i].texture;\n                this.separableBlurMaterials[i].uniforms['direction'].value = UnrealBloomPass.BlurDirectionY;\n                renderer.setRenderTarget(this.renderTargetsVertical[i]);\n                renderer.clear();\n                this.fsQuad.render(renderer);\n                inputRenderTarget = this.renderTargetsVertical[i];\n            }\n            this.fsQuad.material = this.compositeMaterial;\n            this.compositeMaterial.uniforms['bloomStrength'].value = this.strength;\n            this.compositeMaterial.uniforms['bloomRadius'].value = this.radius;\n            this.compositeMaterial.uniforms['bloomTintColors'].value = this.bloomTintColors;\n            renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n            renderer.clear();\n            this.fsQuad.render(renderer);\n            this.fsQuad.material = this.materialCopy;\n            this.copyUniforms['tDiffuse'].value = this.renderTargetsHorizontal[0].texture;\n            if (maskActive)\n                renderer.state.buffers.stencil.setTest(true);\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(readBuffer);\n                this.fsQuad.render(renderer);\n            }\n            renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n            renderer.autoClear = oldAutoClear;\n        },\n        getSeperableBlurMaterial: function (kernelRadius) {\n            return new THREE.ShaderMaterial({\n                defines: {\n                    'KERNEL_RADIUS': kernelRadius,\n                    'SIGMA': kernelRadius\n                },\n                uniforms: {\n                    'colorTexture': { value: null },\n                    'texSize': { value: new THREE.Vector2(0.5, 0.5) },\n                    'direction': { value: new THREE.Vector2(0.5, 0.5) }\n                },\n                vertexShader: 'varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}',\n                fragmentShader: '#include <common>\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D colorTexture;\\n\\t\\t\\t\\tuniform vec2 texSize;\\t\\t\\t\\tuniform vec2 direction;\\t\\t\\t\\t\\t\\t\\t\\tfloat gaussianPdf(in float x, in float sigma) {\\t\\t\\t\\t\\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\t\\t\\t\\t}\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec2 invSize = 1.0 / texSize;\\t\\t\\t\\t\\tfloat fSigma = float(SIGMA);\\t\\t\\t\\t\\tfloat weightSum = gaussianPdf(0.0, fSigma);\\t\\t\\t\\t\\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\t\\t\\t\\t\\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\t\\t\\t\\t\\t\\tfloat x = float(i);\\t\\t\\t\\t\\t\\tfloat w = gaussianPdf(x, fSigma);\\t\\t\\t\\t\\t\\tvec2 uvOffset = direction * invSize * x;\\t\\t\\t\\t\\t\\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\t\\t\\t\\t\\t\\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\t\\t\\t\\t\\t\\tdiffuseSum += (sample1 + sample2) * w;\\t\\t\\t\\t\\t\\tweightSum += 2.0 * w;\\t\\t\\t\\t\\t}\\t\\t\\t\\t\\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\t\\t\\t\\t}'\n            });\n        },\n        getCompositeMaterial: function (nMips) {\n            return new THREE.ShaderMaterial({\n                defines: { 'NUM_MIPS': nMips },\n                uniforms: {\n                    'blurTexture1': { value: null },\n                    'blurTexture2': { value: null },\n                    'blurTexture3': { value: null },\n                    'blurTexture4': { value: null },\n                    'blurTexture5': { value: null },\n                    'dirtTexture': { value: null },\n                    'bloomStrength': { value: 1 },\n                    'bloomFactors': { value: null },\n                    'bloomTintColors': { value: null },\n                    'bloomRadius': { value: 0 }\n                },\n                vertexShader: 'varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}',\n                fragmentShader: 'varying vec2 vUv;\\t\\t\\t\\tuniform sampler2D blurTexture1;\\t\\t\\t\\tuniform sampler2D blurTexture2;\\t\\t\\t\\tuniform sampler2D blurTexture3;\\t\\t\\t\\tuniform sampler2D blurTexture4;\\t\\t\\t\\tuniform sampler2D blurTexture5;\\t\\t\\t\\tuniform sampler2D dirtTexture;\\t\\t\\t\\tuniform float bloomStrength;\\t\\t\\t\\tuniform float bloomRadius;\\t\\t\\t\\tuniform float bloomFactors[NUM_MIPS];\\t\\t\\t\\tuniform vec3 bloomTintColors[NUM_MIPS];\\t\\t\\t\\t\\t\\t\\t\\tfloat lerpBloomFactor(const in float factor) { \\t\\t\\t\\t\\tfloat mirrorFactor = 1.2 - factor;\\t\\t\\t\\t\\treturn mix(factor, mirrorFactor, bloomRadius);\\t\\t\\t\\t}\\t\\t\\t\\t\\t\\t\\t\\tvoid main() {\\t\\t\\t\\t\\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\t\\t\\t\\t}'\n            });\n        }\n    });\n    UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1, 0);\n    UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0, 1);\n    return UnrealBloomPass;\n});"]}