{"version":3,"sources":["postprocessing/SAOPass.js"],"names":["define","THREE","threex","Pass","SAOShader","DepthLimitedBlurShader","CopyShader","UnpackDepthRGBAShader","SAOPass","scene","camera","depthTexture","useNormals","resolution","call","this","clear","needsSwap","supportsDepthTextureExtension","undefined","supportsNormalTexture","originalClearColor","Color","oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","Vector2","x","y","saoRenderTarget","WebGLRenderTarget","minFilter","LinearFilter","magFilter","format","RGBAFormat","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","NearestFilter","depthRenderTarget","DepthTexture","type","UnsignedShortType","maxFilter","depthBuffer","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","normalMaterial","MeshNormalMaterial","console","error","saoMaterial","ShaderMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","UniformsUtils","extensions","derivatives","isPerspectiveCamera","value","texture","set","getInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","CustomBlending","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","FullScreenQuad","OUTPUT","Beauty","Default","SAO","Depth","Normal","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","BlurShaderUtils","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height","postprocessing"],"mappings":"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","file":"../../postprocessing/SAOPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './Pass',\n    '../shaders/SAOShader',\n    '../shaders/DepthLimitedBlurShader',\n    '../shaders/CopyShader',\n    '../shaders/UnpackDepthRGBAShader'\n], function (\n    THREE, \n    threex,\n    Pass, \n    SAOShader, \n    DepthLimitedBlurShader, \n    CopyShader, \n    UnpackDepthRGBAShader\n) {\n    'use strict';\n    var SAOPass = function (scene, camera, depthTexture, useNormals, resolution) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.clear = true;\n        this.needsSwap = false;\n        this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n        this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n        this.originalClearColor = new THREE.Color();\n        this.oldClearColor = new THREE.Color();\n        this.oldClearAlpha = 1;\n        this.params = {\n            output: 0,\n            saoBias: 0.5,\n            saoIntensity: 0.18,\n            saoScale: 1,\n            saoKernelRadius: 100,\n            saoMinResolution: 0,\n            saoBlur: true,\n            saoBlurRadius: 8,\n            saoBlurStdDev: 4,\n            saoBlurDepthCutoff: 0.01\n        };\n        this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);\n        this.saoRenderTarget = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        });\n        this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n        this.beautyRenderTarget = this.saoRenderTarget.clone();\n        this.normalRenderTarget = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n        });\n        this.depthRenderTarget = this.normalRenderTarget.clone();\n        if (this.supportsDepthTextureExtension) {\n            var depthTexture = new THREE.DepthTexture();\n            depthTexture.type = THREE.UnsignedShortType;\n            depthTexture.minFilter = THREE.NearestFilter;\n            depthTexture.maxFilter = THREE.NearestFilter;\n            this.beautyRenderTarget.depthTexture = depthTexture;\n            this.beautyRenderTarget.depthBuffer = true;\n        }\n        this.depthMaterial = new THREE.MeshDepthMaterial();\n        this.depthMaterial.depthPacking = THREE.RGBADepthPacking;\n        this.depthMaterial.blending = THREE.NoBlending;\n        this.normalMaterial = new THREE.MeshNormalMaterial();\n        this.normalMaterial.blending = THREE.NoBlending;\n        if (SAOShader === undefined) {\n            console.error('THREE.SAOPass relies on SAOShader');\n        }\n        this.saoMaterial = new THREE.ShaderMaterial({\n            defines: Object.assign({}, SAOShader.defines),\n            fragmentShader: SAOShader.fragmentShader,\n            vertexShader: SAOShader.vertexShader,\n            uniforms: THREE.UniformsUtils.clone(SAOShader.uniforms)\n        });\n        this.saoMaterial.extensions.derivatives = true;\n        this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n        this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n        this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n        this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n        this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n        this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n        this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);\n        this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n        this.saoMaterial.blending = THREE.NoBlending;\n        if (DepthLimitedBlurShader === undefined) {\n            console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n        }\n        this.vBlurMaterial = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n            defines: Object.assign({}, DepthLimitedBlurShader.defines),\n            vertexShader: DepthLimitedBlurShader.vertexShader,\n            fragmentShader: DepthLimitedBlurShader.fragmentShader\n        });\n        this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n        this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n        this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n        this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n        this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n        this.vBlurMaterial.blending = THREE.NoBlending;\n        this.hBlurMaterial = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n            defines: Object.assign({}, DepthLimitedBlurShader.defines),\n            vertexShader: DepthLimitedBlurShader.vertexShader,\n            fragmentShader: DepthLimitedBlurShader.fragmentShader\n        });\n        this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n        this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n        this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n        this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n        this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n        this.hBlurMaterial.blending = THREE.NoBlending;\n        if (CopyShader === undefined) {\n            console.error('THREE.SAOPass relies on CopyShader');\n        }\n        this.materialCopy = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(CopyShader.uniforms),\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            blending: THREE.NoBlending\n        });\n        this.materialCopy.transparent = true;\n        this.materialCopy.depthTest = false;\n        this.materialCopy.depthWrite = false;\n        this.materialCopy.blending = THREE.CustomBlending;\n        this.materialCopy.blendSrc = THREE.DstColorFactor;\n        this.materialCopy.blendDst = THREE.ZeroFactor;\n        this.materialCopy.blendEquation = THREE.AddEquation;\n        this.materialCopy.blendSrcAlpha = THREE.DstAlphaFactor;\n        this.materialCopy.blendDstAlpha = THREE.ZeroFactor;\n        this.materialCopy.blendEquationAlpha = THREE.AddEquation;\n        if (UnpackDepthRGBAShader === undefined) {\n            console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n        }\n        this.depthCopy = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n            vertexShader: UnpackDepthRGBAShader.vertexShader,\n            fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n            blending: THREE.NoBlending\n        });\n        this.fsQuad = new Pass.FullScreenQuad(null);\n    };\n    SAOPass.OUTPUT = {\n        'Beauty': 1,\n        'Default': 0,\n        'SAO': 2,\n        'Depth': 3,\n        'Normal': 4\n    };\n    SAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: SAOPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            if (this.renderToScreen) {\n                this.materialCopy.blending = THREE.NoBlending;\n                this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n                this.materialCopy.needsUpdate = true;\n                this.renderPass(renderer, this.materialCopy, null);\n            }\n            if (this.params.output === 1) {\n                return;\n            }\n            this.oldClearColor.copy(renderer.getClearColor());\n            this.oldClearAlpha = renderer.getClearAlpha();\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            renderer.setRenderTarget(this.depthRenderTarget);\n            renderer.clear();\n            this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n            this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n            this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n            this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n            this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n            this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n            this.saoMaterial.uniforms['cameraFar'].value = this.camera.far;\n            var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n            this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n            this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n            this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n            this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n            this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n            this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n            this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n            if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n                BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new THREE.Vector2(0, 1));\n                BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new THREE.Vector2(1, 0));\n                this.prevStdDev = this.params.saoBlurStdDev;\n                this.prevNumSamples = this.params.saoBlurRadius;\n            }\n            renderer.setClearColor(0);\n            renderer.setRenderTarget(this.beautyRenderTarget);\n            renderer.clear();\n            renderer.render(this.scene, this.camera);\n            if (!this.supportsDepthTextureExtension) {\n                this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n            }\n            if (this.supportsNormalTexture) {\n                this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n            }\n            this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n            if (this.params.saoBlur) {\n                this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n                this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n            }\n            var outputMaterial = this.materialCopy;\n            if (this.params.output === 3) {\n                if (this.supportsDepthTextureExtension) {\n                    this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n                    this.materialCopy.needsUpdate = true;\n                } else {\n                    this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n                    this.depthCopy.needsUpdate = true;\n                    outputMaterial = this.depthCopy;\n                }\n            } else if (this.params.output === 4) {\n                this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n                this.materialCopy.needsUpdate = true;\n            } else {\n                this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n                this.materialCopy.needsUpdate = true;\n            }\n            if (this.params.output === 0) {\n                outputMaterial.blending = THREE.CustomBlending;\n            } else {\n                outputMaterial.blending = THREE.NoBlending;\n            }\n            this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n            renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n            renderer.autoClear = oldAutoClear;\n        },\n        renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n            this.originalClearColor.copy(renderer.getClearColor());\n            var originalClearAlpha = renderer.getClearAlpha();\n            var originalAutoClear = renderer.autoClear;\n            renderer.setRenderTarget(renderTarget);\n            renderer.autoClear = false;\n            if (clearColor !== undefined && clearColor !== null) {\n                renderer.setClearColor(clearColor);\n                renderer.setClearAlpha(clearAlpha || 0);\n                renderer.clear();\n            }\n            this.fsQuad.material = passMaterial;\n            this.fsQuad.render(renderer);\n            renderer.autoClear = originalAutoClear;\n            renderer.setClearColor(this.originalClearColor);\n            renderer.setClearAlpha(originalClearAlpha);\n        },\n        renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n            this.originalClearColor.copy(renderer.getClearColor());\n            var originalClearAlpha = renderer.getClearAlpha();\n            var originalAutoClear = renderer.autoClear;\n            renderer.setRenderTarget(renderTarget);\n            renderer.autoClear = false;\n            clearColor = overrideMaterial.clearColor || clearColor;\n            clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n            if (clearColor !== undefined && clearColor !== null) {\n                renderer.setClearColor(clearColor);\n                renderer.setClearAlpha(clearAlpha || 0);\n                renderer.clear();\n            }\n            this.scene.overrideMaterial = overrideMaterial;\n            renderer.render(this.scene, this.camera);\n            this.scene.overrideMaterial = null;\n            renderer.autoClear = originalAutoClear;\n            renderer.setClearColor(this.originalClearColor);\n            renderer.setClearAlpha(originalClearAlpha);\n        },\n        setSize: function (width, height) {\n            this.beautyRenderTarget.setSize(width, height);\n            this.saoRenderTarget.setSize(width, height);\n            this.blurIntermediateRenderTarget.setSize(width, height);\n            this.normalRenderTarget.setSize(width, height);\n            this.depthRenderTarget.setSize(width, height);\n            this.saoMaterial.uniforms['size'].value.set(width, height);\n            this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);\n            this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n            this.saoMaterial.needsUpdate = true;\n            this.vBlurMaterial.uniforms['size'].value.set(width, height);\n            this.vBlurMaterial.needsUpdate = true;\n            this.hBlurMaterial.uniforms['size'].value.set(width, height);\n            this.hBlurMaterial.needsUpdate = true;\n        }\n    });\n\n    return threex.postprocessing.SAOPass = SAOPass;\n});"]}