{"version":3,"sources":["postprocessing/SAOPass.js"],"names":["define","THREE","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","Pass","SAOPass","scene","camera","depthTexture","useNormals","resolution","call","this","clear","needsSwap","supportsDepthTextureExtension","undefined","supportsNormalTexture","originalClearColor","Color","oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","Vector2","x","y","saoRenderTarget","WebGLRenderTarget","minFilter","LinearFilter","magFilter","format","RGBAFormat","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","NearestFilter","depthRenderTarget","DepthTexture","type","UnsignedShortType","maxFilter","depthBuffer","depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","normalMaterial","MeshNormalMaterial","console","error","saoMaterial","ShaderMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","UniformsUtils","extensions","derivatives","isPerspectiveCamera","value","texture","set","getInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","CustomBlending","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","FullScreenQuad","OUTPUT","Beauty","Default","SAO","Depth","Normal","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height"],"mappings":"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","file":"../../postprocessing/SAOPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/SAOShader\",\n\t \"../shaders/DepthLimitedBlurShader\",\n\t\"../shaders/DepthLimitedBlurShader\",\n\t\"../shaders/CopyShader\",\n\t\"../shaders/UnpackDepthRGBAShader\",\n\t\"./Pass\"\n],function(THREE,SAOShader,DepthLimitedBlurShader,BlurShaderUtils,CopyShader,UnpackDepthRGBAShader,Pass){\n\t/**\n\t * @author ludobaka / ludobaka.github.io\n\t * SAO implementation inspired from bhouston previous SAO work\n\t */\n\n\tTHREE.SAOPass = function ( scene, camera, depthTexture, useNormals, resolution ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.supportsDepthTextureExtension = ( depthTexture !== undefined ) ? depthTexture : false;\n\t\tthis.supportsNormalTexture = ( useNormals !== undefined ) ? useNormals : false;\n\n\t\tthis.originalClearColor = new THREE.Color();\n\t\tthis.oldClearColor = new THREE.Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.params = {\n\t\t\toutput: 0,\n\t\t\tsaoBias: 0.5,\n\t\t\tsaoIntensity: 0.18,\n\t\t\tsaoScale: 1,\n\t\t\tsaoKernelRadius: 100,\n\t\t\tsaoMinResolution: 0,\n\t\t\tsaoBlur: true,\n\t\t\tsaoBlurRadius: 8,\n\t\t\tsaoBlurStdDev: 4,\n\t\t\tsaoBlurDepthCutoff: 0.01\n\t\t};\n\n\t\tthis.resolution = ( resolution !== undefined ) ? new THREE.Vector2( resolution.x, resolution.y ) : new THREE.Vector2( 256, 256 );\n\n\t\tthis.saoRenderTarget = new THREE.WebGLRenderTarget( this.resolution.x, this.resolution.y, {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat\n\t\t} );\n\t\tthis.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n\t\tthis.beautyRenderTarget = this.saoRenderTarget.clone();\n\n\t\tthis.normalRenderTarget = new THREE.WebGLRenderTarget( this.resolution.x, this.resolution.y, {\n\t\t\tminFilter: THREE.NearestFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tformat: THREE.RGBAFormat\n\t\t} );\n\t\tthis.depthRenderTarget = this.normalRenderTarget.clone();\n\n\t\tif ( this.supportsDepthTextureExtension ) {\n\n\t\t\tvar depthTexture = new THREE.DepthTexture();\n\t\t\tdepthTexture.type = THREE.UnsignedShortType;\n\t\t\tdepthTexture.minFilter = THREE.NearestFilter;\n\t\t\tdepthTexture.maxFilter = THREE.NearestFilter;\n\n\t\t\tthis.beautyRenderTarget.depthTexture = depthTexture;\n\t\t\tthis.beautyRenderTarget.depthBuffer = true;\n\n\t\t}\n\n\t\tthis.depthMaterial = new THREE.MeshDepthMaterial();\n\t\tthis.depthMaterial.depthPacking = THREE.RGBADepthPacking;\n\t\tthis.depthMaterial.blending = THREE.NoBlending;\n\n\t\tthis.normalMaterial = new THREE.MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = THREE.NoBlending;\n\n\t\tif ( THREE.SAOShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SAOPass relies on THREE.SAOShader' );\n\n\t\t}\n\n\t\tthis.saoMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, THREE.SAOShader.defines ),\n\t\t\tfragmentShader: THREE.SAOShader.fragmentShader,\n\t\t\tvertexShader: THREE.SAOShader.vertexShader,\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SAOShader.uniforms )\n\t\t} );\n\t\tthis.saoMaterial.extensions.derivatives = true;\n\t\tthis.saoMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\n\t\tthis.saoMaterial.defines[ 'NORMAL_TEXTURE' ] = this.supportsNormalTexture ? 1 : 0;\n\t\tthis.saoMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.saoMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\n\t\tthis.saoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.blending = THREE.NoBlending;\n\n\t\tif ( THREE.DepthLimitedBlurShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SAOPass relies on THREE.DepthLimitedBlurShader' );\n\n\t\t}\n\n\t\tthis.vBlurMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, THREE.DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: THREE.DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: THREE.DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.vBlurMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\n\t\tthis.vBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.vBlurMaterial.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\tthis.vBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.vBlurMaterial.blending = THREE.NoBlending;\n\n\t\tthis.hBlurMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, THREE.DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: THREE.DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: THREE.DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.hBlurMaterial.defines[ 'DEPTH_PACKING' ] = this.supportsDepthTextureExtension ? 0 : 1;\n\t\tthis.hBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.hBlurMaterial.uniforms[ 'tDiffuse' ].value = this.blurIntermediateRenderTarget.texture;\n\t\tthis.hBlurMaterial.uniforms[ 'tDepth' ].value = ( this.supportsDepthTextureExtension ) ? depthTexture : this.depthRenderTarget.texture;\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.hBlurMaterial.blending = THREE.NoBlending;\n\n\t\tif ( THREE.CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SAOPass relies on THREE.CopyShader' );\n\n\t\t}\n\n\t\tthis.materialCopy = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.CopyShader.uniforms ),\n\t\t\tvertexShader: THREE.CopyShader.vertexShader,\n\t\t\tfragmentShader: THREE.CopyShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending\n\t\t} );\n\t\tthis.materialCopy.transparent = true;\n\t\tthis.materialCopy.depthTest = false;\n\t\tthis.materialCopy.depthWrite = false;\n\t\tthis.materialCopy.blending = THREE.CustomBlending;\n\t\tthis.materialCopy.blendSrc = THREE.DstColorFactor;\n\t\tthis.materialCopy.blendDst = THREE.ZeroFactor;\n\t\tthis.materialCopy.blendEquation = THREE.AddEquation;\n\t\tthis.materialCopy.blendSrcAlpha = THREE.DstAlphaFactor;\n\t\tthis.materialCopy.blendDstAlpha = THREE.ZeroFactor;\n\t\tthis.materialCopy.blendEquationAlpha = THREE.AddEquation;\n\n\t\tif ( THREE.UnpackDepthRGBAShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SAOPass relies on THREE.UnpackDepthRGBAShader' );\n\n\t\t}\n\n\t\tthis.depthCopy = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.UnpackDepthRGBAShader.uniforms ),\n\t\t\tvertexShader: THREE.UnpackDepthRGBAShader.vertexShader,\n\t\t\tfragmentShader: THREE.UnpackDepthRGBAShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending\n\t\t} );\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n\t};\n\n\tTHREE.SAOPass.OUTPUT = {\n\t\t'Beauty': 1,\n\t\t'Default': 0,\n\t\t'SAO': 2,\n\t\t'Depth': 3,\n\t\t'Normal': 4\n\t};\n\n\tTHREE.SAOPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\t\tconstructor: THREE.SAOPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t\t// Rendering readBuffer first when rendering to screen\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\tthis.materialCopy.blending = THREE.NoBlending;\n\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\t\tthis.materialCopy.needsUpdate = true;\n\t\t\t\tthis.renderPass( renderer, this.materialCopy, null );\n\n\t\t\t}\n\n\t\t\tif ( this.params.output === 1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\trenderer.setRenderTarget( this.depthRenderTarget );\n\t\t\trenderer.clear();\n\n\t\t\tthis.saoMaterial.uniforms[ 'bias' ].value = this.params.saoBias;\n\t\t\tthis.saoMaterial.uniforms[ 'intensity' ].value = this.params.saoIntensity;\n\t\t\tthis.saoMaterial.uniforms[ 'scale' ].value = this.params.saoScale;\n\t\t\tthis.saoMaterial.uniforms[ 'kernelRadius' ].value = this.params.saoKernelRadius;\n\t\t\tthis.saoMaterial.uniforms[ 'minResolution' ].value = this.params.saoMinResolution;\n\t\t\tthis.saoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\t\tthis.saoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\t\t// this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n\t\t\tvar depthCutoff = this.params.saoBlurDepthCutoff * ( this.camera.far - this.camera.near );\n\t\t\tthis.vBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\t\t\tthis.hBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\n\t\t\tthis.vBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\t\tthis.vBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\t\tthis.hBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\t\tthis.hBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t\tthis.params.saoBlurRadius = Math.floor( this.params.saoBlurRadius );\n\t\t\tif ( ( this.prevStdDev !== this.params.saoBlurStdDev ) || ( this.prevNumSamples !== this.params.saoBlurRadius ) ) {\n\n\t\t\t\tTHREE.BlurShaderUtils.configure( this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new THREE.Vector2( 0, 1 ) );\n\t\t\t\tTHREE.BlurShaderUtils.configure( this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new THREE.Vector2( 1, 0 ) );\n\t\t\t\tthis.prevStdDev = this.params.saoBlurStdDev;\n\t\t\t\tthis.prevNumSamples = this.params.saoBlurRadius;\n\n\t\t\t}\n\n\t\t\t// Rendering scene to depth texture\n\t\t\trenderer.setClearColor( 0x000000 );\n\t\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t// Re-render scene if depth texture extension is not supported\n\t\t\tif ( ! this.supportsDepthTextureExtension ) {\n\n\t\t\t\t// Clear rule : far clipping plane in both RGBA and Basic encoding\n\t\t\t\tthis.renderOverride( renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0 );\n\n\t\t\t}\n\n\t\t\tif ( this.supportsNormalTexture ) {\n\n\t\t\t\t// Clear rule : default normal is facing the camera\n\t\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t\t}\n\n\t\t\t// Rendering SAO texture\n\t\t\tthis.renderPass( renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t\t// Blurring SAO texture\n\t\t\tif ( this.params.saoBlur ) {\n\n\t\t\t\tthis.renderPass( renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0 );\n\t\t\t\tthis.renderPass( renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t\t}\n\n\t\t\tvar outputMaterial = this.materialCopy;\n\t\t\t// Setting up SAO rendering\n\t\t\tif ( this.params.output === 3 ) {\n\n\t\t\t\tif ( this.supportsDepthTextureExtension ) {\n\n\t\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.depthTexture;\n\t\t\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.depthCopy.uniforms[ 'tDiffuse' ].value = this.depthRenderTarget.texture;\n\t\t\t\t\tthis.depthCopy.needsUpdate = true;\n\t\t\t\t\toutputMaterial = this.depthCopy;\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.params.output === 4 ) {\n\n\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t\t} else {\n\n\t\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\t// Blending depends on output, only want a CustomBlending when showing SAO\n\t\t\tif ( this.params.output === 0 ) {\n\n\t\t\t\toutputMaterial.blending = THREE.CustomBlending;\n\n\t\t\t} else {\n\n\t\t\t\toutputMaterial.blending = THREE.NoBlending;\n\n\t\t\t}\n\n\t\t\t// Rendering SAOPass result on top of previous pass\n\t\t\tthis.renderPass( renderer, outputMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t},\n\n\t\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t\t// save original state\n\t\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\t// setup pass state\n\t\t\trenderer.autoClear = false;\n\t\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\t\trenderer.setClearColor( clearColor );\n\t\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.material = passMaterial;\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// restore original state\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\trenderer.setClearColor( this.originalClearColor );\n\t\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t\t},\n\n\t\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\t\t\trenderer.autoClear = false;\n\n\t\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\t\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\t\trenderer.setClearColor( clearColor );\n\t\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\t\trenderer.render( this.scene, this.camera );\n\t\t\tthis.scene.overrideMaterial = null;\n\n\t\t\t// restore original state\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\trenderer.setClearColor( this.originalClearColor );\n\t\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\t\tthis.saoRenderTarget.setSize( width, height );\n\t\t\tthis.blurIntermediateRenderTarget.setSize( width, height );\n\t\t\tthis.normalRenderTarget.setSize( width, height );\n\t\t\tthis.depthRenderTarget.setSize( width, height );\n\n\t\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\t\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\t\tthis.saoMaterial.needsUpdate = true;\n\n\t\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\t\tthis.vBlurMaterial.needsUpdate = true;\n\n\t\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\t\tthis.hBlurMaterial.needsUpdate = true;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.SAOPass;\n});\n"]}