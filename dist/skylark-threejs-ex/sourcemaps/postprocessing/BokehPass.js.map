{"version":3,"sources":["postprocessing/BokehPass.js"],"names":["define","THREE","threex","Pass","BokehShader","BokehPass","scene","camera","params","call","this","focus","undefined","aspect","aperture","maxblur","width","window","innerWidth","height","innerHeight","renderTargetDepth","WebGLRenderTarget","minFilter","NearestFilter","magFilter","stencilBuffer","texture","name","materialDepth","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","console","error","bokehShader","bokehUniforms","UniformsUtils","clone","uniforms","value","near","far","materialBokeh","ShaderMaterial","defines","Object","assign","vertexShader","fragmentShader","needsSwap","fsQuad","FullScreenQuad","oldClearColor","Color","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","overrideMaterial","copy","getClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","setClearAlpha","setRenderTarget","clear","renderToScreen","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACC,YACF,yBACC,0BACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,EAAOC,EAAQC,GACrCL,EAAKM,KAAKC,MACVA,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EACd,IAAII,OAAyBC,IAAjBJ,EAAOG,MAAsBH,EAAOG,MAAQ,EACpDE,OAA2BD,IAAlBJ,EAAOK,OAAuBL,EAAOK,OAASN,EAAOM,OAC9DC,OAA+BF,IAApBJ,EAAOM,SAAyBN,EAAOM,SAAW,KAC7DC,OAA6BH,IAAnBJ,EAAOO,QAAwBP,EAAOO,QAAU,EAC1DC,EAAQR,EAAOQ,OAASC,OAAOC,YAAc,EAC7CC,EAASX,EAAOW,QAAUF,OAAOG,aAAe,EACpDV,KAAKW,kBAAoB,IAAIpB,EAAMqB,kBAAkBN,EAAOG,GACxDI,UAAWtB,EAAMuB,cACjBC,UAAWxB,EAAMuB,cACjBE,eAAe,IAEnBhB,KAAKW,kBAAkBM,QAAQC,KAAO,kBACtClB,KAAKmB,cAAgB,IAAI5B,EAAM6B,kBAC/BpB,KAAKmB,cAAcE,aAAe9B,EAAM+B,iBACxCtB,KAAKmB,cAAcI,SAAWhC,EAAMiC,gBAChBtB,IAAhBR,GACA+B,QAAQC,MAAM,mCAElB,IAAIC,EAAcjC,EACdkC,EAAgBrC,EAAMsC,cAAcC,MAAMH,EAAYI,UAC1DH,EAAsB,OAAEI,MAAQhC,KAAKW,kBAAkBM,QACvDW,EAAqB,MAAEI,MAAQ/B,EAC/B2B,EAAsB,OAAEI,MAAQ7B,EAChCyB,EAAwB,SAAEI,MAAQ5B,EAClCwB,EAAuB,QAAEI,MAAQ3B,EACjCuB,EAAwB,SAAEI,MAAQnC,EAAOoC,KACzCL,EAAuB,QAAEI,MAAQnC,EAAOqC,IACxClC,KAAKmC,cAAgB,IAAI5C,EAAM6C,gBAC3BC,QAASC,OAAOC,UAAWZ,EAAYU,SACvCN,SAAUH,EACVY,aAAcb,EAAYa,aAC1BC,eAAgBd,EAAYc,iBAEhCzC,KAAK+B,SAAWH,EAChB5B,KAAK0C,WAAY,EACjB1C,KAAK2C,OAAS,IAAIlD,EAAKmD,eAAe5C,KAAKmC,eAC3CnC,KAAK6C,cAAgB,IAAItD,EAAMuD,OAiCnC,OA/BAnD,EAAUoD,UAAYT,OAAOC,OAAOD,OAAOU,OAAOvD,EAAKsD,YACnDE,YAAatD,EACbuD,OAAQ,SAAUC,EAAUC,EAAaC,GACrCrD,KAAKJ,MAAM0D,iBAAmBtD,KAAKmB,cACnCnB,KAAK6C,cAAcU,KAAKJ,EAASK,iBACjC,IAAIC,EAAgBN,EAASO,gBACzBC,EAAeR,EAASS,UAC5BT,EAASS,WAAY,EACrBT,EAASU,cAAc,UACvBV,EAASW,cAAc,GACvBX,EAASY,gBAAgB/D,KAAKW,mBAC9BwC,EAASa,QACTb,EAASD,OAAOlD,KAAKJ,MAAOI,KAAKH,QACjCG,KAAK+B,SAAiB,OAAEC,MAAQqB,EAAWpC,QAC3CjB,KAAK+B,SAAmB,SAAEC,MAAQhC,KAAKH,OAAOoC,KAC9CjC,KAAK+B,SAAkB,QAAEC,MAAQhC,KAAKH,OAAOqC,IACzClC,KAAKiE,gBACLd,EAASY,gBAAgB,MACzB/D,KAAK2C,OAAOO,OAAOC,KAEnBA,EAASY,gBAAgBX,GACzBD,EAASa,QACThE,KAAK2C,OAAOO,OAAOC,IAEvBnD,KAAKJ,MAAM0D,iBAAmB,KAC9BH,EAASU,cAAc7D,KAAK6C,eAC5BM,EAASW,cAAcL,GACvBN,EAASS,UAAYD,KAItBnE,EAAO0E,eAAevE,UAAYA","file":"../../postprocessing/BokehPass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n     \"../threex\",\r\n   '../postprocessing/Pass',\r\n    '../shaders/BokehShader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    Pass, \r\n    BokehShader\r\n) {\r\n    'use strict';\r\n    var BokehPass = function (scene, camera, params) {\r\n        Pass.call(this);\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        var focus = params.focus !== undefined ? params.focus : 1;\r\n        var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\r\n        var aperture = params.aperture !== undefined ? params.aperture : 0.025;\r\n        var maxblur = params.maxblur !== undefined ? params.maxblur : 1;\r\n        var width = params.width || window.innerWidth || 1;\r\n        var height = params.height || window.innerHeight || 1;\r\n        this.renderTargetDepth = new THREE.WebGLRenderTarget(width, height, {\r\n            minFilter: THREE.NearestFilter,\r\n            magFilter: THREE.NearestFilter,\r\n            stencilBuffer: false\r\n        });\r\n        this.renderTargetDepth.texture.name = 'BokehPass.depth';\r\n        this.materialDepth = new THREE.MeshDepthMaterial();\r\n        this.materialDepth.depthPacking = THREE.RGBADepthPacking;\r\n        this.materialDepth.blending = THREE.NoBlending;\r\n        if (BokehShader === undefined) {\r\n            console.error('BokehPass relies on BokehShader');\r\n        }\r\n        var bokehShader = BokehShader;\r\n        var bokehUniforms = THREE.UniformsUtils.clone(bokehShader.uniforms);\r\n        bokehUniforms['tDepth'].value = this.renderTargetDepth.texture;\r\n        bokehUniforms['focus'].value = focus;\r\n        bokehUniforms['aspect'].value = aspect;\r\n        bokehUniforms['aperture'].value = aperture;\r\n        bokehUniforms['maxblur'].value = maxblur;\r\n        bokehUniforms['nearClip'].value = camera.near;\r\n        bokehUniforms['farClip'].value = camera.far;\r\n        this.materialBokeh = new THREE.ShaderMaterial({\r\n            defines: Object.assign({}, bokehShader.defines),\r\n            uniforms: bokehUniforms,\r\n            vertexShader: bokehShader.vertexShader,\r\n            fragmentShader: bokehShader.fragmentShader\r\n        });\r\n        this.uniforms = bokehUniforms;\r\n        this.needsSwap = false;\r\n        this.fsQuad = new Pass.FullScreenQuad(this.materialBokeh);\r\n        this.oldClearColor = new THREE.Color();\r\n    };\r\n    BokehPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: BokehPass,\r\n        render: function (renderer, writeBuffer, readBuffer) {\r\n            this.scene.overrideMaterial = this.materialDepth;\r\n            this.oldClearColor.copy(renderer.getClearColor());\r\n            var oldClearAlpha = renderer.getClearAlpha();\r\n            var oldAutoClear = renderer.autoClear;\r\n            renderer.autoClear = false;\r\n            renderer.setClearColor(16777215);\r\n            renderer.setClearAlpha(1);\r\n            renderer.setRenderTarget(this.renderTargetDepth);\r\n            renderer.clear();\r\n            renderer.render(this.scene, this.camera);\r\n            this.uniforms['tColor'].value = readBuffer.texture;\r\n            this.uniforms['nearClip'].value = this.camera.near;\r\n            this.uniforms['farClip'].value = this.camera.far;\r\n            if (this.renderToScreen) {\r\n                renderer.setRenderTarget(null);\r\n                this.fsQuad.render(renderer);\r\n            } else {\r\n                renderer.setRenderTarget(writeBuffer);\r\n                renderer.clear();\r\n                this.fsQuad.render(renderer);\r\n            }\r\n            this.scene.overrideMaterial = null;\r\n            renderer.setClearColor(this.oldClearColor);\r\n            renderer.setClearAlpha(oldClearAlpha);\r\n            renderer.autoClear = oldAutoClear;\r\n        }\r\n    });\r\n\r\n    return threex.postprocessing.BokehPass = BokehPass;\r\n});"]}