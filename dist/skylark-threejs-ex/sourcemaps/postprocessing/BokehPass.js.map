{"version":3,"sources":["postprocessing/BokehPass.js"],"names":["define","THREE","Pass","BokehShader","BokehPass","scene","camera","params","call","this","focus","undefined","aspect","aperture","maxblur","width","window","innerWidth","height","innerHeight","renderTargetDepth","WebGLRenderTarget","minFilter","NearestFilter","magFilter","stencilBuffer","texture","name","materialDepth","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","console","error","bokehShader","bokehUniforms","UniformsUtils","clone","uniforms","value","near","far","materialBokeh","ShaderMaterial","defines","Object","assign","vertexShader","fragmentShader","needsSwap","fsQuad","FullScreenQuad","oldClearColor","Color","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","overrideMaterial","copy","getClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","setClearAlpha","setRenderTarget","clear","renderToScreen"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACA,0BACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAY,SAAUC,EAAOC,EAAQC,GACrCL,EAAKM,KAAKC,MACVA,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EACd,IAAII,OAAyBC,IAAjBJ,EAAOG,MAAsBH,EAAOG,MAAQ,EACpDE,OAA2BD,IAAlBJ,EAAOK,OAAuBL,EAAOK,OAASN,EAAOM,OAC9DC,OAA+BF,IAApBJ,EAAOM,SAAyBN,EAAOM,SAAW,KAC7DC,OAA6BH,IAAnBJ,EAAOO,QAAwBP,EAAOO,QAAU,EAC1DC,EAAQR,EAAOQ,OAASC,OAAOC,YAAc,EAC7CC,EAASX,EAAOW,QAAUF,OAAOG,aAAe,EACpDV,KAAKW,kBAAoB,IAAInB,EAAMoB,kBAAkBN,EAAOG,GACxDI,UAAWrB,EAAMsB,cACjBC,UAAWvB,EAAMsB,cACjBE,eAAe,IAEnBhB,KAAKW,kBAAkBM,QAAQC,KAAO,kBACtClB,KAAKmB,cAAgB,IAAI3B,EAAM4B,kBAC/BpB,KAAKmB,cAAcE,aAAe7B,EAAM8B,iBACxCtB,KAAKmB,cAAcI,SAAW/B,EAAMgC,gBAChBtB,IAAhBR,GACA+B,QAAQC,MAAM,mCAElB,IAAIC,EAAcjC,EACdkC,EAAgBpC,EAAMqC,cAAcC,MAAMH,EAAYI,UAC1DH,EAAsB,OAAEI,MAAQhC,KAAKW,kBAAkBM,QACvDW,EAAqB,MAAEI,MAAQ/B,EAC/B2B,EAAsB,OAAEI,MAAQ7B,EAChCyB,EAAwB,SAAEI,MAAQ5B,EAClCwB,EAAuB,QAAEI,MAAQ3B,EACjCuB,EAAwB,SAAEI,MAAQnC,EAAOoC,KACzCL,EAAuB,QAAEI,MAAQnC,EAAOqC,IACxClC,KAAKmC,cAAgB,IAAI3C,EAAM4C,gBAC3BC,QAASC,OAAOC,UAAWZ,EAAYU,SACvCN,SAAUH,EACVY,aAAcb,EAAYa,aAC1BC,eAAgBd,EAAYc,iBAEhCzC,KAAK+B,SAAWH,EAChB5B,KAAK0C,WAAY,EACjB1C,KAAK2C,OAAS,IAAIlD,EAAKmD,eAAe5C,KAAKmC,eAC3CnC,KAAK6C,cAAgB,IAAIrD,EAAMsD,OAgCnC,OA9BAnD,EAAUoD,UAAYT,OAAOC,OAAOD,OAAOU,OAAOvD,EAAKsD,YACnDE,YAAatD,EACbuD,OAAQ,SAAUC,EAAUC,EAAaC,GACrCrD,KAAKJ,MAAM0D,iBAAmBtD,KAAKmB,cACnCnB,KAAK6C,cAAcU,KAAKJ,EAASK,iBACjC,IAAIC,EAAgBN,EAASO,gBACzBC,EAAeR,EAASS,UAC5BT,EAASS,WAAY,EACrBT,EAASU,cAAc,UACvBV,EAASW,cAAc,GACvBX,EAASY,gBAAgB/D,KAAKW,mBAC9BwC,EAASa,QACTb,EAASD,OAAOlD,KAAKJ,MAAOI,KAAKH,QACjCG,KAAK+B,SAAiB,OAAEC,MAAQqB,EAAWpC,QAC3CjB,KAAK+B,SAAmB,SAAEC,MAAQhC,KAAKH,OAAOoC,KAC9CjC,KAAK+B,SAAkB,QAAEC,MAAQhC,KAAKH,OAAOqC,IACzClC,KAAKiE,gBACLd,EAASY,gBAAgB,MACzB/D,KAAK2C,OAAOO,OAAOC,KAEnBA,EAASY,gBAAgBX,GACzBD,EAASa,QACThE,KAAK2C,OAAOO,OAAOC,IAEvBnD,KAAKJ,MAAM0D,iBAAmB,KAC9BH,EAASU,cAAc7D,KAAK6C,eAC5BM,EAASW,cAAcL,GACvBN,EAASS,UAAYD,KAGtBhE","file":"../../postprocessing/BokehPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../postprocessing/Pass',\n    '../shaders/BokehShader'\n], function (\n    THREE, \n    Pass, \n    BokehShader\n) {\n    'use strict';\n    var BokehPass = function (scene, camera, params) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        var focus = params.focus !== undefined ? params.focus : 1;\n        var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n        var aperture = params.aperture !== undefined ? params.aperture : 0.025;\n        var maxblur = params.maxblur !== undefined ? params.maxblur : 1;\n        var width = params.width || window.innerWidth || 1;\n        var height = params.height || window.innerHeight || 1;\n        this.renderTargetDepth = new THREE.WebGLRenderTarget(width, height, {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            stencilBuffer: false\n        });\n        this.renderTargetDepth.texture.name = 'BokehPass.depth';\n        this.materialDepth = new THREE.MeshDepthMaterial();\n        this.materialDepth.depthPacking = THREE.RGBADepthPacking;\n        this.materialDepth.blending = THREE.NoBlending;\n        if (BokehShader === undefined) {\n            console.error('BokehPass relies on BokehShader');\n        }\n        var bokehShader = BokehShader;\n        var bokehUniforms = THREE.UniformsUtils.clone(bokehShader.uniforms);\n        bokehUniforms['tDepth'].value = this.renderTargetDepth.texture;\n        bokehUniforms['focus'].value = focus;\n        bokehUniforms['aspect'].value = aspect;\n        bokehUniforms['aperture'].value = aperture;\n        bokehUniforms['maxblur'].value = maxblur;\n        bokehUniforms['nearClip'].value = camera.near;\n        bokehUniforms['farClip'].value = camera.far;\n        this.materialBokeh = new THREE.ShaderMaterial({\n            defines: Object.assign({}, bokehShader.defines),\n            uniforms: bokehUniforms,\n            vertexShader: bokehShader.vertexShader,\n            fragmentShader: bokehShader.fragmentShader\n        });\n        this.uniforms = bokehUniforms;\n        this.needsSwap = false;\n        this.fsQuad = new Pass.FullScreenQuad(this.materialBokeh);\n        this.oldClearColor = new THREE.Color();\n    };\n    BokehPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: BokehPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            this.scene.overrideMaterial = this.materialDepth;\n            this.oldClearColor.copy(renderer.getClearColor());\n            var oldClearAlpha = renderer.getClearAlpha();\n            var oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            renderer.setClearColor(16777215);\n            renderer.setClearAlpha(1);\n            renderer.setRenderTarget(this.renderTargetDepth);\n            renderer.clear();\n            renderer.render(this.scene, this.camera);\n            this.uniforms['tColor'].value = readBuffer.texture;\n            this.uniforms['nearClip'].value = this.camera.near;\n            this.uniforms['farClip'].value = this.camera.far;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                renderer.clear();\n                this.fsQuad.render(renderer);\n            }\n            this.scene.overrideMaterial = null;\n            renderer.setClearColor(this.oldClearColor);\n            renderer.setClearAlpha(oldClearAlpha);\n            renderer.autoClear = oldAutoClear;\n        }\n    });\n    return BokehPass;\n});"]}