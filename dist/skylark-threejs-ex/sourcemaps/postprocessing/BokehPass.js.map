{"version":3,"sources":["postprocessing/BokehPass.js"],"names":["define","THREE","BokehShader","Pass","BokehPass","scene","camera","params","call","this","focus","undefined","aspect","aperture","maxblur","width","window","innerWidth","height","innerHeight","renderTargetDepth","WebGLRenderTarget","minFilter","NearestFilter","magFilter","stencilBuffer","texture","name","materialDepth","MeshDepthMaterial","depthPacking","RGBADepthPacking","blending","NoBlending","console","error","bokehShader","bokehUniforms","UniformsUtils","clone","uniforms","value","near","far","materialBokeh","ShaderMaterial","defines","Object","assign","vertexShader","fragmentShader","needsSwap","fsQuad","FullScreenQuad","oldClearColor","Color","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","overrideMaterial","copy","getClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","setClearAlpha","setRenderTarget","clear","renderToScreen"],"mappings":";;;;;;;AAAAA,QACC,kBACA,yBACA,UACC,SAASC,EAAMC,EAAYC,GAyH5B,OApHAF,EAAMG,UAAY,SAAWC,EAAOC,EAAQC,GAE3CN,EAAME,KAAKK,KAAMC,MAEjBA,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EAEd,IAAII,OAA2BC,IAAjBJ,EAAOG,MAAwBH,EAAOG,MAAQ,EACxDE,OAA6BD,IAAlBJ,EAAOK,OAAyBL,EAAOK,OAASN,EAAOM,OAClEC,OAAiCF,IAApBJ,EAAOM,SAA2BN,EAAOM,SAAW,KACjEC,OAA+BH,IAAnBJ,EAAOO,QAA0BP,EAAOO,QAAU,EAI9DC,EAAQR,EAAOQ,OAASC,OAAOC,YAAc,EAC7CC,EAASX,EAAOW,QAAUF,OAAOG,aAAe,EAEpDV,KAAKW,kBAAoB,IAAInB,EAAMoB,kBAAmBN,EAAOG,GAC5DI,UAAWrB,EAAMsB,cACjBC,UAAWvB,EAAMsB,cACjBE,eAAe,IAGhBhB,KAAKW,kBAAkBM,QAAQC,KAAO,kBAItClB,KAAKmB,cAAgB,IAAI3B,EAAM4B,kBAC/BpB,KAAKmB,cAAcE,aAAe7B,EAAM8B,iBACxCtB,KAAKmB,cAAcI,SAAW/B,EAAMgC,gBAITtB,IAAtBV,EAAMC,aAEVgC,QAAQC,MAAO,+CAIhB,IAAIC,EAAcnC,EAAMC,YACpBmC,EAAgBpC,EAAMqC,cAAcC,MAAOH,EAAYI,UAE3DH,EAAwB,OAAEI,MAAQhC,KAAKW,kBAAkBM,QAEzDW,EAAuB,MAAEI,MAAQ/B,EACjC2B,EAAwB,OAAEI,MAAQ7B,EAClCyB,EAA0B,SAAEI,MAAQ5B,EACpCwB,EAAyB,QAAEI,MAAQ3B,EACnCuB,EAA0B,SAAEI,MAAQnC,EAAOoC,KAC3CL,EAAyB,QAAEI,MAAQnC,EAAOqC,IAE1ClC,KAAKmC,cAAgB,IAAI3C,EAAM4C,gBAC9BC,QAASC,OAAOC,UAAYZ,EAAYU,SACxCN,SAAUH,EACVY,aAAcb,EAAYa,aAC1BC,eAAgBd,EAAYc,iBAG7BzC,KAAK+B,SAAWH,EAChB5B,KAAK0C,WAAY,EAEjB1C,KAAK2C,OAAS,IAAInD,EAAME,KAAKkD,eAAgB5C,KAAKmC,eAElDnC,KAAK6C,cAAgB,IAAIrD,EAAMsD,OAIhCtD,EAAMG,UAAUoD,UAAYT,OAAOC,OAAQD,OAAOU,OAAQxD,EAAME,KAAKqD,YAEpEE,YAAazD,EAAMG,UAEnBuD,OAAQ,SAAWC,EAAUC,EAAaC,GAIzCrD,KAAKJ,MAAM0D,iBAAmBtD,KAAKmB,cAEnCnB,KAAK6C,cAAcU,KAAMJ,EAASK,iBAClC,IAAIC,EAAgBN,EAASO,gBACzBC,EAAeR,EAASS,UAC5BT,EAASS,WAAY,EAErBT,EAASU,cAAe,UACxBV,EAASW,cAAe,GACxBX,EAASY,gBAAiB/D,KAAKW,mBAC/BwC,EAASa,QACTb,EAASD,OAAQlD,KAAKJ,MAAOI,KAAKH,QAIlCG,KAAK+B,SAAmB,OAAEC,MAAQqB,EAAWpC,QAC7CjB,KAAK+B,SAAqB,SAAEC,MAAQhC,KAAKH,OAAOoC,KAChDjC,KAAK+B,SAAoB,QAAEC,MAAQhC,KAAKH,OAAOqC,IAE1ClC,KAAKiE,gBAETd,EAASY,gBAAiB,MAC1B/D,KAAK2C,OAAOO,OAAQC,KAIpBA,EAASY,gBAAiBX,GAC1BD,EAASa,QACThE,KAAK2C,OAAOO,OAAQC,IAIrBnD,KAAKJ,MAAM0D,iBAAmB,KAC9BH,EAASU,cAAe7D,KAAK6C,eAC7BM,EAASW,cAAeL,GACxBN,EAASS,UAAYD,KAMhBnE,EAAMG","file":"../../postprocessing/BokehPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/BokehShader\",\n\t\"./Pass\"\n],function(THREE,BokehShader,Pass){\n\t/**\n\t * Depth-of-field post-process with bokeh shader\n\t */\n\n\tTHREE.BokehPass = function ( scene, camera, params ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tvar focus = ( params.focus !== undefined ) ? params.focus : 1.0;\n\t\tvar aspect = ( params.aspect !== undefined ) ? params.aspect : camera.aspect;\n\t\tvar aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;\n\t\tvar maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;\n\n\t\t// render targets\n\n\t\tvar width = params.width || window.innerWidth || 1;\n\t\tvar height = params.height || window.innerHeight || 1;\n\n\t\tthis.renderTargetDepth = new THREE.WebGLRenderTarget( width, height, {\n\t\t\tminFilter: THREE.NearestFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tstencilBuffer: false\n\t\t} );\n\n\t\tthis.renderTargetDepth.texture.name = \"BokehPass.depth\";\n\n\t\t// depth material\n\n\t\tthis.materialDepth = new THREE.MeshDepthMaterial();\n\t\tthis.materialDepth.depthPacking = THREE.RGBADepthPacking;\n\t\tthis.materialDepth.blending = THREE.NoBlending;\n\n\t\t// bokeh material\n\n\t\tif ( THREE.BokehShader === undefined ) {\n\n\t\t\tconsole.error( \"THREE.BokehPass relies on THREE.BokehShader\" );\n\n\t\t}\n\n\t\tvar bokehShader = THREE.BokehShader;\n\t\tvar bokehUniforms = THREE.UniformsUtils.clone( bokehShader.uniforms );\n\n\t\tbokehUniforms[ \"tDepth\" ].value = this.renderTargetDepth.texture;\n\n\t\tbokehUniforms[ \"focus\" ].value = focus;\n\t\tbokehUniforms[ \"aspect\" ].value = aspect;\n\t\tbokehUniforms[ \"aperture\" ].value = aperture;\n\t\tbokehUniforms[ \"maxblur\" ].value = maxblur;\n\t\tbokehUniforms[ \"nearClip\" ].value = camera.near;\n\t\tbokehUniforms[ \"farClip\" ].value = camera.far;\n\n\t\tthis.materialBokeh = new THREE.ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, bokehShader.defines ),\n\t\t\tuniforms: bokehUniforms,\n\t\t\tvertexShader: bokehShader.vertexShader,\n\t\t\tfragmentShader: bokehShader.fragmentShader\n\t\t} );\n\n\t\tthis.uniforms = bokehUniforms;\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.materialBokeh );\n\n\t\tthis.oldClearColor = new THREE.Color();\n\n\t};\n\n\tTHREE.BokehPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.BokehPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t\t// Render depth into texture\n\n\t\t\tthis.scene.overrideMaterial = this.materialDepth;\n\n\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\t\tvar oldClearAlpha = renderer.getClearAlpha();\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\trenderer.setClearColor( 0xffffff );\n\t\t\trenderer.setClearAlpha( 1.0 );\n\t\t\trenderer.setRenderTarget( this.renderTargetDepth );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t// Render bokeh composite\n\n\t\t\tthis.uniforms[ \"tColor\" ].value = readBuffer.texture;\n\t\t\tthis.uniforms[ \"nearClip\" ].value = this.camera.near;\n\t\t\tthis.uniforms[ \"farClip\" ].value = this.camera.far;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\trenderer.clear();\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = null;\n\t\t\trenderer.setClearColor( this.oldClearColor );\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.BokehPass;\n});\n"]}