{"version":3,"sources":["postprocessing/HalftonePass.js"],"names":["define","THREE","threex","Pass","HalftoneShader","HalftonePass","width","height","params","key","call","this","undefined","console","error","uniforms","UniformsUtils","clone","material","ShaderMaterial","fragmentShader","vertexShader","value","hasOwnProperty","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","setSize","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,SACA,6BACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAe,SAAUC,EAAOC,EAAQC,GAaxC,IAAK,IAAIC,KAZTN,EAAKO,KAAKC,WACaC,IAAnBR,GACAS,QAAQC,MAAM,8CAElBH,KAAKI,SAAWd,EAAMe,cAAcC,MAAMb,EAAeW,UACzDJ,KAAKO,SAAW,IAAIjB,EAAMkB,gBACtBJ,SAAUJ,KAAKI,SACfK,eAAgBhB,EAAegB,eAC/BC,aAAcjB,EAAeiB,eAEjCV,KAAKI,SAAST,MAAMgB,MAAQhB,EAC5BK,KAAKI,SAASR,OAAOe,MAAQf,EACbC,EACRA,EAAOe,eAAed,IAAQE,KAAKI,SAASQ,eAAed,KAC3DE,KAAKI,SAASN,GAAKa,MAAQd,EAAOC,IAG1CE,KAAKa,OAAS,IAAIrB,EAAKsB,eAAed,KAAKO,WAqB/C,OAnBAb,EAAaqB,UAAYC,OAAOC,OAAOD,OAAOE,OAAO1B,EAAKuB,YACtDI,YAAazB,EACb0B,OAAQ,SAAUC,EAAUC,EAAaC,GACrCvB,KAAKO,SAASH,SAAmB,SAAEO,MAAQY,EAAWC,QAClDxB,KAAKyB,gBACLJ,EAASK,gBAAgB,MACzB1B,KAAKa,OAAOO,OAAOC,KAEnBA,EAASK,gBAAgBJ,GACrBtB,KAAK2B,OACLN,EAASM,QACb3B,KAAKa,OAAOO,OAAOC,KAG3BO,QAAS,SAAUjC,EAAOC,GACtBI,KAAKI,SAAST,MAAMgB,MAAQhB,EAC5BK,KAAKI,SAASR,OAAOe,MAAQf,KAG9BL,EAAOsC,eAAenC,aAAeA","file":"../../postprocessing/HalftonePass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './Pass',\n    '../shaders/HalftoneShader'\n], function (\n    THREE, \n    threex,\n    Pass, \n    HalftoneShader\n) {\n    'use strict';\n    var HalftonePass = function (width, height, params) {\n        Pass.call(this);\n        if (HalftoneShader === undefined) {\n            console.error('THREE.HalftonePass requires HalftoneShader');\n        }\n        this.uniforms = THREE.UniformsUtils.clone(HalftoneShader.uniforms);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            fragmentShader: HalftoneShader.fragmentShader,\n            vertexShader: HalftoneShader.vertexShader\n        });\n        this.uniforms.width.value = width;\n        this.uniforms.height.value = height;\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n                this.uniforms[key].value = params[key];\n            }\n        }\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    HalftonePass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: HalftonePass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            this.material.uniforms['tDiffuse'].value = readBuffer.texture;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear();\n                this.fsQuad.render(renderer);\n            }\n        },\n        setSize: function (width, height) {\n            this.uniforms.width.value = width;\n            this.uniforms.height.value = height;\n        }\n    });\n    return threex.postprocessing.HalftonePass = HalftonePass;\n});"]}