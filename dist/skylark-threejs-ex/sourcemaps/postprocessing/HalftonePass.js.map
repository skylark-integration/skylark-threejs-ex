{"version":3,"sources":["postprocessing/HalftonePass.js"],"names":["define","THREE","HalftoneShader","Pass","HalftonePass","width","height","params","key","call","this","undefined","console","error","uniforms","UniformsUtils","clone","material","ShaderMaterial","fragmentShader","vertexShader","value","hasOwnProperty","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","setSize"],"mappings":";;;;;;;AAAAA,QACC,kBACA,4BACA,UACC,SAASC,EAAMC,EAAeC,GA0E/B,OAlEAF,EAAMG,aAAe,SAAWC,EAAOC,EAAQC,GAqB9C,IAAM,IAAIC,KAnBVP,EAAME,KAAKM,KAAMC,WAEcC,IAAzBV,EAAMC,gBAEVU,QAAQC,MAAO,oDAIhBH,KAAKI,SAAWb,EAAMc,cAAcC,MAAOf,EAAMC,eAAeY,UAChEJ,KAAKO,SAAW,IAAIhB,EAAMiB,gBACzBJ,SAAUJ,KAAKI,SACfK,eAAgBlB,EAAMC,eAAeiB,eACrCC,aAAcnB,EAAMC,eAAekB,eAIrCV,KAAKI,SAAST,MAAMgB,MAAQhB,EAC5BK,KAAKI,SAASR,OAAOe,MAAQf,EAEZC,EAEXA,EAAOe,eAAgBd,IAASE,KAAKI,SAASQ,eAAgBd,KAElEE,KAAKI,SAAUN,GAAMa,MAAQd,EAAQC,IAMvCE,KAAKa,OAAS,IAAItB,EAAME,KAAKqB,eAAgBd,KAAKO,WAInDhB,EAAMG,aAAaqB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQ3B,EAAME,KAAKsB,YAEvEI,YAAa5B,EAAMG,aAEnB0B,OAAQ,SAAWC,EAAUC,EAAaC,GAExCvB,KAAKO,SAASH,SAAqB,SAAEO,MAAQY,EAAWC,QAEnDxB,KAAKyB,gBAETJ,EAASK,gBAAiB,MAC1B1B,KAAKa,OAAOO,OAAQC,KAIpBA,EAASK,gBAAiBJ,GACrBtB,KAAK2B,OAAQN,EAASM,QAC5B3B,KAAKa,OAAOO,OAAQC,KAMrBO,QAAS,SAAWjC,EAAOC,GAE1BI,KAAKI,SAAST,MAAMgB,MAAQhB,EAC5BK,KAAKI,SAASR,OAAOe,MAAQf,KAKzBL,EAAMG","file":"../../postprocessing/HalftonePass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/HalftoneShader\",\n\t\"./Pass\"\n],function(THREE,HalftoneShader,Pass){\n\t/**\n\t * @author meatbags / xavierburrow.com, github/meatbags\n\t *\n\t * RGB Halftone pass for three.js effects composer. Requires THREE.HalftoneShader.\n\t *\n\t */\n\n\tTHREE.HalftonePass = function ( width, height, params ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t \tif ( THREE.HalftoneShader === undefined ) {\n\n\t \t\tconsole.error( 'THREE.HalftonePass requires THREE.HalftoneShader' );\n\n\t \t}\n\n\t \tthis.uniforms = THREE.UniformsUtils.clone( THREE.HalftoneShader.uniforms );\n\t \tthis.material = new THREE.ShaderMaterial( {\n\t \t\tuniforms: this.uniforms,\n\t \t\tfragmentShader: THREE.HalftoneShader.fragmentShader,\n\t \t\tvertexShader: THREE.HalftoneShader.vertexShader\n\t \t} );\n\n\t\t// set params\n\t\tthis.uniforms.width.value = width;\n\t\tthis.uniforms.height.value = height;\n\n\t\tfor ( var key in params ) {\n\n\t\t\tif ( params.hasOwnProperty( key ) && this.uniforms.hasOwnProperty( key ) ) {\n\n\t\t\t\tthis.uniforms[ key ].value = params[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n\t};\n\n\tTHREE.HalftonePass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.HalftonePass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t \t\tthis.material.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\n\t \t\tif ( this.renderToScreen ) {\n\n\t \t\t\trenderer.setRenderTarget( null );\n\t \t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t \t\t\trenderer.setRenderTarget( writeBuffer );\n\t \t\t\tif ( this.clear ) renderer.clear();\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t \t},\n\n\t \tsetSize: function ( width, height ) {\n\n\t \t\tthis.uniforms.width.value = width;\n\t \t\tthis.uniforms.height.value = height;\n\n\t \t}\n\t} );\n\t\n\treturn THREE.HalftonePass;\n});\n"]}