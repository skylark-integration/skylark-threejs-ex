{"version":3,"sources":["postprocessing/SSAOPass.js"],"names":["define","THREE","SSAOPass","scene","camera","width","height","Pass","call","this","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","generateSampleKernel","generateRandomKernelRotations","depthTexture","DepthTexture","type","UnsignedShortType","minFilter","NearestFilter","maxFilter","beautyRenderTarget","WebGLRenderTarget","LinearFilter","magFilter","format","RGBAFormat","depthBuffer","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","SSAOShader","console","error","ssaoMaterial","ShaderMaterial","defines","Object","assign","uniforms","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","value","texture","near","far","set","copy","projectionMatrix","getInverse","normalMaterial","MeshNormalMaterial","blurMaterial","SSAOBlurShader","depthRenderMaterial","SSAODepthShader","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","Color","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","renderOverride","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","CustomBlending","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","Vector3","x","Math","random","y","z","normalize","scale","MathUtils","lerp","multiplyScalar","push","SimplexNoise","simplex","data","Float32Array","size","stride","noise","noise3d","DataTexture","FloatType","wrapS","RepeatWrapping","wrapT"],"mappings":";;;;;;;AAAAA,QACC,kBACA,uBACA,wBACA,wBACA,wBACA,wBACA,UACC,SAASC,GAqZV,OAhZAA,EAAMC,SAAW,SAAWC,EAAOC,EAAQC,EAAOC,GAEjDL,EAAMM,KAAKC,KAAMC,MAEjBA,KAAKJ,WAAoBK,IAAVL,EAAwBA,EAAQ,IAC/CI,KAAKH,YAAsBI,IAAXJ,EAAyBA,EAAS,IAElDG,KAAKE,OAAQ,EAEbF,KAAKL,OAASA,EACdK,KAAKN,MAAQA,EAEbM,KAAKG,aAAe,EACpBH,KAAKI,WAAa,GAClBJ,KAAKK,UACLL,KAAKM,aAAe,KACpBN,KAAKO,OAAS,EAEdP,KAAKQ,YAAc,KACnBR,KAAKS,YAAc,GAInBT,KAAKU,uBACLV,KAAKW,gCAIL,IAAIC,EAAe,IAAIpB,EAAMqB,aAC7BD,EAAaE,KAAOtB,EAAMuB,kBAC1BH,EAAaI,UAAYxB,EAAMyB,cAC/BL,EAAaM,UAAY1B,EAAMyB,cAE/BjB,KAAKmB,mBAAqB,IAAI3B,EAAM4B,kBAAmBpB,KAAKJ,MAAOI,KAAKH,QACvEmB,UAAWxB,EAAM6B,aACjBC,UAAW9B,EAAM6B,aACjBE,OAAQ/B,EAAMgC,WACdZ,aAAcA,EACda,aAAa,IAKdzB,KAAK0B,mBAAqB,IAAIlC,EAAM4B,kBAAmBpB,KAAKJ,MAAOI,KAAKH,QACvEmB,UAAWxB,EAAMyB,cACjBK,UAAW9B,EAAMyB,cACjBM,OAAQ/B,EAAMgC,aAKfxB,KAAK2B,iBAAmB,IAAInC,EAAM4B,kBAAmBpB,KAAKJ,MAAOI,KAAKH,QACrEmB,UAAWxB,EAAM6B,aACjBC,UAAW9B,EAAM6B,aACjBE,OAAQ/B,EAAMgC,aAGfxB,KAAK4B,iBAAmB5B,KAAK2B,iBAAiBE,aAIpB5B,IAArBT,EAAMsC,YAEVC,QAAQC,MAAO,wDAIhBhC,KAAKiC,aAAe,IAAIzC,EAAM0C,gBAC7BC,QAASC,OAAOC,UAAY7C,EAAMsC,WAAWK,SAC7CG,SAAU9C,EAAM+C,cAAcV,MAAOrC,EAAMsC,WAAWQ,UACtDE,aAAchD,EAAMsC,WAAWU,aAC/BC,eAAgBjD,EAAMsC,WAAWW,eACjCC,SAAUlD,EAAMmD,aAGjB3C,KAAKiC,aAAaK,SAAqB,SAAEM,MAAQ5C,KAAKmB,mBAAmB0B,QACzE7C,KAAKiC,aAAaK,SAAoB,QAAEM,MAAQ5C,KAAK0B,mBAAmBmB,QACxE7C,KAAKiC,aAAaK,SAAmB,OAAEM,MAAQ5C,KAAKmB,mBAAmBP,aACvEZ,KAAKiC,aAAaK,SAAmB,OAAEM,MAAQ5C,KAAKM,aACpDN,KAAKiC,aAAaK,SAAmB,OAAEM,MAAQ5C,KAAKK,OACpDL,KAAKiC,aAAaK,SAAuB,WAAEM,MAAQ5C,KAAKL,OAAOmD,KAC/D9C,KAAKiC,aAAaK,SAAsB,UAAEM,MAAQ5C,KAAKL,OAAOoD,IAC9D/C,KAAKiC,aAAaK,SAAuB,WAAEM,MAAMI,IAAKhD,KAAKJ,MAAOI,KAAKH,QACvEG,KAAKiC,aAAaK,SAAmC,uBAAEM,MAAMK,KAAMjD,KAAKL,OAAOuD,kBAC/ElD,KAAKiC,aAAaK,SAA0C,8BAAEM,MAAMO,WAAYnD,KAAKL,OAAOuD,kBAI5FlD,KAAKoD,eAAiB,IAAI5D,EAAM6D,mBAChCrD,KAAKoD,eAAeV,SAAWlD,EAAMmD,WAIrC3C,KAAKsD,aAAe,IAAI9D,EAAM0C,gBAC7BC,QAASC,OAAOC,UAAY7C,EAAM+D,eAAepB,SACjDG,SAAU9C,EAAM+C,cAAcV,MAAOrC,EAAM+D,eAAejB,UAC1DE,aAAchD,EAAM+D,eAAef,aACnCC,eAAgBjD,EAAM+D,eAAed,iBAEtCzC,KAAKsD,aAAahB,SAAqB,SAAEM,MAAQ5C,KAAK2B,iBAAiBkB,QACvE7C,KAAKsD,aAAahB,SAAuB,WAAEM,MAAMI,IAAKhD,KAAKJ,MAAOI,KAAKH,QAIvEG,KAAKwD,oBAAsB,IAAIhE,EAAM0C,gBACpCC,QAASC,OAAOC,UAAY7C,EAAMiE,gBAAgBtB,SAClDG,SAAU9C,EAAM+C,cAAcV,MAAOrC,EAAMiE,gBAAgBnB,UAC3DE,aAAchD,EAAMiE,gBAAgBjB,aACpCC,eAAgBjD,EAAMiE,gBAAgBhB,eACtCC,SAAUlD,EAAMmD,aAEjB3C,KAAKwD,oBAAoBlB,SAAmB,OAAEM,MAAQ5C,KAAKmB,mBAAmBP,aAC9EZ,KAAKwD,oBAAoBlB,SAAuB,WAAEM,MAAQ5C,KAAKL,OAAOmD,KACtE9C,KAAKwD,oBAAoBlB,SAAsB,UAAEM,MAAQ5C,KAAKL,OAAOoD,IAIrE/C,KAAK0D,aAAe,IAAIlE,EAAM0C,gBAC7BI,SAAU9C,EAAM+C,cAAcV,MAAOrC,EAAMmE,WAAWrB,UACtDE,aAAchD,EAAMmE,WAAWnB,aAC/BC,eAAgBjD,EAAMmE,WAAWlB,eACjCmB,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,SAAUvE,EAAMwE,eAChBC,SAAUzE,EAAM0E,WAChBC,cAAe3E,EAAM4E,YACrBC,cAAe7E,EAAM8E,eACrBC,cAAe/E,EAAM0E,WACrBM,mBAAoBhF,EAAM4E,cAG3BpE,KAAKyE,OAAS,IAAIjF,EAAMM,KAAK4E,eAAgB,MAE7C1E,KAAK2E,mBAAqB,IAAInF,EAAMoF,OAIrCpF,EAAMC,SAASoF,UAAYzC,OAAOC,OAAQD,OAAO0C,OAAQtF,EAAMM,KAAK+E,YAEnEE,YAAavF,EAAMC,SAEnBuF,QAAS,WAIRhF,KAAKmB,mBAAmB6D,UACxBhF,KAAK0B,mBAAmBsD,UACxBhF,KAAK2B,iBAAiBqD,UACtBhF,KAAK4B,iBAAiBoD,UAItBhF,KAAKoD,eAAe4B,UACpBhF,KAAKsD,aAAa0B,UAClBhF,KAAK0D,aAAasB,UAClBhF,KAAKwD,oBAAoBwB,UAIzBhF,KAAKyE,OAAOO,WAIbC,OAAQ,SAAWC,EAAUC,GAyB5B,OArBAD,EAASE,gBAAiBpF,KAAKmB,oBAC/B+D,EAAShF,QACTgF,EAASD,OAAQjF,KAAKN,MAAOM,KAAKL,QAIlCK,KAAKqF,eAAgBH,EAAUlF,KAAKoD,eAAgBpD,KAAK0B,mBAAoB,QAAU,GAIvF1B,KAAKiC,aAAaK,SAAyB,aAAEM,MAAQ5C,KAAKG,aAC1DH,KAAKiC,aAAaK,SAAwB,YAAEM,MAAQ5C,KAAKQ,YACzDR,KAAKiC,aAAaK,SAAwB,YAAEM,MAAQ5C,KAAKS,YACzDT,KAAKsF,WAAYJ,EAAUlF,KAAKiC,aAAcjC,KAAK2B,kBAInD3B,KAAKsF,WAAYJ,EAAUlF,KAAKsD,aAActD,KAAK4B,kBAI1C5B,KAAKO,QAEb,KAAKf,EAAMC,SAAS8F,OAAOC,KAE1BxF,KAAK0D,aAAapB,SAAqB,SAAEM,MAAQ5C,KAAK2B,iBAAiBkB,QACvE7C,KAAK0D,aAAahB,SAAWlD,EAAMmD,WACnC3C,KAAKsF,WAAYJ,EAAUlF,KAAK0D,aAAc1D,KAAKyF,eAAiB,KAAON,GAE3E,MAED,KAAK3F,EAAMC,SAAS8F,OAAOG,KAE1B1F,KAAK0D,aAAapB,SAAqB,SAAEM,MAAQ5C,KAAK4B,iBAAiBiB,QACvE7C,KAAK0D,aAAahB,SAAWlD,EAAMmD,WACnC3C,KAAKsF,WAAYJ,EAAUlF,KAAK0D,aAAc1D,KAAKyF,eAAiB,KAAON,GAE3E,MAED,KAAK3F,EAAMC,SAAS8F,OAAOI,OAE1B3F,KAAK0D,aAAapB,SAAqB,SAAEM,MAAQ5C,KAAKmB,mBAAmB0B,QACzE7C,KAAK0D,aAAahB,SAAWlD,EAAMmD,WACnC3C,KAAKsF,WAAYJ,EAAUlF,KAAK0D,aAAc1D,KAAKyF,eAAiB,KAAON,GAE3E,MAED,KAAK3F,EAAMC,SAAS8F,OAAOK,MAE1B5F,KAAKsF,WAAYJ,EAAUlF,KAAKwD,oBAAqBxD,KAAKyF,eAAiB,KAAON,GAElF,MAED,KAAK3F,EAAMC,SAAS8F,OAAOM,OAE1B7F,KAAK0D,aAAapB,SAAqB,SAAEM,MAAQ5C,KAAK0B,mBAAmBmB,QACzE7C,KAAK0D,aAAahB,SAAWlD,EAAMmD,WACnC3C,KAAKsF,WAAYJ,EAAUlF,KAAK0D,aAAc1D,KAAKyF,eAAiB,KAAON,GAE3E,MAED,KAAK3F,EAAMC,SAAS8F,OAAOO,QAE1B9F,KAAK0D,aAAapB,SAAqB,SAAEM,MAAQ5C,KAAKmB,mBAAmB0B,QACzE7C,KAAK0D,aAAahB,SAAWlD,EAAMmD,WACnC3C,KAAKsF,WAAYJ,EAAUlF,KAAK0D,aAAc1D,KAAKyF,eAAiB,KAAON,GAE3EnF,KAAK0D,aAAapB,SAAqB,SAAEM,MAAQ5C,KAAK4B,iBAAiBiB,QACvE7C,KAAK0D,aAAahB,SAAWlD,EAAMuG,eACnC/F,KAAKsF,WAAYJ,EAAUlF,KAAK0D,aAAc1D,KAAKyF,eAAiB,KAAON,GAE3E,MAED,QACCpD,QAAQiE,KAAM,0CAMjBV,WAAY,SAAWJ,EAAUe,EAAcC,EAAcC,EAAYC,GAGxEpG,KAAK2E,mBAAmB1B,KAAMiC,EAASmB,iBACvC,IAAIC,EAAqBpB,EAASqB,gBAC9BC,EAAoBtB,EAASuB,UAEjCvB,EAASE,gBAAiBc,GAG1BhB,EAASuB,WAAY,OACCxG,IAAfkG,GAA+C,OAAfA,IAEtCjB,EAASwB,cAAeP,GACxBjB,EAASyB,cAAeP,GAAc,GACtClB,EAAShF,SAIVF,KAAKyE,OAAOmC,SAAWX,EACvBjG,KAAKyE,OAAOQ,OAAQC,GAGpBA,EAASuB,UAAYD,EACrBtB,EAASwB,cAAe1G,KAAK2E,oBAC7BO,EAASyB,cAAeL,IAIzBjB,eAAgB,SAAWH,EAAU2B,EAAkBX,EAAcC,EAAYC,GAEhFpG,KAAK2E,mBAAmB1B,KAAMiC,EAASmB,iBACvC,IAAIC,EAAqBpB,EAASqB,gBAC9BC,EAAoBtB,EAASuB,UAEjCvB,EAASE,gBAAiBc,GAC1BhB,EAASuB,WAAY,EAErBN,EAAaU,EAAiBV,YAAcA,EAC5CC,EAAaS,EAAiBT,YAAcA,OAEtBnG,IAAfkG,GAA+C,OAAfA,IAEtCjB,EAASwB,cAAeP,GACxBjB,EAASyB,cAAeP,GAAc,GACtClB,EAAShF,SAIVF,KAAKN,MAAMmH,iBAAmBA,EAC9B3B,EAASD,OAAQjF,KAAKN,MAAOM,KAAKL,QAClCK,KAAKN,MAAMmH,iBAAmB,KAI9B3B,EAASuB,UAAYD,EACrBtB,EAASwB,cAAe1G,KAAK2E,oBAC7BO,EAASyB,cAAeL,IAIzBQ,QAAS,SAAWlH,EAAOC,GAE1BG,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EAEdG,KAAKmB,mBAAmB2F,QAASlH,EAAOC,GACxCG,KAAK2B,iBAAiBmF,QAASlH,EAAOC,GACtCG,KAAK0B,mBAAmBoF,QAASlH,EAAOC,GACxCG,KAAK4B,iBAAiBkF,QAASlH,EAAOC,GAEtCG,KAAKiC,aAAaK,SAAuB,WAAEM,MAAMI,IAAKpD,EAAOC,GAC7DG,KAAKiC,aAAaK,SAAmC,uBAAEM,MAAMK,KAAMjD,KAAKL,OAAOuD,kBAC/ElD,KAAKiC,aAAaK,SAA0C,8BAAEM,MAAMO,WAAYnD,KAAKL,OAAOuD,kBAE5FlD,KAAKsD,aAAahB,SAAuB,WAAEM,MAAMI,IAAKpD,EAAOC,IAI9Da,qBAAsB,WAKrB,IAHA,IAAIN,EAAaJ,KAAKI,WAClBC,EAASL,KAAKK,OAER0G,EAAI,EAAGA,EAAI3G,EAAY2G,IAAO,CAEvC,IAAIC,EAAS,IAAIxH,EAAMyH,QACvBD,EAAOE,EAAsB,EAAhBC,KAAKC,SAAiB,EACnCJ,EAAOK,EAAsB,EAAhBF,KAAKC,SAAiB,EACnCJ,EAAOM,EAAIH,KAAKC,SAEhBJ,EAAOO,YAEP,IAAIC,EAAQT,EAAI3G,EAChBoH,EAAQhI,EAAMiI,UAAUC,KAAM,GAAK,EAAGF,EAAQA,GAC9CR,EAAOW,eAAgBH,GAEvBnH,EAAOuH,KAAMZ,KAMfrG,8BAA+B,gBAIFV,IAAvBT,EAAMqI,cAEV9F,QAAQC,MAAO,0DAShB,IALA,IAAI8F,EAAU,IAAItI,EAAMqI,aAGpBE,EAAO,IAAIC,aAAcC,IAEnBlB,EAAI,EAAGA,EAHNnH,GAGgBmH,IAAO,CAEjC,IAAImB,EAAa,EAAJnB,EAETG,EAAsB,EAAhBC,KAAKC,SAAiB,EAC5BC,EAAsB,EAAhBF,KAAKC,SAAiB,EAG5Be,EAAQL,EAAQM,QAASlB,EAAGG,EAFxB,GAIRU,EAAMG,GAAWC,EACjBJ,EAAMG,EAAS,GAAMC,EACrBJ,EAAMG,EAAS,GAAMC,EACrBJ,EAAMG,EAAS,GAAM,EAItBlI,KAAKM,aAAe,IAAId,EAAM6I,YAAaN,EA9B/B,EAAY,EA8BwCvI,EAAMgC,WAAYhC,EAAM8I,WACxFtI,KAAKM,aAAaiI,MAAQ/I,EAAMgJ,eAChCxI,KAAKM,aAAamI,MAAQjJ,EAAMgJ,kBAMlChJ,EAAMC,SAAS8F,QACdO,QAAW,EACXN,KAAQ,EACRE,KAAQ,EACRC,OAAU,EACVC,MAAS,EACTC,OAAU,GAGJrG,EAAMC","file":"../../postprocessing/SSAOPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../math/SimplexNoise\",\n\t\"../shaders/SSAOShader\",\n\t\"../shaders/SSAOShader\",\n\t\"../shaders/SSAOShader\",\n\t\"../shaders/CopyShader\",\n\t\"./Pass\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tTHREE.SSAOPass = function ( scene, camera, width, height ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.width = ( width !== undefined ) ? width : 512;\n\t\tthis.height = ( height !== undefined ) ? height : 512;\n\n\t\tthis.clear = true;\n\n\t\tthis.camera = camera;\n\t\tthis.scene = scene;\n\n\t\tthis.kernelRadius = 8;\n\t\tthis.kernelSize = 32;\n\t\tthis.kernel = [];\n\t\tthis.noiseTexture = null;\n\t\tthis.output = 0;\n\n\t\tthis.minDistance = 0.005;\n\t\tthis.maxDistance = 0.1;\n\n\t\t//\n\n\t\tthis.generateSampleKernel();\n\t\tthis.generateRandomKernelRotations();\n\n\t\t// beauty render target with depth buffer\n\n\t\tvar depthTexture = new THREE.DepthTexture();\n\t\tdepthTexture.type = THREE.UnsignedShortType;\n\t\tdepthTexture.minFilter = THREE.NearestFilter;\n\t\tdepthTexture.maxFilter = THREE.NearestFilter;\n\n\t\tthis.beautyRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat,\n\t\t\tdepthTexture: depthTexture,\n\t\t\tdepthBuffer: true\n\t\t} );\n\n\t\t// normal render target\n\n\t\tthis.normalRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: THREE.NearestFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tformat: THREE.RGBAFormat\n\t\t} );\n\n\t\t// ssao render target\n\n\t\tthis.ssaoRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.LinearFilter,\n\t\t\tformat: THREE.RGBAFormat\n\t\t} );\n\n\t\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n\t\t// ssao material\n\n\t\tif ( THREE.SSAOShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on THREE.SSAOShader.' );\n\n\t\t}\n\n\t\tthis.ssaoMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, THREE.SSAOShader.defines ),\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAOShader.uniforms ),\n\t\t\tvertexShader: THREE.SSAOShader.vertexShader,\n\t\t\tfragmentShader: THREE.SSAOShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending\n\t\t} );\n\n\t\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\t\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\t\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\n\t\t// normal material\n\n\t\tthis.normalMaterial = new THREE.MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = THREE.NoBlending;\n\n\t\t// blur material\n\n\t\tthis.blurMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, THREE.SSAOBlurShader.defines ),\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAOBlurShader.uniforms ),\n\t\t\tvertexShader: THREE.SSAOBlurShader.vertexShader,\n\t\t\tfragmentShader: THREE.SSAOBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// material for rendering the depth\n\n\t\tthis.depthRenderMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, THREE.SSAODepthShader.defines ),\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAODepthShader.uniforms ),\n\t\t\tvertexShader: THREE.SSAODepthShader.vertexShader,\n\t\t\tfragmentShader: THREE.SSAODepthShader.fragmentShader,\n\t\t\tblending: THREE.NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t// material for rendering the content of a render target\n\n\t\tthis.copyMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.CopyShader.uniforms ),\n\t\t\tvertexShader: THREE.CopyShader.vertexShader,\n\t\t\tfragmentShader: THREE.CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: THREE.DstColorFactor,\n\t\t\tblendDst: THREE.ZeroFactor,\n\t\t\tblendEquation: THREE.AddEquation,\n\t\t\tblendSrcAlpha: THREE.DstAlphaFactor,\n\t\t\tblendDstAlpha: THREE.ZeroFactor,\n\t\t\tblendEquationAlpha: THREE.AddEquation\n\t\t} );\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( null );\n\n\t\tthis.originalClearColor = new THREE.Color();\n\n\t};\n\n\tTHREE.SSAOPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.SSAOPass,\n\n\t\tdispose: function () {\n\n\t\t\t// dispose render targets\n\n\t\t\tthis.beautyRenderTarget.dispose();\n\t\t\tthis.normalRenderTarget.dispose();\n\t\t\tthis.ssaoRenderTarget.dispose();\n\t\t\tthis.blurRenderTarget.dispose();\n\n\t\t\t// dispose materials\n\n\t\t\tthis.normalMaterial.dispose();\n\t\t\tthis.blurMaterial.dispose();\n\t\t\tthis.copyMaterial.dispose();\n\t\t\tthis.depthRenderMaterial.dispose();\n\n\t\t\t// dipsose full screen quad\n\n\t\t\tthis.fsQuad.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t\t// render beauty and depth\n\n\t\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t// render normals\n\n\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t\t// render SSAO\n\n\t\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\n\n\t\t\t// render blur\n\n\t\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\n\t\t\t// output result to screen\n\n\t\t\tswitch ( this.output ) {\n\n\t\t\t\tcase THREE.SSAOPass.OUTPUT.SSAO:\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SSAOPass.OUTPUT.Blur:\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SSAOPass.OUTPUT.Beauty:\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SSAOPass.OUTPUT.Depth:\n\n\t\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SSAOPass.OUTPUT.Normal:\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SSAOPass.OUTPUT.Default:\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.CustomBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t\t// save original state\n\t\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\t// setup pass state\n\t\t\trenderer.autoClear = false;\n\t\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\t\trenderer.setClearColor( clearColor );\n\t\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.material = passMaterial;\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// restore original state\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\trenderer.setClearColor( this.originalClearColor );\n\t\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t\t},\n\n\t\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\t\t\trenderer.autoClear = false;\n\n\t\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\t\trenderer.setClearColor( clearColor );\n\t\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\t\trenderer.render( this.scene, this.camera );\n\t\t\tthis.scene.overrideMaterial = null;\n\n\t\t\t// restore original state\n\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\trenderer.setClearColor( this.originalClearColor );\n\t\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\t\tthis.normalRenderTarget.setSize( width, height );\n\t\t\tthis.blurRenderTarget.setSize( width, height );\n\n\t\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\n\t\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t\t},\n\n\t\tgenerateSampleKernel: function () {\n\n\t\t\tvar kernelSize = this.kernelSize;\n\t\t\tvar kernel = this.kernel;\n\n\t\t\tfor ( var i = 0; i < kernelSize; i ++ ) {\n\n\t\t\t\tvar sample = new THREE.Vector3();\n\t\t\t\tsample.x = ( Math.random() * 2 ) - 1;\n\t\t\t\tsample.y = ( Math.random() * 2 ) - 1;\n\t\t\t\tsample.z = Math.random();\n\n\t\t\t\tsample.normalize();\n\n\t\t\t\tvar scale = i / kernelSize;\n\t\t\t\tscale = THREE.MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\t\tsample.multiplyScalar( scale );\n\n\t\t\t\tkernel.push( sample );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgenerateRandomKernelRotations: function () {\n\n\t\t\tvar width = 4, height = 4;\n\n\t\t\tif ( THREE.SimplexNoise === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on THREE.SimplexNoise.' );\n\n\t\t\t}\n\n\t\t\tvar simplex = new THREE.SimplexNoise();\n\n\t\t\tvar size = width * height;\n\t\t\tvar data = new Float32Array( size * 4 );\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\tvar stride = i * 4;\n\n\t\t\t\tvar x = ( Math.random() * 2 ) - 1;\n\t\t\t\tvar y = ( Math.random() * 2 ) - 1;\n\t\t\t\tvar z = 0;\n\n\t\t\t\tvar noise = simplex.noise3d( x, y, z );\n\n\t\t\t\tdata[ stride ] = noise;\n\t\t\t\tdata[ stride + 1 ] = noise;\n\t\t\t\tdata[ stride + 2 ] = noise;\n\t\t\t\tdata[ stride + 3 ] = 1;\n\n\t\t\t}\n\n\t\t\tthis.noiseTexture = new THREE.DataTexture( data, width, height, THREE.RGBAFormat, THREE.FloatType );\n\t\t\tthis.noiseTexture.wrapS = THREE.RepeatWrapping;\n\t\t\tthis.noiseTexture.wrapT = THREE.RepeatWrapping;\n\n\t\t}\n\n\t} );\n\n\tTHREE.SSAOPass.OUTPUT = {\n\t\t'Default': 0,\n\t\t'SSAO': 1,\n\t\t'Blur': 2,\n\t\t'Beauty': 3,\n\t\t'Depth': 4,\n\t\t'Normal': 5\n\t};\n\t\n\treturn THREE.SSAOPass;\n});\n"]}