{"version":3,"sources":["postprocessing/SSAOPass.js"],"names":["define","THREE","threex","Pass","SimplexNoise","SSAOShader","CopyShader","SSAOPass","scene","camera","width","height","call","this","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","generateSampleKernel","generateRandomKernelRotations","depthTexture","DepthTexture","type","UnsignedShortType","minFilter","NearestFilter","maxFilter","beautyRenderTarget","WebGLRenderTarget","LinearFilter","magFilter","format","RGBAFormat","depthBuffer","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","ShaderMaterial","defines","Object","assign","uniforms","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","value","texture","near","far","set","copy","projectionMatrix","getInverse","normalMaterial","MeshNormalMaterial","blurMaterial","SSAOBlurShader","depthRenderMaterial","SSAODepthShader","copyMaterial","transparent","depthTest","depthWrite","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","Color","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","renderOverride","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","CustomBlending","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","Vector3","x","Math","random","y","z","normalize","scale","MathUtils","lerp","multiplyScalar","push","simplex","data","Float32Array","size","stride","noise","noise3d","DataTexture","FloatType","wrapS","RepeatWrapping","wrapT","postprocessing"],"mappings":"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","file":"../../postprocessing/SSAOPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './Pass',\n    '../math/SimplexNoise',\n    '../shaders/SSAOShader',\n    '../shaders/CopyShader'\n], function (\n    THREE, \n    threex,\n    Pass, \n    SimplexNoise, \n    SSAOShader, \n    CopyShader\n) {\n    'use strict';\n    var SSAOPass = function (scene, camera, width, height) {\n        Pass.call(this);\n        this.width = width !== undefined ? width : 512;\n        this.height = height !== undefined ? height : 512;\n        this.clear = true;\n        this.camera = camera;\n        this.scene = scene;\n        this.kernelRadius = 8;\n        this.kernelSize = 32;\n        this.kernel = [];\n        this.noiseTexture = null;\n        this.output = 0;\n        this.minDistance = 0.005;\n        this.maxDistance = 0.1;\n        this.generateSampleKernel();\n        this.generateRandomKernelRotations();\n        var depthTexture = new THREE.DepthTexture();\n        depthTexture.type = THREE.UnsignedShortType;\n        depthTexture.minFilter = THREE.NearestFilter;\n        depthTexture.maxFilter = THREE.NearestFilter;\n        this.beautyRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat,\n            depthTexture: depthTexture,\n            depthBuffer: true\n        });\n        this.normalRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n        });\n        this.ssaoRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        });\n        this.blurRenderTarget = this.ssaoRenderTarget.clone();\n        if (SSAOShader === undefined) {\n            console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n        }\n        this.ssaoMaterial = new THREE.ShaderMaterial({\n            defines: Object.assign({}, SSAOShader.defines),\n            uniforms: THREE.UniformsUtils.clone(SSAOShader.uniforms),\n            vertexShader: SSAOShader.vertexShader,\n            fragmentShader: SSAOShader.fragmentShader,\n            blending: THREE.NoBlending\n        });\n        this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n        this.ssaoMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n        this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n        this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n        this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n        this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n        this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n        this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n        this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);\n        this.normalMaterial = new THREE.MeshNormalMaterial();\n        this.normalMaterial.blending = THREE.NoBlending;\n        this.blurMaterial = new THREE.ShaderMaterial({\n            defines: Object.assign({}, SSAOBlurShader.defines),\n            uniforms: THREE.UniformsUtils.clone(SSAOBlurShader.uniforms),\n            vertexShader: SSAOBlurShader.vertexShader,\n            fragmentShader: SSAOBlurShader.fragmentShader\n        });\n        this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height);\n        this.depthRenderMaterial = new THREE.ShaderMaterial({\n            defines: Object.assign({}, SSAODepthShader.defines),\n            uniforms: THREE.UniformsUtils.clone(SSAODepthShader.uniforms),\n            vertexShader: SSAODepthShader.vertexShader,\n            fragmentShader: SSAODepthShader.fragmentShader,\n            blending: THREE.NoBlending\n        });\n        this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n        this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n        this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far;\n        this.copyMaterial = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.clone(CopyShader.uniforms),\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            blendSrc: THREE.DstColorFactor,\n            blendDst: THREE.ZeroFactor,\n            blendEquation: THREE.AddEquation,\n            blendSrcAlpha: THREE.DstAlphaFactor,\n            blendDstAlpha: THREE.ZeroFactor,\n            blendEquationAlpha: THREE.AddEquation\n        });\n        this.fsQuad = new Pass.FullScreenQuad(null);\n        this.originalClearColor = new THREE.Color();\n    };\n    SSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: SSAOPass,\n        dispose: function () {\n            this.beautyRenderTarget.dispose();\n            this.normalRenderTarget.dispose();\n            this.ssaoRenderTarget.dispose();\n            this.blurRenderTarget.dispose();\n            this.normalMaterial.dispose();\n            this.blurMaterial.dispose();\n            this.copyMaterial.dispose();\n            this.depthRenderMaterial.dispose();\n            this.fsQuad.dispose();\n        },\n        render: function (renderer, writeBuffer) {\n            renderer.setRenderTarget(this.beautyRenderTarget);\n            renderer.clear();\n            renderer.render(this.scene, this.camera);\n            this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n            this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n            this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n            this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n            this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n            this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n            switch (this.output) {\n            case SSAOPass.OUTPUT.SSAO:\n                this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n                this.copyMaterial.blending = THREE.NoBlending;\n                this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n                break;\n            case SSAOPass.OUTPUT.Blur:\n                this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n                this.copyMaterial.blending = THREE.NoBlending;\n                this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n                break;\n            case SSAOPass.OUTPUT.Beauty:\n                this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n                this.copyMaterial.blending = THREE.NoBlending;\n                this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n                break;\n            case SSAOPass.OUTPUT.Depth:\n                this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n                break;\n            case SSAOPass.OUTPUT.Normal:\n                this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n                this.copyMaterial.blending = THREE.NoBlending;\n                this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n                break;\n            case SSAOPass.OUTPUT.Default:\n                this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n                this.copyMaterial.blending = THREE.NoBlending;\n                this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n                this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n                this.copyMaterial.blending = THREE.CustomBlending;\n                this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n                break;\n            default:\n                console.warn('THREE.SSAOPass: Unknown output type.');\n            }\n        },\n        renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n            this.originalClearColor.copy(renderer.getClearColor());\n            var originalClearAlpha = renderer.getClearAlpha();\n            var originalAutoClear = renderer.autoClear;\n            renderer.setRenderTarget(renderTarget);\n            renderer.autoClear = false;\n            if (clearColor !== undefined && clearColor !== null) {\n                renderer.setClearColor(clearColor);\n                renderer.setClearAlpha(clearAlpha || 0);\n                renderer.clear();\n            }\n            this.fsQuad.material = passMaterial;\n            this.fsQuad.render(renderer);\n            renderer.autoClear = originalAutoClear;\n            renderer.setClearColor(this.originalClearColor);\n            renderer.setClearAlpha(originalClearAlpha);\n        },\n        renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n            this.originalClearColor.copy(renderer.getClearColor());\n            var originalClearAlpha = renderer.getClearAlpha();\n            var originalAutoClear = renderer.autoClear;\n            renderer.setRenderTarget(renderTarget);\n            renderer.autoClear = false;\n            clearColor = overrideMaterial.clearColor || clearColor;\n            clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n            if (clearColor !== undefined && clearColor !== null) {\n                renderer.setClearColor(clearColor);\n                renderer.setClearAlpha(clearAlpha || 0);\n                renderer.clear();\n            }\n            this.scene.overrideMaterial = overrideMaterial;\n            renderer.render(this.scene, this.camera);\n            this.scene.overrideMaterial = null;\n            renderer.autoClear = originalAutoClear;\n            renderer.setClearColor(this.originalClearColor);\n            renderer.setClearAlpha(originalClearAlpha);\n        },\n        setSize: function (width, height) {\n            this.width = width;\n            this.height = height;\n            this.beautyRenderTarget.setSize(width, height);\n            this.ssaoRenderTarget.setSize(width, height);\n            this.normalRenderTarget.setSize(width, height);\n            this.blurRenderTarget.setSize(width, height);\n            this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n            this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n            this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);\n            this.blurMaterial.uniforms['resolution'].value.set(width, height);\n        },\n        generateSampleKernel: function () {\n            var kernelSize = this.kernelSize;\n            var kernel = this.kernel;\n            for (var i = 0; i < kernelSize; i++) {\n                var sample = new THREE.Vector3();\n                sample.x = Math.random() * 2 - 1;\n                sample.y = Math.random() * 2 - 1;\n                sample.z = Math.random();\n                sample.normalize();\n                var scale = i / kernelSize;\n                scale = THREE.MathUtils.lerp(0.1, 1, scale * scale);\n                sample.multiplyScalar(scale);\n                kernel.push(sample);\n            }\n        },\n        generateRandomKernelRotations: function () {\n            var width = 4, height = 4;\n            if (SimplexNoise === undefined) {\n                console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n            }\n            var simplex = new SimplexNoise();\n            var size = width * height;\n            var data = new Float32Array(size * 4);\n            for (var i = 0; i < size; i++) {\n                var stride = i * 4;\n                var x = Math.random() * 2 - 1;\n                var y = Math.random() * 2 - 1;\n                var z = 0;\n                var noise = simplex.noise3d(x, y, z);\n                data[stride] = noise;\n                data[stride + 1] = noise;\n                data[stride + 2] = noise;\n                data[stride + 3] = 1;\n            }\n            this.noiseTexture = new THREE.DataTexture(data, width, height, THREE.RGBAFormat, THREE.FloatType);\n            this.noiseTexture.wrapS = THREE.RepeatWrapping;\n            this.noiseTexture.wrapT = THREE.RepeatWrapping;\n        }\n    });\n    SSAOPass.OUTPUT = {\n        'Default': 0,\n        'SSAO': 1,\n        'Blur': 2,\n        'Beauty': 3,\n        'Depth': 4,\n        'Normal': 5\n    };\n    return threex.postprocessing.SSAOPass = SSAOPass;\n});"]}