{"version":3,"sources":["postprocessing/MaskPass.js"],"names":["define","THREE","Pass","MaskPass","scene","camera","call","this","clear","needsSwap","inverse","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass"],"mappings":";;;;;;;AAAAA,QACC,kBACA,UACC,SAASC,EAAMC,GA4GhB,OAvGAD,EAAME,SAAW,SAAWC,EAAOC,GAElCJ,EAAMC,KAAKI,KAAMC,MAEjBA,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EAEdE,KAAKC,OAAQ,EACbD,KAAKE,WAAY,EAEjBF,KAAKG,SAAU,GAIhBT,EAAME,SAASQ,UAAYC,OAAOC,OAAQD,OAAOE,OAAQb,EAAMC,KAAKS,YAEnEI,YAAad,EAAME,SAEnBa,OAAQ,SAAWC,EAAUC,EAAaC,GAEzC,IAeIC,EAAYC,EAfZC,EAAUL,EAASM,aACnBC,EAAQP,EAASO,MAIrBA,EAAMC,QAAQC,MAAMC,SAAS,GAC7BH,EAAMC,QAAQG,MAAMD,SAAS,GAI7BH,EAAMC,QAAQC,MAAMG,WAAW,GAC/BL,EAAMC,QAAQG,MAAMC,WAAW,GAM1BtB,KAAKG,SAETU,EAAa,EACbC,EAAa,IAIbD,EAAa,EACbC,EAAa,GAIdG,EAAMC,QAAQK,QAAQC,SAAS,GAC/BP,EAAMC,QAAQK,QAAQE,MAAOV,EAAQW,QAASX,EAAQW,QAASX,EAAQW,SACvET,EAAMC,QAAQK,QAAQI,QAASZ,EAAQa,OAAQf,EAAY,YAC3DI,EAAMC,QAAQK,QAAQM,SAAUf,GAChCG,EAAMC,QAAQK,QAAQD,WAAW,GAIjCZ,EAASoB,gBAAiBlB,GACrBZ,KAAKC,OAAQS,EAAST,QAC3BS,EAASD,OAAQT,KAAKH,MAAOG,KAAKF,QAElCY,EAASoB,gBAAiBnB,GACrBX,KAAKC,OAAQS,EAAST,QAC3BS,EAASD,OAAQT,KAAKH,MAAOG,KAAKF,QAIlCmB,EAAMC,QAAQC,MAAMG,WAAW,GAC/BL,EAAMC,QAAQG,MAAMC,WAAW,GAI/BL,EAAMC,QAAQK,QAAQD,WAAW,GACjCL,EAAMC,QAAQK,QAAQI,QAASZ,EAAQgB,MAAO,EAAG,YACjDd,EAAMC,QAAQK,QAAQE,MAAOV,EAAQiB,KAAMjB,EAAQiB,KAAMjB,EAAQiB,MACjEf,EAAMC,QAAQK,QAAQD,WAAW,MAOnC5B,EAAMuC,cAAgB,WAErBvC,EAAMC,KAAKI,KAAMC,MAEjBA,KAAKE,WAAY,GAIlBR,EAAMuC,cAAc7B,UAAYC,OAAOE,OAAQb,EAAMC,KAAKS,WAE1DC,OAAOC,OAAQZ,EAAMuC,cAAc7B,WAElCK,OAAQ,SAAWC,GAElBA,EAASO,MAAMC,QAAQK,QAAQD,WAAW,GAC1CZ,EAASO,MAAMC,QAAQK,QAAQC,SAAS,MAMnC9B,EAAME","file":"../../postprocessing/MaskPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"./Pass\"\n],function(THREE,Pass){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.MaskPass = function ( scene, camera ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t};\n\n\tTHREE.MaskPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.MaskPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tvar context = renderer.getContext();\n\t\t\tvar state = renderer.state;\n\n\t\t\t// don't update color or depth\n\n\t\t\tstate.buffers.color.setMask( false );\n\t\t\tstate.buffers.depth.setMask( false );\n\n\t\t\t// lock buffers\n\n\t\t\tstate.buffers.color.setLocked( true );\n\t\t\tstate.buffers.depth.setLocked( true );\n\n\t\t\t// set up stencil\n\n\t\t\tvar writeValue, clearValue;\n\n\t\t\tif ( this.inverse ) {\n\n\t\t\t\twriteValue = 0;\n\t\t\t\tclearValue = 1;\n\n\t\t\t} else {\n\n\t\t\t\twriteValue = 1;\n\t\t\t\tclearValue = 0;\n\n\t\t\t}\n\n\t\t\tstate.buffers.stencil.setTest( true );\n\t\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\t\tstate.buffers.stencil.setClear( clearValue );\n\t\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t\t// draw into the stencil buffer\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\trenderer.render( this.scene, this.camera );\n\n\t\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\t\tstate.buffers.color.setLocked( false );\n\t\t\tstate.buffers.depth.setLocked( false );\n\n\t\t\t// only render where stencil is set to 1\n\n\t\t\tstate.buffers.stencil.setLocked( false );\n\t\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t}\n\n\t} );\n\n\n\tTHREE.ClearMaskPass = function () {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.needsSwap = false;\n\n\t};\n\n\tTHREE.ClearMaskPass.prototype = Object.create( THREE.Pass.prototype );\n\n\tObject.assign( THREE.ClearMaskPass.prototype, {\n\n\t\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.MaskPass;\n});\n"]}