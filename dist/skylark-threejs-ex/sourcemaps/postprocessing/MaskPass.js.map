{"version":3,"sources":["postprocessing/MaskPass.js"],"names":["define","Pass","MaskPass","scene","camera","call","this","clear","needsSwap","inverse","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP"],"mappings":";;;;;;;AAAAA,QACI,UACD,SAAUC,GACT,aACA,IAAIC,EAAW,SAAUC,EAAOC,GAC5BH,EAAKI,KAAKC,MACVA,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EACdE,KAAKC,OAAQ,EACbD,KAAKE,WAAY,EACjBF,KAAKG,SAAU,GAwCnB,OAtCAP,EAASQ,UAAYC,OAAOC,OAAOD,OAAOE,OAAOZ,EAAKS,YAClDI,YAAaZ,EACba,OAAQ,SAAUC,EAAUC,EAAaC,GACrC,IAMIC,EAAYC,EANZC,EAAUL,EAASM,aACnBC,EAAQP,EAASO,MACrBA,EAAMC,QAAQC,MAAMC,SAAQ,GAC5BH,EAAMC,QAAQG,MAAMD,SAAQ,GAC5BH,EAAMC,QAAQC,MAAMG,WAAU,GAC9BL,EAAMC,QAAQG,MAAMC,WAAU,GAE1BtB,KAAKG,SACLU,EAAa,EACbC,EAAa,IAEbD,EAAa,EACbC,EAAa,GAEjBG,EAAMC,QAAQK,QAAQC,SAAQ,GAC9BP,EAAMC,QAAQK,QAAQE,MAAMV,EAAQW,QAASX,EAAQW,QAASX,EAAQW,SACtET,EAAMC,QAAQK,QAAQI,QAAQZ,EAAQa,OAAQf,EAAY,YAC1DI,EAAMC,QAAQK,QAAQM,SAASf,GAC/BG,EAAMC,QAAQK,QAAQD,WAAU,GAChCZ,EAASoB,gBAAgBlB,GACrBZ,KAAKC,OACLS,EAAST,QACbS,EAASD,OAAOT,KAAKH,MAAOG,KAAKF,QACjCY,EAASoB,gBAAgBnB,GACrBX,KAAKC,OACLS,EAAST,QACbS,EAASD,OAAOT,KAAKH,MAAOG,KAAKF,QACjCmB,EAAMC,QAAQC,MAAMG,WAAU,GAC9BL,EAAMC,QAAQG,MAAMC,WAAU,GAC9BL,EAAMC,QAAQK,QAAQD,WAAU,GAChCL,EAAMC,QAAQK,QAAQI,QAAQZ,EAAQgB,MAAO,EAAG,YAChDd,EAAMC,QAAQK,QAAQE,MAAMV,EAAQiB,KAAMjB,EAAQiB,KAAMjB,EAAQiB,MAChEf,EAAMC,QAAQK,QAAQD,WAAU,MAGhC1B","file":"../../postprocessing/MaskPass.js","sourcesContent":["define([\n    './Pass'\n], function (Pass) {\n    'use strict';\n    var MaskPass = function (scene, camera) {\n        Pass.call(this);\n        this.scene = scene;\n        this.camera = camera;\n        this.clear = true;\n        this.needsSwap = false;\n        this.inverse = false;\n    };\n    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: MaskPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            var context = renderer.getContext();\n            var state = renderer.state;\n            state.buffers.color.setMask(false);\n            state.buffers.depth.setMask(false);\n            state.buffers.color.setLocked(true);\n            state.buffers.depth.setLocked(true);\n            var writeValue, clearValue;\n            if (this.inverse) {\n                writeValue = 0;\n                clearValue = 1;\n            } else {\n                writeValue = 1;\n                clearValue = 0;\n            }\n            state.buffers.stencil.setTest(true);\n            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);\n            state.buffers.stencil.setClear(clearValue);\n            state.buffers.stencil.setLocked(true);\n            renderer.setRenderTarget(readBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            renderer.setRenderTarget(writeBuffer);\n            if (this.clear)\n                renderer.clear();\n            renderer.render(this.scene, this.camera);\n            state.buffers.color.setLocked(false);\n            state.buffers.depth.setLocked(false);\n            state.buffers.stencil.setLocked(false);\n            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);\n            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n            state.buffers.stencil.setLocked(true);\n        }\n    });\n    return  MaskPass;\n});"]}