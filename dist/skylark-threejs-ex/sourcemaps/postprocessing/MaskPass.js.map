{"version":3,"sources":["postprocessing/MaskPass.js"],"names":["define","threex","Pass","MaskPass","scene","camera","call","this","clear","needsSwap","inverse","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","postprocessing"],"mappings":";;;;;;;AAAAA,QACK,YACD,UACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAW,SAAUC,EAAOC,GAC5BH,EAAKI,KAAKC,MACVA,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EACdE,KAAKC,OAAQ,EACbD,KAAKE,WAAY,EACjBF,KAAKG,SAAU,GAwCnB,OAtCAP,EAASQ,UAAYC,OAAOC,OAAOD,OAAOE,OAAOZ,EAAKS,YAClDI,YAAaZ,EACba,OAAQ,SAAUC,EAAUC,EAAaC,GACrC,IAMIC,EAAYC,EANZC,EAAUL,EAASM,aACnBC,EAAQP,EAASO,MACrBA,EAAMC,QAAQC,MAAMC,SAAQ,GAC5BH,EAAMC,QAAQG,MAAMD,SAAQ,GAC5BH,EAAMC,QAAQC,MAAMG,WAAU,GAC9BL,EAAMC,QAAQG,MAAMC,WAAU,GAE1BtB,KAAKG,SACLU,EAAa,EACbC,EAAa,IAEbD,EAAa,EACbC,EAAa,GAEjBG,EAAMC,QAAQK,QAAQC,SAAQ,GAC9BP,EAAMC,QAAQK,QAAQE,MAAMV,EAAQW,QAASX,EAAQW,QAASX,EAAQW,SACtET,EAAMC,QAAQK,QAAQI,QAAQZ,EAAQa,OAAQf,EAAY,YAC1DI,EAAMC,QAAQK,QAAQM,SAASf,GAC/BG,EAAMC,QAAQK,QAAQD,WAAU,GAChCZ,EAASoB,gBAAgBlB,GACrBZ,KAAKC,OACLS,EAAST,QACbS,EAASD,OAAOT,KAAKH,MAAOG,KAAKF,QACjCY,EAASoB,gBAAgBnB,GACrBX,KAAKC,OACLS,EAAST,QACbS,EAASD,OAAOT,KAAKH,MAAOG,KAAKF,QACjCmB,EAAMC,QAAQC,MAAMG,WAAU,GAC9BL,EAAMC,QAAQG,MAAMC,WAAU,GAC9BL,EAAMC,QAAQK,QAAQD,WAAU,GAChCL,EAAMC,QAAQK,QAAQI,QAAQZ,EAAQgB,MAAO,EAAG,YAChDd,EAAMC,QAAQK,QAAQE,MAAMV,EAAQiB,KAAMjB,EAAQiB,KAAMjB,EAAQiB,MAChEf,EAAMC,QAAQK,QAAQD,WAAU,MAGhC5B,EAAOuC,eAAerC,SAAWA","file":"../../postprocessing/MaskPass.js","sourcesContent":["define([\r\n     \"../threex\",\r\n    './Pass'\r\n], function (\r\n    threex,\r\n    Pass\r\n) {\r\n    'use strict';\r\n    var MaskPass = function (scene, camera) {\r\n        Pass.call(this);\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.clear = true;\r\n        this.needsSwap = false;\r\n        this.inverse = false;\r\n    };\r\n    MaskPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: MaskPass,\r\n        render: function (renderer, writeBuffer, readBuffer) {\r\n            var context = renderer.getContext();\r\n            var state = renderer.state;\r\n            state.buffers.color.setMask(false);\r\n            state.buffers.depth.setMask(false);\r\n            state.buffers.color.setLocked(true);\r\n            state.buffers.depth.setLocked(true);\r\n            var writeValue, clearValue;\r\n            if (this.inverse) {\r\n                writeValue = 0;\r\n                clearValue = 1;\r\n            } else {\r\n                writeValue = 1;\r\n                clearValue = 0;\r\n            }\r\n            state.buffers.stencil.setTest(true);\r\n            state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\r\n            state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);\r\n            state.buffers.stencil.setClear(clearValue);\r\n            state.buffers.stencil.setLocked(true);\r\n            renderer.setRenderTarget(readBuffer);\r\n            if (this.clear)\r\n                renderer.clear();\r\n            renderer.render(this.scene, this.camera);\r\n            renderer.setRenderTarget(writeBuffer);\r\n            if (this.clear)\r\n                renderer.clear();\r\n            renderer.render(this.scene, this.camera);\r\n            state.buffers.color.setLocked(false);\r\n            state.buffers.depth.setLocked(false);\r\n            state.buffers.stencil.setLocked(false);\r\n            state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295);\r\n            state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\r\n            state.buffers.stencil.setLocked(true);\r\n        }\r\n    });\r\n    return  threex.postprocessing.MaskPass = MaskPass;\r\n});"]}