{"version":3,"sources":["postprocessing/Pass.js"],"names":["define","THREE","threex","Pass","this","enabled","needsSwap","clear","renderToScreen","camera","geometry","FullScreenQuad","Object","assign","prototype","setSize","render","console","error","OrthographicCamera","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","value","dispose","renderer","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,SAASC,IACLC,KAAKC,SAAU,EACfD,KAAKE,WAAY,EACjBF,KAAKG,OAAQ,EACbH,KAAKI,gBAAiB,EASJ,IACdC,EACAC,EACAC,EAsBR,OAhCAC,OAAOC,OAAOV,EAAKW,WACfC,QAAS,aAETC,OAAQ,WACJC,QAAQC,MAAM,iEAGtBf,EAAKQ,gBACGF,EAAS,IAAIR,EAAMkB,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,GACvDT,EAAW,IAAIT,EAAMmB,oBAAoB,EAAG,GAC5CT,EAAiB,SAAUU,GAC3BjB,KAAKkB,MAAQ,IAAIrB,EAAMsB,KAAKb,EAAUW,IAE1CT,OAAOY,eAAeb,EAAeG,UAAW,YAC5CW,IAAK,WACD,OAAOrB,KAAKkB,MAAMD,UAEtBK,IAAK,SAAUC,GACXvB,KAAKkB,MAAMD,SAAWM,KAG9Bf,OAAOC,OAAOF,EAAeG,WACzBc,QAAS,WACLxB,KAAKkB,MAAMZ,SAASkB,WAExBZ,OAAQ,SAAUa,GACdA,EAASb,OAAOZ,KAAKkB,MAAOb,MAG7BE,GAGJT,EAAO4B,eAAe3B,KAAOA","file":"../../postprocessing/Pass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    function Pass() {\r\n        this.enabled = true;\r\n        this.needsSwap = true;\r\n        this.clear = false;\r\n        this.renderToScreen = false;\r\n    }\r\n    Object.assign(Pass.prototype, {\r\n        setSize: function () {\r\n        },\r\n        render: function () {\r\n            console.error('THREE.Pass: .render() must be implemented in derived pass.');\r\n        }\r\n    });\r\n    Pass.FullScreenQuad = function () {\r\n        var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n        var geometry = new THREE.PlaneBufferGeometry(2, 2);\r\n        var FullScreenQuad = function (material) {\r\n            this._mesh = new THREE.Mesh(geometry, material);\r\n        };\r\n        Object.defineProperty(FullScreenQuad.prototype, 'material', {\r\n            get: function () {\r\n                return this._mesh.material;\r\n            },\r\n            set: function (value) {\r\n                this._mesh.material = value;\r\n            }\r\n        });\r\n        Object.assign(FullScreenQuad.prototype, {\r\n            dispose: function () {\r\n                this._mesh.geometry.dispose();\r\n            },\r\n            render: function (renderer) {\r\n                renderer.render(this._mesh, camera);\r\n            }\r\n        });\r\n        return FullScreenQuad;\r\n    }();\r\n\r\n    return threex.postprocessing.Pass = Pass;\r\n});"]}