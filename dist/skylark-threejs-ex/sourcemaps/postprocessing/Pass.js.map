{"version":3,"sources":["postprocessing/Pass.js"],"names":["define","THREE","camera","geometry","FullScreenQuad","Pass","this","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","OrthographicCamera","PlaneBufferGeometry","material","_mesh","Mesh","defineProperty","get","set","value","dispose","renderer"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA8BkB,IAEvBC,EACAC,EAEAC,EA0CL,OA5EAH,EAAMI,KAAO,WAGZC,KAAKC,SAAU,EAGfD,KAAKE,WAAY,EAGjBF,KAAKG,OAAQ,EAGbH,KAAKI,gBAAiB,GAIvBC,OAAOC,OAAQX,EAAMI,KAAKQ,WAEzBC,QAAS,aAETC,OAAQ,WAEPC,QAAQC,MAAO,iEAOjBhB,EAAMI,KAAKD,gBAENF,EAAS,IAAID,EAAMiB,oBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAC1Df,EAAW,IAAIF,EAAMkB,oBAAqB,EAAG,GAE7Cf,EAAiB,SAAWgB,GAE/Bd,KAAKe,MAAQ,IAAIpB,EAAMqB,KAAMnB,EAAUiB,IAIxCT,OAAOY,eAAgBnB,EAAeS,UAAW,YAEhDW,IAAK,WAEJ,OAAOlB,KAAKe,MAAMD,UAInBK,IAAK,SAAWC,GAEfpB,KAAKe,MAAMD,SAAWM,KAMxBf,OAAOC,OAAQR,EAAeS,WAE7Bc,QAAS,WAERrB,KAAKe,MAAMlB,SAASwB,WAIrBZ,OAAQ,SAAWa,GAElBA,EAASb,OAAQT,KAAKe,MAAOnB,MAMxBE,GAIDH,EAAMI","file":"../../postprocessing/Pass.js","sourcesContent":["define([\r\n\t\"skylark-threejs\"\r\n],function(THREE){\r\n\tTHREE.Pass = function () {\r\n\r\n\t\t// if set to true, the pass is processed by the composer\r\n\t\tthis.enabled = true;\r\n\r\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\r\n\t\tthis.needsSwap = true;\r\n\r\n\t\t// if set to true, the pass clears its buffer before rendering\r\n\t\tthis.clear = false;\r\n\r\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\r\n\t\tthis.renderToScreen = false;\r\n\r\n\t};\r\n\r\n\tObject.assign( THREE.Pass.prototype, {\r\n\r\n\t\tsetSize: function ( /* width, height */ ) {},\r\n\r\n\t\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t// Helper for passes that need to fill the viewport with a single quad.\r\n\tTHREE.Pass.FullScreenQuad = ( function () {\r\n\r\n\t\tvar camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\t\tvar geometry = new THREE.PlaneBufferGeometry( 2, 2 );\r\n\r\n\t\tvar FullScreenQuad = function ( material ) {\r\n\r\n\t\t\tthis._mesh = new THREE.Mesh( geometry, material );\r\n\r\n\t\t};\r\n\r\n\t\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._mesh.material;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._mesh.material = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tObject.assign( FullScreenQuad.prototype, {\r\n\r\n\t\t\tdispose: function () {\r\n\r\n\t\t\t\tthis._mesh.geometry.dispose();\r\n\r\n\t\t\t},\r\n\r\n\t\t\trender: function ( renderer ) {\r\n\r\n\t\t\t\trenderer.render( this._mesh, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn FullScreenQuad;\r\n\r\n\t} )();\r\n\r\n\treturn THREE.Pass;\r\n});"]}