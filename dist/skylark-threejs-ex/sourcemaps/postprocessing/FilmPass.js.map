{"version":3,"sources":["postprocessing/FilmPass.js"],"names":["define","THREE","threex","Pass","FilmShader","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,yBACA,yBACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAW,SAAUC,EAAgBC,EAAoBC,EAAgBC,GACzEN,EAAKO,KAAKC,WACSC,IAAfR,GACAS,QAAQC,MAAM,iCAClB,IAAIC,EAASX,EACbO,KAAKK,SAAWf,EAAMgB,cAAcC,MAAMH,EAAOC,UACjDL,KAAKQ,SAAW,IAAIlB,EAAMmB,gBACtBJ,SAAUL,KAAKK,SACfK,aAAcN,EAAOM,aACrBC,eAAgBP,EAAOO,sBAETV,IAAdH,IACAE,KAAKK,SAASP,UAAUc,MAAQd,QACbG,IAAnBN,IACAK,KAAKK,SAASQ,WAAWD,MAAQjB,QACVM,IAAvBL,IACAI,KAAKK,SAASS,WAAWF,MAAQhB,QACdK,IAAnBJ,IACAG,KAAKK,SAASU,OAAOH,MAAQf,GACjCG,KAAKgB,OAAS,IAAIxB,EAAKyB,eAAejB,KAAKQ,WAmB/C,OAjBAd,EAASwB,UAAYC,OAAOC,OAAOD,OAAOE,OAAO7B,EAAK0B,YAClDI,YAAa5B,EACb6B,OAAQ,SAAUC,EAAUC,EAAaC,EAAYC,GACjD3B,KAAKK,SAAmB,SAAEO,MAAQc,EAAWE,QAC7C5B,KAAKK,SAAe,KAAEO,OAASe,EAC3B3B,KAAK6B,gBACLL,EAASM,gBAAgB,MACzB9B,KAAKgB,OAAOO,OAAOC,KAEnBA,EAASM,gBAAgBL,GACrBzB,KAAK+B,OACLP,EAASO,QACb/B,KAAKgB,OAAOO,OAAOC,OAKxBjC,EAAOyC,eAAetC,SAAWA","file":"../../postprocessing/FilmPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    '../postprocessing/Pass',\n    '../shaders/FilmShader'\n], function (\n    THREE, \n    threex,\n    Pass, \n    FilmShader\n) {\n    'use strict';\n    var FilmPass = function (noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n        Pass.call(this);\n        if (FilmShader === undefined)\n            console.error('FilmPass relies on FilmShader');\n        var shader = FilmShader;\n        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader\n        });\n        if (grayscale !== undefined)\n            this.uniforms.grayscale.value = grayscale;\n        if (noiseIntensity !== undefined)\n            this.uniforms.nIntensity.value = noiseIntensity;\n        if (scanlinesIntensity !== undefined)\n            this.uniforms.sIntensity.value = scanlinesIntensity;\n        if (scanlinesCount !== undefined)\n            this.uniforms.sCount.value = scanlinesCount;\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    FilmPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: FilmPass,\n        render: function (renderer, writeBuffer, readBuffer, deltaTime) {\n            this.uniforms['tDiffuse'].value = readBuffer.texture;\n            this.uniforms['time'].value += deltaTime;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear();\n                this.fsQuad.render(renderer);\n            }\n        }\n    });\n\n    return threex.postprocessing.FilmPass = FilmPass;\n});"]}