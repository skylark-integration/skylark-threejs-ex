{"version":3,"sources":["postprocessing/FilmPass.js"],"names":["define","THREE","FilmShader","Pass","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear"],"mappings":";;;;;;;AAAAA,QACC,kBACA,wBACA,UACC,SAASC,EAAMC,EAAWC,GA2D3B,OAtDAF,EAAMG,SAAW,SAAWC,EAAgBC,EAAoBC,EAAgBC,GAE/EP,EAAME,KAAKM,KAAMC,WAESC,IAArBV,EAAMC,YACVU,QAAQC,MAAO,6CAEhB,IAAIC,EAASb,EAAMC,WAEnBQ,KAAKK,SAAWd,EAAMe,cAAcC,MAAOH,EAAOC,UAElDL,KAAKQ,SAAW,IAAIjB,EAAMkB,gBAEzBJ,SAAUL,KAAKK,SACfK,aAAcN,EAAOM,aACrBC,eAAgBP,EAAOO,sBAILV,IAAdH,IAA0BE,KAAKK,SAASP,UAAUc,MAAQd,QACvCG,IAAnBN,IAA+BK,KAAKK,SAASQ,WAAWD,MAAQjB,QACzCM,IAAvBL,IAAmCI,KAAKK,SAASS,WAAWF,MAAQhB,QACjDK,IAAnBJ,IAA+BG,KAAKK,SAASU,OAAOH,MAAQf,GAEjEG,KAAKgB,OAAS,IAAIzB,EAAME,KAAKwB,eAAgBjB,KAAKQ,WAInDjB,EAAMG,SAASwB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQ9B,EAAME,KAAKyB,YAEnEI,YAAa/B,EAAMG,SAEnB6B,OAAQ,SAAWC,EAAUC,EAAaC,EAAYC,GAErD3B,KAAKK,SAAqB,SAAEO,MAAQc,EAAWE,QAC/C5B,KAAKK,SAAiB,KAAEO,OAASe,EAE5B3B,KAAK6B,gBAETL,EAASM,gBAAiB,MAC1B9B,KAAKgB,OAAOO,OAAQC,KAIpBA,EAASM,gBAAiBL,GACrBzB,KAAK+B,OAAQP,EAASO,QAC3B/B,KAAKgB,OAAOO,OAAQC,OAQhBjC,EAAMG","file":"../../postprocessing/FilmPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/FilmShader\",\n\t\"./Pass\"\n],function(THREE,FilmShader,Pass){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tif ( THREE.FilmShader === undefined )\n\t\t\tconsole.error( \"THREE.FilmPass relies on THREE.FilmShader\" );\n\n\t\tvar shader = THREE.FilmShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\n\t\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\n\t\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\n\t\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n\t};\n\n\tTHREE.FilmPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.FilmPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer, deltaTime /*, maskActive */ ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\t\tthis.uniforms[ \"time\" ].value += deltaTime;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\tif ( this.clear ) renderer.clear();\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.FilmPass;\n});\n"]}