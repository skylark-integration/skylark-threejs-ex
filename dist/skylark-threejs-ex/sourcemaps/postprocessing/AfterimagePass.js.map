{"version":3,"sources":["postprocessing/AfterimagePass.js"],"names":["define","THREE","AfterimageShader","Pass","AfterimagePass","damp","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","textureComp","WebGLRenderTarget","window","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","textureOld","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","compFsQuad","FullScreenQuad","material","MeshBasicMaterial","copyFsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","map","renderToScreen","clear","temp","setSize","width","height"],"mappings":";;;;;;;AAAAA,QACC,kBACA,8BACA,UACC,SAASC,EAAMC,EAAiBC,GA+FjC,OA1FAF,EAAMG,eAAiB,SAAWC,GAEjCJ,EAAME,KAAKG,KAAMC,WAEeC,IAA3BP,EAAMC,kBACVO,QAAQC,MAAO,yDAEhBH,KAAKI,OAASV,EAAMC,iBAEpBK,KAAKK,SAAWX,EAAMY,cAAcC,MAAOP,KAAKI,OAAOC,UAEvDL,KAAKK,SAAiB,KAAEG,WAAiBP,IAATH,EAAqBA,EAAO,IAE5DE,KAAKS,YAAc,IAAIf,EAAMgB,kBAAmBC,OAAOC,WAAYD,OAAOE,aAEzEC,UAAWpB,EAAMqB,aACjBC,UAAWtB,EAAMuB,cACjBC,OAAQxB,EAAMyB,aAIfnB,KAAKoB,WAAa,IAAI1B,EAAMgB,kBAAmBC,OAAOC,WAAYD,OAAOE,aAExEC,UAAWpB,EAAMqB,aACjBC,UAAWtB,EAAMuB,cACjBC,OAAQxB,EAAMyB,aAIfnB,KAAKqB,eAAiB,IAAI3B,EAAM4B,gBAE/BjB,SAAUL,KAAKK,SACfkB,aAAcvB,KAAKI,OAAOmB,aAC1BC,eAAgBxB,KAAKI,OAAOoB,iBAI7BxB,KAAKyB,WAAa,IAAI/B,EAAME,KAAK8B,eAAgB1B,KAAKqB,gBAEtD,IAAIM,EAAW,IAAIjC,EAAMkC,kBACzB5B,KAAK6B,WAAa,IAAInC,EAAME,KAAK8B,eAAgBC,IAIlDjC,EAAMG,eAAeiC,UAAYC,OAAOC,OAAQD,OAAOE,OAAQvC,EAAME,KAAKkC,YAEzEI,YAAaxC,EAAMG,eAEnBsC,OAAQ,SAAWC,EAAUC,EAAaC,GAEzCtC,KAAKK,SAAiB,KAAEG,MAAQR,KAAKoB,WAAWmB,QAChDvC,KAAKK,SAAiB,KAAEG,MAAQ8B,EAAWC,QAE3CH,EAASI,gBAAiBxC,KAAKS,aAC/BT,KAAKyB,WAAWU,OAAQC,GAExBpC,KAAK6B,WAAWF,SAASc,IAAMzC,KAAKS,YAAY8B,QAE3CvC,KAAK0C,gBAETN,EAASI,gBAAiB,MAC1BxC,KAAK6B,WAAWM,OAAQC,KAIxBA,EAASI,gBAAiBH,GAErBrC,KAAK2C,OAAQP,EAASO,QAE3B3C,KAAK6B,WAAWM,OAAQC,IAKzB,IAAIQ,EAAO5C,KAAKoB,WAChBpB,KAAKoB,WAAapB,KAAKS,YACvBT,KAAKS,YAAcmC,GAKpBC,QAAS,SAAWC,EAAOC,GAE1B/C,KAAKS,YAAYoC,QAASC,EAAOC,GACjC/C,KAAKoB,WAAWyB,QAASC,EAAOC,MAM3BrD,EAAMG","file":"../../postprocessing/AfterimagePass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/AfterimageShader\",\n\t\"./Pass\"\n],function(THREE,AfterimageShader,Pass){\n\t/**\n\t * @author HypnosNova / https://www.threejs.org.cn/gallery/\n\t */\n\n\tTHREE.AfterimagePass = function ( damp ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tif ( THREE.AfterimageShader === undefined )\n\t\t\tconsole.error( \"THREE.AfterimagePass relies on THREE.AfterimageShader\" );\n\n\t\tthis.shader = THREE.AfterimageShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( this.shader.uniforms );\n\n\t\tthis.uniforms[ \"damp\" ].value = damp !== undefined ? damp : 0.96;\n\n\t\tthis.textureComp = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tformat: THREE.RGBAFormat\n\n\t\t} );\n\n\t\tthis.textureOld = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\n\t\t\tminFilter: THREE.LinearFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tformat: THREE.RGBAFormat\n\n\t\t} );\n\n\t\tthis.shaderMaterial = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: this.shader.vertexShader,\n\t\t\tfragmentShader: this.shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.compFsQuad = new THREE.Pass.FullScreenQuad( this.shaderMaterial );\n\n\t\tvar material = new THREE.MeshBasicMaterial();\n\t\tthis.copyFsQuad = new THREE.Pass.FullScreenQuad( material );\n\n\t};\n\n\tTHREE.AfterimagePass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.AfterimagePass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer ) {\n\n\t\t\tthis.uniforms[ \"tOld\" ].value = this.textureOld.texture;\n\t\t\tthis.uniforms[ \"tNew\" ].value = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( this.textureComp );\n\t\t\tthis.compFsQuad.render( renderer );\n\n\t\t\tthis.copyFsQuad.material.map = this.textureComp.texture;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t\t// Swap buffers.\n\t\t\tvar temp = this.textureOld;\n\t\t\tthis.textureOld = this.textureComp;\n\t\t\tthis.textureComp = temp;\n\t\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t\t},\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tthis.textureComp.setSize( width, height );\n\t\t\tthis.textureOld.setSize( width, height );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.AfterimagePass;\n});\n"]}