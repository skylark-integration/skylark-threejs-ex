{"version":3,"sources":["postprocessing/AfterimagePass.js"],"names":["define","THREE","Pass","AfterimageShader","AfterimagePass","damp","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","textureComp","WebGLRenderTarget","window","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","textureOld","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","compFsQuad","FullScreenQuad","material","MeshBasicMaterial","copyFsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","map","renderToScreen","clear","temp","setSize","width","height"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACA,+BACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAiB,SAAUC,GAC3BH,EAAKI,KAAKC,WACeC,IAArBL,GACAM,QAAQC,MAAM,6CAClBH,KAAKI,OAASR,EACdI,KAAKK,SAAWX,EAAMY,cAAcC,MAAMP,KAAKI,OAAOC,UACtDL,KAAKK,SAAe,KAAEG,WAAiBP,IAATH,EAAqBA,EAAO,IAC1DE,KAAKS,YAAc,IAAIf,EAAMgB,kBAAkBC,OAAOC,WAAYD,OAAOE,aACrEC,UAAWpB,EAAMqB,aACjBC,UAAWtB,EAAMuB,cACjBC,OAAQxB,EAAMyB,aAElBnB,KAAKoB,WAAa,IAAI1B,EAAMgB,kBAAkBC,OAAOC,WAAYD,OAAOE,aACpEC,UAAWpB,EAAMqB,aACjBC,UAAWtB,EAAMuB,cACjBC,OAAQxB,EAAMyB,aAElBnB,KAAKqB,eAAiB,IAAI3B,EAAM4B,gBAC5BjB,SAAUL,KAAKK,SACfkB,aAAcvB,KAAKI,OAAOmB,aAC1BC,eAAgBxB,KAAKI,OAAOoB,iBAEhCxB,KAAKyB,WAAa,IAAI9B,EAAK+B,eAAe1B,KAAKqB,gBAC/C,IAAIM,EAAW,IAAIjC,EAAMkC,kBACzB5B,KAAK6B,WAAa,IAAIlC,EAAK+B,eAAeC,IA4B9C,OA1BA9B,EAAeiC,UAAYC,OAAOC,OAAOD,OAAOE,OAAOtC,EAAKmC,YACxDI,YAAarC,EACbsC,OAAQ,SAAUC,EAAUC,EAAaC,GACrCtC,KAAKK,SAAe,KAAEG,MAAQR,KAAKoB,WAAWmB,QAC9CvC,KAAKK,SAAe,KAAEG,MAAQ8B,EAAWC,QACzCH,EAASI,gBAAgBxC,KAAKS,aAC9BT,KAAKyB,WAAWU,OAAOC,GACvBpC,KAAK6B,WAAWF,SAASc,IAAMzC,KAAKS,YAAY8B,QAC5CvC,KAAK0C,gBACLN,EAASI,gBAAgB,MACzBxC,KAAK6B,WAAWM,OAAOC,KAEvBA,EAASI,gBAAgBH,GACrBrC,KAAK2C,OACLP,EAASO,QACb3C,KAAK6B,WAAWM,OAAOC,IAE3B,IAAIQ,EAAO5C,KAAKoB,WAChBpB,KAAKoB,WAAapB,KAAKS,YACvBT,KAAKS,YAAcmC,GAEvBC,QAAS,SAAUC,EAAOC,GACtB/C,KAAKS,YAAYoC,QAAQC,EAAOC,GAChC/C,KAAKoB,WAAWyB,QAAQC,EAAOC,MAGhClD","file":"../../postprocessing/AfterimagePass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../postprocessing/Pass',\n    '../shaders/AfterimageShader'\n], function (\n    THREE, \n    Pass, \n    AfterimageShader\n) {\n    'use strict';\n    var AfterimagePass = function (damp) {\n        Pass.call(this);\n        if (AfterimageShader === undefined)\n            console.error('AfterimagePass relies on AfterimageShader');\n        this.shader = AfterimageShader;\n        this.uniforms = THREE.UniformsUtils.clone(this.shader.uniforms);\n        this.uniforms['damp'].value = damp !== undefined ? damp : 0.96;\n        this.textureComp = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n        });\n        this.textureOld = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n        });\n        this.shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: this.shader.vertexShader,\n            fragmentShader: this.shader.fragmentShader\n        });\n        this.compFsQuad = new Pass.FullScreenQuad(this.shaderMaterial);\n        var material = new THREE.MeshBasicMaterial();\n        this.copyFsQuad = new Pass.FullScreenQuad(material);\n    };\n    AfterimagePass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: AfterimagePass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            this.uniforms['tOld'].value = this.textureOld.texture;\n            this.uniforms['tNew'].value = readBuffer.texture;\n            renderer.setRenderTarget(this.textureComp);\n            this.compFsQuad.render(renderer);\n            this.copyFsQuad.material.map = this.textureComp.texture;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.copyFsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear();\n                this.copyFsQuad.render(renderer);\n            }\n            var temp = this.textureOld;\n            this.textureOld = this.textureComp;\n            this.textureComp = temp;\n        },\n        setSize: function (width, height) {\n            this.textureComp.setSize(width, height);\n            this.textureOld.setSize(width, height);\n        }\n    });\n    return AfterimagePass;\n});"]}