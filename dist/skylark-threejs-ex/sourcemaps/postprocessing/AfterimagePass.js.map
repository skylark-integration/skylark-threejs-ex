{"version":3,"sources":["postprocessing/AfterimagePass.js"],"names":["define","THREE","threex","Pass","AfterimageShader","AfterimagePass","damp","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","textureComp","WebGLRenderTarget","window","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","textureOld","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","compFsQuad","FullScreenQuad","material","MeshBasicMaterial","copyFsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","map","renderToScreen","clear","temp","setSize","width","height","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,yBACA,+BACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAiB,SAAUC,GAC3BH,EAAKI,KAAKC,WACeC,IAArBL,GACAM,QAAQC,MAAM,6CAClBH,KAAKI,OAASR,EACdI,KAAKK,SAAWZ,EAAMa,cAAcC,MAAMP,KAAKI,OAAOC,UACtDL,KAAKK,SAAe,KAAEG,WAAiBP,IAATH,EAAqBA,EAAO,IAC1DE,KAAKS,YAAc,IAAIhB,EAAMiB,kBAAkBC,OAAOC,WAAYD,OAAOE,aACrEC,UAAWrB,EAAMsB,aACjBC,UAAWvB,EAAMwB,cACjBC,OAAQzB,EAAM0B,aAElBnB,KAAKoB,WAAa,IAAI3B,EAAMiB,kBAAkBC,OAAOC,WAAYD,OAAOE,aACpEC,UAAWrB,EAAMsB,aACjBC,UAAWvB,EAAMwB,cACjBC,OAAQzB,EAAM0B,aAElBnB,KAAKqB,eAAiB,IAAI5B,EAAM6B,gBAC5BjB,SAAUL,KAAKK,SACfkB,aAAcvB,KAAKI,OAAOmB,aAC1BC,eAAgBxB,KAAKI,OAAOoB,iBAEhCxB,KAAKyB,WAAa,IAAI9B,EAAK+B,eAAe1B,KAAKqB,gBAC/C,IAAIM,EAAW,IAAIlC,EAAMmC,kBACzB5B,KAAK6B,WAAa,IAAIlC,EAAK+B,eAAeC,IA4B9C,OA1BA9B,EAAeiC,UAAYC,OAAOC,OAAOD,OAAOE,OAAOtC,EAAKmC,YACxDI,YAAarC,EACbsC,OAAQ,SAAUC,EAAUC,EAAaC,GACrCtC,KAAKK,SAAe,KAAEG,MAAQR,KAAKoB,WAAWmB,QAC9CvC,KAAKK,SAAe,KAAEG,MAAQ8B,EAAWC,QACzCH,EAASI,gBAAgBxC,KAAKS,aAC9BT,KAAKyB,WAAWU,OAAOC,GACvBpC,KAAK6B,WAAWF,SAASc,IAAMzC,KAAKS,YAAY8B,QAC5CvC,KAAK0C,gBACLN,EAASI,gBAAgB,MACzBxC,KAAK6B,WAAWM,OAAOC,KAEvBA,EAASI,gBAAgBH,GACrBrC,KAAK2C,OACLP,EAASO,QACb3C,KAAK6B,WAAWM,OAAOC,IAE3B,IAAIQ,EAAO5C,KAAKoB,WAChBpB,KAAKoB,WAAapB,KAAKS,YACvBT,KAAKS,YAAcmC,GAEvBC,QAAS,SAAUC,EAAOC,GACtB/C,KAAKS,YAAYoC,QAAQC,EAAOC,GAChC/C,KAAKoB,WAAWyB,QAAQC,EAAOC,MAGhCrD,EAAOsD,eAAenD,eAAiBA","file":"../../postprocessing/AfterimagePass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../postprocessing/Pass',\r\n    '../shaders/AfterimageShader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    Pass, \r\n    AfterimageShader\r\n) {\r\n    'use strict';\r\n    var AfterimagePass = function (damp) {\r\n        Pass.call(this);\r\n        if (AfterimageShader === undefined)\r\n            console.error('AfterimagePass relies on AfterimageShader');\r\n        this.shader = AfterimageShader;\r\n        this.uniforms = THREE.UniformsUtils.clone(this.shader.uniforms);\r\n        this.uniforms['damp'].value = damp !== undefined ? damp : 0.96;\r\n        this.textureComp = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\r\n            minFilter: THREE.LinearFilter,\r\n            magFilter: THREE.NearestFilter,\r\n            format: THREE.RGBAFormat\r\n        });\r\n        this.textureOld = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\r\n            minFilter: THREE.LinearFilter,\r\n            magFilter: THREE.NearestFilter,\r\n            format: THREE.RGBAFormat\r\n        });\r\n        this.shaderMaterial = new THREE.ShaderMaterial({\r\n            uniforms: this.uniforms,\r\n            vertexShader: this.shader.vertexShader,\r\n            fragmentShader: this.shader.fragmentShader\r\n        });\r\n        this.compFsQuad = new Pass.FullScreenQuad(this.shaderMaterial);\r\n        var material = new THREE.MeshBasicMaterial();\r\n        this.copyFsQuad = new Pass.FullScreenQuad(material);\r\n    };\r\n    AfterimagePass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: AfterimagePass,\r\n        render: function (renderer, writeBuffer, readBuffer) {\r\n            this.uniforms['tOld'].value = this.textureOld.texture;\r\n            this.uniforms['tNew'].value = readBuffer.texture;\r\n            renderer.setRenderTarget(this.textureComp);\r\n            this.compFsQuad.render(renderer);\r\n            this.copyFsQuad.material.map = this.textureComp.texture;\r\n            if (this.renderToScreen) {\r\n                renderer.setRenderTarget(null);\r\n                this.copyFsQuad.render(renderer);\r\n            } else {\r\n                renderer.setRenderTarget(writeBuffer);\r\n                if (this.clear)\r\n                    renderer.clear();\r\n                this.copyFsQuad.render(renderer);\r\n            }\r\n            var temp = this.textureOld;\r\n            this.textureOld = this.textureComp;\r\n            this.textureComp = temp;\r\n        },\r\n        setSize: function (width, height) {\r\n            this.textureComp.setSize(width, height);\r\n            this.textureOld.setSize(width, height);\r\n        }\r\n    });\r\n    return threex.postprocessing.AfterimagePass = AfterimagePass;\r\n});"]}