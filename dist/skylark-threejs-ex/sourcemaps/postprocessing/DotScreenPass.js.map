{"version":3,"sources":["postprocessing/DotScreenPass.js"],"names":["define","THREE","DotScreenShader","Pass","DotScreenPass","center","angle","scale","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","copy","material","ShaderMaterial","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"mappings":";;;;;;;AAAAA,QACC,kBACA,6BACA,UACC,SAASC,EAAMC,EAAgBC,GA0DhC,OArDAF,EAAMG,cAAgB,SAAWC,EAAQC,EAAOC,GAE/CN,EAAME,KAAKK,KAAMC,WAEcC,IAA1BT,EAAMC,iBACVS,QAAQC,MAAO,uDAEhB,IAAIC,EAASZ,EAAMC,gBAEnBO,KAAKK,SAAWb,EAAMc,cAAcC,MAAOH,EAAOC,eAElCJ,IAAXL,GAAuBI,KAAKK,SAAmB,OAAEG,MAAMC,KAAMb,QACnDK,IAAVJ,IAAsBG,KAAKK,SAAkB,MAAEG,MAAQX,QAC7CI,IAAVH,IAAsBE,KAAKK,SAAkB,MAAEG,MAAQV,GAE5DE,KAAKU,SAAW,IAAIlB,EAAMmB,gBAEzBN,SAAUL,KAAKK,SACfO,aAAcR,EAAOQ,aACrBC,eAAgBT,EAAOS,iBAIxBb,KAAKc,OAAS,IAAItB,EAAME,KAAKqB,eAAgBf,KAAKU,WAInDlB,EAAMG,cAAcqB,UAAYC,OAAOC,OAAQD,OAAOE,OAAQ3B,EAAME,KAAKsB,YAExEI,YAAa5B,EAAMG,cAEnB0B,OAAQ,SAAWC,EAAUC,EAAaC,GAEzCxB,KAAKK,SAAqB,SAAEG,MAAQgB,EAAWC,QAC/CzB,KAAKK,SAAkB,MAAEG,MAAMkB,IAAKF,EAAWG,MAAOH,EAAWI,QAE5D5B,KAAK6B,gBAETP,EAASQ,gBAAiB,MAC1B9B,KAAKc,OAAOO,OAAQC,KAIpBA,EAASQ,gBAAiBP,GACrBvB,KAAK+B,OAAQT,EAASS,QAC3B/B,KAAKc,OAAOO,OAAQC,OAQhB9B,EAAMG","file":"../../postprocessing/DotScreenPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/DotScreenShader\",\n\t\"./Pass\"\n],function(THREE,DotScreenShader,Pass){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.DotScreenPass = function ( center, angle, scale ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tif ( THREE.DotScreenShader === undefined )\n\t\t\tconsole.error( \"THREE.DotScreenPass relies on THREE.DotScreenShader\" );\n\n\t\tvar shader = THREE.DotScreenShader;\n\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tif ( center !== undefined ) this.uniforms[ \"center\" ].value.copy( center );\n\t\tif ( angle !== undefined ) this.uniforms[ \"angle\" ].value = angle;\n\t\tif ( scale !== undefined ) this.uniforms[ \"scale\" ].value = scale;\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n\t};\n\n\tTHREE.DotScreenPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.DotScreenPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\t\tthis.uniforms[ \"tSize\" ].value.set( readBuffer.width, readBuffer.height );\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\tif ( this.clear ) renderer.clear();\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.DotScreenPass;\n});\n"]}