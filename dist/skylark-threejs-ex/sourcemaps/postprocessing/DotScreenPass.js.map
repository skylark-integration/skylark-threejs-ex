{"version":3,"sources":["postprocessing/DotScreenPass.js"],"names":["define","THREE","threex","Pass","DotScreenShader","DotScreenPass","center","angle","scale","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","copy","material","ShaderMaterial","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,yBACA,8BACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAgB,SAAUC,EAAQC,EAAOC,GACzCL,EAAKM,KAAKC,WACcC,IAApBP,GACAQ,QAAQC,MAAM,2CAClB,IAAIC,EAASV,EACbM,KAAKK,SAAWd,EAAMe,cAAcC,MAAMH,EAAOC,eAClCJ,IAAXL,GACAI,KAAKK,SAAiB,OAAEG,MAAMC,KAAKb,QACzBK,IAAVJ,IACAG,KAAKK,SAAgB,MAAEG,MAAQX,QACrBI,IAAVH,IACAE,KAAKK,SAAgB,MAAEG,MAAQV,GACnCE,KAAKU,SAAW,IAAInB,EAAMoB,gBACtBN,SAAUL,KAAKK,SACfO,aAAcR,EAAOQ,aACrBC,eAAgBT,EAAOS,iBAE3Bb,KAAKc,OAAS,IAAIrB,EAAKsB,eAAef,KAAKU,WAmB/C,OAjBAf,EAAcqB,UAAYC,OAAOC,OAAOD,OAAOE,OAAO1B,EAAKuB,YACvDI,YAAazB,EACb0B,OAAQ,SAAUC,EAAUC,EAAaC,GACrCxB,KAAKK,SAAmB,SAAEG,MAAQgB,EAAWC,QAC7CzB,KAAKK,SAAgB,MAAEG,MAAMkB,IAAIF,EAAWG,MAAOH,EAAWI,QAC1D5B,KAAK6B,gBACLP,EAASQ,gBAAgB,MACzB9B,KAAKc,OAAOO,OAAOC,KAEnBA,EAASQ,gBAAgBP,GACrBvB,KAAK+B,OACLT,EAASS,QACb/B,KAAKc,OAAOO,OAAOC,OAKxB9B,EAAOwC,eAAerC,cAAgBA","file":"../../postprocessing/DotScreenPass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../postprocessing/Pass',\r\n    '../shaders/DotScreenShader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    Pass, \r\n    DotScreenShader\r\n) {\r\n    'use strict';\r\n    var DotScreenPass = function (center, angle, scale) {\r\n        Pass.call(this);\r\n        if (DotScreenShader === undefined)\r\n            console.error('DotScreenPass relies on DotScreenShader');\r\n        var shader = DotScreenShader;\r\n        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\r\n        if (center !== undefined)\r\n            this.uniforms['center'].value.copy(center);\r\n        if (angle !== undefined)\r\n            this.uniforms['angle'].value = angle;\r\n        if (scale !== undefined)\r\n            this.uniforms['scale'].value = scale;\r\n        this.material = new THREE.ShaderMaterial({\r\n            uniforms: this.uniforms,\r\n            vertexShader: shader.vertexShader,\r\n            fragmentShader: shader.fragmentShader\r\n        });\r\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\r\n    };\r\n    DotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: DotScreenPass,\r\n        render: function (renderer, writeBuffer, readBuffer) {\r\n            this.uniforms['tDiffuse'].value = readBuffer.texture;\r\n            this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\r\n            if (this.renderToScreen) {\r\n                renderer.setRenderTarget(null);\r\n                this.fsQuad.render(renderer);\r\n            } else {\r\n                renderer.setRenderTarget(writeBuffer);\r\n                if (this.clear)\r\n                    renderer.clear();\r\n                this.fsQuad.render(renderer);\r\n            }\r\n        }\r\n    });\r\n\r\n    return threex.postprocessing.DotScreenPass = DotScreenPass;\r\n});"]}