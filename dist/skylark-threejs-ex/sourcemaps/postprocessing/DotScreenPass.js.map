{"version":3,"sources":["postprocessing/DotScreenPass.js"],"names":["define","THREE","Pass","DotScreenShader","DotScreenPass","center","angle","scale","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","copy","material","ShaderMaterial","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"mappings":";;;;;;;AAAAA,QACI,kBACA,yBACA,8BACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAgB,SAAUC,EAAQC,EAAOC,GACzCL,EAAKM,KAAKC,WACcC,IAApBP,GACAQ,QAAQC,MAAM,2CAClB,IAAIC,EAASV,EACbM,KAAKK,SAAWb,EAAMc,cAAcC,MAAMH,EAAOC,eAClCJ,IAAXL,GACAI,KAAKK,SAAiB,OAAEG,MAAMC,KAAKb,QACzBK,IAAVJ,IACAG,KAAKK,SAAgB,MAAEG,MAAQX,QACrBI,IAAVH,IACAE,KAAKK,SAAgB,MAAEG,MAAQV,GACnCE,KAAKU,SAAW,IAAIlB,EAAMmB,gBACtBN,SAAUL,KAAKK,SACfO,aAAcR,EAAOQ,aACrBC,eAAgBT,EAAOS,iBAE3Bb,KAAKc,OAAS,IAAIrB,EAAKsB,eAAef,KAAKU,WAkB/C,OAhBAf,EAAcqB,UAAYC,OAAOC,OAAOD,OAAOE,OAAO1B,EAAKuB,YACvDI,YAAazB,EACb0B,OAAQ,SAAUC,EAAUC,EAAaC,GACrCxB,KAAKK,SAAmB,SAAEG,MAAQgB,EAAWC,QAC7CzB,KAAKK,SAAgB,MAAEG,MAAMkB,IAAIF,EAAWG,MAAOH,EAAWI,QAC1D5B,KAAK6B,gBACLP,EAASQ,gBAAgB,MACzB9B,KAAKc,OAAOO,OAAOC,KAEnBA,EAASQ,gBAAgBP,GACrBvB,KAAK+B,OACLT,EAASS,QACb/B,KAAKc,OAAOO,OAAOC,OAIxB3B","file":"../../postprocessing/DotScreenPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../postprocessing/Pass',\n    '../shaders/DotScreenShader'\n], function (\n    THREE, \n    Pass, \n    DotScreenShader\n) {\n    'use strict';\n    var DotScreenPass = function (center, angle, scale) {\n        Pass.call(this);\n        if (DotScreenShader === undefined)\n            console.error('DotScreenPass relies on DotScreenShader');\n        var shader = DotScreenShader;\n        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        if (center !== undefined)\n            this.uniforms['center'].value.copy(center);\n        if (angle !== undefined)\n            this.uniforms['angle'].value = angle;\n        if (scale !== undefined)\n            this.uniforms['scale'].value = scale;\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader\n        });\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    DotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: DotScreenPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            this.uniforms['tDiffuse'].value = readBuffer.texture;\n            this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear();\n                this.fsQuad.render(renderer);\n            }\n        }\n    });\n    return DotScreenPass;\n});"]}