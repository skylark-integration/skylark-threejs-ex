{"version":3,"sources":["postprocessing/SavePass.js"],"names":["define","THREE","threex","Pass","CopyShader","SavePass","renderTarget","call","this","undefined","console","error","shader","textureID","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","WebGLRenderTarget","window","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","format","RGBFormat","stencilBuffer","texture","name","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,SACA,yBACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAW,SAAUC,GACrBH,EAAKI,KAAKC,WACSC,IAAfL,GACAM,QAAQC,MAAM,iCAClB,IAAIC,EAASR,EACbI,KAAKK,UAAY,WACjBL,KAAKM,SAAWb,EAAMc,cAAcC,MAAMJ,EAAOE,UACjDN,KAAKS,SAAW,IAAIhB,EAAMiB,gBACtBJ,SAAUN,KAAKM,SACfK,aAAcP,EAAOO,aACrBC,eAAgBR,EAAOQ,iBAE3BZ,KAAKF,aAAeA,OACMG,IAAtBD,KAAKF,eACLE,KAAKF,aAAe,IAAIL,EAAMoB,kBAAkBC,OAAOC,WAAYD,OAAOE,aACtEC,UAAWxB,EAAMyB,aACjBC,UAAW1B,EAAMyB,aACjBE,OAAQ3B,EAAM4B,UACdC,eAAe,IAEnBtB,KAAKF,aAAayB,QAAQC,KAAO,eAErCxB,KAAKyB,WAAY,EACjBzB,KAAK0B,OAAS,IAAI/B,EAAKgC,eAAe3B,KAAKS,WAe/C,OAbAZ,EAAS+B,UAAYC,OAAOC,OAAOD,OAAOE,OAAOpC,EAAKiC,YAClDI,YAAanC,EACboC,OAAQ,SAAUC,EAAUC,EAAaC,GACjCpC,KAAKM,SAASN,KAAKK,aACnBL,KAAKM,SAASN,KAAKK,WAAWgC,MAAQD,EAAWb,SAErDW,EAASI,gBAAgBtC,KAAKF,cAC1BE,KAAKuC,OACLL,EAASK,QACbvC,KAAK0B,OAAOO,OAAOC,MAIpBxC,EAAO8C,eAAe3C,SAAWA","file":"../../postprocessing/SavePass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    './Pass',\r\n    '../shaders/CopyShader'\r\n], function (\r\n    THREE,\r\n    threex, \r\n    Pass, \r\n    CopyShader\r\n) {\r\n    'use strict';\r\n    var SavePass = function (renderTarget) {\r\n        Pass.call(this);\r\n        if (CopyShader === undefined)\r\n            console.error('SavePass relies on CopyShader');\r\n        var shader = CopyShader;\r\n        this.textureID = 'tDiffuse';\r\n        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\r\n        this.material = new THREE.ShaderMaterial({\r\n            uniforms: this.uniforms,\r\n            vertexShader: shader.vertexShader,\r\n            fragmentShader: shader.fragmentShader\r\n        });\r\n        this.renderTarget = renderTarget;\r\n        if (this.renderTarget === undefined) {\r\n            this.renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\r\n                minFilter: THREE.LinearFilter,\r\n                magFilter: THREE.LinearFilter,\r\n                format: THREE.RGBFormat,\r\n                stencilBuffer: false\r\n            });\r\n            this.renderTarget.texture.name = 'SavePass.rt';\r\n        }\r\n        this.needsSwap = false;\r\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\r\n    };\r\n    SavePass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: SavePass,\r\n        render: function (renderer, writeBuffer, readBuffer) {\r\n            if (this.uniforms[this.textureID]) {\r\n                this.uniforms[this.textureID].value = readBuffer.texture;\r\n            }\r\n            renderer.setRenderTarget(this.renderTarget);\r\n            if (this.clear)\r\n                renderer.clear();\r\n            this.fsQuad.render(renderer);\r\n        }\r\n    });\r\n\r\n    return threex.postprocessing.SavePass = SavePass;\r\n});"]}