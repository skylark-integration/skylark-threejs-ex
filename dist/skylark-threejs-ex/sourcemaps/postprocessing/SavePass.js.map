{"version":3,"sources":["postprocessing/SavePass.js"],"names":["define","THREE","threex","Pass","CopyShader","SavePass","renderTarget","call","this","undefined","console","error","shader","textureID","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","WebGLRenderTarget","window","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","format","RGBFormat","stencilBuffer","texture","name","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,SACA,yBACD,SACCC,EACAC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAW,SAAUC,GACrBH,EAAKI,KAAKC,WACSC,IAAfL,GACAM,QAAQC,MAAM,iCAClB,IAAIC,EAASR,EACbI,KAAKK,UAAY,WACjBL,KAAKM,SAAWb,EAAMc,cAAcC,MAAMJ,EAAOE,UACjDN,KAAKS,SAAW,IAAIhB,EAAMiB,gBACtBJ,SAAUN,KAAKM,SACfK,aAAcP,EAAOO,aACrBC,eAAgBR,EAAOQ,iBAE3BZ,KAAKF,aAAeA,OACMG,IAAtBD,KAAKF,eACLE,KAAKF,aAAe,IAAIL,EAAMoB,kBAAkBC,OAAOC,WAAYD,OAAOE,aACtEC,UAAWxB,EAAMyB,aACjBC,UAAW1B,EAAMyB,aACjBE,OAAQ3B,EAAM4B,UACdC,eAAe,IAEnBtB,KAAKF,aAAayB,QAAQC,KAAO,eAErCxB,KAAKyB,WAAY,EACjBzB,KAAK0B,OAAS,IAAI/B,EAAKgC,eAAe3B,KAAKS,WAe/C,OAbAZ,EAAS+B,UAAYC,OAAOC,OAAOD,OAAOE,OAAOpC,EAAKiC,YAClDI,YAAanC,EACboC,OAAQ,SAAUC,EAAUC,EAAaC,GACjCpC,KAAKM,SAASN,KAAKK,aACnBL,KAAKM,SAASN,KAAKK,WAAWgC,MAAQD,EAAWb,SAErDW,EAASI,gBAAgBtC,KAAKF,cAC1BE,KAAKuC,OACLL,EAASK,QACbvC,KAAK0B,OAAOO,OAAOC,MAIpBxC,EAAO8C,eAAe3C,SAAWA","file":"../../postprocessing/SavePass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    './Pass',\n    '../shaders/CopyShader'\n], function (\n    THREE,\n    threex, \n    Pass, \n    CopyShader\n) {\n    'use strict';\n    var SavePass = function (renderTarget) {\n        Pass.call(this);\n        if (CopyShader === undefined)\n            console.error('SavePass relies on CopyShader');\n        var shader = CopyShader;\n        this.textureID = 'tDiffuse';\n        this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader\n        });\n        this.renderTarget = renderTarget;\n        if (this.renderTarget === undefined) {\n            this.renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBFormat,\n                stencilBuffer: false\n            });\n            this.renderTarget.texture.name = 'SavePass.rt';\n        }\n        this.needsSwap = false;\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    SavePass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: SavePass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            if (this.uniforms[this.textureID]) {\n                this.uniforms[this.textureID].value = readBuffer.texture;\n            }\n            renderer.setRenderTarget(this.renderTarget);\n            if (this.clear)\n                renderer.clear();\n            this.fsQuad.render(renderer);\n        }\n    });\n\n    return threex.postprocessing.SavePass = SavePass;\n});"]}