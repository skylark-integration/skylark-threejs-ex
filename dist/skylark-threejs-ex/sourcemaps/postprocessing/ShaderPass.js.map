{"version":3,"sources":["postprocessing/ShaderPass.js"],"names":["define","THREE","ShaderPass","shader","textureID","Pass","call","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":";;;;;;;AAAAA,QACC,kBACA,UACC,SAASC,GAoEV,OA/DAA,EAAMC,WAAa,SAAWC,EAAQC,GAErCH,EAAMI,KAAKC,KAAMC,MAEjBA,KAAKH,eAA4BI,IAAdJ,EAA4BA,EAAY,WAEtDD,aAAkBF,EAAMQ,gBAE5BF,KAAKG,SAAWP,EAAOO,SAEvBH,KAAKI,SAAWR,GAELA,IAEXI,KAAKG,SAAWT,EAAMW,cAAcC,MAAOV,EAAOO,UAElDH,KAAKI,SAAW,IAAIV,EAAMQ,gBAEzBK,QAASC,OAAOC,UAAYb,EAAOW,SACnCJ,SAAUH,KAAKG,SACfO,aAAcd,EAAOc,aACrBC,eAAgBf,EAAOe,kBAMzBX,KAAKY,OAAS,IAAIlB,EAAMI,KAAKe,eAAgBb,KAAKI,WAInDV,EAAMC,WAAWmB,UAAYN,OAAOC,OAAQD,OAAOO,OAAQrB,EAAMI,KAAKgB,YAErEE,YAAatB,EAAMC,WAEnBsB,OAAQ,SAAWC,EAAUC,EAAaC,GAEpCpB,KAAKG,SAAUH,KAAKH,aAExBG,KAAKG,SAAUH,KAAKH,WAAYwB,MAAQD,EAAWE,SAIpDtB,KAAKY,OAAOR,SAAWJ,KAAKI,SAEvBJ,KAAKuB,gBAETL,EAASM,gBAAiB,MAC1BxB,KAAKY,OAAOK,OAAQC,KAIpBA,EAASM,gBAAiBL,GAErBnB,KAAKyB,OAAQP,EAASO,MAAOP,EAASQ,eAAgBR,EAASS,eAAgBT,EAASU,kBAC7F5B,KAAKY,OAAOK,OAAQC,OAQhBxB,EAAMC","file":"../../postprocessing/ShaderPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"./Pass\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.ShaderPass = function ( shader, textureID ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\t\tif ( shader instanceof THREE.ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n\t};\n\n\tTHREE.ShaderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.ShaderPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.material = this.material;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.ShaderPass;\n});\n"]}