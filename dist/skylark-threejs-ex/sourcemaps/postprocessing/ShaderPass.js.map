{"version":3,"sources":["postprocessing/ShaderPass.js"],"names":["define","THREE","threex","Pass","ShaderPass","shader","textureID","call","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","postprocessing"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,UACD,SACCC,EACAC,EACAC,GAEA,aACA,IAAIC,EAAa,SAAUC,EAAQC,GAC/BH,EAAKI,KAAKC,MACVA,KAAKF,eAA0BG,IAAdH,EAA0BA,EAAY,WACnDD,aAAkBJ,EAAMS,gBACxBF,KAAKG,SAAWN,EAAOM,SACvBH,KAAKI,SAAWP,GACTA,IACPG,KAAKG,SAAWV,EAAMY,cAAcC,MAAMT,EAAOM,UACjDH,KAAKI,SAAW,IAAIX,EAAMS,gBACtBK,QAASC,OAAOC,UAAWZ,EAAOU,SAClCJ,SAAUH,KAAKG,SACfO,aAAcb,EAAOa,aACrBC,eAAgBd,EAAOc,kBAG/BX,KAAKY,OAAS,IAAIjB,EAAKkB,eAAeb,KAAKI,WAoB/C,OAlBAR,EAAWkB,UAAYN,OAAOC,OAAOD,OAAOO,OAAOpB,EAAKmB,YACpDE,YAAapB,EACbqB,OAAQ,SAAUC,EAAUC,EAAaC,GACjCpB,KAAKG,SAASH,KAAKF,aACnBE,KAAKG,SAASH,KAAKF,WAAWuB,MAAQD,EAAWE,SAErDtB,KAAKY,OAAOR,SAAWJ,KAAKI,SACxBJ,KAAKuB,gBACLL,EAASM,gBAAgB,MACzBxB,KAAKY,OAAOK,OAAOC,KAEnBA,EAASM,gBAAgBL,GACrBnB,KAAKyB,OACLP,EAASO,MAAMP,EAASQ,eAAgBR,EAASS,eAAgBT,EAASU,kBAC9E5B,KAAKY,OAAOK,OAAOC,OAIxBxB,EAAOmC,eAAejC,WAAaA","file":"../../postprocessing/ShaderPass.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    './Pass'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    Pass\r\n) {\r\n    'use strict';\r\n    var ShaderPass = function (shader, textureID) {\r\n        Pass.call(this);\r\n        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\r\n        if (shader instanceof THREE.ShaderMaterial) {\r\n            this.uniforms = shader.uniforms;\r\n            this.material = shader;\r\n        } else if (shader) {\r\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\r\n            this.material = new THREE.ShaderMaterial({\r\n                defines: Object.assign({}, shader.defines),\r\n                uniforms: this.uniforms,\r\n                vertexShader: shader.vertexShader,\r\n                fragmentShader: shader.fragmentShader\r\n            });\r\n        }\r\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\r\n    };\r\n    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n        constructor: ShaderPass,\r\n        render: function (renderer, writeBuffer, readBuffer) {\r\n            if (this.uniforms[this.textureID]) {\r\n                this.uniforms[this.textureID].value = readBuffer.texture;\r\n            }\r\n            this.fsQuad.material = this.material;\r\n            if (this.renderToScreen) {\r\n                renderer.setRenderTarget(null);\r\n                this.fsQuad.render(renderer);\r\n            } else {\r\n                renderer.setRenderTarget(writeBuffer);\r\n                if (this.clear)\r\n                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\r\n                this.fsQuad.render(renderer);\r\n            }\r\n        }\r\n    });\r\n    return threex.postprocessing.ShaderPass = ShaderPass;\r\n});"]}