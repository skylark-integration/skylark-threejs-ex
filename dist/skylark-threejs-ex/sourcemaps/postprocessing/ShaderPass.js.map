{"version":3,"sources":["postprocessing/ShaderPass.js"],"names":["define","THREE","Pass","ShaderPass","shader","textureID","call","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":";;;;;;;AAAAA,QACI,kBACA,UACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAa,SAAUC,EAAQC,GAC/BH,EAAKI,KAAKC,MACVA,KAAKF,eAA0BG,IAAdH,EAA0BA,EAAY,WACnDD,aAAkBH,EAAMQ,gBACxBF,KAAKG,SAAWN,EAAOM,SACvBH,KAAKI,SAAWP,GACTA,IACPG,KAAKG,SAAWT,EAAMW,cAAcC,MAAMT,EAAOM,UACjDH,KAAKI,SAAW,IAAIV,EAAMQ,gBACtBK,QAASC,OAAOC,UAAWZ,EAAOU,SAClCJ,SAAUH,KAAKG,SACfO,aAAcb,EAAOa,aACrBC,eAAgBd,EAAOc,kBAG/BX,KAAKY,OAAS,IAAIjB,EAAKkB,eAAeb,KAAKI,WAoB/C,OAlBAR,EAAWkB,UAAYN,OAAOC,OAAOD,OAAOO,OAAOpB,EAAKmB,YACpDE,YAAapB,EACbqB,OAAQ,SAAUC,EAAUC,EAAaC,GACjCpB,KAAKG,SAASH,KAAKF,aACnBE,KAAKG,SAASH,KAAKF,WAAWuB,MAAQD,EAAWE,SAErDtB,KAAKY,OAAOR,SAAWJ,KAAKI,SACxBJ,KAAKuB,gBACLL,EAASM,gBAAgB,MACzBxB,KAAKY,OAAOK,OAAOC,KAEnBA,EAASM,gBAAgBL,GACrBnB,KAAKyB,OACLP,EAASO,MAAMP,EAASQ,eAAgBR,EAASS,eAAgBT,EAASU,kBAC9E5B,KAAKY,OAAOK,OAAOC,OAIxBtB","file":"../../postprocessing/ShaderPass.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    './Pass'\n], function (\n    THREE, \n    Pass\n) {\n    'use strict';\n    var ShaderPass = function (shader, textureID) {\n        Pass.call(this);\n        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else if (shader) {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: Object.assign({}, shader.defines),\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new Pass.FullScreenQuad(this.material);\n    };\n    ShaderPass.prototype = Object.assign(Object.create(Pass.prototype), {\n        constructor: ShaderPass,\n        render: function (renderer, writeBuffer, readBuffer) {\n            if (this.uniforms[this.textureID]) {\n                this.uniforms[this.textureID].value = readBuffer.texture;\n            }\n            this.fsQuad.material = this.material;\n            if (this.renderToScreen) {\n                renderer.setRenderTarget(null);\n                this.fsQuad.render(renderer);\n            } else {\n                renderer.setRenderTarget(writeBuffer);\n                if (this.clear)\n                    renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n                this.fsQuad.render(renderer);\n            }\n        }\n    });\n    return ShaderPass;\n});"]}