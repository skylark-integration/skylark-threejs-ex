{"version":3,"sources":["postprocessing/GlitchPass.js"],"names":["define","THREE","DigitalGlitch","Pass","GlitchPass","dt_size","call","this","undefined","console","error","shader","uniforms","UniformsUtils","clone","value","generateHeightmap","material","ShaderMaterial","vertexShader","fragmentShader","fsQuad","FullScreenQuad","goWild","curF","generateTrigger","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","Math","random","randX","MathUtils","randFloat","PI","renderToScreen","setRenderTarget","clear","randInt","data_arr","Float32Array","length","i","val","DataTexture","RGBFormat","FloatType"],"mappings":"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","file":"../../postprocessing/GlitchPass.js","sourcesContent":["define([\n\t\"skylark-threejs\",\n\t\"../shaders/DigitalGlitch\",\n\t\"./Pass\"\n],function(THREE,DigitalGlitch,Pass){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.GlitchPass = function ( dt_size ) {\n\n\t\tTHREE.Pass.call( this );\n\n\t\tif ( THREE.DigitalGlitch === undefined ) console.error( \"THREE.GlitchPass relies on THREE.DigitalGlitch\" );\n\n\t\tvar shader = THREE.DigitalGlitch;\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\tif ( dt_size == undefined ) dt_size = 64;\n\n\n\t\tthis.uniforms[ \"tDisp\" ].value = this.generateHeightmap( dt_size );\n\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\t\t} );\n\n\t\tthis.fsQuad = new THREE.Pass.FullScreenQuad( this.material );\n\n\t\tthis.goWild = false;\n\t\tthis.curF = 0;\n\t\tthis.generateTrigger();\n\n\t};\n\n\tTHREE.GlitchPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n\n\t\tconstructor: THREE.GlitchPass,\n\n\t\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\t\tthis.uniforms[ 'seed' ].value = Math.random();//default seeding\n\t\t\tthis.uniforms[ 'byp' ].value = 0;\n\n\t\t\tif ( this.curF % this.randX == 0 || this.goWild == true ) {\n\n\t\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\t\tthis.uniforms[ 'angle' ].value = THREE.MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\t\tthis.uniforms[ 'seed_x' ].value = THREE.MathUtils.randFloat( - 1, 1 );\n\t\t\t\tthis.uniforms[ 'seed_y' ].value = THREE.MathUtils.randFloat( - 1, 1 );\n\t\t\t\tthis.uniforms[ 'distortion_x' ].value = THREE.MathUtils.randFloat( 0, 1 );\n\t\t\t\tthis.uniforms[ 'distortion_y' ].value = THREE.MathUtils.randFloat( 0, 1 );\n\t\t\t\tthis.curF = 0;\n\t\t\t\tthis.generateTrigger();\n\n\t\t\t} else if ( this.curF % this.randX < this.randX / 5 ) {\n\n\t\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\t\tthis.uniforms[ 'angle' ].value = THREE.MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\t\tthis.uniforms[ 'distortion_x' ].value = THREE.MathUtils.randFloat( 0, 1 );\n\t\t\t\tthis.uniforms[ 'distortion_y' ].value = THREE.MathUtils.randFloat( 0, 1 );\n\t\t\t\tthis.uniforms[ 'seed_x' ].value = THREE.MathUtils.randFloat( - 0.3, 0.3 );\n\t\t\t\tthis.uniforms[ 'seed_y' ].value = THREE.MathUtils.randFloat( - 0.3, 0.3 );\n\n\t\t\t} else if ( this.goWild == false ) {\n\n\t\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t\t}\n\n\t\t\tthis.curF ++;\n\n\t\t\tif ( this.renderToScreen ) {\n\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t\tif ( this.clear ) renderer.clear();\n\t\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t}\n\n\t\t},\n\n\t\tgenerateTrigger: function () {\n\n\t\t\tthis.randX = THREE.MathUtils.randInt( 120, 240 );\n\n\t\t},\n\n\t\tgenerateHeightmap: function ( dt_size ) {\n\n\t\t\tvar data_arr = new Float32Array( dt_size * dt_size * 3 );\n\t\t\tvar length = dt_size * dt_size;\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar val = THREE.MathUtils.randFloat( 0, 1 );\n\t\t\t\tdata_arr[ i * 3 + 0 ] = val;\n\t\t\t\tdata_arr[ i * 3 + 1 ] = val;\n\t\t\t\tdata_arr[ i * 3 + 2 ] = val;\n\n\t\t\t}\n\n\t\t\treturn new THREE.DataTexture( data_arr, dt_size, dt_size, THREE.RGBFormat, THREE.FloatType );\n\n\t\t}\n\n\t} );\n\t\n\treturn THREE.GlitchPass;\n});\n"]}