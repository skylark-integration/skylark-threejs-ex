{"version":3,"sources":["shaders/GodRaysShader.js"],"names":["define","THREE","GodRaysDepthMaskShader","uniforms","tInput","value","vertexShader","join","fragmentShader","GodRaysGenerateShader","fStepSize","vSunPositionScreenSpace","Vector2","GodRaysCombineShader","tColors","tGodRays","fGodRayIntensity","GodRaysFakeSunShader","fAspect","sunColor","Color","bgColor"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,SAAUC,GAClC,aAqHA,OACIC,wBApHAC,UAAYC,QAAUC,MAAO,OAC7BC,cACI,oBACA,gBACA,aACA,6EACA,KACFC,KAAK,MACPC,gBACI,oBACA,4BACA,gBACA,2DACA,KACFD,KAAK,OAuGPE,uBApGAN,UACIC,QAAUC,MAAO,MACjBK,WAAaL,MAAO,GACpBM,yBAA2BN,MAAO,IAAIJ,EAAMW,QAAQ,GAAK,MAE7DN,cACI,oBACA,gBACA,aACA,6EACA,KACFC,KAAK,MACPC,gBACI,4BACA,oBACA,4BACA,wCACA,2BACA,gBACA,gDACA,kCACA,2CACA,kCACA,sBACA,qBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,8CACA,0BACA,KACFD,KAAK,OA6DPM,sBA1DAV,UACIW,SAAWT,MAAO,MAClBU,UAAYV,MAAO,MACnBW,kBAAoBX,MAAO,KAC3BM,yBAA2BN,MAAO,IAAIJ,EAAMW,QAAQ,GAAK,MAE7DN,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,6BACA,8BACA,wCACA,kCACA,gBACA,8GACA,0BACA,KACFD,KAAK,OAoCPU,sBAjCAd,UACIQ,yBAA2BN,MAAO,IAAIJ,EAAMW,QAAQ,GAAK,KACzDM,SAAWb,MAAO,GAClBc,UAAYd,MAAO,IAAIJ,EAAMmB,MAAM,WACnCC,SAAWhB,MAAO,IAAIJ,EAAMmB,MAAM,KAEtCd,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,wCACA,yBACA,yBACA,wBACA,gBACA,+CACA,uBACA,0DACA,0CACA,6DACA,0BACA,KACFD,KAAK","file":"../../shaders/GodRaysShader.js","sourcesContent":["define([\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var GodRaysDepthMaskShader = {\n        uniforms: { tInput: { value: null } },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' vUv = uv;',\n            ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'varying vec2 vUv;',\n            'uniform sampler2D tInput;',\n            'void main() {',\n            '\\tgl_FragColor = vec4( 1.0 ) - texture2D( tInput, vUv );',\n            '}'\n        ].join('\\n')\n    };\n    var GodRaysGenerateShader = {\n        uniforms: {\n            tInput: { value: null },\n            fStepSize: { value: 1 },\n            vSunPositionScreenSpace: { value: new THREE.Vector2(0.5, 0.5) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' vUv = uv;',\n            ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#define TAPS_PER_PASS 6.0',\n            'varying vec2 vUv;',\n            'uniform sampler2D tInput;',\n            'uniform vec2 vSunPositionScreenSpace;',\n            'uniform float fStepSize;',\n            'void main() {',\n            '\\tvec2 delta = vSunPositionScreenSpace - vUv;',\n            '\\tfloat dist = length( delta );',\n            '\\tvec2 stepv = fStepSize * delta / dist;',\n            '\\tfloat iters = dist/fStepSize;',\n            '\\tvec2 uv = vUv.xy;',\n            '\\tfloat col = 0.0;',\n            '\\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\n            '\\tuv += stepv;',\n            '\\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\n            '\\tuv += stepv;',\n            '\\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\n            '\\tuv += stepv;',\n            '\\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\n            '\\tuv += stepv;',\n            '\\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\n            '\\tuv += stepv;',\n            '\\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\n            '\\tuv += stepv;',\n            '\\tgl_FragColor = vec4( col/TAPS_PER_PASS );',\n            '\\tgl_FragColor.a = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n    var GodRaysCombineShader = {\n        uniforms: {\n            tColors: { value: null },\n            tGodRays: { value: null },\n            fGodRayIntensity: { value: 0.69 },\n            vSunPositionScreenSpace: { value: new THREE.Vector2(0.5, 0.5) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'varying vec2 vUv;',\n            'uniform sampler2D tColors;',\n            'uniform sampler2D tGodRays;',\n            'uniform vec2 vSunPositionScreenSpace;',\n            'uniform float fGodRayIntensity;',\n            'void main() {',\n            '\\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );',\n            '\\tgl_FragColor.a = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n    var GodRaysFakeSunShader = {\n        uniforms: {\n            vSunPositionScreenSpace: { value: new THREE.Vector2(0.5, 0.5) },\n            fAspect: { value: 1 },\n            sunColor: { value: new THREE.Color(16772608) },\n            bgColor: { value: new THREE.Color(0) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'varying vec2 vUv;',\n            'uniform vec2 vSunPositionScreenSpace;',\n            'uniform float fAspect;',\n            'uniform vec3 sunColor;',\n            'uniform vec3 bgColor;',\n            'void main() {',\n            '\\tvec2 diff = vUv - vSunPositionScreenSpace;',\n            '\\tdiff.x *= fAspect;',\n            '\\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );',\n            '\\tprop = 0.35 * pow( 1.0 - prop, 3.0 );',\n            '\\tgl_FragColor.xyz = mix( sunColor, bgColor, 1.0 - prop );',\n            '\\tgl_FragColor.w = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n    return {\n        GodRaysDepthMaskShader,\n        GodRaysGenerateShader,\n        GodRaysCombineShader,\n        GodRaysFakeSunShader\n    };\n});"]}