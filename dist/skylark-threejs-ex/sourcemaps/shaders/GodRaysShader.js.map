{"version":3,"sources":["shaders/GodRaysShader.js"],"names":["define","THREE","threex","GodRaysDepthMaskShader","uniforms","tInput","value","vertexShader","join","fragmentShader","GodRaysGenerateShader","fStepSize","vSunPositionScreenSpace","Vector2","GodRaysCombineShader","tColors","tGodRays","fGodRayIntensity","GodRaysFakeSunShader","fAspect","sunColor","Color","bgColor","shaders","GodRayShader"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,UAAYC,QAAUC,MAAO,OAC7BC,cACI,oBACA,gBACA,aACA,6EACA,KACFC,KAAK,MACPC,gBACI,oBACA,4BACA,gBACA,2DACA,KACFD,KAAK,OAEPE,GACAN,UACIC,QAAUC,MAAO,MACjBK,WAAaL,MAAO,GACpBM,yBAA2BN,MAAO,IAAIL,EAAMY,QAAQ,GAAK,MAE7DN,cACI,oBACA,gBACA,aACA,6EACA,KACFC,KAAK,MACPC,gBACI,4BACA,oBACA,4BACA,wCACA,2BACA,gBACA,gDACA,kCACA,2CACA,kCACA,sBACA,qBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,wEACA,iBACA,8CACA,0BACA,KACFD,KAAK,OAEPM,GACAV,UACIW,SAAWT,MAAO,MAClBU,UAAYV,MAAO,MACnBW,kBAAoBX,MAAO,KAC3BM,yBAA2BN,MAAO,IAAIL,EAAMY,QAAQ,GAAK,MAE7DN,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,6BACA,8BACA,wCACA,kCACA,gBACA,8GACA,0BACA,KACFD,KAAK,OAEPU,GACAd,UACIQ,yBAA2BN,MAAO,IAAIL,EAAMY,QAAQ,GAAK,KACzDM,SAAWb,MAAO,GAClBc,UAAYd,MAAO,IAAIL,EAAMoB,MAAM,WACnCC,SAAWhB,MAAO,IAAIL,EAAMoB,MAAM,KAEtCd,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,wCACA,yBACA,yBACA,wBACA,gBACA,+CACA,uBACA,0DACA,0CACA,6DACA,0BACA,KACFD,KAAK,OAEX,OAAON,EAAOqB,QAAQC,cAClBrB,uBAAAA,EACAO,sBAAAA,EACAI,qBAAAA,EACAI,qBAAAA","file":"../../shaders/GodRaysShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var GodRaysDepthMaskShader = {\r\n        uniforms: { tInput: { value: null } },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            ' vUv = uv;',\r\n            ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'varying vec2 vUv;',\r\n            'uniform sampler2D tInput;',\r\n            'void main() {',\r\n            '\\tgl_FragColor = vec4( 1.0 ) - texture2D( tInput, vUv );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    var GodRaysGenerateShader = {\r\n        uniforms: {\r\n            tInput: { value: null },\r\n            fStepSize: { value: 1 },\r\n            vSunPositionScreenSpace: { value: new THREE.Vector2(0.5, 0.5) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            ' vUv = uv;',\r\n            ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            '#define TAPS_PER_PASS 6.0',\r\n            'varying vec2 vUv;',\r\n            'uniform sampler2D tInput;',\r\n            'uniform vec2 vSunPositionScreenSpace;',\r\n            'uniform float fStepSize;',\r\n            'void main() {',\r\n            '\\tvec2 delta = vSunPositionScreenSpace - vUv;',\r\n            '\\tfloat dist = length( delta );',\r\n            '\\tvec2 stepv = fStepSize * delta / dist;',\r\n            '\\tfloat iters = dist/fStepSize;',\r\n            '\\tvec2 uv = vUv.xy;',\r\n            '\\tfloat col = 0.0;',\r\n            '\\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\r\n            '\\tuv += stepv;',\r\n            '\\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\r\n            '\\tuv += stepv;',\r\n            '\\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\r\n            '\\tuv += stepv;',\r\n            '\\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\r\n            '\\tuv += stepv;',\r\n            '\\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\r\n            '\\tuv += stepv;',\r\n            '\\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;',\r\n            '\\tuv += stepv;',\r\n            '\\tgl_FragColor = vec4( col/TAPS_PER_PASS );',\r\n            '\\tgl_FragColor.a = 1.0;',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    var GodRaysCombineShader = {\r\n        uniforms: {\r\n            tColors: { value: null },\r\n            tGodRays: { value: null },\r\n            fGodRayIntensity: { value: 0.69 },\r\n            vSunPositionScreenSpace: { value: new THREE.Vector2(0.5, 0.5) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'varying vec2 vUv;',\r\n            'uniform sampler2D tColors;',\r\n            'uniform sampler2D tGodRays;',\r\n            'uniform vec2 vSunPositionScreenSpace;',\r\n            'uniform float fGodRayIntensity;',\r\n            'void main() {',\r\n            '\\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );',\r\n            '\\tgl_FragColor.a = 1.0;',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    var GodRaysFakeSunShader = {\r\n        uniforms: {\r\n            vSunPositionScreenSpace: { value: new THREE.Vector2(0.5, 0.5) },\r\n            fAspect: { value: 1 },\r\n            sunColor: { value: new THREE.Color(16772608) },\r\n            bgColor: { value: new THREE.Color(0) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'varying vec2 vUv;',\r\n            'uniform vec2 vSunPositionScreenSpace;',\r\n            'uniform float fAspect;',\r\n            'uniform vec3 sunColor;',\r\n            'uniform vec3 bgColor;',\r\n            'void main() {',\r\n            '\\tvec2 diff = vUv - vSunPositionScreenSpace;',\r\n            '\\tdiff.x *= fAspect;',\r\n            '\\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );',\r\n            '\\tprop = 0.35 * pow( 1.0 - prop, 3.0 );',\r\n            '\\tgl_FragColor.xyz = mix( sunColor, bgColor, 1.0 - prop );',\r\n            '\\tgl_FragColor.w = 1.0;',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.GodRayShader = {\r\n        GodRaysDepthMaskShader,\r\n        GodRaysGenerateShader,\r\n        GodRaysCombineShader,\r\n        GodRaysFakeSunShader\r\n    };\r\n});"]}