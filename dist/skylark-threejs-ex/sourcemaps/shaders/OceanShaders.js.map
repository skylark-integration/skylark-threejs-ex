{"version":3,"sources":["shaders/OceanShaders.js"],"names":["define","THREE","threex","OceanShaders","vertexShader","join","uniforms","u_input","value","u_transformSize","u_subtransformSize","fragmentShader","u_wind","Vector2","u_resolution","u_size","u_phases","u_deltaTime","u_choppiness","u_initialSpectrum","u_displacementMap","u_normalMap","u_geometrySize","u_projectionMatrix","u_viewMatrix","u_cameraPosition","u_skyColor","u_oceanColor","u_sunDirection","u_exposure","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,KAyRJ,OAxRAA,EAA+B,kBAC3BC,cACI,oBACA,qBACA,mCACA,wCACA,KACFC,KAAK,OAEXF,EAAiC,oBAC7BG,UACIC,SAAaC,MAAO,MACpBC,iBAAqBD,MAAO,KAC5BE,oBAAwBF,MAAO,MAEnCG,gBACI,yBACA,oBACA,6BACA,iCACA,oCACA,oBACA,0CACA,uEACA,IACA,qBACA,sBACA,iDACA,UACA,iDACA,WACA,6HACA,sBACA,kGACA,yHACA,UACA,kGACA,yHACA,WACA,sEACA,qEACA,+DACA,+DACA,2CACA,KACFN,KAAK,OAEXF,EAAqC,wBACjCG,UACIM,QAAYJ,MAAO,IAAIP,EAAMY,QAAQ,GAAI,KACzCC,cAAkBN,MAAO,KACzBO,QAAYP,MAAO,MAEvBJ,cACI,qBACA,uCACA,KACFC,KAAK,MACPM,gBACI,yBACA,oBACA,wBACA,0BACA,yBACA,uBACA,8BACA,wBACA,0BACA,+CACA,IACA,yBACA,yBACA,0DACA,IACA,SACA,qBACA,8CACA,mGACA,mGACA,+CACA,yBACA,mCACA,wBACA,yCACA,4BACA,+BACA,2CACA,uBACA,yDACA,sEACA,kCACA,2EACA,wCACA,2CACA,oEACA,kDACA,oGACA,gDACA,iDACA,+BACA,kCACA,6EACA,yDACA,6GACA,kCACA,kCACA,oCACA,eACA,MACA,2CACA,KACFN,KAAK,OAEXF,EAA0B,aACtBG,UACIU,UAAcR,MAAO,MACrBS,aAAiBT,MAAO,MACxBM,cAAkBN,MAAO,MACzBO,QAAYP,MAAO,OAEvBG,gBACI,yBACA,oBACA,wBACA,0BACA,oBACA,8BACA,6BACA,8BACA,wBACA,0BACA,kDACA,IACA,qBACA,kCACA,8CACA,mGACA,mGACA,wDACA,8CACA,gEACA,+CACA,+CACA,KACFN,KAAK,OAEXF,EAA6B,gBACzBG,UACIS,QAAYP,MAAO,MACnBM,cAAkBN,MAAO,MACzBU,cAAkBV,MAAO,MACzBQ,UAAcR,MAAO,MACrBW,mBAAuBX,MAAO,OAElCG,gBACI,yBACA,oBACA,wBACA,0BACA,oBACA,wBACA,8BACA,8BACA,8BACA,uCACA,0CACA,uEACA,IACA,8BACA,8BACA,IACA,0BACA,kDACA,IACA,qBACA,8CACA,mGACA,mGACA,wDACA,8CACA,qDACA,oDACA,yFACA,sBACA,8GACA,oFACA,oFACA,sDACA,qBACA,sBACA,sBACA,MACA,kDACA,KACFN,KAAK,OAEXF,EAA4B,eACxBG,UACIc,mBAAuBZ,MAAO,MAC9BM,cAAkBN,MAAO,MACzBO,QAAYP,MAAO,OAEvBG,gBACI,yBACA,oBACA,uCACA,8BACA,wBACA,qBACA,sCACA,6CACA,yDACA,gHACA,iHACA,gHACA,iHACA,uCACA,qCACA,2CACA,6CACA,wFACA,KACFN,KAAK,OAEXF,EAAyB,YACrBG,UACIc,mBAAuBZ,MAAO,MAC9Ba,aAAiBb,MAAO,MACxBc,gBAAoBd,MAAO,MAC3BO,QAAYP,MAAO,MACnBe,oBAAwBf,MAAO,MAC/BgB,cAAkBhB,MAAO,MACzBiB,kBAAsBjB,MAAO,MAC7BkB,YAAgBlB,MAAO,MACvBmB,cAAkBnB,MAAO,MACzBoB,gBAAoBpB,MAAO,MAC3BqB,YAAgBrB,MAAO,OAE3BJ,cACI,yBACA,qBACA,oBACA,mCACA,6BACA,wBACA,gCACA,uCACA,qBACA,+FACA,mBACA,cACA,yEACA,KACFC,KAAK,MACPM,gBACI,yBACA,qBACA,oBACA,uCACA,iCACA,iCACA,6BACA,2BACA,+BACA,4BACA,0CACA,yCACA,IACA,qBACA,mDACA,oDACA,qEACA,qCACA,6EACA,wEACA,8BACA,sDACA,KACFN,KAAK,OAEJH,EAAO4B,QAAQ3B,aAAeA","file":"../../shaders/OceanShaders.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var OceanShaders = {};\n    OceanShaders['ocean_sim_vertex'] = {\n        vertexShader: [\n            'varying vec2 vUV;',\n            'void main (void) {',\n            '\\tvUV = position.xy * 0.5 + 0.5;',\n            '\\tgl_Position = vec4(position, 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    OceanShaders['ocean_subtransform'] = {\n        uniforms: {\n            'u_input': { value: null },\n            'u_transformSize': { value: 512 },\n            'u_subtransformSize': { value: 250 }\n        },\n        fragmentShader: [\n            'precision highp float;',\n            '#include <common>',\n            'uniform sampler2D u_input;',\n            'uniform float u_transformSize;',\n            'uniform float u_subtransformSize;',\n            'varying vec2 vUV;',\n            'vec2 multiplyComplex (vec2 a, vec2 b) {',\n            '\\treturn vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);',\n            '}',\n            'void main (void) {',\n            '\\t#ifdef HORIZONTAL',\n            '\\tfloat index = vUV.x * u_transformSize - 0.5;',\n            '\\t#else',\n            '\\tfloat index = vUV.y * u_transformSize - 0.5;',\n            '\\t#endif',\n            '\\tfloat evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);',\n            '\\t#ifdef HORIZONTAL',\n            '\\tvec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;',\n            '\\tvec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;',\n            '\\t#else',\n            '\\tvec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;',\n            '\\tvec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;',\n            '\\t#endif',\n            '\\tfloat twiddleArgument = -2.0 * PI * (index / u_subtransformSize);',\n            '\\tvec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));',\n            '\\tvec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);',\n            '\\tvec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);',\n            '\\tgl_FragColor = vec4(outputA, outputB);',\n            '}'\n        ].join('\\n')\n    };\n    OceanShaders['ocean_initial_spectrum'] = {\n        uniforms: {\n            'u_wind': { value: new THREE.Vector2(10, 10) },\n            'u_resolution': { value: 512 },\n            'u_size': { value: 250 }\n        },\n        vertexShader: [\n            'void main (void) {',\n            '\\tgl_Position = vec4(position, 1.0);',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'precision highp float;',\n            '#include <common>',\n            'const float G = 9.81;',\n            'const float KM = 370.0;',\n            'const float CM = 0.23;',\n            'uniform vec2 u_wind;',\n            'uniform float u_resolution;',\n            'uniform float u_size;',\n            'float omega (float k) {',\n            '\\treturn sqrt(G * k * (1.0 + pow2(k / KM)));',\n            '}',\n            '#if __VERSION__ == 100',\n            'float tanh (float x) {',\n            '\\treturn (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));',\n            '}',\n            '#endif',\n            'void main (void) {',\n            '\\tvec2 coordinates = gl_FragCoord.xy - 0.5;',\n            '\\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',\n            '\\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',\n            '\\tvec2 K = (2.0 * PI * vec2(n, m)) / u_size;',\n            '\\tfloat k = length(K);',\n            '\\tfloat l_wind = length(u_wind);',\n            '\\tfloat Omega = 0.84;',\n            '\\tfloat kp = G * pow2(Omega / l_wind);',\n            '\\tfloat c = omega(k) / k;',\n            '\\tfloat cp = omega(kp) / kp;',\n            '\\tfloat Lpm = exp(-1.25 * pow2(kp / k));',\n            '\\tfloat gamma = 1.7;',\n            '\\tfloat sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));',\n            '\\tfloat Gamma = exp(-pow2(sqrt(k / kp) - 1.0) / 2.0 * pow2(sigma));',\n            '\\tfloat Jp = pow(gamma, Gamma);',\n            '\\tfloat Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));',\n            '\\tfloat alphap = 0.006 * sqrt(Omega);',\n            '\\tfloat Bl = 0.5 * alphap * cp / c * Fp;',\n            '\\tfloat z0 = 0.000037 * pow2(l_wind) / G * pow(l_wind / cp, 0.9);',\n            '\\tfloat uStar = 0.41 * l_wind / log(10.0 / z0);',\n            '\\tfloat alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));',\n            '\\tfloat Fm = exp(-0.25 * pow2(k / KM - 1.0));',\n            '\\tfloat Bh = 0.5 * alpham * CM / c * Fm * Lpm;',\n            '\\tfloat a0 = log(2.0) / 4.0;',\n            '\\tfloat am = 0.13 * uStar / CM;',\n            '\\tfloat Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));',\n            '\\tfloat cosPhi = dot(normalize(u_wind), normalize(K));',\n            '\\tfloat S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));',\n            '\\tfloat dk = 2.0 * PI / u_size;',\n            '\\tfloat h = sqrt(S / 2.0) * dk;',\n            '\\tif (K.x == 0.0 && K.y == 0.0) {',\n            '\\t\\th = 0.0;',\n            '\\t}',\n            '\\tgl_FragColor = vec4(h, 0.0, 0.0, 0.0);',\n            '}'\n        ].join('\\n')\n    };\n    OceanShaders['ocean_phase'] = {\n        uniforms: {\n            'u_phases': { value: null },\n            'u_deltaTime': { value: null },\n            'u_resolution': { value: null },\n            'u_size': { value: null }\n        },\n        fragmentShader: [\n            'precision highp float;',\n            '#include <common>',\n            'const float G = 9.81;',\n            'const float KM = 370.0;',\n            'varying vec2 vUV;',\n            'uniform sampler2D u_phases;',\n            'uniform float u_deltaTime;',\n            'uniform float u_resolution;',\n            'uniform float u_size;',\n            'float omega (float k) {',\n            '\\treturn sqrt(G * k * (1.0 + k * k / KM * KM));',\n            '}',\n            'void main (void) {',\n            '\\tfloat deltaTime = 1.0 / 60.0;',\n            '\\tvec2 coordinates = gl_FragCoord.xy - 0.5;',\n            '\\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',\n            '\\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',\n            '\\tvec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;',\n            '\\tfloat phase = texture2D(u_phases, vUV).r;',\n            '\\tfloat deltaPhase = omega(length(waveVector)) * u_deltaTime;',\n            '\\tphase = mod(phase + deltaPhase, 2.0 * PI);',\n            '\\tgl_FragColor = vec4(phase, 0.0, 0.0, 0.0);',\n            '}'\n        ].join('\\n')\n    };\n    OceanShaders['ocean_spectrum'] = {\n        uniforms: {\n            'u_size': { value: null },\n            'u_resolution': { value: null },\n            'u_choppiness': { value: null },\n            'u_phases': { value: null },\n            'u_initialSpectrum': { value: null }\n        },\n        fragmentShader: [\n            'precision highp float;',\n            '#include <common>',\n            'const float G = 9.81;',\n            'const float KM = 370.0;',\n            'varying vec2 vUV;',\n            'uniform float u_size;',\n            'uniform float u_resolution;',\n            'uniform float u_choppiness;',\n            'uniform sampler2D u_phases;',\n            'uniform sampler2D u_initialSpectrum;',\n            'vec2 multiplyComplex (vec2 a, vec2 b) {',\n            '\\treturn vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);',\n            '}',\n            'vec2 multiplyByI (vec2 z) {',\n            '\\treturn vec2(-z[1], z[0]);',\n            '}',\n            'float omega (float k) {',\n            '\\treturn sqrt(G * k * (1.0 + k * k / KM * KM));',\n            '}',\n            'void main (void) {',\n            '\\tvec2 coordinates = gl_FragCoord.xy - 0.5;',\n            '\\tfloat n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',\n            '\\tfloat m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',\n            '\\tvec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;',\n            '\\tfloat phase = texture2D(u_phases, vUV).r;',\n            '\\tvec2 phaseVector = vec2(cos(phase), sin(phase));',\n            '\\tvec2 h0 = texture2D(u_initialSpectrum, vUV).rg;',\n            '\\tvec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;',\n            '\\th0Star.y *= -1.0;',\n            '\\tvec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));',\n            '\\tvec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;',\n            '\\tvec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;',\n            '\\tif (waveVector.x == 0.0 && waveVector.y == 0.0) {',\n            '\\t\\th = vec2(0.0);',\n            '\\t\\thX = vec2(0.0);',\n            '\\t\\thZ = vec2(0.0);',\n            '\\t}',\n            '\\tgl_FragColor = vec4(hX + multiplyByI(h), hZ);',\n            '}'\n        ].join('\\n')\n    };\n    OceanShaders['ocean_normals'] = {\n        uniforms: {\n            'u_displacementMap': { value: null },\n            'u_resolution': { value: null },\n            'u_size': { value: null }\n        },\n        fragmentShader: [\n            'precision highp float;',\n            'varying vec2 vUV;',\n            'uniform sampler2D u_displacementMap;',\n            'uniform float u_resolution;',\n            'uniform float u_size;',\n            'void main (void) {',\n            '\\tfloat texel = 1.0 / u_resolution;',\n            '\\tfloat texelSize = u_size / u_resolution;',\n            '\\tvec3 center = texture2D(u_displacementMap, vUV).rgb;',\n            '\\tvec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;',\n            '\\tvec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;',\n            '\\tvec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;',\n            '\\tvec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;',\n            '\\tvec3 topRight = cross(right, top);',\n            '\\tvec3 topLeft = cross(top, left);',\n            '\\tvec3 bottomLeft = cross(left, bottom);',\n            '\\tvec3 bottomRight = cross(bottom, right);',\n            '\\tgl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);',\n            '}'\n        ].join('\\n')\n    };\n    OceanShaders['ocean_main'] = {\n        uniforms: {\n            'u_displacementMap': { value: null },\n            'u_normalMap': { value: null },\n            'u_geometrySize': { value: null },\n            'u_size': { value: null },\n            'u_projectionMatrix': { value: null },\n            'u_viewMatrix': { value: null },\n            'u_cameraPosition': { value: null },\n            'u_skyColor': { value: null },\n            'u_oceanColor': { value: null },\n            'u_sunDirection': { value: null },\n            'u_exposure': { value: null }\n        },\n        vertexShader: [\n            'precision highp float;',\n            'varying vec3 vPos;',\n            'varying vec2 vUV;',\n            'uniform mat4 u_projectionMatrix;',\n            'uniform mat4 u_viewMatrix;',\n            'uniform float u_size;',\n            'uniform float u_geometrySize;',\n            'uniform sampler2D u_displacementMap;',\n            'void main (void) {',\n            '\\tvec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);',\n            '\\tvPos = newPos;',\n            '\\tvUV = uv;',\n            '\\tgl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'precision highp float;',\n            'varying vec3 vPos;',\n            'varying vec2 vUV;',\n            'uniform sampler2D u_displacementMap;',\n            'uniform sampler2D u_normalMap;',\n            'uniform vec3 u_cameraPosition;',\n            'uniform vec3 u_oceanColor;',\n            'uniform vec3 u_skyColor;',\n            'uniform vec3 u_sunDirection;',\n            'uniform float u_exposure;',\n            'vec3 hdr (vec3 color, float exposure) {',\n            '\\treturn 1.0 - exp(-color * exposure);',\n            '}',\n            'void main (void) {',\n            '\\tvec3 normal = texture2D(u_normalMap, vUV).rgb;',\n            '\\tvec3 view = normalize(u_cameraPosition - vPos);',\n            '\\tfloat fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);',\n            '\\tvec3 sky = fresnel * u_skyColor;',\n            '\\tfloat diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);',\n            '\\tvec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;',\n            '\\tvec3 color = sky + water;',\n            '\\tgl_FragColor = vec4(hdr(color, u_exposure), 1.0);',\n            '}'\n        ].join('\\n')\n    };\n    return threex.shaders.OceanShaders = OceanShaders;\n});"]}