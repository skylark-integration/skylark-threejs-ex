{"version":3,"sources":["shaders/SSAODepthShader.js"],"names":["define","THREE","threex","SSAODepthShader","defines","PERSPECTIVE_CAMERA","uniforms","tDepth","value","cameraNear","cameraFar","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aAEA,IAAIC,GACAC,SAAWC,mBAAsB,GACjCC,UACIC,QAAYC,MAAO,MACnBC,YAAgBD,MAAO,MACvBE,WAAeF,MAAO,OAE1BG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,4BACA,4BACA,2BACA,oBACA,qBACA,yDACA,gCACA,gEACA,kFACA,uEACA,UACA,iDACA,WACA,IACA,gBACA,yCACA,qDACA,KACFD,KAAK,OAEX,OAAOV,EAAOY,QAAQX,gBAAkBA","file":"../../shaders/SSAODepthShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n\r\n    var SSAODepthShader = {\r\n        defines: { 'PERSPECTIVE_CAMERA': 1 },\r\n        uniforms: {\r\n            'tDepth': { value: null },\r\n            'cameraNear': { value: null },\r\n            'cameraFar': { value: null }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform sampler2D tDepth;',\r\n            'uniform float cameraNear;',\r\n            'uniform float cameraFar;',\r\n            'varying vec2 vUv;',\r\n            '#include <packing>',\r\n            'float getLinearDepth( const in vec2 screenPosition ) {',\r\n            '\\t#if PERSPECTIVE_CAMERA == 1',\r\n            '\\t\\tfloat fragCoordZ = texture2D( tDepth, screenPosition ).x;',\r\n            '\\t\\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );',\r\n            '\\t\\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );',\r\n            '\\t#else',\r\n            '\\t\\treturn texture2D( depthSampler, coord ).x;',\r\n            '\\t#endif',\r\n            '}',\r\n            'void main() {',\r\n            '\\tfloat depth = getLinearDepth( vUv );',\r\n            '\\tgl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.SSAODepthShader = SSAODepthShader;\r\n});"]}