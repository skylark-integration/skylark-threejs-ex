{"version":3,"sources":["shaders/SAOShader.js"],"names":["define","THREE","SAOShader","defines","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tDepth","value","tDiffuse","tNormal","size","Vector2","cameraNear","cameraFar","cameraProjectionMatrix","Matrix4","cameraInverseProjectionMatrix","scale","intensity","bias","minResolution","kernelRadius","randomSeed","vertexShader","join","fragmentShader","threex","shaders"],"mappings":";;;;;;;AAAAA,QACG,mBACA,SAAUC,GACT,aACA,IAAIC,GACAC,SACIC,YAAe,EACfC,UAAa,EACbC,eAAkB,EAClBC,gBAAmB,EACnBC,cAAiB,EACjBC,mBAAsB,GAE1BC,UACIC,QAAYC,MAAO,MACnBC,UAAcD,MAAO,MACrBE,SAAaF,MAAO,MACpBG,MAAUH,MAAO,IAAIX,EAAMe,QAAQ,IAAK,MACxCC,YAAgBL,MAAO,GACvBM,WAAeN,MAAO,KACtBO,wBAA4BP,MAAO,IAAIX,EAAMmB,SAC7CC,+BAAmCT,MAAO,IAAIX,EAAMmB,SACpDE,OAAWV,MAAO,GAClBW,WAAeX,MAAO,IACtBY,MAAUZ,MAAO,IACjBa,eAAmBb,MAAO,GAC1Bc,cAAkBd,MAAO,KACzBe,YAAgBf,MAAO,IAE3BgB,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,oBACA,2BACA,8BACA,SACA,4BACA,0BACA,6BACA,SACA,4BACA,2BACA,uCACA,8CACA,uBACA,2BACA,sBACA,8BACA,+BACA,qBACA,4BACA,gBACA,qBACA,yDACA,6BACA,uCACA,UACA,wBACA,WACA,IACA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IACA,2CACA,gCACA,oEACA,UACA,qEACA,WACA,IACA,qGACA,uFACA,oFACA,4CACA,iEACA,IACA,mFACA,4BACA,0EACA,UACA,6EACA,WACA,IACA,iCACA,4CACA,6HACA,8DACA,8CACA,yEACA,oKACA,IACA,uCACA,4EACA,4DACA,kEACA,0DACA,iDACA,oEACA,sEACA,0EACA,kDACA,iEACA,8BACA,8BACA,2BACA,8CACA,yEACA,4BACA,2BACA,gDACA,+CACA,kBACA,QACA,mDACA,uFACA,gGACA,wBACA,MACA,oCACA,qDACA,IACA,gBACA,yCACA,6CACA,eACA,MACA,iDACA,0EACA,kEACA,2CACA,iDACA,KACFD,KAAK,OAEX,OAAOE,OAAOC,QAAQ9B,UAAYA","file":"../../shaders/SAOShader.js","sourcesContent":["define([\n   \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var SAOShader = {\n        defines: {\n            'NUM_SAMPLES': 7,\n            'NUM_RINGS': 4,\n            'NORMAL_TEXTURE': 0,\n            'DIFFUSE_TEXTURE': 0,\n            'DEPTH_PACKING': 1,\n            'PERSPECTIVE_CAMERA': 1\n        },\n        uniforms: {\n            'tDepth': { value: null },\n            'tDiffuse': { value: null },\n            'tNormal': { value: null },\n            'size': { value: new THREE.Vector2(512, 512) },\n            'cameraNear': { value: 1 },\n            'cameraFar': { value: 100 },\n            'cameraProjectionMatrix': { value: new THREE.Matrix4() },\n            'cameraInverseProjectionMatrix': { value: new THREE.Matrix4() },\n            'scale': { value: 1 },\n            'intensity': { value: 0.1 },\n            'bias': { value: 0.5 },\n            'minResolution': { value: 0 },\n            'kernelRadius': { value: 100 },\n            'randomSeed': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'varying vec2 vUv;',\n            '#if DIFFUSE_TEXTURE == 1',\n            'uniform sampler2D tDiffuse;',\n            '#endif',\n            'uniform sampler2D tDepth;',\n            '#if NORMAL_TEXTURE == 1',\n            'uniform sampler2D tNormal;',\n            '#endif',\n            'uniform float cameraNear;',\n            'uniform float cameraFar;',\n            'uniform mat4 cameraProjectionMatrix;',\n            'uniform mat4 cameraInverseProjectionMatrix;',\n            'uniform float scale;',\n            'uniform float intensity;',\n            'uniform float bias;',\n            'uniform float kernelRadius;',\n            'uniform float minResolution;',\n            'uniform vec2 size;',\n            'uniform float randomSeed;',\n            '// RGBA depth',\n            '#include <packing>',\n            'vec4 getDefaultColor( const in vec2 screenPosition ) {',\n            '\\t#if DIFFUSE_TEXTURE == 1',\n            '\\treturn texture2D( tDiffuse, vUv );',\n            '\\t#else',\n            '\\treturn vec4( 1.0 );',\n            '\\t#endif',\n            '}',\n            'float getDepth( const in vec2 screenPosition ) {',\n            '\\t#if DEPTH_PACKING == 1',\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n            '\\t#else',\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\n            '\\t#endif',\n            '}',\n            'float getViewZ( const in float depth ) {',\n            '\\t#if PERSPECTIVE_CAMERA == 1',\n            '\\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#else',\n            '\\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n            '\\t#endif',\n            '}',\n            'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n            '\\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n            '\\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n            '\\tclipPosition *= clipW; // unprojection.',\n            '\\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n            '}',\n            'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',\n            '\\t#if NORMAL_TEXTURE == 1',\n            '\\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n            '\\t#else',\n            '\\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',\n            '\\t#endif',\n            '}',\n            'float scaleDividedByCameraFar;',\n            'float minResolutionMultipliedByCameraFar;',\n            'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',\n            '\\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',\n            '\\tfloat viewDistance = length( viewDelta );',\n            '\\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',\n            '\\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',\n            '}',\n            '// moving costly divides into consts',\n            'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',\n            'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',\n            'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',\n            '\\t// precompute some variables require in getOcclusion.',\n            '\\tscaleDividedByCameraFar = scale / cameraFar;',\n            '\\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',\n            '\\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',\n            '\\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',\n            '\\tfloat angle = rand( vUv + randomSeed ) * PI2;',\n            '\\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',\n            '\\tvec2 radiusStep = radius;',\n            '\\tfloat occlusionSum = 0.0;',\n            '\\tfloat weightSum = 0.0;',\n            '\\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',\n            '\\t\\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',\n            '\\t\\tradius += radiusStep;',\n            '\\t\\tangle += ANGLE_STEP;',\n            '\\t\\tfloat sampleDepth = getDepth( sampleUv );',\n            '\\t\\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\t\\tcontinue;',\n            '\\t\\t}',\n            '\\t\\tfloat sampleViewZ = getViewZ( sampleDepth );',\n            '\\t\\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',\n            '\\t\\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',\n            '\\t\\tweightSum += 1.0;',\n            '\\t}',\n            '\\tif( weightSum == 0.0 ) discard;',\n            '\\treturn occlusionSum * ( intensity / weightSum );',\n            '}',\n            'void main() {',\n            '\\tfloat centerDepth = getDepth( vUv );',\n            '\\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',\n            '\\t\\tdiscard;',\n            '\\t}',\n            '\\tfloat centerViewZ = getViewZ( centerDepth );',\n            '\\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',\n            '\\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',\n            '\\tgl_FragColor = getDefaultColor( vUv );',\n            '\\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',\n            '}'\n        ].join('\\n')\n    };\n    return threex.shaders.SAOShader = SAOShader;\n});"]}