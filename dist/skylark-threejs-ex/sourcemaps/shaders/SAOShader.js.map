{"version":3,"sources":["shaders/SAOShader.js"],"names":["define","THREE","SAOShader","defines","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tDepth","value","tDiffuse","tNormal","size","Vector2","cameraNear","cameraFar","cameraProjectionMatrix","Matrix4","cameraInverseProjectionMatrix","scale","intensity","bias","minResolution","kernelRadius","randomSeed","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAuLV,OAlLAA,EAAMC,WACLC,SACCC,YAAe,EACfC,UAAa,EACbC,eAAkB,EAClBC,gBAAmB,EACnBC,cAAiB,EACjBC,mBAAsB,GAEvBC,UAECC,QAAYC,MAAO,MACnBC,UAAcD,MAAO,MACrBE,SAAaF,MAAO,MACpBG,MAAUH,MAAO,IAAIX,EAAMe,QAAS,IAAK,MAEzCC,YAAgBL,MAAO,GACvBM,WAAeN,MAAO,KACtBO,wBAA4BP,MAAO,IAAIX,EAAMmB,SAC7CC,+BAAmCT,MAAO,IAAIX,EAAMmB,SAEpDE,OAAWV,MAAO,GAClBW,WAAeX,MAAO,IACtBY,MAAUZ,MAAO,IAEjBa,eAAmBb,MAAO,GAC1Bc,cAAkBd,MAAO,KACzBe,YAAgBf,MAAO,IAExBgB,cACC,oBAEA,gBACA,cACA,8EACA,KAECC,KAAM,MACRC,gBACC,oBAEA,oBAEA,2BACA,8BACA,SAEA,4BAEA,0BACA,6BACA,SAEA,4BACA,2BACA,uCACA,8CAEA,uBACA,2BACA,sBACA,8BACA,+BACA,qBACA,4BAEA,gBAEA,qBAEA,yDACA,6BACA,uCACA,UACA,wBACA,WACA,IAEA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IAEA,2CACA,gCACA,oEACA,UACA,qEACA,WACA,IAEA,qGACA,uFACA,oFACA,4CAEA,iEACA,IAEA,mFACA,4BACA,0EACA,UACA,6EACA,WACA,IAEA,iCACA,4CAEA,6HACA,8DACA,8CACA,yEAEA,oKACA,IAEA,uCACA,4EACA,4DAEA,kEACA,0DACA,iDACA,oEACA,sEAEA,0EACA,kDACA,iEACA,8BAEA,8BACA,2BAEA,8CACA,yEACA,4BACA,2BAEA,gDACA,+CACA,kBACA,QAEA,mDACA,uFACA,gGACA,wBACA,MAEA,oCAEA,qDACA,IAGA,gBACA,yCACA,6CACA,eACA,MAEA,iDACA,0EAEA,kEAEA,2CACA,iDACA,KACCD,KAAM,OAGF5B,EAAMC","file":"../../shaders/SAOShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * TODO\n\t */\n\n\tTHREE.SAOShader = {\n\t\tdefines: {\n\t\t\t\"NUM_SAMPLES\": 7,\n\t\t\t\"NUM_RINGS\": 4,\n\t\t\t\"NORMAL_TEXTURE\": 0,\n\t\t\t\"DIFFUSE_TEXTURE\": 0,\n\t\t\t\"DEPTH_PACKING\": 1,\n\t\t\t\"PERSPECTIVE_CAMERA\": 1\n\t\t},\n\t\tuniforms: {\n\n\t\t\t\"tDepth\": { value: null },\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"tNormal\": { value: null },\n\t\t\t\"size\": { value: new THREE.Vector2( 512, 512 ) },\n\n\t\t\t\"cameraNear\": { value: 1 },\n\t\t\t\"cameraFar\": { value: 100 },\n\t\t\t\"cameraProjectionMatrix\": { value: new THREE.Matrix4() },\n\t\t\t\"cameraInverseProjectionMatrix\": { value: new THREE.Matrix4() },\n\n\t\t\t\"scale\": { value: 1.0 },\n\t\t\t\"intensity\": { value: 0.1 },\n\t\t\t\"bias\": { value: 0.5 },\n\n\t\t\t\"minResolution\": { value: 0.0 },\n\t\t\t\"kernelRadius\": { value: 100.0 },\n\t\t\t\"randomSeed\": { value: 0.0 }\n\t\t},\n\t\tvertexShader: [\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\t\tfragmentShader: [\n\t\t\t\"#include <common>\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"#if DIFFUSE_TEXTURE == 1\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"#endif\",\n\n\t\t\t\"uniform sampler2D tDepth;\",\n\n\t\t\t\"#if NORMAL_TEXTURE == 1\",\n\t\t\t\"uniform sampler2D tNormal;\",\n\t\t\t\"#endif\",\n\n\t\t\t\"uniform float cameraNear;\",\n\t\t\t\"uniform float cameraFar;\",\n\t\t\t\"uniform mat4 cameraProjectionMatrix;\",\n\t\t\t\"uniform mat4 cameraInverseProjectionMatrix;\",\n\n\t\t\t\"uniform float scale;\",\n\t\t\t\"uniform float intensity;\",\n\t\t\t\"uniform float bias;\",\n\t\t\t\"uniform float kernelRadius;\",\n\t\t\t\"uniform float minResolution;\",\n\t\t\t\"uniform vec2 size;\",\n\t\t\t\"uniform float randomSeed;\",\n\n\t\t\t\"// RGBA depth\",\n\n\t\t\t\"#include <packing>\",\n\n\t\t\t\"vec4 getDefaultColor( const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if DIFFUSE_TEXTURE == 1\",\n\t\t\t\"\treturn texture2D( tDiffuse, vUv );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn vec4( 1.0 );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float getDepth( const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if DEPTH_PACKING == 1\",\n\t\t\t\"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn texture2D( tDepth, screenPosition ).x;\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float getViewZ( const in float depth ) {\",\n\t\t\t\"\t#if PERSPECTIVE_CAMERA == 1\",\n\t\t\t\"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\n\t\t\t\"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\n\t\t\t\"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\n\t\t\t\"\tclipPosition *= clipW; // unprojection.\",\n\n\t\t\t\"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\n\t\t\t\"}\",\n\n\t\t\t\"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\",\n\t\t\t\"\t#if NORMAL_TEXTURE == 1\",\n\t\t\t\"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\",\n\t\t\t\"\t#endif\",\n\t\t\t\"}\",\n\n\t\t\t\"float scaleDividedByCameraFar;\",\n\t\t\t\"float minResolutionMultipliedByCameraFar;\",\n\n\t\t\t\"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\",\n\t\t\t\"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\",\n\t\t\t\"\tfloat viewDistance = length( viewDelta );\",\n\t\t\t\"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\",\n\n\t\t\t\"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\",\n\t\t\t\"}\",\n\n\t\t\t\"// moving costly divides into consts\",\n\t\t\t\"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\",\n\t\t\t\"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\",\n\n\t\t\t\"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\",\n\t\t\t\"\t// precompute some variables require in getOcclusion.\",\n\t\t\t\"\tscaleDividedByCameraFar = scale / cameraFar;\",\n\t\t\t\"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\",\n\t\t\t\"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\",\n\n\t\t\t\"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\",\n\t\t\t\"\tfloat angle = rand( vUv + randomSeed ) * PI2;\",\n\t\t\t\"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\",\n\t\t\t\"\tvec2 radiusStep = radius;\",\n\n\t\t\t\"\tfloat occlusionSum = 0.0;\",\n\t\t\t\"\tfloat weightSum = 0.0;\",\n\n\t\t\t\"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\",\n\t\t\t\"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\",\n\t\t\t\"\t\tradius += radiusStep;\",\n\t\t\t\"\t\tangle += ANGLE_STEP;\",\n\n\t\t\t\"\t\tfloat sampleDepth = getDepth( sampleUv );\",\n\t\t\t\"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\t\"\t\t\tcontinue;\",\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\",\n\t\t\t\"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\",\n\t\t\t\"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\",\n\t\t\t\"\t\tweightSum += 1.0;\",\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif( weightSum == 0.0 ) discard;\",\n\n\t\t\t\"\treturn occlusionSum * ( intensity / weightSum );\",\n\t\t\t\"}\",\n\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tfloat centerDepth = getDepth( vUv );\",\n\t\t\t\"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\",\n\t\t\t\"\t\tdiscard;\",\n\t\t\t\"\t}\",\n\n\t\t\t\"\tfloat centerViewZ = getViewZ( centerDepth );\",\n\t\t\t\"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\",\n\n\t\t\t\"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\",\n\n\t\t\t\"\tgl_FragColor = getDefaultColor( vUv );\",\n\t\t\t\"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" )\n\t};\n\t\n\treturn THREE.SAOShader;\n});\n"]}