{"version":3,"sources":["shaders/HueSaturationShader.js"],"names":["define","threex","HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,KAASD,MAAO,GAChBE,YAAgBF,MAAO,IAE3BG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,qBACA,4BACA,oBACA,gBACA,+CACA,oCACA,0CACA,uFACA,0CACA,6BACA,0CACA,0CACA,yCACA,OACA,8EACA,4BACA,6FACA,aACA,wEACA,MACA,KACFD,KAAK,OAEX,OAAQR,EAAOU,QAAQT,oBAAsBA","file":"../../shaders/HueSaturationShader.js","sourcesContent":["define([\n    \"../threex\"\n],function (threex) {\n    'use strict';\n    var HueSaturationShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'hue': { value: 0 },\n            'saturation': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float hue;',\n            'uniform float saturation;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tgl_FragColor = texture2D( tDiffuse, vUv );',\n            '\\tfloat angle = hue * 3.14159265;',\n            '\\tfloat s = sin(angle), c = cos(angle);',\n            '\\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',\n            '\\tfloat len = length(gl_FragColor.rgb);',\n            '\\tgl_FragColor.rgb = vec3(',\n            '\\t\\tdot(gl_FragColor.rgb, weights.xyz),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.zxy),',\n            '\\t\\tdot(gl_FragColor.rgb, weights.yzx)',\n            '\\t);',\n            '\\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',\n            '\\tif (saturation > 0.0) {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',\n            '\\t} else {',\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',\n            '\\t}',\n            '}'\n        ].join('\\n')\n    };\n    return  threex.shaders.HueSaturationShader = HueSaturationShader;\n});"]}