{"version":3,"sources":["shaders/HueSaturationShader.js"],"names":["define","threex","HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,KAASD,MAAO,GAChBE,YAAgBF,MAAO,IAE3BG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,qBACA,4BACA,oBACA,gBACA,+CACA,oCACA,0CACA,uFACA,0CACA,6BACA,0CACA,0CACA,yCACA,OACA,8EACA,4BACA,6FACA,aACA,wEACA,MACA,KACFD,KAAK,OAEX,OAAQR,EAAOU,QAAQT,oBAAsBA","file":"../../shaders/HueSaturationShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var HueSaturationShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'hue': { value: 0 },\r\n            'saturation': { value: 0 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform sampler2D tDiffuse;',\r\n            'uniform float hue;',\r\n            'uniform float saturation;',\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tgl_FragColor = texture2D( tDiffuse, vUv );',\r\n            '\\tfloat angle = hue * 3.14159265;',\r\n            '\\tfloat s = sin(angle), c = cos(angle);',\r\n            '\\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',\r\n            '\\tfloat len = length(gl_FragColor.rgb);',\r\n            '\\tgl_FragColor.rgb = vec3(',\r\n            '\\t\\tdot(gl_FragColor.rgb, weights.xyz),',\r\n            '\\t\\tdot(gl_FragColor.rgb, weights.zxy),',\r\n            '\\t\\tdot(gl_FragColor.rgb, weights.yzx)',\r\n            '\\t);',\r\n            '\\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',\r\n            '\\tif (saturation > 0.0) {',\r\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',\r\n            '\\t} else {',\r\n            '\\t\\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',\r\n            '\\t}',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return  threex.shaders.HueSaturationShader = HueSaturationShader;\r\n});"]}