{"version":3,"sources":["shaders/HueSaturationShader.js"],"names":["define","THREE","HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAuEV,OA7DAA,EAAMC,qBAELC,UAECC,UAAcC,MAAO,MACrBC,KAASD,MAAO,GAChBE,YAAgBF,MAAO,IAIxBG,cAEC,oBAEA,gBAEA,cAEA,8EAEA,KAECC,KAAM,MAERC,gBAEC,8BACA,qBACA,4BAEA,oBAEA,gBAEA,+CAGA,oCACA,0CACA,uFACA,0CACA,6BACA,0CACA,0CACA,yCACA,OAGA,8EACA,4BACA,6FACA,aACA,wEACA,MAEA,KAECD,KAAM,OAIFR,EAAMC","file":"../../shaders/HueSaturationShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author tapio / http://tapio.github.com/\n\t *\n\t * Hue and saturation adjustment\n\t * https://github.com/evanw/glfx.js\n\t * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n\t * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n\t */\n\n\tTHREE.HueSaturationShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"hue\": { value: 0 },\n\t\t\t\"saturation\": { value: 0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float hue;\",\n\t\t\t\"uniform float saturation;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n\n\t\t\t// hue\n\t\t\t\"\tfloat angle = hue * 3.14159265;\",\n\t\t\t\"\tfloat s = sin(angle), c = cos(angle);\",\n\t\t\t\"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\n\t\t\t\"\tfloat len = length(gl_FragColor.rgb);\",\n\t\t\t\"\tgl_FragColor.rgb = vec3(\",\n\t\t\t\"\t\tdot(gl_FragColor.rgb, weights.xyz),\",\n\t\t\t\"\t\tdot(gl_FragColor.rgb, weights.zxy),\",\n\t\t\t\"\t\tdot(gl_FragColor.rgb, weights.yzx)\",\n\t\t\t\"\t);\",\n\n\t\t\t// saturation\n\t\t\t\"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\n\t\t\t\"\tif (saturation > 0.0) {\",\n\t\t\t\"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\n\t\t\t\"\t} else {\",\n\t\t\t\"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\n\t\t\t\"\t}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.HueSaturationShader;\n});\n"]}