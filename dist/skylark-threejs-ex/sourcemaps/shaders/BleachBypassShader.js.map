{"version":3,"sources":["shaders/BleachBypassShader.js"],"names":["define","THREE","BleachBypassShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAkEV,OAzDAA,EAAMC,oBAELC,UAECC,UAAcC,MAAO,MACrBC,SAAaD,MAAO,IAIrBE,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,yBAEA,8BAEA,oBAEA,gBAEA,4CAEA,6CACA,2CACA,8BAEA,6DAEA,2CACA,qEAEA,gDAEA,iCACA,qCACA,2CAEA,2CAEA,KAECD,KAAM,OAIFP,EAAMC","file":"../../shaders/BleachBypassShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n\t * - based on Nvidia example\n\t * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n\t */\n\n\tTHREE.BleachBypassShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"opacity\": { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 base = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\n\t\t\t\"\tfloat lum = dot( lumCoeff, base.rgb );\",\n\t\t\t\"\tvec3 blend = vec3( lum );\",\n\n\t\t\t\"\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\n\n\t\t\t\"\tvec3 result1 = 2.0 * base.rgb * blend;\",\n\t\t\t\"\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\n\n\t\t\t\"\tvec3 newColor = mix( result1, result2, L );\",\n\n\t\t\t\"\tfloat A2 = opacity * base.a;\",\n\t\t\t\"\tvec3 mixRGB = A2 * newColor.rgb;\",\n\t\t\t\"\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\n\n\t\t\t\"\tgl_FragColor = vec4( mixRGB, base.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.BleachBypassShader;\n});\n"]}