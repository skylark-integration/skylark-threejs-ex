{"version":3,"sources":["shaders/DotScreenShader.js"],"names":["define","THREE","threex","DotScreenShader","uniforms","tDiffuse","value","tSize","Vector2","center","angle","scale","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,IAAIL,EAAMO,QAAQ,IAAK,MACzCC,QAAYH,MAAO,IAAIL,EAAMO,QAAQ,GAAK,KAC1CE,OAAWJ,MAAO,MAClBK,OAAWL,MAAO,IAEtBM,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,uBACA,uBACA,uBACA,sBACA,8BACA,oBACA,oBACA,8CACA,qCACA,+EACA,sDACA,IACA,gBACA,6CACA,2DACA,8EACA,KACFD,KAAK,OAEX,OAAQX,EAAOa,QAAQZ,gBAAkBA","file":"../../shaders/DotScreenShader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var DotScreenShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tSize': { value: new THREE.Vector2(256, 256) },\n            'center': { value: new THREE.Vector2(0.5, 0.5) },\n            'angle': { value: 1.57 },\n            'scale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec2 center;',\n            'uniform float angle;',\n            'uniform float scale;',\n            'uniform vec2 tSize;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'float pattern() {',\n            '\\tfloat s = sin( angle ), c = cos( angle );',\n            '\\tvec2 tex = vUv * tSize - center;',\n            '\\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',\n            '\\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',\n            '}',\n            'void main() {',\n            '\\tvec4 color = texture2D( tDiffuse, vUv );',\n            '\\tfloat average = ( color.r + color.g + color.b ) / 3.0;',\n            '\\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  threex.shaders.DotScreenShader = DotScreenShader;\n});"]}