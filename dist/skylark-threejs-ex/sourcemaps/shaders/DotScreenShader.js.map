{"version":3,"sources":["shaders/DotScreenShader.js"],"names":["define","THREE","threex","DotScreenShader","uniforms","tDiffuse","value","tSize","Vector2","center","angle","scale","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,IAAIL,EAAMO,QAAQ,IAAK,MACzCC,QAAYH,MAAO,IAAIL,EAAMO,QAAQ,GAAK,KAC1CE,OAAWJ,MAAO,MAClBK,OAAWL,MAAO,IAEtBM,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,uBACA,uBACA,uBACA,sBACA,8BACA,oBACA,oBACA,8CACA,qCACA,+EACA,sDACA,IACA,gBACA,6CACA,2DACA,8EACA,KACFD,KAAK,OAEX,OAAQX,EAAOa,QAAQZ,gBAAkBA","file":"../../shaders/DotScreenShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var DotScreenShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'tSize': { value: new THREE.Vector2(256, 256) },\r\n            'center': { value: new THREE.Vector2(0.5, 0.5) },\r\n            'angle': { value: 1.57 },\r\n            'scale': { value: 1 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform vec2 center;',\r\n            'uniform float angle;',\r\n            'uniform float scale;',\r\n            'uniform vec2 tSize;',\r\n            'uniform sampler2D tDiffuse;',\r\n            'varying vec2 vUv;',\r\n            'float pattern() {',\r\n            '\\tfloat s = sin( angle ), c = cos( angle );',\r\n            '\\tvec2 tex = vUv * tSize - center;',\r\n            '\\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',\r\n            '\\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',\r\n            '}',\r\n            'void main() {',\r\n            '\\tvec4 color = texture2D( tDiffuse, vUv );',\r\n            '\\tfloat average = ( color.r + color.g + color.b ) / 3.0;',\r\n            '\\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return  threex.shaders.DotScreenShader = DotScreenShader;\r\n});"]}