{"version":3,"sources":["shaders/DotScreenShader.js"],"names":["define","THREE","DotScreenShader","uniforms","tDiffuse","value","tSize","Vector2","center","angle","scale","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAsEV,OA7DAA,EAAMC,iBAELC,UAECC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,IAAIJ,EAAMM,QAAS,IAAK,MAC1CC,QAAYH,MAAO,IAAIJ,EAAMM,QAAS,GAAK,KAC3CE,OAAWJ,MAAO,MAClBK,OAAWL,MAAO,IAInBM,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,uBACA,uBACA,uBACA,sBAEA,8BAEA,oBAEA,oBAEA,8CAEA,qCACA,+EAEA,sDAEA,IAEA,gBAEA,6CAEA,2DAEA,8EAEA,KAECD,KAAM,OAIFX,EAAMC","file":"../../shaders/DotScreenShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Dot screen shader\n\t * based on glfx.js sepia shader\n\t * https://github.com/evanw/glfx.js\n\t */\n\n\tTHREE.DotScreenShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"tSize\": { value: new THREE.Vector2( 256, 256 ) },\n\t\t\t\"center\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n\t\t\t\"angle\": { value: 1.57 },\n\t\t\t\"scale\": { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec2 center;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\"uniform float scale;\",\n\t\t\t\"uniform vec2 tSize;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"float pattern() {\",\n\n\t\t\t\"\tfloat s = sin( angle ), c = cos( angle );\",\n\n\t\t\t\"\tvec2 tex = vUv * tSize - center;\",\n\t\t\t\"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n\n\t\t\t\"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.DotScreenShader;\n});\n"]}