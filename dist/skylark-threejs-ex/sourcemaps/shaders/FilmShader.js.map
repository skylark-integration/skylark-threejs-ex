{"version":3,"sources":["shaders/FilmShader.js"],"names":["define","threex","FilmShader","uniforms","tDiffuse","value","time","nIntensity","sIntensity","sCount","grayscale","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,MAAUD,MAAO,GACjBE,YAAgBF,MAAO,IACvBG,YAAgBH,MAAO,KACvBI,QAAYJ,MAAO,MACnBK,WAAeL,MAAO,IAE1BM,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,sBACA,0BACA,4BACA,4BACA,wBACA,8BACA,oBACA,gBACA,sDACA,mCACA,0FACA,oEACA,2EACA,oGACA,sBACA,+EACA,MACA,uDACA,KACFD,KAAK,OAEX,OAAQX,EAAOa,QAAQZ,WAAaA","file":"../../shaders/FilmShader.js","sourcesContent":["define([\n    \"../threex\"\n],function (threex) {\n    'use strict';\n    var FilmShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'time': { value: 0 },\n            'nIntensity': { value: 0.5 },\n            'sIntensity': { value: 0.05 },\n            'sCount': { value: 4096 },\n            'grayscale': { value: 1 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            'uniform float time;',\n            'uniform bool grayscale;',\n            'uniform float nIntensity;',\n            'uniform float sIntensity;',\n            'uniform float sCount;',\n            'uniform sampler2D tDiffuse;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );',\n            '\\tfloat dx = rand( vUv + time );',\n            '\\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );',\n            '\\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );',\n            '\\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;',\n            '\\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );',\n            '\\tif( grayscale ) {',\n            '\\t\\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );',\n            '\\t}',\n            '\\tgl_FragColor =  vec4( cResult, cTextureScreen.a );',\n            '}'\n        ].join('\\n')\n    };\n    return  threex.shaders.FilmShader = FilmShader;\n});"]}