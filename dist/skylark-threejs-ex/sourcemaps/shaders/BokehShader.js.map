{"version":3,"sources":["shaders/BokehShader.js"],"names":["define","threex","BokehShader","defines","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tColor","value","tDepth","focus","aspect","aperture","maxblur","nearClip","farClip","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,SACIC,cAAiB,EACjBC,mBAAsB,GAE1BC,UACIC,QAAYC,MAAO,MACnBC,QAAYD,MAAO,MACnBE,OAAWF,MAAO,GAClBG,QAAYH,MAAO,GACnBI,UAAcJ,MAAO,MACrBK,SAAaL,MAAO,GACpBM,UAAcN,MAAO,GACrBO,SAAaP,MAAO,MAExBQ,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,oBACA,4BACA,4BACA,yBACA,0BACA,0BACA,yBACA,uBACA,wBACA,qBACA,mDACA,2BACA,qEACA,UACA,kDACA,WACA,IACA,2CACA,gCACA,gEACA,UACA,iEACA,WACA,IACA,gBACA,8CACA,+CACA,sCACA,2EACA,mCACA,mCACA,mCACA,4BACA,wCACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,6FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,8FACA,+BACA,0BACA,KACFD,KAAK,OAGX,OAAOhB,EAAOkB,QAAQjB,YAAcA","file":"../../shaders/BokehShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var BokehShader = {\r\n        defines: {\r\n            'DEPTH_PACKING': 1,\r\n            'PERSPECTIVE_CAMERA': 1\r\n        },\r\n        uniforms: {\r\n            'tColor': { value: null },\r\n            'tDepth': { value: null },\r\n            'focus': { value: 1 },\r\n            'aspect': { value: 1 },\r\n            'aperture': { value: 0.025 },\r\n            'maxblur': { value: 1 },\r\n            'nearClip': { value: 1 },\r\n            'farClip': { value: 1000 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            '#include <common>',\r\n            'varying vec2 vUv;',\r\n            'uniform sampler2D tColor;',\r\n            'uniform sampler2D tDepth;',\r\n            'uniform float maxblur;',\r\n            'uniform float aperture;',\r\n            'uniform float nearClip;',\r\n            'uniform float farClip;',\r\n            'uniform float focus;',\r\n            'uniform float aspect;',\r\n            '#include <packing>',\r\n            'float getDepth( const in vec2 screenPosition ) {',\r\n            '\\t#if DEPTH_PACKING == 1',\r\n            '\\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\r\n            '\\t#else',\r\n            '\\treturn texture2D( tDepth, screenPosition ).x;',\r\n            '\\t#endif',\r\n            '}',\r\n            'float getViewZ( const in float depth ) {',\r\n            '\\t#if PERSPECTIVE_CAMERA == 1',\r\n            '\\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );',\r\n            '\\t#else',\r\n            '\\treturn orthographicDepthToViewZ( depth, nearClip, farClip );',\r\n            '\\t#endif',\r\n            '}',\r\n            'void main() {',\r\n            '\\tvec2 aspectcorrect = vec2( 1.0, aspect );',\r\n            '\\tfloat viewZ = getViewZ( getDepth( vUv ) );',\r\n            '\\tfloat factor = ( focus + viewZ );',\r\n            '\\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );',\r\n            '\\tvec2 dofblur9 = dofblur * 0.9;',\r\n            '\\tvec2 dofblur7 = dofblur * 0.7;',\r\n            '\\tvec2 dofblur4 = dofblur * 0.4;',\r\n            '\\tvec4 col = vec4( 0.0 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );',\r\n            '\\tgl_FragColor = col / 41.0;',\r\n            '\\tgl_FragColor.a = 1.0;',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n\r\n    return threex.shaders.BokehShader = BokehShader;\r\n});"]}