{"version":3,"sources":["shaders/FocusShader.js"],"names":["define","threex","FocusShader","uniforms","tDiffuse","value","screenWidth","screenHeight","sampleDistance","waveFactor","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,aAAiBD,MAAO,MACxBE,cAAkBF,MAAO,MACzBG,gBAAoBH,MAAO,KAC3BI,YAAgBJ,MAAO,SAE3BK,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,6BACA,8BACA,gCACA,4BACA,8BACA,oBACA,gBACA,+BACA,0BACA,cACA,mBACA,mDACA,8CACA,yCACA,qEACA,kFACA,sFACA,uCACA,sFACA,uCACA,uFACA,uCACA,uFACA,uCACA,wFACA,uCACA,wFACA,uCACA,uFACA,uCACA,yDACA,iGACA,kFACA,KACFD,KAAK,OAEX,OAAOV,EAAOY,QAAQX,YAAcA","file":"../../shaders/FocusShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var FocusShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'screenWidth': { value: 1024 },\r\n            'screenHeight': { value: 1024 },\r\n            'sampleDistance': { value: 0.94 },\r\n            'waveFactor': { value: 0.00125 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform float screenWidth;',\r\n            'uniform float screenHeight;',\r\n            'uniform float sampleDistance;',\r\n            'uniform float waveFactor;',\r\n            'uniform sampler2D tDiffuse;',\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvec4 color, org, tmp, add;',\r\n            '\\tfloat sample_dist, f;',\r\n            '\\tvec2 vin;',\r\n            '\\tvec2 uv = vUv;',\r\n            '\\tadd = color = org = texture2D( tDiffuse, uv );',\r\n            '\\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );',\r\n            '\\tsample_dist = dot( vin, vin ) * 2.0;',\r\n            '\\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;',\r\n            '\\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );',\r\n            '\\tif( tmp.b < color.b ) color = tmp;',\r\n            '\\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );',\r\n            '\\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );',\r\n            '\\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.FocusShader = FocusShader;\r\n});"]}