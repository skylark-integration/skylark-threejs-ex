{"version":3,"sources":["shaders/FXAAShader.js"],"names":["define","THREE","threex","FXAAShader","uniforms","tDiffuse","value","resolution","Vector2","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,YAAgBD,MAAO,IAAKL,EAAMO,QAAQ,EAAI,KAAM,EAAI,OAE5DC,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,yBACA,GACA,8BACA,GACA,2BACA,GACA,oBACA,GACA,6FACA,GACA,uFACA,kEACA,wBACA,uCACA,+CACA,KACA,uEACA,KACA,wEACA,wEACA,cACA,uEACA,sEACA,0EACA,4EACA,6EACA,oEACA,wEACA,sEACA,KACA,0EACA,uEACA,wEACA,uEACA,2EACA,yEACA,wEACA,yEACA,kEACA,2EACA,0EACA,KACA,uFACA,GACA,oBACA,0BACA,iCACA,GACA,+BACA,GACA,iFACA,0BACA,SACA,kDACA,4DACA,yEACA,SACA,gCACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,6BACA,SACA,2CACA,sEACA,mEACA,8DACA,SACA,6EACA,2EACA,SACA,oDACA,wCACA,wCACA,iEACA,gDACA,SACA,iBACA,kBACA,SACA,mCACA,SACA,iFACA,0BACA,SACA,+CACA,6DACA,4EACA,yEACA,iCACA,SACA,iBACA,kBACA,SACA,gCACA,SACA,iFACA,uBACA,SACA,6CACA,6DACA,SACA,wDACA,yEACA,mEACA,SACA,6BACA,SACA,iFACA,iCACA,SACA,iCACA,SACA,gDACA,2CACA,SACA,gCACA,2CACA,aACA,+BACA,2CACA,aACA,gCACA,2CACA,aACA,qCACA,2CACA,aACA,SACA,iFACA,6BACA,SACA,oDACA,4DACA,SACA,6BACA,uCACA,aACA,gCACA,uCACA,aACA,+BACA,uCACA,aACA,iCACA,uCACA,aACA,SACA,GACA,GACA,iFACA,sDACA,iFACA,qEACA,iFACA,8BACA,SACA,oCACA,uEACA,uDACA,mEACA,SACA,iBACA,iFACA,2EACA,iFACA,8CACA,SACA,eACA,iFACA,8EACA,8DACA,gEACA,kEACA,6DACA,SACA,qCACA,SACA,GACA,GACA,iFACA,GACA,oDACA,GACA,iFACA,GACA,iFACA,4DACA,iFACA,kCACA,gCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,GACA,iFACA,yDACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,iFACA,sDACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,GACA,GACA,iFACA,GACA,8CACA,GACA,iFACA,2EACA,4BACA,kCACA,8BACA,8BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,6BACA,4CACA,gCACA,QACA,4BACA,mCACA,8BACA,gCACA,gCACA,gCACA,4BACA,8BACA,8BACA,8BACA,qCACA,SACA,iFACA,2BACA,kDACA,kEACA,SACA,iFACA,2BACA,mBACA,uBACA,uBACA,iDACA,6DACA,uDACA,wCACA,0EACA,YACA,2EACA,aACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,2BACA,2CACA,qDACA,oEACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,yBACA,8BACA,gCACA,gEACA,4EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,+DACA,wEACA,+DACA,wEACA,SACA,GACA,GACA,iFACA,2DACA,iFACA,gCACA,6DACA,QACA,6DACA,SACA,GACA,GACA,GACA,GACA,iFACA,GACA,kDACA,GACA,iFACA,qBACA,iFACA,8BACA,SACA,oFACA,gCACA,sBACA,SACA,sEACA,oFACA,qCACA,sCACA,oCACA,SACA,8BACA,4DACA,sCACA,iEACA,mBACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,oCACA,+CACA,wCACA,yCACA,sCACA,SACA,oCACA,+CACA,oEACA,mCACA,gCACA,gCACA,wCACA,yCACA,wCACA,yCACA,yCACA,SACA,oCACA,kDACA,+CACA,0CACA,2CACA,0CACA,2CACA,0CACA,SACA,oCACA,+DACA,+CACA,0CACA,2CACA,0CACA,2CACA,6CACA,SACA,oCACA,yDACA,gDACA,0DACA,oCACA,uCACA,8CACA,yEACA,6BACA,iCACA,mCACA,SACA,oCACA,iEACA,gDACA,2EACA,uCACA,+BACA,2BACA,gCACA,qCACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,iFACA,0CACA,2CACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,iEACA,yEACA,4DACA,uCACA,yBACA,qEACA,0CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,6DACA,yEACA,+EACA,+CACA,kEACA,qDACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,+EACA,sDACA,qCACA,+DACA,oDACA,0BACA,oDACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oDACA,yDACA,0EACA,2DACA,iDACA,wCACA,MACA,iFACA,uBACA,sBACA,sBACA,oCACA,kCACA,wDACA,4CACA,wCACA,oBACA,wCACA,qBACA,iBACA,wCACA,4DACA,iFACA,gBACA,4DACA,iFACA,iBACA,kCACA,qCACA,iBACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,YACA,oDACA,wCACA,oCACA,gBACA,oCACA,iBACA,mCACA,8GACA,8GACA,8GACA,8GACA,gBACA,wGACA,wGACA,wGACA,wGACA,iBACA,aACA,iFACA,2CACA,2CACA,4CACA,4CACA,2CACA,2CACA,+CACA,+CACA,sEACA,6CACA,oFACA,oDACA,iFACA,oBACA,kCACA,2BACA,gBACA,4BACA,iBACA,iFACA,oCACA,mCACA,+GACA,+GACA,+GACA,+GACA,gBACA,yGACA,yGACA,yGACA,yGACA,iBACA,YACA,uGACA,uGACA,aACA,iFACA,wCACA,wCACA,4CACA,8CACA,qDACA,qDACA,iFACA,4CACA,4CACA,uDACA,uDACA,iFACA,4CACA,4CACA,qEACA,qEACA,uDACA,uDACA,uDACA,uDACA,iFACA,sDACA,oDACA,gDACA,6DACA,iFACA,mCACA,mCACA,uDACA,0DACA,iFACA,2CACA,2CACA,wCACA,wCACA,yDACA,gEACA,0CACA,kEACA,iFACA,uBACA,uBACA,uBACA,wBACA,2DACA,2DACA,gDACA,gDACA,iFACA,uBACA,mDACA,mDACA,uBACA,mDACA,mDACA,kDACA,4DACA,6CACA,4DACA,iFACA,kCACA,qDACA,+CACA,6CACA,2CACA,iFACA,gCACA,gCACA,wDACA,wDACA,sDACA,sDACA,8CACA,sDACA,sDACA,iFACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,wCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,kEACA,kEACA,iDACA,kEACA,kEACA,iFACA,4CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,sEACA,sEACA,qDACA,sEACA,sEACA,iFACA,gDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,0EACA,0EACA,yDACA,0EACA,0EACA,iFACA,oDACA,uCACA,wFACA,wFACA,6EACA,6EACA,uEACA,uEACA,8EACA,8EACA,6DACA,8EACA,8EACA,iFACA,gCACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,yCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,mEACA,mEACA,iDACA,mEACA,mEACA,iFACA,6CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,uEACA,uEACA,qDACA,uEACA,uEACA,iFACA,iDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,2EACA,2EACA,yDACA,2EACA,2EACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,aACA,iFACA,4BACA,iCACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,iFACA,wCACA,wCACA,4CACA,4CACA,iFACA,4DACA,4CACA,4DACA,gDACA,iFACA,yCACA,uCACA,8DACA,6CACA,8DACA,uDACA,iFACA,gEACA,mEACA,8DACA,8DACA,8BACA,wCACA,YACA,+DACA,aACA,IACA,iFACA,SACA,GACA,gBACA,oCACA,WACA,iBACA,gBACA,gBACA,gBACA,kBACA,iBACA,iBACA,iBACA,YACA,aACA,cACA,WACA,WACA,WACA,gBACA,OACA,GACA,wDACA,iDACA,KACFD,KAAK,OAEX,OAAOR,EAAOU,QAAQT,WAAaA","file":"../../shaders/FXAAShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var FXAAShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'resolution': { value: new  THREE.Vector2(1 / 1024, 1 / 512) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'precision highp float;',\r\n            '',\r\n            'uniform sampler2D tDiffuse;',\r\n            '',\r\n            'uniform vec2 resolution;',\r\n            '',\r\n            'varying vec2 vUv;',\r\n            '',\r\n            '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)',\r\n            '',\r\n            '//----------------------------------------------------------------------------------',\r\n            '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag',\r\n            '// SDK Version: v3.00',\r\n            '// Email:       gameworks@nvidia.com',\r\n            '// Site:        http://developer.nvidia.com/',\r\n            '//',\r\n            '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.',\r\n            '//',\r\n            '// Redistribution and use in source and binary forms, with or without',\r\n            '// modification, are permitted provided that the following conditions',\r\n            '// are met:',\r\n            '//  * Redistributions of source code must retain the above copyright',\r\n            '//    notice, this list of conditions and the following disclaimer.',\r\n            '//  * Redistributions in binary form must reproduce the above copyright',\r\n            '//    notice, this list of conditions and the following disclaimer in the',\r\n            '//    documentation and/or other materials provided with the distribution.',\r\n            '//  * Neither the name of NVIDIA CORPORATION nor the names of its',\r\n            '//    contributors may be used to endorse or promote products derived',\r\n            '//    from this software without specific prior written permission.',\r\n            '//',\r\n            \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\r\n            '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',\r\n            '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',\r\n            '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR',\r\n            '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,',\r\n            '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,',\r\n            '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR',\r\n            '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY',\r\n            '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT',\r\n            '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE',\r\n            '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.',\r\n            '//',\r\n            '//----------------------------------------------------------------------------------',\r\n            '',\r\n            '#define FXAA_PC 1',\r\n            '#define FXAA_GLSL_100 1',\r\n            '#define FXAA_QUALITY_PRESET 12',\r\n            '',\r\n            '#define FXAA_GREEN_AS_LUMA 1',\r\n            '',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_PC_CONSOLE',\r\n            '    //',\r\n            '    // The console algorithm for PC is included',\r\n            '    // for developers targeting really low spec machines.',\r\n            '    // Likely better to just run FXAA_PC, and use a really low preset.',\r\n            '    //',\r\n            '    #define FXAA_PC_CONSOLE 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_GLSL_120',\r\n            '    #define FXAA_GLSL_120 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_GLSL_130',\r\n            '    #define FXAA_GLSL_130 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_HLSL_3',\r\n            '    #define FXAA_HLSL_3 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_HLSL_4',\r\n            '    #define FXAA_HLSL_4 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_HLSL_5',\r\n            '    #define FXAA_HLSL_5 0',\r\n            '#endif',\r\n            '/*==========================================================================*/',\r\n            '#ifndef FXAA_GREEN_AS_LUMA',\r\n            '    //',\r\n            '    // For those using non-linear color,',\r\n            '    // and either not able to get luma in alpha, or not wanting to,',\r\n            '    // this enables FXAA to run using green as a proxy for luma.',\r\n            '    // So with this enabled, no need to pack luma in alpha.',\r\n            '    //',\r\n            '    // This will turn off AA on anything which lacks some amount of green.',\r\n            '    // Pure red and blue or combination of only R and B, will get no AA.',\r\n            '    //',\r\n            '    // Might want to lower the settings for both,',\r\n            '    //    fxaaConsoleEdgeThresholdMin',\r\n            '    //    fxaaQualityEdgeThresholdMin',\r\n            '    // In order to insure AA does not get turned off on colors',\r\n            '    // which contain a minor amount of green.',\r\n            '    //',\r\n            '    // 1 = On.',\r\n            '    // 0 = Off.',\r\n            '    //',\r\n            '    #define FXAA_GREEN_AS_LUMA 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_EARLY_EXIT',\r\n            '    //',\r\n            \"    // Controls algorithm's early exit path.\",\r\n            '    // On PS3 turning this ON adds 2 cycles to the shader.',\r\n            '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.',\r\n            '    // Turning this off on console will result in a more blurry image.',\r\n            '    // So this defaults to on.',\r\n            '    //',\r\n            '    // 1 = On.',\r\n            '    // 0 = Off.',\r\n            '    //',\r\n            '    #define FXAA_EARLY_EXIT 1',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_DISCARD',\r\n            '    //',\r\n            '    // Only valid for PC OpenGL currently.',\r\n            '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.',\r\n            '    //',\r\n            \"    // 1 = Use discard on pixels which don't need AA.\",\r\n            '    //     For APIs which enable concurrent TEX+ROP from same surface.',\r\n            \"    // 0 = Return unchanged color on pixels which don't need AA.\",\r\n            '    //',\r\n            '    #define FXAA_DISCARD 0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_FAST_PIXEL_OFFSET',\r\n            '    //',\r\n            '    // Used for GLSL 120 only.',\r\n            '    //',\r\n            '    // 1 = GL API supports fast pixel offsets',\r\n            '    // 0 = do not use fast pixel offsets',\r\n            '    //',\r\n            '    #ifdef GL_EXT_gpu_shader4',\r\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\r\n            '    #endif',\r\n            '    #ifdef GL_NV_gpu_shader5',\r\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\r\n            '    #endif',\r\n            '    #ifdef GL_ARB_gpu_shader5',\r\n            '        #define FXAA_FAST_PIXEL_OFFSET 1',\r\n            '    #endif',\r\n            '    #ifndef FXAA_FAST_PIXEL_OFFSET',\r\n            '        #define FXAA_FAST_PIXEL_OFFSET 0',\r\n            '    #endif',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#ifndef FXAA_GATHER4_ALPHA',\r\n            '    //',\r\n            '    // 1 = API supports gather4 on alpha channel.',\r\n            '    // 0 = API does not support gather4 on alpha channel.',\r\n            '    //',\r\n            '    #if (FXAA_HLSL_5 == 1)',\r\n            '        #define FXAA_GATHER4_ALPHA 1',\r\n            '    #endif',\r\n            '    #ifdef GL_ARB_gpu_shader5',\r\n            '        #define FXAA_GATHER4_ALPHA 1',\r\n            '    #endif',\r\n            '    #ifdef GL_NV_gpu_shader5',\r\n            '        #define FXAA_GATHER4_ALPHA 1',\r\n            '    #endif',\r\n            '    #ifndef FXAA_GATHER4_ALPHA',\r\n            '        #define FXAA_GATHER4_ALPHA 0',\r\n            '    #endif',\r\n            '#endif',\r\n            '',\r\n            '',\r\n            '/*============================================================================',\r\n            '                        FXAA QUALITY - TUNING KNOBS',\r\n            '------------------------------------------------------------------------------',\r\n            'NOTE the other tuning knobs are now in the shader function inputs!',\r\n            '============================================================================*/',\r\n            '#ifndef FXAA_QUALITY_PRESET',\r\n            '    //',\r\n            '    // Choose the quality preset.',\r\n            '    // This needs to be compiled into the shader as it effects code.',\r\n            '    // Best option to include multiple presets is to',\r\n            '    // in each shader define the preset, then include this file.',\r\n            '    //',\r\n            '    // OPTIONS',\r\n            '    // -----------------------------------------------------------------------',\r\n            '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)',\r\n            '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)',\r\n            '    // 39       - no dither, very expensive',\r\n            '    //',\r\n            '    // NOTES',\r\n            '    // -----------------------------------------------------------------------',\r\n            '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)',\r\n            '    // 13 = about same speed as FXAA 3.9 and better than 12',\r\n            '    // 23 = closest to FXAA 3.9 visually and performance wise',\r\n            '    //  _ = the lowest digit is directly related to performance',\r\n            '    // _  = the highest digit is directly related to style',\r\n            '    //',\r\n            '    #define FXAA_QUALITY_PRESET 12',\r\n            '#endif',\r\n            '',\r\n            '',\r\n            '/*============================================================================',\r\n            '',\r\n            '                           FXAA QUALITY - PRESETS',\r\n            '',\r\n            '============================================================================*/',\r\n            '',\r\n            '/*============================================================================',\r\n            '                     FXAA QUALITY - MEDIUM DITHER PRESETS',\r\n            '============================================================================*/',\r\n            '#if (FXAA_QUALITY_PRESET == 10)',\r\n            '    #define FXAA_QUALITY_PS 3',\r\n            '    #define FXAA_QUALITY_P0 1.5',\r\n            '    #define FXAA_QUALITY_P1 3.0',\r\n            '    #define FXAA_QUALITY_P2 12.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 11)',\r\n            '    #define FXAA_QUALITY_PS 4',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 3.0',\r\n            '    #define FXAA_QUALITY_P3 12.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 12)',\r\n            '    #define FXAA_QUALITY_PS 5',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 4.0',\r\n            '    #define FXAA_QUALITY_P4 12.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 13)',\r\n            '    #define FXAA_QUALITY_PS 6',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 4.0',\r\n            '    #define FXAA_QUALITY_P5 12.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 14)',\r\n            '    #define FXAA_QUALITY_PS 7',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 4.0',\r\n            '    #define FXAA_QUALITY_P6 12.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 15)',\r\n            '    #define FXAA_QUALITY_PS 8',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 2.0',\r\n            '    #define FXAA_QUALITY_P6 4.0',\r\n            '    #define FXAA_QUALITY_P7 12.0',\r\n            '#endif',\r\n            '',\r\n            '/*============================================================================',\r\n            '                     FXAA QUALITY - LOW DITHER PRESETS',\r\n            '============================================================================*/',\r\n            '#if (FXAA_QUALITY_PRESET == 20)',\r\n            '    #define FXAA_QUALITY_PS 3',\r\n            '    #define FXAA_QUALITY_P0 1.5',\r\n            '    #define FXAA_QUALITY_P1 2.0',\r\n            '    #define FXAA_QUALITY_P2 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 21)',\r\n            '    #define FXAA_QUALITY_PS 4',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 22)',\r\n            '    #define FXAA_QUALITY_PS 5',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 23)',\r\n            '    #define FXAA_QUALITY_PS 6',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 24)',\r\n            '    #define FXAA_QUALITY_PS 7',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 3.0',\r\n            '    #define FXAA_QUALITY_P6 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 25)',\r\n            '    #define FXAA_QUALITY_PS 8',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 2.0',\r\n            '    #define FXAA_QUALITY_P6 4.0',\r\n            '    #define FXAA_QUALITY_P7 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 26)',\r\n            '    #define FXAA_QUALITY_PS 9',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 2.0',\r\n            '    #define FXAA_QUALITY_P6 2.0',\r\n            '    #define FXAA_QUALITY_P7 4.0',\r\n            '    #define FXAA_QUALITY_P8 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 27)',\r\n            '    #define FXAA_QUALITY_PS 10',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 2.0',\r\n            '    #define FXAA_QUALITY_P6 2.0',\r\n            '    #define FXAA_QUALITY_P7 2.0',\r\n            '    #define FXAA_QUALITY_P8 4.0',\r\n            '    #define FXAA_QUALITY_P9 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 28)',\r\n            '    #define FXAA_QUALITY_PS 11',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 2.0',\r\n            '    #define FXAA_QUALITY_P6 2.0',\r\n            '    #define FXAA_QUALITY_P7 2.0',\r\n            '    #define FXAA_QUALITY_P8 2.0',\r\n            '    #define FXAA_QUALITY_P9 4.0',\r\n            '    #define FXAA_QUALITY_P10 8.0',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_QUALITY_PRESET == 29)',\r\n            '    #define FXAA_QUALITY_PS 12',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.5',\r\n            '    #define FXAA_QUALITY_P2 2.0',\r\n            '    #define FXAA_QUALITY_P3 2.0',\r\n            '    #define FXAA_QUALITY_P4 2.0',\r\n            '    #define FXAA_QUALITY_P5 2.0',\r\n            '    #define FXAA_QUALITY_P6 2.0',\r\n            '    #define FXAA_QUALITY_P7 2.0',\r\n            '    #define FXAA_QUALITY_P8 2.0',\r\n            '    #define FXAA_QUALITY_P9 2.0',\r\n            '    #define FXAA_QUALITY_P10 4.0',\r\n            '    #define FXAA_QUALITY_P11 8.0',\r\n            '#endif',\r\n            '',\r\n            '/*============================================================================',\r\n            '                     FXAA QUALITY - EXTREME QUALITY',\r\n            '============================================================================*/',\r\n            '#if (FXAA_QUALITY_PRESET == 39)',\r\n            '    #define FXAA_QUALITY_PS 12',\r\n            '    #define FXAA_QUALITY_P0 1.0',\r\n            '    #define FXAA_QUALITY_P1 1.0',\r\n            '    #define FXAA_QUALITY_P2 1.0',\r\n            '    #define FXAA_QUALITY_P3 1.0',\r\n            '    #define FXAA_QUALITY_P4 1.0',\r\n            '    #define FXAA_QUALITY_P5 1.5',\r\n            '    #define FXAA_QUALITY_P6 2.0',\r\n            '    #define FXAA_QUALITY_P7 2.0',\r\n            '    #define FXAA_QUALITY_P8 2.0',\r\n            '    #define FXAA_QUALITY_P9 2.0',\r\n            '    #define FXAA_QUALITY_P10 4.0',\r\n            '    #define FXAA_QUALITY_P11 8.0',\r\n            '#endif',\r\n            '',\r\n            '',\r\n            '',\r\n            '/*============================================================================',\r\n            '',\r\n            '                                API PORTING',\r\n            '',\r\n            '============================================================================*/',\r\n            '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)',\r\n            '    #define FxaaBool bool',\r\n            '    #define FxaaDiscard discard',\r\n            '    #define FxaaFloat float',\r\n            '    #define FxaaFloat2 vec2',\r\n            '    #define FxaaFloat3 vec3',\r\n            '    #define FxaaFloat4 vec4',\r\n            '    #define FxaaHalf float',\r\n            '    #define FxaaHalf2 vec2',\r\n            '    #define FxaaHalf3 vec3',\r\n            '    #define FxaaHalf4 vec4',\r\n            '    #define FxaaInt2 ivec2',\r\n            '    #define FxaaSat(x) clamp(x, 0.0, 1.0)',\r\n            '    #define FxaaTex sampler2D',\r\n            '#else',\r\n            '    #define FxaaBool bool',\r\n            '    #define FxaaDiscard clip(-1)',\r\n            '    #define FxaaFloat float',\r\n            '    #define FxaaFloat2 float2',\r\n            '    #define FxaaFloat3 float3',\r\n            '    #define FxaaFloat4 float4',\r\n            '    #define FxaaHalf half',\r\n            '    #define FxaaHalf2 half2',\r\n            '    #define FxaaHalf3 half3',\r\n            '    #define FxaaHalf4 half4',\r\n            '    #define FxaaSat(x) saturate(x)',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_GLSL_100 == 1)',\r\n            '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)',\r\n            '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_GLSL_120 == 1)',\r\n            '    // Requires,',\r\n            '    //  #version 120',\r\n            '    // And at least,',\r\n            '    //  #extension GL_EXT_gpu_shader4 : enable',\r\n            '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)',\r\n            '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)',\r\n            '    #if (FXAA_FAST_PIXEL_OFFSET == 1)',\r\n            '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)',\r\n            '    #else',\r\n            '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)',\r\n            '    #endif',\r\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\r\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\r\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\r\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\r\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\r\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\r\n            '    #endif',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_GLSL_130 == 1)',\r\n            '    // Requires \"#version 130\" or better',\r\n            '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)',\r\n            '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)',\r\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\r\n            '        // use #extension GL_ARB_gpu_shader5 : enable',\r\n            '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)',\r\n            '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)',\r\n            '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)',\r\n            '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)',\r\n            '    #endif',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_HLSL_3 == 1)',\r\n            '    #define FxaaInt2 float2',\r\n            '    #define FxaaTex sampler2D',\r\n            '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))',\r\n            '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_HLSL_4 == 1)',\r\n            '    #define FxaaInt2 int2',\r\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\r\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\r\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\r\n            '#endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '#if (FXAA_HLSL_5 == 1)',\r\n            '    #define FxaaInt2 int2',\r\n            '    struct FxaaTex { SamplerState smpl; Texture2D tex; };',\r\n            '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)',\r\n            '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)',\r\n            '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)',\r\n            '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)',\r\n            '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)',\r\n            '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)',\r\n            '#endif',\r\n            '',\r\n            '',\r\n            '/*============================================================================',\r\n            '                   GREEN AS LUMA OPTION SUPPORT FUNCTION',\r\n            '============================================================================*/',\r\n            '#if (FXAA_GREEN_AS_LUMA == 0)',\r\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }',\r\n            '#else',\r\n            '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }',\r\n            '#endif',\r\n            '',\r\n            '',\r\n            '',\r\n            '',\r\n            '/*============================================================================',\r\n            '',\r\n            '                             FXAA3 QUALITY - PC',\r\n            '',\r\n            '============================================================================*/',\r\n            '#if (FXAA_PC == 1)',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            'FxaaFloat4 FxaaPixelShader(',\r\n            '    //',\r\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\r\n            '    // {xy} = center of pixel',\r\n            '    FxaaFloat2 pos,',\r\n            '    //',\r\n            '    // Used only for FXAA Console, and not used on the 360 version.',\r\n            '    // Use noperspective interpolation here (turn off perspective interpolation).',\r\n            '    // {xy_} = upper left of pixel',\r\n            '    // {_zw} = lower right of pixel',\r\n            '    FxaaFloat4 fxaaConsolePosPos,',\r\n            '    //',\r\n            '    // Input color texture.',\r\n            '    // {rgb_} = color in linear or perceptual color space',\r\n            '    // if (FXAA_GREEN_AS_LUMA == 0)',\r\n            '    //     {__a} = luma in perceptual color space (not linear)',\r\n            '    FxaaTex tex,',\r\n            '    //',\r\n            '    // Only used on the optimized 360 version of FXAA Console.',\r\n            '    // For everything but 360, just use the same input here as for \"tex\".',\r\n            '    // For 360, same texture, just alias with a 2nd sampler.',\r\n            '    // This sampler needs to have an exponent bias of -1.',\r\n            '    FxaaTex fxaaConsole360TexExpBiasNegOne,',\r\n            '    //',\r\n            '    // Only used on the optimized 360 version of FXAA Console.',\r\n            '    // For everything but 360, just use the same input here as for \"tex\".',\r\n            '    // For 360, same texture, just alias with a 3nd sampler.',\r\n            '    // This sampler needs to have an exponent bias of -2.',\r\n            '    FxaaTex fxaaConsole360TexExpBiasNegTwo,',\r\n            '    //',\r\n            '    // Only used on FXAA Quality.',\r\n            '    // This must be from a constant/uniform.',\r\n            '    // {x_} = 1.0/screenWidthInPixels',\r\n            '    // {_y} = 1.0/screenHeightInPixels',\r\n            '    FxaaFloat2 fxaaQualityRcpFrame,',\r\n            '    //',\r\n            '    // Only used on FXAA Console.',\r\n            '    // This must be from a constant/uniform.',\r\n            '    // This effects sub-pixel AA quality and inversely sharpness.',\r\n            '    //   Where N ranges between,',\r\n            '    //     N = 0.50 (default)',\r\n            '    //     N = 0.33 (sharper)',\r\n            '    // {x__} = -N/screenWidthInPixels',\r\n            '    // {_y_} = -N/screenHeightInPixels',\r\n            '    // {_z_} =  N/screenWidthInPixels',\r\n            '    // {__w} =  N/screenHeightInPixels',\r\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt,',\r\n            '    //',\r\n            '    // Only used on FXAA Console.',\r\n            '    // Not used on 360, but used on PS3 and PC.',\r\n            '    // This must be from a constant/uniform.',\r\n            '    // {x__} = -2.0/screenWidthInPixels',\r\n            '    // {_y_} = -2.0/screenHeightInPixels',\r\n            '    // {_z_} =  2.0/screenWidthInPixels',\r\n            '    // {__w} =  2.0/screenHeightInPixels',\r\n            '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,',\r\n            '    //',\r\n            '    // Only used on FXAA Console.',\r\n            '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.',\r\n            '    // This must be from a constant/uniform.',\r\n            '    // {x__} =  8.0/screenWidthInPixels',\r\n            '    // {_y_} =  8.0/screenHeightInPixels',\r\n            '    // {_z_} = -4.0/screenWidthInPixels',\r\n            '    // {__w} = -4.0/screenHeightInPixels',\r\n            '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,',\r\n            '    //',\r\n            '    // Only used on FXAA Quality.',\r\n            '    // This used to be the FXAA_QUALITY_SUBPIX define.',\r\n            '    // It is here now to allow easier tuning.',\r\n            '    // Choose the amount of sub-pixel aliasing removal.',\r\n            '    // This can effect sharpness.',\r\n            '    //   1.00 - upper limit (softer)',\r\n            '    //   0.75 - default amount of filtering',\r\n            '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)',\r\n            '    //   0.25 - almost off',\r\n            '    //   0.00 - completely off',\r\n            '    FxaaFloat fxaaQualitySubpix,',\r\n            '    //',\r\n            '    // Only used on FXAA Quality.',\r\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.',\r\n            '    // It is here now to allow easier tuning.',\r\n            '    // The minimum amount of local contrast required to apply algorithm.',\r\n            '    //   0.333 - too little (faster)',\r\n            '    //   0.250 - low quality',\r\n            '    //   0.166 - default',\r\n            '    //   0.125 - high quality',\r\n            '    //   0.063 - overkill (slower)',\r\n            '    FxaaFloat fxaaQualityEdgeThreshold,',\r\n            '    //',\r\n            '    // Only used on FXAA Quality.',\r\n            '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.',\r\n            '    // It is here now to allow easier tuning.',\r\n            '    // Trims the algorithm from processing darks.',\r\n            '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)',\r\n            '    //   0.0625 - high quality (faster)',\r\n            '    //   0.0312 - visible limit (slower)',\r\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\r\n            '    //   Likely want to set this to zero.',\r\n            '    //   As colors that are mostly not-green',\r\n            '    //   will appear very dark in the green channel!',\r\n            '    //   Tune by looking at mostly non-green content,',\r\n            '    //   then start at zero and increase until aliasing is a problem.',\r\n            '    FxaaFloat fxaaQualityEdgeThresholdMin,',\r\n            '    //',\r\n            '    // Only used on FXAA Console.',\r\n            '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.',\r\n            '    // It is here now to allow easier tuning.',\r\n            '    // This does not effect PS3, as this needs to be compiled in.',\r\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.',\r\n            '    //   Due to the PS3 being ALU bound,',\r\n            '    //   there are only three safe values here: 2 and 4 and 8.',\r\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\r\n            '    // For all other platforms can be a non-power of two.',\r\n            '    //   8.0 is sharper (default!!!)',\r\n            '    //   4.0 is softer',\r\n            '    //   2.0 is really soft (good only for vector graphics inputs)',\r\n            '    FxaaFloat fxaaConsoleEdgeSharpness,',\r\n            '    //',\r\n            '    // Only used on FXAA Console.',\r\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.',\r\n            '    // It is here now to allow easier tuning.',\r\n            '    // This does not effect PS3, as this needs to be compiled in.',\r\n            '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.',\r\n            '    //   Due to the PS3 being ALU bound,',\r\n            '    //   there are only two safe values here: 1/4 and 1/8.',\r\n            '    //   These options use the shaders ability to a free *|/ by 2|4|8.',\r\n            '    // The console setting has a different mapping than the quality setting.',\r\n            '    // Other platforms can use other values.',\r\n            '    //   0.125 leaves less aliasing, but is softer (default!!!)',\r\n            '    //   0.25 leaves more aliasing, and is sharper',\r\n            '    FxaaFloat fxaaConsoleEdgeThreshold,',\r\n            '    //',\r\n            '    // Only used on FXAA Console.',\r\n            '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.',\r\n            '    // It is here now to allow easier tuning.',\r\n            '    // Trims the algorithm from processing darks.',\r\n            '    // The console setting has a different mapping than the quality setting.',\r\n            '    // This only applies when FXAA_EARLY_EXIT is 1.',\r\n            '    // This does not apply to PS3,',\r\n            '    // PS3 was simplified to avoid more shader instructions.',\r\n            '    //   0.06 - faster but more aliasing in darks',\r\n            '    //   0.05 - default',\r\n            '    //   0.04 - slower and less aliasing in darks',\r\n            '    // Special notes when using FXAA_GREEN_AS_LUMA,',\r\n            '    //   Likely want to set this to zero.',\r\n            '    //   As colors that are mostly not-green',\r\n            '    //   will appear very dark in the green channel!',\r\n            '    //   Tune by looking at mostly non-green content,',\r\n            '    //   then start at zero and increase until aliasing is a problem.',\r\n            '    FxaaFloat fxaaConsoleEdgeThresholdMin,',\r\n            '    //',\r\n            '    // Extra constants for 360 FXAA Console only.',\r\n            '    // Use zeros or anything else for other platforms.',\r\n            '    // These must be in physical constant registers and NOT immediates.',\r\n            '    // Immediates will result in compiler un-optimizing.',\r\n            '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)',\r\n            '    FxaaFloat4 fxaaConsole360ConstDir',\r\n            ') {',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat2 posM;',\r\n            '    posM.x = pos.x;',\r\n            '    posM.y = pos.y;',\r\n            '    #if (FXAA_GATHER4_ALPHA == 1)',\r\n            '        #if (FXAA_DISCARD == 0)',\r\n            '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\r\n            '            #if (FXAA_GREEN_AS_LUMA == 0)',\r\n            '                #define lumaM rgbyM.w',\r\n            '            #else',\r\n            '                #define lumaM rgbyM.y',\r\n            '            #endif',\r\n            '        #endif',\r\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\r\n            '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);',\r\n            '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));',\r\n            '        #else',\r\n            '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);',\r\n            '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));',\r\n            '        #endif',\r\n            '        #if (FXAA_DISCARD == 1)',\r\n            '            #define lumaM luma4A.w',\r\n            '        #endif',\r\n            '        #define lumaE luma4A.z',\r\n            '        #define lumaS luma4A.x',\r\n            '        #define lumaSE luma4A.y',\r\n            '        #define lumaNW luma4B.w',\r\n            '        #define lumaN luma4B.z',\r\n            '        #define lumaW luma4B.x',\r\n            '    #else',\r\n            '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);',\r\n            '        #if (FXAA_GREEN_AS_LUMA == 0)',\r\n            '            #define lumaM rgbyM.w',\r\n            '        #else',\r\n            '            #define lumaM rgbyM.y',\r\n            '        #endif',\r\n            '        #if (FXAA_GLSL_100 == 1)',\r\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));',\r\n            '        #else',\r\n            '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));',\r\n            '        #endif',\r\n            '    #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat maxSM = max(lumaS, lumaM);',\r\n            '    FxaaFloat minSM = min(lumaS, lumaM);',\r\n            '    FxaaFloat maxESM = max(lumaE, maxSM);',\r\n            '    FxaaFloat minESM = min(lumaE, minSM);',\r\n            '    FxaaFloat maxWN = max(lumaN, lumaW);',\r\n            '    FxaaFloat minWN = min(lumaN, lumaW);',\r\n            '    FxaaFloat rangeMax = max(maxWN, maxESM);',\r\n            '    FxaaFloat rangeMin = min(minWN, minESM);',\r\n            '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;',\r\n            '    FxaaFloat range = rangeMax - rangeMin;',\r\n            '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);',\r\n            '    FxaaBool earlyExit = range < rangeMaxClamped;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    if(earlyExit)',\r\n            '        #if (FXAA_DISCARD == 1)',\r\n            '            FxaaDiscard;',\r\n            '        #else',\r\n            '            return rgbyM;',\r\n            '        #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    #if (FXAA_GATHER4_ALPHA == 0)',\r\n            '        #if (FXAA_GLSL_100 == 1)',\r\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));',\r\n            '        #else',\r\n            '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));',\r\n            '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\r\n            '        #endif',\r\n            '    #else',\r\n            '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));',\r\n            '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));',\r\n            '    #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat lumaNS = lumaN + lumaS;',\r\n            '    FxaaFloat lumaWE = lumaW + lumaE;',\r\n            '    FxaaFloat subpixRcpRange = 1.0/range;',\r\n            '    FxaaFloat subpixNSWE = lumaNS + lumaWE;',\r\n            '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\r\n            '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat lumaNESE = lumaNE + lumaSE;',\r\n            '    FxaaFloat lumaNWNE = lumaNW + lumaNE;',\r\n            '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\r\n            '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat lumaNWSW = lumaNW + lumaSW;',\r\n            '    FxaaFloat lumaSWSE = lumaSW + lumaSE;',\r\n            '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\r\n            '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\r\n            '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\r\n            '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\r\n            '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;',\r\n            '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;',\r\n            '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;',\r\n            '    FxaaBool horzSpan = edgeHorz >= edgeVert;',\r\n            '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    if(!horzSpan) lumaN = lumaW;',\r\n            '    if(!horzSpan) lumaS = lumaE;',\r\n            '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;',\r\n            '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat gradientN = lumaN - lumaM;',\r\n            '    FxaaFloat gradientS = lumaS - lumaM;',\r\n            '    FxaaFloat lumaNN = lumaN + lumaM;',\r\n            '    FxaaFloat lumaSS = lumaS + lumaM;',\r\n            '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);',\r\n            '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));',\r\n            '    if(pairN) lengthSign = -lengthSign;',\r\n            '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat2 posB;',\r\n            '    posB.x = posM.x;',\r\n            '    posB.y = posM.y;',\r\n            '    FxaaFloat2 offNP;',\r\n            '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;',\r\n            '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;',\r\n            '    if(!horzSpan) posB.x += lengthSign * 0.5;',\r\n            '    if( horzSpan) posB.y += lengthSign * 0.5;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat2 posN;',\r\n            '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\r\n            '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\r\n            '    FxaaFloat2 posP;',\r\n            '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\r\n            '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\r\n            '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;',\r\n            '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));',\r\n            '    FxaaFloat subpixE = subpixC * subpixC;',\r\n            '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    if(!pairN) lumaNN = lumaSS;',\r\n            '    FxaaFloat gradientScaled = gradient * 1.0/4.0;',\r\n            '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;',\r\n            '    FxaaFloat subpixF = subpixD * subpixE;',\r\n            '    FxaaBool lumaMLTZero = lumaMM < 0.0;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    lumaEndN -= lumaNN * 0.5;',\r\n            '    lumaEndP -= lumaNN * 0.5;',\r\n            '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\r\n            '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\r\n            '    FxaaBool doneNP = (!doneN) || (!doneP);',\r\n            '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\r\n            '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    if(doneNP) {',\r\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\r\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\r\n            '        doneNP = (!doneN) || (!doneP);',\r\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\r\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '        #if (FXAA_QUALITY_PS > 3)',\r\n            '        if(doneNP) {',\r\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\r\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\r\n            '            doneNP = (!doneN) || (!doneP);',\r\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\r\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '            #if (FXAA_QUALITY_PS > 4)',\r\n            '            if(doneNP) {',\r\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\r\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\r\n            '                doneNP = (!doneN) || (!doneP);',\r\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\r\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                #if (FXAA_QUALITY_PS > 5)',\r\n            '                if(doneNP) {',\r\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\r\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\r\n            '                    doneNP = (!doneN) || (!doneP);',\r\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\r\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                    #if (FXAA_QUALITY_PS > 6)',\r\n            '                    if(doneNP) {',\r\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\r\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\r\n            '                        doneNP = (!doneN) || (!doneP);',\r\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\r\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                        #if (FXAA_QUALITY_PS > 7)',\r\n            '                        if(doneNP) {',\r\n            '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                            doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                            doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\r\n            '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\r\n            '                            doneNP = (!doneN) || (!doneP);',\r\n            '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\r\n            '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    #if (FXAA_QUALITY_PS > 8)',\r\n            '    if(doneNP) {',\r\n            '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '        doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '        doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\r\n            '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\r\n            '        doneNP = (!doneN) || (!doneP);',\r\n            '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\r\n            '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '        #if (FXAA_QUALITY_PS > 9)',\r\n            '        if(doneNP) {',\r\n            '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '            doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '            doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\r\n            '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\r\n            '            doneNP = (!doneN) || (!doneP);',\r\n            '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\r\n            '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '            #if (FXAA_QUALITY_PS > 10)',\r\n            '            if(doneNP) {',\r\n            '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\r\n            '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\r\n            '                doneNP = (!doneN) || (!doneP);',\r\n            '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\r\n            '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                #if (FXAA_QUALITY_PS > 11)',\r\n            '                if(doneNP) {',\r\n            '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                    doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                    doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\r\n            '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\r\n            '                    doneNP = (!doneN) || (!doneP);',\r\n            '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\r\n            '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                    #if (FXAA_QUALITY_PS > 12)',\r\n            '                    if(doneNP) {',\r\n            '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));',\r\n            '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));',\r\n            '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            '                        doneN = abs(lumaEndN) >= gradientScaled;',\r\n            '                        doneP = abs(lumaEndP) >= gradientScaled;',\r\n            '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\r\n            '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\r\n            '                        doneNP = (!doneN) || (!doneP);',\r\n            '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\r\n            '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                    }',\r\n            '                    #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                }',\r\n            '                #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '            }',\r\n            '            #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '        }',\r\n            '        #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    }',\r\n            '    #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                        }',\r\n            '                        #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                    }',\r\n            '                    #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '                }',\r\n            '                #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '            }',\r\n            '            #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '        }',\r\n            '        #endif',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    }',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat dstN = posM.x - posN.x;',\r\n            '    FxaaFloat dstP = posP.x - posM.x;',\r\n            '    if(!horzSpan) dstN = posM.y - posN.y;',\r\n            '    if(!horzSpan) dstP = posP.y - posM.y;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\r\n            '    FxaaFloat spanLength = (dstP + dstN);',\r\n            '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\r\n            '    FxaaFloat spanLengthRcp = 1.0/spanLength;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaBool directionN = dstN < dstP;',\r\n            '    FxaaFloat dst = min(dstN, dstP);',\r\n            '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;',\r\n            '    FxaaFloat subpixG = subpixF * subpixF;',\r\n            '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\r\n            '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;',\r\n            '/*--------------------------------------------------------------------------*/',\r\n            '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\r\n            '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\r\n            '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\r\n            '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\r\n            '    #if (FXAA_DISCARD == 1)',\r\n            '        return FxaaTexTop(tex, posM);',\r\n            '    #else',\r\n            '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);',\r\n            '    #endif',\r\n            '}',\r\n            '/*==========================================================================*/',\r\n            '#endif',\r\n            '',\r\n            'void main() {',\r\n            '  gl_FragColor = FxaaPixelShader(',\r\n            '    vUv,',\r\n            '    vec4(0.0),',\r\n            '    tDiffuse,',\r\n            '    tDiffuse,',\r\n            '    tDiffuse,',\r\n            '    resolution,',\r\n            '    vec4(0.0),',\r\n            '    vec4(0.0),',\r\n            '    vec4(0.0),',\r\n            '    0.75,',\r\n            '    0.166,',\r\n            '    0.0833,',\r\n            '    0.0,',\r\n            '    0.0,',\r\n            '    0.0,',\r\n            '    vec4(0.0)',\r\n            '  );',\r\n            '',\r\n            '  // TODO avoid querying texture twice for same texel',\r\n            '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.FXAAShader = FXAAShader;\r\n});"]}