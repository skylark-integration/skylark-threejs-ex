{"version":3,"sources":["shaders/FXAAShader.js"],"names":["define","THREE","FXAAShader","uniforms","tDiffuse","value","resolution","Vector2","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA6lCV,OAllCAA,EAAMC,YAELC,UAECC,UAAcC,MAAO,MACrBC,YAAgBD,MAAO,IAAIJ,EAAMM,QAAS,EAAI,KAAM,EAAI,OAIzDC,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBACC,yBACA,GACA,8BACA,GACA,2BACA,GACA,oBACA,GACA,6FACA,GACA,uFACA,kEACA,wBACA,uCACA,+CACA,KACA,uEACA,KACA,wEACA,wEACA,cACA,uEACA,sEACA,0EACA,4EACA,6EACA,oEACA,wEACA,sEACA,KACA,0EACA,uEACA,wEACA,uEACA,2EACA,yEACA,wEACA,yEACA,kEACA,2EACA,0EACA,KACA,uFACA,GACA,oBACA,0BACA,iCACA,GACA,+BACA,GACA,iFACA,0BACA,SACA,kDACA,4DACA,yEACA,SACA,gCACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,wBACA,8BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,sBACA,4BACA,SACA,iFACA,6BACA,SACA,2CACA,sEACA,mEACA,8DACA,SACA,6EACA,2EACA,SACA,oDACA,wCACA,wCACA,iEACA,gDACA,SACA,iBACA,kBACA,SACA,mCACA,SACA,iFACA,0BACA,SACA,+CACA,6DACA,4EACA,yEACA,iCACA,SACA,iBACA,kBACA,SACA,gCACA,SACA,iFACA,uBACA,SACA,6CACA,6DACA,SACA,wDACA,yEACA,mEACA,SACA,6BACA,SACA,iFACA,iCACA,SACA,iCACA,SACA,gDACA,2CACA,SACA,gCACA,2CACA,aACA,+BACA,2CACA,aACA,gCACA,2CACA,aACA,qCACA,2CACA,aACA,SACA,iFACA,6BACA,SACA,oDACA,4DACA,SACA,6BACA,uCACA,aACA,gCACA,uCACA,aACA,+BACA,uCACA,aACA,iCACA,uCACA,aACA,SACA,GACA,GACA,iFACA,sDACA,iFACA,qEACA,iFACA,8BACA,SACA,oCACA,uEACA,uDACA,mEACA,SACA,iBACA,iFACA,2EACA,iFACA,8CACA,SACA,eACA,iFACA,8EACA,8DACA,gEACA,kEACA,6DACA,SACA,qCACA,SACA,GACA,GACA,iFACA,GACA,oDACA,GACA,iFACA,GACA,iFACA,4DACA,iFACA,kCACA,gCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,GACA,iFACA,yDACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,gCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,SACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,iFACA,sDACA,iFACA,kCACA,iCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,mCACA,mCACA,SACA,GACA,GACA,GACA,iFACA,GACA,8CACA,GACA,iFACA,2EACA,4BACA,kCACA,8BACA,8BACA,8BACA,8BACA,6BACA,6BACA,6BACA,6BACA,6BACA,4CACA,gCACA,QACA,4BACA,mCACA,8BACA,gCACA,gCACA,gCACA,4BACA,8BACA,8BACA,8BACA,qCACA,SACA,iFACA,2BACA,kDACA,kEACA,SACA,iFACA,2BACA,mBACA,uBACA,uBACA,iDACA,6DACA,uDACA,wCACA,0EACA,YACA,2EACA,aACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,2BACA,2CACA,qDACA,oEACA,oCACA,wDACA,6DACA,4EACA,6DACA,4EACA,aACA,SACA,iFACA,yBACA,8BACA,gCACA,gEACA,4EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,SACA,iFACA,yBACA,4BACA,4DACA,iEACA,0EACA,+DACA,wEACA,+DACA,wEACA,SACA,GACA,GACA,iFACA,2DACA,iFACA,gCACA,6DACA,QACA,6DACA,SACA,GACA,GACA,GACA,GACA,iFACA,GACA,kDACA,GACA,iFACA,qBACA,iFACA,8BACA,SACA,oFACA,gCACA,sBACA,SACA,sEACA,oFACA,qCACA,sCACA,oCACA,SACA,8BACA,4DACA,sCACA,iEACA,mBACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,iEACA,4EACA,+DACA,4DACA,8CACA,SACA,oCACA,+CACA,wCACA,yCACA,sCACA,SACA,oCACA,+CACA,oEACA,mCACA,gCACA,gCACA,wCACA,yCACA,wCACA,yCACA,yCACA,SACA,oCACA,kDACA,+CACA,0CACA,2CACA,0CACA,2CACA,0CACA,SACA,oCACA,+DACA,+CACA,0CACA,2CACA,0CACA,2CACA,6CACA,SACA,oCACA,yDACA,gDACA,0DACA,oCACA,uCACA,8CACA,yEACA,6BACA,iCACA,mCACA,SACA,oCACA,iEACA,gDACA,2EACA,uCACA,+BACA,2BACA,gCACA,qCACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,iFACA,0CACA,2CACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,iEACA,yEACA,4DACA,uCACA,yBACA,qEACA,0CACA,SACA,oCACA,iEACA,gDACA,oEACA,wDACA,2CACA,6DACA,yEACA,+EACA,+CACA,kEACA,qDACA,0CACA,SACA,oCACA,qEACA,gDACA,oDACA,+EACA,sDACA,qCACA,+DACA,oDACA,0BACA,oDACA,sDACA,4CACA,+CACA,uDACA,wDACA,wEACA,6CACA,SACA,oDACA,yDACA,0EACA,2DACA,iDACA,wCACA,MACA,iFACA,uBACA,sBACA,sBACA,oCACA,kCACA,wDACA,4CACA,wCACA,oBACA,wCACA,qBACA,iBACA,wCACA,4DACA,iFACA,gBACA,4DACA,iFACA,iBACA,kCACA,qCACA,iBACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,YACA,oDACA,wCACA,oCACA,gBACA,oCACA,iBACA,mCACA,8GACA,8GACA,8GACA,8GACA,gBACA,wGACA,wGACA,wGACA,wGACA,iBACA,aACA,iFACA,2CACA,2CACA,4CACA,4CACA,2CACA,2CACA,+CACA,+CACA,sEACA,6CACA,oFACA,oDACA,iFACA,oBACA,kCACA,2BACA,gBACA,4BACA,iBACA,iFACA,oCACA,mCACA,+GACA,+GACA,+GACA,+GACA,gBACA,yGACA,yGACA,yGACA,yGACA,iBACA,YACA,uGACA,uGACA,aACA,iFACA,wCACA,wCACA,4CACA,8CACA,qDACA,qDACA,iFACA,4CACA,4CACA,uDACA,uDACA,iFACA,4CACA,4CACA,qEACA,qEACA,uDACA,uDACA,uDACA,uDACA,iFACA,sDACA,oDACA,gDACA,6DACA,iFACA,mCACA,mCACA,uDACA,0DACA,iFACA,2CACA,2CACA,wCACA,wCACA,yDACA,gEACA,0CACA,kEACA,iFACA,uBACA,uBACA,uBACA,wBACA,2DACA,2DACA,gDACA,gDACA,iFACA,uBACA,mDACA,mDACA,uBACA,mDACA,mDACA,kDACA,4DACA,6CACA,4DACA,iFACA,kCACA,qDACA,+CACA,6CACA,2CACA,iFACA,gCACA,gCACA,wDACA,wDACA,sDACA,sDACA,8CACA,sDACA,sDACA,iFACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,wCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,kEACA,kEACA,iDACA,kEACA,kEACA,iFACA,4CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,sEACA,sEACA,qDACA,sEACA,sEACA,iFACA,gDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,0EACA,0EACA,yDACA,0EACA,0EACA,iFACA,oDACA,uCACA,wFACA,wFACA,6EACA,6EACA,uEACA,uEACA,8EACA,8EACA,6DACA,8EACA,8EACA,iFACA,gCACA,mBACA,oEACA,oEACA,yDACA,yDACA,mDACA,mDACA,0DACA,0DACA,yCACA,0DACA,0DACA,iFACA,oCACA,uBACA,wEACA,wEACA,6DACA,6DACA,uDACA,uDACA,8DACA,8DACA,6CACA,8DACA,8DACA,iFACA,yCACA,2BACA,4EACA,4EACA,iEACA,iEACA,2DACA,2DACA,mEACA,mEACA,iDACA,mEACA,mEACA,iFACA,6CACA,+BACA,gFACA,gFACA,qEACA,qEACA,+DACA,+DACA,uEACA,uEACA,qDACA,uEACA,uEACA,iFACA,iDACA,mCACA,oFACA,oFACA,yEACA,yEACA,mEACA,mEACA,2EACA,2EACA,yDACA,2EACA,2EACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,aACA,iFACA,4BACA,iCACA,iFACA,wBACA,6BACA,iFACA,oBACA,yBACA,iFACA,gBACA,qBACA,iFACA,YACA,iBACA,iFACA,QACA,iFACA,wCACA,wCACA,4CACA,4CACA,iFACA,4DACA,4CACA,4DACA,gDACA,iFACA,yCACA,uCACA,8DACA,6CACA,8DACA,uDACA,iFACA,gEACA,mEACA,8DACA,8DACA,8BACA,wCACA,YACA,+DACA,aACA,IACA,iFACA,SACA,GACA,gBACA,oCACA,WACA,iBACA,gBACA,gBACA,gBACA,kBACA,iBACA,iBACA,iBACA,YACA,aACA,cACA,WACA,WACA,WACA,gBACA,OACA,GACA,wDACA,iDACA,KACCD,KAAM,OAIFR,EAAMC","file":"../../shaders/FXAAShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author davidedc / http://www.sketchpatch.net/\n\t *\n\t * NVIDIA FXAA by Timothy Lottes\n\t * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n\t * - WebGL port by @supereggbert\n\t * http://www.glge.org/demos/fxaa/\n\t */\n\n\tTHREE.FXAAShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"resolution\": { value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t\"precision highp float;\",\n\t\t\t\"\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"\",\n\t\t\t\"uniform vec2 resolution;\",\n\t\t\t\"\",\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"\",\n\t\t\t\"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\",\n\t\t\t\"\",\n\t\t\t\"//----------------------------------------------------------------------------------\",\n\t\t\t\"// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\",\n\t\t\t\"// SDK Version: v3.00\",\n\t\t\t\"// Email:       gameworks@nvidia.com\",\n\t\t\t\"// Site:        http://developer.nvidia.com/\",\n\t\t\t\"//\",\n\t\t\t\"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\",\n\t\t\t\"//\",\n\t\t\t\"// Redistribution and use in source and binary forms, with or without\",\n\t\t\t\"// modification, are permitted provided that the following conditions\",\n\t\t\t\"// are met:\",\n\t\t\t\"//  * Redistributions of source code must retain the above copyright\",\n\t\t\t\"//    notice, this list of conditions and the following disclaimer.\",\n\t\t\t\"//  * Redistributions in binary form must reproduce the above copyright\",\n\t\t\t\"//    notice, this list of conditions and the following disclaimer in the\",\n\t\t\t\"//    documentation and/or other materials provided with the distribution.\",\n\t\t\t\"//  * Neither the name of NVIDIA CORPORATION nor the names of its\",\n\t\t\t\"//    contributors may be used to endorse or promote products derived\",\n\t\t\t\"//    from this software without specific prior written permission.\",\n\t\t\t\"//\",\n\t\t\t\"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\n\t\t\t\"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\",\n\t\t\t\"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\",\n\t\t\t\"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\",\n\t\t\t\"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\",\n\t\t\t\"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\",\n\t\t\t\"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\",\n\t\t\t\"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\",\n\t\t\t\"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\",\n\t\t\t\"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\",\n\t\t\t\"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\",\n\t\t\t\"//\",\n\t\t\t\"//----------------------------------------------------------------------------------\",\n\t\t\t\"\",\n\t\t\t\"#define FXAA_PC 1\",\n\t\t\t\"#define FXAA_GLSL_100 1\",\n\t\t\t\"#define FXAA_QUALITY_PRESET 12\",\n\t\t\t\"\",\n\t\t\t\"#define FXAA_GREEN_AS_LUMA 1\",\n\t\t\t\"\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_PC_CONSOLE\",\n\t\t\t\"    //\",\n\t\t\t\"    // The console algorithm for PC is included\",\n\t\t\t\"    // for developers targeting really low spec machines.\",\n\t\t\t\"    // Likely better to just run FXAA_PC, and use a really low preset.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_PC_CONSOLE 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_GLSL_120\",\n\t\t\t\"    #define FXAA_GLSL_120 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_GLSL_130\",\n\t\t\t\"    #define FXAA_GLSL_130 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_HLSL_3\",\n\t\t\t\"    #define FXAA_HLSL_3 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_HLSL_4\",\n\t\t\t\"    #define FXAA_HLSL_4 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_HLSL_5\",\n\t\t\t\"    #define FXAA_HLSL_5 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*==========================================================================*/\",\n\t\t\t\"#ifndef FXAA_GREEN_AS_LUMA\",\n\t\t\t\"    //\",\n\t\t\t\"    // For those using non-linear color,\",\n\t\t\t\"    // and either not able to get luma in alpha, or not wanting to,\",\n\t\t\t\"    // this enables FXAA to run using green as a proxy for luma.\",\n\t\t\t\"    // So with this enabled, no need to pack luma in alpha.\",\n\t\t\t\"    //\",\n\t\t\t\"    // This will turn off AA on anything which lacks some amount of green.\",\n\t\t\t\"    // Pure red and blue or combination of only R and B, will get no AA.\",\n\t\t\t\"    //\",\n\t\t\t\"    // Might want to lower the settings for both,\",\n\t\t\t\"    //    fxaaConsoleEdgeThresholdMin\",\n\t\t\t\"    //    fxaaQualityEdgeThresholdMin\",\n\t\t\t\"    // In order to insure AA does not get turned off on colors\",\n\t\t\t\"    // which contain a minor amount of green.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = On.\",\n\t\t\t\"    // 0 = Off.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_GREEN_AS_LUMA 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_EARLY_EXIT\",\n\t\t\t\"    //\",\n\t\t\t\"    // Controls algorithm's early exit path.\",\n\t\t\t\"    // On PS3 turning this ON adds 2 cycles to the shader.\",\n\t\t\t\"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\",\n\t\t\t\"    // Turning this off on console will result in a more blurry image.\",\n\t\t\t\"    // So this defaults to on.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = On.\",\n\t\t\t\"    // 0 = Off.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_EARLY_EXIT 1\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_DISCARD\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only valid for PC OpenGL currently.\",\n\t\t\t\"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = Use discard on pixels which don't need AA.\",\n\t\t\t\"    //     For APIs which enable concurrent TEX+ROP from same surface.\",\n\t\t\t\"    // 0 = Return unchanged color on pixels which don't need AA.\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_DISCARD 0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_FAST_PIXEL_OFFSET\",\n\t\t\t\"    //\",\n\t\t\t\"    // Used for GLSL 120 only.\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = GL API supports fast pixel offsets\",\n\t\t\t\"    // 0 = do not use fast pixel offsets\",\n\t\t\t\"    //\",\n\t\t\t\"    #ifdef GL_EXT_gpu_shader4\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_NV_gpu_shader5\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_ARB_gpu_shader5\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifndef FXAA_FAST_PIXEL_OFFSET\",\n\t\t\t\"        #define FXAA_FAST_PIXEL_OFFSET 0\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#ifndef FXAA_GATHER4_ALPHA\",\n\t\t\t\"    //\",\n\t\t\t\"    // 1 = API supports gather4 on alpha channel.\",\n\t\t\t\"    // 0 = API does not support gather4 on alpha channel.\",\n\t\t\t\"    //\",\n\t\t\t\"    #if (FXAA_HLSL_5 == 1)\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_ARB_gpu_shader5\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifdef GL_NV_gpu_shader5\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 1\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #ifndef FXAA_GATHER4_ALPHA\",\n\t\t\t\"        #define FXAA_GATHER4_ALPHA 0\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                        FXAA QUALITY - TUNING KNOBS\",\n\t\t\t\"------------------------------------------------------------------------------\",\n\t\t\t\"NOTE the other tuning knobs are now in the shader function inputs!\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#ifndef FXAA_QUALITY_PRESET\",\n\t\t\t\"    //\",\n\t\t\t\"    // Choose the quality preset.\",\n\t\t\t\"    // This needs to be compiled into the shader as it effects code.\",\n\t\t\t\"    // Best option to include multiple presets is to\",\n\t\t\t\"    // in each shader define the preset, then include this file.\",\n\t\t\t\"    //\",\n\t\t\t\"    // OPTIONS\",\n\t\t\t\"    // -----------------------------------------------------------------------\",\n\t\t\t\"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\",\n\t\t\t\"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\",\n\t\t\t\"    // 39       - no dither, very expensive\",\n\t\t\t\"    //\",\n\t\t\t\"    // NOTES\",\n\t\t\t\"    // -----------------------------------------------------------------------\",\n\t\t\t\"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\",\n\t\t\t\"    // 13 = about same speed as FXAA 3.9 and better than 12\",\n\t\t\t\"    // 23 = closest to FXAA 3.9 visually and performance wise\",\n\t\t\t\"    //  _ = the lowest digit is directly related to performance\",\n\t\t\t\"    // _  = the highest digit is directly related to style\",\n\t\t\t\"    //\",\n\t\t\t\"    #define FXAA_QUALITY_PRESET 12\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"\",\n\t\t\t\"                           FXAA QUALITY - PRESETS\",\n\t\t\t\"\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                     FXAA QUALITY - MEDIUM DITHER PRESETS\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 10)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 3\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P1 3.0\",\n\t\t\t\"    #define FXAA_QUALITY_P2 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 11)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 4\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 3.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 12)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 5\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 13)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 6\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 14)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 7\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 15)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 8\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 12.0\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                     FXAA QUALITY - LOW DITHER PRESETS\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 20)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 3\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P1 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P2 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 21)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 4\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 22)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 5\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 23)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 6\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 24)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 7\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 3.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 25)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 8\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 26)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 9\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 27)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 10\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 28)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 11\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P10 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 29)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 12\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P2 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P10 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P11 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                     FXAA QUALITY - EXTREME QUALITY\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_QUALITY_PRESET == 39)\",\n\t\t\t\"    #define FXAA_QUALITY_PS 12\",\n\t\t\t\"    #define FXAA_QUALITY_P0 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P1 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P2 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P3 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P4 1.0\",\n\t\t\t\"    #define FXAA_QUALITY_P5 1.5\",\n\t\t\t\"    #define FXAA_QUALITY_P6 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P7 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P8 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P9 2.0\",\n\t\t\t\"    #define FXAA_QUALITY_P10 4.0\",\n\t\t\t\"    #define FXAA_QUALITY_P11 8.0\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"\",\n\t\t\t\"                                API PORTING\",\n\t\t\t\"\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\",\n\t\t\t\"    #define FxaaBool bool\",\n\t\t\t\"    #define FxaaDiscard discard\",\n\t\t\t\"    #define FxaaFloat float\",\n\t\t\t\"    #define FxaaFloat2 vec2\",\n\t\t\t\"    #define FxaaFloat3 vec3\",\n\t\t\t\"    #define FxaaFloat4 vec4\",\n\t\t\t\"    #define FxaaHalf float\",\n\t\t\t\"    #define FxaaHalf2 vec2\",\n\t\t\t\"    #define FxaaHalf3 vec3\",\n\t\t\t\"    #define FxaaHalf4 vec4\",\n\t\t\t\"    #define FxaaInt2 ivec2\",\n\t\t\t\"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\",\n\t\t\t\"    #define FxaaTex sampler2D\",\n\t\t\t\"#else\",\n\t\t\t\"    #define FxaaBool bool\",\n\t\t\t\"    #define FxaaDiscard clip(-1)\",\n\t\t\t\"    #define FxaaFloat float\",\n\t\t\t\"    #define FxaaFloat2 float2\",\n\t\t\t\"    #define FxaaFloat3 float3\",\n\t\t\t\"    #define FxaaFloat4 float4\",\n\t\t\t\"    #define FxaaHalf half\",\n\t\t\t\"    #define FxaaHalf2 half2\",\n\t\t\t\"    #define FxaaHalf3 half3\",\n\t\t\t\"    #define FxaaHalf4 half4\",\n\t\t\t\"    #define FxaaSat(x) saturate(x)\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_GLSL_100 == 1)\",\n\t\t\t\"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\",\n\t\t\t\"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_GLSL_120 == 1)\",\n\t\t\t\"    // Requires,\",\n\t\t\t\"    //  #version 120\",\n\t\t\t\"    // And at least,\",\n\t\t\t\"    //  #extension GL_EXT_gpu_shader4 : enable\",\n\t\t\t\"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\",\n\t\t\t\"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\",\n\t\t\t\"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\",\n\t\t\t\"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\",\n\t\t\t\"    #else\",\n\t\t\t\"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\",\n\t\t\t\"    #endif\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\n\t\t\t\"        // use #extension GL_ARB_gpu_shader5 : enable\",\n\t\t\t\"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n\t\t\t\"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n\t\t\t\"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n\t\t\t\"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_GLSL_130 == 1)\",\n\t\t\t\"    // Requires \\\"#version 130\\\" or better\",\n\t\t\t\"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\n\t\t\t\"        // use #extension GL_ARB_gpu_shader5 : enable\",\n\t\t\t\"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n\t\t\t\"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n\t\t\t\"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n\t\t\t\"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n\t\t\t\"    #endif\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_HLSL_3 == 1)\",\n\t\t\t\"    #define FxaaInt2 float2\",\n\t\t\t\"    #define FxaaTex sampler2D\",\n\t\t\t\"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_HLSL_4 == 1)\",\n\t\t\t\"    #define FxaaInt2 int2\",\n\t\t\t\"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n\t\t\t\"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n\t\t\t\"#endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"#if (FXAA_HLSL_5 == 1)\",\n\t\t\t\"    #define FxaaInt2 int2\",\n\t\t\t\"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n\t\t\t\"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n\t\t\t\"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n\t\t\t\"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\",\n\t\t\t\"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\",\n\t\t\t\"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\",\n\t\t\t\"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\",\n\t\t\t\"#else\",\n\t\t\t\"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"/*============================================================================\",\n\t\t\t\"\",\n\t\t\t\"                             FXAA3 QUALITY - PC\",\n\t\t\t\"\",\n\t\t\t\"============================================================================*/\",\n\t\t\t\"#if (FXAA_PC == 1)\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"FxaaFloat4 FxaaPixelShader(\",\n\t\t\t\"    //\",\n\t\t\t\"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n\t\t\t\"    // {xy} = center of pixel\",\n\t\t\t\"    FxaaFloat2 pos,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Used only for FXAA Console, and not used on the 360 version.\",\n\t\t\t\"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n\t\t\t\"    // {xy_} = upper left of pixel\",\n\t\t\t\"    // {_zw} = lower right of pixel\",\n\t\t\t\"    FxaaFloat4 fxaaConsolePosPos,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Input color texture.\",\n\t\t\t\"    // {rgb_} = color in linear or perceptual color space\",\n\t\t\t\"    // if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"    //     {__a} = luma in perceptual color space (not linear)\",\n\t\t\t\"    FxaaTex tex,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on the optimized 360 version of FXAA Console.\",\n\t\t\t\"    // For everything but 360, just use the same input here as for \\\"tex\\\".\",\n\t\t\t\"    // For 360, same texture, just alias with a 2nd sampler.\",\n\t\t\t\"    // This sampler needs to have an exponent bias of -1.\",\n\t\t\t\"    FxaaTex fxaaConsole360TexExpBiasNegOne,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on the optimized 360 version of FXAA Console.\",\n\t\t\t\"    // For everything but 360, just use the same input here as for \\\"tex\\\".\",\n\t\t\t\"    // For 360, same texture, just alias with a 3nd sampler.\",\n\t\t\t\"    // This sampler needs to have an exponent bias of -2.\",\n\t\t\t\"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // {x_} = 1.0/screenWidthInPixels\",\n\t\t\t\"    // {_y} = 1.0/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat2 fxaaQualityRcpFrame,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // This effects sub-pixel AA quality and inversely sharpness.\",\n\t\t\t\"    //   Where N ranges between,\",\n\t\t\t\"    //     N = 0.50 (default)\",\n\t\t\t\"    //     N = 0.33 (sharper)\",\n\t\t\t\"    // {x__} = -N/screenWidthInPixels\",\n\t\t\t\"    // {_y_} = -N/screenHeightInPixels\",\n\t\t\t\"    // {_z_} =  N/screenWidthInPixels\",\n\t\t\t\"    // {__w} =  N/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // Not used on 360, but used on PS3 and PC.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // {x__} = -2.0/screenWidthInPixels\",\n\t\t\t\"    // {_y_} = -2.0/screenHeightInPixels\",\n\t\t\t\"    // {_z_} =  2.0/screenWidthInPixels\",\n\t\t\t\"    // {__w} =  2.0/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\",\n\t\t\t\"    // This must be from a constant/uniform.\",\n\t\t\t\"    // {x__} =  8.0/screenWidthInPixels\",\n\t\t\t\"    // {_y_} =  8.0/screenHeightInPixels\",\n\t\t\t\"    // {_z_} = -4.0/screenWidthInPixels\",\n\t\t\t\"    // {__w} = -4.0/screenHeightInPixels\",\n\t\t\t\"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This used to be the FXAA_QUALITY_SUBPIX define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // Choose the amount of sub-pixel aliasing removal.\",\n\t\t\t\"    // This can effect sharpness.\",\n\t\t\t\"    //   1.00 - upper limit (softer)\",\n\t\t\t\"    //   0.75 - default amount of filtering\",\n\t\t\t\"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\",\n\t\t\t\"    //   0.25 - almost off\",\n\t\t\t\"    //   0.00 - completely off\",\n\t\t\t\"    FxaaFloat fxaaQualitySubpix,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // The minimum amount of local contrast required to apply algorithm.\",\n\t\t\t\"    //   0.333 - too little (faster)\",\n\t\t\t\"    //   0.250 - low quality\",\n\t\t\t\"    //   0.166 - default\",\n\t\t\t\"    //   0.125 - high quality\",\n\t\t\t\"    //   0.063 - overkill (slower)\",\n\t\t\t\"    FxaaFloat fxaaQualityEdgeThreshold,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Quality.\",\n\t\t\t\"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // Trims the algorithm from processing darks.\",\n\t\t\t\"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\",\n\t\t\t\"    //   0.0625 - high quality (faster)\",\n\t\t\t\"    //   0.0312 - visible limit (slower)\",\n\t\t\t\"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n\t\t\t\"    //   Likely want to set this to zero.\",\n\t\t\t\"    //   As colors that are mostly not-green\",\n\t\t\t\"    //   will appear very dark in the green channel!\",\n\t\t\t\"    //   Tune by looking at mostly non-green content,\",\n\t\t\t\"    //   then start at zero and increase until aliasing is a problem.\",\n\t\t\t\"    FxaaFloat fxaaQualityEdgeThresholdMin,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // This does not effect PS3, as this needs to be compiled in.\",\n\t\t\t\"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\",\n\t\t\t\"    //   Due to the PS3 being ALU bound,\",\n\t\t\t\"    //   there are only three safe values here: 2 and 4 and 8.\",\n\t\t\t\"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n\t\t\t\"    // For all other platforms can be a non-power of two.\",\n\t\t\t\"    //   8.0 is sharper (default!!!)\",\n\t\t\t\"    //   4.0 is softer\",\n\t\t\t\"    //   2.0 is really soft (good only for vector graphics inputs)\",\n\t\t\t\"    FxaaFloat fxaaConsoleEdgeSharpness,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // This does not effect PS3, as this needs to be compiled in.\",\n\t\t\t\"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\",\n\t\t\t\"    //   Due to the PS3 being ALU bound,\",\n\t\t\t\"    //   there are only two safe values here: 1/4 and 1/8.\",\n\t\t\t\"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n\t\t\t\"    // The console setting has a different mapping than the quality setting.\",\n\t\t\t\"    // Other platforms can use other values.\",\n\t\t\t\"    //   0.125 leaves less aliasing, but is softer (default!!!)\",\n\t\t\t\"    //   0.25 leaves more aliasing, and is sharper\",\n\t\t\t\"    FxaaFloat fxaaConsoleEdgeThreshold,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Only used on FXAA Console.\",\n\t\t\t\"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\",\n\t\t\t\"    // It is here now to allow easier tuning.\",\n\t\t\t\"    // Trims the algorithm from processing darks.\",\n\t\t\t\"    // The console setting has a different mapping than the quality setting.\",\n\t\t\t\"    // This only applies when FXAA_EARLY_EXIT is 1.\",\n\t\t\t\"    // This does not apply to PS3,\",\n\t\t\t\"    // PS3 was simplified to avoid more shader instructions.\",\n\t\t\t\"    //   0.06 - faster but more aliasing in darks\",\n\t\t\t\"    //   0.05 - default\",\n\t\t\t\"    //   0.04 - slower and less aliasing in darks\",\n\t\t\t\"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n\t\t\t\"    //   Likely want to set this to zero.\",\n\t\t\t\"    //   As colors that are mostly not-green\",\n\t\t\t\"    //   will appear very dark in the green channel!\",\n\t\t\t\"    //   Tune by looking at mostly non-green content,\",\n\t\t\t\"    //   then start at zero and increase until aliasing is a problem.\",\n\t\t\t\"    FxaaFloat fxaaConsoleEdgeThresholdMin,\",\n\t\t\t\"    //\",\n\t\t\t\"    // Extra constants for 360 FXAA Console only.\",\n\t\t\t\"    // Use zeros or anything else for other platforms.\",\n\t\t\t\"    // These must be in physical constant registers and NOT immediates.\",\n\t\t\t\"    // Immediates will result in compiler un-optimizing.\",\n\t\t\t\"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\",\n\t\t\t\"    FxaaFloat4 fxaaConsole360ConstDir\",\n\t\t\t\") {\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat2 posM;\",\n\t\t\t\"    posM.x = pos.x;\",\n\t\t\t\"    posM.y = pos.y;\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 1)\",\n\t\t\t\"        #if (FXAA_DISCARD == 0)\",\n\t\t\t\"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n\t\t\t\"            #if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"                #define lumaM rgbyM.w\",\n\t\t\t\"            #else\",\n\t\t\t\"                #define lumaM rgbyM.y\",\n\t\t\t\"            #endif\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\",\n\t\t\t\"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\",\n\t\t\t\"        #else\",\n\t\t\t\"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\",\n\t\t\t\"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #if (FXAA_DISCARD == 1)\",\n\t\t\t\"            #define lumaM luma4A.w\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #define lumaE luma4A.z\",\n\t\t\t\"        #define lumaS luma4A.x\",\n\t\t\t\"        #define lumaSE luma4A.y\",\n\t\t\t\"        #define lumaNW luma4B.w\",\n\t\t\t\"        #define lumaN luma4B.z\",\n\t\t\t\"        #define lumaW luma4B.x\",\n\t\t\t\"    #else\",\n\t\t\t\"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n\t\t\t\"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n\t\t\t\"            #define lumaM rgbyM.w\",\n\t\t\t\"        #else\",\n\t\t\t\"            #define lumaM rgbyM.y\",\n\t\t\t\"        #endif\",\n\t\t\t\"        #if (FXAA_GLSL_100 == 1)\",\n\t\t\t\"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #else\",\n\t\t\t\"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #endif\",\n\t\t\t\"    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat maxSM = max(lumaS, lumaM);\",\n\t\t\t\"    FxaaFloat minSM = min(lumaS, lumaM);\",\n\t\t\t\"    FxaaFloat maxESM = max(lumaE, maxSM);\",\n\t\t\t\"    FxaaFloat minESM = min(lumaE, minSM);\",\n\t\t\t\"    FxaaFloat maxWN = max(lumaN, lumaW);\",\n\t\t\t\"    FxaaFloat minWN = min(lumaN, lumaW);\",\n\t\t\t\"    FxaaFloat rangeMax = max(maxWN, maxESM);\",\n\t\t\t\"    FxaaFloat rangeMin = min(minWN, minESM);\",\n\t\t\t\"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\",\n\t\t\t\"    FxaaFloat range = rangeMax - rangeMin;\",\n\t\t\t\"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\",\n\t\t\t\"    FxaaBool earlyExit = range < rangeMaxClamped;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(earlyExit)\",\n\t\t\t\"        #if (FXAA_DISCARD == 1)\",\n\t\t\t\"            FxaaDiscard;\",\n\t\t\t\"        #else\",\n\t\t\t\"            return rgbyM;\",\n\t\t\t\"        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    #if (FXAA_GATHER4_ALPHA == 0)\",\n\t\t\t\"        #if (FXAA_GLSL_100 == 1)\",\n\t\t\t\"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #else\",\n\t\t\t\"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        #endif\",\n\t\t\t\"    #else\",\n\t\t\t\"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n\t\t\t\"    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat lumaNS = lumaN + lumaS;\",\n\t\t\t\"    FxaaFloat lumaWE = lumaW + lumaE;\",\n\t\t\t\"    FxaaFloat subpixRcpRange = 1.0/range;\",\n\t\t\t\"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\",\n\t\t\t\"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\",\n\t\t\t\"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat lumaNESE = lumaNE + lumaSE;\",\n\t\t\t\"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\",\n\t\t\t\"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\",\n\t\t\t\"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\",\n\t\t\t\"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\",\n\t\t\t\"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\",\n\t\t\t\"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\",\n\t\t\t\"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\",\n\t\t\t\"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\",\n\t\t\t\"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\",\n\t\t\t\"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\",\n\t\t\t\"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\",\n\t\t\t\"    FxaaBool horzSpan = edgeHorz >= edgeVert;\",\n\t\t\t\"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(!horzSpan) lumaN = lumaW;\",\n\t\t\t\"    if(!horzSpan) lumaS = lumaE;\",\n\t\t\t\"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\",\n\t\t\t\"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat gradientN = lumaN - lumaM;\",\n\t\t\t\"    FxaaFloat gradientS = lumaS - lumaM;\",\n\t\t\t\"    FxaaFloat lumaNN = lumaN + lumaM;\",\n\t\t\t\"    FxaaFloat lumaSS = lumaS + lumaM;\",\n\t\t\t\"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\",\n\t\t\t\"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\",\n\t\t\t\"    if(pairN) lengthSign = -lengthSign;\",\n\t\t\t\"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat2 posB;\",\n\t\t\t\"    posB.x = posM.x;\",\n\t\t\t\"    posB.y = posM.y;\",\n\t\t\t\"    FxaaFloat2 offNP;\",\n\t\t\t\"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\",\n\t\t\t\"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\",\n\t\t\t\"    if(!horzSpan) posB.x += lengthSign * 0.5;\",\n\t\t\t\"    if( horzSpan) posB.y += lengthSign * 0.5;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat2 posN;\",\n\t\t\t\"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\",\n\t\t\t\"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\",\n\t\t\t\"    FxaaFloat2 posP;\",\n\t\t\t\"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\",\n\t\t\t\"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\",\n\t\t\t\"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\",\n\t\t\t\"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\",\n\t\t\t\"    FxaaFloat subpixE = subpixC * subpixC;\",\n\t\t\t\"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(!pairN) lumaNN = lumaSS;\",\n\t\t\t\"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\",\n\t\t\t\"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\",\n\t\t\t\"    FxaaFloat subpixF = subpixD * subpixE;\",\n\t\t\t\"    FxaaBool lumaMLTZero = lumaMM < 0.0;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    lumaEndN -= lumaNN * 0.5;\",\n\t\t\t\"    lumaEndP -= lumaNN * 0.5;\",\n\t\t\t\"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\",\n\t\t\t\"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\",\n\t\t\t\"    FxaaBool doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\",\n\t\t\t\"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    if(doneNP) {\",\n\t\t\t\"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\",\n\t\t\t\"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\",\n\t\t\t\"        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\",\n\t\t\t\"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        #if (FXAA_QUALITY_PS > 3)\",\n\t\t\t\"        if(doneNP) {\",\n\t\t\t\"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"            doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"            doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\",\n\t\t\t\"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\",\n\t\t\t\"            doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\",\n\t\t\t\"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            #if (FXAA_QUALITY_PS > 4)\",\n\t\t\t\"            if(doneNP) {\",\n\t\t\t\"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\",\n\t\t\t\"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\",\n\t\t\t\"                doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\",\n\t\t\t\"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                #if (FXAA_QUALITY_PS > 5)\",\n\t\t\t\"                if(doneNP) {\",\n\t\t\t\"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\",\n\t\t\t\"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\",\n\t\t\t\"                    doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\",\n\t\t\t\"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    #if (FXAA_QUALITY_PS > 6)\",\n\t\t\t\"                    if(doneNP) {\",\n\t\t\t\"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\",\n\t\t\t\"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\",\n\t\t\t\"                        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\",\n\t\t\t\"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                        #if (FXAA_QUALITY_PS > 7)\",\n\t\t\t\"                        if(doneNP) {\",\n\t\t\t\"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                            doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                            doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\",\n\t\t\t\"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\",\n\t\t\t\"                            doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\",\n\t\t\t\"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    #if (FXAA_QUALITY_PS > 8)\",\n\t\t\t\"    if(doneNP) {\",\n\t\t\t\"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\",\n\t\t\t\"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\",\n\t\t\t\"        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\",\n\t\t\t\"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        #if (FXAA_QUALITY_PS > 9)\",\n\t\t\t\"        if(doneNP) {\",\n\t\t\t\"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"            doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"            doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\",\n\t\t\t\"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\",\n\t\t\t\"            doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\",\n\t\t\t\"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            #if (FXAA_QUALITY_PS > 10)\",\n\t\t\t\"            if(doneNP) {\",\n\t\t\t\"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\",\n\t\t\t\"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\",\n\t\t\t\"                doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\",\n\t\t\t\"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                #if (FXAA_QUALITY_PS > 11)\",\n\t\t\t\"                if(doneNP) {\",\n\t\t\t\"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\",\n\t\t\t\"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\",\n\t\t\t\"                    doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\",\n\t\t\t\"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    #if (FXAA_QUALITY_PS > 12)\",\n\t\t\t\"                    if(doneNP) {\",\n\t\t\t\"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n\t\t\t\"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n\t\t\t\"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n\t\t\t\"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n\t\t\t\"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n\t\t\t\"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n\t\t\t\"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\",\n\t\t\t\"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\",\n\t\t\t\"                        doneNP = (!doneN) || (!doneP);\",\n\t\t\t\"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\",\n\t\t\t\"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    }\",\n\t\t\t\"                    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                }\",\n\t\t\t\"                #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            }\",\n\t\t\t\"            #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        }\",\n\t\t\t\"        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    }\",\n\t\t\t\"    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                        }\",\n\t\t\t\"                        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                    }\",\n\t\t\t\"                    #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"                }\",\n\t\t\t\"                #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"            }\",\n\t\t\t\"            #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"        }\",\n\t\t\t\"        #endif\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    }\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat dstN = posM.x - posN.x;\",\n\t\t\t\"    FxaaFloat dstP = posP.x - posM.x;\",\n\t\t\t\"    if(!horzSpan) dstN = posM.y - posN.y;\",\n\t\t\t\"    if(!horzSpan) dstP = posP.y - posM.y;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\",\n\t\t\t\"    FxaaFloat spanLength = (dstP + dstN);\",\n\t\t\t\"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\",\n\t\t\t\"    FxaaFloat spanLengthRcp = 1.0/spanLength;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaBool directionN = dstN < dstP;\",\n\t\t\t\"    FxaaFloat dst = min(dstN, dstP);\",\n\t\t\t\"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\",\n\t\t\t\"    FxaaFloat subpixG = subpixF * subpixF;\",\n\t\t\t\"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\",\n\t\t\t\"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\",\n\t\t\t\"/*--------------------------------------------------------------------------*/\",\n\t\t\t\"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\",\n\t\t\t\"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\",\n\t\t\t\"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\",\n\t\t\t\"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\",\n\t\t\t\"    #if (FXAA_DISCARD == 1)\",\n\t\t\t\"        return FxaaTexTop(tex, posM);\",\n\t\t\t\"    #else\",\n\t\t\t\"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\",\n\t\t\t\"    #endif\",\n\t\t\t\"}\",\n\t\t\t\"/*==========================================================================*/\",\n\t\t\t\"#endif\",\n\t\t\t\"\",\n\t\t\t\"void main() {\",\n\t\t\t\"  gl_FragColor = FxaaPixelShader(\",\n\t\t\t\"    vUv,\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    tDiffuse,\",\n\t\t\t\"    tDiffuse,\",\n\t\t\t\"    tDiffuse,\",\n\t\t\t\"    resolution,\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    vec4(0.0),\",\n\t\t\t\"    0.75,\",\n\t\t\t\"    0.166,\",\n\t\t\t\"    0.0833,\",\n\t\t\t\"    0.0,\",\n\t\t\t\"    0.0,\",\n\t\t\t\"    0.0,\",\n\t\t\t\"    vec4(0.0)\",\n\t\t\t\"  );\",\n\t\t\t\"\",\n\t\t\t\"  // TODO avoid querying texture twice for same texel\",\n\t\t\t\"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.FXAAShader;\n});\n"]}