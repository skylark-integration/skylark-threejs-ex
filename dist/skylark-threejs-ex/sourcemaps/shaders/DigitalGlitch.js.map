{"version":3,"sources":["shaders/DigitalGlitch.js"],"names":["define","THREE","DigitalGlitch","uniforms","tDiffuse","value","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAyGV,OA5FAA,EAAMC,eAELC,UAECC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,MAClBE,KAASF,MAAO,GAChBG,QAAYH,MAAO,KACnBI,OAAWJ,MAAO,KAClBK,MAAUL,MAAO,KACjBM,QAAYN,MAAO,KACnBO,QAAYP,MAAO,KACnBQ,cAAkBR,MAAO,IACzBS,cAAkBT,MAAO,IACzBU,OAAWV,MAAO,MAGnBW,cAEC,oBACA,gBACA,cACA,8EACA,KACCC,KAAM,MAERC,gBACC,mBAEA,8BACA,2BAEA,wBACA,uBACA,sBACA,wBACA,wBACA,8BACA,8BACA,uBAEA,oBAGA,uBACA,sEACA,IAEA,gBACA,gBACA,oBACA,8CACA,8CAEA,oDACA,kEACA,uBACA,2CACA,UACA,eACA,8BACA,UACA,QACA,kEACA,uBACA,4BACA,UACA,eACA,2CACA,UACA,QACA,sCACA,sCAEA,4DACA,iDACA,yCACA,iDACA,qDAEA,6EACA,yCACA,MACA,WACA,8CACA,MACA,KAECD,KAAM,OAIFhB,EAAMC","file":"../../shaders/DigitalGlitch.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * RGB Shift Shader\n\t * Shifts red and blue channels from center in opposite directions\n\t * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n\t * by Tom Butterworth / http://kriss.cx/tom/\n\t *\n\t * amount: shift distance (1 is width of input)\n\t * angle: shift angle in radians\n\t */\n\n\tTHREE.DigitalGlitch = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null }, //diffuse texture\n\t\t\t\"tDisp\": { value: null }, //displacement texture for digital glitch squares\n\t\t\t\"byp\": { value: 0 }, //apply the glitch ?\n\t\t\t\"amount\": { value: 0.08 },\n\t\t\t\"angle\": { value: 0.02 },\n\t\t\t\"seed\": { value: 0.02 },\n\t\t\t\"seed_x\": { value: 0.02 }, //-1,1\n\t\t\t\"seed_y\": { value: 0.02 }, //-1,1\n\t\t\t\"distortion_x\": { value: 0.5 },\n\t\t\t\"distortion_y\": { value: 0.6 },\n\t\t\t\"col_s\": { value: 0.05 }\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"void main() {\",\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"}\"\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t\"uniform int byp;\", //should we apply the glitch ?\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tDisp;\",\n\n\t\t\t\"uniform float amount;\",\n\t\t\t\"uniform float angle;\",\n\t\t\t\"uniform float seed;\",\n\t\t\t\"uniform float seed_x;\",\n\t\t\t\"uniform float seed_y;\",\n\t\t\t\"uniform float distortion_x;\",\n\t\t\t\"uniform float distortion_y;\",\n\t\t\t\"uniform float col_s;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\n\t\t\t\"float rand(vec2 co){\",\n\t\t\t\"\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\t\t\t\"\tif(byp<1) {\",\n\t\t\t\"\t\tvec2 p = vUv;\",\n\t\t\t\"\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\",\n\t\t\t\"\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\",\n\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\t\"\t\tvec4 normal = texture2D (tDisp, p*seed*seed);\",\n\t\t\t\"\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\n\t\t\t\"\t\t\tif(seed_x>0.){\",\n\t\t\t\"\t\t\t\tp.y = 1. - (p.y + distortion_y);\",\n\t\t\t\"\t\t\t}\",\n\t\t\t\"\t\t\telse {\",\n\t\t\t\"\t\t\t\tp.y = distortion_y;\",\n\t\t\t\"\t\t\t}\",\n\t\t\t\"\t\t}\",\n\t\t\t\"\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\n\t\t\t\"\t\t\tif(seed_y>0.){\",\n\t\t\t\"\t\t\t\tp.x=distortion_x;\",\n\t\t\t\"\t\t\t}\",\n\t\t\t\"\t\t\telse {\",\n\t\t\t\"\t\t\t\tp.x = 1. - (p.x + distortion_x);\",\n\t\t\t\"\t\t\t}\",\n\t\t\t\"\t\t}\",\n\t\t\t\"\t\tp.x+=normal.x*seed_x*(seed/5.);\",\n\t\t\t\"\t\tp.y+=normal.y*seed_y*(seed/5.);\",\n\t\t\t//base from RGB shift shader\n\t\t\t\"\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\t\"\t\tvec4 cr = texture2D(tDiffuse, p + offset);\",\n\t\t\t\"\t\tvec4 cga = texture2D(tDiffuse, p);\",\n\t\t\t\"\t\tvec4 cb = texture2D(tDiffuse, p - offset);\",\n\t\t\t\"\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\t\t\t//add noise\n\t\t\t\"\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\n\t\t\t\"\t\tgl_FragColor = gl_FragColor+ snow;\",\n\t\t\t\"\t}\",\n\t\t\t\"\telse {\",\n\t\t\t\"\t\tgl_FragColor=texture2D (tDiffuse, vUv);\",\n\t\t\t\"\t}\",\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.DigitalGlitch;\n});\n"]}