{"version":3,"sources":["shaders/DigitalGlitch.js"],"names":["define","threex","DigitalGlitch","uniforms","tDiffuse","value","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,MAClBE,KAASF,MAAO,GAChBG,QAAYH,MAAO,KACnBI,OAAWJ,MAAO,KAClBK,MAAUL,MAAO,KACjBM,QAAYN,MAAO,KACnBO,QAAYP,MAAO,KACnBQ,cAAkBR,MAAO,IACzBS,cAAkBT,MAAO,IACzBU,OAAWV,MAAO,MAEtBW,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,mBACA,8BACA,2BACA,wBACA,uBACA,sBACA,wBACA,wBACA,8BACA,8BACA,uBACA,oBACA,uBACA,sEACA,IACA,gBACA,gBACA,oBACA,8CACA,8CACA,oDACA,kEACA,uBACA,2CACA,UACA,eACA,8BACA,UACA,QACA,kEACA,uBACA,4BACA,UACA,eACA,2CACA,UACA,QACA,sCACA,sCACA,4DACA,iDACA,yCACA,iDACA,qDACA,6EACA,yCACA,MACA,WACA,8CACA,MACA,KACFD,KAAK,OAEX,OAAQhB,EAAOkB,QAAQjB,cAAgBA","file":"../../shaders/DigitalGlitch.js","sourcesContent":["define([\n    \"../threex\"\n],function (threex) {\n    'use strict';\n    var DigitalGlitch = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'tDisp': { value: null },\n            'byp': { value: 0 },\n            'amount': { value: 0.08 },\n            'angle': { value: 0.02 },\n            'seed': { value: 0.02 },\n            'seed_x': { value: 0.02 },\n            'seed_y': { value: 0.02 },\n            'distortion_x': { value: 0.5 },\n            'distortion_y': { value: 0.6 },\n            'col_s': { value: 0.05 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform int byp;',\n            'uniform sampler2D tDiffuse;',\n            'uniform sampler2D tDisp;',\n            'uniform float amount;',\n            'uniform float angle;',\n            'uniform float seed;',\n            'uniform float seed_x;',\n            'uniform float seed_y;',\n            'uniform float distortion_x;',\n            'uniform float distortion_y;',\n            'uniform float col_s;',\n            'varying vec2 vUv;',\n            'float rand(vec2 co){',\n            '\\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\n            '}',\n            'void main() {',\n            '\\tif(byp<1) {',\n            '\\t\\tvec2 p = vUv;',\n            '\\t\\tfloat xs = floor(gl_FragCoord.x / 0.5);',\n            '\\t\\tfloat ys = floor(gl_FragCoord.y / 0.5);',\n            '\\t\\tvec4 normal = texture2D (tDisp, p*seed*seed);',\n            '\\t\\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {',\n            '\\t\\t\\tif(seed_x>0.){',\n            '\\t\\t\\t\\tp.y = 1. - (p.y + distortion_y);',\n            '\\t\\t\\t}',\n            '\\t\\t\\telse {',\n            '\\t\\t\\t\\tp.y = distortion_y;',\n            '\\t\\t\\t}',\n            '\\t\\t}',\n            '\\t\\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {',\n            '\\t\\t\\tif(seed_y>0.){',\n            '\\t\\t\\t\\tp.x=distortion_x;',\n            '\\t\\t\\t}',\n            '\\t\\t\\telse {',\n            '\\t\\t\\t\\tp.x = 1. - (p.x + distortion_x);',\n            '\\t\\t\\t}',\n            '\\t\\t}',\n            '\\t\\tp.x+=normal.x*seed_x*(seed/5.);',\n            '\\t\\tp.y+=normal.y*seed_y*(seed/5.);',\n            '\\t\\tvec2 offset = amount * vec2( cos(angle), sin(angle));',\n            '\\t\\tvec4 cr = texture2D(tDiffuse, p + offset);',\n            '\\t\\tvec4 cga = texture2D(tDiffuse, p);',\n            '\\t\\tvec4 cb = texture2D(tDiffuse, p - offset);',\n            '\\t\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\n            '\\t\\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);',\n            '\\t\\tgl_FragColor = gl_FragColor+ snow;',\n            '\\t}',\n            '\\telse {',\n            '\\t\\tgl_FragColor=texture2D (tDiffuse, vUv);',\n            '\\t}',\n            '}'\n        ].join('\\n')\n    };\n    return  threex.shaders.DigitalGlitch = DigitalGlitch ;\n});"]}