{"version":3,"sources":["shaders/FreiChenShader.js"],"names":["define","THREE","threex","FreiChenShader","uniforms","tDiffuse","value","aspect","Vector2","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,QAAYD,MAAO,IAAIL,EAAMO,QAAQ,IAAK,OAE9CC,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,oBACA,uBACA,qDACA,aACA,gIACA,gIACA,gIACA,gIACA,+DACA,+DACA,kNACA,kNACA,8MACA,kBACA,IACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,YACA,kBACA,iBACA,oCACA,sCACA,4EACA,4CACA,QACA,MACA,8BACA,gFACA,0BACA,MACA,qDACA,oEACA,+CACA,KACFD,KAAK,OAEX,OAAOR,EAAOU,QAAQT,eAAiBA","file":"../../shaders/FreiChenShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var FreiChenShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'aspect': { value: new THREE.Vector2(512, 512) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform sampler2D tDiffuse;',\r\n            'varying vec2 vUv;',\r\n            'uniform vec2 aspect;',\r\n            'vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);',\r\n            'mat3 G[9];',\r\n            'const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );',\r\n            'const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );',\r\n            'const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );',\r\n            'const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );',\r\n            'const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );',\r\n            'const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );',\r\n            'const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );',\r\n            'const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );',\r\n            'const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );',\r\n            'void main(void)',\r\n            '{',\r\n            '\\tG[0] = g0,',\r\n            '\\tG[1] = g1,',\r\n            '\\tG[2] = g2,',\r\n            '\\tG[3] = g3,',\r\n            '\\tG[4] = g4,',\r\n            '\\tG[5] = g5,',\r\n            '\\tG[6] = g6,',\r\n            '\\tG[7] = g7,',\r\n            '\\tG[8] = g8;',\r\n            '\\tmat3 I;',\r\n            '\\tfloat cnv[9];',\r\n            '\\tvec3 sample;',\r\n            '\\tfor (float i=0.0; i<3.0; i++) {',\r\n            '\\t\\tfor (float j=0.0; j<3.0; j++) {',\r\n            '\\t\\t\\tsample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;',\r\n            '\\t\\t\\tI[int(i)][int(j)] = length(sample);',\r\n            '\\t\\t}',\r\n            '\\t}',\r\n            '\\tfor (int i=0; i<9; i++) {',\r\n            '\\t\\tfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);',\r\n            '\\t\\tcnv[i] = dp3 * dp3;',\r\n            '\\t}',\r\n            '\\tfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);',\r\n            '\\tfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);',\r\n            '\\tgl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.FreiChenShader = FreiChenShader;\r\n});"]}