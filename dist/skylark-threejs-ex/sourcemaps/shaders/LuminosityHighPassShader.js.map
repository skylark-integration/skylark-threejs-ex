{"version":3,"sources":["shaders/LuminosityHighPassShader.js"],"names":["define","THREE","threex","LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,SAAU,qBACVC,UACIC,UAAcC,MAAO,MACrBC,qBAAyBD,MAAO,GAChCE,aAAiBF,MAAO,GACxBG,cAAkBH,MAAO,IAAIN,EAAMU,MAAM,IACzCC,gBAAoBL,MAAO,IAE/BM,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,6BACA,gCACA,qCACA,6BACA,oBACA,gBACA,6CACA,6CACA,sCACA,iEACA,2FACA,qDACA,KACFD,KAAK,OAEX,OAAOZ,EAAOc,QAAQb,yBAA2BA","file":"../../shaders/LuminosityHighPassShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var LuminosityHighPassShader = {\r\n        shaderID: 'luminosityHighPass',\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'luminosityThreshold': { value: 1 },\r\n            'smoothWidth': { value: 1 },\r\n            'defaultColor': { value: new THREE.Color(0) },\r\n            'defaultOpacity': { value: 0 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform sampler2D tDiffuse;',\r\n            'uniform vec3 defaultColor;',\r\n            'uniform float defaultOpacity;',\r\n            'uniform float luminosityThreshold;',\r\n            'uniform float smoothWidth;',\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\r\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\r\n            '\\tfloat v = dot( texel.xyz, luma );',\r\n            '\\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\r\n            '\\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\r\n            '\\tgl_FragColor = mix( outputColor, texel, alpha );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.LuminosityHighPassShader = LuminosityHighPassShader;\r\n});"]}