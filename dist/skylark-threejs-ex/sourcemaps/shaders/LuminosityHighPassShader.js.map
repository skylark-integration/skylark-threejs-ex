{"version":3,"sources":["shaders/LuminosityHighPassShader.js"],"names":["define","THREE","threex","LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,SAAU,qBACVC,UACIC,UAAcC,MAAO,MACrBC,qBAAyBD,MAAO,GAChCE,aAAiBF,MAAO,GACxBG,cAAkBH,MAAO,IAAIN,EAAMU,MAAM,IACzCC,gBAAoBL,MAAO,IAE/BM,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,6BACA,gCACA,qCACA,6BACA,oBACA,gBACA,6CACA,6CACA,sCACA,iEACA,2FACA,qDACA,KACFD,KAAK,OAEX,OAAOZ,EAAOc,QAAQb,yBAA2BA","file":"../../shaders/LuminosityHighPassShader.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var LuminosityHighPassShader = {\n        shaderID: 'luminosityHighPass',\n        uniforms: {\n            'tDiffuse': { value: null },\n            'luminosityThreshold': { value: 1 },\n            'smoothWidth': { value: 1 },\n            'defaultColor': { value: new THREE.Color(0) },\n            'defaultOpacity': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform vec3 defaultColor;',\n            'uniform float defaultOpacity;',\n            'uniform float luminosityThreshold;',\n            'uniform float smoothWidth;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\n            '\\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n            '\\tfloat v = dot( texel.xyz, luma );',\n            '\\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\n            '\\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\n            '\\tgl_FragColor = mix( outputColor, texel, alpha );',\n            '}'\n        ].join('\\n')\n    };\n    return threex.shaders.LuminosityHighPassShader = LuminosityHighPassShader;\n});"]}