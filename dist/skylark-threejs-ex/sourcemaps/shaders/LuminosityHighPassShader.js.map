{"version":3,"sources":["shaders/LuminosityHighPassShader.js"],"names":["define","THREE","LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAkEV,OA1DAA,EAAMC,0BAELC,SAAU,qBAEVC,UAECC,UAAcC,MAAO,MACrBC,qBAAyBD,MAAO,GAChCE,aAAiBF,MAAO,GACxBG,cAAkBH,MAAO,IAAIL,EAAMS,MAAO,IAC1CC,gBAAoBL,MAAO,IAI5BM,cAEC,oBAEA,gBAEA,cAEA,8EAEA,KAECC,KAAM,MAERC,gBAEC,8BACA,6BACA,gCACA,qCACA,6BAEA,oBAEA,gBAEA,6CAEA,6CAEA,sCAEA,iEAEA,2FAEA,qDAEA,KAECD,KAAM,OAIFZ,EAAMC","file":"../../shaders/LuminosityHighPassShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author bhouston / http://clara.io/\n\t *\n\t * Luminosity\n\t * http://en.wikipedia.org/wiki/Luminosity\n\t */\n\n\tTHREE.LuminosityHighPassShader = {\n\n\t\tshaderID: \"luminosityHighPass\",\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\t\"defaultColor\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec3 defaultColor;\",\n\t\t\t\"uniform float defaultOpacity;\",\n\t\t\t\"uniform float luminosityThreshold;\",\n\t\t\t\"uniform float smoothWidth;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\t\"\tfloat v = dot( texel.xyz, luma );\",\n\n\t\t\t\"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\t\"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\t\"\tgl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.LuminosityHighPassShader;\n});\n"]}