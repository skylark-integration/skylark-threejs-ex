{"version":3,"sources":["shaders/TriangleBlurShader.js"],"names":["define","THREE","uniforms","texture","value","delta","Vector2","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACI,mBACD,SAAUC,GACT,aAiCA,OA/BIC,UACIC,SAAaC,MAAO,MACpBC,OAAWD,MAAO,IAAIH,EAAMK,QAAQ,EAAG,KAE3CC,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,0BACA,6BACA,sBACA,oBACA,gBACA,8BACA,uBACA,gCACA,2DACA,yDACA,2CACA,qEACA,uBACA,MACA,kCACA,KACFD,KAAK","file":"../../shaders/TriangleBlurShader.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var TriangleBlurShader = {\n        uniforms: {\n            'texture': { value: null },\n            'delta': { value: new THREE.Vector2(1, 1) }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            '#define ITERATIONS 10.0',\n            'uniform sampler2D texture;',\n            'uniform vec2 delta;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec4 color = vec4( 0.0 );',\n            '\\tfloat total = 0.0;',\n            '\\tfloat offset = rand( vUv );',\n            '\\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {',\n            '\\t\\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;',\n            '\\t\\tfloat weight = 1.0 - abs( percent );',\n            '\\t\\tcolor += texture2D( texture, vUv + delta * percent ) * weight;',\n            '\\t\\ttotal += weight;',\n            '\\t}',\n            '\\tgl_FragColor = color / total;',\n            '}'\n        ].join('\\n')\n    };\n    return TriangleBlurShader ;\n});"]}