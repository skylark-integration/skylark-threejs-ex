{"version":3,"sources":["shaders/TriangleBlurShader.js"],"names":["define","THREE","TriangleBlurShader","uniforms","texture","value","delta","Vector2","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA0EV,OA7DAA,EAAMC,oBAELC,UAECC,SAAaC,MAAO,MACpBC,OAAWD,MAAO,IAAIJ,EAAMM,QAAS,EAAG,KAIzCC,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,oBAEA,0BAEA,6BACA,sBAEA,oBAEA,gBAEA,8BAEA,uBAIA,gCAEA,2DAEA,yDACA,2CAEA,qEACA,uBAEA,MAEA,kCAEA,KAECD,KAAM,OAIFR,EAAMC","file":"../../shaders/TriangleBlurShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Triangle blur shader\n\t * based on glfx.js triangle blur shader\n\t * https://github.com/evanw/glfx.js\n\t *\n\t * A basic blur filter, which convolves the image with a\n\t * pyramid filter. The pyramid filter is separable and is applied as two\n\t * perpendicular triangle filters.\n\t */\n\n\tTHREE.TriangleBlurShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"texture\": { value: null },\n\t\t\t\"delta\": { value: new THREE.Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#include <common>\",\n\n\t\t\t\"#define ITERATIONS 10.0\",\n\n\t\t\t\"uniform sampler2D texture;\",\n\t\t\t\"uniform vec2 delta;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 color = vec4( 0.0 );\",\n\n\t\t\t\"\tfloat total = 0.0;\",\n\n\t\t\t// randomize the lookup values to hide the fixed number of samples\n\n\t\t\t\"\tfloat offset = rand( vUv );\",\n\n\t\t\t\"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\n\n\t\t\t\"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\",\n\t\t\t\"\t\tfloat weight = 1.0 - abs( percent );\",\n\n\t\t\t\"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\",\n\t\t\t\"\t\ttotal += weight;\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor = color / total;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.TriangleBlurShader;\n});\n"]}