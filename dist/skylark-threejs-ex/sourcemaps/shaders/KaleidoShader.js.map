{"version":3,"sources":["shaders/KaleidoShader.js"],"names":["define","threex","KaleidoShader","uniforms","tDiffuse","value","sides","angle","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,GAClBE,OAAWF,MAAO,IAEtBG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,uBACA,uBACA,oBACA,gBACA,wBACA,yBACA,sCACA,8BACA,2BACA,gCACA,kCACA,+CACA,0BACA,KACFD,KAAK,OAEX,OAAQR,EAAOU,QAAQT,cAAgBA","file":"../../shaders/KaleidoShader.js","sourcesContent":["define([\n    \"../threex\"\n],function (threex) {\n    'use strict';\n    var KaleidoShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'sides': { value: 6 },\n            'angle': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float sides;',\n            'uniform float angle;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 p = vUv - 0.5;',\n            '\\tfloat r = length(p);',\n            '\\tfloat a = atan(p.y, p.x) + angle;',\n            '\\tfloat tau = 2. * 3.1416 ;',\n            '\\ta = mod(a, tau/sides);',\n            '\\ta = abs(a - tau/sides/2.) ;',\n            '\\tp = r * vec2(cos(a), sin(a));',\n            '\\tvec4 color = texture2D(tDiffuse, p + 0.5);',\n            '\\tgl_FragColor = color;',\n            '}'\n        ].join('\\n')\n    };\n    return  threex.shaders.KaleidoShader = KaleidoShader;\n});"]}