{"version":3,"sources":["shaders/KaleidoShader.js"],"names":["define","THREE","KaleidoShader","uniforms","tDiffuse","value","sides","angle","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA8DV,OAjDAA,EAAMC,eAELC,UAECC,UAAcC,MAAO,MACrBC,OAAWD,MAAO,GAClBE,OAAWF,MAAO,IAInBG,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,8BACA,uBACA,uBAEA,oBAEA,gBAEA,wBACA,yBACA,sCACA,8BACA,2BACA,gCACA,kCACA,+CACA,0BAEA,KAECD,KAAM,OAIFR,EAAMC","file":"../../shaders/KaleidoShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * Kaleidoscope Shader\n\t * Radial reflection around center point\n\t * Ported from: http://pixelshaders.com/editor/\n\t * by Toby Schachman / http://tobyschachman.com/\n\t *\n\t * sides: number of reflections\n\t * angle: initial angle in radians\n\t */\n\n\tTHREE.KaleidoShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"sides\": { value: 6.0 },\n\t\t\t\"angle\": { value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float sides;\",\n\t\t\t\"uniform float angle;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 p = vUv - 0.5;\",\n\t\t\t\"\tfloat r = length(p);\",\n\t\t\t\"\tfloat a = atan(p.y, p.x) + angle;\",\n\t\t\t\"\tfloat tau = 2. * 3.1416 ;\",\n\t\t\t\"\ta = mod(a, tau/sides);\",\n\t\t\t\"\ta = abs(a - tau/sides/2.) ;\",\n\t\t\t\"\tp = r * vec2(cos(a), sin(a));\",\n\t\t\t\"\tvec4 color = texture2D(tDiffuse, p + 0.5);\",\n\t\t\t\"\tgl_FragColor = color;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.KaleidoShader;\n});\n"]}