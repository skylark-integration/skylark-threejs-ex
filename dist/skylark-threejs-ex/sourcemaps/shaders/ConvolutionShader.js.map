{"version":3,"sources":["shaders/ConvolutionShader.js"],"names":["define","THREE","ConvolutionShader","defines","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","uniforms","tDiffuse","value","uImageIncrement","Vector2","cKernel","vertexShader","join","fragmentShader","buildKernel","sigma","gauss","x","Math","exp","i","values","sum","halfWidth","kernelSize","ceil","Array"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAuGV,OA9FAA,EAAMC,mBAELC,SAECC,kBAAqB,OACrBC,gBAAmB,MAIpBC,UAECC,UAAcC,MAAO,MACrBC,iBAAqBD,MAAO,IAAIP,EAAMS,QAAS,WAAa,IAC5DC,SAAaH,WAIdI,cAEC,gCAEA,oBAEA,gBAEA,wEACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,4CAEA,8BACA,gCAEA,oBAEA,gBAEA,2BACA,2CAEA,kDAEA,+DACA,qCAEA,MAEA,wBAEA,KAGCD,KAAM,MAERE,YAAa,SAAWC,GAIvB,SAASC,EAAOC,EAAGF,GAElB,OAAOG,KAAKC,KAASF,EAAIA,GAAQ,EAAMF,EAAQA,IAIhD,IAAIK,EAAGC,EAAQC,EAAKC,EAAgCC,EAAa,EAAIN,KAAKO,KAAc,EAARV,GAAgB,EAOhG,IALKS,EAF2C,KAEbA,EAFa,IAGhDD,EAAiC,IAAnBC,EAAa,GAE3BH,EAAS,IAAIK,MAAOF,GACpBF,EAAM,EACAF,EAAI,EAAGA,EAAII,IAAeJ,EAE/BC,EAAQD,GAAMJ,EAAOI,EAAIG,EAAWR,GACpCO,GAAOD,EAAQD,GAMhB,IAAMA,EAAI,EAAGA,EAAII,IAAeJ,EAAIC,EAAQD,IAAOE,EAEnD,OAAOD,IAMFrB,EAAMC","file":"../../shaders/ConvolutionShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Convolution shader\n\t * ported from o3d sample to WebGL / GLSL\n\t * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n\t */\n\n\tTHREE.ConvolutionShader = {\n\n\t\tdefines: {\n\n\t\t\t\"KERNEL_SIZE_FLOAT\": \"25.0\",\n\t\t\t\"KERNEL_SIZE_INT\": \"25\"\n\n\t\t},\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"uImageIncrement\": { value: new THREE.Vector2( 0.001953125, 0.0 ) },\n\t\t\t\"cKernel\": { value: [] }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform vec2 uImageIncrement;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float cKernel[ KERNEL_SIZE_INT ];\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform vec2 uImageIncrement;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 imageCoord = vUv;\",\n\t\t\t\"\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\",\n\n\t\t\t\"\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\",\n\n\t\t\t\"\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\",\n\t\t\t\"\t\timageCoord += uImageIncrement;\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor = sum;\",\n\n\t\t\t\"}\"\n\n\n\t\t].join( \"\\n\" ),\n\n\t\tbuildKernel: function ( sigma ) {\n\n\t\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\t\tfunction gauss( x, sigma ) {\n\n\t\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n\t\t\t}\n\n\t\t\tvar i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\t\t\thalfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\t\tvalues = new Array( kernelSize );\n\t\t\tsum = 0.0;\n\t\t\tfor ( i = 0; i < kernelSize; ++ i ) {\n\n\t\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\t\tsum += values[ i ];\n\n\t\t\t}\n\n\t\t\t// normalize the kernel\n\n\t\t\tfor ( i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\t\treturn values;\n\n\t\t}\n\n\t};\n\t\n\treturn THREE.ConvolutionShader;\n});"]}