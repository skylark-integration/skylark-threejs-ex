{"version":3,"sources":["shaders/WaterRefractionShader.js"],"names":["define","THREE","WaterRefractionShader","uniforms","color","value","time","tDiffuse","tDudv","textureMatrix","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAkGV,OA5FAA,EAAMC,uBAELC,UAECC,OACCC,MAAO,MAGRC,MACCD,MAAO,GAGRE,UACCF,MAAO,MAGRG,OACCH,MAAO,MAGRI,eACCJ,MAAO,OAKTK,cAEC,8BAEA,oBACA,8BAEA,gBAEA,cAEA,2DAEA,8EAEA,KAECC,KAAM,MAERC,gBAEC,sBACA,sBACA,8BACA,2BAEA,oBACA,8BAEA,kDAEA,sGAEA,IAEA,+CAEA,qHAEA,IAEA,gBAEA,6BACA,2BAIA,sGACA,oFACA,yFAIA,oCACA,wBAEA,+CAEA,iEAEA,KAECD,KAAM,OAGFV,EAAMC","file":"../../shaders/WaterRefractionShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\tTHREE.WaterRefractionShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"color\": {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t\"time\": {\n\t\t\t\tvalue: 0\n\t\t\t},\n\n\t\t\t\"tDiffuse\": {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t\"tDudv\": {\n\t\t\t\tvalue: null\n\t\t\t},\n\n\t\t\t\"textureMatrix\": {\n\t\t\t\tvalue: null\n\t\t\t}\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform mat4 textureMatrix;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"varying vec4 vUvRefraction;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\n\t\t\t\"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 color;\",\n\t\t\t\"uniform float time;\",\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tDudv;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\t\t\t\"varying vec4 vUvRefraction;\",\n\n\t\t\t\"float blendOverlay( float base, float blend ) {\",\n\n\t\t\t\"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"vec3 blendOverlay( vec3 base, vec3 blend ) {\",\n\n\t\t\t\"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\" float waveStrength = 0.1;\",\n\t\t\t\" float waveSpeed = 0.03;\",\n\n\t\t\t// simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n\n\t\t\t\"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\",\n\t\t\t\"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\",\n\t\t\t\"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\",\n\n\t\t\t// new uv coords\n\n\t\t\t\" vec4 uv = vec4( vUvRefraction );\",\n\t\t\t\" uv.xy += distortion;\",\n\n\t\t\t\"\tvec4 base = texture2DProj( tDiffuse, uv );\",\n\n\t\t\t\"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\t};\n\t\n\treturn THREE.WaterRefractionShader;\n});\n"]}