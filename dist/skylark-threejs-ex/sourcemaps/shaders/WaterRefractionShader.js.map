{"version":3,"sources":["shaders/WaterRefractionShader.js"],"names":["define","threex","WaterRefractionShader","uniforms","color","value","time","tDiffuse","tDudv","textureMatrix","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,OAAWC,MAAO,MAClBC,MAAUD,MAAO,GACjBE,UAAcF,MAAO,MACrBG,OAAWH,MAAO,MAClBI,eAAmBJ,MAAO,OAE9BK,cACI,8BACA,oBACA,8BACA,gBACA,cACA,2DACA,8EACA,KACFC,KAAK,MACPC,gBACI,sBACA,sBACA,8BACA,2BACA,oBACA,8BACA,kDACA,sGACA,IACA,+CACA,qHACA,IACA,gBACA,6BACA,2BACA,sGACA,oFACA,yFACA,oCACA,wBACA,+CACA,iEACA,KACFD,KAAK,OAEX,OAAQV,EAAOY,QAAQX,sBAAwBA","file":"../../shaders/WaterRefractionShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var WaterRefractionShader = {\r\n        uniforms: {\r\n            'color': { value: null },\r\n            'time': { value: 0 },\r\n            'tDiffuse': { value: null },\r\n            'tDudv': { value: null },\r\n            'textureMatrix': { value: null }\r\n        },\r\n        vertexShader: [\r\n            'uniform mat4 textureMatrix;',\r\n            'varying vec2 vUv;',\r\n            'varying vec4 vUvRefraction;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tvUvRefraction = textureMatrix * vec4( position, 1.0 );',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform vec3 color;',\r\n            'uniform float time;',\r\n            'uniform sampler2D tDiffuse;',\r\n            'uniform sampler2D tDudv;',\r\n            'varying vec2 vUv;',\r\n            'varying vec4 vUvRefraction;',\r\n            'float blendOverlay( float base, float blend ) {',\r\n            '\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\r\n            '}',\r\n            'vec3 blendOverlay( vec3 base, vec3 blend ) {',\r\n            '\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );',\r\n            '}',\r\n            'void main() {',\r\n            ' float waveStrength = 0.1;',\r\n            ' float waveSpeed = 0.03;',\r\n            '\\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;',\r\n            '\\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );',\r\n            '\\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;',\r\n            ' vec4 uv = vec4( vUvRefraction );',\r\n            ' uv.xy += distortion;',\r\n            '\\tvec4 base = texture2DProj( tDiffuse, uv );',\r\n            '\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return  threex.shaders.WaterRefractionShader = WaterRefractionShader;\r\n});"]}