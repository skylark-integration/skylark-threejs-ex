{"version":3,"sources":["shaders/NormalMapShader.js"],"names":["define","THREE","uniforms","heightMap","value","resolution","Vector2","scale","height","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,SAAUC,GAClC,aA4BA,OA1BIC,UACIC,WAAeC,MAAO,MACtBC,YAAgBD,MAAO,IAAIH,EAAMK,QAAQ,IAAK,MAC9CC,OAAWH,MAAO,IAAIH,EAAMK,QAAQ,EAAG,IACvCE,QAAYJ,MAAO,MAEvBK,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,wBACA,2BACA,+BACA,oBACA,gBACA,+CACA,kFACA,kFACA,sGACA,KACFD,KAAK","file":"../../shaders/NormalMapShader.js","sourcesContent":["define([\"skylark-threejs\"], function (THREE) {\n    'use strict';\n    var NormalMapShader = {\n        uniforms: {\n            'heightMap': { value: null },\n            'resolution': { value: new THREE.Vector2(512, 512) },\n            'scale': { value: new THREE.Vector2(1, 1) },\n            'height': { value: 0.05 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float height;',\n            'uniform vec2 resolution;',\n            'uniform sampler2D heightMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tfloat val = texture2D( heightMap, vUv ).x;',\n            '\\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;',\n            '\\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;',\n            '\\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return  NormalMapShader ;\n});"]}