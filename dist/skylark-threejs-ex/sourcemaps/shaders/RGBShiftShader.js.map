{"version":3,"sources":["shaders/RGBShiftShader.js"],"names":["define","THREE","RGBShiftShader","uniforms","tDiffuse","value","amount","angle","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA0DV,OA7CAA,EAAMC,gBAELC,UAECC,UAAcC,MAAO,MACrBC,QAAYD,MAAO,MACnBE,OAAWF,MAAO,IAInBG,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,8BACA,wBACA,uBAEA,oBAEA,gBAEA,0DACA,iDACA,yCACA,iDACA,mDAEA,KAECD,KAAM,OAIFR,EAAMC","file":"../../shaders/RGBShiftShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author felixturner / http://airtight.cc/\n\t *\n\t * RGB Shift Shader\n\t * Shifts red and blue channels from center in opposite directions\n\t * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n\t * by Tom Butterworth / http://kriss.cx/tom/\n\t *\n\t * amount: shift distance (1 is width of input)\n\t * angle: shift angle in radians\n\t */\n\n\tTHREE.RGBShiftShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"amount\": { value: 0.005 },\n\t\t\t\"angle\": { value: 0.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform float amount;\",\n\t\t\t\"uniform float angle;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\t\"\tvec4 cr = texture2D(tDiffuse, vUv + offset);\",\n\t\t\t\"\tvec4 cga = texture2D(tDiffuse, vUv);\",\n\t\t\t\"\tvec4 cb = texture2D(tDiffuse, vUv - offset);\",\n\t\t\t\"\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.RGBShiftShader;\n});\n"]}