{"version":3,"sources":["shaders/RGBShiftShader.js"],"names":["define","uniforms","tDiffuse","value","amount","angle","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aA4BA,OA1BIC,UACIC,UAAcC,MAAO,MACrBC,QAAYD,MAAO,MACnBE,OAAWF,MAAO,IAEtBG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,wBACA,uBACA,oBACA,gBACA,0DACA,iDACA,yCACA,iDACA,mDACA,KACFD,KAAK","file":"../../shaders/RGBShiftShader.js","sourcesContent":["define(function () {\n    'use strict';\n    var RGBShiftShader = {\n        uniforms: {\n            'tDiffuse': { value: null },\n            'amount': { value: 0.005 },\n            'angle': { value: 0 }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D tDiffuse;',\n            'uniform float amount;',\n            'uniform float angle;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '\\tvec2 offset = amount * vec2( cos(angle), sin(angle));',\n            '\\tvec4 cr = texture2D(tDiffuse, vUv + offset);',\n            '\\tvec4 cga = texture2D(tDiffuse, vUv);',\n            '\\tvec4 cb = texture2D(tDiffuse, vUv - offset);',\n            '\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\n            '}'\n        ].join('\\n')\n    };\n    return RGBShiftShader ;\n});"]}