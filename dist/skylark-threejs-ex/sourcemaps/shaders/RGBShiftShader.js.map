{"version":3,"sources":["shaders/RGBShiftShader.js"],"names":["define","threex","RGBShiftShader","uniforms","tDiffuse","value","amount","angle","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,QAAYD,MAAO,MACnBE,OAAWF,MAAO,IAEtBG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,wBACA,uBACA,oBACA,gBACA,0DACA,iDACA,yCACA,iDACA,mDACA,KACFD,KAAK,OAEX,OAAOR,EAAOU,QAAQT,eAAiBA","file":"../../shaders/RGBShiftShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var RGBShiftShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'amount': { value: 0.005 },\r\n            'angle': { value: 0 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform sampler2D tDiffuse;',\r\n            'uniform float amount;',\r\n            'uniform float angle;',\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvec2 offset = amount * vec2( cos(angle), sin(angle));',\r\n            '\\tvec4 cr = texture2D(tDiffuse, vUv + offset);',\r\n            '\\tvec4 cga = texture2D(tDiffuse, vUv);',\r\n            '\\tvec4 cb = texture2D(tDiffuse, vUv - offset);',\r\n            '\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.RGBShiftShader = RGBShiftShader;\r\n});"]}