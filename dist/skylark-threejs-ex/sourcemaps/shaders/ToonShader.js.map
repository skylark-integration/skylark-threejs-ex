{"version":3,"sources":["shaders/ToonShader.js"],"names":["define","THREE","ToonShader1","uniforms","uDirLightPos","value","Vector3","uDirLightColor","Color","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","ToonShader2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","ToonShaderHatching","ToonShaderDotted"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA4UV,OA/TAA,EAAMC,aAELC,UAECC,cAAkBC,MAAO,IAAIJ,EAAMK,SACnCC,gBAAoBF,MAAO,IAAIJ,EAAMO,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIJ,EAAMO,MAAO,SAEhDE,YAAgBL,MAAO,IAAIJ,EAAMO,MAAO,YAIzCG,cAEC,wBACA,yBAEA,gBAEA,8DACA,+DACA,kHAEA,kDAEA,iDACA,6DAEA,iDAEA,KAECC,KAAM,MAERC,gBAEC,2BAEA,6BACA,+BAEA,mCAEA,wBAEA,yBAEA,gBAEA,4FACA,2FAEA,qFACA,+CAEA,mEACA,8DACA,uCAEA,8BAEA,gEAEA,aAEA,0FAEA,IAEA,KAECD,KAAM,OAITX,EAAMa,aAELX,UAECC,cAAkBC,MAAO,IAAIJ,EAAMK,SACnCC,gBAAoBF,MAAO,IAAIJ,EAAMO,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIJ,EAAMO,MAAO,SAEhDE,YAAgBL,MAAO,IAAIJ,EAAMO,MAAO,WACxCO,aAAiBV,MAAO,IAAIJ,EAAMO,MAAO,UACzCQ,aAAiBX,MAAO,IAAIJ,EAAMO,MAAO,IACzCS,aAAiBZ,MAAO,IAAIJ,EAAMO,MAAO,IACzCU,aAAiBb,MAAO,IAAIJ,EAAMO,MAAO,KAI1CG,cAEC,wBAEA,gBAEA,8EACA,kDAEA,KAECC,KAAM,MAERC,gBAEC,2BACA,4BACA,4BACA,4BACA,4BAEA,6BACA,+BAEA,mCAEA,wBAEA,gBAEA,kFACA,wEAEA,4CAEA,wEAEA,gDAEA,MAEA,yEAEA,gDAEA,MAEA,KAECD,KAAM,OAITX,EAAMkB,oBAELhB,UAECC,cAAkBC,MAAO,IAAIJ,EAAMK,SACnCC,gBAAoBF,MAAO,IAAIJ,EAAMO,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIJ,EAAMO,MAAO,SAEhDE,YAAgBL,MAAO,IAAIJ,EAAMO,MAAO,WACxCO,aAAiBV,MAAO,IAAIJ,EAAMO,MAAO,IACzCQ,aAAiBX,MAAO,IAAIJ,EAAMO,MAAO,IACzCS,aAAiBZ,MAAO,IAAIJ,EAAMO,MAAO,IACzCU,aAAiBb,MAAO,IAAIJ,EAAMO,MAAO,KAI1CG,cAEC,wBAEA,gBAEA,8EACA,kDAEA,KAECC,KAAM,MAERC,gBAEC,2BACA,4BACA,4BACA,4BACA,4BAEA,6BACA,+BAEA,mCAEA,wBAEA,gBAEA,0FACA,2FAEA,4CAEA,2CAEA,gEAEA,iDAEA,QAEA,MAEA,2CAEA,+DAEA,iDAEA,QAEA,MAEA,2CAEA,qEAEA,iDAEA,QAEA,MAEA,6CAEA,qEAEA,iDAEA,MAEA,MAEA,KAECD,KAAM,OAITX,EAAMmB,kBAELjB,UAECC,cAAkBC,MAAO,IAAIJ,EAAMK,SACnCC,gBAAoBF,MAAO,IAAIJ,EAAMO,MAAO,WAE5CC,oBAAwBJ,MAAO,IAAIJ,EAAMO,MAAO,SAEhDE,YAAgBL,MAAO,IAAIJ,EAAMO,MAAO,WACxCO,aAAiBV,MAAO,IAAIJ,EAAMO,MAAO,KAI1CG,cAEC,wBAEA,gBAEA,8EACA,kDAEA,KAECC,KAAM,MAERC,gBAEC,2BACA,4BACA,4BACA,4BACA,4BAEA,6BACA,+BAEA,mCAEA,wBAEA,gBAEA,wFACA,yFAEA,0CAEA,yCAEA,gFAEA,iDAEA,QAEA,MAEA,2CAEA,4FAEA,iDAEA,QAEA,MAEA,KAECD,KAAM,OAIFX","file":"../../shaders/ToonShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Currently contains:\n\t *\n\t *\ttoon1\n\t *\ttoon2\n\t *\thatching\n\t *\tdotted\n\t */\n\n\tTHREE.ToonShader1 = {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\": { value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\t\t\t\"varying vec3 vRefract;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"\tvec3 I = worldPosition.xyz - cameraPosition;\",\n\t\t\t\"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"varying vec3 vRefract;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n\t\t\t\"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\t\"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\n\t\t\t\"\tintensity += length(lightWeighting) * 0.2;\",\n\n\t\t\t\"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\",\n\t\t\t\"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\n\t\t\t\"\tintensity = intensity * 0.2 + 0.3;\",\n\n\t\t\t\"\tif ( intensity < 0.50 ) {\",\n\n\t\t\t\"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\n\n\t\t\t\"\t} else {\",\n\n\t\t\t\"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n\tTHREE.ToonShader2 = {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\": { value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\t\"uLineColor1\": { value: new THREE.Color( 0x808080 ) },\n\t\t\t\"uLineColor2\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor3\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor4\": { value: new THREE.Color( 0x000000 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\t\t\t\"uniform vec3 uLineColor1;\",\n\t\t\t\"uniform vec3 uLineColor2;\",\n\t\t\t\"uniform vec3 uLineColor3;\",\n\t\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\n\t\t\t\"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n\n\t\t\t\"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\t\"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\n\n\t\t\t\"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\n\n\t\t\t\"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n\tTHREE.ToonShaderHatching = {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\":\t{ value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) },\n\t\t\t\"uLineColor1\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor2\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor3\": { value: new THREE.Color( 0x000000 ) },\n\t\t\t\"uLineColor4\": { value: new THREE.Color( 0x000000 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\t\t\t\"uniform vec3 uLineColor1;\",\n\t\t\t\"uniform vec3 uLineColor2;\",\n\t\t\t\"uniform vec3 uLineColor3;\",\n\t\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n\t\t\t\"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\t\"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\t\"\tif ( length(lightWeighting) < 1.00 ) {\",\n\n\t\t\t\"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\n\n\t\t\t\"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif ( length(lightWeighting) < 0.75 ) {\",\n\n\t\t\t\"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\n\n\t\t\t\"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif ( length(lightWeighting) < 0.50 ) {\",\n\n\t\t\t\"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n\n\t\t\t\"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif ( length(lightWeighting) < 0.3465 ) {\",\n\n\t\t\t\"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n\n\t\t\t\"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\n\tTHREE.ToonShaderDotted = {\n\n\t\tuniforms: {\n\n\t\t\t\"uDirLightPos\":\t{ value: new THREE.Vector3() },\n\t\t\t\"uDirLightColor\": { value: new THREE.Color( 0xeeeeee ) },\n\n\t\t\t\"uAmbientLightColor\": { value: new THREE.Color( 0x050505 ) },\n\n\t\t\t\"uBaseColor\": { value: new THREE.Color( 0xffffff ) },\n\t\t\t\"uLineColor1\": { value: new THREE.Color( 0x000000 ) }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 uBaseColor;\",\n\t\t\t\"uniform vec3 uLineColor1;\",\n\t\t\t\"uniform vec3 uLineColor2;\",\n\t\t\t\"uniform vec3 uLineColor3;\",\n\t\t\t\"uniform vec3 uLineColor4;\",\n\n\t\t\t\"uniform vec3 uDirLightPos;\",\n\t\t\t\"uniform vec3 uDirLightColor;\",\n\n\t\t\t\"uniform vec3 uAmbientLightColor;\",\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n\t\t\t\"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n\n\t\t\t\"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n\n\t\t\t\"if ( length(lightWeighting) < 1.00 ) {\",\n\n\t\t\t\"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\n\n\t\t\t\"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif ( length(lightWeighting) < 0.50 ) {\",\n\n\t\t\t\"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\n\n\t\t\t\"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE;\n});\n"]}