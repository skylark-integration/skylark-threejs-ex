{"version":3,"sources":["shaders/ToonShader.js"],"names":["define","THREE","threex","ToonShader1","uniforms","uDirLightPos","value","Vector3","uDirLightColor","Color","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","ToonShader2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","ToonShaderHatching","ToonShaderDotted","shaders","ToonShader"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,GACAC,UACIC,cAAkBC,MAAO,IAAIL,EAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,EAAMQ,MAAM,WAC3CC,oBAAwBJ,MAAO,IAAIL,EAAMQ,MAAM,SAC/CE,YAAgBL,MAAO,IAAIL,EAAMQ,MAAM,YAE3CG,cACI,wBACA,yBACA,gBACA,8DACA,+DACA,kHACA,kDACA,iDACA,6DACA,iDACA,KACFC,KAAK,MACPC,gBACI,2BACA,6BACA,+BACA,mCACA,wBACA,yBACA,gBACA,4FACA,2FACA,qFACA,+CACA,mEACA,8DACA,uCACA,8BACA,gEACA,aACA,0FACA,IACA,KACFD,KAAK,OAEPE,GACAX,UACIC,cAAkBC,MAAO,IAAIL,EAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,EAAMQ,MAAM,WAC3CC,oBAAwBJ,MAAO,IAAIL,EAAMQ,MAAM,SAC/CE,YAAgBL,MAAO,IAAIL,EAAMQ,MAAM,WACvCO,aAAiBV,MAAO,IAAIL,EAAMQ,MAAM,UACxCQ,aAAiBX,MAAO,IAAIL,EAAMQ,MAAM,IACxCS,aAAiBZ,MAAO,IAAIL,EAAMQ,MAAM,IACxCU,aAAiBb,MAAO,IAAIL,EAAMQ,MAAM,KAE5CG,cACI,wBACA,gBACA,8EACA,kDACA,KACFC,KAAK,MACPC,gBACI,2BACA,4BACA,4BACA,4BACA,4BACA,6BACA,+BACA,mCACA,wBACA,gBACA,kFACA,wEACA,4CACA,wEACA,gDACA,MACA,yEACA,gDACA,MACA,KACFD,KAAK,OAEPO,GACAhB,UACIC,cAAkBC,MAAO,IAAIL,EAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,EAAMQ,MAAM,WAC3CC,oBAAwBJ,MAAO,IAAIL,EAAMQ,MAAM,SAC/CE,YAAgBL,MAAO,IAAIL,EAAMQ,MAAM,WACvCO,aAAiBV,MAAO,IAAIL,EAAMQ,MAAM,IACxCQ,aAAiBX,MAAO,IAAIL,EAAMQ,MAAM,IACxCS,aAAiBZ,MAAO,IAAIL,EAAMQ,MAAM,IACxCU,aAAiBb,MAAO,IAAIL,EAAMQ,MAAM,KAE5CG,cACI,wBACA,gBACA,8EACA,kDACA,KACFC,KAAK,MACPC,gBACI,2BACA,4BACA,4BACA,4BACA,4BACA,6BACA,+BACA,mCACA,wBACA,gBACA,0FACA,2FACA,4CACA,2CACA,gEACA,iDACA,QACA,MACA,2CACA,+DACA,iDACA,QACA,MACA,2CACA,qEACA,iDACA,QACA,MACA,6CACA,qEACA,iDACA,MACA,MACA,KACFD,KAAK,OAEPQ,GACAjB,UACIC,cAAkBC,MAAO,IAAIL,EAAMM,SACnCC,gBAAoBF,MAAO,IAAIL,EAAMQ,MAAM,WAC3CC,oBAAwBJ,MAAO,IAAIL,EAAMQ,MAAM,SAC/CE,YAAgBL,MAAO,IAAIL,EAAMQ,MAAM,WACvCO,aAAiBV,MAAO,IAAIL,EAAMQ,MAAM,KAE5CG,cACI,wBACA,gBACA,8EACA,kDACA,KACFC,KAAK,MACPC,gBACI,2BACA,4BACA,4BACA,4BACA,4BACA,6BACA,+BACA,mCACA,wBACA,gBACA,wFACA,yFACA,0CACA,yCACA,gFACA,iDACA,QACA,MACA,2CACA,4FACA,iDACA,QACA,MACA,KACFD,KAAK,OAEX,OAAOX,EAAOoB,QAAQC,YAClBpB,YAAAA,EACAY,YAAAA,EACAK,mBAAAA,EACAC,iBAAAA","file":"../../shaders/ToonShader.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var ToonShader1 = {\r\n        uniforms: {\r\n            'uDirLightPos': { value: new THREE.Vector3() },\r\n            'uDirLightColor': { value: new THREE.Color(15658734) },\r\n            'uAmbientLightColor': { value: new THREE.Color(328965) },\r\n            'uBaseColor': { value: new THREE.Color(16777215) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec3 vNormal;',\r\n            'varying vec3 vRefract;',\r\n            'void main() {',\r\n            '\\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n            '\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\r\n            '\\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );',\r\n            '\\tvNormal = normalize( normalMatrix * normal );',\r\n            '\\tvec3 I = worldPosition.xyz - cameraPosition;',\r\n            '\\tvRefract = refract( normalize( I ), worldNormal, 1.02 );',\r\n            '\\tgl_Position = projectionMatrix * mvPosition;',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform vec3 uBaseColor;',\r\n            'uniform vec3 uDirLightPos;',\r\n            'uniform vec3 uDirLightColor;',\r\n            'uniform vec3 uAmbientLightColor;',\r\n            'varying vec3 vNormal;',\r\n            'varying vec3 vRefract;',\r\n            'void main() {',\r\n            '\\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);',\r\n            '\\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;',\r\n            '\\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );',\r\n            '\\tintensity += length(lightWeighting) * 0.2;',\r\n            '\\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );',\r\n            '\\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );',\r\n            '\\tintensity = intensity * 0.2 + 0.3;',\r\n            '\\tif ( intensity < 0.50 ) {',\r\n            '\\t\\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );',\r\n            '\\t} else {',\r\n            '\\t\\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );',\r\n            '}',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    var ToonShader2 = {\r\n        uniforms: {\r\n            'uDirLightPos': { value: new THREE.Vector3() },\r\n            'uDirLightColor': { value: new THREE.Color(15658734) },\r\n            'uAmbientLightColor': { value: new THREE.Color(328965) },\r\n            'uBaseColor': { value: new THREE.Color(15658734) },\r\n            'uLineColor1': { value: new THREE.Color(8421504) },\r\n            'uLineColor2': { value: new THREE.Color(0) },\r\n            'uLineColor3': { value: new THREE.Color(0) },\r\n            'uLineColor4': { value: new THREE.Color(0) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec3 vNormal;',\r\n            'void main() {',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '\\tvNormal = normalize( normalMatrix * normal );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform vec3 uBaseColor;',\r\n            'uniform vec3 uLineColor1;',\r\n            'uniform vec3 uLineColor2;',\r\n            'uniform vec3 uLineColor3;',\r\n            'uniform vec3 uLineColor4;',\r\n            'uniform vec3 uDirLightPos;',\r\n            'uniform vec3 uDirLightColor;',\r\n            'uniform vec3 uAmbientLightColor;',\r\n            'varying vec3 vNormal;',\r\n            'void main() {',\r\n            '\\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);',\r\n            '\\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);',\r\n            '\\tgl_FragColor = vec4( uBaseColor, 1.0 );',\r\n            '\\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {',\r\n            '\\t\\tgl_FragColor *= vec4( uLineColor1, 1.0 );',\r\n            '\\t}',\r\n            '\\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {',\r\n            '\\t\\tgl_FragColor *= vec4( uLineColor2, 1.0 );',\r\n            '\\t}',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    var ToonShaderHatching = {\r\n        uniforms: {\r\n            'uDirLightPos': { value: new THREE.Vector3() },\r\n            'uDirLightColor': { value: new THREE.Color(15658734) },\r\n            'uAmbientLightColor': { value: new THREE.Color(328965) },\r\n            'uBaseColor': { value: new THREE.Color(16777215) },\r\n            'uLineColor1': { value: new THREE.Color(0) },\r\n            'uLineColor2': { value: new THREE.Color(0) },\r\n            'uLineColor3': { value: new THREE.Color(0) },\r\n            'uLineColor4': { value: new THREE.Color(0) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec3 vNormal;',\r\n            'void main() {',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '\\tvNormal = normalize( normalMatrix * normal );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform vec3 uBaseColor;',\r\n            'uniform vec3 uLineColor1;',\r\n            'uniform vec3 uLineColor2;',\r\n            'uniform vec3 uLineColor3;',\r\n            'uniform vec3 uLineColor4;',\r\n            'uniform vec3 uDirLightPos;',\r\n            'uniform vec3 uDirLightColor;',\r\n            'uniform vec3 uAmbientLightColor;',\r\n            'varying vec3 vNormal;',\r\n            'void main() {',\r\n            '\\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);',\r\n            '\\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;',\r\n            '\\tgl_FragColor = vec4( uBaseColor, 1.0 );',\r\n            '\\tif ( length(lightWeighting) < 1.00 ) {',\r\n            '\\t\\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {',\r\n            '\\t\\t\\tgl_FragColor = vec4( uLineColor1, 1.0 );',\r\n            '\\t\\t}',\r\n            '\\t}',\r\n            '\\tif ( length(lightWeighting) < 0.75 ) {',\r\n            '\\t\\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {',\r\n            '\\t\\t\\tgl_FragColor = vec4( uLineColor2, 1.0 );',\r\n            '\\t\\t}',\r\n            '\\t}',\r\n            '\\tif ( length(lightWeighting) < 0.50 ) {',\r\n            '\\t\\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {',\r\n            '\\t\\t\\tgl_FragColor = vec4( uLineColor3, 1.0 );',\r\n            '\\t\\t}',\r\n            '\\t}',\r\n            '\\tif ( length(lightWeighting) < 0.3465 ) {',\r\n            '\\t\\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {',\r\n            '\\t\\t\\tgl_FragColor = vec4( uLineColor4, 1.0 );',\r\n            '\\t}',\r\n            '\\t}',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    var ToonShaderDotted = {\r\n        uniforms: {\r\n            'uDirLightPos': { value: new THREE.Vector3() },\r\n            'uDirLightColor': { value: new THREE.Color(15658734) },\r\n            'uAmbientLightColor': { value: new THREE.Color(328965) },\r\n            'uBaseColor': { value: new THREE.Color(16777215) },\r\n            'uLineColor1': { value: new THREE.Color(0) }\r\n        },\r\n        vertexShader: [\r\n            'varying vec3 vNormal;',\r\n            'void main() {',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '\\tvNormal = normalize( normalMatrix * normal );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform vec3 uBaseColor;',\r\n            'uniform vec3 uLineColor1;',\r\n            'uniform vec3 uLineColor2;',\r\n            'uniform vec3 uLineColor3;',\r\n            'uniform vec3 uLineColor4;',\r\n            'uniform vec3 uDirLightPos;',\r\n            'uniform vec3 uDirLightColor;',\r\n            'uniform vec3 uAmbientLightColor;',\r\n            'varying vec3 vNormal;',\r\n            'void main() {',\r\n            'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);',\r\n            'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;',\r\n            'gl_FragColor = vec4( uBaseColor, 1.0 );',\r\n            'if ( length(lightWeighting) < 1.00 ) {',\r\n            '\\t\\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {',\r\n            '\\t\\t\\tgl_FragColor = vec4( uLineColor1, 1.0 );',\r\n            '\\t\\t}',\r\n            '\\t}',\r\n            '\\tif ( length(lightWeighting) < 0.50 ) {',\r\n            '\\t\\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {',\r\n            '\\t\\t\\tgl_FragColor = vec4( uLineColor1, 1.0 );',\r\n            '\\t\\t}',\r\n            '\\t}',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.ToonShader = {\r\n        ToonShader1,\r\n        ToonShader2,\r\n        ToonShaderHatching,\r\n        ToonShaderDotted\r\n    };\r\n});"]}