{"version":3,"sources":["shaders/BrightnessContrastShader.js"],"names":["define","threex","BrightnessContrastShader","uniforms","tDiffuse","value","brightness","contrast","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,YAAgBD,MAAO,GACvBE,UAAcF,MAAO,IAEzBG,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,8BACA,4BACA,0BACA,oBACA,gBACA,+CACA,oCACA,0BACA,4EACA,aACA,4EACA,MACA,KACFD,KAAK,OAEX,OAAOR,EAAOU,QAAQT,yBAA2BA","file":"../../shaders/BrightnessContrastShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var BrightnessContrastShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'brightness': { value: 0 },\r\n            'contrast': { value: 0 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'uniform sampler2D tDiffuse;',\r\n            'uniform float brightness;',\r\n            'uniform float contrast;',\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tgl_FragColor = texture2D( tDiffuse, vUv );',\r\n            '\\tgl_FragColor.rgb += brightness;',\r\n            '\\tif (contrast > 0.0) {',\r\n            '\\t\\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;',\r\n            '\\t} else {',\r\n            '\\t\\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;',\r\n            '\\t}',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return threex.shaders.BrightnessContrastShader = BrightnessContrastShader;\r\n});"]}