{"version":3,"sources":["shaders/ToneMapShader.js"],"names":["define","threex","ToneMapShader","uniforms","tDiffuse","value","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","vertexShader","join","fragmentShader","shaders"],"mappings":";;;;;;;AAAAA,QACI,aACF,SAAUC,GACR,aACA,IAAIC,GACAC,UACIC,UAAcC,MAAO,MACrBC,kBAAsBD,MAAO,GAC7BE,cAAkBF,MAAO,MACzBG,cAAkBH,MAAO,IACzBI,cAAkBJ,MAAO,KACzBK,YAAgBL,MAAO,KAE3BM,cACI,oBACA,gBACA,cACA,8EACA,KACFC,KAAK,MACPC,gBACI,oBACA,8BACA,oBACA,4BACA,8BACA,8BACA,2BACA,oCACA,QACA,oCACA,SACA,gCACA,6BACA,iEACA,UACA,wCACA,WACA,2DACA,gFACA,qHACA,oCACA,IACA,gBACA,6CACA,0DACA,KACFD,KAAK,OAEX,OAAQX,EAAOa,QAAQZ,cAAgBA","file":"../../shaders/ToneMapShader.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    var ToneMapShader = {\r\n        uniforms: {\r\n            'tDiffuse': { value: null },\r\n            'averageLuminance': { value: 1 },\r\n            'luminanceMap': { value: null },\r\n            'maxLuminance': { value: 16 },\r\n            'minLuminance': { value: 0.01 },\r\n            'middleGrey': { value: 0.6 }\r\n        },\r\n        vertexShader: [\r\n            'varying vec2 vUv;',\r\n            'void main() {',\r\n            '\\tvUv = uv;',\r\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            '#include <common>',\r\n            'uniform sampler2D tDiffuse;',\r\n            'varying vec2 vUv;',\r\n            'uniform float middleGrey;',\r\n            'uniform float minLuminance;',\r\n            'uniform float maxLuminance;',\r\n            '#ifdef ADAPTED_LUMINANCE',\r\n            '\\tuniform sampler2D luminanceMap;',\r\n            '#else',\r\n            '\\tuniform float averageLuminance;',\r\n            '#endif',\r\n            'vec3 ToneMap( vec3 vColor ) {',\r\n            '\\t#ifdef ADAPTED_LUMINANCE',\r\n            '\\t\\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;',\r\n            '\\t#else',\r\n            '\\t\\tfloat fLumAvg = averageLuminance;',\r\n            '\\t#endif',\r\n            '\\tfloat fLumPixel = linearToRelativeLuminance( vColor );',\r\n            '\\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );',\r\n            '\\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);',\r\n            '\\treturn fLumCompressed * vColor;',\r\n            '}',\r\n            'void main() {',\r\n            '\\tvec4 texel = texture2D( tDiffuse, vUv );',\r\n            '\\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n    return  threex.shaders.ToneMapShader = ToneMapShader;\r\n});"]}