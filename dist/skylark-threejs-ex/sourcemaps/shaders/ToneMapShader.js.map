{"version":3,"sources":["shaders/ToneMapShader.js"],"names":["define","THREE","ToneMapShader","uniforms","tDiffuse","value","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA+EV,OAxEAA,EAAMC,eAELC,UAECC,UAAcC,MAAO,MACrBC,kBAAsBD,MAAO,GAC7BE,cAAkBF,MAAO,MACzBG,cAAkBH,MAAO,IACzBI,cAAkBJ,MAAO,KACzBK,YAAgBL,MAAO,KAGxBM,cAEC,oBAEA,gBAEA,cACA,8EAEA,KAECC,KAAM,MAERC,gBAEC,oBAEA,8BAEA,oBAEA,4BACA,8BACA,8BACA,2BACA,oCACA,QACA,oCACA,SAEA,gCACA,6BAEA,iEACA,UACA,wCACA,WAGA,2DAGA,gFAEA,qHACA,oCACA,IAEA,gBAEA,6CAEA,0DAEA,KAECD,KAAM,OAIFX,EAAMC","file":"../../shaders/ToneMapShader.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author miibond\n\t *\n\t * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n\t */\n\n\tTHREE.ToneMapShader = {\n\n\t\tuniforms: {\n\n\t\t\t\"tDiffuse\": { value: null },\n\t\t\t\"averageLuminance\": { value: 1.0 },\n\t\t\t\"luminanceMap\": { value: null },\n\t\t\t\"maxLuminance\": { value: 16.0 },\n\t\t\t\"minLuminance\": { value: 0.01 },\n\t\t\t\"middleGrey\": { value: 0.6 }\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvUv = uv;\",\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#include <common>\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform float middleGrey;\",\n\t\t\t\"uniform float minLuminance;\",\n\t\t\t\"uniform float maxLuminance;\",\n\t\t\t\"#ifdef ADAPTED_LUMINANCE\",\n\t\t\t\"\tuniform sampler2D luminanceMap;\",\n\t\t\t\"#else\",\n\t\t\t\"\tuniform float averageLuminance;\",\n\t\t\t\"#endif\",\n\n\t\t\t\"vec3 ToneMap( vec3 vColor ) {\",\n\t\t\t\"\t#ifdef ADAPTED_LUMINANCE\",\n\t\t\t// Get the calculated average luminance\n\t\t\t\"\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\n\t\t\t\"\t#else\",\n\t\t\t\"\t\tfloat fLumAvg = averageLuminance;\",\n\t\t\t\"\t#endif\",\n\n\t\t\t// Calculate the luminance of the current pixel\n\t\t\t\"\tfloat fLumPixel = linearToRelativeLuminance( vColor );\",\n\n\t\t\t// Apply the modified operator (Eq. 4)\n\t\t\t\"\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\",\n\n\t\t\t\"\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\n\t\t\t\"\treturn fLumCompressed * vColor;\",\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\n\n\t\t\t\"}\"\n\n\t\t].join( \"\\n\" )\n\n\t};\n\t\n\treturn THREE.ToneMapShader;\n});\n"]}