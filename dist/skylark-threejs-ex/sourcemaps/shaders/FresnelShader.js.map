{"version":3,"sources":["shaders/FresnelShader.js"],"names":["define","uniforms","mRefractionRatio","value","mFresnelBias","mFresnelPower","mFresnelScale","tCube","vertexShader","join","fragmentShader"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aA6CA,OA3CIC,UACIC,kBAAsBC,MAAO,MAC7BC,cAAkBD,MAAO,IACzBE,eAAmBF,MAAO,GAC1BG,eAAmBH,MAAO,GAC1BI,OAAWJ,MAAO,OAEtBK,cACI,kCACA,8BACA,+BACA,+BACA,yBACA,4BACA,mCACA,gBACA,+DACA,8DACA,iHACA,iDACA,0CACA,4EACA,mFACA,mFACA,uHACA,iDACA,KACFC,KAAK,MACPC,gBACI,6BACA,yBACA,4BACA,mCACA,gBACA,kFACA,uCACA,uFACA,uFACA,uFACA,gGACA,KACFD,KAAK","file":"../../shaders/FresnelShader.js","sourcesContent":["define(function () {\n    'use strict';\n    var FresnelShader = {\n        uniforms: {\n            'mRefractionRatio': { value: 1.02 },\n            'mFresnelBias': { value: 0.1 },\n            'mFresnelPower': { value: 2 },\n            'mFresnelScale': { value: 1 },\n            'tCube': { value: null }\n        },\n        vertexShader: [\n            'uniform float mRefractionRatio;',\n            'uniform float mFresnelBias;',\n            'uniform float mFresnelScale;',\n            'uniform float mFresnelPower;',\n            'varying vec3 vReflect;',\n            'varying vec3 vRefract[3];',\n            'varying float vReflectionFactor;',\n            'void main() {',\n            '\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '\\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n            '\\tvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );',\n            '\\tvec3 I = worldPosition.xyz - cameraPosition;',\n            '\\tvReflect = reflect( I, worldNormal );',\n            '\\tvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );',\n            '\\tvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );',\n            '\\tvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );',\n            '\\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );',\n            '\\tgl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform samplerCube tCube;',\n            'varying vec3 vReflect;',\n            'varying vec3 vRefract[3];',\n            'varying float vReflectionFactor;',\n            'void main() {',\n            '\\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );',\n            '\\tvec4 refractedColor = vec4( 1.0 );',\n            '\\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;',\n            '\\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;',\n            '\\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;',\n            '\\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );',\n            '}'\n        ].join('\\n')\n    };\n    return FresnelShader;\n});"]}