{"version":3,"sources":["interactive/SelectionBox.js"],"names":["define","THREE","threex","SelectionBox","frustum","Frustum","center","Vector3","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","vecFarTopLeft","vecFarTopRight","vecFarDownRight","vecFarDownLeft","vectemp1","vectemp2","vectemp3","camera","scene","deep","this","startPoint","endPoint","collection","Number","MAX_VALUE","prototype","select","updateFrustum","searchChildInFrustum","updateProjectionMatrix","updateMatrixWorld","isPerspectiveCamera","copy","x","Math","min","y","max","position","set","unproject","sub","normalize","multiplyScalar","add","planes","setFromCoplanarPoints","normal","isOrthographicCamera","equals","addScalar","EPSILON","left","top","right","down","console","error","object","isMesh","isLine","isPoints","undefined","material","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","matrixWorld","containsPoint","push","children","length","interactive"],"mappings":"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","file":"../../interactive/SelectionBox.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var SelectionBox = function () {\r\n        var frustum = new THREE.Frustum();\r\n        var center = new THREE.Vector3();\r\n        var tmpPoint = new THREE.Vector3();\r\n        var vecNear = new THREE.Vector3();\r\n        var vecTopLeft = new THREE.Vector3();\r\n        var vecTopRight = new THREE.Vector3();\r\n        var vecDownRight = new THREE.Vector3();\r\n        var vecDownLeft = new THREE.Vector3();\r\n        var vecFarTopLeft = new THREE.Vector3();\r\n        var vecFarTopRight = new THREE.Vector3();\r\n        var vecFarDownRight = new THREE.Vector3();\r\n        var vecFarDownLeft = new THREE.Vector3();\r\n        var vectemp1 = new THREE.Vector3();\r\n        var vectemp2 = new THREE.Vector3();\r\n        var vectemp3 = new THREE.Vector3();\r\n        function SelectionBox(camera, scene, deep) {\r\n            this.camera = camera;\r\n            this.scene = scene;\r\n            this.startPoint = new THREE.Vector3();\r\n            this.endPoint = new THREE.Vector3();\r\n            this.collection = [];\r\n            this.deep = deep || Number.MAX_VALUE;\r\n        }\r\n        SelectionBox.prototype.select = function (startPoint, endPoint) {\r\n            this.startPoint = startPoint || this.startPoint;\r\n            this.endPoint = endPoint || this.endPoint;\r\n            this.collection = [];\r\n            this.updateFrustum(this.startPoint, this.endPoint);\r\n            this.searchChildInFrustum(frustum, this.scene);\r\n            return this.collection;\r\n        };\r\n        SelectionBox.prototype.updateFrustum = function (startPoint, endPoint) {\r\n            startPoint = startPoint || this.startPoint;\r\n            endPoint = endPoint || this.endPoint;\r\n            this.camera.updateProjectionMatrix();\r\n            this.camera.updateMatrixWorld();\r\n            if (this.camera.isPerspectiveCamera) {\r\n                tmpPoint.copy(startPoint);\r\n                tmpPoint.x = Math.min(startPoint.x, endPoint.x);\r\n                tmpPoint.y = Math.max(startPoint.y, endPoint.y);\r\n                endPoint.x = Math.max(startPoint.x, endPoint.x);\r\n                endPoint.y = Math.min(startPoint.y, endPoint.y);\r\n                vecNear.copy(this.camera.position);\r\n                vecTopLeft.copy(tmpPoint);\r\n                vecTopRight.set(endPoint.x, tmpPoint.y, 0);\r\n                vecDownRight.copy(endPoint);\r\n                vecDownLeft.set(tmpPoint.x, endPoint.y, 0);\r\n                vecTopLeft.unproject(this.camera);\r\n                vecTopRight.unproject(this.camera);\r\n                vecDownRight.unproject(this.camera);\r\n                vecDownLeft.unproject(this.camera);\r\n                vectemp1.copy(vecTopLeft).sub(vecNear);\r\n                vectemp2.copy(vecTopRight).sub(vecNear);\r\n                vectemp3.copy(vecDownRight).sub(vecNear);\r\n                vectemp1.normalize();\r\n                vectemp2.normalize();\r\n                vectemp3.normalize();\r\n                vectemp1.multiplyScalar(this.deep);\r\n                vectemp2.multiplyScalar(this.deep);\r\n                vectemp3.multiplyScalar(this.deep);\r\n                vectemp1.add(vecNear);\r\n                vectemp2.add(vecNear);\r\n                vectemp3.add(vecNear);\r\n                var planes = frustum.planes;\r\n                planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight);\r\n                planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight);\r\n                planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear);\r\n                planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear);\r\n                planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\r\n                planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1);\r\n                planes[5].normal.multiplyScalar(-1);\r\n            } else if (this.camera.isOrthographicCamera) {\r\n                if (startPoint.equals(endPoint))\r\n                    endPoint.addScalar(Number.EPSILON);\r\n                var left = Math.min(startPoint.x, endPoint.x);\r\n                var top = Math.max(startPoint.y, endPoint.y);\r\n                var right = Math.max(startPoint.x, endPoint.x);\r\n                var down = Math.min(startPoint.y, endPoint.y);\r\n                vecTopLeft.set(left, top, -1);\r\n                vecTopRight.set(right, top, -1);\r\n                vecDownRight.set(right, down, -1);\r\n                vecDownLeft.set(left, down, -1);\r\n                vecFarTopLeft.set(left, top, 1);\r\n                vecFarTopRight.set(right, top, 1);\r\n                vecFarDownRight.set(right, down, 1);\r\n                vecFarDownLeft.set(left, down, 1);\r\n                vecTopLeft.unproject(this.camera);\r\n                vecTopRight.unproject(this.camera);\r\n                vecDownRight.unproject(this.camera);\r\n                vecDownLeft.unproject(this.camera);\r\n                vecFarTopLeft.unproject(this.camera);\r\n                vecFarTopRight.unproject(this.camera);\r\n                vecFarDownRight.unproject(this.camera);\r\n                vecFarDownLeft.unproject(this.camera);\r\n                var planes = frustum.planes;\r\n                planes[0].setFromCoplanarPoints(vecTopLeft, vecFarTopLeft, vecFarTopRight);\r\n                planes[1].setFromCoplanarPoints(vecTopRight, vecFarTopRight, vecFarDownRight);\r\n                planes[2].setFromCoplanarPoints(vecFarDownRight, vecFarDownLeft, vecDownLeft);\r\n                planes[3].setFromCoplanarPoints(vecFarDownLeft, vecFarTopLeft, vecTopLeft);\r\n                planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\r\n                planes[5].setFromCoplanarPoints(vecFarDownRight, vecFarTopRight, vecFarTopLeft);\r\n                planes[5].normal.multiplyScalar(-1);\r\n            } else {\r\n                console.error('THREE.SelectionBox: Unsupported camera type.');\r\n            }\r\n        };\r\n        SelectionBox.prototype.searchChildInFrustum = function (frustum, object) {\r\n            if (object.isMesh || object.isLine || object.isPoints) {\r\n                if (object.material !== undefined) {\r\n                    if (object.geometry.boundingSphere === null)\r\n                        object.geometry.computeBoundingSphere();\r\n                    center.copy(object.geometry.boundingSphere.center);\r\n                    center.applyMatrix4(object.matrixWorld);\r\n                    if (frustum.containsPoint(center)) {\r\n                        this.collection.push(object);\r\n                    }\r\n                }\r\n            }\r\n            if (object.children.length > 0) {\r\n                for (var x = 0; x < object.children.length; x++) {\r\n                    this.searchChildInFrustum(frustum, object.children[x]);\r\n                }\r\n            }\r\n        };\r\n        return SelectionBox;\r\n    }();\r\n\r\n    return threex.interactive.SelectionBox  =SelectionBox;\r\n});"]}