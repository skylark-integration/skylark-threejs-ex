{"version":3,"sources":["misc/MD2Character.js"],"names":["define","THREE","threex","MD2Loader","misc","MD2Character","scope","this","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","i","length","load","checkLoadingComplete","mapping","UVMapping","name","encoding","sRGBEncoding","createPart","geometry","skinMap","materialWireframe","MeshLambertMaterial","color","wireframe","morphTargets","morphNormals","materialTexture","map","mesh","Mesh","rotation","y","Math","PI","castShadow","receiveShadow","loadCounter","onLoadComplete","scale","animationFPS","root","Object3D","meshBody","meshWeapon","skinsBody","skinsWeapon","weapons","activeAnimation","mixer","loadParts","config","skins","weaponsTextures","loader","body","geo","boundingBox","Box3","setFromBufferAttribute","attributes","position","min","set","add","clipOffset","activeAnimationClipName","animations","AnimationMixer","generateCallback","index","visible","setPlaybackRate","rate","timeScale","setWireframe","wireframeEnabled","material","setSkin","setWeapon","activeWeapon","syncWeaponAnimation","setAnimation","clipName","activeAction","stop","action","clipAction","play","activeClipName","syncWith","update","delta"],"mappings":"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","file":"../../misc/MD2Character.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    '../loaders/MD2Loader'\n], function (\n    THREE, \n    threex,\n    MD2Loader\n) {\n    'use strict';\n    var MD2Character = function () {\n        var scope = this;\n        this.scale = 1;\n        this.animationFPS = 6;\n        this.root = new THREE.Object3D();\n        this.meshBody = null;\n        this.meshWeapon = null;\n        this.skinsBody = [];\n        this.skinsWeapon = [];\n        this.weapons = [];\n        this.activeAnimation = null;\n        this.mixer = null;\n        this.onLoadComplete = function () {\n        };\n        this.loadCounter = 0;\n        this.loadParts = function (config) {\n            this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n            var weaponsTextures = [];\n            for (var i = 0; i < config.weapons.length; i++)\n                weaponsTextures[i] = config.weapons[i][1];\n            this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins);\n            this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures);\n            var loader = new MD2Loader();\n            loader.load(config.baseUrl + config.body, function (geo) {\n                var boundingBox = new THREE.Box3();\n                boundingBox.setFromBufferAttribute(geo.attributes.position);\n                scope.root.position.y = -scope.scale * boundingBox.min.y;\n                var mesh = createPart(geo, scope.skinsBody[0]);\n                mesh.scale.set(scope.scale, scope.scale, scope.scale);\n                scope.root.add(mesh);\n                scope.meshBody = mesh;\n                scope.meshBody.clipOffset = 0;\n                scope.activeAnimationClipName = mesh.geometry.animations[0].name;\n                scope.mixer = new THREE.AnimationMixer(mesh);\n                checkLoadingComplete();\n            });\n            var generateCallback = function (index, name) {\n                return function (geo) {\n                    var mesh = createPart(geo, scope.skinsWeapon[index]);\n                    mesh.scale.set(scope.scale, scope.scale, scope.scale);\n                    mesh.visible = false;\n                    mesh.name = name;\n                    scope.root.add(mesh);\n                    scope.weapons[index] = mesh;\n                    scope.meshWeapon = mesh;\n                    checkLoadingComplete();\n                };\n            };\n            for (var i = 0; i < config.weapons.length; i++) {\n                loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n            }\n        };\n        this.setPlaybackRate = function (rate) {\n            if (rate !== 0) {\n                this.mixer.timeScale = 1 / rate;\n            } else {\n                this.mixer.timeScale = 0;\n            }\n        };\n        this.setWireframe = function (wireframeEnabled) {\n            if (wireframeEnabled) {\n                if (this.meshBody)\n                    this.meshBody.material = this.meshBody.materialWireframe;\n                if (this.meshWeapon)\n                    this.meshWeapon.material = this.meshWeapon.materialWireframe;\n            } else {\n                if (this.meshBody)\n                    this.meshBody.material = this.meshBody.materialTexture;\n                if (this.meshWeapon)\n                    this.meshWeapon.material = this.meshWeapon.materialTexture;\n            }\n        };\n        this.setSkin = function (index) {\n            if (this.meshBody && this.meshBody.material.wireframe === false) {\n                this.meshBody.material.map = this.skinsBody[index];\n            }\n        };\n        this.setWeapon = function (index) {\n            for (var i = 0; i < this.weapons.length; i++)\n                this.weapons[i].visible = false;\n            var activeWeapon = this.weapons[index];\n            if (activeWeapon) {\n                activeWeapon.visible = true;\n                this.meshWeapon = activeWeapon;\n                scope.syncWeaponAnimation();\n            }\n        };\n        this.setAnimation = function (clipName) {\n            if (this.meshBody) {\n                if (this.meshBody.activeAction) {\n                    this.meshBody.activeAction.stop();\n                    this.meshBody.activeAction = null;\n                }\n                var action = this.mixer.clipAction(clipName, this.meshBody);\n                if (action) {\n                    this.meshBody.activeAction = action.play();\n                }\n            }\n            scope.activeClipName = clipName;\n            scope.syncWeaponAnimation();\n        };\n        this.syncWeaponAnimation = function () {\n            var clipName = scope.activeClipName;\n            if (scope.meshWeapon) {\n                if (this.meshWeapon.activeAction) {\n                    this.meshWeapon.activeAction.stop();\n                    this.meshWeapon.activeAction = null;\n                }\n                var action = this.mixer.clipAction(clipName, this.meshWeapon);\n                if (action) {\n                    this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\n                }\n            }\n        };\n        this.update = function (delta) {\n            if (this.mixer)\n                this.mixer.update(delta);\n        };\n        function loadTextures(baseUrl, textureUrls) {\n            var textureLoader = new THREE.TextureLoader();\n            var textures = [];\n            for (var i = 0; i < textureUrls.length; i++) {\n                textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n                textures[i].mapping = THREE.UVMapping;\n                textures[i].name = textureUrls[i];\n                textures[i].encoding = THREE.sRGBEncoding;\n            }\n            return textures;\n        }\n        function createPart(geometry, skinMap) {\n            var materialWireframe = new THREE.MeshLambertMaterial({\n                color: 16755200,\n                wireframe: true,\n                morphTargets: true,\n                morphNormals: true\n            });\n            var materialTexture = new THREE.MeshLambertMaterial({\n                color: 16777215,\n                wireframe: false,\n                map: skinMap,\n                morphTargets: true,\n                morphNormals: true\n            });\n            var mesh = new THREE.Mesh(geometry, materialTexture);\n            mesh.rotation.y = -Math.PI / 2;\n            mesh.castShadow = true;\n            mesh.receiveShadow = true;\n            mesh.materialTexture = materialTexture;\n            mesh.materialWireframe = materialWireframe;\n            return mesh;\n        }\n        function checkLoadingComplete() {\n            scope.loadCounter -= 1;\n            if (scope.loadCounter === 0)\n                scope.onLoadComplete();\n        }\n    };\n    return threex.misc.MD2Character = MD2Character;\n});"]}