{"version":3,"sources":["misc/MD2Character.js"],"names":["define","THREE","threex","MD2Loader","misc","MD2Character","scope","this","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","i","length","load","checkLoadingComplete","mapping","UVMapping","name","encoding","sRGBEncoding","createPart","geometry","skinMap","materialWireframe","MeshLambertMaterial","color","wireframe","morphTargets","morphNormals","materialTexture","map","mesh","Mesh","rotation","y","Math","PI","castShadow","receiveShadow","loadCounter","onLoadComplete","scale","animationFPS","root","Object3D","meshBody","meshWeapon","skinsBody","skinsWeapon","weapons","activeAnimation","mixer","loadParts","config","skins","weaponsTextures","loader","body","geo","boundingBox","Box3","setFromBufferAttribute","attributes","position","min","set","add","clipOffset","activeAnimationClipName","animations","AnimationMixer","generateCallback","index","visible","setPlaybackRate","rate","timeScale","setWireframe","wireframeEnabled","material","setSkin","setWeapon","activeWeapon","syncWeaponAnimation","setAnimation","clipName","activeAction","stop","action","clipAction","play","activeClipName","syncWith","update","delta"],"mappings":";;;;;;;AAAAA,QACI,kBACA,YACA,wBACD,SACCC,EACAC,EACAC,GAEA,aA8JA,OAAOD,EAAOE,KAAKC,aA7JA,WACf,IAAIC,EAAQC,KAqHZ,SAASC,EAAaC,EAASC,GAG3B,IAFA,IAAIC,EAAgB,IAAIV,EAAMW,cAC1BC,KACKC,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IACpCD,EAASC,GAAKH,EAAcK,KAAKP,EAAUC,EAAYI,GAAIG,GAC3DJ,EAASC,GAAGI,QAAUjB,EAAMkB,UAC5BN,EAASC,GAAGM,KAAOV,EAAYI,GAC/BD,EAASC,GAAGO,SAAWpB,EAAMqB,aAEjC,OAAOT,EAEX,SAASU,EAAWC,EAAUC,GAC1B,IAAIC,EAAoB,IAAIzB,EAAM0B,qBAC9BC,MAAO,SACPC,WAAW,EACXC,cAAc,EACdC,cAAc,IAEdC,EAAkB,IAAI/B,EAAM0B,qBAC5BC,MAAO,SACPC,WAAW,EACXI,IAAKR,EACLK,cAAc,EACdC,cAAc,IAEdG,EAAO,IAAIjC,EAAMkC,KAAKX,EAAUQ,GAMpC,OALAE,EAAKE,SAASC,GAAKC,KAAKC,GAAK,EAC7BL,EAAKM,YAAa,EAClBN,EAAKO,eAAgB,EACrBP,EAAKF,gBAAkBA,EACvBE,EAAKR,kBAAoBA,EAClBQ,EAEX,SAASjB,IACLX,EAAMoC,aAAe,EACK,IAAtBpC,EAAMoC,aACNpC,EAAMqC,iBAxJdpC,KAAKqC,MAAQ,EACbrC,KAAKsC,aAAe,EACpBtC,KAAKuC,KAAO,IAAI7C,EAAM8C,SACtBxC,KAAKyC,SAAW,KAChBzC,KAAK0C,WAAa,KAClB1C,KAAK2C,aACL3C,KAAK4C,eACL5C,KAAK6C,WACL7C,KAAK8C,gBAAkB,KACvB9C,KAAK+C,MAAQ,KACb/C,KAAKoC,eAAiB,aAEtBpC,KAAKmC,YAAc,EACnBnC,KAAKgD,UAAY,SAAUC,GACvBjD,KAAKmC,YAAsC,EAAxBc,EAAOJ,QAAQrC,OAAayC,EAAOC,MAAM1C,OAAS,EAErE,IADA,IAAI2C,KACK5C,EAAI,EAAGA,EAAI0C,EAAOJ,QAAQrC,OAAQD,IACvC4C,EAAgB5C,GAAK0C,EAAOJ,QAAQtC,GAAG,GAC3CP,KAAK2C,UAAY1C,EAAagD,EAAO/C,QAAU,SAAU+C,EAAOC,OAChElD,KAAK4C,YAAc3C,EAAagD,EAAO/C,QAAU,SAAUiD,GAC3D,IAAIC,EAAS,IAAIxD,EACjBwD,EAAO3C,KAAKwC,EAAO/C,QAAU+C,EAAOI,KAAM,SAAUC,GAChD,IAAIC,EAAc,IAAI7D,EAAM8D,KAC5BD,EAAYE,uBAAuBH,EAAII,WAAWC,UAClD5D,EAAMwC,KAAKoB,SAAS7B,GAAK/B,EAAMsC,MAAQkB,EAAYK,IAAI9B,EACvD,IAAIH,EAAOX,EAAWsC,EAAKvD,EAAM4C,UAAU,IAC3ChB,EAAKU,MAAMwB,IAAI9D,EAAMsC,MAAOtC,EAAMsC,MAAOtC,EAAMsC,OAC/CtC,EAAMwC,KAAKuB,IAAInC,GACf5B,EAAM0C,SAAWd,EACjB5B,EAAM0C,SAASsB,WAAa,EAC5BhE,EAAMiE,wBAA0BrC,EAAKV,SAASgD,WAAW,GAAGpD,KAC5Dd,EAAMgD,MAAQ,IAAIrD,EAAMwE,eAAevC,GACvCjB,MAEJ,IAAIyD,EAAmB,SAAUC,EAAOvD,GACpC,OAAO,SAAUyC,GACb,IAAI3B,EAAOX,EAAWsC,EAAKvD,EAAM6C,YAAYwB,IAC7CzC,EAAKU,MAAMwB,IAAI9D,EAAMsC,MAAOtC,EAAMsC,MAAOtC,EAAMsC,OAC/CV,EAAK0C,SAAU,EACf1C,EAAKd,KAAOA,EACZd,EAAMwC,KAAKuB,IAAInC,GACf5B,EAAM8C,QAAQuB,GAASzC,EACvB5B,EAAM2C,WAAaf,EACnBjB,MAGR,IAASH,EAAI,EAAGA,EAAI0C,EAAOJ,QAAQrC,OAAQD,IACvC6C,EAAO3C,KAAKwC,EAAO/C,QAAU+C,EAAOJ,QAAQtC,GAAG,GAAI4D,EAAiB5D,EAAG0C,EAAOJ,QAAQtC,GAAG,MAGjGP,KAAKsE,gBAAkB,SAAUC,GAEzBvE,KAAK+C,MAAMyB,UADF,IAATD,EACuB,EAAIA,EAEJ,GAG/BvE,KAAKyE,aAAe,SAAUC,GACtBA,GACI1E,KAAKyC,WACLzC,KAAKyC,SAASkC,SAAW3E,KAAKyC,SAAStB,mBACvCnB,KAAK0C,aACL1C,KAAK0C,WAAWiC,SAAW3E,KAAK0C,WAAWvB,qBAE3CnB,KAAKyC,WACLzC,KAAKyC,SAASkC,SAAW3E,KAAKyC,SAAShB,iBACvCzB,KAAK0C,aACL1C,KAAK0C,WAAWiC,SAAW3E,KAAK0C,WAAWjB,mBAGvDzB,KAAK4E,QAAU,SAAUR,GACjBpE,KAAKyC,WAAiD,IAArCzC,KAAKyC,SAASkC,SAASrD,YACxCtB,KAAKyC,SAASkC,SAASjD,IAAM1B,KAAK2C,UAAUyB,KAGpDpE,KAAK6E,UAAY,SAAUT,GACvB,IAAK,IAAI7D,EAAI,EAAGA,EAAIP,KAAK6C,QAAQrC,OAAQD,IACrCP,KAAK6C,QAAQtC,GAAG8D,SAAU,EAC9B,IAAIS,EAAe9E,KAAK6C,QAAQuB,GAC5BU,IACAA,EAAaT,SAAU,EACvBrE,KAAK0C,WAAaoC,EAClB/E,EAAMgF,wBAGd/E,KAAKgF,aAAe,SAAUC,GAC1B,GAAIjF,KAAKyC,SAAU,CACXzC,KAAKyC,SAASyC,eACdlF,KAAKyC,SAASyC,aAAaC,OAC3BnF,KAAKyC,SAASyC,aAAe,MAEjC,IAAIE,EAASpF,KAAK+C,MAAMsC,WAAWJ,EAAUjF,KAAKyC,UAC9C2C,IACApF,KAAKyC,SAASyC,aAAeE,EAAOE,QAG5CvF,EAAMwF,eAAiBN,EACvBlF,EAAMgF,uBAEV/E,KAAK+E,oBAAsB,WACvB,IAAIE,EAAWlF,EAAMwF,eACrB,GAAIxF,EAAM2C,WAAY,CACd1C,KAAK0C,WAAWwC,eAChBlF,KAAK0C,WAAWwC,aAAaC,OAC7BnF,KAAK0C,WAAWwC,aAAe,MAEnC,IAAIE,EAASpF,KAAK+C,MAAMsC,WAAWJ,EAAUjF,KAAK0C,YAC9C0C,IACApF,KAAK0C,WAAWwC,aAAeE,EAAOI,SAASxF,KAAKyC,SAASyC,cAAcI,UAIvFtF,KAAKyF,OAAS,SAAUC,GAChB1F,KAAK+C,OACL/C,KAAK+C,MAAM0C,OAAOC","file":"../../misc/MD2Character.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../loaders/MD2Loader'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    MD2Loader\r\n) {\r\n    'use strict';\r\n    var MD2Character = function () {\r\n        var scope = this;\r\n        this.scale = 1;\r\n        this.animationFPS = 6;\r\n        this.root = new THREE.Object3D();\r\n        this.meshBody = null;\r\n        this.meshWeapon = null;\r\n        this.skinsBody = [];\r\n        this.skinsWeapon = [];\r\n        this.weapons = [];\r\n        this.activeAnimation = null;\r\n        this.mixer = null;\r\n        this.onLoadComplete = function () {\r\n        };\r\n        this.loadCounter = 0;\r\n        this.loadParts = function (config) {\r\n            this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\r\n            var weaponsTextures = [];\r\n            for (var i = 0; i < config.weapons.length; i++)\r\n                weaponsTextures[i] = config.weapons[i][1];\r\n            this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins);\r\n            this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures);\r\n            var loader = new MD2Loader();\r\n            loader.load(config.baseUrl + config.body, function (geo) {\r\n                var boundingBox = new THREE.Box3();\r\n                boundingBox.setFromBufferAttribute(geo.attributes.position);\r\n                scope.root.position.y = -scope.scale * boundingBox.min.y;\r\n                var mesh = createPart(geo, scope.skinsBody[0]);\r\n                mesh.scale.set(scope.scale, scope.scale, scope.scale);\r\n                scope.root.add(mesh);\r\n                scope.meshBody = mesh;\r\n                scope.meshBody.clipOffset = 0;\r\n                scope.activeAnimationClipName = mesh.geometry.animations[0].name;\r\n                scope.mixer = new THREE.AnimationMixer(mesh);\r\n                checkLoadingComplete();\r\n            });\r\n            var generateCallback = function (index, name) {\r\n                return function (geo) {\r\n                    var mesh = createPart(geo, scope.skinsWeapon[index]);\r\n                    mesh.scale.set(scope.scale, scope.scale, scope.scale);\r\n                    mesh.visible = false;\r\n                    mesh.name = name;\r\n                    scope.root.add(mesh);\r\n                    scope.weapons[index] = mesh;\r\n                    scope.meshWeapon = mesh;\r\n                    checkLoadingComplete();\r\n                };\r\n            };\r\n            for (var i = 0; i < config.weapons.length; i++) {\r\n                loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\r\n            }\r\n        };\r\n        this.setPlaybackRate = function (rate) {\r\n            if (rate !== 0) {\r\n                this.mixer.timeScale = 1 / rate;\r\n            } else {\r\n                this.mixer.timeScale = 0;\r\n            }\r\n        };\r\n        this.setWireframe = function (wireframeEnabled) {\r\n            if (wireframeEnabled) {\r\n                if (this.meshBody)\r\n                    this.meshBody.material = this.meshBody.materialWireframe;\r\n                if (this.meshWeapon)\r\n                    this.meshWeapon.material = this.meshWeapon.materialWireframe;\r\n            } else {\r\n                if (this.meshBody)\r\n                    this.meshBody.material = this.meshBody.materialTexture;\r\n                if (this.meshWeapon)\r\n                    this.meshWeapon.material = this.meshWeapon.materialTexture;\r\n            }\r\n        };\r\n        this.setSkin = function (index) {\r\n            if (this.meshBody && this.meshBody.material.wireframe === false) {\r\n                this.meshBody.material.map = this.skinsBody[index];\r\n            }\r\n        };\r\n        this.setWeapon = function (index) {\r\n            for (var i = 0; i < this.weapons.length; i++)\r\n                this.weapons[i].visible = false;\r\n            var activeWeapon = this.weapons[index];\r\n            if (activeWeapon) {\r\n                activeWeapon.visible = true;\r\n                this.meshWeapon = activeWeapon;\r\n                scope.syncWeaponAnimation();\r\n            }\r\n        };\r\n        this.setAnimation = function (clipName) {\r\n            if (this.meshBody) {\r\n                if (this.meshBody.activeAction) {\r\n                    this.meshBody.activeAction.stop();\r\n                    this.meshBody.activeAction = null;\r\n                }\r\n                var action = this.mixer.clipAction(clipName, this.meshBody);\r\n                if (action) {\r\n                    this.meshBody.activeAction = action.play();\r\n                }\r\n            }\r\n            scope.activeClipName = clipName;\r\n            scope.syncWeaponAnimation();\r\n        };\r\n        this.syncWeaponAnimation = function () {\r\n            var clipName = scope.activeClipName;\r\n            if (scope.meshWeapon) {\r\n                if (this.meshWeapon.activeAction) {\r\n                    this.meshWeapon.activeAction.stop();\r\n                    this.meshWeapon.activeAction = null;\r\n                }\r\n                var action = this.mixer.clipAction(clipName, this.meshWeapon);\r\n                if (action) {\r\n                    this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\r\n                }\r\n            }\r\n        };\r\n        this.update = function (delta) {\r\n            if (this.mixer)\r\n                this.mixer.update(delta);\r\n        };\r\n        function loadTextures(baseUrl, textureUrls) {\r\n            var textureLoader = new THREE.TextureLoader();\r\n            var textures = [];\r\n            for (var i = 0; i < textureUrls.length; i++) {\r\n                textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\r\n                textures[i].mapping = THREE.UVMapping;\r\n                textures[i].name = textureUrls[i];\r\n                textures[i].encoding = THREE.sRGBEncoding;\r\n            }\r\n            return textures;\r\n        }\r\n        function createPart(geometry, skinMap) {\r\n            var materialWireframe = new THREE.MeshLambertMaterial({\r\n                color: 16755200,\r\n                wireframe: true,\r\n                morphTargets: true,\r\n                morphNormals: true\r\n            });\r\n            var materialTexture = new THREE.MeshLambertMaterial({\r\n                color: 16777215,\r\n                wireframe: false,\r\n                map: skinMap,\r\n                morphTargets: true,\r\n                morphNormals: true\r\n            });\r\n            var mesh = new THREE.Mesh(geometry, materialTexture);\r\n            mesh.rotation.y = -Math.PI / 2;\r\n            mesh.castShadow = true;\r\n            mesh.receiveShadow = true;\r\n            mesh.materialTexture = materialTexture;\r\n            mesh.materialWireframe = materialWireframe;\r\n            return mesh;\r\n        }\r\n        function checkLoadingComplete() {\r\n            scope.loadCounter -= 1;\r\n            if (scope.loadCounter === 0)\r\n                scope.onLoadComplete();\r\n        }\r\n    };\r\n    return threex.misc.MD2Character = MD2Character;\r\n});"]}