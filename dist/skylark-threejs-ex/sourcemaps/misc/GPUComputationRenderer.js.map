{"version":3,"sources":["misc/GPUComputationRenderer.js"],"names":["define","THREE","sizeX","sizeY","renderer","this","variables","currentTextureIndex","scene","Scene","camera","Camera","position","z","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","mesh","Mesh","PlaneBufferGeometry","addResolutionDefine","materialShader","defines","resolution","toFixed","computeFragmentShader","uniforms","material","ShaderMaterial","vertexShader","fragmentShader","add","addVariable","variableName","initialValueTexture","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","NearestFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","get","maxVertexTextures","i","length","createRenderTarget","renderTexture","d","depVar","found","j","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","ClampToEdgeWrapping","WebGLRenderTarget","format","RGBAFormat","type","test","navigator","userAgent","HalfFloatType","FloatType","stencilBuffer","depthBuffer","createTexture","data","Float32Array","DataTexture","input","output","currentRenderTarget","getRenderTarget","setRenderTarget","render"],"mappings":"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","file":"../../misc/GPUComputationRenderer.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var GPUComputationRenderer = function (sizeX, sizeY, renderer) {\n        this.variables = [];\n        this.currentTextureIndex = 0;\n        var scene = new THREE.Scene();\n        var camera = new THREE.Camera();\n        camera.position.z = 1;\n        var passThruUniforms = { passThruTexture: { value: null } };\n        var passThruShader = createShaderMaterial(getPassThroughFragmentShader(), passThruUniforms);\n        var mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), passThruShader);\n        scene.add(mesh);\n        this.addVariable = function (variableName, computeFragmentShader, initialValueTexture) {\n            var material = this.createShaderMaterial(computeFragmentShader);\n            var variable = {\n                name: variableName,\n                initialValueTexture: initialValueTexture,\n                material: material,\n                dependencies: null,\n                renderTargets: [],\n                wrapS: null,\n                wrapT: null,\n                minFilter: THREE.NearestFilter,\n                magFilter: THREE.NearestFilter\n            };\n            this.variables.push(variable);\n            return variable;\n        };\n        this.setVariableDependencies = function (variable, dependencies) {\n            variable.dependencies = dependencies;\n        };\n        this.init = function () {\n            if (!renderer.capabilities.isWebGL2 && !renderer.extensions.get('OES_texture_float')) {\n                return 'No OES_texture_float support for float textures.';\n            }\n            if (renderer.capabilities.maxVertexTextures === 0) {\n                return 'No support for vertex shader textures.';\n            }\n            for (var i = 0; i < this.variables.length; i++) {\n                var variable = this.variables[i];\n                variable.renderTargets[0] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n                variable.renderTargets[1] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n                this.renderTexture(variable.initialValueTexture, variable.renderTargets[0]);\n                this.renderTexture(variable.initialValueTexture, variable.renderTargets[1]);\n                var material = variable.material;\n                var uniforms = material.uniforms;\n                if (variable.dependencies !== null) {\n                    for (var d = 0; d < variable.dependencies.length; d++) {\n                        var depVar = variable.dependencies[d];\n                        if (depVar.name !== variable.name) {\n                            var found = false;\n                            for (var j = 0; j < this.variables.length; j++) {\n                                if (depVar.name === this.variables[j].name) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n                            if (!found) {\n                                return 'Variable dependency not found. Variable=' + variable.name + ', dependency=' + depVar.name;\n                            }\n                        }\n                        uniforms[depVar.name] = { value: null };\n                        material.fragmentShader = '\\nuniform sampler2D ' + depVar.name + ';\\n' + material.fragmentShader;\n                    }\n                }\n            }\n            this.currentTextureIndex = 0;\n            return null;\n        };\n        this.compute = function () {\n            var currentTextureIndex = this.currentTextureIndex;\n            var nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n            for (var i = 0, il = this.variables.length; i < il; i++) {\n                var variable = this.variables[i];\n                if (variable.dependencies !== null) {\n                    var uniforms = variable.material.uniforms;\n                    for (var d = 0, dl = variable.dependencies.length; d < dl; d++) {\n                        var depVar = variable.dependencies[d];\n                        uniforms[depVar.name].value = depVar.renderTargets[currentTextureIndex].texture;\n                    }\n                }\n                this.doRenderTarget(variable.material, variable.renderTargets[nextTextureIndex]);\n            }\n            this.currentTextureIndex = nextTextureIndex;\n        };\n        this.getCurrentRenderTarget = function (variable) {\n            return variable.renderTargets[this.currentTextureIndex];\n        };\n        this.getAlternateRenderTarget = function (variable) {\n            return variable.renderTargets[this.currentTextureIndex === 0 ? 1 : 0];\n        };\n        function addResolutionDefine(materialShader) {\n            materialShader.defines.resolution = 'vec2( ' + sizeX.toFixed(1) + ', ' + sizeY.toFixed(1) + ' )';\n        }\n        this.addResolutionDefine = addResolutionDefine;\n        function createShaderMaterial(computeFragmentShader, uniforms) {\n            uniforms = uniforms || {};\n            var material = new THREE.ShaderMaterial({\n                uniforms: uniforms,\n                vertexShader: getPassThroughVertexShader(),\n                fragmentShader: computeFragmentShader\n            });\n            addResolutionDefine(material);\n            return material;\n        }\n        this.createShaderMaterial = createShaderMaterial;\n        this.createRenderTarget = function (sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter) {\n            sizeXTexture = sizeXTexture || sizeX;\n            sizeYTexture = sizeYTexture || sizeY;\n            wrapS = wrapS || THREE.ClampToEdgeWrapping;\n            wrapT = wrapT || THREE.ClampToEdgeWrapping;\n            minFilter = minFilter || THREE.NearestFilter;\n            magFilter = magFilter || THREE.NearestFilter;\n            var renderTarget = new THREE.WebGLRenderTarget(sizeXTexture, sizeYTexture, {\n                wrapS: wrapS,\n                wrapT: wrapT,\n                minFilter: minFilter,\n                magFilter: magFilter,\n                format: THREE.RGBAFormat,\n                type: /(iPad|iPhone|iPod)/g.test(navigator.userAgent) ? THREE.HalfFloatType : THREE.FloatType,\n                stencilBuffer: false,\n                depthBuffer: false\n            });\n            return renderTarget;\n        };\n        this.createTexture = function () {\n            var data = new Float32Array(sizeX * sizeY * 4);\n            return new THREE.DataTexture(data, sizeX, sizeY, THREE.RGBAFormat, THREE.FloatType);\n        };\n        this.renderTexture = function (input, output) {\n            passThruUniforms.passThruTexture.value = input;\n            this.doRenderTarget(passThruShader, output);\n            passThruUniforms.passThruTexture.value = null;\n        };\n        this.doRenderTarget = function (material, output) {\n            var currentRenderTarget = renderer.getRenderTarget();\n            mesh.material = material;\n            renderer.setRenderTarget(output);\n            renderer.render(scene, camera);\n            mesh.material = passThruShader;\n            renderer.setRenderTarget(currentRenderTarget);\n        };\n        function getPassThroughVertexShader() {\n            return 'void main()\\t{\\n' + '\\n' + '\\tgl_Position = vec4( position, 1.0 );\\n' + '\\n' + '}\\n';\n        }\n        function getPassThroughFragmentShader() {\n            return 'uniform sampler2D passThruTexture;\\n' + '\\n' + 'void main() {\\n' + '\\n' + '\\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n' + '\\n' + '\\tgl_FragColor = texture2D( passThruTexture, uv );\\n' + '\\n' + '}\\n';\n        }\n    };\n    return GPUComputationRenderer;\n});"]}