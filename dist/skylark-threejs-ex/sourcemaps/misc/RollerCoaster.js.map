{"version":3,"sources":["misc/RollerCoaster.js"],"names":["define","THREE","RollerCoasterGeometry","curve","divisions","BufferGeometry","call","this","vertices","normals","colors","color1","color2","up","Vector3","forward","right","quaternion","Quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","setAttribute","BufferAttribute","Float32Array","prototype","Object","create","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","Raycaster","ray","direction","origin","intersections","intersectObject","height"],"mappings":"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","file":"../../misc/RollerCoaster.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tTHREE.RollerCoasterGeometry = function ( curve, divisions ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = [ 1, 1, 1 ];\n\t\tvar color2 = [ 1, 1, 0 ];\n\n\t\tvar up = new THREE.Vector3( 0, 1, 0 );\n\t\tvar forward = new THREE.Vector3();\n\t\tvar right = new THREE.Vector3();\n\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar prevQuaternion = new THREE.Quaternion();\n\t\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\n\n\t\tvar point = new THREE.Vector3();\n\t\tvar prevPoint = new THREE.Vector3();\n\t\tprevPoint.copy( curve.getPointAt( 0 ) );\n\n\t\t// shapes\n\n\t\tvar step = [\n\t\t\tnew THREE.Vector3( - 0.225, 0, 0 ),\n\t\t\tnew THREE.Vector3( 0, - 0.050, 0 ),\n\t\t\tnew THREE.Vector3( 0, - 0.175, 0 ),\n\n\t\t\tnew THREE.Vector3( 0, - 0.050, 0 ),\n\t\t\tnew THREE.Vector3( 0.225, 0, 0 ),\n\t\t\tnew THREE.Vector3( 0, - 0.175, 0 )\n\t\t];\n\n\t\tvar PI2 = Math.PI * 2;\n\n\t\tvar sides = 5;\n\t\tvar tube1 = [];\n\n\t\tfor ( var i = 0; i < sides; i ++ ) {\n\n\t\t\tvar angle = ( i / sides ) * PI2;\n\t\t\ttube1.push( new THREE.Vector3( Math.sin( angle ) * 0.06, Math.cos( angle ) * 0.06, 0 ) );\n\n\t\t}\n\n\t\tvar sides = 6;\n\t\tvar tube2 = [];\n\n\t\tfor ( var i = 0; i < sides; i ++ ) {\n\n\t\t\tvar angle = ( i / sides ) * PI2;\n\t\t\ttube2.push( new THREE.Vector3( Math.sin( angle ) * 0.025, Math.cos( angle ) * 0.025, 0 ) );\n\n\t\t}\n\n\t\tvar vector = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\tfunction drawShape( shape, color ) {\n\n\t\t\tnormal.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tfor ( var j = 0; j < shape.length; j ++ ) {\n\n\t\t\t\tvector.copy( shape[ j ] );\n\t\t\t\tvector.applyQuaternion( quaternion );\n\t\t\t\tvector.add( point );\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t\tnormal.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\tfor ( var j = shape.length - 1; j >= 0; j -- ) {\n\n\t\t\t\tvector.copy( shape[ j ] );\n\t\t\t\tvector.applyQuaternion( quaternion );\n\t\t\t\tvector.add( point );\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar vector1 = new THREE.Vector3();\n\t\tvar vector2 = new THREE.Vector3();\n\t\tvar vector3 = new THREE.Vector3();\n\t\tvar vector4 = new THREE.Vector3();\n\n\t\tvar normal1 = new THREE.Vector3();\n\t\tvar normal2 = new THREE.Vector3();\n\t\tvar normal3 = new THREE.Vector3();\n\t\tvar normal4 = new THREE.Vector3();\n\n\t\tfunction extrudeShape( shape, offset, color ) {\n\n\t\t\tfor ( var j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\t\tvar point1 = shape[ j ];\n\t\t\t\tvar point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\t\tvector1.copy( point1 ).add( offset );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( point );\n\n\t\t\t\tvector2.copy( point2 ).add( offset );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( point );\n\n\t\t\t\tvector3.copy( point2 ).add( offset );\n\t\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\t\tvector3.add( prevPoint );\n\n\t\t\t\tvector4.copy( point1 ).add( offset );\n\t\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\t\tvector4.add( prevPoint );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\t//\n\n\t\t\t\tnormal1.copy( point1 );\n\t\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\t\tnormal1.normalize();\n\n\t\t\t\tnormal2.copy( point2 );\n\t\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\t\tnormal2.normalize();\n\n\t\t\t\tnormal3.copy( point2 );\n\t\t\t\tnormal3.applyQuaternion( prevQuaternion );\n\t\t\t\tnormal3.normalize();\n\n\t\t\t\tnormal4.copy( point1 );\n\t\t\t\tnormal4.applyQuaternion( prevQuaternion );\n\t\t\t\tnormal4.normalize();\n\n\t\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\tfor ( var i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\n\t\t\tup.set( 0, 1, 0 );\n\n\t\t\tforward.subVectors( point, prevPoint ).normalize();\n\t\t\tright.crossVectors( up, forward ).normalize();\n\t\t\tup.crossVectors( forward, right );\n\n\t\t\tvar angle = Math.atan2( forward.x, forward.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\tdrawShape( step, color2 );\n\n\t\t\t}\n\n\t\t\textrudeShape( tube1, offset.set( 0, - 0.125, 0 ), color2 );\n\t\t\textrudeShape( tube2, offset.set( 0.2, 0, 0 ), color1 );\n\t\t\textrudeShape( tube2, offset.set( - 0.2, 0, 0 ), color1 );\n\n\t\t\tprevPoint.copy( point );\n\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t}\n\n\t\t// console.log( vertices.length );\n\n\t\tthis.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );\n\t\tthis.setAttribute( 'color', new THREE.BufferAttribute( new Float32Array( colors ), 3 ) );\n\n\t};\n\n\tTHREE.RollerCoasterGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\n\tTHREE.RollerCoasterLiftersGeometry = function ( curve, divisions ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\tvar up = new THREE.Vector3( 0, 1, 0 );\n\n\t\tvar point = new THREE.Vector3();\n\t\tvar tangent = new THREE.Vector3();\n\n\t\t// shapes\n\n\t\tvar tube1 = [\n\t\t\tnew THREE.Vector3( 0, 0.05, - 0.05 ),\n\t\t\tnew THREE.Vector3( 0, 0.05, 0.05 ),\n\t\t\tnew THREE.Vector3( 0, - 0.05, 0 )\n\t\t];\n\n\t\tvar tube2 = [\n\t\t\tnew THREE.Vector3( - 0.05, 0, 0.05 ),\n\t\t\tnew THREE.Vector3( - 0.05, 0, - 0.05 ),\n\t\t\tnew THREE.Vector3( 0.05, 0, 0 )\n\t\t];\n\n\t\tvar tube3 = [\n\t\t\tnew THREE.Vector3( 0.05, 0, - 0.05 ),\n\t\t\tnew THREE.Vector3( 0.05, 0, 0.05 ),\n\t\t\tnew THREE.Vector3( - 0.05, 0, 0 )\n\t\t];\n\n\t\tvar vector1 = new THREE.Vector3();\n\t\tvar vector2 = new THREE.Vector3();\n\t\tvar vector3 = new THREE.Vector3();\n\t\tvar vector4 = new THREE.Vector3();\n\n\t\tvar normal1 = new THREE.Vector3();\n\t\tvar normal2 = new THREE.Vector3();\n\t\tvar normal3 = new THREE.Vector3();\n\t\tvar normal4 = new THREE.Vector3();\n\n\t\tfunction extrudeShape( shape, fromPoint, toPoint ) {\n\n\t\t\tfor ( var j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\t\tvar point1 = shape[ j ];\n\t\t\t\tvar point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\t\tvector1.copy( point1 );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( fromPoint );\n\n\t\t\t\tvector2.copy( point2 );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( fromPoint );\n\n\t\t\t\tvector3.copy( point2 );\n\t\t\t\tvector3.applyQuaternion( quaternion );\n\t\t\t\tvector3.add( toPoint );\n\n\t\t\t\tvector4.copy( point1 );\n\t\t\t\tvector4.applyQuaternion( quaternion );\n\t\t\t\tvector4.add( toPoint );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\t//\n\n\t\t\t\tnormal1.copy( point1 );\n\t\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\t\tnormal1.normalize();\n\n\t\t\t\tnormal2.copy( point2 );\n\t\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\t\tnormal2.normalize();\n\n\t\t\t\tnormal3.copy( point2 );\n\t\t\t\tnormal3.applyQuaternion( quaternion );\n\t\t\t\tnormal3.normalize();\n\n\t\t\t\tnormal4.copy( point1 );\n\t\t\t\tnormal4.applyQuaternion( quaternion );\n\t\t\t\tnormal4.normalize();\n\n\t\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar fromPoint = new THREE.Vector3();\n\t\tvar toPoint = new THREE.Vector3();\n\n\t\tfor ( var i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\t\t\ttangent.copy( curve.getTangentAt( i / divisions ) );\n\n\t\t\tvar angle = Math.atan2( tangent.x, tangent.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\t//\n\n\t\t\tif ( point.y > 10 ) {\n\n\t\t\t\tfromPoint.set( - 0.75, - 0.35, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0.75, - 0.35, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube1, fromPoint, toPoint );\n\n\t\t\t\tfromPoint.set( - 0.7, - 0.3, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( - 0.7, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube2, fromPoint, toPoint );\n\n\t\t\t\tfromPoint.set( 0.7, - 0.3, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0.7, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t\t} else {\n\n\t\t\t\tfromPoint.set( 0, - 0.2, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( normals ), 3 ) );\n\n\t};\n\n\tTHREE.RollerCoasterLiftersGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\n\tTHREE.RollerCoasterShadowGeometry = function ( curve, divisions ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tvar vertices = [];\n\n\t\tvar up = new THREE.Vector3( 0, 1, 0 );\n\t\tvar forward = new THREE.Vector3();\n\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar prevQuaternion = new THREE.Quaternion();\n\t\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\n\n\t\tvar point = new THREE.Vector3();\n\n\t\tvar prevPoint = new THREE.Vector3();\n\t\tprevPoint.copy( curve.getPointAt( 0 ) );\n\t\tprevPoint.y = 0;\n\n\t\tvar vector1 = new THREE.Vector3();\n\t\tvar vector2 = new THREE.Vector3();\n\t\tvar vector3 = new THREE.Vector3();\n\t\tvar vector4 = new THREE.Vector3();\n\n\t\tfor ( var i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\t\t\tpoint.y = 0;\n\n\t\t\tforward.subVectors( point, prevPoint );\n\n\t\t\tvar angle = Math.atan2( forward.x, forward.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\tvector1.set( - 0.3, 0, 0 );\n\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\tvector1.add( point );\n\n\t\t\tvector2.set( 0.3, 0, 0 );\n\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\tvector2.add( point );\n\n\t\t\tvector3.set( 0.3, 0, 0 );\n\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\tvector3.add( prevPoint );\n\n\t\t\tvector4.set( - 0.3, 0, 0 );\n\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\tvector4.add( prevPoint );\n\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tprevPoint.copy( point );\n\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n\t};\n\n\tTHREE.RollerCoasterShadowGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\n\tTHREE.SkyGeometry = function () {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < 100; i ++ ) {\n\n\t\t\tvar x = Math.random() * 800 - 400;\n\t\t\tvar y = Math.random() * 50 + 50;\n\t\t\tvar z = Math.random() * 800 - 400;\n\n\t\t\tvar size = Math.random() * 40 + 20;\n\n\t\t\tvertices.push( x - size, y, z - size );\n\t\t\tvertices.push( x + size, y, z - size );\n\t\t\tvertices.push( x - size, y, z + size );\n\n\t\t\tvertices.push( x + size, y, z - size );\n\t\t\tvertices.push( x + size, y, z + size );\n\t\t\tvertices.push( x - size, y, z + size );\n\n\t\t}\n\n\n\t\tthis.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n\t};\n\n\tTHREE.SkyGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\n\tTHREE.TreesGeometry = function ( landscape ) {\n\n\t\tTHREE.BufferGeometry.call( this );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar raycaster = new THREE.Raycaster();\n\t\traycaster.ray.direction.set( 0, - 1, 0 );\n\n\t\tfor ( var i = 0; i < 2000; i ++ ) {\n\n\t\t\tvar x = Math.random() * 500 - 250;\n\t\t\tvar z = Math.random() * 500 - 250;\n\n\t\t\traycaster.ray.origin.set( x, 50, z );\n\n\t\t\tvar intersections = raycaster.intersectObject( landscape );\n\n\t\t\tif ( intersections.length === 0 ) continue;\n\n\t\t\tvar y = intersections[ 0 ].point.y;\n\n\t\t\tvar height = Math.random() * 5 + 0.5;\n\n\t\t\tvar angle = Math.random() * Math.PI * 2;\n\n\t\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\n\t\t\tvertices.push( x, y + height, z );\n\t\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\n\n\t\t\tangle += Math.PI / 2;\n\n\t\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\n\t\t\tvertices.push( x, y + height, z );\n\t\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\n\n\t\t\tvar random = Math.random() * 0.1;\n\n\t\t\tfor ( var j = 0; j < 6; j ++ ) {\n\n\t\t\t\tcolors.push( 0.2 + random, 0.4 + random, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'color', new THREE.BufferAttribute( new Float32Array( colors ), 3 ) );\n\n\t};\n\n\tTHREE.TreesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\t\n\treturn THREE.RollerCoasterGeometry;\n});\n"]}