{"version":3,"sources":["misc/RollerCoaster.js"],"names":["define","THREE","threex","RollerCoasterGeometry","curve","divisions","BufferGeometry","call","this","vertices","normals","colors","color1","color2","up","Vector3","forward","right","quaternion","Quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","setAttribute","BufferAttribute","Float32Array","prototype","Object","create","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","Raycaster","ray","direction","origin","intersections","intersectObject","height","misc","RollerCoaster"],"mappings":"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","file":"../../misc/RollerCoaster.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var RollerCoasterGeometry = function (curve, divisions) {\r\n        THREE.BufferGeometry.call(this);\r\n        var vertices = [];\r\n        var normals = [];\r\n        var colors = [];\r\n        var color1 = [\r\n            1,\r\n            1,\r\n            1\r\n        ];\r\n        var color2 = [\r\n            1,\r\n            1,\r\n            0\r\n        ];\r\n        var up = new THREE.Vector3(0, 1, 0);\r\n        var forward = new THREE.Vector3();\r\n        var right = new THREE.Vector3();\r\n        var quaternion = new THREE.Quaternion();\r\n        var prevQuaternion = new THREE.Quaternion();\r\n        prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\r\n        var point = new THREE.Vector3();\r\n        var prevPoint = new THREE.Vector3();\r\n        prevPoint.copy(curve.getPointAt(0));\r\n        var step = [\r\n            new THREE.Vector3(-0.225, 0, 0),\r\n            new THREE.Vector3(0, -0.05, 0),\r\n            new THREE.Vector3(0, -0.175, 0),\r\n            new THREE.Vector3(0, -0.05, 0),\r\n            new THREE.Vector3(0.225, 0, 0),\r\n            new THREE.Vector3(0, -0.175, 0)\r\n        ];\r\n        var PI2 = Math.PI * 2;\r\n        var sides = 5;\r\n        var tube1 = [];\r\n        for (var i = 0; i < sides; i++) {\r\n            var angle = i / sides * PI2;\r\n            tube1.push(new THREE.Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\r\n        }\r\n        var sides = 6;\r\n        var tube2 = [];\r\n        for (var i = 0; i < sides; i++) {\r\n            var angle = i / sides * PI2;\r\n            tube2.push(new THREE.Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\r\n        }\r\n        var vector = new THREE.Vector3();\r\n        var normal = new THREE.Vector3();\r\n        function drawShape(shape, color) {\r\n            normal.set(0, 0, -1).applyQuaternion(quaternion);\r\n            for (var j = 0; j < shape.length; j++) {\r\n                vector.copy(shape[j]);\r\n                vector.applyQuaternion(quaternion);\r\n                vector.add(point);\r\n                vertices.push(vector.x, vector.y, vector.z);\r\n                normals.push(normal.x, normal.y, normal.z);\r\n                colors.push(color[0], color[1], color[2]);\r\n            }\r\n            normal.set(0, 0, 1).applyQuaternion(quaternion);\r\n            for (var j = shape.length - 1; j >= 0; j--) {\r\n                vector.copy(shape[j]);\r\n                vector.applyQuaternion(quaternion);\r\n                vector.add(point);\r\n                vertices.push(vector.x, vector.y, vector.z);\r\n                normals.push(normal.x, normal.y, normal.z);\r\n                colors.push(color[0], color[1], color[2]);\r\n            }\r\n        }\r\n        var vector1 = new THREE.Vector3();\r\n        var vector2 = new THREE.Vector3();\r\n        var vector3 = new THREE.Vector3();\r\n        var vector4 = new THREE.Vector3();\r\n        var normal1 = new THREE.Vector3();\r\n        var normal2 = new THREE.Vector3();\r\n        var normal3 = new THREE.Vector3();\r\n        var normal4 = new THREE.Vector3();\r\n        function extrudeShape(shape, offset, color) {\r\n            for (var j = 0, jl = shape.length; j < jl; j++) {\r\n                var point1 = shape[j];\r\n                var point2 = shape[(j + 1) % jl];\r\n                vector1.copy(point1).add(offset);\r\n                vector1.applyQuaternion(quaternion);\r\n                vector1.add(point);\r\n                vector2.copy(point2).add(offset);\r\n                vector2.applyQuaternion(quaternion);\r\n                vector2.add(point);\r\n                vector3.copy(point2).add(offset);\r\n                vector3.applyQuaternion(prevQuaternion);\r\n                vector3.add(prevPoint);\r\n                vector4.copy(point1).add(offset);\r\n                vector4.applyQuaternion(prevQuaternion);\r\n                vector4.add(prevPoint);\r\n                vertices.push(vector1.x, vector1.y, vector1.z);\r\n                vertices.push(vector2.x, vector2.y, vector2.z);\r\n                vertices.push(vector4.x, vector4.y, vector4.z);\r\n                vertices.push(vector2.x, vector2.y, vector2.z);\r\n                vertices.push(vector3.x, vector3.y, vector3.z);\r\n                vertices.push(vector4.x, vector4.y, vector4.z);\r\n                normal1.copy(point1);\r\n                normal1.applyQuaternion(quaternion);\r\n                normal1.normalize();\r\n                normal2.copy(point2);\r\n                normal2.applyQuaternion(quaternion);\r\n                normal2.normalize();\r\n                normal3.copy(point2);\r\n                normal3.applyQuaternion(prevQuaternion);\r\n                normal3.normalize();\r\n                normal4.copy(point1);\r\n                normal4.applyQuaternion(prevQuaternion);\r\n                normal4.normalize();\r\n                normals.push(normal1.x, normal1.y, normal1.z);\r\n                normals.push(normal2.x, normal2.y, normal2.z);\r\n                normals.push(normal4.x, normal4.y, normal4.z);\r\n                normals.push(normal2.x, normal2.y, normal2.z);\r\n                normals.push(normal3.x, normal3.y, normal3.z);\r\n                normals.push(normal4.x, normal4.y, normal4.z);\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n            }\r\n        }\r\n        var offset = new THREE.Vector3();\r\n        for (var i = 1; i <= divisions; i++) {\r\n            point.copy(curve.getPointAt(i / divisions));\r\n            up.set(0, 1, 0);\r\n            forward.subVectors(point, prevPoint).normalize();\r\n            right.crossVectors(up, forward).normalize();\r\n            up.crossVectors(forward, right);\r\n            var angle = Math.atan2(forward.x, forward.z);\r\n            quaternion.setFromAxisAngle(up, angle);\r\n            if (i % 2 === 0) {\r\n                drawShape(step, color2);\r\n            }\r\n            extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\r\n            extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\r\n            extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\r\n            prevPoint.copy(point);\r\n            prevQuaternion.copy(quaternion);\r\n        }\r\n        this.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\r\n        this.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(normals), 3));\r\n        this.setAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3));\r\n    };\r\n    RollerCoasterGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n    var RollerCoasterLiftersGeometry = function (curve, divisions) {\r\n        THREE.BufferGeometry.call(this);\r\n        var vertices = [];\r\n        var normals = [];\r\n        var quaternion = new THREE.Quaternion();\r\n        var up = new THREE.Vector3(0, 1, 0);\r\n        var point = new THREE.Vector3();\r\n        var tangent = new THREE.Vector3();\r\n        var tube1 = [\r\n            new THREE.Vector3(0, 0.05, -0.05),\r\n            new THREE.Vector3(0, 0.05, 0.05),\r\n            new THREE.Vector3(0, -0.05, 0)\r\n        ];\r\n        var tube2 = [\r\n            new THREE.Vector3(-0.05, 0, 0.05),\r\n            new THREE.Vector3(-0.05, 0, -0.05),\r\n            new THREE.Vector3(0.05, 0, 0)\r\n        ];\r\n        var tube3 = [\r\n            new THREE.Vector3(0.05, 0, -0.05),\r\n            new THREE.Vector3(0.05, 0, 0.05),\r\n            new THREE.Vector3(-0.05, 0, 0)\r\n        ];\r\n        var vector1 = new THREE.Vector3();\r\n        var vector2 = new THREE.Vector3();\r\n        var vector3 = new THREE.Vector3();\r\n        var vector4 = new THREE.Vector3();\r\n        var normal1 = new THREE.Vector3();\r\n        var normal2 = new THREE.Vector3();\r\n        var normal3 = new THREE.Vector3();\r\n        var normal4 = new THREE.Vector3();\r\n        function extrudeShape(shape, fromPoint, toPoint) {\r\n            for (var j = 0, jl = shape.length; j < jl; j++) {\r\n                var point1 = shape[j];\r\n                var point2 = shape[(j + 1) % jl];\r\n                vector1.copy(point1);\r\n                vector1.applyQuaternion(quaternion);\r\n                vector1.add(fromPoint);\r\n                vector2.copy(point2);\r\n                vector2.applyQuaternion(quaternion);\r\n                vector2.add(fromPoint);\r\n                vector3.copy(point2);\r\n                vector3.applyQuaternion(quaternion);\r\n                vector3.add(toPoint);\r\n                vector4.copy(point1);\r\n                vector4.applyQuaternion(quaternion);\r\n                vector4.add(toPoint);\r\n                vertices.push(vector1.x, vector1.y, vector1.z);\r\n                vertices.push(vector2.x, vector2.y, vector2.z);\r\n                vertices.push(vector4.x, vector4.y, vector4.z);\r\n                vertices.push(vector2.x, vector2.y, vector2.z);\r\n                vertices.push(vector3.x, vector3.y, vector3.z);\r\n                vertices.push(vector4.x, vector4.y, vector4.z);\r\n                normal1.copy(point1);\r\n                normal1.applyQuaternion(quaternion);\r\n                normal1.normalize();\r\n                normal2.copy(point2);\r\n                normal2.applyQuaternion(quaternion);\r\n                normal2.normalize();\r\n                normal3.copy(point2);\r\n                normal3.applyQuaternion(quaternion);\r\n                normal3.normalize();\r\n                normal4.copy(point1);\r\n                normal4.applyQuaternion(quaternion);\r\n                normal4.normalize();\r\n                normals.push(normal1.x, normal1.y, normal1.z);\r\n                normals.push(normal2.x, normal2.y, normal2.z);\r\n                normals.push(normal4.x, normal4.y, normal4.z);\r\n                normals.push(normal2.x, normal2.y, normal2.z);\r\n                normals.push(normal3.x, normal3.y, normal3.z);\r\n                normals.push(normal4.x, normal4.y, normal4.z);\r\n            }\r\n        }\r\n        var fromPoint = new THREE.Vector3();\r\n        var toPoint = new THREE.Vector3();\r\n        for (var i = 1; i <= divisions; i++) {\r\n            point.copy(curve.getPointAt(i / divisions));\r\n            tangent.copy(curve.getTangentAt(i / divisions));\r\n            var angle = Math.atan2(tangent.x, tangent.z);\r\n            quaternion.setFromAxisAngle(up, angle);\r\n            if (point.y > 10) {\r\n                fromPoint.set(-0.75, -0.35, 0);\r\n                fromPoint.applyQuaternion(quaternion);\r\n                fromPoint.add(point);\r\n                toPoint.set(0.75, -0.35, 0);\r\n                toPoint.applyQuaternion(quaternion);\r\n                toPoint.add(point);\r\n                extrudeShape(tube1, fromPoint, toPoint);\r\n                fromPoint.set(-0.7, -0.3, 0);\r\n                fromPoint.applyQuaternion(quaternion);\r\n                fromPoint.add(point);\r\n                toPoint.set(-0.7, -point.y, 0);\r\n                toPoint.applyQuaternion(quaternion);\r\n                toPoint.add(point);\r\n                extrudeShape(tube2, fromPoint, toPoint);\r\n                fromPoint.set(0.7, -0.3, 0);\r\n                fromPoint.applyQuaternion(quaternion);\r\n                fromPoint.add(point);\r\n                toPoint.set(0.7, -point.y, 0);\r\n                toPoint.applyQuaternion(quaternion);\r\n                toPoint.add(point);\r\n                extrudeShape(tube3, fromPoint, toPoint);\r\n            } else {\r\n                fromPoint.set(0, -0.2, 0);\r\n                fromPoint.applyQuaternion(quaternion);\r\n                fromPoint.add(point);\r\n                toPoint.set(0, -point.y, 0);\r\n                toPoint.applyQuaternion(quaternion);\r\n                toPoint.add(point);\r\n                extrudeShape(tube3, fromPoint, toPoint);\r\n            }\r\n        }\r\n        this.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\r\n        this.setAttribute('normal', new THREE.BufferAttribute(new Float32Array(normals), 3));\r\n    };\r\n    RollerCoasterLiftersGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n    var RollerCoasterShadowGeometry = function (curve, divisions) {\r\n        THREE.BufferGeometry.call(this);\r\n        var vertices = [];\r\n        var up = new THREE.Vector3(0, 1, 0);\r\n        var forward = new THREE.Vector3();\r\n        var quaternion = new THREE.Quaternion();\r\n        var prevQuaternion = new THREE.Quaternion();\r\n        prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\r\n        var point = new THREE.Vector3();\r\n        var prevPoint = new THREE.Vector3();\r\n        prevPoint.copy(curve.getPointAt(0));\r\n        prevPoint.y = 0;\r\n        var vector1 = new THREE.Vector3();\r\n        var vector2 = new THREE.Vector3();\r\n        var vector3 = new THREE.Vector3();\r\n        var vector4 = new THREE.Vector3();\r\n        for (var i = 1; i <= divisions; i++) {\r\n            point.copy(curve.getPointAt(i / divisions));\r\n            point.y = 0;\r\n            forward.subVectors(point, prevPoint);\r\n            var angle = Math.atan2(forward.x, forward.z);\r\n            quaternion.setFromAxisAngle(up, angle);\r\n            vector1.set(-0.3, 0, 0);\r\n            vector1.applyQuaternion(quaternion);\r\n            vector1.add(point);\r\n            vector2.set(0.3, 0, 0);\r\n            vector2.applyQuaternion(quaternion);\r\n            vector2.add(point);\r\n            vector3.set(0.3, 0, 0);\r\n            vector3.applyQuaternion(prevQuaternion);\r\n            vector3.add(prevPoint);\r\n            vector4.set(-0.3, 0, 0);\r\n            vector4.applyQuaternion(prevQuaternion);\r\n            vector4.add(prevPoint);\r\n            vertices.push(vector1.x, vector1.y, vector1.z);\r\n            vertices.push(vector2.x, vector2.y, vector2.z);\r\n            vertices.push(vector4.x, vector4.y, vector4.z);\r\n            vertices.push(vector2.x, vector2.y, vector2.z);\r\n            vertices.push(vector3.x, vector3.y, vector3.z);\r\n            vertices.push(vector4.x, vector4.y, vector4.z);\r\n            prevPoint.copy(point);\r\n            prevQuaternion.copy(quaternion);\r\n        }\r\n        this.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\r\n    };\r\n    RollerCoasterShadowGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n    var SkyGeometry = function () {\r\n        THREE.BufferGeometry.call(this);\r\n        var vertices = [];\r\n        for (var i = 0; i < 100; i++) {\r\n            var x = Math.random() * 800 - 400;\r\n            var y = Math.random() * 50 + 50;\r\n            var z = Math.random() * 800 - 400;\r\n            var size = Math.random() * 40 + 20;\r\n            vertices.push(x - size, y, z - size);\r\n            vertices.push(x + size, y, z - size);\r\n            vertices.push(x - size, y, z + size);\r\n            vertices.push(x + size, y, z - size);\r\n            vertices.push(x + size, y, z + size);\r\n            vertices.push(x - size, y, z + size);\r\n        }\r\n        this.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\r\n    };\r\n    SkyGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n    var TreesGeometry = function (landscape) {\r\n        THREE.BufferGeometry.call(this);\r\n        var vertices = [];\r\n        var colors = [];\r\n        var raycaster = new THREE.Raycaster();\r\n        raycaster.ray.direction.set(0, -1, 0);\r\n        for (var i = 0; i < 2000; i++) {\r\n            var x = Math.random() * 500 - 250;\r\n            var z = Math.random() * 500 - 250;\r\n            raycaster.ray.origin.set(x, 50, z);\r\n            var intersections = raycaster.intersectObject(landscape);\r\n            if (intersections.length === 0)\r\n                continue;\r\n            var y = intersections[0].point.y;\r\n            var height = Math.random() * 5 + 0.5;\r\n            var angle = Math.random() * Math.PI * 2;\r\n            vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\r\n            vertices.push(x, y + height, z);\r\n            vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\r\n            angle += Math.PI / 2;\r\n            vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\r\n            vertices.push(x, y + height, z);\r\n            vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\r\n            var random = Math.random() * 0.1;\r\n            for (var j = 0; j < 6; j++) {\r\n                colors.push(0.2 + random, 0.4 + random, 0);\r\n            }\r\n        }\r\n        this.setAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\r\n        this.setAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3));\r\n    };\r\n    TreesGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\r\n\r\n    return threex.misc.RollerCoaster = {\r\n        RollerCoasterGeometry,\r\n        RollerCoasterLiftersGeometry,\r\n        RollerCoasterShadowGeometry,\r\n        SkyGeometry,\r\n        TreesGeometry\r\n    };\r\n});"]}