{"version":3,"sources":["misc/Ocean.js"],"names":["define","THREE","OceanShaders","Ocean","renderer","camera","scene","options","optionalParameter","value","defaultValue","undefined","this","changed","initial","oceanCamera","OrthographicCamera","position","z","clearColor","Scene","CLEAR_COLOR","geometryOrigin","GEOMETRY_ORIGIN","sunDirectionX","SUN_DIRECTION","sunDirectionY","sunDirectionZ","oceanColor","OCEAN_COLOR","Vector3","skyColor","SKY_COLOR","exposure","EXPOSURE","geometryResolution","GEOMETRY_RESOLUTION","geometrySize","GEOMETRY_SIZE","resolution","RESOLUTION","floatSize","SIZE_OF_FLOAT","windX","INITIAL_WIND","windY","size","INITIAL_SIZE","choppiness","INITIAL_CHOPPINESS","matrixNeedsUpdate","renderTargetType","USE_HALF_FLOAT","HalfFloatType","FloatType","LinearClampParams","minFilter","LinearFilter","magFilter","wrapS","ClampToEdgeWrapping","wrapT","format","RGBAFormat","stencilBuffer","depthBuffer","premultiplyAlpha","type","NearestClampParams","NearestFilter","NearestRepeatParams","RepeatWrapping","initialSpectrumFramebuffer","WebGLRenderTarget","spectrumFramebuffer","pingPhaseFramebuffer","pongPhaseFramebuffer","pingTransformFramebuffer","pongTransformFramebuffer","displacementMapFramebuffer","normalMapFramebuffer","fullscreeenVertexShader","oceanHorizontalShader","oceanHorizontalUniforms","UniformsUtils","clone","uniforms","materialOceanHorizontal","ShaderMaterial","vertexShader","fragmentShader","u_transformSize","u_subtransformSize","u_input","depthTest","oceanVerticalShader","oceanVerticalUniforms","materialOceanVertical","initialSpectrumShader","initialSpectrumUniforms","materialInitialSpectrum","u_wind","Vector2","u_resolution","phaseShader","phaseUniforms","materialPhase","spectrumShader","spectrumUniforms","materialSpectrum","u_initialSpectrum","normalShader","normalUniforms","materialNormal","u_displacementMap","oceanShader","oceanUniforms","materialOcean","u_geometrySize","texture","u_normalMap","u_oceanColor","u_skyColor","u_sunDirection","u_exposure","blending","screenQuad","Mesh","PlaneBufferGeometry","add","generateSeedPhaseTexture","generateMesh","prototype","geometry","rotateX","Math","PI","oceanMesh","render","currentRenderTarget","getRenderTarget","overrideMaterial","renderInitialSpectrum","renderWavePhase","renderSpectrum","renderSpectrumFFT","renderNormalMap","setRenderTarget","pingPhase","phaseArray","window","Float32Array","i","j","random","pingPhaseTexture","DataTexture","set","u_size","clear","material","u_phases","u_deltaTime","deltaTime","u_choppiness","iterations","log","pow"],"mappings":"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","file":"../../misc/Ocean.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../shaders/OceanShaders'\n], function (\n    THREE, \n    OceanShaders\n) {\n    'use strict';\n    var Ocean = function (renderer, camera, scene, options) {\n        this.changed = true;\n        this.initial = true;\n        this.oceanCamera = new THREE.OrthographicCamera();\n        this.oceanCamera.position.z = 1;\n        this.renderer = renderer;\n        this.renderer.clearColor(16777215);\n        this.scene = new THREE.Scene();\n        function optionalParameter(value, defaultValue) {\n            return value !== undefined ? value : defaultValue;\n        }\n        options = options || {};\n        this.clearColor = optionalParameter(options.CLEAR_COLOR, [\n            1,\n            1,\n            1,\n            0\n        ]);\n        this.geometryOrigin = optionalParameter(options.GEOMETRY_ORIGIN, [\n            -1000,\n            -1000\n        ]);\n        this.sunDirectionX = optionalParameter(options.SUN_DIRECTION[0], -1);\n        this.sunDirectionY = optionalParameter(options.SUN_DIRECTION[1], 1);\n        this.sunDirectionZ = optionalParameter(options.SUN_DIRECTION[2], 1);\n        this.oceanColor = optionalParameter(options.OCEAN_COLOR, new THREE.Vector3(0.004, 0.016, 0.047));\n        this.skyColor = optionalParameter(options.SKY_COLOR, new THREE.Vector3(3.2, 9.6, 12.8));\n        this.exposure = optionalParameter(options.EXPOSURE, 0.35);\n        this.geometryResolution = optionalParameter(options.GEOMETRY_RESOLUTION, 32);\n        this.geometrySize = optionalParameter(options.GEOMETRY_SIZE, 2000);\n        this.resolution = optionalParameter(options.RESOLUTION, 64);\n        this.floatSize = optionalParameter(options.SIZE_OF_FLOAT, 4);\n        this.windX = optionalParameter(options.INITIAL_WIND[0], 10);\n        this.windY = optionalParameter(options.INITIAL_WIND[1], 10);\n        this.size = optionalParameter(options.INITIAL_SIZE, 250);\n        this.choppiness = optionalParameter(options.INITIAL_CHOPPINESS, 1.5);\n        this.matrixNeedsUpdate = false;\n        var renderTargetType = optionalParameter(options.USE_HALF_FLOAT, false) ? THREE.HalfFloatType : THREE.FloatType;\n        var LinearClampParams = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: false,\n            premultiplyAlpha: false,\n            type: renderTargetType\n        };\n        var NearestClampParams = {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: false,\n            premultiplyAlpha: false,\n            type: renderTargetType\n        };\n        var NearestRepeatParams = {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            wrapS: THREE.RepeatWrapping,\n            wrapT: THREE.RepeatWrapping,\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: false,\n            premultiplyAlpha: false,\n            type: renderTargetType\n        };\n        this.initialSpectrumFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestRepeatParams);\n        this.spectrumFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n        this.pingPhaseFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n        this.pongPhaseFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n        this.pingTransformFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n        this.pongTransformFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, NearestClampParams);\n        this.displacementMapFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, LinearClampParams);\n        this.normalMapFramebuffer = new THREE.WebGLRenderTarget(this.resolution, this.resolution, LinearClampParams);\n        var fullscreeenVertexShader = OceanShaders['ocean_sim_vertex'];\n        var oceanHorizontalShader = OceanShaders['ocean_subtransform'];\n        var oceanHorizontalUniforms = THREE.UniformsUtils.clone(oceanHorizontalShader.uniforms);\n        this.materialOceanHorizontal = new THREE.ShaderMaterial({\n            uniforms: oceanHorizontalUniforms,\n            vertexShader: fullscreeenVertexShader.vertexShader,\n            fragmentShader: '#define HORIZONTAL \\n' + oceanHorizontalShader.fragmentShader\n        });\n        this.materialOceanHorizontal.uniforms.u_transformSize = { value: this.resolution };\n        this.materialOceanHorizontal.uniforms.u_subtransformSize = { value: null };\n        this.materialOceanHorizontal.uniforms.u_input = { value: null };\n        this.materialOceanHorizontal.depthTest = false;\n        var oceanVerticalShader = OceanShaders['ocean_subtransform'];\n        var oceanVerticalUniforms = THREE.UniformsUtils.clone(oceanVerticalShader.uniforms);\n        this.materialOceanVertical = new THREE.ShaderMaterial({\n            uniforms: oceanVerticalUniforms,\n            vertexShader: fullscreeenVertexShader.vertexShader,\n            fragmentShader: oceanVerticalShader.fragmentShader\n        });\n        this.materialOceanVertical.uniforms.u_transformSize = { value: this.resolution };\n        this.materialOceanVertical.uniforms.u_subtransformSize = { value: null };\n        this.materialOceanVertical.uniforms.u_input = { value: null };\n        this.materialOceanVertical.depthTest = false;\n        var initialSpectrumShader = OceanShaders['ocean_initial_spectrum'];\n        var initialSpectrumUniforms = THREE.UniformsUtils.clone(initialSpectrumShader.uniforms);\n        this.materialInitialSpectrum = new THREE.ShaderMaterial({\n            uniforms: initialSpectrumUniforms,\n            vertexShader: initialSpectrumShader.vertexShader,\n            fragmentShader: initialSpectrumShader.fragmentShader\n        });\n        this.materialInitialSpectrum.uniforms.u_wind = { value: new THREE.Vector2() };\n        this.materialInitialSpectrum.uniforms.u_resolution = { value: this.resolution };\n        this.materialInitialSpectrum.depthTest = false;\n        var phaseShader = OceanShaders['ocean_phase'];\n        var phaseUniforms = THREE.UniformsUtils.clone(phaseShader.uniforms);\n        this.materialPhase = new THREE.ShaderMaterial({\n            uniforms: phaseUniforms,\n            vertexShader: fullscreeenVertexShader.vertexShader,\n            fragmentShader: phaseShader.fragmentShader\n        });\n        this.materialPhase.uniforms.u_resolution = { value: this.resolution };\n        this.materialPhase.depthTest = false;\n        var spectrumShader = OceanShaders['ocean_spectrum'];\n        var spectrumUniforms = THREE.UniformsUtils.clone(spectrumShader.uniforms);\n        this.materialSpectrum = new THREE.ShaderMaterial({\n            uniforms: spectrumUniforms,\n            vertexShader: fullscreeenVertexShader.vertexShader,\n            fragmentShader: spectrumShader.fragmentShader\n        });\n        this.materialSpectrum.uniforms.u_initialSpectrum = { value: null };\n        this.materialSpectrum.uniforms.u_resolution = { value: this.resolution };\n        this.materialSpectrum.depthTest = false;\n        var normalShader = OceanShaders['ocean_normals'];\n        var normalUniforms = THREE.UniformsUtils.clone(normalShader.uniforms);\n        this.materialNormal = new THREE.ShaderMaterial({\n            uniforms: normalUniforms,\n            vertexShader: fullscreeenVertexShader.vertexShader,\n            fragmentShader: normalShader.fragmentShader\n        });\n        this.materialNormal.uniforms.u_displacementMap = { value: null };\n        this.materialNormal.uniforms.u_resolution = { value: this.resolution };\n        this.materialNormal.depthTest = false;\n        var oceanShader = OceanShaders['ocean_main'];\n        var oceanUniforms = THREE.UniformsUtils.clone(oceanShader.uniforms);\n        this.materialOcean = new THREE.ShaderMaterial({\n            uniforms: oceanUniforms,\n            vertexShader: oceanShader.vertexShader,\n            fragmentShader: oceanShader.fragmentShader\n        });\n        this.materialOcean.uniforms.u_geometrySize = { value: this.resolution };\n        this.materialOcean.uniforms.u_displacementMap = { value: this.displacementMapFramebuffer.texture };\n        this.materialOcean.uniforms.u_normalMap = { value: this.normalMapFramebuffer.texture };\n        this.materialOcean.uniforms.u_oceanColor = { value: this.oceanColor };\n        this.materialOcean.uniforms.u_skyColor = { value: this.skyColor };\n        this.materialOcean.uniforms.u_sunDirection = { value: new THREE.Vector3(this.sunDirectionX, this.sunDirectionY, this.sunDirectionZ) };\n        this.materialOcean.uniforms.u_exposure = { value: this.exposure };\n        this.materialOceanHorizontal.blending = 0;\n        this.materialOceanVertical.blending = 0;\n        this.materialInitialSpectrum.blending = 0;\n        this.materialPhase.blending = 0;\n        this.materialSpectrum.blending = 0;\n        this.materialNormal.blending = 0;\n        this.materialOcean.blending = 0;\n        this.screenQuad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\n        this.scene.add(this.screenQuad);\n        this.generateSeedPhaseTexture();\n        this.generateMesh();\n    };\n    Ocean.prototype.generateMesh = function () {\n        var geometry = new THREE.PlaneBufferGeometry(this.geometrySize, this.geometrySize, this.geometryResolution, this.geometryResolution);\n        geometry.rotateX(-Math.PI / 2);\n        this.oceanMesh = new THREE.Mesh(geometry, this.materialOcean);\n    };\n    Ocean.prototype.render = function () {\n        var currentRenderTarget = this.renderer.getRenderTarget();\n        this.scene.overrideMaterial = null;\n        if (this.changed)\n            this.renderInitialSpectrum();\n        this.renderWavePhase();\n        this.renderSpectrum();\n        this.renderSpectrumFFT();\n        this.renderNormalMap();\n        this.scene.overrideMaterial = null;\n        this.renderer.setRenderTarget(currentRenderTarget);\n    };\n    Ocean.prototype.generateSeedPhaseTexture = function () {\n        this.pingPhase = true;\n        var phaseArray = new window.Float32Array(this.resolution * this.resolution * 4);\n        for (var i = 0; i < this.resolution; i++) {\n            for (var j = 0; j < this.resolution; j++) {\n                phaseArray[i * this.resolution * 4 + j * 4] = Math.random() * 2 * Math.PI;\n                phaseArray[i * this.resolution * 4 + j * 4 + 1] = 0;\n                phaseArray[i * this.resolution * 4 + j * 4 + 2] = 0;\n                phaseArray[i * this.resolution * 4 + j * 4 + 3] = 0;\n            }\n        }\n        this.pingPhaseTexture = new THREE.DataTexture(phaseArray, this.resolution, this.resolution, THREE.RGBAFormat);\n        this.pingPhaseTexture.wrapS = THREE.ClampToEdgeWrapping;\n        this.pingPhaseTexture.wrapT = THREE.ClampToEdgeWrapping;\n        this.pingPhaseTexture.type = THREE.FloatType;\n    };\n    Ocean.prototype.renderInitialSpectrum = function () {\n        this.scene.overrideMaterial = this.materialInitialSpectrum;\n        this.materialInitialSpectrum.uniforms.u_wind.value.set(this.windX, this.windY);\n        this.materialInitialSpectrum.uniforms.u_size.value = this.size;\n        this.renderer.setRenderTarget(this.initialSpectrumFramebuffer);\n        this.renderer.clear();\n        this.renderer.render(this.scene, this.oceanCamera);\n    };\n    Ocean.prototype.renderWavePhase = function () {\n        this.scene.overrideMaterial = this.materialPhase;\n        this.screenQuad.material = this.materialPhase;\n        if (this.initial) {\n            this.materialPhase.uniforms.u_phases.value = this.pingPhaseTexture;\n            this.initial = false;\n        } else {\n            this.materialPhase.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture;\n        }\n        this.materialPhase.uniforms.u_deltaTime.value = this.deltaTime;\n        this.materialPhase.uniforms.u_size.value = this.size;\n        this.renderer.setRenderTarget(this.pingPhase ? this.pongPhaseFramebuffer : this.pingPhaseFramebuffer);\n        this.renderer.render(this.scene, this.oceanCamera);\n        this.pingPhase = !this.pingPhase;\n    };\n    Ocean.prototype.renderSpectrum = function () {\n        this.scene.overrideMaterial = this.materialSpectrum;\n        this.materialSpectrum.uniforms.u_initialSpectrum.value = this.initialSpectrumFramebuffer.texture;\n        this.materialSpectrum.uniforms.u_phases.value = this.pingPhase ? this.pingPhaseFramebuffer.texture : this.pongPhaseFramebuffer.texture;\n        this.materialSpectrum.uniforms.u_choppiness.value = this.choppiness;\n        this.materialSpectrum.uniforms.u_size.value = this.size;\n        this.renderer.setRenderTarget(this.spectrumFramebuffer);\n        this.renderer.render(this.scene, this.oceanCamera);\n    };\n    Ocean.prototype.renderSpectrumFFT = function () {\n        var iterations = Math.log(this.resolution) / Math.log(2);\n        this.scene.overrideMaterial = this.materialOceanHorizontal;\n        for (var i = 0; i < iterations; i++) {\n            if (i === 0) {\n                this.materialOceanHorizontal.uniforms.u_input.value = this.spectrumFramebuffer.texture;\n                this.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow(2, i % iterations + 1);\n                this.renderer.setRenderTarget(this.pingTransformFramebuffer);\n                this.renderer.render(this.scene, this.oceanCamera);\n            } else if (i % 2 === 1) {\n                this.materialOceanHorizontal.uniforms.u_input.value = this.pingTransformFramebuffer.texture;\n                this.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow(2, i % iterations + 1);\n                this.renderer.setRenderTarget(this.pongTransformFramebuffer);\n                this.renderer.render(this.scene, this.oceanCamera);\n            } else {\n                this.materialOceanHorizontal.uniforms.u_input.value = this.pongTransformFramebuffer.texture;\n                this.materialOceanHorizontal.uniforms.u_subtransformSize.value = Math.pow(2, i % iterations + 1);\n                this.renderer.setRenderTarget(this.pingTransformFramebuffer);\n                this.renderer.render(this.scene, this.oceanCamera);\n            }\n        }\n        this.scene.overrideMaterial = this.materialOceanVertical;\n        for (var i = iterations; i < iterations * 2; i++) {\n            if (i === iterations * 2 - 1) {\n                this.materialOceanVertical.uniforms.u_input.value = iterations % 2 === 0 ? this.pingTransformFramebuffer.texture : this.pongTransformFramebuffer.texture;\n                this.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow(2, i % iterations + 1);\n                this.renderer.setRenderTarget(this.displacementMapFramebuffer);\n                this.renderer.render(this.scene, this.oceanCamera);\n            } else if (i % 2 === 1) {\n                this.materialOceanVertical.uniforms.u_input.value = this.pingTransformFramebuffer.texture;\n                this.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow(2, i % iterations + 1);\n                this.renderer.setRenderTarget(this.pongTransformFramebuffer);\n                this.renderer.render(this.scene, this.oceanCamera);\n            } else {\n                this.materialOceanVertical.uniforms.u_input.value = this.pongTransformFramebuffer.texture;\n                this.materialOceanVertical.uniforms.u_subtransformSize.value = Math.pow(2, i % iterations + 1);\n                this.renderer.setRenderTarget(this.pingTransformFramebuffer);\n                this.renderer.render(this.scene, this.oceanCamera);\n            }\n        }\n    };\n    Ocean.prototype.renderNormalMap = function () {\n        this.scene.overrideMaterial = this.materialNormal;\n        if (this.changed)\n            this.materialNormal.uniforms.u_size.value = this.size;\n        this.materialNormal.uniforms.u_displacementMap.value = this.displacementMapFramebuffer.texture;\n        this.renderer.setRenderTarget(this.normalMapFramebuffer);\n        this.renderer.clear();\n        this.renderer.render(this.scene, this.oceanCamera);\n    };\n    return Ocean;\n});"]}