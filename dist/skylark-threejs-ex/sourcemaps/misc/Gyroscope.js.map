{"version":3,"sources":["misc/Gyroscope.js"],"names":["define","THREE","threex","translationObject","quaternionObject","scaleObject","translationWorld","quaternionWorld","scaleWorld","Gyroscope","Object3D","call","this","prototype","Object","create","constructor","updateMatrixWorld","Vector3","Quaternion","force","matrixAutoUpdate","updateMatrix","matrixWorldNeedsUpdate","parent","matrixWorld","multiplyMatrices","matrix","decompose","compose","copy","i","l","children","length","misc"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAMQC,EACAC,EACAC,EACAC,EACAC,EACAC,EAXJC,EAAY,WACZR,EAAMS,SAASC,KAAKC,OA+BxB,OA7BAH,EAAUI,UAAYC,OAAOC,OAAOd,EAAMS,SAASG,YAC/BG,YAAcP,EAClCA,EAAUI,UAAUI,mBACZd,EAAoB,IAAIF,EAAMiB,QAC9Bd,EAAmB,IAAIH,EAAMkB,WAC7Bd,EAAc,IAAIJ,EAAMiB,QACxBZ,EAAmB,IAAIL,EAAMiB,QAC7BX,EAAkB,IAAIN,EAAMkB,WAC5BX,EAAa,IAAIP,EAAMiB,QACpB,SAA2BE,GAC9BR,KAAKS,kBAAoBT,KAAKU,gBAC1BV,KAAKW,wBAA0BH,KACX,OAAhBR,KAAKY,QACLZ,KAAKa,YAAYC,iBAAiBd,KAAKY,OAAOC,YAAab,KAAKe,QAChEf,KAAKa,YAAYG,UAAUtB,EAAkBC,EAAiBC,GAC9DI,KAAKe,OAAOC,UAAUzB,EAAmBC,EAAkBC,GAC3DO,KAAKa,YAAYI,QAAQvB,EAAkBF,EAAkBI,IAE7DI,KAAKa,YAAYK,KAAKlB,KAAKe,QAE/Bf,KAAKW,wBAAyB,EAC9BH,GAAQ,GAEZ,IAAK,IAAIW,EAAI,EAAGC,EAAIpB,KAAKqB,SAASC,OAAQH,EAAIC,EAAGD,IAC7CnB,KAAKqB,SAASF,GAAGd,kBAAkBG,KAKxClB,EAAOiC,KAAK1B,UAAYA","file":"../../misc/Gyroscope.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var Gyroscope = function () {\n        THREE.Object3D.call(this);\n    };\n    Gyroscope.prototype = Object.create(THREE.Object3D.prototype);\n    Gyroscope.prototype.constructor = Gyroscope;\n    Gyroscope.prototype.updateMatrixWorld = function () {\n        var translationObject = new THREE.Vector3();\n        var quaternionObject = new THREE.Quaternion();\n        var scaleObject = new THREE.Vector3();\n        var translationWorld = new THREE.Vector3();\n        var quaternionWorld = new THREE.Quaternion();\n        var scaleWorld = new THREE.Vector3();\n        return function updateMatrixWorld(force) {\n            this.matrixAutoUpdate && this.updateMatrix();\n            if (this.matrixWorldNeedsUpdate || force) {\n                if (this.parent !== null) {\n                    this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n                    this.matrixWorld.decompose(translationWorld, quaternionWorld, scaleWorld);\n                    this.matrix.decompose(translationObject, quaternionObject, scaleObject);\n                    this.matrixWorld.compose(translationWorld, quaternionObject, scaleWorld);\n                } else {\n                    this.matrixWorld.copy(this.matrix);\n                }\n                this.matrixWorldNeedsUpdate = false;\n                force = true;\n            }\n            for (var i = 0, l = this.children.length; i < l; i++) {\n                this.children[i].updateMatrixWorld(force);\n            }\n        };\n    }();\n\n    return threex.misc.Gyroscope = Gyroscope;\n});"]}