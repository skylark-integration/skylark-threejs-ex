{"version":3,"sources":["misc/ConvexObjectBreaker.js"],"names":["define","THREE","threex","ConvexGeometry","v1","ConvexObjectBreaker","minSizeForBreak","smallDelta","this","tempLine1","Line3","tempPlane1","Plane","tempPlane2","tempPlane_Cut","tempCM1","Vector3","tempCM2","tempVector3","tempVector3_2","tempVector3_3","tempVector3_P0","tempVector3_P1","tempVector3_P2","tempVector3_N0","tempVector3_N1","tempVector3_AB","tempVector3_CB","tempResultObjects","object1","object2","segments","i","prototype","constructor","prepareBreakableObject","object","mass","velocity","angularVelocity","breakable","geometry","isBufferGeometry","console","error","userData","clone","subdivideByImpact","pointOfImpact","normal","maxRadialIterations","maxRandomIterations","debris","addVectors","setFromCoplanarPoints","position","maxTotalIterations","scope","subdivideRadial","subObject","startAngle","endAngle","numIterations","Math","random","push","angle","PI","copy","constant","sub","applyAxisAngle","add","cutByPlane","obj1","obj2","plane","output","coords","attributes","array","normals","numPoints","length","numFaces","indices","getIndex","getVertexIndex","faceIdx","vert","idx","points1","points2","delta","numPointPairs","p0","p1","n0","n1","a1","b1","c1","set","j","a2","b2","c2","dot","localPlane","updateMatrix","transformPlaneToLocalSpace","matrix","va","vb","vc","segment","i0","i1","mark0","d","distanceToPoint","mark1","start","end","intersection","undefined","intersectLine","segmentedObject1","segmentedObject2","newMass","radius1","numPoints1","divideScalar","p","max","x","y","z","radius2","numPoints2","numObjects","Mesh","ConvexBufferGeometry","material","quaternion","transformFreeVector","v","m","e","elements","transformFreeVectorInverse","transformTiedVectorInverse","resultPlane","referencePoint","coplanarPoint","misc"],"mappings":"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","file":"../../misc/ConvexObjectBreaker.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../geometries/ConvexGeometry'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    ConvexGeometry\r\n) {\r\n    'use strict';\r\n    var ConvexObjectBreaker = function (minSizeForBreak, smallDelta) {\r\n        this.minSizeForBreak = minSizeForBreak || 1.4;\r\n        this.smallDelta = smallDelta || 0.0001;\r\n        this.tempLine1 = new THREE.Line3();\r\n        this.tempPlane1 = new THREE.Plane();\r\n        this.tempPlane2 = new THREE.Plane();\r\n        this.tempPlane_Cut = new THREE.Plane();\r\n        this.tempCM1 = new THREE.Vector3();\r\n        this.tempCM2 = new THREE.Vector3();\r\n        this.tempVector3 = new THREE.Vector3();\r\n        this.tempVector3_2 = new THREE.Vector3();\r\n        this.tempVector3_3 = new THREE.Vector3();\r\n        this.tempVector3_P0 = new THREE.Vector3();\r\n        this.tempVector3_P1 = new THREE.Vector3();\r\n        this.tempVector3_P2 = new THREE.Vector3();\r\n        this.tempVector3_N0 = new THREE.Vector3();\r\n        this.tempVector3_N1 = new THREE.Vector3();\r\n        this.tempVector3_AB = new THREE.Vector3();\r\n        this.tempVector3_CB = new THREE.Vector3();\r\n        this.tempResultObjects = {\r\n            object1: null,\r\n            object2: null\r\n        };\r\n        this.segments = [];\r\n        var n = 30 * 30;\r\n        for (var i = 0; i < n; i++)\r\n            this.segments[i] = false;\r\n    };\r\n    ConvexObjectBreaker.prototype = {\r\n        constructor: ConvexObjectBreaker,\r\n        prepareBreakableObject: function (object, mass, velocity, angularVelocity, breakable) {\r\n            if (!object.geometry.isBufferGeometry) {\r\n                console.error('THREE.ConvexObjectBreaker.prepareBreakableObject(): Parameter object must have a BufferGeometry.');\r\n            }\r\n            var userData = object.userData;\r\n            userData.mass = mass;\r\n            userData.velocity = velocity.clone();\r\n            userData.angularVelocity = angularVelocity.clone();\r\n            userData.breakable = breakable;\r\n        },\r\n        subdivideByImpact: function (object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\r\n            var debris = [];\r\n            var tempPlane1 = this.tempPlane1;\r\n            var tempPlane2 = this.tempPlane2;\r\n            this.tempVector3.addVectors(pointOfImpact, normal);\r\n            tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\r\n            var maxTotalIterations = maxRandomIterations + maxRadialIterations;\r\n            var scope = this;\r\n            function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\r\n                if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\r\n                    debris.push(subObject);\r\n                    return;\r\n                }\r\n                var angle = Math.PI;\r\n                if (numIterations === 0) {\r\n                    tempPlane2.normal.copy(tempPlane1.normal);\r\n                    tempPlane2.constant = tempPlane1.constant;\r\n                } else {\r\n                    if (numIterations <= maxRadialIterations) {\r\n                        angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle;\r\n                        scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\r\n                        tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\r\n                    } else {\r\n                        angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI;\r\n                        scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\r\n                        scope.tempVector3_3.copy(normal).add(subObject.position);\r\n                        tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\r\n                    }\r\n                }\r\n                scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\r\n                var obj1 = scope.tempResultObjects.object1;\r\n                var obj2 = scope.tempResultObjects.object2;\r\n                if (obj1) {\r\n                    subdivideRadial(obj1, startAngle, angle, numIterations + 1);\r\n                }\r\n                if (obj2) {\r\n                    subdivideRadial(obj2, angle, endAngle, numIterations + 1);\r\n                }\r\n            }\r\n            subdivideRadial(object, 0, 2 * Math.PI, 0);\r\n            return debris;\r\n        },\r\n        cutByPlane: function (object, plane, output) {\r\n            var geometry = object.geometry;\r\n            var coords = geometry.attributes.position.array;\r\n            var normals = geometry.attributes.normal.array;\r\n            var numPoints = coords.length / 3;\r\n            var numFaces = numPoints / 3;\r\n            var indices = geometry.getIndex();\r\n            if (indices) {\r\n                indices = indices.array;\r\n                numFaces = indices.length / 3;\r\n            }\r\n            function getVertexIndex(faceIdx, vert) {\r\n                var idx = faceIdx * 3 + vert;\r\n                return indices ? indices[idx] : idx;\r\n            }\r\n            var points1 = [];\r\n            var points2 = [];\r\n            var delta = this.smallDelta;\r\n            var numPointPairs = numPoints * numPoints;\r\n            for (var i = 0; i < numPointPairs; i++)\r\n                this.segments[i] = false;\r\n            var p0 = this.tempVector3_P0;\r\n            var p1 = this.tempVector3_P1;\r\n            var n0 = this.tempVector3_N0;\r\n            var n1 = this.tempVector3_N1;\r\n            for (var i = 0; i < numFaces - 1; i++) {\r\n                var a1 = getVertexIndex(i, 0);\r\n                var b1 = getVertexIndex(i, 1);\r\n                var c1 = getVertexIndex(i, 2);\r\n                n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\r\n                for (var j = i + 1; j < numFaces; j++) {\r\n                    var a2 = getVertexIndex(j, 0);\r\n                    var b2 = getVertexIndex(j, 1);\r\n                    var c2 = getVertexIndex(j, 2);\r\n                    n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\r\n                    var coplanar = 1 - n0.dot(n1) < delta;\r\n                    if (coplanar) {\r\n                        if (a1 === a2 || a1 === b2 || a1 === c2) {\r\n                            if (b1 === a2 || b1 === b2 || b1 === c2) {\r\n                                this.segments[a1 * numPoints + b1] = true;\r\n                                this.segments[b1 * numPoints + a1] = true;\r\n                            } else {\r\n                                this.segments[c1 * numPoints + a1] = true;\r\n                                this.segments[a1 * numPoints + c1] = true;\r\n                            }\r\n                        } else if (b1 === a2 || b1 === b2 || b1 === c2) {\r\n                            this.segments[c1 * numPoints + b1] = true;\r\n                            this.segments[b1 * numPoints + c1] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var localPlane = this.tempPlane_Cut;\r\n            object.updateMatrix();\r\n            ConvexObjectBreaker.transformPlaneToLocalSpace(plane, object.matrix, localPlane);\r\n            for (var i = 0; i < numFaces; i++) {\r\n                var va = getVertexIndex(i, 0);\r\n                var vb = getVertexIndex(i, 1);\r\n                var vc = getVertexIndex(i, 2);\r\n                for (var segment = 0; segment < 3; segment++) {\r\n                    var i0 = segment === 0 ? va : segment === 1 ? vb : vc;\r\n                    var i1 = segment === 0 ? vb : segment === 1 ? vc : va;\r\n                    var segmentState = this.segments[i0 * numPoints + i1];\r\n                    if (segmentState)\r\n                        continue;\r\n                    this.segments[i0 * numPoints + i1] = true;\r\n                    this.segments[i1 * numPoints + i0] = true;\r\n                    p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\r\n                    p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]);\r\n                    var mark0 = 0;\r\n                    var d = localPlane.distanceToPoint(p0);\r\n                    if (d > delta) {\r\n                        mark0 = 2;\r\n                        points2.push(p0.clone());\r\n                    } else if (d < -delta) {\r\n                        mark0 = 1;\r\n                        points1.push(p0.clone());\r\n                    } else {\r\n                        mark0 = 3;\r\n                        points1.push(p0.clone());\r\n                        points2.push(p0.clone());\r\n                    }\r\n                    var mark1 = 0;\r\n                    var d = localPlane.distanceToPoint(p1);\r\n                    if (d > delta) {\r\n                        mark1 = 2;\r\n                        points2.push(p1.clone());\r\n                    } else if (d < -delta) {\r\n                        mark1 = 1;\r\n                        points1.push(p1.clone());\r\n                    } else {\r\n                        mark1 = 3;\r\n                        points1.push(p1.clone());\r\n                        points2.push(p1.clone());\r\n                    }\r\n                    if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\r\n                        this.tempLine1.start.copy(p0);\r\n                        this.tempLine1.end.copy(p1);\r\n                        var intersection = new THREE.Vector3();\r\n                        intersection = localPlane.intersectLine(this.tempLine1, intersection);\r\n                        if (intersection === undefined) {\r\n                            console.error('Internal error: segment does not intersect plane.');\r\n                            output.segmentedObject1 = null;\r\n                            output.segmentedObject2 = null;\r\n                            return 0;\r\n                        }\r\n                        points1.push(intersection);\r\n                        points2.push(intersection.clone());\r\n                    }\r\n                }\r\n            }\r\n            var newMass = object.userData.mass * 0.5;\r\n            this.tempCM1.set(0, 0, 0);\r\n            var radius1 = 0;\r\n            var numPoints1 = points1.length;\r\n            if (numPoints1 > 0) {\r\n                for (var i = 0; i < numPoints1; i++)\r\n                    this.tempCM1.add(points1[i]);\r\n                this.tempCM1.divideScalar(numPoints1);\r\n                for (var i = 0; i < numPoints1; i++) {\r\n                    var p = points1[i];\r\n                    p.sub(this.tempCM1);\r\n                    radius1 = Math.max(radius1, p.x, p.y, p.z);\r\n                }\r\n                this.tempCM1.add(object.position);\r\n            }\r\n            this.tempCM2.set(0, 0, 0);\r\n            var radius2 = 0;\r\n            var numPoints2 = points2.length;\r\n            if (numPoints2 > 0) {\r\n                for (var i = 0; i < numPoints2; i++)\r\n                    this.tempCM2.add(points2[i]);\r\n                this.tempCM2.divideScalar(numPoints2);\r\n                for (var i = 0; i < numPoints2; i++) {\r\n                    var p = points2[i];\r\n                    p.sub(this.tempCM2);\r\n                    radius2 = Math.max(radius2, p.x, p.y, p.z);\r\n                }\r\n                this.tempCM2.add(object.position);\r\n            }\r\n            var object1 = null;\r\n            var object2 = null;\r\n            var numObjects = 0;\r\n            if (numPoints1 > 4) {\r\n                object1 = new THREE.Mesh(new ConvexBufferGeometry(points1), object.material);\r\n                object1.position.copy(this.tempCM1);\r\n                object1.quaternion.copy(object.quaternion);\r\n                this.prepareBreakableObject(object1, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius1 > this.minSizeForBreak);\r\n                numObjects++;\r\n            }\r\n            if (numPoints2 > 4) {\r\n                object2 = new THREE.Mesh(new ConvexBufferGeometry(points2), object.material);\r\n                object2.position.copy(this.tempCM2);\r\n                object2.quaternion.copy(object.quaternion);\r\n                this.prepareBreakableObject(object2, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius2 > this.minSizeForBreak);\r\n                numObjects++;\r\n            }\r\n            output.object1 = object1;\r\n            output.object2 = object2;\r\n            return numObjects;\r\n        }\r\n    };\r\n    ConvexObjectBreaker.transformFreeVector = function (v, m) {\r\n        var x = v.x, y = v.y, z = v.z;\r\n        var e = m.elements;\r\n        v.x = e[0] * x + e[4] * y + e[8] * z;\r\n        v.y = e[1] * x + e[5] * y + e[9] * z;\r\n        v.z = e[2] * x + e[6] * y + e[10] * z;\r\n        return v;\r\n    };\r\n    ConvexObjectBreaker.transformFreeVectorInverse = function (v, m) {\r\n        var x = v.x, y = v.y, z = v.z;\r\n        var e = m.elements;\r\n        v.x = e[0] * x + e[1] * y + e[2] * z;\r\n        v.y = e[4] * x + e[5] * y + e[6] * z;\r\n        v.z = e[8] * x + e[9] * y + e[10] * z;\r\n        return v;\r\n    };\r\n    ConvexObjectBreaker.transformTiedVectorInverse = function (v, m) {\r\n        var x = v.x, y = v.y, z = v.z;\r\n        var e = m.elements;\r\n        v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\r\n        v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\r\n        v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\r\n        return v;\r\n    };\r\n    ConvexObjectBreaker.transformPlaneToLocalSpace = function () {\r\n        var v1 = new THREE.Vector3();\r\n        return function transformPlaneToLocalSpace(plane, m, resultPlane) {\r\n            resultPlane.normal.copy(plane.normal);\r\n            resultPlane.constant = plane.constant;\r\n            var referencePoint = ConvexObjectBreaker.transformTiedVectorInverse(plane.coplanarPoint(v1), m);\r\n            ConvexObjectBreaker.transformFreeVectorInverse(resultPlane.normal, m);\r\n            resultPlane.constant = -referencePoint.dot(resultPlane.normal);\r\n        };\r\n    }();\r\n\r\n    return threex.misc.ConvexObjectBreaker = ConvexObjectBreaker;\r\n});"]}