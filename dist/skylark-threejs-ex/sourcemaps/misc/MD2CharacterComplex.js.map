{"version":3,"sources":["misc/MD2CharacterComplex.js"],"names":["define","THREE","threex","MD2Loader","MorphBlendMesh","misc","MD2CharacterComplex","scope","this","loadTextures","baseUrl","textureUrls","textureLoader","TextureLoader","textures","i","length","load","checkLoadingComplete","mapping","UVMapping","name","encoding","sRGBEncoding","createPart","geometry","skinMap","materialWireframe","MeshLambertMaterial","color","wireframe","morphTargets","morphNormals","materialTexture","map","mesh","rotation","y","Math","PI","autoCreateAnimations","animationFPS","loadCounter","onLoadComplete","exponentialEaseOut","k","pow","scale","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDecceleration","angularSpeed","root","Object3D","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","undefined","meshes","animations","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","enableShadows","enable","castShadow","receiveShadow","setVisible","visible","shareParts","original","set","position","add","push","loadParts","config","skins","weaponsTextures","loader","body","geo","boundingBox","Box3","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","setSkin","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","abs","setAnimationDirectionForward","setAnimationDirectionBackward","MathUtils","clamp","forwardDelta","x","sin","z","cos"],"mappings":"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","file":"../../misc/MD2CharacterComplex.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\",\r\n    '../loaders/MD2Loader',\r\n    './MorphBlendMesh'\r\n], function (\r\n    THREE, \r\n    threex,\r\n    MD2Loader, \r\n    MorphBlendMesh\r\n) {\r\n    'use strict';\r\n    var MD2CharacterComplex = function () {\r\n        var scope = this;\r\n        this.scale = 1;\r\n        this.animationFPS = 6;\r\n        this.transitionFrames = 15;\r\n        this.maxSpeed = 275;\r\n        this.maxReverseSpeed = -275;\r\n        this.frontAcceleration = 600;\r\n        this.backAcceleration = 600;\r\n        this.frontDecceleration = 600;\r\n        this.angularSpeed = 2.5;\r\n        this.root = new THREE.Object3D();\r\n        this.meshBody = null;\r\n        this.meshWeapon = null;\r\n        this.controls = null;\r\n        this.skinsBody = [];\r\n        this.skinsWeapon = [];\r\n        this.weapons = [];\r\n        this.currentSkin = undefined;\r\n        this.onLoadComplete = function () {\r\n        };\r\n        this.meshes = [];\r\n        this.animations = {};\r\n        this.loadCounter = 0;\r\n        this.speed = 0;\r\n        this.bodyOrientation = 0;\r\n        this.walkSpeed = this.maxSpeed;\r\n        this.crouchSpeed = this.maxSpeed * 0.5;\r\n        this.activeAnimation = null;\r\n        this.oldAnimation = null;\r\n        this.enableShadows = function (enable) {\r\n            for (var i = 0; i < this.meshes.length; i++) {\r\n                this.meshes[i].castShadow = enable;\r\n                this.meshes[i].receiveShadow = enable;\r\n            }\r\n        };\r\n        this.setVisible = function (enable) {\r\n            for (var i = 0; i < this.meshes.length; i++) {\r\n                this.meshes[i].visible = enable;\r\n                this.meshes[i].visible = enable;\r\n            }\r\n        };\r\n        this.shareParts = function (original) {\r\n            this.animations = original.animations;\r\n            this.walkSpeed = original.walkSpeed;\r\n            this.crouchSpeed = original.crouchSpeed;\r\n            this.skinsBody = original.skinsBody;\r\n            this.skinsWeapon = original.skinsWeapon;\r\n            var mesh = createPart(original.meshBody.geometry, this.skinsBody[0]);\r\n            mesh.scale.set(this.scale, this.scale, this.scale);\r\n            this.root.position.y = original.root.position.y;\r\n            this.root.add(mesh);\r\n            this.meshBody = mesh;\r\n            this.meshes.push(mesh);\r\n            for (var i = 0; i < original.weapons.length; i++) {\r\n                var meshWeapon = createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\r\n                meshWeapon.scale.set(this.scale, this.scale, this.scale);\r\n                meshWeapon.visible = false;\r\n                meshWeapon.name = original.weapons[i].name;\r\n                this.root.add(meshWeapon);\r\n                this.weapons[i] = meshWeapon;\r\n                this.meshWeapon = meshWeapon;\r\n                this.meshes.push(meshWeapon);\r\n            }\r\n        };\r\n        this.loadParts = function (config) {\r\n            this.animations = config.animations;\r\n            this.walkSpeed = config.walkSpeed;\r\n            this.crouchSpeed = config.crouchSpeed;\r\n            this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\r\n            var weaponsTextures = [];\r\n            for (var i = 0; i < config.weapons.length; i++)\r\n                weaponsTextures[i] = config.weapons[i][1];\r\n            this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins);\r\n            this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures);\r\n            var loader = new MD2Loader();\r\n            loader.load(config.baseUrl + config.body, function (geo) {\r\n                var boundingBox = new THREE.Box3();\r\n                boundingBox.setFromBufferAttribute(geo.attributes.position);\r\n                scope.root.position.y = -scope.scale * boundingBox.min.y;\r\n                var mesh = createPart(geo, scope.skinsBody[0]);\r\n                mesh.scale.set(scope.scale, scope.scale, scope.scale);\r\n                scope.root.add(mesh);\r\n                scope.meshBody = mesh;\r\n                scope.meshes.push(mesh);\r\n                checkLoadingComplete();\r\n            });\r\n            var generateCallback = function (index, name) {\r\n                return function (geo) {\r\n                    var mesh = createPart(geo, scope.skinsWeapon[index]);\r\n                    mesh.scale.set(scope.scale, scope.scale, scope.scale);\r\n                    mesh.visible = false;\r\n                    mesh.name = name;\r\n                    scope.root.add(mesh);\r\n                    scope.weapons[index] = mesh;\r\n                    scope.meshWeapon = mesh;\r\n                    scope.meshes.push(mesh);\r\n                    checkLoadingComplete();\r\n                };\r\n            };\r\n            for (var i = 0; i < config.weapons.length; i++) {\r\n                loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\r\n            }\r\n        };\r\n        this.setPlaybackRate = function (rate) {\r\n            if (this.meshBody)\r\n                this.meshBody.duration = this.meshBody.baseDuration / rate;\r\n            if (this.meshWeapon)\r\n                this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\r\n        };\r\n        this.setWireframe = function (wireframeEnabled) {\r\n            if (wireframeEnabled) {\r\n                if (this.meshBody)\r\n                    this.meshBody.material = this.meshBody.materialWireframe;\r\n                if (this.meshWeapon)\r\n                    this.meshWeapon.material = this.meshWeapon.materialWireframe;\r\n            } else {\r\n                if (this.meshBody)\r\n                    this.meshBody.material = this.meshBody.materialTexture;\r\n                if (this.meshWeapon)\r\n                    this.meshWeapon.material = this.meshWeapon.materialTexture;\r\n            }\r\n        };\r\n        this.setSkin = function (index) {\r\n            if (this.meshBody && this.meshBody.material.wireframe === false) {\r\n                this.meshBody.material.map = this.skinsBody[index];\r\n                this.currentSkin = index;\r\n            }\r\n        };\r\n        this.setWeapon = function (index) {\r\n            for (var i = 0; i < this.weapons.length; i++)\r\n                this.weapons[i].visible = false;\r\n            var activeWeapon = this.weapons[index];\r\n            if (activeWeapon) {\r\n                activeWeapon.visible = true;\r\n                this.meshWeapon = activeWeapon;\r\n                if (this.activeAnimation) {\r\n                    activeWeapon.playAnimation(this.activeAnimation);\r\n                    this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\r\n                }\r\n            }\r\n        };\r\n        this.setAnimation = function (animationName) {\r\n            if (animationName === this.activeAnimation || !animationName)\r\n                return;\r\n            if (this.meshBody) {\r\n                this.meshBody.setAnimationWeight(animationName, 0);\r\n                this.meshBody.playAnimation(animationName);\r\n                this.oldAnimation = this.activeAnimation;\r\n                this.activeAnimation = animationName;\r\n                this.blendCounter = this.transitionFrames;\r\n            }\r\n            if (this.meshWeapon) {\r\n                this.meshWeapon.setAnimationWeight(animationName, 0);\r\n                this.meshWeapon.playAnimation(animationName);\r\n            }\r\n        };\r\n        this.update = function (delta) {\r\n            if (this.controls)\r\n                this.updateMovementModel(delta);\r\n            if (this.animations) {\r\n                this.updateBehaviors();\r\n                this.updateAnimations(delta);\r\n            }\r\n        };\r\n        this.updateAnimations = function (delta) {\r\n            var mix = 1;\r\n            if (this.blendCounter > 0) {\r\n                mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\r\n                this.blendCounter -= 1;\r\n            }\r\n            if (this.meshBody) {\r\n                this.meshBody.update(delta);\r\n                this.meshBody.setAnimationWeight(this.activeAnimation, mix);\r\n                this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\r\n            }\r\n            if (this.meshWeapon) {\r\n                this.meshWeapon.update(delta);\r\n                this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\r\n                this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\r\n            }\r\n        };\r\n        this.updateBehaviors = function () {\r\n            var controls = this.controls;\r\n            var animations = this.animations;\r\n            var moveAnimation, idleAnimation;\r\n            if (controls.crouch) {\r\n                moveAnimation = animations['crouchMove'];\r\n                idleAnimation = animations['crouchIdle'];\r\n            } else {\r\n                moveAnimation = animations['move'];\r\n                idleAnimation = animations['idle'];\r\n            }\r\n            if (controls.jump) {\r\n                moveAnimation = animations['jump'];\r\n                idleAnimation = animations['jump'];\r\n            }\r\n            if (controls.attack) {\r\n                if (controls.crouch) {\r\n                    moveAnimation = animations['crouchAttack'];\r\n                    idleAnimation = animations['crouchAttack'];\r\n                } else {\r\n                    moveAnimation = animations['attack'];\r\n                    idleAnimation = animations['attack'];\r\n                }\r\n            }\r\n            if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\r\n                if (this.activeAnimation !== moveAnimation) {\r\n                    this.setAnimation(moveAnimation);\r\n                }\r\n            }\r\n            if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\r\n                if (this.activeAnimation !== idleAnimation) {\r\n                    this.setAnimation(idleAnimation);\r\n                }\r\n            }\r\n            if (controls.moveForward) {\r\n                if (this.meshBody) {\r\n                    this.meshBody.setAnimationDirectionForward(this.activeAnimation);\r\n                    this.meshBody.setAnimationDirectionForward(this.oldAnimation);\r\n                }\r\n                if (this.meshWeapon) {\r\n                    this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\r\n                    this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\r\n                }\r\n            }\r\n            if (controls.moveBackward) {\r\n                if (this.meshBody) {\r\n                    this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\r\n                    this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\r\n                }\r\n                if (this.meshWeapon) {\r\n                    this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\r\n                    this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\r\n                }\r\n            }\r\n        };\r\n        this.updateMovementModel = function (delta) {\r\n            var controls = this.controls;\r\n            if (controls.crouch)\r\n                this.maxSpeed = this.crouchSpeed;\r\n            else\r\n                this.maxSpeed = this.walkSpeed;\r\n            this.maxReverseSpeed = -this.maxSpeed;\r\n            if (controls.moveForward)\r\n                this.speed = THREE.MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\r\n            if (controls.moveBackward)\r\n                this.speed = THREE.MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\r\n            var dir = 1;\r\n            if (controls.moveLeft) {\r\n                this.bodyOrientation += delta * this.angularSpeed;\r\n                this.speed = THREE.MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\r\n            }\r\n            if (controls.moveRight) {\r\n                this.bodyOrientation -= delta * this.angularSpeed;\r\n                this.speed = THREE.MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\r\n            }\r\n            if (!(controls.moveForward || controls.moveBackward)) {\r\n                if (this.speed > 0) {\r\n                    var k = exponentialEaseOut(this.speed / this.maxSpeed);\r\n                    this.speed = THREE.MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\r\n                } else {\r\n                    var k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\r\n                    this.speed = THREE.MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\r\n                }\r\n            }\r\n            var forwardDelta = this.speed * delta;\r\n            this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\r\n            this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\r\n            this.root.rotation.y = this.bodyOrientation;\r\n        };\r\n        function loadTextures(baseUrl, textureUrls) {\r\n            var textureLoader = new THREE.TextureLoader();\r\n            var textures = [];\r\n            for (var i = 0; i < textureUrls.length; i++) {\r\n                textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\r\n                textures[i].mapping = THREE.UVMapping;\r\n                textures[i].name = textureUrls[i];\r\n                textures[i].encoding = THREE.sRGBEncoding;\r\n            }\r\n            return textures;\r\n        }\r\n        function createPart(geometry, skinMap) {\r\n            var materialWireframe = new THREE.MeshLambertMaterial({\r\n                color: 16755200,\r\n                wireframe: true,\r\n                morphTargets: true,\r\n                morphNormals: true\r\n            });\r\n            var materialTexture = new THREE.MeshLambertMaterial({\r\n                color: 16777215,\r\n                wireframe: false,\r\n                map: skinMap,\r\n                morphTargets: true,\r\n                morphNormals: true\r\n            });\r\n            var mesh = new MorphBlendMesh(geometry, materialTexture);\r\n            mesh.rotation.y = -Math.PI / 2;\r\n            mesh.materialTexture = materialTexture;\r\n            mesh.materialWireframe = materialWireframe;\r\n            mesh.autoCreateAnimations(scope.animationFPS);\r\n            return mesh;\r\n        }\r\n        function checkLoadingComplete() {\r\n            scope.loadCounter -= 1;\r\n            if (scope.loadCounter === 0)\r\n                scope.onLoadComplete();\r\n        }\r\n        function exponentialEaseOut(k) {\r\n            return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\r\n        }\r\n    };\r\n    return threex.misc.MD2CharacterComplex = MD2CharacterComplex;\r\n});"]}