{"version":3,"sources":["misc/TubePainter.js"],"names":["define","THREE","positions","BufferAttribute","Float32Array","usage","DynamicDrawUsage","normals","colors","geometry","BufferGeometry","setAttribute","drawRange","count","material","MeshStandardMaterial","vertexColors","VertexColors","mesh","Mesh","frustumCulled","vector1","Vector3","vector2","vector3","vector4","color","Color","size","stroke","position1","position2","matrix1","matrix2","distanceToSquared","points","PI2","Math","PI","array","radius","i","angle","push","sin","cos","getPoints","il","length","vertex1","vertex2","copy","applyMatrix4","add","toArray","normalize","up","point1","point2","Matrix4","moveTo","position","lookAt","lineTo","setSize","value","update","start","end","updateRange","offset","needsUpdate"],"mappings":"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","file":"../../misc/TubePainter.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    function TubePainter() {\n        const BUFFER_SIZE = 1000000 * 3;\n        let positions = new THREE.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n        positions.usage = THREE.DynamicDrawUsage;\n        let normals = new THREE.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n        normals.usage = THREE.DynamicDrawUsage;\n        let colors = new THREE.BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n        colors.usage = THREE.DynamicDrawUsage;\n        let geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', positions);\n        geometry.setAttribute('normal', normals);\n        geometry.setAttribute('color', colors);\n        geometry.drawRange.count = 0;\n        let material = new THREE.MeshStandardMaterial({ vertexColors: THREE.VertexColors });\n        let mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        function getPoints(size) {\n            let PI2 = Math.PI * 2;\n            let sides = 10;\n            let array = [];\n            let radius = 0.01 * size;\n            for (let i = 0; i < sides; i++) {\n                let angle = i / sides * PI2;\n                array.push(new THREE.Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n            }\n            return array;\n        }\n        let vector1 = new THREE.Vector3();\n        let vector2 = new THREE.Vector3();\n        let vector3 = new THREE.Vector3();\n        let vector4 = new THREE.Vector3();\n        let color = new THREE.Color(16777215);\n        let size = 1;\n        function stroke(position1, position2, matrix1, matrix2) {\n            if (position1.distanceToSquared(position2) === 0)\n                return;\n            let count = geometry.drawRange.count;\n            let points = getPoints(size);\n            for (let i = 0, il = points.length; i < il; i++) {\n                let vertex1 = points[i];\n                let vertex2 = points[(i + 1) % il];\n                vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n                vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n                vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n                vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n                vector1.toArray(positions.array, (count + 0) * 3);\n                vector2.toArray(positions.array, (count + 1) * 3);\n                vector4.toArray(positions.array, (count + 2) * 3);\n                vector2.toArray(positions.array, (count + 3) * 3);\n                vector3.toArray(positions.array, (count + 4) * 3);\n                vector4.toArray(positions.array, (count + 5) * 3);\n                vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n                vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n                vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n                vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n                vector1.toArray(normals.array, (count + 0) * 3);\n                vector2.toArray(normals.array, (count + 1) * 3);\n                vector4.toArray(normals.array, (count + 2) * 3);\n                vector2.toArray(normals.array, (count + 3) * 3);\n                vector3.toArray(normals.array, (count + 4) * 3);\n                vector4.toArray(normals.array, (count + 5) * 3);\n                color.toArray(colors.array, (count + 0) * 3);\n                color.toArray(colors.array, (count + 1) * 3);\n                color.toArray(colors.array, (count + 2) * 3);\n                color.toArray(colors.array, (count + 3) * 3);\n                color.toArray(colors.array, (count + 4) * 3);\n                color.toArray(colors.array, (count + 5) * 3);\n                count += 6;\n            }\n            geometry.drawRange.count = count;\n        }\n        let up = new THREE.Vector3(0, 1, 0);\n        let point1 = new THREE.Vector3();\n        let point2 = new THREE.Vector3();\n        let matrix1 = new THREE.Matrix4();\n        let matrix2 = new THREE.Matrix4();\n        function moveTo(position) {\n            point1.copy(position);\n            matrix1.lookAt(point2, point1, up);\n            point2.copy(position);\n            matrix2.copy(matrix1);\n        }\n        function lineTo(position) {\n            point1.copy(position);\n            matrix1.lookAt(point2, point1, up);\n            stroke(point1, point2, matrix1, matrix2);\n            point2.copy(point1);\n            matrix2.copy(matrix1);\n        }\n        function setSize(value) {\n            size = value;\n        }\n        let count = 0;\n        function update() {\n            let start = count;\n            let end = geometry.drawRange.count;\n            if (start === end)\n                return;\n            positions.updateRange.offset = start * 3;\n            positions.updateRange.count = (end - start) * 3;\n            positions.needsUpdate = true;\n            normals.updateRange.offset = start * 3;\n            normals.updateRange.count = (end - start) * 3;\n            normals.needsUpdate = true;\n            colors.updateRange.offset = start * 3;\n            colors.updateRange.count = (end - start) * 3;\n            colors.needsUpdate = true;\n            count = geometry.drawRange.count;\n        }\n        return {\n            mesh: mesh,\n            moveTo: moveTo,\n            lineTo: lineTo,\n            setSize: setSize,\n            update: update\n        };\n    }\n    return TubePainter;\n});"]}