{"version":3,"sources":["modifiers/TessellateModifier.js"],"names":["define","THREE","TessellateModifier","maxEdgeLength","this","prototype","modify","geometry","edge","faces","faceVertexUvs","maxEdgeLengthSquared","i","il","length","face","Face3","a","b","c","va","vertices","vb","vc","dab","distanceToSquared","dbc","dac","m","triA","clone","triB","vm","lerp","vertexNormals","vnm","copy","vertexColors","vcm","push","j","jl","uvs","uvA","uvB","uvC","uvM","uvsTriA","uvsTriB"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA8OV,OAtOAA,EAAMC,mBAAqB,SAAWC,GAErCC,KAAKD,cAAgBA,GAItBF,EAAMC,mBAAmBG,UAAUC,OAAS,SAAWC,GAQtD,IANA,IAAIC,EAEAC,KACAC,KACAC,EAAuBP,KAAKD,cAAgBC,KAAKD,cAE3CS,EAAI,EAAGC,EAAKN,EAASG,cAAcI,OAAQF,EAAIC,EAAID,IAE5DF,EAAeE,MAIhB,IAAUA,EAAI,EAAGC,EAAKN,EAASE,MAAMK,OAAQF,EAAIC,EAAID,IAAO,CAE3D,IAAIG,EAAOR,EAASE,MAAOG,GAE3B,GAAKG,aAAgBd,EAAMe,MAAQ,CAElC,IAAIC,EAAIF,EAAKE,EACTC,EAAIH,EAAKG,EACTC,EAAIJ,EAAKI,EAETC,EAAKb,EAASc,SAAUJ,GACxBK,EAAKf,EAASc,SAAUH,GACxBK,EAAKhB,EAASc,SAAUF,GAExBK,EAAMJ,EAAGK,kBAAmBH,GAC5BI,EAAMJ,EAAGG,kBAAmBF,GAC5BI,EAAMP,EAAGK,kBAAmBF,GAEhC,GAAKC,EAAMb,GAAwBe,EAAMf,GAAwBgB,EAAMhB,EAAuB,CAE7F,IAAIiB,EAAIrB,EAASc,SAASP,OAEtBe,EAAOd,EAAKe,QACZC,EAAOhB,EAAKe,QAEhB,GAAKN,GAAOE,GAAOF,GAAOG,EAAM,CAa/B,IAXIK,EAAKZ,EAAGU,SACTG,KAAMX,EAAI,IAEbO,EAAKZ,EAAIA,EACTY,EAAKX,EAAIU,EACTC,EAAKV,EAAIA,EAETY,EAAKd,EAAIW,EACTG,EAAKb,EAAIA,EACTa,EAAKZ,EAAIA,EAE0B,IAA9BJ,EAAKmB,cAAcpB,QAEnBqB,EAAMpB,EAAKmB,cAAe,GAAIJ,SAC9BG,KAAMlB,EAAKmB,cAAe,GAAK,IAEnCL,EAAKK,cAAe,GAAIE,KAAMD,GAC9BJ,EAAKG,cAAe,GAAIE,KAAMD,GAI/B,GAAkC,IAA7BpB,EAAKsB,aAAavB,QAElBwB,EAAMvB,EAAKsB,aAAc,GAAIP,SAC7BG,KAAMlB,EAAKsB,aAAc,GAAK,IAElCR,EAAKQ,aAAc,GAAID,KAAME,GAC7BP,EAAKM,aAAc,GAAID,KAAME,GAI9B9B,EAAO,OAED,GAAKkB,GAAOF,GAAOE,GAAOC,EAAM,CAatC,IAXIK,EAAKV,EAAGQ,SACTG,KAAMV,EAAI,IAEbM,EAAKZ,EAAIA,EACTY,EAAKX,EAAIA,EACTW,EAAKV,EAAIS,EAETG,EAAKd,EAAIW,EACTG,EAAKb,EAAIC,EACTY,EAAKZ,EAAIF,EAE0B,IAA9BF,EAAKmB,cAAcpB,QAEnBqB,EAAMpB,EAAKmB,cAAe,GAAIJ,SAC9BG,KAAMlB,EAAKmB,cAAe,GAAK,IAEnCL,EAAKK,cAAe,GAAIE,KAAMD,GAE9BJ,EAAKG,cAAe,GAAIE,KAAMD,GAC9BJ,EAAKG,cAAe,GAAIE,KAAMrB,EAAKmB,cAAe,IAClDH,EAAKG,cAAe,GAAIE,KAAMrB,EAAKmB,cAAe,IAInD,GAAkC,IAA7BnB,EAAKsB,aAAavB,QAElBwB,EAAMvB,EAAKsB,aAAc,GAAIP,SAC7BG,KAAMlB,EAAKsB,aAAc,GAAK,IAElCR,EAAKQ,aAAc,GAAID,KAAME,GAE7BP,EAAKM,aAAc,GAAID,KAAME,GAC7BP,EAAKM,aAAc,GAAID,KAAMrB,EAAKsB,aAAc,IAChDN,EAAKM,aAAc,GAAID,KAAMrB,EAAKsB,aAAc,IAIjD7B,EAAO,MAED,CAEN,IAAIwB,EAaCG,EAUAG,EAZL,IAXIN,EAAKZ,EAAGU,SACTG,KAAMV,EAAI,IAEbM,EAAKZ,EAAIA,EACTY,EAAKX,EAAIA,EACTW,EAAKV,EAAIS,EAETG,EAAKd,EAAIW,EACTG,EAAKb,EAAIA,EACTa,EAAKZ,EAAIA,EAE0B,IAA9BJ,EAAKmB,cAAcpB,QAEnBqB,EAAMpB,EAAKmB,cAAe,GAAIJ,SAC9BG,KAAMlB,EAAKmB,cAAe,GAAK,IAEnCL,EAAKK,cAAe,GAAIE,KAAMD,GAC9BJ,EAAKG,cAAe,GAAIE,KAAMD,GAI/B,GAAkC,IAA7BpB,EAAKsB,aAAavB,QAElBwB,EAAMvB,EAAKsB,aAAc,GAAIP,SAC7BG,KAAMlB,EAAKsB,aAAc,GAAK,IAElCR,EAAKQ,aAAc,GAAID,KAAME,GAC7BP,EAAKM,aAAc,GAAID,KAAME,GAI9B9B,EAAO,EAIRC,EAAM8B,KAAMV,EAAME,GAClBxB,EAASc,SAASkB,KAAMP,GAExB,IAAM,IAAIQ,EAAI,EAAGC,EAAKlC,EAASG,cAAcI,OAAQ0B,EAAIC,EAAID,IAE5D,GAAKjC,EAASG,cAAe8B,GAAI1B,OAAS,CAEzC,IAAI4B,EAAMnC,EAASG,cAAe8B,GAAK5B,GAEnC+B,EAAMD,EAAK,GACXE,EAAMF,EAAK,GACXG,EAAMH,EAAK,GAIf,GAAc,IAATlC,EAAa,EAEbsC,EAAMH,EAAIb,SACVG,KAAMW,EAAK,IAEf,IAAIG,GAAYJ,EAAIb,QAASgB,EAAIhB,QAASe,EAAIf,SAC1CkB,GAAYF,EAAIhB,QAASc,EAAId,QAASe,EAAIf,cAIxC,GAAc,IAATtB,EAAa,EAEpBsC,EAAMF,EAAId,SACVG,KAAMY,EAAK,IAEXE,GAAYJ,EAAIb,QAASc,EAAId,QAASgB,EAAIhB,SAC1CkB,GAAYF,EAAIhB,QAASe,EAAIf,QAASa,EAAIb,aAIxC,CAEN,IAAIgB,GAAAA,EAAMH,EAAIb,SACVG,KAAMY,EAAK,IAEXE,GAAYJ,EAAIb,QAASc,EAAId,QAASgB,EAAIhB,SAC1CkB,GAAYF,EAAIhB,QAASc,EAAId,QAASe,EAAIf,SAI/CpB,EAAe8B,GAAID,KAAMQ,EAASC,QAM9B,CAENvC,EAAM8B,KAAMxB,GAEZ,IAAUyB,EAAI,EAAGC,EAAKlC,EAASG,cAAcI,OAAQ0B,EAAIC,EAAID,IAE5D9B,EAAe8B,GAAID,KAAMhC,EAASG,cAAe8B,GAAK5B,MAU1DL,EAASE,MAAQA,EACjBF,EAASG,cAAgBA,GAInBT,EAAMC","file":"../../modifiers/TessellateModifier.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * Break faces with edges longer than maxEdgeLength\n\t * - not recursive\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tTHREE.TessellateModifier = function ( maxEdgeLength ) {\n\n\t\tthis.maxEdgeLength = maxEdgeLength;\n\n\t};\n\n\tTHREE.TessellateModifier.prototype.modify = function ( geometry ) {\n\n\t\tvar edge;\n\n\t\tvar faces = [];\n\t\tvar faceVertexUvs = [];\n\t\tvar maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n\n\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tfaceVertexUvs[ i ] = [];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = geometry.faces[ i ];\n\n\t\t\tif ( face instanceof THREE.Face3 ) {\n\n\t\t\t\tvar a = face.a;\n\t\t\t\tvar b = face.b;\n\t\t\t\tvar c = face.c;\n\n\t\t\t\tvar va = geometry.vertices[ a ];\n\t\t\t\tvar vb = geometry.vertices[ b ];\n\t\t\t\tvar vc = geometry.vertices[ c ];\n\n\t\t\t\tvar dab = va.distanceToSquared( vb );\n\t\t\t\tvar dbc = vb.distanceToSquared( vc );\n\t\t\t\tvar dac = va.distanceToSquared( vc );\n\n\t\t\t\tif ( dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared ) {\n\n\t\t\t\t\tvar m = geometry.vertices.length;\n\n\t\t\t\t\tvar triA = face.clone();\n\t\t\t\t\tvar triB = face.clone();\n\n\t\t\t\t\tif ( dab >= dbc && dab >= dac ) {\n\n\t\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\t\tvm.lerp( vb, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = m;\n\t\t\t\t\t\ttriA.c = c;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = b;\n\t\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 1 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 1 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 1 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 1 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 0;\n\n\t\t\t\t\t} else if ( dbc >= dab && dbc >= dac ) {\n\n\t\t\t\t\t\tvar vm = vb.clone();\n\t\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = b;\n\t\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = c;\n\t\t\t\t\t\ttriB.c = a;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 1 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 1 ].copy( face.vertexNormals[ 2 ] );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 2 ].copy( face.vertexNormals[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 1 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 1 ].copy( face.vertexColors[ 2 ] );\n\t\t\t\t\t\t\ttriB.vertexColors[ 2 ].copy( face.vertexColors[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 1;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar vm = va.clone();\n\t\t\t\t\t\tvm.lerp( vc, 0.5 );\n\n\t\t\t\t\t\ttriA.a = a;\n\t\t\t\t\t\ttriA.b = b;\n\t\t\t\t\t\ttriA.c = m;\n\n\t\t\t\t\t\ttriB.a = m;\n\t\t\t\t\t\ttriB.b = b;\n\t\t\t\t\t\ttriB.c = c;\n\n\t\t\t\t\t\tif ( face.vertexNormals.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vnm = face.vertexNormals[ 0 ].clone();\n\t\t\t\t\t\t\tvnm.lerp( face.vertexNormals[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexNormals[ 2 ].copy( vnm );\n\t\t\t\t\t\t\ttriB.vertexNormals[ 0 ].copy( vnm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( face.vertexColors.length === 3 ) {\n\n\t\t\t\t\t\t\tvar vcm = face.vertexColors[ 0 ].clone();\n\t\t\t\t\t\t\tvcm.lerp( face.vertexColors[ 2 ], 0.5 );\n\n\t\t\t\t\t\t\ttriA.vertexColors[ 2 ].copy( vcm );\n\t\t\t\t\t\t\ttriB.vertexColors[ 0 ].copy( vcm );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedge = 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaces.push( triA, triB );\n\t\t\t\t\tgeometry.vertices.push( vm );\n\n\t\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\n\n\t\t\t\t\t\t\tvar uvs = geometry.faceVertexUvs[ j ][ i ];\n\n\t\t\t\t\t\t\tvar uvA = uvs[ 0 ];\n\t\t\t\t\t\t\tvar uvB = uvs[ 1 ];\n\t\t\t\t\t\t\tvar uvC = uvs[ 2 ];\n\n\t\t\t\t\t\t\t// AB\n\n\t\t\t\t\t\t\tif ( edge === 0 ) {\n\n\t\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvB, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvM.clone(), uvC.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t\t// BC\n\n\t\t\t\t\t\t\t} else if ( edge === 1 ) {\n\n\t\t\t\t\t\t\t\tvar uvM = uvB.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvC.clone(), uvA.clone() ];\n\n\t\t\t\t\t\t\t\t// AC\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar uvM = uvA.clone();\n\t\t\t\t\t\t\t\tuvM.lerp( uvC, 0.5 );\n\n\t\t\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];\n\t\t\t\t\t\t\t\tvar uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaces.push( face );\n\n\t\t\t\t\tfor ( var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.faces = faces;\n\t\tgeometry.faceVertexUvs = faceVertexUvs;\n\n\t};\n\t\n\treturn THREE.TessellateModifier;\n});\n"]}