{"version":3,"sources":["modifiers/TessellateModifier.js"],"names":["define","THREE","threex","TessellateModifier","maxEdgeLength","this","prototype","modify","geometry","edge","faces","faceVertexUvs","maxEdgeLengthSquared","i","il","length","face","Face3","a","b","c","va","vertices","vb","vc","dab","distanceToSquared","dbc","dac","m","triA","clone","triB","vm","lerp","vertexNormals","vnm","copy","vertexColors","vcm","push","j","jl","uvs","uvA","uvB","uvC","uvM","uvsTriA","uvsTriB","modifiers"],"mappings":"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","file":"../../modifiers/TessellateModifier.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var TessellateModifier = function (maxEdgeLength) {\r\n        this.maxEdgeLength = maxEdgeLength;\r\n    };\r\n    TessellateModifier.prototype.modify = function (geometry) {\r\n        var edge;\r\n        var faces = [];\r\n        var faceVertexUvs = [];\r\n        var maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\r\n        for (var i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\r\n            faceVertexUvs[i] = [];\r\n        }\r\n        for (var i = 0, il = geometry.faces.length; i < il; i++) {\r\n            var face = geometry.faces[i];\r\n            if (face instanceof THREE.Face3) {\r\n                var a = face.a;\r\n                var b = face.b;\r\n                var c = face.c;\r\n                var va = geometry.vertices[a];\r\n                var vb = geometry.vertices[b];\r\n                var vc = geometry.vertices[c];\r\n                var dab = va.distanceToSquared(vb);\r\n                var dbc = vb.distanceToSquared(vc);\r\n                var dac = va.distanceToSquared(vc);\r\n                if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\r\n                    var m = geometry.vertices.length;\r\n                    var triA = face.clone();\r\n                    var triB = face.clone();\r\n                    if (dab >= dbc && dab >= dac) {\r\n                        var vm = va.clone();\r\n                        vm.lerp(vb, 0.5);\r\n                        triA.a = a;\r\n                        triA.b = m;\r\n                        triA.c = c;\r\n                        triB.a = m;\r\n                        triB.b = b;\r\n                        triB.c = c;\r\n                        if (face.vertexNormals.length === 3) {\r\n                            var vnm = face.vertexNormals[0].clone();\r\n                            vnm.lerp(face.vertexNormals[1], 0.5);\r\n                            triA.vertexNormals[1].copy(vnm);\r\n                            triB.vertexNormals[0].copy(vnm);\r\n                        }\r\n                        if (face.vertexColors.length === 3) {\r\n                            var vcm = face.vertexColors[0].clone();\r\n                            vcm.lerp(face.vertexColors[1], 0.5);\r\n                            triA.vertexColors[1].copy(vcm);\r\n                            triB.vertexColors[0].copy(vcm);\r\n                        }\r\n                        edge = 0;\r\n                    } else if (dbc >= dab && dbc >= dac) {\r\n                        var vm = vb.clone();\r\n                        vm.lerp(vc, 0.5);\r\n                        triA.a = a;\r\n                        triA.b = b;\r\n                        triA.c = m;\r\n                        triB.a = m;\r\n                        triB.b = c;\r\n                        triB.c = a;\r\n                        if (face.vertexNormals.length === 3) {\r\n                            var vnm = face.vertexNormals[1].clone();\r\n                            vnm.lerp(face.vertexNormals[2], 0.5);\r\n                            triA.vertexNormals[2].copy(vnm);\r\n                            triB.vertexNormals[0].copy(vnm);\r\n                            triB.vertexNormals[1].copy(face.vertexNormals[2]);\r\n                            triB.vertexNormals[2].copy(face.vertexNormals[0]);\r\n                        }\r\n                        if (face.vertexColors.length === 3) {\r\n                            var vcm = face.vertexColors[1].clone();\r\n                            vcm.lerp(face.vertexColors[2], 0.5);\r\n                            triA.vertexColors[2].copy(vcm);\r\n                            triB.vertexColors[0].copy(vcm);\r\n                            triB.vertexColors[1].copy(face.vertexColors[2]);\r\n                            triB.vertexColors[2].copy(face.vertexColors[0]);\r\n                        }\r\n                        edge = 1;\r\n                    } else {\r\n                        var vm = va.clone();\r\n                        vm.lerp(vc, 0.5);\r\n                        triA.a = a;\r\n                        triA.b = b;\r\n                        triA.c = m;\r\n                        triB.a = m;\r\n                        triB.b = b;\r\n                        triB.c = c;\r\n                        if (face.vertexNormals.length === 3) {\r\n                            var vnm = face.vertexNormals[0].clone();\r\n                            vnm.lerp(face.vertexNormals[2], 0.5);\r\n                            triA.vertexNormals[2].copy(vnm);\r\n                            triB.vertexNormals[0].copy(vnm);\r\n                        }\r\n                        if (face.vertexColors.length === 3) {\r\n                            var vcm = face.vertexColors[0].clone();\r\n                            vcm.lerp(face.vertexColors[2], 0.5);\r\n                            triA.vertexColors[2].copy(vcm);\r\n                            triB.vertexColors[0].copy(vcm);\r\n                        }\r\n                        edge = 2;\r\n                    }\r\n                    faces.push(triA, triB);\r\n                    geometry.vertices.push(vm);\r\n                    for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\r\n                        if (geometry.faceVertexUvs[j].length) {\r\n                            var uvs = geometry.faceVertexUvs[j][i];\r\n                            var uvA = uvs[0];\r\n                            var uvB = uvs[1];\r\n                            var uvC = uvs[2];\r\n                            if (edge === 0) {\r\n                                var uvM = uvA.clone();\r\n                                uvM.lerp(uvB, 0.5);\r\n                                var uvsTriA = [\r\n                                    uvA.clone(),\r\n                                    uvM.clone(),\r\n                                    uvC.clone()\r\n                                ];\r\n                                var uvsTriB = [\r\n                                    uvM.clone(),\r\n                                    uvB.clone(),\r\n                                    uvC.clone()\r\n                                ];\r\n                            } else if (edge === 1) {\r\n                                var uvM = uvB.clone();\r\n                                uvM.lerp(uvC, 0.5);\r\n                                var uvsTriA = [\r\n                                    uvA.clone(),\r\n                                    uvB.clone(),\r\n                                    uvM.clone()\r\n                                ];\r\n                                var uvsTriB = [\r\n                                    uvM.clone(),\r\n                                    uvC.clone(),\r\n                                    uvA.clone()\r\n                                ];\r\n                            } else {\r\n                                var uvM = uvA.clone();\r\n                                uvM.lerp(uvC, 0.5);\r\n                                var uvsTriA = [\r\n                                    uvA.clone(),\r\n                                    uvB.clone(),\r\n                                    uvM.clone()\r\n                                ];\r\n                                var uvsTriB = [\r\n                                    uvM.clone(),\r\n                                    uvB.clone(),\r\n                                    uvC.clone()\r\n                                ];\r\n                            }\r\n                            faceVertexUvs[j].push(uvsTriA, uvsTriB);\r\n                        }\r\n                    }\r\n                } else {\r\n                    faces.push(face);\r\n                    for (var j = 0, jl = geometry.faceVertexUvs.length; j < jl; j++) {\r\n                        faceVertexUvs[j].push(geometry.faceVertexUvs[j][i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        geometry.faces = faces;\r\n        geometry.faceVertexUvs = faceVertexUvs;\r\n    };\r\n\r\n    return threex.modifiers.TessellateModifier = TessellateModifier;\r\n});"]}