{"version":3,"sources":["modifiers/SimplifyModifier.js"],"names":["define","THREE","threex","SimplifyModifier","cb","Vector3","ab","removeFromArray","array","object","k","indexOf","splice","computeEdgeCollapseCost","u","v","i","face","sideFace","edgelength","position","distanceTo","curvature","sideFaces","il","faces","length","hasVertex","push","minCurvature","j","dotProd","normal","dot","Math","min","max","computeEdgeCostAtVertex","neighbors","collapseNeighbor","collapseCost","minCost","totalCost","costCount","removeVertex","vertices","console","assert","pop","removeFace","f","v1","v2","v3","vs","removeIfNonNeighbor","collapse","tmpVertices","replaceVertex","minimumCostEdge","least","Triangle","a","b","c","this","computeNormal","addUniqueNeighbor","Vertex","id","prototype","vA","vB","vC","subVectors","cross","normalize","copy","oldv","newv","vertex","n","offset","modify","geometry","count","isBufferGeometry","Geometry","fromBufferGeometry","mergeVertices","nextVertex","oldVertices","oldFaces","triangle","z","log","simplifiedGeometry","BufferGeometry","index","x","y","setAttribute","Float32BufferAttribute","setIndex","modifiers"],"mappings":"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","file":"../../modifiers/SimplifyModifier.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var SimplifyModifier = function () {\n    };\n    (function () {\n        var cb = new THREE.Vector3(), ab = new THREE.Vector3();\n        function pushIfUnique(array, object) {\n            if (array.indexOf(object) === -1)\n                array.push(object);\n        }\n        function removeFromArray(array, object) {\n            var k = array.indexOf(object);\n            if (k > -1)\n                array.splice(k, 1);\n        }\n        function computeEdgeCollapseCost(u, v) {\n            var edgelength = v.position.distanceTo(u.position);\n            var curvature = 0;\n            var sideFaces = [];\n            var i, il = u.faces.length, face, sideFace;\n            for (i = 0; i < il; i++) {\n                face = u.faces[i];\n                if (face.hasVertex(v)) {\n                    sideFaces.push(face);\n                }\n            }\n            for (i = 0; i < il; i++) {\n                var minCurvature = 1;\n                face = u.faces[i];\n                for (var j = 0; j < sideFaces.length; j++) {\n                    sideFace = sideFaces[j];\n                    var dotProd = face.normal.dot(sideFace.normal);\n                    minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n                }\n                curvature = Math.max(curvature, minCurvature);\n            }\n            var borders = 0;\n            if (sideFaces.length < 2) {\n                curvature = 1;\n            }\n            var amt = edgelength * curvature + borders;\n            return amt;\n        }\n        function computeEdgeCostAtVertex(v) {\n            if (v.neighbors.length === 0) {\n                v.collapseNeighbor = null;\n                v.collapseCost = -0.01;\n                return;\n            }\n            v.collapseCost = 100000;\n            v.collapseNeighbor = null;\n            for (var i = 0; i < v.neighbors.length; i++) {\n                var collapseCost = computeEdgeCollapseCost(v, v.neighbors[i]);\n                if (!v.collapseNeighbor) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.collapseCost = collapseCost;\n                    v.minCost = collapseCost;\n                    v.totalCost = 0;\n                    v.costCount = 0;\n                }\n                v.costCount++;\n                v.totalCost += collapseCost;\n                if (collapseCost < v.minCost) {\n                    v.collapseNeighbor = v.neighbors[i];\n                    v.minCost = collapseCost;\n                }\n            }\n            v.collapseCost = v.totalCost / v.costCount;\n        }\n        function removeVertex(v, vertices) {\n            console.assert(v.faces.length === 0);\n            while (v.neighbors.length) {\n                var n = v.neighbors.pop();\n                removeFromArray(n.neighbors, v);\n            }\n            removeFromArray(vertices, v);\n        }\n        function removeFace(f, faces) {\n            removeFromArray(faces, f);\n            if (f.v1)\n                removeFromArray(f.v1.faces, f);\n            if (f.v2)\n                removeFromArray(f.v2.faces, f);\n            if (f.v3)\n                removeFromArray(f.v3.faces, f);\n            var vs = [\n                f.v1,\n                f.v2,\n                f.v3\n            ];\n            var v1, v2;\n            for (var i = 0; i < 3; i++) {\n                v1 = vs[i];\n                v2 = vs[(i + 1) % 3];\n                if (!v1 || !v2)\n                    continue;\n                v1.removeIfNonNeighbor(v2);\n                v2.removeIfNonNeighbor(v1);\n            }\n        }\n        function collapse(vertices, faces, u, v) {\n            if (!v) {\n                removeVertex(u, vertices);\n                return;\n            }\n            var i;\n            var tmpVertices = [];\n            for (i = 0; i < u.neighbors.length; i++) {\n                tmpVertices.push(u.neighbors[i]);\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                if (u.faces[i].hasVertex(v)) {\n                    removeFace(u.faces[i], faces);\n                }\n            }\n            for (i = u.faces.length - 1; i >= 0; i--) {\n                u.faces[i].replaceVertex(u, v);\n            }\n            removeVertex(u, vertices);\n            for (i = 0; i < tmpVertices.length; i++) {\n                computeEdgeCostAtVertex(tmpVertices[i]);\n            }\n        }\n        function minimumCostEdge(vertices) {\n            var least = vertices[0];\n            for (var i = 0; i < vertices.length; i++) {\n                if (vertices[i].collapseCost < least.collapseCost) {\n                    least = vertices[i];\n                }\n            }\n            return least;\n        }\n        function Triangle(v1, v2, v3, a, b, c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n            this.v1 = v1;\n            this.v2 = v2;\n            this.v3 = v3;\n            this.normal = new THREE.Vector3();\n            this.computeNormal();\n            v1.faces.push(this);\n            v1.addUniqueNeighbor(v2);\n            v1.addUniqueNeighbor(v3);\n            v2.faces.push(this);\n            v2.addUniqueNeighbor(v1);\n            v2.addUniqueNeighbor(v3);\n            v3.faces.push(this);\n            v3.addUniqueNeighbor(v1);\n            v3.addUniqueNeighbor(v2);\n        }\n        Triangle.prototype.computeNormal = function () {\n            var vA = this.v1.position;\n            var vB = this.v2.position;\n            var vC = this.v3.position;\n            cb.subVectors(vC, vB);\n            ab.subVectors(vA, vB);\n            cb.cross(ab).normalize();\n            this.normal.copy(cb);\n        };\n        Triangle.prototype.hasVertex = function (v) {\n            return v === this.v1 || v === this.v2 || v === this.v3;\n        };\n        Triangle.prototype.replaceVertex = function (oldv, newv) {\n            if (oldv === this.v1)\n                this.v1 = newv;\n            else if (oldv === this.v2)\n                this.v2 = newv;\n            else if (oldv === this.v3)\n                this.v3 = newv;\n            removeFromArray(oldv.faces, this);\n            newv.faces.push(this);\n            oldv.removeIfNonNeighbor(this.v1);\n            this.v1.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v2);\n            this.v2.removeIfNonNeighbor(oldv);\n            oldv.removeIfNonNeighbor(this.v3);\n            this.v3.removeIfNonNeighbor(oldv);\n            this.v1.addUniqueNeighbor(this.v2);\n            this.v1.addUniqueNeighbor(this.v3);\n            this.v2.addUniqueNeighbor(this.v1);\n            this.v2.addUniqueNeighbor(this.v3);\n            this.v3.addUniqueNeighbor(this.v1);\n            this.v3.addUniqueNeighbor(this.v2);\n            this.computeNormal();\n        };\n        function Vertex(v, id) {\n            this.position = v;\n            this.id = id;\n            this.faces = [];\n            this.neighbors = [];\n            this.collapseCost = 0;\n            this.collapseNeighbor = null;\n        }\n        Vertex.prototype.addUniqueNeighbor = function (vertex) {\n            pushIfUnique(this.neighbors, vertex);\n        };\n        Vertex.prototype.removeIfNonNeighbor = function (n) {\n            var neighbors = this.neighbors;\n            var faces = this.faces;\n            var offset = neighbors.indexOf(n);\n            if (offset === -1)\n                return;\n            for (var i = 0; i < faces.length; i++) {\n                if (faces[i].hasVertex(n))\n                    return;\n            }\n            neighbors.splice(offset, 1);\n        };\n        SimplifyModifier.prototype.modify = function (geometry, count) {\n            if (geometry.isBufferGeometry) {\n                geometry = new THREE.Geometry().fromBufferGeometry(geometry);\n            }\n            geometry.mergeVertices();\n            var oldVertices = geometry.vertices;\n            var oldFaces = geometry.faces;\n            var vertices = [];\n            var faces = [];\n            var i, il;\n            for (i = 0, il = oldVertices.length; i < il; i++) {\n                var vertex = new Vertex(oldVertices[i], i);\n                vertices.push(vertex);\n            }\n            for (i = 0, il = oldFaces.length; i < il; i++) {\n                var face = oldFaces[i];\n                var a = face.a;\n                var b = face.b;\n                var c = face.c;\n                var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n                faces.push(triangle);\n            }\n            for (i = 0, il = vertices.length; i < il; i++) {\n                computeEdgeCostAtVertex(vertices[i]);\n            }\n            var nextVertex;\n            var z = count;\n            while (z--) {\n                nextVertex = minimumCostEdge(vertices);\n                if (!nextVertex) {\n                    console.log('THREE.SimplifyModifier: No next vertex');\n                    break;\n                }\n                collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n            }\n            var simplifiedGeometry = new THREE.BufferGeometry();\n            var position = [];\n            var index = [];\n            for (i = 0; i < vertices.length; i++) {\n                var vertex = vertices[i].position;\n                position.push(vertex.x, vertex.y, vertex.z);\n            }\n            for (i = 0; i < faces.length; i++) {\n                var face = faces[i];\n                var a = vertices.indexOf(face.v1);\n                var b = vertices.indexOf(face.v2);\n                var c = vertices.indexOf(face.v3);\n                index.push(a, b, c);\n            }\n            simplifiedGeometry.setAttribute('position', new THREE.Float32BufferAttribute(position, 3));\n            simplifiedGeometry.setIndex(index);\n            return simplifiedGeometry;\n        };\n    }());\n\n    return threex.modifiers.SimplifyModifier = SimplifyModifier;\n});"]}