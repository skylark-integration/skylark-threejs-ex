{"version":3,"sources":["objects/Water2.js"],"names":["define","THREE","Reflector","Refractor","Water","geometry","options","Mesh","call","this","type","scope","color","undefined","Color","textureWidth","textureHeight","clipBias","flowDirection","Vector2","flowSpeed","reflectivity","scale","shader","WaterShader","encoding","LinearEncoding","textureLoader","TextureLoader","flowMap","normalMap0","load","normalMap1","cycle","halfCycle","textureMatrix","Matrix4","clock","Clock","reflector","refractor","matrixAutoUpdate","material","ShaderMaterial","uniforms","UniformsUtils","merge","UniformsLib","vertexShader","fragmentShader","transparent","fog","defines","USE_FLOWMAP","value","wrapS","wrapT","RepeatWrapping","getRenderTarget","texture","x","y","z","w","onBeforeRender","renderer","scene","camera","delta","config","set","multiply","projectionMatrix","matrixWorldInverse","matrixWorld","updateTextureMatrix","getDelta","visible","copy","console","error","prototype","Object","create","constructor","tReflectionMap","tRefractionMap","tNormalMap0","tNormalMap1","Vector4","join"],"mappings":"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","file":"../../objects/Water2.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    '../objects/Reflector',\n    '../objects/Refractor'\n], function (\n    THREE, \n    Reflector, \n    Refractor\n) {\n    'use strict';\n    var Water = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Water';\n        var scope = this;\n        options = options || {};\n        var color = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(16777215);\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var clipBias = options.clipBias || 0;\n        var flowDirection = options.flowDirection || new THREE.Vector2(1, 0);\n        var flowSpeed = options.flowSpeed || 0.03;\n        var reflectivity = options.reflectivity || 0.02;\n        var scale = options.scale || 1;\n        var shader = options.shader || Water.WaterShader;\n        var encoding = options.encoding !== undefined ? options.encoding : THREE.LinearEncoding;\n        var textureLoader = new THREE.TextureLoader();\n        var flowMap = options.flowMap || undefined;\n        var normalMap0 = options.normalMap0 || textureLoader.load('textures/water/Water_1_M_Normal.jpg');\n        var normalMap1 = options.normalMap1 || textureLoader.load('textures/water/Water_2_M_Normal.jpg');\n        var cycle = 0.15;\n        var halfCycle = cycle * 0.5;\n        var textureMatrix = new THREE.Matrix4();\n        var clock = new THREE.Clock();\n        if (Reflector === undefined) {\n            console.error('THREE.Water: Required component Reflector not found.');\n            return;\n        }\n        if (Refractor === undefined) {\n            console.error('THREE.Water: Required component Refractor not found.');\n            return;\n        }\n        var reflector = new Reflector(geometry, {\n            textureWidth: textureWidth,\n            textureHeight: textureHeight,\n            clipBias: clipBias,\n            encoding: encoding\n        });\n        var refractor = new Refractor(geometry, {\n            textureWidth: textureWidth,\n            textureHeight: textureHeight,\n            clipBias: clipBias,\n            encoding: encoding\n        });\n        reflector.matrixAutoUpdate = false;\n        refractor.matrixAutoUpdate = false;\n        this.material = new THREE.ShaderMaterial({\n            uniforms: THREE.UniformsUtils.merge([\n                THREE.UniformsLib['fog'],\n                shader.uniforms\n            ]),\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: true,\n            fog: true\n        });\n        if (flowMap !== undefined) {\n            this.material.defines.USE_FLOWMAP = '';\n            this.material.uniforms['tFlowMap'] = {\n                type: 't',\n                value: flowMap\n            };\n        } else {\n            this.material.uniforms['flowDirection'] = {\n                type: 'v2',\n                value: flowDirection\n            };\n        }\n        normalMap0.wrapS = normalMap0.wrapT = THREE.RepeatWrapping;\n        normalMap1.wrapS = normalMap1.wrapT = THREE.RepeatWrapping;\n        this.material.uniforms['tReflectionMap'].value = reflector.getRenderTarget().texture;\n        this.material.uniforms['tRefractionMap'].value = refractor.getRenderTarget().texture;\n        this.material.uniforms['tNormalMap0'].value = normalMap0;\n        this.material.uniforms['tNormalMap1'].value = normalMap1;\n        this.material.uniforms['color'].value = color;\n        this.material.uniforms['reflectivity'].value = reflectivity;\n        this.material.uniforms['textureMatrix'].value = textureMatrix;\n        this.material.uniforms['config'].value.x = 0;\n        this.material.uniforms['config'].value.y = halfCycle;\n        this.material.uniforms['config'].value.z = halfCycle;\n        this.material.uniforms['config'].value.w = scale;\n        function updateTextureMatrix(camera) {\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(camera.projectionMatrix);\n            textureMatrix.multiply(camera.matrixWorldInverse);\n            textureMatrix.multiply(scope.matrixWorld);\n        }\n        function updateFlow() {\n            var delta = clock.getDelta();\n            var config = scope.material.uniforms['config'];\n            config.value.x += flowSpeed * delta;\n            config.value.y = config.value.x + halfCycle;\n            if (config.value.x >= cycle) {\n                config.value.x = 0;\n                config.value.y = halfCycle;\n            } else if (config.value.y >= cycle) {\n                config.value.y = config.value.y - cycle;\n            }\n        }\n        this.onBeforeRender = function (renderer, scene, camera) {\n            updateTextureMatrix(camera);\n            updateFlow();\n            scope.visible = false;\n            reflector.matrixWorld.copy(scope.matrixWorld);\n            refractor.matrixWorld.copy(scope.matrixWorld);\n            reflector.onBeforeRender(renderer, scene, camera);\n            refractor.onBeforeRender(renderer, scene, camera);\n            scope.visible = true;\n        };\n    };\n    Water.prototype = Object.create(THREE.Mesh.prototype);\n    Water.prototype.constructor = Water;\n    Water.WaterShader = {\n        uniforms: {\n            'color': {\n                type: 'c',\n                value: null\n            },\n            'reflectivity': {\n                type: 'f',\n                value: 0\n            },\n            'tReflectionMap': {\n                type: 't',\n                value: null\n            },\n            'tRefractionMap': {\n                type: 't',\n                value: null\n            },\n            'tNormalMap0': {\n                type: 't',\n                value: null\n            },\n            'tNormalMap1': {\n                type: 't',\n                value: null\n            },\n            'textureMatrix': {\n                type: 'm4',\n                value: null\n            },\n            'config': {\n                type: 'v4',\n                value: new THREE.Vector4()\n            }\n        },\n        vertexShader: [\n            '#include <common>',\n            '#include <fog_pars_vertex>',\n            '#include <logdepthbuf_pars_vertex>',\n            'uniform mat4 textureMatrix;',\n            'varying vec4 vCoord;',\n            'varying vec2 vUv;',\n            'varying vec3 vToEye;',\n            'void main() {',\n            '\\tvUv = uv;',\n            '\\tvCoord = textureMatrix * vec4( position, 1.0 );',\n            '\\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n            '\\tvToEye = cameraPosition - worldPosition.xyz;',\n            '\\tvec4 mvPosition =  viewMatrix * worldPosition;',\n            '\\tgl_Position = projectionMatrix * mvPosition;',\n            '\\t#include <logdepthbuf_vertex>',\n            '\\t#include <fog_vertex>',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            '#include <common>',\n            '#include <fog_pars_fragment>',\n            '#include <logdepthbuf_pars_fragment>',\n            'uniform sampler2D tReflectionMap;',\n            'uniform sampler2D tRefractionMap;',\n            'uniform sampler2D tNormalMap0;',\n            'uniform sampler2D tNormalMap1;',\n            '#ifdef USE_FLOWMAP',\n            '\\tuniform sampler2D tFlowMap;',\n            '#else',\n            '\\tuniform vec2 flowDirection;',\n            '#endif',\n            'uniform vec3 color;',\n            'uniform float reflectivity;',\n            'uniform vec4 config;',\n            'varying vec4 vCoord;',\n            'varying vec2 vUv;',\n            'varying vec3 vToEye;',\n            'void main() {',\n            '\\t#include <logdepthbuf_fragment>',\n            '\\tfloat flowMapOffset0 = config.x;',\n            '\\tfloat flowMapOffset1 = config.y;',\n            '\\tfloat halfCycle = config.z;',\n            '\\tfloat scale = config.w;',\n            '\\tvec3 toEye = normalize( vToEye );',\n            '\\tvec2 flow;',\n            '\\t#ifdef USE_FLOWMAP',\n            '\\t\\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;',\n            '\\t#else',\n            '\\t\\tflow = flowDirection;',\n            '\\t#endif',\n            '\\tflow.x *= - 1.0;',\n            '\\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );',\n            '\\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );',\n            '\\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;',\n            '\\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );',\n            '\\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );',\n            '\\tfloat theta = max( dot( toEye, normal ), 0.0 );',\n            '\\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );',\n            '\\tvec3 coord = vCoord.xyz / vCoord.w;',\n            '\\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;',\n            '\\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );',\n            '\\tvec4 refractColor = texture2D( tRefractionMap, uv );',\n            '\\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );',\n            '\\t#include <tonemapping_fragment>',\n            '\\t#include <encodings_fragment>',\n            '\\t#include <fog_fragment>',\n            '}'\n        ].join('\\n')\n    };\n    return Water;\n});"]}