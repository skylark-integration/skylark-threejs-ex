{"version":3,"sources":["objects/Sky.js"],"names":["define","THREE","Sky","shader","SkyShader","material","ShaderMaterial","fragmentShader","vertexShader","uniforms","UniformsUtils","clone","side","BackSide","depthWrite","Mesh","call","this","BoxBufferGeometry","prototype","Object","create","luminance","value","turbidity","rayleigh","mieCoefficient","mieDirectionalG","sunPosition","Vector3","up","join"],"mappings":";;;;;;;AAAAA,QACI,mBACD,SAAUC,GACT,aACA,IAAIC,EAAM,WACN,IAAIC,EAASD,EAAIE,UACbC,EAAW,IAAIJ,EAAMK,gBACrBC,eAAgBJ,EAAOI,eACvBC,aAAcL,EAAOK,aACrBC,SAAUR,EAAMS,cAAcC,MAAMR,EAAOM,UAC3CG,KAAMX,EAAMY,SACZC,YAAY,IAEhBb,EAAMc,KAAKC,KAAKC,KAAM,IAAIhB,EAAMiB,kBAAkB,EAAG,EAAG,GAAIb,IAyHhE,OAvHAH,EAAIiB,UAAYC,OAAOC,OAAOpB,EAAMc,KAAKI,WACzCjB,EAAIE,WACAK,UACIa,WAAeC,MAAO,GACtBC,WAAeD,MAAO,GACtBE,UAAcF,MAAO,GACrBG,gBAAoBH,MAAO,MAC3BI,iBAAqBJ,MAAO,IAC5BK,aAAiBL,MAAO,IAAItB,EAAM4B,SAClCC,IAAQP,MAAO,IAAItB,EAAM4B,QAAQ,EAAG,EAAG,KAE3CrB,cACI,4BACA,0BACA,2BACA,gCACA,mBACA,+BACA,8BACA,0BACA,uBACA,uBACA,uBACA,2EACA,iEACA,sDACA,yGACA,uBACA,8CACA,qGACA,gDACA,+BACA,2BACA,+CACA,yDACA,uGACA,IACA,6BACA,oCACA,iCACA,IACA,gBACA,8DACA,wCACA,8EACA,mCACA,8CACA,sDACA,mFACA,yEACA,kDACA,qDACA,KACFuB,KAAK,MACPxB,gBACI,+BACA,8BACA,0BACA,uBACA,uBACA,uBACA,2BACA,iCACA,mBACA,gDACA,iEACA,0BACA,4BACA,4CACA,wCACA,mGACA,0DACA,qDACA,0CACA,kEACA,IACA,6CACA,8BACA,qEACA,yDACA,IACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,+CACA,qCACA,0FACA,IACA,gBACA,8DACA,kEACA,oHACA,+CACA,0CACA,sDACA,sDACA,0DACA,uCACA,yDACA,uCACA,kHACA,6LACA,iFACA,yFACA,4EACA,iCACA,oGACA,+CACA,wEACA,yFACA,oCACA,8EACA,0CACA,KACFwB,KAAK,OAEJ7B","file":"../../objects/Sky.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Sky = function () {\n        var shader = Sky.SkyShader;\n        var material = new THREE.ShaderMaterial({\n            fragmentShader: shader.fragmentShader,\n            vertexShader: shader.vertexShader,\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            side: THREE.BackSide,\n            depthWrite: false\n        });\n        THREE.Mesh.call(this, new THREE.BoxBufferGeometry(1, 1, 1), material);\n    };\n    Sky.prototype = Object.create(THREE.Mesh.prototype);\n    Sky.SkyShader = {\n        uniforms: {\n            'luminance': { value: 1 },\n            'turbidity': { value: 2 },\n            'rayleigh': { value: 1 },\n            'mieCoefficient': { value: 0.005 },\n            'mieDirectionalG': { value: 0.8 },\n            'sunPosition': { value: new THREE.Vector3() },\n            'up': { value: new THREE.Vector3(0, 1, 0) }\n        },\n        vertexShader: [\n            'uniform vec3 sunPosition;',\n            'uniform float rayleigh;',\n            'uniform float turbidity;',\n            'uniform float mieCoefficient;',\n            'uniform vec3 up;',\n            'varying vec3 vWorldPosition;',\n            'varying vec3 vSunDirection;',\n            'varying float vSunfade;',\n            'varying vec3 vBetaR;',\n            'varying vec3 vBetaM;',\n            'varying float vSunE;',\n            'const float e = 2.71828182845904523536028747135266249775724709369995957;',\n            'const float pi = 3.141592653589793238462643383279502884197169;',\n            'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\n            'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\n            'const float v = 4.0;',\n            'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\n            'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\n            'const float cutoffAngle = 1.6110731556870734;',\n            'const float steepness = 1.5;',\n            'const float EE = 1000.0;',\n            'float sunIntensity( float zenithAngleCos ) {',\n            '\\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );',\n            '\\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );',\n            '}',\n            'vec3 totalMie( float T ) {',\n            '\\tfloat c = ( 0.2 * T ) * 10E-18;',\n            '\\treturn 0.434 * c * MieConst;',\n            '}',\n            'void main() {',\n            '\\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n            '\\tvWorldPosition = worldPosition.xyz;',\n            '\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n            '\\tgl_Position.z = gl_Position.w;',\n            '\\tvSunDirection = normalize( sunPosition );',\n            '\\tvSunE = sunIntensity( dot( vSunDirection, up ) );',\n            '\\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );',\n            '\\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\n            '\\tvBetaR = totalRayleigh * rayleighCoefficient;',\n            '\\tvBetaM = totalMie( turbidity ) * mieCoefficient;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'varying vec3 vWorldPosition;',\n            'varying vec3 vSunDirection;',\n            'varying float vSunfade;',\n            'varying vec3 vBetaR;',\n            'varying vec3 vBetaM;',\n            'varying float vSunE;',\n            'uniform float luminance;',\n            'uniform float mieDirectionalG;',\n            'uniform vec3 up;',\n            'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\n            'const float pi = 3.141592653589793238462643383279502884197169;',\n            'const float n = 1.0003;',\n            'const float N = 2.545E25;',\n            'const float rayleighZenithLength = 8.4E3;',\n            'const float mieZenithLength = 1.25E3;',\n            'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n            'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\n            'const float ONE_OVER_FOURPI = 0.07957747154594767;',\n            'float rayleighPhase( float cosTheta ) {',\n            '\\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );',\n            '}',\n            'float hgPhase( float cosTheta, float g ) {',\n            '\\tfloat g2 = pow( g, 2.0 );',\n            '\\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );',\n            '\\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );',\n            '}',\n            'const float A = 0.15;',\n            'const float B = 0.50;',\n            'const float C = 0.10;',\n            'const float D = 0.20;',\n            'const float E = 0.02;',\n            'const float F = 0.30;',\n            'const float whiteScale = 1.0748724675633854;',\n            'vec3 Uncharted2Tonemap( vec3 x ) {',\n            '\\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;',\n            '}',\n            'void main() {',\n            '\\tvec3 direction = normalize( vWorldPosition - cameraPos );',\n            '\\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );',\n            '\\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );',\n            '\\tfloat sR = rayleighZenithLength * inverse;',\n            '\\tfloat sM = mieZenithLength * inverse;',\n            '\\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\n            '\\tfloat cosTheta = dot( direction, vSunDirection );',\n            '\\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );',\n            '\\tvec3 betaRTheta = vBetaR * rPhase;',\n            '\\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );',\n            '\\tvec3 betaMTheta = vBetaM * mPhase;',\n            '\\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );',\n            '\\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\n            '\\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]',\n            '\\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]',\n            '\\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );',\n            '\\tvec3 L0 = vec3( 0.1 ) * Fex;',\n            '\\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\n            '\\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\n            '\\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\n            '\\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );',\n            '\\tvec3 color = curr * whiteScale;',\n            '\\tvec3 retColor = pow( color, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );',\n            '\\tgl_FragColor = vec4( retColor, 1.0 );',\n            '}'\n        ].join('\\n')\n    };\n    return Sky;\n});"]}