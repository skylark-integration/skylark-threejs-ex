{"version":3,"sources":["objects/LensflareElement.js"],"names":["define","THREE","threex","LensflareElement","texture","size","distance","color","this","Color","Shader","uniforms","map","value","occlusionMap","scale","screenPosition","vertexShader","join","fragmentShader","objects"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,IAAIC,EAAmB,SAAUC,EAASC,EAAMC,EAAUC,GACtDC,KAAKJ,QAAUA,EACfI,KAAKH,KAAOA,GAAQ,EACpBG,KAAKF,SAAWA,GAAY,EAC5BE,KAAKD,MAAQA,GAAS,IAAIN,EAAMQ,MAAM,WAqD1C,OAnDAN,EAAiBO,QACbC,UACIC,KAASC,MAAO,MAChBC,cAAkBD,MAAO,MACzBN,OAAWM,MAAO,MAClBE,OAAWF,MAAO,MAClBG,gBAAoBH,MAAO,OAE/BI,cACI,yBACA,+BACA,sBACA,kCACA,2BACA,qBACA,oBACA,6BACA,gBACA,cACA,4BACA,mEACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,+DACA,6CACA,6CACA,6CACA,yFACA,KACFC,KAAK,MACPC,gBACI,yBACA,yBACA,sBACA,oBACA,6BACA,gBACA,0CACA,8BACA,4BACA,+BACA,KACFD,KAAK,OAIHhB,EAAOkB,QAAQjB,iBAAmBA","file":"../../objects/LensflareElement.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    var LensflareElement = function (texture, size, distance, color) {\r\n        this.texture = texture;\r\n        this.size = size || 1;\r\n        this.distance = distance || 0;\r\n        this.color = color || new THREE.Color(16777215);\r\n    };\r\n    LensflareElement.Shader = {\r\n        uniforms: {\r\n            'map': { value: null },\r\n            'occlusionMap': { value: null },\r\n            'color': { value: null },\r\n            'scale': { value: null },\r\n            'screenPosition': { value: null }\r\n        },\r\n        vertexShader: [\r\n            'precision highp float;',\r\n            'uniform vec3 screenPosition;',\r\n            'uniform vec2 scale;',\r\n            'uniform sampler2D occlusionMap;',\r\n            'attribute vec3 position;',\r\n            'attribute vec2 uv;',\r\n            'varying vec2 vUV;',\r\n            'varying float vVisibility;',\r\n            'void main() {',\r\n            '\\tvUV = uv;',\r\n            '\\tvec2 pos = position.xy;',\r\n            '\\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',\r\n            '\\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',\r\n            '\\tvVisibility =        visibility.r / 9.0;',\r\n            '\\tvVisibility *= 1.0 - visibility.g / 9.0;',\r\n            '\\tvVisibility *=       visibility.b / 9.0;',\r\n            '\\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',\r\n            '}'\r\n        ].join('\\n'),\r\n        fragmentShader: [\r\n            'precision highp float;',\r\n            'uniform sampler2D map;',\r\n            'uniform vec3 color;',\r\n            'varying vec2 vUV;',\r\n            'varying float vVisibility;',\r\n            'void main() {',\r\n            '\\tvec4 texture = texture2D( map, vUV );',\r\n            '\\ttexture.a *= vVisibility;',\r\n            '\\tgl_FragColor = texture;',\r\n            '\\tgl_FragColor.rgb *= color;',\r\n            '}'\r\n        ].join('\\n')\r\n    };\r\n\r\n\r\n    return  threex.objects.LensflareElement = LensflareElement;\r\n});"]}