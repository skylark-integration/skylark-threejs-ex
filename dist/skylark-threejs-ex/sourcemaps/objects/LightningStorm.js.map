{"version":3,"sources":["objects/LightningStorm.js"],"names":["define","THREE","threex","LightningStrike","LightningStorm","stormParams","Object3D","call","this","size","undefined","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","copyParameters","isEternal","lightningMaterial","MeshBasicMaterial","color","onRayPosition","source","dest","set","Math","random","height","MathUtils","lerp","multiplyScalar","add","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","i","lightning","mesh","Mesh","push","prototype","Object","create","constructor","isLightningStorm","update","time","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","rayParameters","birthTime","deathTime","sourceOffset","destOffset","noiseSeed","il","length","prevState","state","RAY_PROPAGATING","RAY_EXTINGUISHED","splice","indexOf","remove","currentTime","copy","clone","objects"],"mappings":"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","file":"../../objects/LightningStorm.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    '../geometries/LightningStrike'\n], function (\n    THREE, \n    threex,\n    LightningStrike\n) {\n    'use strict';\n    var LightningStorm = function (stormParams) {\n        THREE.Object3D.call(this);\n        stormParams = stormParams || {};\n        this.stormParams = stormParams;\n        stormParams.size = stormParams.size !== undefined ? stormParams.size : 1000;\n        stormParams.minHeight = stormParams.minHeight !== undefined ? stormParams.minHeight : 80;\n        stormParams.maxHeight = stormParams.maxHeight !== undefined ? stormParams.maxHeight : 100;\n        stormParams.maxSlope = stormParams.maxSlope !== undefined ? stormParams.maxSlope : 1.1;\n        stormParams.maxLightnings = stormParams.maxLightnings !== undefined ? stormParams.maxLightnings : 3;\n        stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== undefined ? stormParams.lightningMinPeriod : 3;\n        stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== undefined ? stormParams.lightningMaxPeriod : 7;\n        stormParams.lightningMinDuration = stormParams.lightningMinDuration !== undefined ? stormParams.lightningMinDuration : 1;\n        stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== undefined ? stormParams.lightningMaxDuration : 2.5;\n        this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n        this.lightningParameters.isEternal = false;\n        this.lightningMaterial = stormParams.lightningMaterial !== undefined ? stormParams.lightningMaterial : new THREE.MeshBasicMaterial({ color: 11599871 });\n        if (stormParams.onRayPosition !== undefined) {\n            this.onRayPosition = stormParams.onRayPosition;\n        } else {\n            this.onRayPosition = function (source, dest) {\n                dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n                var height = THREE.MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n                source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n            };\n        }\n        this.onLightningDown = stormParams.onLightningDown;\n        this.inited = false;\n        this.nextLightningTime = 0;\n        this.lightningsMeshes = [];\n        this.deadLightningsMeshes = [];\n        for (var i = 0; i < this.stormParams.maxLightnings; i++) {\n            var lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n            var mesh = new THREE.Mesh(lightning, this.lightningMaterial);\n            this.deadLightningsMeshes.push(mesh);\n        }\n    };\n    LightningStorm.prototype = Object.create(THREE.Object3D.prototype);\n    LightningStorm.prototype.constructor = LightningStorm;\n    LightningStorm.prototype.isLightningStorm = true;\n    LightningStorm.prototype.update = function (time) {\n        if (!this.inited) {\n            this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n            this.inited = true;\n        }\n        if (time >= this.nextLightningTime) {\n            var lightningMesh = this.deadLightningsMeshes.pop();\n            if (lightningMesh) {\n                var lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n                lightningParams1.birthTime = time;\n                lightningParams1.deathTime = time + THREE.MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n                this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n                lightningParams1.noiseSeed = Math.random();\n                this.add(lightningMesh);\n                this.lightningsMeshes.push(lightningMesh);\n            }\n            this.nextLightningTime = this.getNextLightningTime(time);\n        }\n        var i = 0, il = this.lightningsMeshes.length;\n        while (i < il) {\n            var mesh = this.lightningsMeshes[i];\n            var lightning = mesh.geometry;\n            var prevState = lightning.state;\n            lightning.update(time);\n            if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n                if (this.onLightningDown) {\n                    this.onLightningDown(lightning);\n                }\n            }\n            if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n                this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n                this.deadLightningsMeshes.push(mesh);\n                this.remove(mesh);\n                il--;\n            } else {\n                i++;\n            }\n        }\n    };\n    LightningStorm.prototype.getNextLightningTime = function (currentTime) {\n        return currentTime + THREE.MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n    };\n    LightningStorm.prototype.copy = function (source) {\n        THREE.Object3D.prototype.copy.call(this, source);\n        this.stormParams.size = source.stormParams.size;\n        this.stormParams.minHeight = source.stormParams.minHeight;\n        this.stormParams.maxHeight = source.stormParams.maxHeight;\n        this.stormParams.maxSlope = source.stormParams.maxSlope;\n        this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n        this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n        this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n        this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n        this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n        this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n        this.lightningMaterial = source.stormParams.lightningMaterial;\n        this.onLightningDown = source.onLightningDown;\n        return this;\n    };\n    LightningStrike.prototype.clone = function () {\n        return new this.constructor(this.stormParams).copy(this);\n    };\n\n    return threex.objects.LightningStorm = LightningStorm;\n});"]}