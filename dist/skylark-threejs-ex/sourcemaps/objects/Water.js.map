{"version":3,"sources":["objects/Water.js"],"names":["define","THREE","threex","Water","geometry","options","Mesh","call","this","scope","textureWidth","undefined","textureHeight","clipBias","alpha","time","normalSampler","waterNormals","sunDirection","Vector3","sunColor","Color","waterColor","eye","distortionScale","side","FrontSide","fog","mirrorPlane","Plane","normal","mirrorWorldPosition","cameraWorldPosition","rotationMatrix","Matrix4","lookAtPosition","clipPlane","Vector4","view","target","q","textureMatrix","mirrorCamera","PerspectiveCamera","parameters","minFilter","LinearFilter","magFilter","format","RGBFormat","stencilBuffer","renderTarget","WebGLRenderTarget","MathUtils","isPowerOfTwo","texture","generateMipmaps","mirrorShader","uniforms","UniformsUtils","merge","UniformsLib","value","mirrorSampler","size","vertexShader","join","fragmentShader","material","ShaderMaterial","clone","lights","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","visible","setRenderTarget","autoClear","clear","render","viewport","state","prototype","Object","create","constructor","objects"],"mappings":"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","file":"../../objects/Water.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var Water = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        var scope = this;\n        options = options || {};\n        var textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n        var textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n        var clipBias = options.clipBias !== undefined ? options.clipBias : 0;\n        var alpha = options.alpha !== undefined ? options.alpha : 1;\n        var time = options.time !== undefined ? options.time : 0;\n        var normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n        var sunDirection = options.sunDirection !== undefined ? options.sunDirection : new THREE.Vector3(0.70707, 0.70707, 0);\n        var sunColor = new THREE.Color(options.sunColor !== undefined ? options.sunColor : 16777215);\n        var waterColor = new THREE.Color(options.waterColor !== undefined ? options.waterColor : 8355711);\n        var eye = options.eye !== undefined ? options.eye : new THREE.Vector3(0, 0, 0);\n        var distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20;\n        var side = options.side !== undefined ? options.side : THREE.FrontSide;\n        var fog = options.fog !== undefined ? options.fog : false;\n        var mirrorPlane = new THREE.Plane();\n        var normal = new THREE.Vector3();\n        var mirrorWorldPosition = new THREE.Vector3();\n        var cameraWorldPosition = new THREE.Vector3();\n        var rotationMatrix = new THREE.Matrix4();\n        var lookAtPosition = new THREE.Vector3(0, 0, -1);\n        var clipPlane = new THREE.Vector4();\n        var view = new THREE.Vector3();\n        var target = new THREE.Vector3();\n        var q = new THREE.Vector4();\n        var textureMatrix = new THREE.Matrix4();\n        var mirrorCamera = new THREE.PerspectiveCamera();\n        var parameters = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBFormat,\n            stencilBuffer: false\n        };\n        var renderTarget = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            renderTarget.texture.generateMipmaps = false;\n        }\n        var mirrorShader = {\n            uniforms: THREE.UniformsUtils.merge([\n                THREE.UniformsLib['fog'],\n                THREE.UniformsLib['lights'],\n                {\n                    'normalSampler': { value: null },\n                    'mirrorSampler': { value: null },\n                    'alpha': { value: 1 },\n                    'time': { value: 0 },\n                    'size': { value: 1 },\n                    'distortionScale': { value: 20 },\n                    'textureMatrix': { value: new THREE.Matrix4() },\n                    'sunColor': { value: new THREE.Color(8355711) },\n                    'sunDirection': { value: new THREE.Vector3(0.70707, 0.70707, 0) },\n                    'eye': { value: new THREE.Vector3() },\n                    'waterColor': { value: new THREE.Color(5592405) }\n                }\n            ]),\n            vertexShader: [\n                'uniform mat4 textureMatrix;',\n                'uniform float time;',\n                'varying vec4 mirrorCoord;',\n                'varying vec4 worldPosition;',\n                '#include <common>',\n                '#include <fog_pars_vertex>',\n                '#include <shadowmap_pars_vertex>',\n                '#include <logdepthbuf_pars_vertex>',\n                'void main() {',\n                '\\tmirrorCoord = modelMatrix * vec4( position, 1.0 );',\n                '\\tworldPosition = mirrorCoord.xyzw;',\n                '\\tmirrorCoord = textureMatrix * mirrorCoord;',\n                '\\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );',\n                '\\tgl_Position = projectionMatrix * mvPosition;',\n                '#include <logdepthbuf_vertex>',\n                '#include <fog_vertex>',\n                '#include <shadowmap_vertex>',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'uniform sampler2D mirrorSampler;',\n                'uniform float alpha;',\n                'uniform float time;',\n                'uniform float size;',\n                'uniform float distortionScale;',\n                'uniform sampler2D normalSampler;',\n                'uniform vec3 sunColor;',\n                'uniform vec3 sunDirection;',\n                'uniform vec3 eye;',\n                'uniform vec3 waterColor;',\n                'varying vec4 mirrorCoord;',\n                'varying vec4 worldPosition;',\n                'vec4 getNoise( vec2 uv ) {',\n                '\\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);',\n                '\\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );',\n                '\\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );',\n                '\\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );',\n                '\\tvec4 noise = texture2D( normalSampler, uv0 ) +',\n                '\\t\\ttexture2D( normalSampler, uv1 ) +',\n                '\\t\\ttexture2D( normalSampler, uv2 ) +',\n                '\\t\\ttexture2D( normalSampler, uv3 );',\n                '\\treturn noise * 0.5 - 1.0;',\n                '}',\n                'void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {',\n                '\\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );',\n                '\\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );',\n                '\\tspecularColor += pow( direction, shiny ) * sunColor * spec;',\n                '\\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;',\n                '}',\n                '#include <common>',\n                '#include <packing>',\n                '#include <bsdfs>',\n                '#include <fog_pars_fragment>',\n                '#include <logdepthbuf_pars_fragment>',\n                '#include <lights_pars_begin>',\n                '#include <shadowmap_pars_fragment>',\n                '#include <shadowmask_pars_fragment>',\n                'void main() {',\n                '#include <logdepthbuf_fragment>',\n                '\\tvec4 noise = getNoise( worldPosition.xz * size );',\n                '\\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );',\n                '\\tvec3 diffuseLight = vec3(0.0);',\n                '\\tvec3 specularLight = vec3(0.0);',\n                '\\tvec3 worldToEye = eye-worldPosition.xyz;',\n                '\\tvec3 eyeDirection = normalize( worldToEye );',\n                '\\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );',\n                '\\tfloat distance = length(worldToEye);',\n                '\\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;',\n                '\\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );',\n                '\\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );',\n                '\\tfloat rf0 = 0.3;',\n                '\\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );',\n                '\\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;',\n                '\\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);',\n                '\\tvec3 outgoingLight = albedo;',\n                '\\tgl_FragColor = vec4( outgoingLight, alpha );',\n                '#include <tonemapping_fragment>',\n                '#include <fog_fragment>',\n                '}'\n            ].join('\\n')\n        };\n        var material = new THREE.ShaderMaterial({\n            fragmentShader: mirrorShader.fragmentShader,\n            vertexShader: mirrorShader.vertexShader,\n            uniforms: THREE.UniformsUtils.clone(mirrorShader.uniforms),\n            lights: true,\n            side: side,\n            fog: fog\n        });\n        material.uniforms['mirrorSampler'].value = renderTarget.texture;\n        material.uniforms['textureMatrix'].value = textureMatrix;\n        material.uniforms['alpha'].value = alpha;\n        material.uniforms['time'].value = time;\n        material.uniforms['normalSampler'].value = normalSampler;\n        material.uniforms['sunColor'].value = sunColor;\n        material.uniforms['waterColor'].value = waterColor;\n        material.uniforms['sunDirection'].value = sunDirection;\n        material.uniforms['distortionScale'].value = distortionScale;\n        material.uniforms['eye'].value = eye;\n        scope.material = material;\n        scope.onBeforeRender = function (renderer, scene, camera) {\n            mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n            rotationMatrix.extractRotation(scope.matrixWorld);\n            normal.set(0, 0, 1);\n            normal.applyMatrix4(rotationMatrix);\n            view.subVectors(mirrorWorldPosition, cameraWorldPosition);\n            if (view.dot(normal) > 0)\n                return;\n            view.reflect(normal).negate();\n            view.add(mirrorWorldPosition);\n            rotationMatrix.extractRotation(camera.matrixWorld);\n            lookAtPosition.set(0, 0, -1);\n            lookAtPosition.applyMatrix4(rotationMatrix);\n            lookAtPosition.add(cameraWorldPosition);\n            target.subVectors(mirrorWorldPosition, lookAtPosition);\n            target.reflect(normal).negate();\n            target.add(mirrorWorldPosition);\n            mirrorCamera.position.copy(view);\n            mirrorCamera.up.set(0, 1, 0);\n            mirrorCamera.up.applyMatrix4(rotationMatrix);\n            mirrorCamera.up.reflect(normal);\n            mirrorCamera.lookAt(target);\n            mirrorCamera.far = camera.far;\n            mirrorCamera.updateMatrixWorld();\n            mirrorCamera.projectionMatrix.copy(camera.projectionMatrix);\n            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n            textureMatrix.multiply(mirrorCamera.projectionMatrix);\n            textureMatrix.multiply(mirrorCamera.matrixWorldInverse);\n            mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition);\n            mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse);\n            clipPlane.set(mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant);\n            var projectionMatrix = mirrorCamera.projectionMatrix;\n            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n            q.z = -1;\n            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n            clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n            projectionMatrix.elements[2] = clipPlane.x;\n            projectionMatrix.elements[6] = clipPlane.y;\n            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n            projectionMatrix.elements[14] = clipPlane.w;\n            eye.setFromMatrixPosition(camera.matrixWorld);\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentXrEnabled = renderer.xr.enabled;\n            var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            scope.visible = false;\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.setRenderTarget(renderTarget);\n            if (renderer.autoClear === false)\n                renderer.clear();\n            renderer.render(scene, mirrorCamera);\n            scope.visible = true;\n            renderer.xr.enabled = currentXrEnabled;\n            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n            renderer.setRenderTarget(currentRenderTarget);\n            var viewport = camera.viewport;\n            if (viewport !== undefined) {\n                renderer.state.viewport(viewport);\n            }\n        };\n    };\n    Water.prototype = Object.create(THREE.Mesh.prototype);\n    Water.prototype.constructor = Water;\n\n    return threex.objects.Water = Water;\n});"]}