{"version":3,"sources":["objects/Lensflare.js"],"names":["define","THREE","threex","Lensflare","Mesh","call","this","Geometry","MeshBasicMaterial","opacity","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","Vector3","positionView","tempMap","DataTexture","Uint8Array","RGBFormat","minFilter","NearestFilter","magFilter","wrapS","ClampToEdgeWrapping","wrapT","occlusionMap","geometry","material1a","RawShaderMaterial","uniforms","scale","value","screenPosition","vertexShader","join","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","Color","Vector2","blending","AdditiveBlending","mesh2","addElement","element","push","screenPositionPixels","validArea","Box2","viewport","Vector4","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","Object","create","constructor","isLensflare","objects"],"mappings":"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","file":"../../objects/Lensflare.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var Lensflare = function () {\n        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({\n            opacity: 0,\n            transparent: true\n        }));\n        this.type = 'Lensflare';\n        this.frustumCulled = false;\n        this.renderOrder = Infinity;\n        var positionScreen = new THREE.Vector3();\n        var positionView = new THREE.Vector3();\n        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        tempMap.minFilter = THREE.NearestFilter;\n        tempMap.magFilter = THREE.NearestFilter;\n        tempMap.wrapS = THREE.ClampToEdgeWrapping;\n        tempMap.wrapT = THREE.ClampToEdgeWrapping;\n        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\n        occlusionMap.minFilter = THREE.NearestFilter;\n        occlusionMap.magFilter = THREE.NearestFilter;\n        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;\n        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;\n        var geometry = Lensflare.Geometry;\n        var material1a = new THREE.RawShaderMaterial({\n            uniforms: {\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'void main() {',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'void main() {',\n                '\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\n                '}'\n            ].join('\\n'),\n            depthTest: true,\n            depthWrite: false,\n            transparent: false\n        });\n        var material1b = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: tempMap },\n                'scale': { value: null },\n                'screenPosition': { value: null }\n            },\n            vertexShader: [\n                'precision highp float;',\n                'uniform vec3 screenPosition;',\n                'uniform vec2 scale;',\n                'attribute vec3 position;',\n                'attribute vec2 uv;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tvUV = uv;',\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\n                '}'\n            ].join('\\n'),\n            fragmentShader: [\n                'precision highp float;',\n                'uniform sampler2D map;',\n                'varying vec2 vUV;',\n                'void main() {',\n                '\\tgl_FragColor = texture2D( map, vUV );',\n                '}'\n            ].join('\\n'),\n            depthTest: false,\n            depthWrite: false,\n            transparent: false\n        });\n        var mesh1 = new THREE.Mesh(geometry, material1a);\n        var elements = [];\n        var shader = LensflareElement.Shader;\n        var material2 = new THREE.RawShaderMaterial({\n            uniforms: {\n                'map': { value: null },\n                'occlusionMap': { value: occlusionMap },\n                'color': { value: new THREE.Color(16777215) },\n                'scale': { value: new THREE.Vector2() },\n                'screenPosition': { value: new THREE.Vector3() }\n            },\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false\n        });\n        var mesh2 = new THREE.Mesh(geometry, material2);\n        this.addElement = function (element) {\n            elements.push(element);\n        };\n        var scale = new THREE.Vector2();\n        var screenPositionPixels = new THREE.Vector2();\n        var validArea = new THREE.Box2();\n        var viewport = new THREE.Vector4();\n        this.onBeforeRender = function (renderer, scene, camera) {\n            renderer.getCurrentViewport(viewport);\n            var invAspect = viewport.w / viewport.z;\n            var halfViewportWidth = viewport.z / 2;\n            var halfViewportHeight = viewport.w / 2;\n            var size = 16 / viewport.w;\n            scale.set(size * invAspect, size);\n            validArea.min.set(viewport.x, viewport.y);\n            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n            positionView.setFromMatrixPosition(this.matrixWorld);\n            positionView.applyMatrix4(camera.matrixWorldInverse);\n            if (positionView.z > 0)\n                return;\n            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n            if (validArea.containsPoint(screenPositionPixels)) {\n                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n                var uniforms = material1a.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\n                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n                var uniforms = material1b.uniforms;\n                uniforms['scale'].value = scale;\n                uniforms['screenPosition'].value = positionScreen;\n                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\n                var vecX = -positionScreen.x * 2;\n                var vecY = -positionScreen.y * 2;\n                for (var i = 0, l = elements.length; i < l; i++) {\n                    var element = elements[i];\n                    var uniforms = material2.uniforms;\n                    uniforms['color'].value.copy(element.color);\n                    uniforms['map'].value = element.texture;\n                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n                    var size = element.size / viewport.w;\n                    var invAspect = viewport.w / viewport.z;\n                    uniforms['scale'].value.set(size * invAspect, size);\n                    material2.uniformsNeedUpdate = true;\n                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n                }\n            }\n        };\n        this.dispose = function () {\n            material1a.dispose();\n            material1b.dispose();\n            material2.dispose();\n            tempMap.dispose();\n            occlusionMap.dispose();\n            for (var i = 0, l = elements.length; i < l; i++) {\n                elements[i].texture.dispose();\n            }\n        };\n    };\n    Lensflare.prototype = Object.create(THREE.Mesh.prototype);\n    Lensflare.prototype.constructor = Lensflare;\n    Lensflare.prototype.isLensflare = true;\n\n    return threex.objects.Lensflare = Lensflare;\n});"]}