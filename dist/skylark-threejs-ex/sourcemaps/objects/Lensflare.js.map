{"version":3,"sources":["objects/Lensflare.js"],"names":["define","THREE","threex","geometry","float32Array","interleavedBuffer","Lensflare","Mesh","call","this","Geometry","MeshBasicMaterial","opacity","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","Vector3","positionView","tempMap","DataTexture","Uint8Array","RGBFormat","minFilter","NearestFilter","magFilter","wrapS","ClampToEdgeWrapping","wrapT","occlusionMap","material1a","RawShaderMaterial","uniforms","scale","value","screenPosition","vertexShader","join","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","Color","Vector2","blending","AdditiveBlending","mesh2","addElement","element","push","screenPositionPixels","validArea","Box2","viewport","Vector4","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","Object","create","constructor","isLensflare","BufferGeometry","Float32Array","InterleavedBuffer","setIndex","setAttribute","InterleavedBufferAttribute","objects"],"mappings":"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","file":"../../objects/Lensflare.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var Lensflare = function () {\r\n        THREE.Mesh.call(this, Lensflare.Geometry, new THREE.MeshBasicMaterial({\r\n            opacity: 0,\r\n            transparent: true\r\n        }));\r\n        this.type = 'Lensflare';\r\n        this.frustumCulled = false;\r\n        this.renderOrder = Infinity;\r\n        var positionScreen = new THREE.Vector3();\r\n        var positionView = new THREE.Vector3();\r\n        var tempMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\r\n        tempMap.minFilter = THREE.NearestFilter;\r\n        tempMap.magFilter = THREE.NearestFilter;\r\n        tempMap.wrapS = THREE.ClampToEdgeWrapping;\r\n        tempMap.wrapT = THREE.ClampToEdgeWrapping;\r\n        var occlusionMap = new THREE.DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, THREE.RGBFormat);\r\n        occlusionMap.minFilter = THREE.NearestFilter;\r\n        occlusionMap.magFilter = THREE.NearestFilter;\r\n        occlusionMap.wrapS = THREE.ClampToEdgeWrapping;\r\n        occlusionMap.wrapT = THREE.ClampToEdgeWrapping;\r\n        var geometry = Lensflare.Geometry;\r\n        var material1a = new THREE.RawShaderMaterial({\r\n            uniforms: {\r\n                'scale': { value: null },\r\n                'screenPosition': { value: null }\r\n            },\r\n            vertexShader: [\r\n                'precision highp float;',\r\n                'uniform vec3 screenPosition;',\r\n                'uniform vec2 scale;',\r\n                'attribute vec3 position;',\r\n                'void main() {',\r\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\r\n                '}'\r\n            ].join('\\n'),\r\n            fragmentShader: [\r\n                'precision highp float;',\r\n                'void main() {',\r\n                '\\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );',\r\n                '}'\r\n            ].join('\\n'),\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            transparent: false\r\n        });\r\n        var material1b = new THREE.RawShaderMaterial({\r\n            uniforms: {\r\n                'map': { value: tempMap },\r\n                'scale': { value: null },\r\n                'screenPosition': { value: null }\r\n            },\r\n            vertexShader: [\r\n                'precision highp float;',\r\n                'uniform vec3 screenPosition;',\r\n                'uniform vec2 scale;',\r\n                'attribute vec3 position;',\r\n                'attribute vec2 uv;',\r\n                'varying vec2 vUV;',\r\n                'void main() {',\r\n                '\\tvUV = uv;',\r\n                '\\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );',\r\n                '}'\r\n            ].join('\\n'),\r\n            fragmentShader: [\r\n                'precision highp float;',\r\n                'uniform sampler2D map;',\r\n                'varying vec2 vUV;',\r\n                'void main() {',\r\n                '\\tgl_FragColor = texture2D( map, vUV );',\r\n                '}'\r\n            ].join('\\n'),\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: false\r\n        });\r\n        var mesh1 = new THREE.Mesh(geometry, material1a);\r\n        var elements = [];\r\n        var shader = LensflareElement.Shader;\r\n        var material2 = new THREE.RawShaderMaterial({\r\n            uniforms: {\r\n                'map': { value: null },\r\n                'occlusionMap': { value: occlusionMap },\r\n                'color': { value: new THREE.Color(16777215) },\r\n                'scale': { value: new THREE.Vector2() },\r\n                'screenPosition': { value: new THREE.Vector3() }\r\n            },\r\n            vertexShader: shader.vertexShader,\r\n            fragmentShader: shader.fragmentShader,\r\n            blending: THREE.AdditiveBlending,\r\n            transparent: true,\r\n            depthWrite: false\r\n        });\r\n        var mesh2 = new THREE.Mesh(geometry, material2);\r\n        this.addElement = function (element) {\r\n            elements.push(element);\r\n        };\r\n        var scale = new THREE.Vector2();\r\n        var screenPositionPixels = new THREE.Vector2();\r\n        var validArea = new THREE.Box2();\r\n        var viewport = new THREE.Vector4();\r\n        this.onBeforeRender = function (renderer, scene, camera) {\r\n            renderer.getCurrentViewport(viewport);\r\n            var invAspect = viewport.w / viewport.z;\r\n            var halfViewportWidth = viewport.z / 2;\r\n            var halfViewportHeight = viewport.w / 2;\r\n            var size = 16 / viewport.w;\r\n            scale.set(size * invAspect, size);\r\n            validArea.min.set(viewport.x, viewport.y);\r\n            validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\r\n            positionView.setFromMatrixPosition(this.matrixWorld);\r\n            positionView.applyMatrix4(camera.matrixWorldInverse);\r\n            if (positionView.z > 0)\r\n                return;\r\n            positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\r\n            screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\r\n            screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\r\n            if (validArea.containsPoint(screenPositionPixels)) {\r\n                renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\r\n                var uniforms = material1a.uniforms;\r\n                uniforms['scale'].value = scale;\r\n                uniforms['screenPosition'].value = positionScreen;\r\n                renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\r\n                renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\r\n                var uniforms = material1b.uniforms;\r\n                uniforms['scale'].value = scale;\r\n                uniforms['screenPosition'].value = positionScreen;\r\n                renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\r\n                var vecX = -positionScreen.x * 2;\r\n                var vecY = -positionScreen.y * 2;\r\n                for (var i = 0, l = elements.length; i < l; i++) {\r\n                    var element = elements[i];\r\n                    var uniforms = material2.uniforms;\r\n                    uniforms['color'].value.copy(element.color);\r\n                    uniforms['map'].value = element.texture;\r\n                    uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\r\n                    uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\r\n                    var size = element.size / viewport.w;\r\n                    var invAspect = viewport.w / viewport.z;\r\n                    uniforms['scale'].value.set(size * invAspect, size);\r\n                    material2.uniformsNeedUpdate = true;\r\n                    renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\r\n                }\r\n            }\r\n        };\r\n        this.dispose = function () {\r\n            material1a.dispose();\r\n            material1b.dispose();\r\n            material2.dispose();\r\n            tempMap.dispose();\r\n            occlusionMap.dispose();\r\n            for (var i = 0, l = elements.length; i < l; i++) {\r\n                elements[i].texture.dispose();\r\n            }\r\n        };\r\n    };\r\n    Lensflare.prototype = Object.create(THREE.Mesh.prototype);\r\n    Lensflare.prototype.constructor = Lensflare;\r\n    Lensflare.prototype.isLensflare = true;\r\n\r\n    Lensflare.Geometry = function () {\r\n        var geometry = new THREE.BufferGeometry();\r\n        var float32Array = new Float32Array([\r\n            -1,\r\n            -1,\r\n            0,\r\n            0,\r\n            0,\r\n            1,\r\n            -1,\r\n            0,\r\n            1,\r\n            0,\r\n            1,\r\n            1,\r\n            0,\r\n            1,\r\n            1,\r\n            -1,\r\n            1,\r\n            0,\r\n            0,\r\n            1\r\n        ]);\r\n        var interleavedBuffer = new THREE.InterleavedBuffer(float32Array, 5);\r\n        geometry.setIndex([\r\n            0,\r\n            1,\r\n            2,\r\n            0,\r\n            2,\r\n            3\r\n        ]);\r\n        geometry.setAttribute('position', new THREE.InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\r\n        geometry.setAttribute('uv', new THREE.InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\r\n        return geometry;\r\n    }();\r\n    return threex.objects.Lensflare = Lensflare;\r\n});"]}