{"version":3,"sources":["objects/Fire.js"],"names":["define","THREE","Fire","geometry","options","Mesh","call","this","type","clock","Clock","textureWidth","textureHeight","oneOverWidth","oneOverHeight","debug","undefined","color1","Color","color2","color3","colorBias","diffuse","viscosity","expansion","swirl","burnRate","drag","airSpeed","windVector","Vector2","speed","massConservation","size","sourceData","Uint8Array","clearSources","y","x","stride","sourceMaterial","uniforms","value","internalSource","needsUpdate","addSource","u","v","radius","density","windX","windY","startX","Math","max","floor","startY","endX","min","endY","diffX","diffY","wind","setSourceMap","texture","parameters","minFilter","NearestFilter","magFilter","depthBuffer","stencilBuffer","field0","WebGLRenderTarget","background","field1","fieldProj","MathUtils","isPowerOfTwo","generateMipmaps","fieldScene","Scene","orthoCamera","OrthographicCamera","position","z","fieldGeometry","PlaneBufferGeometry","DataTexture","RGBAFormat","shader","SourceShader","ShaderMaterial","vertexShader","fragmentShader","transparent","sourceMesh","add","DiffuseShader","diffuseMaterial","diffuseMesh","DriftShader","driftMaterial","driftMesh","ProjectionShader1","projMaterial1","projMesh1","ProjectionShader2","projMaterial2","projMesh2","ProjectionShader3","projMaterial3","projMesh3","DebugShader","ColorShader","material","configShaders","dt","exp","clearDiffuse","swapTextures","swap","saveRenderState","renderer","savedRenderTarget","getRenderTarget","savedXrEnabled","xr","enabled","savedShadowAutoUpdate","shadowMap","autoUpdate","savedAntialias","antialias","savedToneMapping","toneMapping","restoreRenderState","setRenderTarget","renderSource","visible","render","renderDiffuse","renderDrift","renderProject","i","temp","onBeforeRender","delta","getDelta","NoToneMapping","map","LinearFilter","prototype","Object","create","constructor","sourceMap","densityMap","join","projMap"],"mappings":"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E,gBACI,8BACA,+BACA,yBACA,2BACA,2BACA,uBACA,0BACA,sBACA,gCACA,oBACA,gBACA,8CACA,4EACA,4EACA,6EACA,6EACA,6FACA,6FACA,6FACA,6FACA,gDACA,gDACA,gDACA,gDACA,gDACA,mDACA,mDACA,mDACA,mDACA,mNACA,oCACA,6DACA,iCACA,0DACA,sEACA,yFACA,qDACA,yFACA,+DACA,gEACA,qEACA,sEACA,KACFgE,KAAK,OAEX3J,EAAKkG,aACD3D,UACI5B,cAAkB6B,MAAO,MACzB5B,eAAmB4B,MAAO,MAC1Bb,YAAgBa,MAAO,IAAIzC,EAAM6B,QAAQ,EAAG,IAC5CF,UAAcc,MAAO,MACrBkH,YAAgBlH,MAAO,OAE3BkD,cACI,oBACA,gBACA,iBACA,kEACA,oDACA,KACFiE,KAAK,MACPhE,gBACI,8BACA,+BACA,2BACA,0BACA,gCACA,oBACA,gBACA,uDACA,yDACA,wCACA,sFACA,kEACA,kCACA,kCACA,2DACA,gFACA,8EACA,+EACA,wFACA,yDACA,yDACA,yDACA,yDACA,uFACA,2DACA,6BACA,KACFgE,KAAK,OAEX3J,EAAKqG,mBACD9D,UACI5B,cAAkB6B,MAAO,MACzB5B,eAAmB4B,MAAO,MAC1BkH,YAAgBlH,MAAO,OAE3BkD,cACI,oBACA,gBACA,iBACA,kEACA,oDACA,KACFiE,KAAK,MACPhE,gBACI,8BACA,+BACA,gCACA,oBACA,gBACA,+EACA,+EACA,gFACA,gFACA,uCACA,uCACA,uCACA,uCACA,sDACA,kDACA,wEACA,KACFgE,KAAK,OAEX3J,EAAKwG,mBACDjE,UACI5B,cAAkB6B,MAAO,MACzB5B,eAAmB4B,MAAO,MAC1BkH,YAAgBlH,MAAO,OAE3BkD,cACI,oBACA,gBACA,iBACA,kEACA,oDACA,KACFiE,KAAK,MACPhE,gBACI,8BACA,+BACA,gCACA,oBACA,gBACA,kDACA,+EACA,+EACA,gFACA,gFACA,oDACA,uCACA,uCACA,uCACA,uCACA,sDACA,oEACA,KACFgE,KAAK,OAEX3J,EAAK2G,mBACDpE,UACI5B,cAAkB6B,MAAO,MACzB5B,eAAmB4B,MAAO,MAC1BkH,YAAgBlH,MAAO,MACvBoH,SAAapH,MAAO,OAExBkD,cACI,oBACA,gBACA,iBACA,kEACA,oDACA,KACFiE,KAAK,MACPhE,gBACI,8BACA,+BACA,gCACA,6BACA,oBACA,gBACA,8CACA,4EACA,4EACA,6EACA,6EACA,wDACA,wDACA,uCACA,uCACA,uCACA,uCACA,sDACA,+CACA,+CACA,8FACA,KACFgE,KAAK,OAEX3J,EAAK+G,aACDxE,UACIxB,QAAYyB,MAAO,MACnBvB,QAAYuB,MAAO,MACnBtB,QAAYsB,MAAO,MACnBrB,WAAeqB,MAAO,MACtBkH,YAAgBlH,MAAO,OAE3BkD,cACI,oBACA,gBACA,iBACA,kEACA,oDACA,KACFiE,KAAK,MACPhE,gBACI,uBACA,uBACA,uBACA,2BACA,gCACA,oBACA,gBACA,sDACA,0DACA,qDACA,+FACA,yGACA,qDACA,KACFgE,KAAK,OAEX3J,EAAK8G,aACDvE,UACIxB,QAAYyB,MAAO,MACnBvB,QAAYuB,MAAO,MACnBtB,QAAYsB,MAAO,MACnBrB,WAAeqB,MAAO,MACtBkH,YAAgBlH,MAAO,OAE3BkD,cACI,oBACA,gBACA,iBACA,kEACA,oDACA,KACFiE,KAAK,MACPhE,gBACI,gCACA,oBACA,gBACA,qBACA,gDACA,kDACA,0CACA,yBACA,gDACA,gDACA,iEACA,uCACA,KACFgE,KAAK,OAEJ3J","file":"../../objects/Fire.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    var Fire = function (geometry, options) {\n        THREE.Mesh.call(this, geometry);\n        this.type = 'Fire';\n        this.clock = new THREE.Clock();\n        options = options || {};\n        var textureWidth = options.textureWidth || 512;\n        var textureHeight = options.textureHeight || 512;\n        var oneOverWidth = 1 / textureWidth;\n        var oneOverHeight = 1 / textureHeight;\n        var debug = options.debug === undefined ? false : options.debug;\n        this.color1 = options.color1 || new THREE.Color(16777215);\n        this.color2 = options.color2 || new THREE.Color(16752640);\n        this.color3 = options.color3 || new THREE.Color(0);\n        this.colorBias = options.colorBias === undefined ? 0.8 : options.colorBias;\n        this.diffuse = options.diffuse === undefined ? 1.33 : options.diffuse;\n        this.viscosity = options.viscosity === undefined ? 0.25 : options.viscosity;\n        this.expansion = options.expansion === undefined ? -0.25 : options.expansion;\n        this.swirl = options.swirl === undefined ? 50 : options.swirl;\n        this.burnRate = options.burnRate === undefined ? 0.3 : options.burnRate;\n        this.drag = options.drag === undefined ? 0.35 : options.drag;\n        this.airSpeed = options.airSpeed === undefined ? 6 : options.airSpeed;\n        this.windVector = options.windVector || new THREE.Vector2(0, 0.75);\n        this.speed = options.speed === undefined ? 500 : options.speed;\n        this.massConservation = options.massConservation === undefined ? false : options.massConservation;\n        var size = textureWidth * textureHeight;\n        this.sourceData = new Uint8Array(4 * size);\n        this.clearSources = function () {\n            for (var y = 0; y < textureHeight; y++) {\n                for (var x = 0; x < textureWidth; x++) {\n                    var i = y * textureWidth + x;\n                    var stride = i * 4;\n                    this.sourceData[stride] = 0;\n                    this.sourceData[stride + 1] = 0;\n                    this.sourceData[stride + 2] = 0;\n                    this.sourceData[stride + 3] = 0;\n                }\n            }\n            this.sourceMaterial.uniforms['sourceMap'].value = this.internalSource;\n            this.sourceMaterial.needsUpdate = true;\n            return this.sourceData;\n        };\n        this.addSource = function (u, v, radius, density = null, windX = null, windY = null) {\n            var startX = Math.max(Math.floor((u - radius) * textureWidth), 0);\n            var startY = Math.max(Math.floor((v - radius) * textureHeight), 0);\n            var endX = Math.min(Math.floor((u + radius) * textureWidth), textureWidth);\n            var endY = Math.min(Math.floor((v + radius) * textureHeight), textureHeight);\n            for (var y = startY; y < endY; y++) {\n                for (var x = startX; x < endX; x++) {\n                    var diffX = x * oneOverWidth - u;\n                    var diffY = y * oneOverHeight - v;\n                    if (diffX * diffX + diffY * diffY < radius * radius) {\n                        var i = y * textureWidth + x;\n                        var stride = i * 4;\n                        if (density != null) {\n                            this.sourceData[stride] = Math.min(Math.max(density, 0), 1) * 255;\n                        }\n                        if (windX != null) {\n                            var wind = Math.min(Math.max(windX, -1), 1);\n                            wind = wind < 0 ? Math.floor(wind * 127) + 255 : Math.floor(wind * 127);\n                            this.sourceData[stride + 1] = wind;\n                        }\n                        if (windY != null) {\n                            var wind = Math.min(Math.max(windY, -1), 1);\n                            wind = wind < 0 ? Math.floor(wind * 127) + 255 : Math.floor(wind * 127);\n                            this.sourceData[stride + 2] = wind;\n                        }\n                    }\n                }\n            }\n            this.internalSource.needsUpdate = true;\n            return this.sourceData;\n        };\n        this.setSourceMap = function (texture) {\n            this.sourceMaterial.uniforms['sourceMap'].value = texture;\n        };\n        var parameters = {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            depthBuffer: false,\n            stencilBuffer: false\n        };\n        this.field0 = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        this.field0.background = new THREE.Color(0);\n        this.field1 = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        this.field0.background = new THREE.Color(0);\n        this.fieldProj = new THREE.WebGLRenderTarget(textureWidth, textureHeight, parameters);\n        this.field0.background = new THREE.Color(0);\n        if (!THREE.MathUtils.isPowerOfTwo(textureWidth) || !THREE.MathUtils.isPowerOfTwo(textureHeight)) {\n            this.field0.texture.generateMipmaps = false;\n            this.field1.texture.generateMipmaps = false;\n            this.fieldProj.texture.generateMipmaps = false;\n        }\n        this.fieldScene = new THREE.Scene();\n        this.fieldScene.background = new THREE.Color(0);\n        this.orthoCamera = new THREE.OrthographicCamera(textureWidth / -2, textureWidth / 2, textureHeight / 2, textureHeight / -2, 1, 2);\n        this.orthoCamera.position.z = 1;\n        this.fieldGeometry = new THREE.PlaneBufferGeometry(textureWidth, textureHeight);\n        this.internalSource = new THREE.DataTexture(this.sourceData, textureWidth, textureHeight, THREE.RGBAFormat);\n        var shader = Fire.SourceShader;\n        this.sourceMaterial = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: false\n        });\n        this.clearSources();\n        this.sourceMesh = new THREE.Mesh(this.fieldGeometry, this.sourceMaterial);\n        this.fieldScene.add(this.sourceMesh);\n        var shader = Fire.DiffuseShader;\n        this.diffuseMaterial = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: false\n        });\n        this.diffuseMaterial.uniforms['oneOverWidth'].value = oneOverWidth;\n        this.diffuseMaterial.uniforms['oneOverHeight'].value = oneOverHeight;\n        this.diffuseMesh = new THREE.Mesh(this.fieldGeometry, this.diffuseMaterial);\n        this.fieldScene.add(this.diffuseMesh);\n        shader = Fire.DriftShader;\n        this.driftMaterial = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: false\n        });\n        this.driftMaterial.uniforms['oneOverWidth'].value = oneOverWidth;\n        this.driftMaterial.uniforms['oneOverHeight'].value = oneOverHeight;\n        this.driftMesh = new THREE.Mesh(this.fieldGeometry, this.driftMaterial);\n        this.fieldScene.add(this.driftMesh);\n        shader = Fire.ProjectionShader1;\n        this.projMaterial1 = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: false\n        });\n        this.projMaterial1.uniforms['oneOverWidth'].value = oneOverWidth;\n        this.projMaterial1.uniforms['oneOverHeight'].value = oneOverHeight;\n        this.projMesh1 = new THREE.Mesh(this.fieldGeometry, this.projMaterial1);\n        this.fieldScene.add(this.projMesh1);\n        shader = Fire.ProjectionShader2;\n        this.projMaterial2 = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: false\n        });\n        this.projMaterial2.uniforms['oneOverWidth'].value = oneOverWidth;\n        this.projMaterial2.uniforms['oneOverHeight'].value = oneOverHeight;\n        this.projMesh2 = new THREE.Mesh(this.fieldGeometry, this.projMaterial2);\n        this.fieldScene.add(this.projMesh2);\n        shader = Fire.ProjectionShader3;\n        this.projMaterial3 = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: false\n        });\n        this.projMaterial3.uniforms['oneOverWidth'].value = oneOverWidth;\n        this.projMaterial3.uniforms['oneOverHeight'].value = oneOverHeight;\n        this.projMesh3 = new THREE.Mesh(this.fieldGeometry, this.projMaterial3);\n        this.fieldScene.add(this.projMesh3);\n        if (debug) {\n            shader = Fire.DebugShader;\n        } else {\n            shader = Fire.ColorShader;\n        }\n        this.material = new THREE.ShaderMaterial({\n            uniforms: shader.uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n            transparent: true\n        });\n        this.material.uniforms['densityMap'].value = this.field1.texture;\n        this.configShaders = function (dt) {\n            this.diffuseMaterial.uniforms['diffuse'].value = dt * 0.05 * this.diffuse;\n            this.diffuseMaterial.uniforms['viscosity'].value = dt * 0.05 * this.viscosity;\n            this.diffuseMaterial.uniforms['expansion'].value = Math.exp(this.expansion * -1);\n            this.diffuseMaterial.uniforms['swirl'].value = Math.exp(this.swirl * -0.1);\n            this.diffuseMaterial.uniforms['drag'].value = Math.exp(this.drag * -0.1);\n            this.diffuseMaterial.uniforms['burnRate'].value = this.burnRate * dt * 0.01;\n            this.driftMaterial.uniforms['windVector'].value = this.windVector;\n            this.driftMaterial.uniforms['airSpeed'].value = dt * this.airSpeed * 0.001 * textureHeight;\n            this.material.uniforms['color1'].value = this.color1;\n            this.material.uniforms['color2'].value = this.color2;\n            this.material.uniforms['color3'].value = this.color3;\n            this.material.uniforms['colorBias'].value = this.colorBias;\n        };\n        this.clearDiffuse = function () {\n            this.diffuseMaterial.uniforms['expansion'].value = 1;\n            this.diffuseMaterial.uniforms['swirl'].value = 1;\n            this.diffuseMaterial.uniforms['drag'].value = 1;\n            this.diffuseMaterial.uniforms['burnRate'].value = 0;\n        };\n        this.swapTextures = function () {\n            var swap = this.field0;\n            this.field0 = this.field1;\n            this.field1 = swap;\n        };\n        this.saveRenderState = function (renderer) {\n            this.savedRenderTarget = renderer.getRenderTarget();\n            this.savedXrEnabled = renderer.xr.enabled;\n            this.savedShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n            this.savedAntialias = renderer.antialias;\n            this.savedToneMapping = renderer.toneMapping;\n        };\n        this.restoreRenderState = function (renderer) {\n            renderer.xr.enabled = this.savedXrEnabled;\n            renderer.shadowMap.autoUpdate = this.savedShadowAutoUpdate;\n            renderer.setRenderTarget(this.savedRenderTarget);\n            renderer.antialias = this.savedAntialias;\n            renderer.toneMapping = this.savedToneMapping;\n        };\n        this.renderSource = function (renderer) {\n            this.sourceMesh.visible = true;\n            this.sourceMaterial.uniforms['densityMap'].value = this.field0.texture;\n            renderer.setRenderTarget(this.field1);\n            renderer.render(this.fieldScene, this.orthoCamera);\n            this.sourceMesh.visible = false;\n            this.swapTextures();\n        };\n        this.renderDiffuse = function (renderer) {\n            this.diffuseMesh.visible = true;\n            this.diffuseMaterial.uniforms['densityMap'].value = this.field0.texture;\n            renderer.setRenderTarget(this.field1);\n            renderer.render(this.fieldScene, this.orthoCamera);\n            this.diffuseMesh.visible = false;\n            this.swapTextures();\n        };\n        this.renderDrift = function (renderer) {\n            this.driftMesh.visible = true;\n            this.driftMaterial.uniforms['densityMap'].value = this.field0.texture;\n            renderer.setRenderTarget(this.field1);\n            renderer.render(this.fieldScene, this.orthoCamera);\n            this.driftMesh.visible = false;\n            this.swapTextures();\n        };\n        this.renderProject = function (renderer) {\n            this.projMesh1.visible = true;\n            this.projMaterial1.uniforms['densityMap'].value = this.field0.texture;\n            renderer.setRenderTarget(this.fieldProj);\n            renderer.render(this.fieldScene, this.orthoCamera);\n            this.projMesh1.visible = false;\n            this.projMaterial2.uniforms['densityMap'].value = this.fieldProj.texture;\n            this.projMesh2.visible = true;\n            for (var i = 0; i < 20; i++) {\n                renderer.setRenderTarget(this.field1);\n                renderer.render(this.fieldScene, this.orthoCamera);\n                var temp = this.field1;\n                this.field1 = this.fieldProj;\n                this.fieldProj = temp;\n                this.projMaterial2.uniforms['densityMap'].value = this.fieldProj.texture;\n            }\n            this.projMesh2.visible = false;\n            this.projMaterial3.uniforms['densityMap'].value = this.field0.texture;\n            this.projMaterial3.uniforms['projMap'].value = this.fieldProj.texture;\n            this.projMesh3.visible = true;\n            renderer.setRenderTarget(this.field1);\n            renderer.render(this.fieldScene, this.orthoCamera);\n            this.projMesh3.visible = false;\n            this.swapTextures();\n        };\n        this.onBeforeRender = function (renderer) {\n            var delta = this.clock.getDelta();\n            if (delta > 0.1) {\n                delta = 0.1;\n            }\n            var dt = delta * (this.speed * 0.1);\n            this.configShaders(dt);\n            this.saveRenderState(renderer);\n            renderer.xr.enabled = false;\n            renderer.shadowMap.autoUpdate = false;\n            renderer.antialias = false;\n            renderer.toneMapping = THREE.NoToneMapping;\n            this.sourceMesh.visible = false;\n            this.diffuseMesh.visible = false;\n            this.driftMesh.visible = false;\n            this.projMesh1.visible = false;\n            this.projMesh2.visible = false;\n            this.projMesh3.visible = false;\n            this.renderSource(renderer);\n            this.clearDiffuse();\n            for (var i = 0; i < 21; i++) {\n                this.renderDiffuse(renderer);\n            }\n            this.configShaders(dt);\n            this.renderDiffuse(renderer);\n            this.renderDrift(renderer);\n            if (this.massConservation) {\n                this.renderProject(renderer);\n                this.renderProject(renderer);\n            }\n            this.material.map = this.field1.texture;\n            this.material.transparent = true;\n            this.material.minFilter = THREE.LinearFilter, this.material.magFilter = THREE.LinearFilter, this.restoreRenderState(renderer);\n        };\n    };\n    Fire.prototype = Object.create(THREE.Mesh.prototype);\n    Fire.prototype.constructor = Fire;\n    Fire.SourceShader = {\n        uniforms: {\n            'sourceMap': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D sourceMap;',\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    vec4 source = texture2D( sourceMap, vUv );',\n            '    vec4 current = texture2D( densityMap, vUv );',\n            '    vec2 v0 = (current.gb - step(0.5, current.gb)) * 2.0;',\n            '    vec2 v1 = (source.gb - step(0.5, source.gb)) * 2.0;',\n            '    vec2 newVel = v0 + v1;',\n            '    newVel = clamp(newVel, -0.99, 0.99);',\n            '    newVel = newVel * 0.5 + step(0.0, -newVel);',\n            '    float newDensity = source.r + current.a;',\n            '    float newTemp = source.r + current.r;',\n            '    newDensity = clamp(newDensity, 0.0, 1.0);',\n            '    newTemp = clamp(newTemp, 0.0, 1.0);',\n            '    gl_FragColor = vec4(newTemp, newVel.xy, newDensity);',\n            '}'\n        ].join('\\n')\n    };\n    Fire.DiffuseShader = {\n        uniforms: {\n            'oneOverWidth': { value: null },\n            'oneOverHeight': { value: null },\n            'diffuse': { value: null },\n            'viscosity': { value: null },\n            'expansion': { value: null },\n            'swirl': { value: null },\n            'drag': { value: null },\n            'burnRate': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float oneOverWidth;',\n            'uniform float oneOverHeight;',\n            'uniform float diffuse;',\n            'uniform float viscosity;',\n            'uniform float expansion;',\n            'uniform float swirl;',\n            'uniform float burnRate;',\n            'uniform float drag;',\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    vec4 dC = texture2D( densityMap, vUv );',\n            '    vec4 dL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y) );',\n            '    vec4 dR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y) );',\n            '    vec4 dU = texture2D( densityMap, vec2(vUv.x, vUv.y - oneOverHeight) );',\n            '    vec4 dD = texture2D( densityMap, vec2(vUv.x, vUv.y + oneOverHeight) );',\n            '    vec4 dUL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y - oneOverHeight) );',\n            '    vec4 dUR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y - oneOverHeight) );',\n            '    vec4 dDL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y + oneOverHeight) );',\n            '    vec4 dDR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y + oneOverHeight) );',\n            '    dC.yz = (dC.yz - step(0.5, dC.yz)) * 2.0;',\n            '    dL.yz = (dL.yz - step(0.5, dL.yz)) * 2.0;',\n            '    dR.yz = (dR.yz - step(0.5, dR.yz)) * 2.0;',\n            '    dU.yz = (dU.yz - step(0.5, dU.yz)) * 2.0;',\n            '    dD.yz = (dD.yz - step(0.5, dD.yz)) * 2.0;',\n            '    dUL.yz = (dUL.yz - step(0.5, dUL.yz)) * 2.0;',\n            '    dUR.yz = (dUR.yz - step(0.5, dUR.yz)) * 2.0;',\n            '    dDL.yz = (dDL.yz - step(0.5, dDL.yz)) * 2.0;',\n            '    dDR.yz = (dDR.yz - step(0.5, dDR.yz)) * 2.0;',\n            '    vec4 result = (dC + vec4(diffuse, viscosity, viscosity, diffuse) * ( dL + dR + dU + dD + dUL + dUR + dDL + dDR )) / (1.0 + 8.0 * vec4(diffuse, viscosity, viscosity, diffuse)) - vec4(0.0, 0.0, 0.0, 0.001);',\n            '    float temperature = result.r;',\n            '    temperature = clamp(temperature - burnRate, 0.0, 1.0);',\n            '    vec2 velocity = result.yz;',\n            '    vec2 expansionVec = vec2(dL.w - dR.w, dU.w - dD.w);',\n            '    vec2 swirlVec = vec2((dL.z - dR.z) * 0.5, (dU.y - dD.y) * 0.5);',\n            '    velocity = velocity + (1.0 - expansion) * expansionVec + (1.0 - swirl) * swirlVec;',\n            '    velocity = velocity - (1.0 - drag) * velocity;',\n            '    gl_FragColor = vec4(temperature, velocity * 0.5 + step(0.0, -velocity), result.w);',\n            '    gl_FragColor = gl_FragColor * step(oneOverWidth, vUv.x);',\n            '    gl_FragColor = gl_FragColor * step(oneOverHeight, vUv.y);',\n            '    gl_FragColor = gl_FragColor * step(vUv.x, 1.0 - oneOverWidth);',\n            '    gl_FragColor = gl_FragColor * step(vUv.y, 1.0 - oneOverHeight);',\n            '}'\n        ].join('\\n')\n    };\n    Fire.DriftShader = {\n        uniforms: {\n            'oneOverWidth': { value: null },\n            'oneOverHeight': { value: null },\n            'windVector': { value: new THREE.Vector2(0, 0) },\n            'airSpeed': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float oneOverWidth;',\n            'uniform float oneOverHeight;',\n            'uniform vec2 windVector;',\n            'uniform float airSpeed;',\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    vec2 velocity = texture2D( densityMap, vUv ).gb;',\n            '    velocity = (velocity - step(0.5, velocity)) * 2.0;',\n            '    velocity = velocity + windVector;',\n            '    vec2 sourcePos = vUv - airSpeed * vec2(oneOverWidth, oneOverHeight) * velocity;',\n            '    vec2 units = sourcePos / vec2(oneOverWidth, oneOverHeight);',\n            '    vec2 intPos = floor(units);',\n            '    vec2 frac = units - intPos;',\n            '    intPos = intPos * vec2(oneOverWidth, oneOverHeight);',\n            '    vec4 dX0Y0 = texture2D( densityMap, intPos + vec2(0.0, -oneOverHeight) );',\n            '    vec4 dX1Y0 = texture2D( densityMap, intPos + vec2(oneOverWidth, 0.0) );',\n            '    vec4 dX0Y1 = texture2D( densityMap, intPos + vec2(0.0, oneOverHeight) );',\n            '    vec4 dX1Y1 = texture2D( densityMap, intPos + vec2(oneOverWidth, oneOverHeight) );',\n            '    dX0Y0.gb = (dX0Y0.gb - step(0.5, dX0Y0.gb)) * 2.0;',\n            '    dX1Y0.gb = (dX1Y0.gb - step(0.5, dX1Y0.gb)) * 2.0;',\n            '    dX0Y1.gb = (dX0Y1.gb - step(0.5, dX0Y1.gb)) * 2.0;',\n            '    dX1Y1.gb = (dX1Y1.gb - step(0.5, dX1Y1.gb)) * 2.0;',\n            '    vec4 source = mix(mix(dX0Y0, dX1Y0, frac.x), mix(dX0Y1, dX1Y1, frac.x), frac.y);',\n            '    source.gb = source.gb * 0.5 + step(0.0, -source.gb);',\n            '    gl_FragColor = source;',\n            '}'\n        ].join('\\n')\n    };\n    Fire.ProjectionShader1 = {\n        uniforms: {\n            'oneOverWidth': { value: null },\n            'oneOverHeight': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float oneOverWidth;',\n            'uniform float oneOverHeight;',\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    float dL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y) ).g;',\n            '    float dR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y) ).g;',\n            '    float dU = texture2D( densityMap, vec2(vUv.x, vUv.y - oneOverHeight) ).b;',\n            '    float dD = texture2D( densityMap, vec2(vUv.x, vUv.y + oneOverHeight) ).b;',\n            '    dL = (dL - step(0.5, dL)) * 2.0;',\n            '    dR = (dR - step(0.5, dR)) * 2.0;',\n            '    dU = (dU - step(0.5, dU)) * 2.0;',\n            '    dD = (dD - step(0.5, dD)) * 2.0;',\n            '    float h = (oneOverWidth + oneOverHeight) * 0.5;',\n            '    float div = -0.5 * h * (dR - dL + dD - dU);',\n            '    gl_FragColor = vec4( 0.0, 0.0, div * 0.5 + step(0.0, -div), 0.0);',\n            '}'\n        ].join('\\n')\n    };\n    Fire.ProjectionShader2 = {\n        uniforms: {\n            'oneOverWidth': { value: null },\n            'oneOverHeight': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float oneOverWidth;',\n            'uniform float oneOverHeight;',\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    float div = texture2D( densityMap, vUv ).b;',\n            '    float pL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y) ).g;',\n            '    float pR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y) ).g;',\n            '    float pU = texture2D( densityMap, vec2(vUv.x, vUv.y - oneOverHeight) ).g;',\n            '    float pD = texture2D( densityMap, vec2(vUv.x, vUv.y + oneOverHeight) ).g;',\n            '    float divNorm = (div - step(0.5, div)) * 2.0;',\n            '    pL = (pL - step(0.5, pL)) * 2.0;',\n            '    pR = (pR - step(0.5, pR)) * 2.0;',\n            '    pU = (pU - step(0.5, pU)) * 2.0;',\n            '    pD = (pD - step(0.5, pD)) * 2.0;',\n            '    float p = (divNorm + pR + pL + pD + pU) * 0.25;',\n            '    gl_FragColor = vec4( 0.0, p * 0.5 + step(0.0, -p), div, 0.0);',\n            '}'\n        ].join('\\n')\n    };\n    Fire.ProjectionShader3 = {\n        uniforms: {\n            'oneOverWidth': { value: null },\n            'oneOverHeight': { value: null },\n            'densityMap': { value: null },\n            'projMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform float oneOverWidth;',\n            'uniform float oneOverHeight;',\n            'uniform sampler2D densityMap;',\n            'uniform sampler2D projMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    vec4 orig = texture2D(densityMap, vUv);',\n            '    float pL = texture2D( projMap, vec2(vUv.x - oneOverWidth, vUv.y) ).g;',\n            '    float pR = texture2D( projMap, vec2(vUv.x + oneOverWidth, vUv.y) ).g;',\n            '    float pU = texture2D( projMap, vec2(vUv.x, vUv.y - oneOverHeight) ).g;',\n            '    float pD = texture2D( projMap, vec2(vUv.x, vUv.y + oneOverHeight) ).g;',\n            '    float uNorm = (orig.g - step(0.5, orig.g)) * 2.0;',\n            '    float vNorm = (orig.b - step(0.5, orig.b)) * 2.0;',\n            '    pL = (pL - step(0.5, pL)) * 2.0;',\n            '    pR = (pR - step(0.5, pR)) * 2.0;',\n            '    pU = (pU - step(0.5, pU)) * 2.0;',\n            '    pD = (pD - step(0.5, pD)) * 2.0;',\n            '    float h = (oneOverWidth + oneOverHeight) * 0.5;',\n            '    float u = uNorm - (0.5 * (pR - pL) / h);',\n            '    float v = vNorm - (0.5 * (pD - pU) / h);',\n            '    gl_FragColor = vec4( orig.r, u * 0.5 + step(0.0, -u), v * 0.5 + step(0.0, -v), orig.a);',\n            '}'\n        ].join('\\n')\n    };\n    Fire.ColorShader = {\n        uniforms: {\n            'color1': { value: null },\n            'color2': { value: null },\n            'color3': { value: null },\n            'colorBias': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform vec3 color1;',\n            'uniform vec3 color2;',\n            'uniform vec3 color3;',\n            'uniform float colorBias;',\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    float density = texture2D( densityMap, vUv ).a;',\n            '    float temperature = texture2D( densityMap, vUv ).r;',\n            '    float bias = clamp(colorBias, 0.0001, 0.9999);',\n            '    vec3 blend1 = mix(color3, color2, temperature / bias) * (1.0 - step(bias, temperature));',\n            '    vec3 blend2 = mix(color2, color1, (temperature - bias) / (1.0 - bias) ) * step(bias, temperature);',\n            '    gl_FragColor = vec4(blend1 + blend2, density);',\n            '}'\n        ].join('\\n')\n    };\n    Fire.DebugShader = {\n        uniforms: {\n            'color1': { value: null },\n            'color2': { value: null },\n            'color3': { value: null },\n            'colorBias': { value: null },\n            'densityMap': { value: null }\n        },\n        vertexShader: [\n            'varying vec2 vUv;',\n            'void main() {',\n            ' \\t  vUv = uv;',\n            '     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '     gl_Position = projectionMatrix * mvPosition;',\n            '}'\n        ].join('\\n'),\n        fragmentShader: [\n            'uniform sampler2D densityMap;',\n            'varying vec2 vUv;',\n            'void main() {',\n            '    float density;',\n            '    density = texture2D( densityMap, vUv ).a;',\n            '    vec2 vel = texture2D( densityMap, vUv ).gb;',\n            '    vel = (vel - step(0.5, vel)) * 2.0;',\n            '    float r = density;',\n            '    float g = max(abs(vel.x), density * 0.5);',\n            '    float b = max(abs(vel.y), density * 0.5);',\n            '    float a = max(density * 0.5, max(abs(vel.x), abs(vel.y)));',\n            '    gl_FragColor = vec4(r, g, b, a);',\n            '}'\n        ].join('\\n')\n    };\n    return Fire;\n});"]}