{"version":3,"sources":["objects/Fire.js"],"names":["define","THREE","Fire","geometry","options","Mesh","call","this","type","clock","Clock","textureWidth","textureHeight","oneOverWidth","oneOverHeight","debug","undefined","color1","Color","color2","color3","colorBias","diffuse","viscosity","expansion","swirl","burnRate","drag","airSpeed","windVector","Vector2","speed","massConservation","size","sourceData","Uint8Array","clearSources","y","x","stride","sourceMaterial","uniforms","value","internalSource","needsUpdate","addSource","u","v","radius","density","windX","windY","startX","Math","max","floor","startY","endX","min","endY","diffX","diffY","wind","setSourceMap","texture","parameters","minFilter","NearestFilter","magFilter","depthBuffer","stencilBuffer","field0","WebGLRenderTarget","background","field1","fieldProj","MathUtils","isPowerOfTwo","generateMipmaps","fieldScene","Scene","orthoCamera","OrthographicCamera","position","z","fieldGeometry","PlaneBufferGeometry","DataTexture","RGBAFormat","shader","SourceShader","ShaderMaterial","vertexShader","fragmentShader","transparent","sourceMesh","add","DiffuseShader","diffuseMaterial","diffuseMesh","DriftShader","driftMaterial","driftMesh","ProjectionShader1","projMaterial1","projMesh1","ProjectionShader2","projMaterial2","projMesh2","ProjectionShader3","projMaterial3","projMesh3","DebugShader","ColorShader","material","configShaders","dt","exp","clearDiffuse","swapTextures","swap","saveRenderState","renderer","savedRenderTarget","getRenderTarget","savedXrEnabled","xr","enabled","savedShadowAutoUpdate","shadowMap","autoUpdate","savedAntialias","antialias","savedToneMapping","toneMapping","restoreRenderState","setRenderTarget","renderSource","visible","render","renderDiffuse","renderDrift","renderProject","i","temp","onBeforeRender","delta","getDelta","NoToneMapping","map","LinearFilter","prototype","Object","create","constructor","sourceMap","densityMap","join","projMap"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GAihCV,OAxgCAA,EAAMC,KAAO,SAAWC,EAAUC,GAEjCH,EAAMI,KAAKC,KAAMC,KAAMJ,GAEvBI,KAAKC,KAAO,OAEZD,KAAKE,MAAQ,IAAIR,EAAMS,MAIvB,IAAIC,GAFJP,EAAUA,OAEiBO,cAAgB,IACvCC,EAAgBR,EAAQQ,eAAiB,IACzCC,EAAe,EAAMF,EACrBG,EAAgB,EAAMF,EAEtBG,OAA4BC,IAAlBZ,EAAQW,OAAgCX,EAAQW,MAC9DR,KAAKU,OAASb,EAAQa,QAAU,IAAIhB,EAAMiB,MAAO,UACjDX,KAAKY,OAASf,EAAQe,QAAU,IAAIlB,EAAMiB,MAAO,UACjDX,KAAKa,OAAShB,EAAQgB,QAAU,IAAInB,EAAMiB,MAAO,GACjDX,KAAKc,eAAoCL,IAAtBZ,EAAQiB,UAA4B,GAAMjB,EAAQiB,UACrEd,KAAKe,aAAgCN,IAApBZ,EAAQkB,QAA0B,KAAOlB,EAAQkB,QAClEf,KAAKgB,eAAoCP,IAAtBZ,EAAQmB,UAA4B,IAAOnB,EAAQmB,UACtEhB,KAAKiB,eAAoCR,IAAtBZ,EAAQoB,WAA8B,IAAOpB,EAAQoB,UACxEjB,KAAKkB,WAA4BT,IAAlBZ,EAAQqB,MAAwB,GAAOrB,EAAQqB,MAC9DlB,KAAKmB,cAAkCV,IAArBZ,EAAQsB,SAA2B,GAAMtB,EAAQsB,SACnEnB,KAAKoB,UAA0BX,IAAjBZ,EAAQuB,KAAuB,IAAOvB,EAAQuB,KAC5DpB,KAAKqB,cAAkCZ,IAArBZ,EAAQwB,SAA2B,EAAMxB,EAAQwB,SACnErB,KAAKsB,WAAazB,EAAQyB,YAAc,IAAI5B,EAAM6B,QAAS,EAAK,KAChEvB,KAAKwB,WAA4Bf,IAAlBZ,EAAQ2B,MAAwB,IAAQ3B,EAAQ2B,MAC/DxB,KAAKyB,sBAAkDhB,IAA7BZ,EAAQ4B,kBAA2C5B,EAAQ4B,iBAErF,IAAIC,EAAOtB,EAAeC,EAC1BL,KAAK2B,WAAa,IAAIC,WAAY,EAAIF,GAEtC1B,KAAK6B,aAAe,WAEnB,IAAM,IAAIC,EAAI,EAAGA,EAAIzB,EAAeyB,IAEnC,IAAM,IAAIC,EAAI,EAAGA,EAAI3B,EAAc2B,IAAO,CAEzC,IACIC,EAAa,GADTF,EAAI1B,EAAe2B,GAG3B/B,KAAK2B,WAAYK,GAAW,EAC5BhC,KAAK2B,WAAYK,EAAS,GAAM,EAChChC,KAAK2B,WAAYK,EAAS,GAAM,EAChChC,KAAK2B,WAAYK,EAAS,GAAM,EASlC,OAHAhC,KAAKiC,eAAeC,SAAsB,UAAEC,MAAQnC,KAAKoC,eACzDpC,KAAKiC,eAAeI,aAAc,EAE3BrC,KAAK2B,YAIb3B,KAAKsC,UAAY,SAAWC,EAAGC,EAAGC,EAAQC,EAAU,KAAMC,EAAQ,KAAMC,EAAQ,MAO/E,IALA,IAAIC,EAASC,KAAKC,IAAKD,KAAKE,OAAST,EAAIE,GAAWrC,GAAgB,GAChE6C,EAASH,KAAKC,IAAKD,KAAKE,OAASR,EAAIC,GAAWpC,GAAiB,GACjE6C,EAAOJ,KAAKK,IAAKL,KAAKE,OAAST,EAAIE,GAAWrC,GAAgBA,GAC9DgD,EAAON,KAAKK,IAAKL,KAAKE,OAASR,EAAIC,GAAWpC,GAAiBA,GAEzDyB,EAAImB,EAAQnB,EAAIsB,EAAMtB,IAE/B,IAAM,IAAIC,EAAIc,EAAQd,EAAImB,EAAMnB,IAAO,CAEtC,IAAIsB,EAAQtB,EAAIzB,EAAeiC,EAC3Be,EAAQxB,EAAIvB,EAAgBiC,EAEhC,GAAKa,EAAQA,EAAQC,EAAQA,EAAQb,EAASA,EAAS,CAEtD,IAiBKc,EAhBDvB,EAAa,GADTF,EAAI1B,EAAe2B,GAQ3B,GALgB,MAAXW,IAEJ1C,KAAK2B,WAAYK,GAAuD,IAA5Cc,KAAKK,IAAKL,KAAKC,IAAKL,EAAS,GAAO,IAGnD,MAATC,EAGJY,GADIA,EAAOT,KAAKK,IAAKL,KAAKC,IAAKJ,GAAS,GAAO,IAC/B,EAAQG,KAAKE,MAAc,IAAPO,GAAe,IAAMT,KAAKE,MAAc,IAAPO,GACrEvD,KAAK2B,WAAYK,EAAS,GAAMuB,EAGjC,GAAc,MAATX,EAGJW,GADIA,EAAOT,KAAKK,IAAKL,KAAKC,IAAKH,GAAS,GAAO,IAC/B,EAAQE,KAAKE,MAAc,IAAPO,GAAe,IAAMT,KAAKE,MAAc,IAAPO,GACrEvD,KAAK2B,WAAYK,EAAS,GAAMuB,GAYpC,OAFAvD,KAAKoC,eAAeC,aAAc,EAE3BrC,KAAK2B,YAOb3B,KAAKwD,aAAe,SAAWC,GAE9BzD,KAAKiC,eAAeC,SAAsB,UAAEC,MAAQsB,GAIrD,IAAIC,GACHC,UAAWjE,EAAMkE,cACjBC,UAAWnE,EAAMkE,cACjBE,aAAa,EACbC,eAAe,GAIhB/D,KAAKgE,OAAS,IAAItE,EAAMuE,kBAAmB7D,EAAcC,EAAeqD,GAExE1D,KAAKgE,OAAOE,WAAa,IAAIxE,EAAMiB,MAAO,GAE1CX,KAAKmE,OAAS,IAAIzE,EAAMuE,kBAAmB7D,EAAcC,EAAeqD,GAExE1D,KAAKgE,OAAOE,WAAa,IAAIxE,EAAMiB,MAAO,GAE1CX,KAAKoE,UAAY,IAAI1E,EAAMuE,kBAAmB7D,EAAcC,EAAeqD,GAE3E1D,KAAKgE,OAAOE,WAAa,IAAIxE,EAAMiB,MAAO,GAEnCjB,EAAM2E,UAAUC,aAAclE,IACjCV,EAAM2E,UAAUC,aAAcjE,KAEjCL,KAAKgE,OAAOP,QAAQc,iBAAkB,EACtCvE,KAAKmE,OAAOV,QAAQc,iBAAkB,EACtCvE,KAAKoE,UAAUX,QAAQc,iBAAkB,GAK1CvE,KAAKwE,WAAa,IAAI9E,EAAM+E,MAC5BzE,KAAKwE,WAAWN,WAAa,IAAIxE,EAAMiB,MAAO,GAE9CX,KAAK0E,YAAc,IAAIhF,EAAMiF,mBAAoBvE,GAAiB,EAAGA,EAAe,EAAGC,EAAgB,EAAGA,GAAkB,EAAG,EAAG,GAClIL,KAAK0E,YAAYE,SAASC,EAAI,EAE9B7E,KAAK8E,cAAgB,IAAIpF,EAAMqF,oBAAqB3E,EAAcC,GAElEL,KAAKoC,eAAiB,IAAI1C,EAAMsF,YAAahF,KAAK2B,WAAYvB,EAAcC,EAAeX,EAAMuF,YAIjG,IAAIC,EAASxF,EAAMC,KAAKwF,aACxBnF,KAAKiC,eAAiB,IAAIvC,EAAM0F,gBAC/BlD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAGdvF,KAAK6B,eAEL7B,KAAKwF,WAAa,IAAI9F,EAAMI,KAAME,KAAK8E,cAAe9E,KAAKiC,gBAC3DjC,KAAKwE,WAAWiB,IAAKzF,KAAKwF,YAItBN,EAASxF,EAAMC,KAAK+F,cACxB1F,KAAK2F,gBAAkB,IAAIjG,EAAM0F,gBAChClD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAGdvF,KAAK2F,gBAAgBzD,SAAyB,aAAEC,MAAQ7B,EACxDN,KAAK2F,gBAAgBzD,SAA0B,cAAEC,MAAQ5B,EAEzDP,KAAK4F,YAAc,IAAIlG,EAAMI,KAAME,KAAK8E,cAAe9E,KAAK2F,iBAC5D3F,KAAKwE,WAAWiB,IAAKzF,KAAK4F,aAI1BV,EAASxF,EAAMC,KAAKkG,YACpB7F,KAAK8F,cAAgB,IAAIpG,EAAM0F,gBAC9BlD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAGdvF,KAAK8F,cAAc5D,SAAyB,aAAEC,MAAQ7B,EACtDN,KAAK8F,cAAc5D,SAA0B,cAAEC,MAAQ5B,EAEvDP,KAAK+F,UAAY,IAAIrG,EAAMI,KAAME,KAAK8E,cAAe9E,KAAK8F,eAC1D9F,KAAKwE,WAAWiB,IAAKzF,KAAK+F,WAI1Bb,EAASxF,EAAMC,KAAKqG,kBACpBhG,KAAKiG,cAAgB,IAAIvG,EAAM0F,gBAC9BlD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAGdvF,KAAKiG,cAAc/D,SAAyB,aAAEC,MAAQ7B,EACtDN,KAAKiG,cAAc/D,SAA0B,cAAEC,MAAQ5B,EAEvDP,KAAKkG,UAAY,IAAIxG,EAAMI,KAAME,KAAK8E,cAAe9E,KAAKiG,eAC1DjG,KAAKwE,WAAWiB,IAAKzF,KAAKkG,WAI1BhB,EAASxF,EAAMC,KAAKwG,kBACpBnG,KAAKoG,cAAgB,IAAI1G,EAAM0F,gBAC9BlD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAIdvF,KAAKoG,cAAclE,SAAyB,aAAEC,MAAQ7B,EACtDN,KAAKoG,cAAclE,SAA0B,cAAEC,MAAQ5B,EAEvDP,KAAKqG,UAAY,IAAI3G,EAAMI,KAAME,KAAK8E,cAAe9E,KAAKoG,eAC1DpG,KAAKwE,WAAWiB,IAAKzF,KAAKqG,WAI1BnB,EAASxF,EAAMC,KAAK2G,kBACpBtG,KAAKuG,cAAgB,IAAI7G,EAAM0F,gBAC9BlD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAIdvF,KAAKuG,cAAcrE,SAAyB,aAAEC,MAAQ7B,EACtDN,KAAKuG,cAAcrE,SAA0B,cAAEC,MAAQ5B,EAEvDP,KAAKwG,UAAY,IAAI9G,EAAMI,KAAME,KAAK8E,cAAe9E,KAAKuG,eAC1DvG,KAAKwE,WAAWiB,IAAKzF,KAAKwG,WAMzBtB,EAFI1E,EAEKd,EAAMC,KAAK8G,YAIX/G,EAAMC,KAAK+G,YAGrB1G,KAAK2G,SAAW,IAAIjH,EAAM0F,gBACzBlD,SAAUgD,EAAOhD,SACjBmD,aAAcH,EAAOG,aACrBC,eAAgBJ,EAAOI,eACvBC,aAAa,IAGdvF,KAAK2G,SAASzE,SAAuB,WAAEC,MAAQnC,KAAKmE,OAAOV,QAE3DzD,KAAK4G,cAAgB,SAAWC,GAE/B7G,KAAK2F,gBAAgBzD,SAAoB,QAAEC,MAAa,IAAL0E,EAAY7G,KAAKe,QACpEf,KAAK2F,gBAAgBzD,SAAsB,UAAEC,MAAa,IAAL0E,EAAY7G,KAAKgB,UACtEhB,KAAK2F,gBAAgBzD,SAAsB,UAAEC,MAAQW,KAAKgE,KAAwB,EAAnB9G,KAAKiB,WACpEjB,KAAK2F,gBAAgBzD,SAAkB,MAAEC,MAAQW,KAAKgE,KAAoB,GAAf9G,KAAKkB,OAChElB,KAAK2F,gBAAgBzD,SAAiB,KAAEC,MAAQW,KAAKgE,KAAmB,GAAd9G,KAAKoB,MAC/DpB,KAAK2F,gBAAgBzD,SAAqB,SAAEC,MAAQnC,KAAKmB,SAAW0F,EAAK,IACzE7G,KAAK8F,cAAc5D,SAAuB,WAAEC,MAAQnC,KAAKsB,WACzDtB,KAAK8F,cAAc5D,SAAqB,SAAEC,MAAQ0E,EAAK7G,KAAKqB,SAAW,KAAQhB,EAC/EL,KAAK2G,SAASzE,SAAmB,OAAEC,MAAQnC,KAAKU,OAChDV,KAAK2G,SAASzE,SAAmB,OAAEC,MAAQnC,KAAKY,OAChDZ,KAAK2G,SAASzE,SAAmB,OAAEC,MAAQnC,KAAKa,OAChDb,KAAK2G,SAASzE,SAAsB,UAAEC,MAAQnC,KAAKc,WAIpDd,KAAK+G,aAAe,WAEnB/G,KAAK2F,gBAAgBzD,SAAsB,UAAEC,MAAQ,EACrDnC,KAAK2F,gBAAgBzD,SAAkB,MAAEC,MAAQ,EACjDnC,KAAK2F,gBAAgBzD,SAAiB,KAAEC,MAAQ,EAChDnC,KAAK2F,gBAAgBzD,SAAqB,SAAEC,MAAQ,GAIrDnC,KAAKgH,aAAe,WAEnB,IAAIC,EAAOjH,KAAKgE,OAChBhE,KAAKgE,OAAShE,KAAKmE,OACnBnE,KAAKmE,OAAS8C,GAIfjH,KAAKkH,gBAAkB,SAAWC,GAEjCnH,KAAKoH,kBAAoBD,EAASE,kBAClCrH,KAAKsH,eAAiBH,EAASI,GAAGC,QAClCxH,KAAKyH,sBAAwBN,EAASO,UAAUC,WAChD3H,KAAK4H,eAAiBT,EAASU,UAC/B7H,KAAK8H,iBAAmBX,EAASY,aAIlC/H,KAAKgI,mBAAqB,SAAWb,GAEpCA,EAASI,GAAGC,QAAUxH,KAAKsH,eAC3BH,EAASO,UAAUC,WAAa3H,KAAKyH,sBACrCN,EAASc,gBAAiBjI,KAAKoH,mBAC/BD,EAASU,UAAY7H,KAAK4H,eAC1BT,EAASY,YAAc/H,KAAK8H,kBAI7B9H,KAAKkI,aAAe,SAAWf,GAE9BnH,KAAKwF,WAAW2C,SAAU,EAE1BnI,KAAKiC,eAAeC,SAAuB,WAAEC,MAAQnC,KAAKgE,OAAOP,QAEjE0D,EAASc,gBAAiBjI,KAAKmE,QAC/BgD,EAASiB,OAAQpI,KAAKwE,WAAYxE,KAAK0E,aAEvC1E,KAAKwF,WAAW2C,SAAU,EAE1BnI,KAAKgH,gBAINhH,KAAKqI,cAAgB,SAAWlB,GAE/BnH,KAAK4F,YAAYuC,SAAU,EAE3BnI,KAAK2F,gBAAgBzD,SAAuB,WAAEC,MAAQnC,KAAKgE,OAAOP,QAElE0D,EAASc,gBAAiBjI,KAAKmE,QAC/BgD,EAASiB,OAAQpI,KAAKwE,WAAYxE,KAAK0E,aAEvC1E,KAAK4F,YAAYuC,SAAU,EAE3BnI,KAAKgH,gBAINhH,KAAKsI,YAAc,SAAWnB,GAE7BnH,KAAK+F,UAAUoC,SAAU,EAEzBnI,KAAK8F,cAAc5D,SAAuB,WAAEC,MAAQnC,KAAKgE,OAAOP,QAEhE0D,EAASc,gBAAiBjI,KAAKmE,QAC/BgD,EAASiB,OAAQpI,KAAKwE,WAAYxE,KAAK0E,aAEvC1E,KAAK+F,UAAUoC,SAAU,EAEzBnI,KAAKgH,gBAINhH,KAAKuI,cAAgB,SAAWpB,GAI/BnH,KAAKkG,UAAUiC,SAAU,EAEzBnI,KAAKiG,cAAc/D,SAAuB,WAAEC,MAAQnC,KAAKgE,OAAOP,QAEhE0D,EAASc,gBAAiBjI,KAAKoE,WAC/B+C,EAASiB,OAAQpI,KAAKwE,WAAYxE,KAAK0E,aAEvC1E,KAAKkG,UAAUiC,SAAU,EAEzBnI,KAAKoG,cAAclE,SAAuB,WAAEC,MAAQnC,KAAKoE,UAAUX,QAInEzD,KAAKqG,UAAU8B,SAAU,EAEzB,IAAM,IAAIK,EAAI,EAAGA,EAAI,GAAIA,IAAO,CAE/BrB,EAASc,gBAAiBjI,KAAKmE,QAC/BgD,EAASiB,OAAQpI,KAAKwE,WAAYxE,KAAK0E,aAEvC,IAAI+D,EAAOzI,KAAKmE,OAChBnE,KAAKmE,OAASnE,KAAKoE,UACnBpE,KAAKoE,UAAYqE,EAEjBzI,KAAKoG,cAAclE,SAAuB,WAAEC,MAAQnC,KAAKoE,UAAUX,QAIpEzD,KAAKqG,UAAU8B,SAAU,EAEzBnI,KAAKuG,cAAcrE,SAAuB,WAAEC,MAAQnC,KAAKgE,OAAOP,QAChEzD,KAAKuG,cAAcrE,SAAoB,QAAEC,MAAQnC,KAAKoE,UAAUX,QAIhEzD,KAAKwG,UAAU2B,SAAU,EAEzBhB,EAASc,gBAAiBjI,KAAKmE,QAC/BgD,EAASiB,OAAQpI,KAAKwE,WAAYxE,KAAK0E,aAEvC1E,KAAKwG,UAAU2B,SAAU,EAEzBnI,KAAKgH,gBAINhH,KAAK0I,eAAiB,SAAWvB,GAEhC,IAAIwB,EAAQ3I,KAAKE,MAAM0I,WAClBD,EAAQ,KAEZA,EAAQ,IAGT,IAAI9B,EAAK8B,GAAuB,GAAb3I,KAAKwB,OAExBxB,KAAK4G,cAAeC,GAEpB7G,KAAKkH,gBAAiBC,GAEtBA,EAASI,GAAGC,SAAU,EACtBL,EAASO,UAAUC,YAAa,EAChCR,EAASU,WAAY,EACrBV,EAASY,YAAcrI,EAAMmJ,cAE7B7I,KAAKwF,WAAW2C,SAAU,EAC1BnI,KAAK4F,YAAYuC,SAAU,EAC3BnI,KAAK+F,UAAUoC,SAAU,EACzBnI,KAAKkG,UAAUiC,SAAU,EACzBnI,KAAKqG,UAAU8B,SAAU,EACzBnI,KAAKwG,UAAU2B,SAAU,EAEzBnI,KAAKkI,aAAcf,GAEnBnH,KAAK+G,eACL,IAAM,IAAIyB,EAAI,EAAGA,EAAI,GAAIA,IAExBxI,KAAKqI,cAAelB,GAGrBnH,KAAK4G,cAAeC,GACpB7G,KAAKqI,cAAelB,GAEpBnH,KAAKsI,YAAanB,GAEbnH,KAAKyB,mBAETzB,KAAKuI,cAAepB,GACpBnH,KAAKuI,cAAepB,IAMrBnH,KAAK2G,SAASmC,IAAM9I,KAAKmE,OAAOV,QAChCzD,KAAK2G,SAASpB,aAAc,EAC5BvF,KAAK2G,SAAShD,UAAYjE,EAAMqJ,aAChC/I,KAAK2G,SAAS9C,UAAYnE,EAAMqJ,aAEhC/I,KAAKgI,mBAAoBb,KAO3BzH,EAAMC,KAAKqJ,UAAYC,OAAOC,OAAQxJ,EAAMI,KAAKkJ,WACjDtJ,EAAMC,KAAKqJ,UAAUG,YAAczJ,EAAMC,KAEzCD,EAAMC,KAAKwF,cAEVjD,UACCkH,WACCjH,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,+BACA,gCAEA,oBAEA,gBACA,iDACA,mDAEA,4DACA,0DAEA,6BAEA,2CACA,kDAEA,+CACA,4CAEA,gDACA,0CAEA,2DAEA,KAECgE,KAAM,OAIT5J,EAAMC,KAAK+F,eAEVxD,UACC5B,cACC6B,MAAO,MAER5B,eACC4B,MAAO,MAERpB,SACCoB,MAAO,MAERnB,WACCmB,MAAO,MAERlB,WACCkB,MAAO,MAERjB,OACCiB,MAAO,MAERf,MACCe,MAAO,MAERhB,UACCgB,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,8BACA,+BACA,yBACA,2BACA,2BACA,uBACA,0BACA,sBACA,gCAEA,oBAEA,gBAEA,8CACA,4EACA,4EACA,6EACA,6EACA,6FACA,6FACA,6FACA,6FAEA,gDACA,gDACA,gDACA,gDACA,gDACA,mDACA,mDACA,mDACA,mDAEA,mNAEA,oCACA,6DAEA,iCAEA,0DAEA,sEAEA,yFAEA,qDAEA,yFAEA,+DACA,gEACA,qEACA,sEAEA,KAECgE,KAAM,OAGT5J,EAAMC,KAAKkG,aAEV3D,UACC5B,cACC6B,MAAO,MAER5B,eACC4B,MAAO,MAERb,YACCa,MAAO,IAAIzC,EAAM6B,QAAS,EAAK,IAEhCF,UACCc,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,8BACA,+BACA,2BACA,0BACA,gCAEA,oBAEA,gBACA,uDACA,yDAEA,wCAEA,sFAEA,kEAEA,kCACA,kCACA,2DAEA,gFACA,8EACA,+EACA,wFAGA,yDACA,yDACA,yDACA,yDAEA,uFAEA,2DAEA,6BAEA,KAECgE,KAAM,OAIT5J,EAAMC,KAAKqG,mBAEV9D,UACC5B,cACC6B,MAAO,MAER5B,eACC4B,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,8BACA,+BACA,gCAEA,oBAEA,gBACA,+EACA,+EACA,gFACA,gFAEA,uCACA,uCACA,uCACA,uCAEA,sDACA,kDAEA,wEAEA,KAECgE,KAAM,OAIT5J,EAAMC,KAAKwG,mBAEVjE,UACC5B,cACC6B,MAAO,MAER5B,eACC4B,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,8BACA,+BACA,gCAEA,oBAEA,gBACA,kDACA,+EACA,+EACA,gFACA,gFAEA,oDACA,uCACA,uCACA,uCACA,uCAEA,sDAEA,oEAEA,KAECgE,KAAM,OAIT5J,EAAMC,KAAK2G,mBAEVpE,UACC5B,cACC6B,MAAO,MAER5B,eACC4B,MAAO,MAERkH,YACClH,MAAO,MAERoH,SACCpH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,8BACA,+BACA,gCACA,6BAEA,oBAEA,gBACA,8CAEA,4EACA,4EACA,6EACA,6EAEA,wDACA,wDAEA,uCACA,uCACA,uCACA,uCAEA,sDACA,+CACA,+CAEA,8FAEA,KAECgE,KAAM,OAGT5J,EAAMC,KAAK+G,aAEVxE,UACCxB,QACCyB,MAAO,MAERvB,QACCuB,MAAO,MAERtB,QACCsB,MAAO,MAERrB,WACCqB,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,uBACA,uBACA,uBACA,2BACA,gCAEA,oBAEA,gBACA,sDACA,0DAEA,qDAEA,+FACA,yGAEA,qDACA,KAECgE,KAAM,OAIT5J,EAAMC,KAAK8G,aAEVvE,UACCxB,QACCyB,MAAO,MAERvB,QACCuB,MAAO,MAERtB,QACCsB,MAAO,MAERrB,WACCqB,MAAO,MAERkH,YACClH,MAAO,OAITkD,cACC,oBAEA,gBAEA,iBAEA,kEACA,oDAEA,KAECiE,KAAM,MAERhE,gBACC,gCAEA,oBAEA,gBACA,qBACA,gDAEA,kDAEA,0CAEA,yBACA,gDACA,gDACA,iEAEA,uCAEA,KAECgE,KAAM,OAGF5J,EAAMC","file":"../../objects/Fire.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author Mike Piecuch / https://github.com/mikepiecuch\n\t *\n\t * Based on research paper \"Real-Time Fluid Dynamics for Games\" by Jos Stam\n\t * http://www.dgp.toronto.edu/people/stam/reality/Research/pdf/GDC03.pdf\n\t *\n\t */\n\n\tTHREE.Fire = function ( geometry, options ) {\n\n\t\tTHREE.Mesh.call( this, geometry );\n\n\t\tthis.type = 'Fire';\n\n\t\tthis.clock = new THREE.Clock();\n\n\t\toptions = options || {};\n\n\t\tvar textureWidth = options.textureWidth || 512;\n\t\tvar textureHeight = options.textureHeight || 512;\n\t\tvar oneOverWidth = 1.0 / textureWidth;\n\t\tvar oneOverHeight = 1.0 / textureHeight;\n\n\t\tvar debug = ( options.debug === undefined ) ? false : options.debug;\n\t\tthis.color1 = options.color1 || new THREE.Color( 0xffffff );\n\t\tthis.color2 = options.color2 || new THREE.Color( 0xffa000 );\n\t\tthis.color3 = options.color3 || new THREE.Color( 0x000000 );\n\t\tthis.colorBias = ( options.colorBias === undefined ) ? 0.8 : options.colorBias;\n\t\tthis.diffuse = ( options.diffuse === undefined ) ? 1.33 : options.diffuse;\n\t\tthis.viscosity = ( options.viscosity === undefined ) ? 0.25 : options.viscosity;\n\t\tthis.expansion = ( options.expansion === undefined ) ? - 0.25 : options.expansion;\n\t\tthis.swirl = ( options.swirl === undefined ) ? 50.0 : options.swirl;\n\t\tthis.burnRate = ( options.burnRate === undefined ) ? 0.3 : options.burnRate;\n\t\tthis.drag = ( options.drag === undefined ) ? 0.35 : options.drag;\n\t\tthis.airSpeed = ( options.airSpeed === undefined ) ? 6.0 : options.airSpeed;\n\t\tthis.windVector = options.windVector || new THREE.Vector2( 0.0, 0.75 );\n\t\tthis.speed = ( options.speed === undefined ) ? 500.0 : options.speed;\n\t\tthis.massConservation = ( options.massConservation === undefined ) ? false : options.massConservation;\n\n\t\tvar size = textureWidth * textureHeight;\n\t\tthis.sourceData = new Uint8Array( 4 * size );\n\n\t\tthis.clearSources = function () {\n\n\t\t\tfor ( var y = 0; y < textureHeight; y ++ ) {\n\n\t\t\t\tfor ( var x = 0; x < textureWidth; x ++ ) {\n\n\t\t\t\t\tvar i = y * textureWidth + x;\n\t\t\t\t\tvar stride = i * 4;\n\n\t\t\t\t\tthis.sourceData[ stride ] = 0;\n\t\t\t\t\tthis.sourceData[ stride + 1 ] = 0;\n\t\t\t\t\tthis.sourceData[ stride + 2 ] = 0;\n\t\t\t\t\tthis.sourceData[ stride + 3 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.sourceMaterial.uniforms[ \"sourceMap\" ].value = this.internalSource;\n\t\t\tthis.sourceMaterial.needsUpdate = true;\n\n\t\t\treturn this.sourceData;\n\n\t\t};\n\n\t\tthis.addSource = function ( u, v, radius, density = null, windX = null, windY = null ) {\n\n\t\t\tvar startX = Math.max( Math.floor( ( u - radius ) * textureWidth ), 0 );\n\t\t\tvar startY = Math.max( Math.floor( ( v - radius ) * textureHeight ), 0 );\n\t\t\tvar endX = Math.min( Math.floor( ( u + radius ) * textureWidth ), textureWidth );\n\t\t\tvar endY = Math.min( Math.floor( ( v + radius ) * textureHeight ), textureHeight );\n\n\t\t\tfor ( var y = startY; y < endY; y ++ ) {\n\n\t\t\t\tfor ( var x = startX; x < endX; x ++ ) {\n\n\t\t\t\t\tvar diffX = x * oneOverWidth - u;\n\t\t\t\t\tvar diffY = y * oneOverHeight - v;\n\n\t\t\t\t\tif ( diffX * diffX + diffY * diffY < radius * radius ) {\n\n\t\t\t\t\t\tvar i = y * textureWidth + x;\n\t\t\t\t\t\tvar stride = i * 4;\n\n\t\t\t\t\t\tif ( density != null ) {\n\n\t\t\t\t\t\t\tthis.sourceData[ stride ] = Math.min( Math.max( density, 0.0 ), 1.0 ) * 255;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( windX != null ) {\n\n\t\t\t\t\t\t\tvar wind = Math.min( Math.max( windX, - 1.0 ), 1.0 );\n\t\t\t\t\t\t\twind = ( wind < 0.0 ) ? Math.floor( wind * 127 ) + 255 : Math.floor( wind * 127 );\n\t\t\t\t\t\t\tthis.sourceData[ stride + 1 ] = wind;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( windY != null ) {\n\n\t\t\t\t\t\t\tvar wind = Math.min( Math.max( windY, - 1.0 ), 1.0 );\n\t\t\t\t\t\t\twind = ( wind < 0.0 ) ? Math.floor( wind * 127 ) + 255 : Math.floor( wind * 127 );\n\t\t\t\t\t\t\tthis.sourceData[ stride + 2 ] = wind;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.internalSource.needsUpdate = true;\n\n\t\t\treturn this.sourceData;\n\n\t\t};\n\n\t\t// When setting source map, red channel is density. Green and blue channels\n\t\t// encode x and y velocity respectively as signed chars:\n\t\t// (0 -> 127 = 0.0 -> 1.0, 128 -> 255 = -1.0 -> 0.0 )\n\t\tthis.setSourceMap = function ( texture ) {\n\n\t\t\tthis.sourceMaterial.uniforms[ \"sourceMap\" ].value = texture;\n\n\t\t};\n\n\t\tvar parameters = {\n\t\t\tminFilter: THREE.NearestFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tdepthBuffer: false,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\n\t\tthis.field0 = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\t\tthis.field0.background = new THREE.Color( 0x000000 );\n\n\t\tthis.field1 = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\t\tthis.field0.background = new THREE.Color( 0x000000 );\n\n\t\tthis.fieldProj = new THREE.WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\t\tthis.field0.background = new THREE.Color( 0x000000 );\n\n\t\tif ( ! THREE.MathUtils.isPowerOfTwo( textureWidth ) ||\n\t\t\t ! THREE.MathUtils.isPowerOfTwo( textureHeight ) ) {\n\n\t\t\tthis.field0.texture.generateMipmaps = false;\n\t\t\tthis.field1.texture.generateMipmaps = false;\n\t\t\tthis.fieldProj.texture.generateMipmaps = false;\n\n\t\t}\n\n\n\t\tthis.fieldScene = new THREE.Scene();\n\t\tthis.fieldScene.background = new THREE.Color( 0x000000 );\n\n\t\tthis.orthoCamera = new THREE.OrthographicCamera( textureWidth / - 2, textureWidth / 2, textureHeight / 2, textureHeight / - 2, 1, 2 );\n\t\tthis.orthoCamera.position.z = 1;\n\n\t\tthis.fieldGeometry = new THREE.PlaneBufferGeometry( textureWidth, textureHeight );\n\n\t\tthis.internalSource = new THREE.DataTexture( this.sourceData, textureWidth, textureHeight, THREE.RGBAFormat );\n\n\t\t// Source Shader\n\n\t\tvar shader = THREE.Fire.SourceShader;\n\t\tthis.sourceMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\tthis.clearSources();\n\n\t\tthis.sourceMesh = new THREE.Mesh( this.fieldGeometry, this.sourceMaterial );\n\t\tthis.fieldScene.add( this.sourceMesh );\n\n\t\t// Diffuse Shader\n\n\t\tvar shader = THREE.Fire.DiffuseShader;\n\t\tthis.diffuseMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\tthis.diffuseMaterial.uniforms[ \"oneOverWidth\" ].value = oneOverWidth;\n\t\tthis.diffuseMaterial.uniforms[ \"oneOverHeight\" ].value = oneOverHeight;\n\n\t\tthis.diffuseMesh = new THREE.Mesh( this.fieldGeometry, this.diffuseMaterial );\n\t\tthis.fieldScene.add( this.diffuseMesh );\n\n\t\t// Drift Shader\n\n\t\tshader = THREE.Fire.DriftShader;\n\t\tthis.driftMaterial = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\tthis.driftMaterial.uniforms[ \"oneOverWidth\" ].value = oneOverWidth;\n\t\tthis.driftMaterial.uniforms[ \"oneOverHeight\" ].value = oneOverHeight;\n\n\t\tthis.driftMesh = new THREE.Mesh( this.fieldGeometry, this.driftMaterial );\n\t\tthis.fieldScene.add( this.driftMesh );\n\n\t\t// Projection Shader 1\n\n\t\tshader = THREE.Fire.ProjectionShader1;\n\t\tthis.projMaterial1 = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\tthis.projMaterial1.uniforms[ \"oneOverWidth\" ].value = oneOverWidth;\n\t\tthis.projMaterial1.uniforms[ \"oneOverHeight\" ].value = oneOverHeight;\n\n\t\tthis.projMesh1 = new THREE.Mesh( this.fieldGeometry, this.projMaterial1 );\n\t\tthis.fieldScene.add( this.projMesh1 );\n\n\t\t// Projection Shader 2\n\n\t\tshader = THREE.Fire.ProjectionShader2;\n\t\tthis.projMaterial2 = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: false\n\t\t} );\n\n\n\t\tthis.projMaterial2.uniforms[ \"oneOverWidth\" ].value = oneOverWidth;\n\t\tthis.projMaterial2.uniforms[ \"oneOverHeight\" ].value = oneOverHeight;\n\n\t\tthis.projMesh2 = new THREE.Mesh( this.fieldGeometry, this.projMaterial2 );\n\t\tthis.fieldScene.add( this.projMesh2 );\n\n\t\t// Projection Shader 3\n\n\t\tshader = THREE.Fire.ProjectionShader3;\n\t\tthis.projMaterial3 = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: false\n\t\t} );\n\n\n\t\tthis.projMaterial3.uniforms[ \"oneOverWidth\" ].value = oneOverWidth;\n\t\tthis.projMaterial3.uniforms[ \"oneOverHeight\" ].value = oneOverHeight;\n\n\t\tthis.projMesh3 = new THREE.Mesh( this.fieldGeometry, this.projMaterial3 );\n\t\tthis.fieldScene.add( this.projMesh3 );\n\n\t\t// Color Shader\n\n\t\tif ( debug ) {\n\n\t\t\tshader = THREE.Fire.DebugShader;\n\n\t\t} else {\n\n\t\t\tshader = THREE.Fire.ColorShader;\n\n\t\t}\n\t\tthis.material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: shader.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.material.uniforms[ \"densityMap\" ].value = this.field1.texture;\n\n\t\tthis.configShaders = function ( dt ) {\n\n\t\t\tthis.diffuseMaterial.uniforms[ \"diffuse\" ].value = dt * 0.05 * this.diffuse;\n\t\t\tthis.diffuseMaterial.uniforms[ \"viscosity\" ].value = dt * 0.05 * this.viscosity;\n\t\t\tthis.diffuseMaterial.uniforms[ \"expansion\" ].value = Math.exp( this.expansion * - 1.0 );\n\t\t\tthis.diffuseMaterial.uniforms[ \"swirl\" ].value = Math.exp( this.swirl * - 0.1 );\n\t\t\tthis.diffuseMaterial.uniforms[ \"drag\" ].value = Math.exp( this.drag * - 0.1 );\n\t\t\tthis.diffuseMaterial.uniforms[ \"burnRate\" ].value = this.burnRate * dt * 0.01;\n\t\t\tthis.driftMaterial.uniforms[ \"windVector\" ].value = this.windVector;\n\t\t\tthis.driftMaterial.uniforms[ \"airSpeed\" ].value = dt * this.airSpeed * 0.001 * textureHeight;\n\t\t\tthis.material.uniforms[ \"color1\" ].value = this.color1;\n\t\t\tthis.material.uniforms[ \"color2\" ].value = this.color2;\n\t\t\tthis.material.uniforms[ \"color3\" ].value = this.color3;\n\t\t\tthis.material.uniforms[ \"colorBias\" ].value = this.colorBias;\n\n\t\t};\n\n\t\tthis.clearDiffuse = function () {\n\n\t\t\tthis.diffuseMaterial.uniforms[ \"expansion\" ].value = 1.0;\n\t\t\tthis.diffuseMaterial.uniforms[ \"swirl\" ].value = 1.0;\n\t\t\tthis.diffuseMaterial.uniforms[ \"drag\" ].value = 1.0;\n\t\t\tthis.diffuseMaterial.uniforms[ \"burnRate\" ].value = 0.0;\n\n\t\t};\n\n\t\tthis.swapTextures = function () {\n\n\t\t\tvar swap = this.field0;\n\t\t\tthis.field0 = this.field1;\n\t\t\tthis.field1 = swap;\n\n\t\t};\n\n\t\tthis.saveRenderState = function ( renderer ) {\n\n\t\t\tthis.savedRenderTarget = renderer.getRenderTarget();\n\t\t\tthis.savedXrEnabled = renderer.xr.enabled;\n\t\t\tthis.savedShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\t\t\tthis.savedAntialias = renderer.antialias;\n\t\t\tthis.savedToneMapping = renderer.toneMapping;\n\n\t\t};\n\n\t\tthis.restoreRenderState = function ( renderer ) {\n\n\t\t\trenderer.xr.enabled = this.savedXrEnabled;\n\t\t\trenderer.shadowMap.autoUpdate = this.savedShadowAutoUpdate;\n\t\t\trenderer.setRenderTarget( this.savedRenderTarget );\n\t\t\trenderer.antialias = this.savedAntialias;\n\t\t\trenderer.toneMapping = this.savedToneMapping;\n\n\t\t};\n\n\t\tthis.renderSource = function ( renderer ) {\n\n\t\t\tthis.sourceMesh.visible = true;\n\n\t\t\tthis.sourceMaterial.uniforms[ \"densityMap\" ].value = this.field0.texture;\n\n\t\t\trenderer.setRenderTarget( this.field1 );\n\t\t\trenderer.render( this.fieldScene, this.orthoCamera );\n\n\t\t\tthis.sourceMesh.visible = false;\n\n\t\t\tthis.swapTextures();\n\n\t\t};\n\n\t\tthis.renderDiffuse = function ( renderer ) {\n\n\t\t\tthis.diffuseMesh.visible = true;\n\n\t\t\tthis.diffuseMaterial.uniforms[ \"densityMap\" ].value = this.field0.texture;\n\n\t\t\trenderer.setRenderTarget( this.field1 );\n\t\t\trenderer.render( this.fieldScene, this.orthoCamera );\n\n\t\t\tthis.diffuseMesh.visible = false;\n\n\t\t\tthis.swapTextures();\n\n\t\t};\n\n\t\tthis.renderDrift = function ( renderer ) {\n\n\t\t\tthis.driftMesh.visible = true;\n\n\t\t\tthis.driftMaterial.uniforms[ \"densityMap\" ].value = this.field0.texture;\n\n\t\t\trenderer.setRenderTarget( this.field1 );\n\t\t\trenderer.render( this.fieldScene, this.orthoCamera );\n\n\t\t\tthis.driftMesh.visible = false;\n\n\t\t\tthis.swapTextures();\n\n\t\t};\n\n\t\tthis.renderProject = function ( renderer ) {\n\n\t\t\t// Projection pass 1\n\n\t\t\tthis.projMesh1.visible = true;\n\n\t\t\tthis.projMaterial1.uniforms[ \"densityMap\" ].value = this.field0.texture;\n\n\t\t\trenderer.setRenderTarget( this.fieldProj );\n\t\t\trenderer.render( this.fieldScene, this.orthoCamera );\n\n\t\t\tthis.projMesh1.visible = false;\n\n\t\t\tthis.projMaterial2.uniforms[ \"densityMap\" ].value = this.fieldProj.texture;\n\n\t\t\t// Projection pass 2\n\n\t\t\tthis.projMesh2.visible = true;\n\n\t\t\tfor ( var i = 0; i < 20; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( this.field1 );\n\t\t\t\trenderer.render( this.fieldScene, this.orthoCamera );\n\n\t\t\t\tvar temp = this.field1;\n\t\t\t\tthis.field1 = this.fieldProj;\n\t\t\t\tthis.fieldProj = temp;\n\n\t\t\t\tthis.projMaterial2.uniforms[ \"densityMap\" ].value = this.fieldProj.texture;\n\n\t\t\t}\n\n\t\t\tthis.projMesh2.visible = false;\n\n\t\t\tthis.projMaterial3.uniforms[ \"densityMap\" ].value = this.field0.texture;\n\t\t\tthis.projMaterial3.uniforms[ \"projMap\" ].value = this.fieldProj.texture;\n\n\t\t\t// Projection pass 3\n\n\t\t\tthis.projMesh3.visible = true;\n\n\t\t\trenderer.setRenderTarget( this.field1 );\n\t\t\trenderer.render( this.fieldScene, this.orthoCamera );\n\n\t\t\tthis.projMesh3.visible = false;\n\n\t\t\tthis.swapTextures();\n\n\t\t};\n\n\t\tthis.onBeforeRender = function ( renderer ) {\n\n\t\t\tvar delta = this.clock.getDelta();\n\t\t\tif ( delta > 0.1 ) {\n\n\t\t\t\tdelta = 0.1;\n\n\t\t\t}\n\t\t\tvar dt = delta * ( this.speed * 0.1 );\n\n\t\t\tthis.configShaders( dt );\n\n\t\t\tthis.saveRenderState( renderer );\n\n\t\t\trenderer.xr.enabled = false; // Avoid camera modification and recursion\n\t\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\t\t\trenderer.antialias = false;\n\t\t\trenderer.toneMapping = THREE.NoToneMapping;\n\n\t\t\tthis.sourceMesh.visible = false;\n\t\t\tthis.diffuseMesh.visible = false;\n\t\t\tthis.driftMesh.visible = false;\n\t\t\tthis.projMesh1.visible = false;\n\t\t\tthis.projMesh2.visible = false;\n\t\t\tthis.projMesh3.visible = false;\n\n\t\t\tthis.renderSource( renderer );\n\n\t\t\tthis.clearDiffuse();\n\t\t\tfor ( var i = 0; i < 21; i ++ ) {\n\n\t\t\t\tthis.renderDiffuse( renderer );\n\n\t\t\t}\n\t\t\tthis.configShaders( dt );\n\t\t\tthis.renderDiffuse( renderer );\n\n\t\t\tthis.renderDrift( renderer );\n\n\t\t\tif ( this.massConservation ) {\n\n\t\t\t\tthis.renderProject( renderer );\n\t\t\t\tthis.renderProject( renderer );\n\n\t\t\t}\n\n\t\t\t// Final result out for coloring\n\n\t\t\tthis.material.map = this.field1.texture;\n\t\t\tthis.material.transparent = true;\n\t\t\tthis.material.minFilter = THREE.LinearFilter,\n\t\t\tthis.material.magFilter = THREE.LinearFilter,\n\n\t\t\tthis.restoreRenderState( renderer );\n\n\t\t};\n\n\t};\n\n\n\tTHREE.Fire.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.Fire.prototype.constructor = THREE.Fire;\n\n\tTHREE.Fire.SourceShader = {\n\n\t\tuniforms: {\n\t\t\t'sourceMap': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform sampler2D sourceMap;',\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    vec4 source = texture2D( sourceMap, vUv );',\n\t\t\t'    vec4 current = texture2D( densityMap, vUv );',\n\n\t\t\t'    vec2 v0 = (current.gb - step(0.5, current.gb)) * 2.0;',\n\t\t\t'    vec2 v1 = (source.gb - step(0.5, source.gb)) * 2.0;',\n\n\t\t\t'    vec2 newVel = v0 + v1;',\n\n\t\t\t'    newVel = clamp(newVel, -0.99, 0.99);',\n\t\t\t'    newVel = newVel * 0.5 + step(0.0, -newVel);',\n\n\t\t\t'    float newDensity = source.r + current.a;',\n\t\t\t'    float newTemp = source.r + current.r;',\n\n\t\t\t'    newDensity = clamp(newDensity, 0.0, 1.0);',\n\t\t\t'    newTemp = clamp(newTemp, 0.0, 1.0);',\n\n\t\t\t'    gl_FragColor = vec4(newTemp, newVel.xy, newDensity);',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\n\tTHREE.Fire.DiffuseShader = {\n\n\t\tuniforms: {\n\t\t\t'oneOverWidth': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'oneOverHeight': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'diffuse': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'viscosity': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'expansion': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'swirl': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'drag': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'burnRate': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform float oneOverWidth;',\n\t\t\t'uniform float oneOverHeight;',\n\t\t\t'uniform float diffuse;',\n\t\t\t'uniform float viscosity;',\n\t\t\t'uniform float expansion;',\n\t\t\t'uniform float swirl;',\n\t\t\t'uniform float burnRate;',\n\t\t\t'uniform float drag;',\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t'    vec4 dC = texture2D( densityMap, vUv );',\n\t\t\t'    vec4 dL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y) );',\n\t\t\t'    vec4 dR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y) );',\n\t\t\t'    vec4 dU = texture2D( densityMap, vec2(vUv.x, vUv.y - oneOverHeight) );',\n\t\t\t'    vec4 dD = texture2D( densityMap, vec2(vUv.x, vUv.y + oneOverHeight) );',\n\t\t\t'    vec4 dUL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y - oneOverHeight) );',\n\t\t\t'    vec4 dUR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y - oneOverHeight) );',\n\t\t\t'    vec4 dDL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y + oneOverHeight) );',\n\t\t\t'    vec4 dDR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y + oneOverHeight) );',\n\n\t\t\t'    dC.yz = (dC.yz - step(0.5, dC.yz)) * 2.0;',\n\t\t\t'    dL.yz = (dL.yz - step(0.5, dL.yz)) * 2.0;',\n\t\t\t'    dR.yz = (dR.yz - step(0.5, dR.yz)) * 2.0;',\n\t\t\t'    dU.yz = (dU.yz - step(0.5, dU.yz)) * 2.0;',\n\t\t\t'    dD.yz = (dD.yz - step(0.5, dD.yz)) * 2.0;',\n\t\t\t'    dUL.yz = (dUL.yz - step(0.5, dUL.yz)) * 2.0;',\n\t\t\t'    dUR.yz = (dUR.yz - step(0.5, dUR.yz)) * 2.0;',\n\t\t\t'    dDL.yz = (dDL.yz - step(0.5, dDL.yz)) * 2.0;',\n\t\t\t'    dDR.yz = (dDR.yz - step(0.5, dDR.yz)) * 2.0;',\n\n\t\t\t'    vec4 result = (dC + vec4(diffuse, viscosity, viscosity, diffuse) * ( dL + dR + dU + dD + dUL + dUR + dDL + dDR )) / (1.0 + 8.0 * vec4(diffuse, viscosity, viscosity, diffuse)) - vec4(0.0, 0.0, 0.0, 0.001);',\n\n\t\t\t'    float temperature = result.r;',\n\t\t\t'    temperature = clamp(temperature - burnRate, 0.0, 1.0);',\n\n\t\t\t'    vec2 velocity = result.yz;',\n\n\t\t\t'    vec2 expansionVec = vec2(dL.w - dR.w, dU.w - dD.w);',\n\n\t\t\t'    vec2 swirlVec = vec2((dL.z - dR.z) * 0.5, (dU.y - dD.y) * 0.5);',\n\n\t\t\t'    velocity = velocity + (1.0 - expansion) * expansionVec + (1.0 - swirl) * swirlVec;',\n\n\t\t\t'    velocity = velocity - (1.0 - drag) * velocity;',\n\n\t\t\t'    gl_FragColor = vec4(temperature, velocity * 0.5 + step(0.0, -velocity), result.w);',\n\n\t\t\t'    gl_FragColor = gl_FragColor * step(oneOverWidth, vUv.x);',\n\t\t\t'    gl_FragColor = gl_FragColor * step(oneOverHeight, vUv.y);',\n\t\t\t'    gl_FragColor = gl_FragColor * step(vUv.x, 1.0 - oneOverWidth);',\n\t\t\t'    gl_FragColor = gl_FragColor * step(vUv.y, 1.0 - oneOverHeight);',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\tTHREE.Fire.DriftShader = {\n\n\t\tuniforms: {\n\t\t\t'oneOverWidth': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'oneOverHeight': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'windVector': {\n\t\t\t\tvalue: new THREE.Vector2( 0.0, 0.0 )\n\t\t\t},\n\t\t\t'airSpeed': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform float oneOverWidth;',\n\t\t\t'uniform float oneOverHeight;',\n\t\t\t'uniform vec2 windVector;',\n\t\t\t'uniform float airSpeed;',\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    vec2 velocity = texture2D( densityMap, vUv ).gb;',\n\t\t\t'    velocity = (velocity - step(0.5, velocity)) * 2.0;',\n\n\t\t\t'    velocity = velocity + windVector;',\n\n\t\t\t'    vec2 sourcePos = vUv - airSpeed * vec2(oneOverWidth, oneOverHeight) * velocity;',\n\n\t\t\t'    vec2 units = sourcePos / vec2(oneOverWidth, oneOverHeight);',\n\n\t\t\t'    vec2 intPos = floor(units);',\n\t\t\t'    vec2 frac = units - intPos;',\n\t\t\t'    intPos = intPos * vec2(oneOverWidth, oneOverHeight);',\n\n\t\t\t'    vec4 dX0Y0 = texture2D( densityMap, intPos + vec2(0.0, -oneOverHeight) );',\n\t\t\t'    vec4 dX1Y0 = texture2D( densityMap, intPos + vec2(oneOverWidth, 0.0) );',\n\t\t\t'    vec4 dX0Y1 = texture2D( densityMap, intPos + vec2(0.0, oneOverHeight) );',\n\t\t\t'    vec4 dX1Y1 = texture2D( densityMap, intPos + vec2(oneOverWidth, oneOverHeight) );',\n\n\n\t\t\t'    dX0Y0.gb = (dX0Y0.gb - step(0.5, dX0Y0.gb)) * 2.0;',\n\t\t\t'    dX1Y0.gb = (dX1Y0.gb - step(0.5, dX1Y0.gb)) * 2.0;',\n\t\t\t'    dX0Y1.gb = (dX0Y1.gb - step(0.5, dX0Y1.gb)) * 2.0;',\n\t\t\t'    dX1Y1.gb = (dX1Y1.gb - step(0.5, dX1Y1.gb)) * 2.0;',\n\n\t\t\t'    vec4 source = mix(mix(dX0Y0, dX1Y0, frac.x), mix(dX0Y1, dX1Y1, frac.x), frac.y);',\n\n\t\t\t'    source.gb = source.gb * 0.5 + step(0.0, -source.gb);',\n\n\t\t\t'    gl_FragColor = source;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\n\tTHREE.Fire.ProjectionShader1 = {\n\n\t\tuniforms: {\n\t\t\t'oneOverWidth': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'oneOverHeight': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform float oneOverWidth;',\n\t\t\t'uniform float oneOverHeight;',\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    float dL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y) ).g;',\n\t\t\t'    float dR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y) ).g;',\n\t\t\t'    float dU = texture2D( densityMap, vec2(vUv.x, vUv.y - oneOverHeight) ).b;',\n\t\t\t'    float dD = texture2D( densityMap, vec2(vUv.x, vUv.y + oneOverHeight) ).b;',\n\n\t\t\t'    dL = (dL - step(0.5, dL)) * 2.0;',\n\t\t\t'    dR = (dR - step(0.5, dR)) * 2.0;',\n\t\t\t'    dU = (dU - step(0.5, dU)) * 2.0;',\n\t\t\t'    dD = (dD - step(0.5, dD)) * 2.0;',\n\n\t\t\t'    float h = (oneOverWidth + oneOverHeight) * 0.5;',\n\t\t\t'    float div = -0.5 * h * (dR - dL + dD - dU);',\n\n\t\t\t'    gl_FragColor = vec4( 0.0, 0.0, div * 0.5 + step(0.0, -div), 0.0);',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\n\tTHREE.Fire.ProjectionShader2 = {\n\n\t\tuniforms: {\n\t\t\t'oneOverWidth': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'oneOverHeight': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform float oneOverWidth;',\n\t\t\t'uniform float oneOverHeight;',\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    float div = texture2D( densityMap, vUv ).b;',\n\t\t\t'    float pL = texture2D( densityMap, vec2(vUv.x - oneOverWidth, vUv.y) ).g;',\n\t\t\t'    float pR = texture2D( densityMap, vec2(vUv.x + oneOverWidth, vUv.y) ).g;',\n\t\t\t'    float pU = texture2D( densityMap, vec2(vUv.x, vUv.y - oneOverHeight) ).g;',\n\t\t\t'    float pD = texture2D( densityMap, vec2(vUv.x, vUv.y + oneOverHeight) ).g;',\n\n\t\t\t'    float divNorm = (div - step(0.5, div)) * 2.0;',\n\t\t\t'    pL = (pL - step(0.5, pL)) * 2.0;',\n\t\t\t'    pR = (pR - step(0.5, pR)) * 2.0;',\n\t\t\t'    pU = (pU - step(0.5, pU)) * 2.0;',\n\t\t\t'    pD = (pD - step(0.5, pD)) * 2.0;',\n\n\t\t\t'    float p = (divNorm + pR + pL + pD + pU) * 0.25;',\n\n\t\t\t'    gl_FragColor = vec4( 0.0, p * 0.5 + step(0.0, -p), div, 0.0);',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\n\tTHREE.Fire.ProjectionShader3 = {\n\n\t\tuniforms: {\n\t\t\t'oneOverWidth': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'oneOverHeight': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'projMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform float oneOverWidth;',\n\t\t\t'uniform float oneOverHeight;',\n\t\t\t'uniform sampler2D densityMap;',\n\t\t\t'uniform sampler2D projMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    vec4 orig = texture2D(densityMap, vUv);',\n\n\t\t\t'    float pL = texture2D( projMap, vec2(vUv.x - oneOverWidth, vUv.y) ).g;',\n\t\t\t'    float pR = texture2D( projMap, vec2(vUv.x + oneOverWidth, vUv.y) ).g;',\n\t\t\t'    float pU = texture2D( projMap, vec2(vUv.x, vUv.y - oneOverHeight) ).g;',\n\t\t\t'    float pD = texture2D( projMap, vec2(vUv.x, vUv.y + oneOverHeight) ).g;',\n\n\t\t\t'    float uNorm = (orig.g - step(0.5, orig.g)) * 2.0;',\n\t\t\t'    float vNorm = (orig.b - step(0.5, orig.b)) * 2.0;',\n\n\t\t\t'    pL = (pL - step(0.5, pL)) * 2.0;',\n\t\t\t'    pR = (pR - step(0.5, pR)) * 2.0;',\n\t\t\t'    pU = (pU - step(0.5, pU)) * 2.0;',\n\t\t\t'    pD = (pD - step(0.5, pD)) * 2.0;',\n\n\t\t\t'    float h = (oneOverWidth + oneOverHeight) * 0.5;',\n\t\t\t'    float u = uNorm - (0.5 * (pR - pL) / h);',\n\t\t\t'    float v = vNorm - (0.5 * (pD - pU) / h);',\n\n\t\t\t'    gl_FragColor = vec4( orig.r, u * 0.5 + step(0.0, -u), v * 0.5 + step(0.0, -v), orig.a);',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\tTHREE.Fire.ColorShader = {\n\n\t\tuniforms: {\n\t\t\t'color1': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'color2': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'color3': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'colorBias': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform vec3 color1;',\n\t\t\t'uniform vec3 color2;',\n\t\t\t'uniform vec3 color3;',\n\t\t\t'uniform float colorBias;',\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    float density = texture2D( densityMap, vUv ).a;',\n\t\t\t'    float temperature = texture2D( densityMap, vUv ).r;',\n\n\t\t\t'    float bias = clamp(colorBias, 0.0001, 0.9999);',\n\n\t\t\t'    vec3 blend1 = mix(color3, color2, temperature / bias) * (1.0 - step(bias, temperature));',\n\t\t\t'    vec3 blend2 = mix(color2, color1, (temperature - bias) / (1.0 - bias) ) * step(bias, temperature);',\n\n\t\t\t'    gl_FragColor = vec4(blend1 + blend2, density);',\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\n\n\tTHREE.Fire.DebugShader = {\n\n\t\tuniforms: {\n\t\t\t'color1': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'color2': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'color3': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'colorBias': {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\t'densityMap': {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\n\t\t\t' \t  vUv = uv;',\n\n\t\t\t'     vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t'     gl_Position = projectionMatrix * mvPosition;',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" ),\n\n\t\tfragmentShader: [\n\t\t\t'uniform sampler2D densityMap;',\n\n\t\t\t'varying vec2 vUv;',\n\n\t\t\t'void main() {',\n\t\t\t'    float density;',\n\t\t\t'    density = texture2D( densityMap, vUv ).a;',\n\n\t\t\t'    vec2 vel = texture2D( densityMap, vUv ).gb;',\n\n\t\t\t'    vel = (vel - step(0.5, vel)) * 2.0;',\n\n\t\t\t'    float r = density;',\n\t\t\t'    float g = max(abs(vel.x), density * 0.5);',\n\t\t\t'    float b = max(abs(vel.y), density * 0.5);',\n\t\t\t'    float a = max(density * 0.5, max(abs(vel.x), abs(vel.y)));',\n\n\t\t\t'    gl_FragColor = vec4(r, g, b, a);',\n\n\t\t\t'}'\n\n\t\t].join( \"\\n\" )\n\t};\n\t\n\treturn THREE.Fire;\n});\n"]}