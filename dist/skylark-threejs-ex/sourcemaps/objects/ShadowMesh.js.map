{"version":3,"sources":["objects/ShadowMesh.js"],"names":["define","THREE","shadowMatrix","ShadowMesh","mesh","shadowMaterial","MeshBasicMaterial","color","transparent","opacity","depthWrite","Mesh","call","this","geometry","meshMatrix","matrixWorld","frustumCulled","matrixAutoUpdate","prototype","Object","create","constructor","update","Matrix4","plane","lightPosition4D","dot","normal","x","y","z","constant","w","sme","elements","matrix","multiplyMatrices"],"mappings":";;;;;;;AAAAA,QACC,mBACC,SAASC,GA8B0B,IAE/BC,EAuCL,OAhEAD,EAAME,WAAa,SAAWC,GAE7B,IAAIC,EAAiB,IAAIJ,EAAMK,mBAE9BC,MAAO,EACPC,aAAa,EACbC,QAAS,GACTC,YAAY,IAIbT,EAAMU,KAAKC,KAAMC,KAAMT,EAAKU,SAAUT,GAEtCQ,KAAKE,WAAaX,EAAKY,YAEvBH,KAAKI,eAAgB,EACrBJ,KAAKK,kBAAmB,GAIzBjB,EAAME,WAAWgB,UAAYC,OAAOC,OAAQpB,EAAMU,KAAKQ,WACvDlB,EAAME,WAAWgB,UAAUG,YAAcrB,EAAME,WAE/CF,EAAME,WAAWgB,UAAUI,QAEtBrB,EAAe,IAAID,EAAMuB,QAEtB,SAAWC,EAAOC,GAIxB,IAAIC,EAAMF,EAAMG,OAAOC,EAAIH,EAAgBG,EACxCJ,EAAMG,OAAOE,EAAIJ,EAAgBI,EACjCL,EAAMG,OAAOG,EAAIL,EAAgBK,GAC/BN,EAAMO,SAAWN,EAAgBO,EAElCC,EAAMhC,EAAaiC,SAEvBD,EAAK,GAAMP,EAAMD,EAAgBG,EAAIJ,EAAMG,OAAOC,EAClDK,EAAK,IAAQR,EAAgBG,EAAIJ,EAAMG,OAAOE,EAC9CI,EAAK,IAAQR,EAAgBG,EAAIJ,EAAMG,OAAOG,EAC9CG,EAAK,KAASR,EAAgBG,GAAMJ,EAAMO,SAE1CE,EAAK,IAAQR,EAAgBI,EAAIL,EAAMG,OAAOC,EAC9CK,EAAK,GAAMP,EAAMD,EAAgBI,EAAIL,EAAMG,OAAOE,EAClDI,EAAK,IAAQR,EAAgBI,EAAIL,EAAMG,OAAOG,EAC9CG,EAAK,KAASR,EAAgBI,GAAML,EAAMO,SAE1CE,EAAK,IAAQR,EAAgBK,EAAIN,EAAMG,OAAOC,EAC9CK,EAAK,IAAQR,EAAgBK,EAAIN,EAAMG,OAAOE,EAC9CI,EAAK,IAAOP,EAAMD,EAAgBK,EAAIN,EAAMG,OAAOG,EACnDG,EAAK,KAASR,EAAgBK,GAAMN,EAAMO,SAE1CE,EAAK,IAAQR,EAAgBO,EAAIR,EAAMG,OAAOC,EAC9CK,EAAK,IAAQR,EAAgBO,EAAIR,EAAMG,OAAOE,EAC9CI,EAAK,KAASR,EAAgBO,EAAIR,EAAMG,OAAOG,EAC/CG,EAAK,IAAOP,EAAMD,EAAgBO,GAAMR,EAAMO,SAE9CnB,KAAKuB,OAAOC,iBAAkBnC,EAAcW,KAAKE,cAM5Cd,EAAME","file":"../../objects/ShadowMesh.js","sourcesContent":["define([\n\t\"skylark-threejs\"\n],function(THREE){\n\t/**\n\t * @author erichlof /  http://github.com/erichlof\n\t *\n\t * A shadow Mesh that follows a shadow-casting Mesh in the scene, but is confined to a single plane.\n\t */\n\n\tTHREE.ShadowMesh = function ( mesh ) {\n\n\t\tvar shadowMaterial = new THREE.MeshBasicMaterial( {\n\n\t\t\tcolor: 0x000000,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.6,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tTHREE.Mesh.call( this, mesh.geometry, shadowMaterial );\n\n\t\tthis.meshMatrix = mesh.matrixWorld;\n\n\t\tthis.frustumCulled = false;\n\t\tthis.matrixAutoUpdate = false;\n\n\t};\n\n\tTHREE.ShadowMesh.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.ShadowMesh.prototype.constructor = THREE.ShadowMesh;\n\n\tTHREE.ShadowMesh.prototype.update = function () {\n\n\t\tvar shadowMatrix = new THREE.Matrix4();\n\n\t\treturn function ( plane, lightPosition4D ) {\n\n\t\t\t// based on https://www.opengl.org/archives/resources/features/StencilTalk/tsld021.htm\n\n\t\t\tvar dot = plane.normal.x * lightPosition4D.x +\n\t\t\t\t  plane.normal.y * lightPosition4D.y +\n\t\t\t\t  plane.normal.z * lightPosition4D.z +\n\t\t\t\t  - plane.constant * lightPosition4D.w;\n\n\t\t\tvar sme = shadowMatrix.elements;\n\n\t\t\tsme[ 0 ] = dot - lightPosition4D.x * plane.normal.x;\n\t\t\tsme[ 4 ] = - lightPosition4D.x * plane.normal.y;\n\t\t\tsme[ 8 ] = - lightPosition4D.x * plane.normal.z;\n\t\t\tsme[ 12 ] = - lightPosition4D.x * - plane.constant;\n\n\t\t\tsme[ 1 ] = - lightPosition4D.y * plane.normal.x;\n\t\t\tsme[ 5 ] = dot - lightPosition4D.y * plane.normal.y;\n\t\t\tsme[ 9 ] = - lightPosition4D.y * plane.normal.z;\n\t\t\tsme[ 13 ] = - lightPosition4D.y * - plane.constant;\n\n\t\t\tsme[ 2 ] = - lightPosition4D.z * plane.normal.x;\n\t\t\tsme[ 6 ] = - lightPosition4D.z * plane.normal.y;\n\t\t\tsme[ 10 ] = dot - lightPosition4D.z * plane.normal.z;\n\t\t\tsme[ 14 ] = - lightPosition4D.z * - plane.constant;\n\n\t\t\tsme[ 3 ] = - lightPosition4D.w * plane.normal.x;\n\t\t\tsme[ 7 ] = - lightPosition4D.w * plane.normal.y;\n\t\t\tsme[ 11 ] = - lightPosition4D.w * plane.normal.z;\n\t\t\tsme[ 15 ] = dot - lightPosition4D.w * - plane.constant;\n\n\t\t\tthis.matrix.multiplyMatrices( shadowMatrix, this.meshMatrix );\n\n\t\t};\n\n\t}();\n\t\n\treturn THREE.ShadowMesh;\n});\n"]}