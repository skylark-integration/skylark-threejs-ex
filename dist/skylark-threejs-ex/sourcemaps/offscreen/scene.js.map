{"version":3,"sources":["offscreen/scene.js"],"names":["define","THREE","threex","camera","scene","renderer","group","animate","rotation","y","Date","now","render","self","requestAnimationFrame","seed","random","x","Math","sin","floor","offscreen","canvas","width","height","pixelRatio","path","PerspectiveCamera","position","z","Scene","fog","Fog","background","Color","Group","add","loader","ImageBitmapLoader","setPath","setOptions","imageOrientation","load","imageBitmap","texture","CanvasTexture","geometry","IcosahedronBufferGeometry","materials","MeshMatcapMaterial","color","matcap","i","material","length","mesh","Mesh","scale","setScalar","WebGLRenderer","antialias","setPixelRatio","setSize"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAQC,EAAOC,EAAUC,EAkD7B,SAASC,IACLD,EAAME,SAASC,GAAKC,KAAKC,MAAQ,IACjCN,EAASO,OAAOR,EAAOD,GACnBU,KAAKC,uBACLD,KAAKC,sBAAsBP,GAInC,IAAIQ,EAAO,EACX,SAASC,IACL,IAAIC,EAAuB,IAAnBC,KAAKC,IAAIJ,KACjB,OAAOE,EAAIC,KAAKE,MAAMH,GAE1B,OAAOf,EAAOmB,UAAUjB,MA9DxB,SAAckB,EAAQC,EAAOC,EAAQC,EAAYC,IAC7CvB,EAAS,IAAIF,EAAM0B,kBAAkB,GAAIJ,EAAQC,EAAQ,EAAG,MACrDI,SAASC,EAAI,KACpBzB,EAAQ,IAAIH,EAAM6B,OACZC,IAAM,IAAI9B,EAAM+B,IAAI,QAAS,IAAK,KACxC5B,EAAM6B,WAAa,IAAIhC,EAAMiC,MAAM,SACnC5B,EAAQ,IAAIL,EAAMkC,MAClB/B,EAAMgC,IAAI9B,GACV,IAAI+B,GAAS,IAAIpC,EAAMqC,mBAAoBC,QAAQb,GACnDW,EAAOG,YAAaC,iBAAkB,UACtCJ,EAAOK,KAAK,8CAA+C,SAAUC,GAqBjE,IApBA,IAAIC,EAAU,IAAI3C,EAAM4C,cAAcF,GAClCG,EAAW,IAAI7C,EAAM8C,0BAA0B,EAAG,GAClDC,GACA,IAAI/C,EAAMgD,oBACNC,MAAO,SACPC,OAAQP,IAEZ,IAAI3C,EAAMgD,oBACNC,MAAO,QACPC,OAAQP,IAEZ,IAAI3C,EAAMgD,oBACNC,MAAO,SACPC,OAAQP,IAEZ,IAAI3C,EAAMgD,oBACNC,MAAO,SACPC,OAAQP,KAGPQ,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIC,EAAWL,EAAUI,EAAIJ,EAAUM,QACnCC,EAAO,IAAItD,EAAMuD,KAAKV,EAAUO,GACpCE,EAAK3B,SAASX,EAAe,IAAXD,IAAiB,IACnCuC,EAAK3B,SAASnB,EAAe,IAAXO,IAAiB,IACnCuC,EAAK3B,SAASC,EAAe,IAAXb,IAAiB,IACnCuC,EAAKE,MAAMC,UAAU1C,IAAW,GAChCV,EAAM8B,IAAImB,IAEdlD,EAAW,IAAIJ,EAAM0D,eACjBC,WAAW,EACXtC,OAAQA,KAEHuC,cAAcpC,GACvBpB,EAASyD,QAAQvC,EAAOC,GAAQ,GAChCjB","file":"../../offscreen/scene.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var camera, scene, renderer, group;\n    function init(canvas, width, height, pixelRatio, path) {\n        camera = new THREE.PerspectiveCamera(40, width / height, 1, 1000);\n        camera.position.z = 200;\n        scene = new THREE.Scene();\n        scene.fog = new THREE.Fog(4473958, 100, 400);\n        scene.background = new THREE.Color(4473958);\n        group = new THREE.Group();\n        scene.add(group);\n        var loader = new THREE.ImageBitmapLoader().setPath(path);\n        loader.setOptions({ imageOrientation: 'flipY' });\n        loader.load('textures/matcaps/matcap-porcelain-white.jpg', function (imageBitmap) {\n            var texture = new THREE.CanvasTexture(imageBitmap);\n            var geometry = new THREE.IcosahedronBufferGeometry(5, 3);\n            var materials = [\n                new THREE.MeshMatcapMaterial({\n                    color: 11150559,\n                    matcap: texture\n                }),\n                new THREE.MeshMatcapMaterial({\n                    color: 6315408,\n                    matcap: texture\n                }),\n                new THREE.MeshMatcapMaterial({\n                    color: 14699071,\n                    matcap: texture\n                }),\n                new THREE.MeshMatcapMaterial({\n                    color: 14877782,\n                    matcap: texture\n                })\n            ];\n            for (var i = 0; i < 100; i++) {\n                var material = materials[i % materials.length];\n                var mesh = new THREE.Mesh(geometry, material);\n                mesh.position.x = random() * 200 - 100;\n                mesh.position.y = random() * 200 - 100;\n                mesh.position.z = random() * 200 - 100;\n                mesh.scale.setScalar(random() + 1);\n                group.add(mesh);\n            }\n            renderer = new THREE.WebGLRenderer({\n                antialias: true,\n                canvas: canvas\n            });\n            renderer.setPixelRatio(pixelRatio);\n            renderer.setSize(width, height, false);\n            animate();\n        });\n    }\n    function animate() {\n        group.rotation.y = -Date.now() / 4000;\n        renderer.render(scene, camera);\n        if (self.requestAnimationFrame) {\n            self.requestAnimationFrame(animate);\n        } else {\n        }\n    }\n    var seed = 1;\n    function random() {\n        var x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    }\n    return threex.offscreen.scene = init;\n});"]}