{"version":3,"sources":["utils/ShadowMapViewer.js"],"names":["define","THREE","threex","UnpackDepthRGBAShader","ShadowMapViewer","light","userAutoClearSetting","scope","this","doRenderLabel","undefined","name","frame","camera","OrthographicCamera","window","innerWidth","innerHeight","position","set","labelCanvas","labelMesh","scene","Scene","shader","uniforms","UniformsUtils","clone","material","ShaderMaterial","vertexShader","fragmentShader","plane","PlaneBufferGeometry","mesh","Mesh","add","context","document","createElement","getContext","font","labelWidth","measureText","width","height","fillStyle","fillText","labelTexture","Texture","magFilter","LinearFilter","minFilter","needsUpdate","labelMaterial","MeshBasicMaterial","map","side","DoubleSide","transparent","labelPlane","enabled","size","scale","x","y","render","renderer","tDiffuse","value","shadow","texture","autoClear","clearDepth","updateForWindowResize","left","right","top","bottom","updateProjectionMatrix","update","prototype","constructor","utils"],"mappings":"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","file":"../../utils/ShadowMapViewer.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\",\n    '../shaders/UnpackDepthRGBAShader'\n], function (\n    THREE,\n    threex,\n    UnpackDepthRGBAShader\n) {\n    'use strict';\n    var ShadowMapViewer = function (light) {\n        var scope = this;\n        var doRenderLabel = light.name !== undefined && light.name !== '';\n        var userAutoClearSetting;\n        var frame = {\n            x: 10,\n            y: 10,\n            width: 256,\n            height: 256\n        };\n        var camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 10);\n        camera.position.set(0, 0, 2);\n        var scene = new THREE.Scene();\n        var shader = UnpackDepthRGBAShader;\n        var uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        var material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader\n        });\n        var plane = new THREE.PlaneBufferGeometry(frame.width, frame.height);\n        var mesh = new THREE.Mesh(plane, material);\n        scene.add(mesh);\n        var labelCanvas, labelMesh;\n        if (doRenderLabel) {\n            labelCanvas = document.createElement('canvas');\n            var context = labelCanvas.getContext('2d');\n            context.font = 'Bold 20px Arial';\n            var labelWidth = context.measureText(light.name).width;\n            labelCanvas.width = labelWidth;\n            labelCanvas.height = 25;\n            context.font = 'Bold 20px Arial';\n            context.fillStyle = 'rgba( 255, 0, 0, 1 )';\n            context.fillText(light.name, 0, 20);\n            var labelTexture = new THREE.Texture(labelCanvas);\n            labelTexture.magFilter = THREE.LinearFilter;\n            labelTexture.minFilter = THREE.LinearFilter;\n            labelTexture.needsUpdate = true;\n            var labelMaterial = new THREE.MeshBasicMaterial({\n                map: labelTexture,\n                side: THREE.DoubleSide\n            });\n            labelMaterial.transparent = true;\n            var labelPlane = new THREE.PlaneBufferGeometry(labelCanvas.width, labelCanvas.height);\n            labelMesh = new THREE.Mesh(labelPlane, labelMaterial);\n            scene.add(labelMesh);\n        }\n        function resetPosition() {\n            scope.position.set(scope.position.x, scope.position.y);\n        }\n        this.enabled = true;\n        this.size = {\n            width: frame.width,\n            height: frame.height,\n            set: function (width, height) {\n                this.width = width;\n                this.height = height;\n                mesh.scale.set(this.width / frame.width, this.height / frame.height, 1);\n                resetPosition();\n            }\n        };\n        this.position = {\n            x: frame.x,\n            y: frame.y,\n            set: function (x, y) {\n                this.x = x;\n                this.y = y;\n                var width = scope.size.width;\n                var height = scope.size.height;\n                mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0);\n                if (doRenderLabel)\n                    labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0);\n            }\n        };\n        this.render = function (renderer) {\n            if (this.enabled) {\n                uniforms.tDiffuse.value = light.shadow.map.texture;\n                userAutoClearSetting = renderer.autoClear;\n                renderer.autoClear = false;\n                renderer.clearDepth();\n                renderer.render(scene, camera);\n                renderer.autoClear = userAutoClearSetting;\n            }\n        };\n        this.updateForWindowResize = function () {\n            if (this.enabled) {\n                camera.left = window.innerWidth / -2;\n                camera.right = window.innerWidth / 2;\n                camera.top = window.innerHeight / 2;\n                camera.bottom = window.innerHeight / -2;\n                camera.updateProjectionMatrix();\n                this.update();\n            }\n        };\n        this.update = function () {\n            this.position.set(this.position.x, this.position.y);\n            this.size.set(this.size.width, this.size.height);\n        };\n        this.update();\n    };\n    ShadowMapViewer.prototype.constructor = ShadowMapViewer;\n\n    return threex.utils.ShadowMapViewer = ShadowMapViewer;\n});"]}