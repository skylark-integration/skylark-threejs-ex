{"version":3,"sources":["utils/UVsDebug.js"],"names":["define","THREE","threex","utils","UVsDebug","geometry","size","abc","a","Vector2","b","uvs","face","canvas","document","createElement","width","height","ctx","getContext","lineWidth","strokeStyle","textAlign","fillStyle","fillRect","isGeometry","faces","uvSet","faceVertexUvs","i","il","length","uv","c","copy","processFace","index","uvAttribute","attributes","count","getX","fromBufferAttribute","beginPath","set","j","jl","x","y","moveTo","lineTo","closePath","stroke","divideScalar","font","fillText","addVectors","vnum"],"mappings":"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","file":"../../utils/UVsDebug.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    var UVsDebug = function (geometry, size) {\r\n        var abc = 'abc';\r\n        var a = new THREE.Vector2();\r\n        var b = new THREE.Vector2();\r\n        var uvs = [\r\n            new THREE.Vector2(),\r\n            new THREE.Vector2(),\r\n            new THREE.Vector2()\r\n        ];\r\n        var face = [];\r\n        var canvas = document.createElement('canvas');\r\n        var width = size || 1024;\r\n        var height = size || 1024;\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeStyle = 'rgba( 0, 0, 0, 1.0 )';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillStyle = 'rgba( 255, 255, 255, 1.0 )';\r\n        ctx.fillRect(0, 0, width, height);\r\n        if (geometry.isGeometry) {\r\n            var faces = geometry.faces;\r\n            var uvSet = geometry.faceVertexUvs[0];\r\n            for (var i = 0, il = uvSet.length; i < il; i++) {\r\n                var face = faces[i];\r\n                var uv = uvSet[i];\r\n                face[0] = face.a;\r\n                face[1] = face.b;\r\n                face[2] = face.c;\r\n                uvs[0].copy(uv[0]);\r\n                uvs[1].copy(uv[1]);\r\n                uvs[2].copy(uv[2]);\r\n                processFace(face, uvs, i);\r\n            }\r\n        } else {\r\n            var index = geometry.index;\r\n            var uvAttribute = geometry.attributes.uv;\r\n            if (index) {\r\n                for (var i = 0, il = index.count; i < il; i += 3) {\r\n                    face[0] = index.getX(i);\r\n                    face[1] = index.getX(i + 1);\r\n                    face[2] = index.getX(i + 2);\r\n                    uvs[0].fromBufferAttribute(uvAttribute, face[0]);\r\n                    uvs[1].fromBufferAttribute(uvAttribute, face[1]);\r\n                    uvs[2].fromBufferAttribute(uvAttribute, face[2]);\r\n                    processFace(face, uvs, i / 3);\r\n                }\r\n            } else {\r\n                for (var i = 0, il = uvAttribute.count; i < il; i += 3) {\r\n                    face[0] = i;\r\n                    face[1] = i + 1;\r\n                    face[2] = i + 2;\r\n                    uvs[0].fromBufferAttribute(uvAttribute, face[0]);\r\n                    uvs[1].fromBufferAttribute(uvAttribute, face[1]);\r\n                    uvs[2].fromBufferAttribute(uvAttribute, face[2]);\r\n                    processFace(face, uvs, i / 3);\r\n                }\r\n            }\r\n        }\r\n        return canvas;\r\n        function processFace(face, uvs, index) {\r\n            ctx.beginPath();\r\n            a.set(0, 0);\r\n            for (var j = 0, jl = uvs.length; j < jl; j++) {\r\n                var uv = uvs[j];\r\n                a.x += uv.x;\r\n                a.y += uv.y;\r\n                if (j === 0) {\r\n                    ctx.moveTo(uv.x * width, (1 - uv.y) * height);\r\n                } else {\r\n                    ctx.lineTo(uv.x * width, (1 - uv.y) * height);\r\n                }\r\n            }\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            a.divideScalar(uvs.length);\r\n            ctx.font = '12pt Arial bold';\r\n            ctx.fillStyle = 'rgba( 0, 0, 0, 1.0 )';\r\n            ctx.fillText(index, a.x * width, (1 - a.y) * height);\r\n            if (a.x > 0.95) {\r\n                ctx.fillText(index, a.x % 1 * width, (1 - a.y) * height);\r\n            }\r\n            ctx.font = '8pt Arial bold';\r\n            ctx.fillStyle = 'rgba( 0, 0, 0, 1.0 )';\r\n            for (j = 0, jl = uvs.length; j < jl; j++) {\r\n                var uv = uvs[j];\r\n                b.addVectors(a, uv).divideScalar(2);\r\n                var vnum = face[j];\r\n                ctx.fillText(abc[j] + vnum, b.x * width, (1 - b.y) * height);\r\n                if (b.x > 0.95) {\r\n                    ctx.fillText(abc[j] + vnum, b.x % 1 * width, (1 - b.y) * height);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return threex.utils.UVsDebug = UVsDebug;\r\n});"]}