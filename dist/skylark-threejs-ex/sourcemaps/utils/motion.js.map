{"version":3,"sources":["utils/motion.js"],"names":["define","threex","Constants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","async","fetchJsonFile","path","response","fetch","ok","json","Error","statusText","fetchProfilesList","basePath","defaultComponentValues","xAxis","yAxis","button","state","VisualResponse","[object Object]","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","normalizedXAxis","normalizedYAxis","x","y","Math","sqrt","theta","atan2","cos","sin","normalizeAxes","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","keys","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","utils","motion","MotionController","xrInputSource","profile","assetUrl","profileId","layoutDescription","layouts","handedness","components","updateFromGamepad","gripSpace","targetRaySpace","component","push","fetchProfile","defaultProfile","getAssetPath","supportedProfilesList","match","profiles","some","supportedProfile","profilePath","deprecated","assetPath","layout","replace"],"mappings":"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","file":"../../utils/motion.js","sourcesContent":["define([\r\n    \"../threex\"\r\n],function (threex) {\r\n    'use strict';\r\n    const Constants = {\r\n        Handedness: Object.freeze({\r\n            NONE: 'none',\r\n            LEFT: 'left',\r\n            RIGHT: 'right'\r\n        }),\r\n        ComponentState: Object.freeze({\r\n            DEFAULT: 'default',\r\n            TOUCHED: 'touched',\r\n            PRESSED: 'pressed'\r\n        }),\r\n        ComponentProperty: Object.freeze({\r\n            BUTTON: 'button',\r\n            X_AXIS: 'xAxis',\r\n            Y_AXIS: 'yAxis',\r\n            STATE: 'state'\r\n        }),\r\n        ComponentType: Object.freeze({\r\n            TRIGGER: 'trigger',\r\n            SQUEEZE: 'squeeze',\r\n            TOUCHPAD: 'touchpad',\r\n            THUMBSTICK: 'thumbstick',\r\n            BUTTON: 'button'\r\n        }),\r\n        ButtonTouchThreshold: 0.05,\r\n        AxisTouchThreshold: 0.1,\r\n        VisualResponseProperty: Object.freeze({\r\n            TRANSFORM: 'transform',\r\n            VISIBILITY: 'visibility'\r\n        })\r\n    };\r\n    async function fetchJsonFile(path) {\r\n        const response = await fetch(path);\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        } else {\r\n            return response.json();\r\n        }\r\n    }\r\n    async function fetchProfilesList(basePath) {\r\n        if (!basePath) {\r\n            throw new Error('No basePath supplied');\r\n        }\r\n        const profileListFileName = 'profilesList.json';\r\n        const profilesList = await fetchJsonFile(`${ basePath }/${ profileListFileName }`);\r\n        return profilesList;\r\n    }\r\n    async function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\r\n        if (!xrInputSource) {\r\n            throw new Error('No xrInputSource supplied');\r\n        }\r\n        if (!basePath) {\r\n            throw new Error('No basePath supplied');\r\n        }\r\n        const supportedProfilesList = await fetchProfilesList(basePath);\r\n        let match;\r\n        xrInputSource.profiles.some(profileId => {\r\n            const supportedProfile = supportedProfilesList[profileId];\r\n            if (supportedProfile) {\r\n                match = {\r\n                    profileId,\r\n                    profilePath: `${ basePath }/${ supportedProfile.path }`,\r\n                    deprecated: !!supportedProfile.deprecated\r\n                };\r\n            }\r\n            return !!match;\r\n        });\r\n        if (!match) {\r\n            if (!defaultProfile) {\r\n                throw new Error('No matching profile name found');\r\n            }\r\n            const supportedProfile = supportedProfilesList[defaultProfile];\r\n            if (!supportedProfile) {\r\n                throw new Error(`No matching profile name found and default profile \"${ defaultProfile }\" missing.`);\r\n            }\r\n            match = {\r\n                profileId: defaultProfile,\r\n                profilePath: `${ basePath }/${ supportedProfile.path }`,\r\n                deprecated: !!supportedProfile.deprecated\r\n            };\r\n        }\r\n        const profile = await fetchJsonFile(match.profilePath);\r\n        let assetPath;\r\n        if (getAssetPath) {\r\n            let layout;\r\n            if (xrInputSource.handedness === 'any') {\r\n                layout = profile.layouts[Object.keys(profile.layouts)[0]];\r\n            } else {\r\n                layout = profile.layouts[xrInputSource.handedness];\r\n            }\r\n            if (!layout) {\r\n                throw new Error(`No matching handedness, ${ xrInputSource.handedness }, in profile ${ match.profileId }`);\r\n            }\r\n            if (layout.assetPath) {\r\n                assetPath = match.profilePath.replace('profile.json', layout.assetPath);\r\n            }\r\n        }\r\n        return {\r\n            profile,\r\n            assetPath\r\n        };\r\n    }\r\n    const defaultComponentValues = {\r\n        xAxis: 0,\r\n        yAxis: 0,\r\n        button: 0,\r\n        state: Constants.ComponentState.DEFAULT\r\n    };\r\n    function normalizeAxes(x = 0, y = 0) {\r\n        let xAxis = x;\r\n        let yAxis = y;\r\n        const hypotenuse = Math.sqrt(x * x + y * y);\r\n        if (hypotenuse > 1) {\r\n            const theta = Math.atan2(y, x);\r\n            xAxis = Math.cos(theta);\r\n            yAxis = Math.sin(theta);\r\n        }\r\n        const result = {\r\n            normalizedXAxis: xAxis * 0.5 + 0.5,\r\n            normalizedYAxis: yAxis * 0.5 + 0.5\r\n        };\r\n        return result;\r\n    }\r\n    class VisualResponse {\r\n        constructor(visualResponseDescription) {\r\n            this.componentProperty = visualResponseDescription.componentProperty;\r\n            this.states = visualResponseDescription.states;\r\n            this.valueNodeName = visualResponseDescription.valueNodeName;\r\n            this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\r\n            if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\r\n                this.minNodeName = visualResponseDescription.minNodeName;\r\n                this.maxNodeName = visualResponseDescription.maxNodeName;\r\n            }\r\n            this.value = 0;\r\n            this.updateFromComponent(defaultComponentValues);\r\n        }\r\n        updateFromComponent({xAxis, yAxis, button, state}) {\r\n            const {normalizedXAxis, normalizedYAxis} = normalizeAxes(xAxis, yAxis);\r\n            switch (this.componentProperty) {\r\n            case Constants.ComponentProperty.X_AXIS:\r\n                this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\r\n                break;\r\n            case Constants.ComponentProperty.Y_AXIS:\r\n                this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\r\n                break;\r\n            case Constants.ComponentProperty.BUTTON:\r\n                this.value = this.states.includes(state) ? button : 0;\r\n                break;\r\n            case Constants.ComponentProperty.STATE:\r\n                if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\r\n                    this.value = this.states.includes(state);\r\n                } else {\r\n                    this.value = this.states.includes(state) ? 1 : 0;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unexpected visualResponse componentProperty ${ this.componentProperty }`);\r\n            }\r\n        }\r\n    }\r\n    class Component {\r\n        constructor(componentId, componentDescription) {\r\n            if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\r\n                throw new Error('Invalid arguments supplied');\r\n            }\r\n            this.id = componentId;\r\n            this.type = componentDescription.type;\r\n            this.rootNodeName = componentDescription.rootNodeName;\r\n            this.touchPointNodeName = componentDescription.touchPointNodeName;\r\n            this.visualResponses = {};\r\n            Object.keys(componentDescription.visualResponses).forEach(responseName => {\r\n                const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\r\n                this.visualResponses[responseName] = visualResponse;\r\n            });\r\n            this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\r\n            this.values = {\r\n                state: Constants.ComponentState.DEFAULT,\r\n                button: this.gamepadIndices.button !== undefined ? 0 : undefined,\r\n                xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\r\n                yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\r\n            };\r\n        }\r\n        get data() {\r\n            const data = {\r\n                id: this.id,\r\n                ...this.values\r\n            };\r\n            return data;\r\n        }\r\n        updateFromGamepad(gamepad) {\r\n            this.values.state = Constants.ComponentState.DEFAULT;\r\n            if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\r\n                const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\r\n                this.values.button = gamepadButton.value;\r\n                this.values.button = this.values.button < 0 ? 0 : this.values.button;\r\n                this.values.button = this.values.button > 1 ? 1 : this.values.button;\r\n                if (gamepadButton.pressed || this.values.button === 1) {\r\n                    this.values.state = Constants.ComponentState.PRESSED;\r\n                } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\r\n                    this.values.state = Constants.ComponentState.TOUCHED;\r\n                }\r\n            }\r\n            if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\r\n                this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\r\n                this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\r\n                this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\r\n                if (this.values.state === Constants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\r\n                    this.values.state = Constants.ComponentState.TOUCHED;\r\n                }\r\n            }\r\n            if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\r\n                this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\r\n                this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\r\n                this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\r\n                if (this.values.state === Constants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\r\n                    this.values.state = Constants.ComponentState.TOUCHED;\r\n                }\r\n            }\r\n            Object.values(this.visualResponses).forEach(visualResponse => {\r\n                visualResponse.updateFromComponent(this.values);\r\n            });\r\n        }\r\n    }\r\n    class MotionController {\r\n        constructor(xrInputSource, profile, assetUrl) {\r\n            if (!xrInputSource) {\r\n                throw new Error('No xrInputSource supplied');\r\n            }\r\n            if (!profile) {\r\n                throw new Error('No profile supplied');\r\n            }\r\n            this.xrInputSource = xrInputSource;\r\n            this.assetUrl = assetUrl;\r\n            this.id = profile.profileId;\r\n            this.layoutDescription = profile.layouts[xrInputSource.handedness];\r\n            this.components = {};\r\n            Object.keys(this.layoutDescription.components).forEach(componentId => {\r\n                const componentDescription = this.layoutDescription.components[componentId];\r\n                this.components[componentId] = new Component(componentId, componentDescription);\r\n            });\r\n            this.updateFromGamepad();\r\n        }\r\n        get gripSpace() {\r\n            return this.xrInputSource.gripSpace;\r\n        }\r\n        get targetRaySpace() {\r\n            return this.xrInputSource.targetRaySpace;\r\n        }\r\n        get data() {\r\n            const data = [];\r\n            Object.values(this.components).forEach(component => {\r\n                data.push(component.data);\r\n            });\r\n            return data;\r\n        }\r\n        updateFromGamepad() {\r\n            Object.values(this.components).forEach(component => {\r\n                component.updateFromGamepad(this.xrInputSource.gamepad);\r\n            });\r\n        }\r\n    }\r\n    return threex.utils.motion ={\r\n        Constants,\r\n        MotionController,\r\n        fetchProfile,\r\n        fetchProfilesList\r\n    };\r\n});"]}