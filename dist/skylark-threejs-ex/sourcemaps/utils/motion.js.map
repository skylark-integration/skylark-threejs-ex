{"version":3,"sources":["utils/motion.js"],"names":["define","Constants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","async","fetchJsonFile","path","response","fetch","ok","json","Error","statusText","fetchProfilesList","basePath","defaultComponentValues","xAxis","yAxis","button","state","VisualResponse","[object Object]","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","normalizedXAxis","normalizedYAxis","x","y","Math","sqrt","theta","atan2","cos","sin","normalizeAxes","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","keys","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","xrInputSource","profile","assetUrl","profileId","layoutDescription","layouts","handedness","components","updateFromGamepad","gripSpace","targetRaySpace","component","push","fetchProfile","defaultProfile","getAssetPath","supportedProfilesList","match","profiles","some","supportedProfile","profilePath","deprecated","assetPath","layout","replace"],"mappings":"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","file":"../../utils/motion.js","sourcesContent":["define(function () {\n    'use strict';\n    const Constants = {\n        Handedness: Object.freeze({\n            NONE: 'none',\n            LEFT: 'left',\n            RIGHT: 'right'\n        }),\n        ComponentState: Object.freeze({\n            DEFAULT: 'default',\n            TOUCHED: 'touched',\n            PRESSED: 'pressed'\n        }),\n        ComponentProperty: Object.freeze({\n            BUTTON: 'button',\n            X_AXIS: 'xAxis',\n            Y_AXIS: 'yAxis',\n            STATE: 'state'\n        }),\n        ComponentType: Object.freeze({\n            TRIGGER: 'trigger',\n            SQUEEZE: 'squeeze',\n            TOUCHPAD: 'touchpad',\n            THUMBSTICK: 'thumbstick',\n            BUTTON: 'button'\n        }),\n        ButtonTouchThreshold: 0.05,\n        AxisTouchThreshold: 0.1,\n        VisualResponseProperty: Object.freeze({\n            TRANSFORM: 'transform',\n            VISIBILITY: 'visibility'\n        })\n    };\n    async function fetchJsonFile(path) {\n        const response = await fetch(path);\n        if (!response.ok) {\n            throw new Error(response.statusText);\n        } else {\n            return response.json();\n        }\n    }\n    async function fetchProfilesList(basePath) {\n        if (!basePath) {\n            throw new Error('No basePath supplied');\n        }\n        const profileListFileName = 'profilesList.json';\n        const profilesList = await fetchJsonFile(`${ basePath }/${ profileListFileName }`);\n        return profilesList;\n    }\n    async function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n        if (!xrInputSource) {\n            throw new Error('No xrInputSource supplied');\n        }\n        if (!basePath) {\n            throw new Error('No basePath supplied');\n        }\n        const supportedProfilesList = await fetchProfilesList(basePath);\n        let match;\n        xrInputSource.profiles.some(profileId => {\n            const supportedProfile = supportedProfilesList[profileId];\n            if (supportedProfile) {\n                match = {\n                    profileId,\n                    profilePath: `${ basePath }/${ supportedProfile.path }`,\n                    deprecated: !!supportedProfile.deprecated\n                };\n            }\n            return !!match;\n        });\n        if (!match) {\n            if (!defaultProfile) {\n                throw new Error('No matching profile name found');\n            }\n            const supportedProfile = supportedProfilesList[defaultProfile];\n            if (!supportedProfile) {\n                throw new Error(`No matching profile name found and default profile \"${ defaultProfile }\" missing.`);\n            }\n            match = {\n                profileId: defaultProfile,\n                profilePath: `${ basePath }/${ supportedProfile.path }`,\n                deprecated: !!supportedProfile.deprecated\n            };\n        }\n        const profile = await fetchJsonFile(match.profilePath);\n        let assetPath;\n        if (getAssetPath) {\n            let layout;\n            if (xrInputSource.handedness === 'any') {\n                layout = profile.layouts[Object.keys(profile.layouts)[0]];\n            } else {\n                layout = profile.layouts[xrInputSource.handedness];\n            }\n            if (!layout) {\n                throw new Error(`No matching handedness, ${ xrInputSource.handedness }, in profile ${ match.profileId }`);\n            }\n            if (layout.assetPath) {\n                assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n            }\n        }\n        return {\n            profile,\n            assetPath\n        };\n    }\n    const defaultComponentValues = {\n        xAxis: 0,\n        yAxis: 0,\n        button: 0,\n        state: Constants.ComponentState.DEFAULT\n    };\n    function normalizeAxes(x = 0, y = 0) {\n        let xAxis = x;\n        let yAxis = y;\n        const hypotenuse = Math.sqrt(x * x + y * y);\n        if (hypotenuse > 1) {\n            const theta = Math.atan2(y, x);\n            xAxis = Math.cos(theta);\n            yAxis = Math.sin(theta);\n        }\n        const result = {\n            normalizedXAxis: xAxis * 0.5 + 0.5,\n            normalizedYAxis: yAxis * 0.5 + 0.5\n        };\n        return result;\n    }\n    class VisualResponse {\n        constructor(visualResponseDescription) {\n            this.componentProperty = visualResponseDescription.componentProperty;\n            this.states = visualResponseDescription.states;\n            this.valueNodeName = visualResponseDescription.valueNodeName;\n            this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n            if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n                this.minNodeName = visualResponseDescription.minNodeName;\n                this.maxNodeName = visualResponseDescription.maxNodeName;\n            }\n            this.value = 0;\n            this.updateFromComponent(defaultComponentValues);\n        }\n        updateFromComponent({xAxis, yAxis, button, state}) {\n            const {normalizedXAxis, normalizedYAxis} = normalizeAxes(xAxis, yAxis);\n            switch (this.componentProperty) {\n            case Constants.ComponentProperty.X_AXIS:\n                this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n                break;\n            case Constants.ComponentProperty.Y_AXIS:\n                this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n                break;\n            case Constants.ComponentProperty.BUTTON:\n                this.value = this.states.includes(state) ? button : 0;\n                break;\n            case Constants.ComponentProperty.STATE:\n                if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n                    this.value = this.states.includes(state);\n                } else {\n                    this.value = this.states.includes(state) ? 1 : 0;\n                }\n                break;\n            default:\n                throw new Error(`Unexpected visualResponse componentProperty ${ this.componentProperty }`);\n            }\n        }\n    }\n    class Component {\n        constructor(componentId, componentDescription) {\n            if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n                throw new Error('Invalid arguments supplied');\n            }\n            this.id = componentId;\n            this.type = componentDescription.type;\n            this.rootNodeName = componentDescription.rootNodeName;\n            this.touchPointNodeName = componentDescription.touchPointNodeName;\n            this.visualResponses = {};\n            Object.keys(componentDescription.visualResponses).forEach(responseName => {\n                const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n                this.visualResponses[responseName] = visualResponse;\n            });\n            this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n            this.values = {\n                state: Constants.ComponentState.DEFAULT,\n                button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n                xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n                yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n            };\n        }\n        get data() {\n            const data = {\n                id: this.id,\n                ...this.values\n            };\n            return data;\n        }\n        updateFromGamepad(gamepad) {\n            this.values.state = Constants.ComponentState.DEFAULT;\n            if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n                const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n                this.values.button = gamepadButton.value;\n                this.values.button = this.values.button < 0 ? 0 : this.values.button;\n                this.values.button = this.values.button > 1 ? 1 : this.values.button;\n                if (gamepadButton.pressed || this.values.button === 1) {\n                    this.values.state = Constants.ComponentState.PRESSED;\n                } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n                    this.values.state = Constants.ComponentState.TOUCHED;\n                }\n            }\n            if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n                this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n                this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n                this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n                if (this.values.state === Constants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n                    this.values.state = Constants.ComponentState.TOUCHED;\n                }\n            }\n            if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n                this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n                this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n                this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n                if (this.values.state === Constants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n                    this.values.state = Constants.ComponentState.TOUCHED;\n                }\n            }\n            Object.values(this.visualResponses).forEach(visualResponse => {\n                visualResponse.updateFromComponent(this.values);\n            });\n        }\n    }\n    class MotionController {\n        constructor(xrInputSource, profile, assetUrl) {\n            if (!xrInputSource) {\n                throw new Error('No xrInputSource supplied');\n            }\n            if (!profile) {\n                throw new Error('No profile supplied');\n            }\n            this.xrInputSource = xrInputSource;\n            this.assetUrl = assetUrl;\n            this.id = profile.profileId;\n            this.layoutDescription = profile.layouts[xrInputSource.handedness];\n            this.components = {};\n            Object.keys(this.layoutDescription.components).forEach(componentId => {\n                const componentDescription = this.layoutDescription.components[componentId];\n                this.components[componentId] = new Component(componentId, componentDescription);\n            });\n            this.updateFromGamepad();\n        }\n        get gripSpace() {\n            return this.xrInputSource.gripSpace;\n        }\n        get targetRaySpace() {\n            return this.xrInputSource.targetRaySpace;\n        }\n        get data() {\n            const data = [];\n            Object.values(this.components).forEach(component => {\n                data.push(component.data);\n            });\n            return data;\n        }\n        updateFromGamepad() {\n            Object.values(this.components).forEach(component => {\n                component.updateFromGamepad(this.xrInputSource.gamepad);\n            });\n        }\n    }\n    return {\n        Constants,\n        MotionController,\n        fetchProfile,\n        fetchProfilesList\n    };\n});"]}