{"version":3,"sources":["helpers/FaceNormalsHelper.js"],"names":["define","THREE","threex","_v1","Vector3","_v2","_normalMatrix","Matrix3","FaceNormalsHelper","object","size","hex","linewidth","this","undefined","color","width","nNormals","objGeometry","geometry","isGeometry","faces","length","console","warn","BufferGeometry","positions","Float32BufferAttribute","setAttribute","LineSegments","call","LineBasicMaterial","matrixAutoUpdate","update","prototype","Object","create","constructor","updateMatrixWorld","getNormalMatrix","matrixWorld","position","attributes","vertices","idx","i","l","face","normal","copy","a","add","b","c","divideScalar","applyMatrix4","applyMatrix3","normalize","multiplyScalar","setXYZ","x","y","z","needsUpdate","helpers"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,IAAIC,EAAM,IAAIF,EAAMG,QAChBC,EAAM,IAAIJ,EAAMG,QAChBE,EAAgB,IAAIL,EAAMM,QAC9B,SAASC,EAAkBC,EAAQC,EAAMC,EAAKC,GAC1CC,KAAKJ,OAASA,EACdI,KAAKH,UAAgBI,IAATJ,EAAqBA,EAAO,EACxC,IAAIK,OAAgBD,IAARH,EAAoBA,EAAM,SAClCK,OAAsBF,IAAdF,EAA0BA,EAAY,EAC9CK,EAAW,EACXC,EAAcL,KAAKJ,OAAOU,SAC1BD,GAAeA,EAAYE,WAC3BH,EAAWC,EAAYG,MAAMC,OAE7BC,QAAQC,KAAK,sGAEjB,IAAIL,EAAW,IAAIlB,EAAMwB,eACrBC,EAAY,IAAIzB,EAAM0B,uBAAkC,EAAXV,EAAe,EAAG,GACnEE,EAASS,aAAa,WAAYF,GAClCzB,EAAM4B,aAAaC,KAAKjB,KAAMM,EAAU,IAAIlB,EAAM8B,mBAC9ChB,MAAOA,EACPH,UAAWI,KAEfH,KAAKmB,kBAAmB,EACxBnB,KAAKoB,SA0BT,OAxBAzB,EAAkB0B,UAAYC,OAAOC,OAAOnC,EAAM4B,aAAaK,WAC/D1B,EAAkB0B,UAAUG,YAAc7B,EAC1CA,EAAkB0B,UAAUD,OAAS,WACjCpB,KAAKJ,OAAO6B,mBAAkB,GAC9BhC,EAAciC,gBAAgB1B,KAAKJ,OAAO+B,aAO1C,IANA,IAAIA,EAAc3B,KAAKJ,OAAO+B,YAC1BC,EAAW5B,KAAKM,SAASuB,WAAWD,SACpCvB,EAAcL,KAAKJ,OAAOU,SAC1BwB,EAAWzB,EAAYyB,SACvBtB,EAAQH,EAAYG,MACpBuB,EAAM,EACDC,EAAI,EAAGC,EAAIzB,EAAMC,OAAQuB,EAAIC,EAAGD,IAAK,CAC1C,IAAIE,EAAO1B,EAAMwB,GACbG,EAASD,EAAKC,OAClB7C,EAAI8C,KAAKN,EAASI,EAAKG,IAAIC,IAAIR,EAASI,EAAKK,IAAID,IAAIR,EAASI,EAAKM,IAAIC,aAAa,GAAGC,aAAaf,GACpGnC,EAAI4C,KAAKD,GAAQQ,aAAalD,GAAemD,YAAYC,eAAe7C,KAAKH,MAAMyC,IAAIhD,GACvFsC,EAASkB,OAAOf,EAAKzC,EAAIyD,EAAGzD,EAAI0D,EAAG1D,EAAI2D,GACvClB,GAAY,EACZH,EAASkB,OAAOf,EAAKvC,EAAIuD,EAAGvD,EAAIwD,EAAGxD,EAAIyD,GACvClB,GAAY,EAEhBH,EAASsB,aAAc,GAGpB7D,EAAO8D,QAAQxD,kBAAoBA","file":"../../helpers/FaceNormalsHelper.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    var _v1 = new THREE.Vector3();\n    var _v2 = new THREE.Vector3();\n    var _normalMatrix = new THREE.Matrix3();\n    function FaceNormalsHelper(object, size, hex, linewidth) {\n        this.object = object;\n        this.size = size !== undefined ? size : 1;\n        var color = hex !== undefined ? hex : 16776960;\n        var width = linewidth !== undefined ? linewidth : 1;\n        var nNormals = 0;\n        var objGeometry = this.object.geometry;\n        if (objGeometry && objGeometry.isGeometry) {\n            nNormals = objGeometry.faces.length;\n        } else {\n            console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');\n        }\n        var geometry = new THREE.BufferGeometry();\n        var positions = new THREE.Float32BufferAttribute(nNormals * 2 * 3, 3);\n        geometry.setAttribute('position', positions);\n        THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n            color: color,\n            linewidth: width\n        }));\n        this.matrixAutoUpdate = false;\n        this.update();\n    }\n    FaceNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);\n    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n    FaceNormalsHelper.prototype.update = function () {\n        this.object.updateMatrixWorld(true);\n        _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n        var matrixWorld = this.object.matrixWorld;\n        var position = this.geometry.attributes.position;\n        var objGeometry = this.object.geometry;\n        var vertices = objGeometry.vertices;\n        var faces = objGeometry.faces;\n        var idx = 0;\n        for (var i = 0, l = faces.length; i < l; i++) {\n            var face = faces[i];\n            var normal = face.normal;\n            _v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);\n            _v2.copy(normal).applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n            position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n            idx = idx + 1;\n            position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n            idx = idx + 1;\n        }\n        position.needsUpdate = true;\n    };\n\n    return threex.helpers.FaceNormalsHelper = FaceNormalsHelper;\n});"]}