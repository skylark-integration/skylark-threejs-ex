{"version":3,"sources":["helpers/RectAreaLightHelper.js"],"names":["define","THREE","threex","RectAreaLightHelper","light","color","this","type","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","computeBoundingSphere","material","LineBasicMaterial","fog","Line","call","geometry2","add","Mesh","MeshBasicMaterial","side","BackSide","update","prototype","Object","create","constructor","scale","set","width","height","undefined","children","copy","multiplyScalar","intensity","c","max","Math","r","g","b","dispose","helpers"],"mappings":";;;;;;;AAAAA,QACI,kBACA,aACD,SACCC,EACAC,GAEA,aACA,SAASC,EAAoBC,EAAOC,GAChCC,KAAKC,KAAO,sBACZD,KAAKF,MAAQA,EACbE,KAAKD,MAAQA,EACb,IAiBIG,EAAW,IAAIP,EAAMQ,eACzBD,EAASE,aAAa,WAAY,IAAIT,EAAMU,wBAjBxC,EACA,EACA,GACC,EACD,EACA,GACC,GACA,EACD,EACA,GACC,EACD,EACA,EACA,EACA,GAG0E,IAC9EH,EAASI,wBACT,IAAIC,EAAW,IAAIZ,EAAMa,mBAAoBC,KAAK,IAClDd,EAAMe,KAAKC,KAAKX,KAAME,EAAUK,GAChC,IAoBIK,EAAY,IAAIjB,EAAMQ,eAC1BS,EAAUR,aAAa,WAAY,IAAIT,EAAMU,wBApBzC,EACA,EACA,GACC,EACD,EACA,GACC,GACA,EACD,EACA,EACA,EACA,GACC,GACA,EACD,EACA,GACC,EACD,GAG4E,IAChFO,EAAUN,wBACVN,KAAKa,IAAI,IAAIlB,EAAMmB,KAAKF,EAAW,IAAIjB,EAAMoB,mBACzCC,KAAMrB,EAAMsB,SACZR,KAAK,MAETT,KAAKkB,SAyBT,OAvBArB,EAAoBsB,UAAYC,OAAOC,OAAO1B,EAAMe,KAAKS,WACzDtB,EAAoBsB,UAAUG,YAAczB,EAC5CA,EAAoBsB,UAAUD,OAAS,WAEnC,GADAlB,KAAKuB,MAAMC,IAAI,GAAMxB,KAAKF,MAAM2B,MAAO,GAAMzB,KAAKF,MAAM4B,OAAQ,QAC7CC,IAAf3B,KAAKD,MACLC,KAAKO,SAASR,MAAMyB,IAAIxB,KAAKD,OAC7BC,KAAK4B,SAAS,GAAGrB,SAASR,MAAMyB,IAAIxB,KAAKD,WACtC,CACHC,KAAKO,SAASR,MAAM8B,KAAK7B,KAAKF,MAAMC,OAAO+B,eAAe9B,KAAKF,MAAMiC,WACrE,IAAIC,EAAIhC,KAAKO,SAASR,MAClBkC,EAAMC,KAAKD,IAAID,EAAEG,EAAGH,EAAEI,EAAGJ,EAAEK,GAC3BJ,EAAM,GACND,EAAEF,eAAe,EAAIG,GACzBjC,KAAK4B,SAAS,GAAGrB,SAASR,MAAM8B,KAAK7B,KAAKO,SAASR,SAG3DF,EAAoBsB,UAAUmB,QAAU,WACpCtC,KAAKE,SAASoC,UACdtC,KAAKO,SAAS+B,UACdtC,KAAK4B,SAAS,GAAG1B,SAASoC,UAC1BtC,KAAK4B,SAAS,GAAGrB,SAAS+B,WAGvB1C,EAAO2C,QAAQ1C,oBAAsBA","file":"../../helpers/RectAreaLightHelper.js","sourcesContent":["define([\r\n    \"skylark-threejs\",\r\n    \"../threex\"\r\n], function (\r\n    THREE,\r\n    threex\r\n) {\r\n    'use strict';\r\n    function RectAreaLightHelper(light, color) {\r\n        this.type = 'RectAreaLightHelper';\r\n        this.light = light;\r\n        this.color = color;\r\n        var positions = [\r\n            1,\r\n            1,\r\n            0,\r\n            -1,\r\n            1,\r\n            0,\r\n            -1,\r\n            -1,\r\n            0,\r\n            1,\r\n            -1,\r\n            0,\r\n            1,\r\n            1,\r\n            0\r\n        ];\r\n        var geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geometry.computeBoundingSphere();\r\n        var material = new THREE.LineBasicMaterial({ fog: false });\r\n        THREE.Line.call(this, geometry, material);\r\n        var positions2 = [\r\n            1,\r\n            1,\r\n            0,\r\n            -1,\r\n            1,\r\n            0,\r\n            -1,\r\n            -1,\r\n            0,\r\n            1,\r\n            1,\r\n            0,\r\n            -1,\r\n            -1,\r\n            0,\r\n            1,\r\n            -1,\r\n            0\r\n        ];\r\n        var geometry2 = new THREE.BufferGeometry();\r\n        geometry2.setAttribute('position', new THREE.Float32BufferAttribute(positions2, 3));\r\n        geometry2.computeBoundingSphere();\r\n        this.add(new THREE.Mesh(geometry2, new THREE.MeshBasicMaterial({\r\n            side: THREE.BackSide,\r\n            fog: false\r\n        })));\r\n        this.update();\r\n    }\r\n    RectAreaLightHelper.prototype = Object.create(THREE.Line.prototype);\r\n    RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\r\n    RectAreaLightHelper.prototype.update = function () {\r\n        this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\r\n        if (this.color !== undefined) {\r\n            this.material.color.set(this.color);\r\n            this.children[0].material.color.set(this.color);\r\n        } else {\r\n            this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\r\n            var c = this.material.color;\r\n            var max = Math.max(c.r, c.g, c.b);\r\n            if (max > 1)\r\n                c.multiplyScalar(1 / max);\r\n            this.children[0].material.color.copy(this.material.color);\r\n        }\r\n    };\r\n    RectAreaLightHelper.prototype.dispose = function () {\r\n        this.geometry.dispose();\r\n        this.material.dispose();\r\n        this.children[0].geometry.dispose();\r\n        this.children[0].material.dispose();\r\n    };\r\n\r\n    return threex.helpers.RectAreaLightHelper = RectAreaLightHelper;\r\n});"]}