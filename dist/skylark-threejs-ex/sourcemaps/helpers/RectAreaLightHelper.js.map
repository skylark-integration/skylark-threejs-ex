{"version":3,"sources":["helpers/RectAreaLightHelper.js"],"names":["define","THREE","RectAreaLightHelper","light","color","this","type","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","computeBoundingSphere","material","LineBasicMaterial","fog","Line","call","geometry2","add","Mesh","MeshBasicMaterial","side","BackSide","update","prototype","Object","create","constructor","scale","set","width","height","undefined","children","copy","multiplyScalar","intensity","c","max","Math","r","g","b","dispose"],"mappings":";;;;;;;AAAAA,QACI,mBACD,SAAUC,GACT,aACA,SAASC,EAAoBC,EAAOC,GAChCC,KAAKC,KAAO,sBACZD,KAAKF,MAAQA,EACbE,KAAKD,MAAQA,EACb,IAiBIG,EAAW,IAAIN,EAAMO,eACzBD,EAASE,aAAa,WAAY,IAAIR,EAAMS,wBAjBxC,EACA,EACA,GACC,EACD,EACA,GACC,GACA,EACD,EACA,GACC,EACD,EACA,EACA,EACA,GAG0E,IAC9EH,EAASI,wBACT,IAAIC,EAAW,IAAIX,EAAMY,mBAAoBC,KAAK,IAClDb,EAAMc,KAAKC,KAAKX,KAAME,EAAUK,GAChC,IAoBIK,EAAY,IAAIhB,EAAMO,eAC1BS,EAAUR,aAAa,WAAY,IAAIR,EAAMS,wBApBzC,EACA,EACA,GACC,EACD,EACA,GACC,GACA,EACD,EACA,EACA,EACA,GACC,GACA,EACD,EACA,GACC,EACD,GAG4E,IAChFO,EAAUN,wBACVN,KAAKa,IAAI,IAAIjB,EAAMkB,KAAKF,EAAW,IAAIhB,EAAMmB,mBACzCC,KAAMpB,EAAMqB,SACZR,KAAK,MAETT,KAAKkB,SAyBT,OAvBArB,EAAoBsB,UAAYC,OAAOC,OAAOzB,EAAMc,KAAKS,WACzDtB,EAAoBsB,UAAUG,YAAczB,EAC5CA,EAAoBsB,UAAUD,OAAS,WAEnC,GADAlB,KAAKuB,MAAMC,IAAI,GAAMxB,KAAKF,MAAM2B,MAAO,GAAMzB,KAAKF,MAAM4B,OAAQ,QAC7CC,IAAf3B,KAAKD,MACLC,KAAKO,SAASR,MAAMyB,IAAIxB,KAAKD,OAC7BC,KAAK4B,SAAS,GAAGrB,SAASR,MAAMyB,IAAIxB,KAAKD,WACtC,CACHC,KAAKO,SAASR,MAAM8B,KAAK7B,KAAKF,MAAMC,OAAO+B,eAAe9B,KAAKF,MAAMiC,WACrE,IAAIC,EAAIhC,KAAKO,SAASR,MAClBkC,EAAMC,KAAKD,IAAID,EAAEG,EAAGH,EAAEI,EAAGJ,EAAEK,GAC3BJ,EAAM,GACND,EAAEF,eAAe,EAAIG,GACzBjC,KAAK4B,SAAS,GAAGrB,SAASR,MAAM8B,KAAK7B,KAAKO,SAASR,SAG3DF,EAAoBsB,UAAUmB,QAAU,WACpCtC,KAAKE,SAASoC,UACdtC,KAAKO,SAAS+B,UACdtC,KAAK4B,SAAS,GAAG1B,SAASoC,UAC1BtC,KAAK4B,SAAS,GAAGrB,SAAS+B,WAGvBzC","file":"../../helpers/RectAreaLightHelper.js","sourcesContent":["define([\n    \"skylark-threejs\"\n], function (THREE) {\n    'use strict';\n    function RectAreaLightHelper(light, color) {\n        this.type = 'RectAreaLightHelper';\n        this.light = light;\n        this.color = color;\n        var positions = [\n            1,\n            1,\n            0,\n            -1,\n            1,\n            0,\n            -1,\n            -1,\n            0,\n            1,\n            -1,\n            0,\n            1,\n            1,\n            0\n        ];\n        var geometry = new THREE.BufferGeometry();\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n        geometry.computeBoundingSphere();\n        var material = new THREE.LineBasicMaterial({ fog: false });\n        THREE.Line.call(this, geometry, material);\n        var positions2 = [\n            1,\n            1,\n            0,\n            -1,\n            1,\n            0,\n            -1,\n            -1,\n            0,\n            1,\n            1,\n            0,\n            -1,\n            -1,\n            0,\n            1,\n            -1,\n            0\n        ];\n        var geometry2 = new THREE.BufferGeometry();\n        geometry2.setAttribute('position', new THREE.Float32BufferAttribute(positions2, 3));\n        geometry2.computeBoundingSphere();\n        this.add(new THREE.Mesh(geometry2, new THREE.MeshBasicMaterial({\n            side: THREE.BackSide,\n            fog: false\n        })));\n        this.update();\n    }\n    RectAreaLightHelper.prototype = Object.create(THREE.Line.prototype);\n    RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n    RectAreaLightHelper.prototype.update = function () {\n        this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n        if (this.color !== undefined) {\n            this.material.color.set(this.color);\n            this.children[0].material.color.set(this.color);\n        } else {\n            this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n            var c = this.material.color;\n            var max = Math.max(c.r, c.g, c.b);\n            if (max > 1)\n                c.multiplyScalar(1 / max);\n            this.children[0].material.color.copy(this.material.color);\n        }\n    };\n    RectAreaLightHelper.prototype.dispose = function () {\n        this.geometry.dispose();\n        this.material.dispose();\n        this.children[0].geometry.dispose();\n        this.children[0].material.dispose();\n    };\n\n    return RectAreaLightHelper;\n});"]}