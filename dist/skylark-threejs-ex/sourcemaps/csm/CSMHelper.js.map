{"version":3,"sources":["csm/CSMHelper.js"],"names":["define","THREE","threex","csm","CSMHelper","Group","[object Object]","super","this","displayFrustum","displayPlanes","displayShadowBounds","indices","Uint16Array","positions","Float32Array","frustumGeometry","BufferGeometry","setIndex","BufferAttribute","setAttribute","frustumLines","LineSegments","LineBasicMaterial","add","cascadeLines","cascadePlanes","shadowLines","i","l","length","cascadeLine","cascadePlane","shadowLineGroup","visible","camera","cascades","mainFrustum","frustums","lights","frustumLinePositions","geometry","getAttribute","position","copy","quaternion","scale","updateMatrixWorld","remove","pop","Box3Helper","Box3","planeMat","MeshBasicMaterial","transparent","opacity","depthWrite","side","DoubleSide","Mesh","PlaneBufferGeometry","shadowLine","push","frustum","shadowCam","shadow","farVerts","vertices","far","children","box","min","max","z","addVectors","multiplyScalar","subVectors","attach","set","bottom","left","top","right","near","nearVerts","setXYZ","x","y","needsUpdate"],"mappings":"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","file":"../../csm/CSMHelper.js","sourcesContent":["define([\n    \"skylark-threejs\",\n    \"../threex\"\n], function (\n    THREE,\n    threex\n) {\n    'use strict';\n    class CSMHelper extends THREE.Group {\n        constructor(csm) {\n            super();\n            this.csm = csm;\n            this.displayFrustum = true;\n            this.displayPlanes = true;\n            this.displayShadowBounds = true;\n            const indices = new Uint16Array([\n                0,\n                1,\n                1,\n                2,\n                2,\n                3,\n                3,\n                0,\n                4,\n                5,\n                5,\n                6,\n                6,\n                7,\n                7,\n                4,\n                0,\n                4,\n                1,\n                5,\n                2,\n                6,\n                3,\n                7\n            ]);\n            const positions = new Float32Array(24);\n            const frustumGeometry = new THREE.BufferGeometry();\n            frustumGeometry.setIndex(new THREE.BufferAttribute(indices, 1));\n            frustumGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3, false));\n            const frustumLines = new THREE.LineSegments(frustumGeometry, new THREE.LineBasicMaterial());\n            this.add(frustumLines);\n            this.frustumLines = frustumLines;\n            this.cascadeLines = [];\n            this.cascadePlanes = [];\n            this.shadowLines = [];\n        }\n        updateVisibility() {\n            const displayFrustum = this.displayFrustum;\n            const displayPlanes = this.displayPlanes;\n            const displayShadowBounds = this.displayShadowBounds;\n            const frustumLines = this.frustumLines;\n            const cascadeLines = this.cascadeLines;\n            const cascadePlanes = this.cascadePlanes;\n            const shadowLines = this.shadowLines;\n            for (let i = 0, l = cascadeLines.length; i < l; i++) {\n                const cascadeLine = cascadeLines[i];\n                const cascadePlane = cascadePlanes[i];\n                const shadowLineGroup = shadowLines[i];\n                cascadeLine.visible = displayFrustum;\n                cascadePlane.visible = displayFrustum && displayPlanes;\n                shadowLineGroup.visible = displayShadowBounds;\n            }\n            frustumLines.visible = displayFrustum;\n        }\n        update() {\n            const csm = this.csm;\n            const camera = csm.camera;\n            const cascades = csm.cascades;\n            const mainFrustum = csm.mainFrustum;\n            const frustums = csm.frustums;\n            const lights = csm.lights;\n            const frustumLines = this.frustumLines;\n            const frustumLinePositions = frustumLines.geometry.getAttribute('position');\n            const cascadeLines = this.cascadeLines;\n            const cascadePlanes = this.cascadePlanes;\n            const shadowLines = this.shadowLines;\n            this.position.copy(camera.position);\n            this.quaternion.copy(camera.quaternion);\n            this.scale.copy(camera.scale);\n            this.updateMatrixWorld(true);\n            while (cascadeLines.length > cascades) {\n                this.remove(cascadeLines.pop());\n                this.remove(cascadePlanes.pop());\n                this.remove(shadowLines.pop());\n            }\n            while (cascadeLines.length < cascades) {\n                const cascadeLine = new THREE.Box3Helper(new THREE.Box3(), 16777215);\n                const planeMat = new THREE.MeshBasicMaterial({\n                    transparent: true,\n                    opacity: 0.1,\n                    depthWrite: false,\n                    side: THREE.DoubleSide\n                });\n                const cascadePlane = new THREE.Mesh(new THREE.PlaneBufferGeometry(), planeMat);\n                const shadowLineGroup = new THREE.Group();\n                const shadowLine = new THREE.Box3Helper(new THREE.Box3(), 16776960);\n                shadowLineGroup.add(shadowLine);\n                this.add(cascadeLine);\n                this.add(cascadePlane);\n                this.add(shadowLineGroup);\n                cascadeLines.push(cascadeLine);\n                cascadePlanes.push(cascadePlane);\n                shadowLines.push(shadowLineGroup);\n            }\n            for (let i = 0; i < cascades; i++) {\n                const frustum = frustums[i];\n                const light = lights[i];\n                const shadowCam = light.shadow.camera;\n                const farVerts = frustum.vertices.far;\n                const cascadeLine = cascadeLines[i];\n                const cascadePlane = cascadePlanes[i];\n                const shadowLineGroup = shadowLines[i];\n                const shadowLine = shadowLineGroup.children[0];\n                cascadeLine.box.min.copy(farVerts[2]);\n                cascadeLine.box.max.copy(farVerts[0]);\n                cascadeLine.box.max.z += 0.0001;\n                cascadePlane.position.addVectors(farVerts[0], farVerts[2]);\n                cascadePlane.position.multiplyScalar(0.5);\n                cascadePlane.scale.subVectors(farVerts[0], farVerts[2]);\n                cascadePlane.scale.z = 0.0001;\n                this.remove(shadowLineGroup);\n                shadowLineGroup.position.copy(shadowCam.position);\n                shadowLineGroup.quaternion.copy(shadowCam.quaternion);\n                shadowLineGroup.scale.copy(shadowCam.scale);\n                shadowLineGroup.updateMatrixWorld(true);\n                this.attach(shadowLineGroup);\n                shadowLine.box.min.set(shadowCam.bottom, shadowCam.left, -shadowCam.far);\n                shadowLine.box.max.set(shadowCam.top, shadowCam.right, -shadowCam.near);\n            }\n            const nearVerts = mainFrustum.vertices.near;\n            const farVerts = mainFrustum.vertices.far;\n            frustumLinePositions.setXYZ(0, farVerts[0].x, farVerts[0].y, farVerts[0].z);\n            frustumLinePositions.setXYZ(1, farVerts[3].x, farVerts[3].y, farVerts[3].z);\n            frustumLinePositions.setXYZ(2, farVerts[2].x, farVerts[2].y, farVerts[2].z);\n            frustumLinePositions.setXYZ(3, farVerts[1].x, farVerts[1].y, farVerts[1].z);\n            frustumLinePositions.setXYZ(4, nearVerts[0].x, nearVerts[0].y, nearVerts[0].z);\n            frustumLinePositions.setXYZ(5, nearVerts[3].x, nearVerts[3].y, nearVerts[3].z);\n            frustumLinePositions.setXYZ(6, nearVerts[2].x, nearVerts[2].y, nearVerts[2].z);\n            frustumLinePositions.setXYZ(7, nearVerts[1].x, nearVerts[1].y, nearVerts[1].z);\n            frustumLinePositions.needsUpdate = true;\n        }\n    }\n\n    return threex.csm.CSMHelper = CSMHelper;\n});"]}