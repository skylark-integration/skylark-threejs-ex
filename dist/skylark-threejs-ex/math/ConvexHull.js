/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(t){"use strict";return function(){var e,n,i,s,r=0,o=new t.Vector3;function a(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new c,this.unassigned=new c,this.vertices=[]}function h(){this.normal=new t.Vector3,this.midpoint=new t.Vector3,this.area=0,this.constant=0,this.outside=null,this.mark=r,this.edge=null}function u(t,e){this.vertex=t,this.prev=null,this.next=null,this.twin=null,this.face=e}function l(t){this.point=t,this.prev=null,this.next=null,this.face=null}function c(){this.head=null,this.tail=null}return Object.assign(a.prototype,{setFromPoints:function(t){!0!==Array.isArray(t)&&console.error("THREE.ConvexHull: Points parameter is not an array."),t.length<4&&console.error("THREE.ConvexHull: The algorithm needs at least four points."),this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.vertices.push(new l(t[e]));return this.compute(),this},setFromObject:function(e){var n=[];return e.updateMatrixWorld(!0),e.traverse(function(e){var i,s,r,o=e.geometry;if(void 0!==o)if(o.isGeometry){var a=o.vertices;for(i=0,s=a.length;i<s;i++)(r=a[i].clone()).applyMatrix4(e.matrixWorld),n.push(r)}else if(o.isBufferGeometry){var h=o.attributes.position;if(void 0!==h)for(i=0,s=h.count;i<s;i++)(r=new t.Vector3).fromBufferAttribute(h,i).applyMatrix4(e.matrixWorld),n.push(r)}}),this.setFromPoints(n)},containsPoint:function(t){for(var e=this.faces,n=0,i=e.length;n<i;n++){if(e[n].distanceToPoint(t)>this.tolerance)return!1}return!0},intersectRay:function(t,e){for(var n=this.faces,i=-1/0,s=1/0,r=0,o=n.length;r<o;r++){var a=n[r],h=a.distanceToPoint(t.origin),u=a.normal.dot(t.direction);if(h>0&&u>=0)return null;var l=0!==u?-h/u:0;if(!(l<=0)&&(u>0?s=Math.min(l,s):i=Math.max(l,i),i>s))return null}return i!==-1/0?t.at(i,e):t.at(s,e),e},intersectsRay:function(t){return null!==this.intersectRay(t,o)},makeEmpty:function(){return this.faces=[],this.vertices=[],this},addVertexToFace:function(t,e){return t.face=e,null===e.outside?this.assigned.append(t):this.assigned.insertBefore(e.outside,t),e.outside=t,this},removeVertexFromFace:function(t,e){return t===e.outside&&(null!==t.next&&t.next.face===e?e.outside=t.next:e.outside=null),this.assigned.remove(t),this},removeAllVerticesFromFace:function(t){if(null!==t.outside){for(var e=t.outside,n=t.outside;null!==n.next&&n.next.face===t;)n=n.next;return this.assigned.removeSubList(e,n),e.prev=n.next=null,t.outside=null,e}},deleteFaceVertices:function(t,e){var n=this.removeAllVerticesFromFace(t);if(void 0!==n)if(void 0===e)this.unassigned.appendChain(n);else{var i=n;do{var s=i.next;e.distanceToPoint(i.point)>this.tolerance?this.addVertexToFace(i,e):this.unassigned.append(i),i=s}while(null!==i)}return this},resolveUnassignedPoints:function(t){if(!1===this.unassigned.isEmpty()){var e=this.unassigned.first();do{for(var n=e.next,i=this.tolerance,s=null,o=0;o<t.length;o++){var a=t[o];if(a.mark===r){var h=a.distanceToPoint(e.point);if(h>i&&(i=h,s=a),i>1e3*this.tolerance)break}}null!==s&&this.addVertexToFace(e,s),e=n}while(null!==e)}return this},computeExtremes:function(){var e,n,i,s=new t.Vector3,r=new t.Vector3,o=[],a=[];for(e=0;e<3;e++)o[e]=a[e]=this.vertices[0];for(s.copy(this.vertices[0].point),r.copy(this.vertices[0].point),e=0,n=this.vertices.length;e<n;e++){var h=this.vertices[e],u=h.point;for(i=0;i<3;i++)u.getComponent(i)<s.getComponent(i)&&(s.setComponent(i,u.getComponent(i)),o[i]=h);for(i=0;i<3;i++)u.getComponent(i)>r.getComponent(i)&&(r.setComponent(i,u.getComponent(i)),a[i]=h)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(s.x),Math.abs(r.x))+Math.max(Math.abs(s.y),Math.abs(r.y))+Math.max(Math.abs(s.z),Math.abs(r.z))),{min:o,max:a}},computeInitialHull:function(){void 0===e&&(e=new t.Line3,n=new t.Plane,i=new t.Vector3);var s,r,o,a,u,l,c,d,p,f=this.vertices,v=this.computeExtremes(),g=v.min,m=v.max,x=0,w=0;for(l=0;l<3;l++)(p=m[l].point.getComponent(l)-g[l].point.getComponent(l))>x&&(x=p,w=l);for(r=g[w],o=m[w],x=0,e.set(r.point,o.point),l=0,c=this.vertices.length;l<c;l++)(s=f[l])!==r&&s!==o&&(e.closestPointToPoint(s.point,!0,i),(p=i.distanceToSquared(s.point))>x&&(x=p,a=s));for(x=-1,n.setFromCoplanarPoints(r.point,o.point,a.point),l=0,c=this.vertices.length;l<c;l++)(s=f[l])!==r&&s!==o&&s!==a&&(p=Math.abs(n.distanceToPoint(s.point)))>x&&(x=p,u=s);var T=[];if(n.distanceToPoint(u.point)<0)for(T.push(h.create(r,o,a),h.create(u,o,r),h.create(u,a,o),h.create(u,r,a)),l=0;l<3;l++)d=(l+1)%3,T[l+1].getEdge(2).setTwin(T[0].getEdge(d)),T[l+1].getEdge(1).setTwin(T[d+1].getEdge(0));else for(T.push(h.create(r,a,o),h.create(u,r,o),h.create(u,o,a),h.create(u,a,r)),l=0;l<3;l++)d=(l+1)%3,T[l+1].getEdge(2).setTwin(T[0].getEdge((3-l)%3)),T[l+1].getEdge(0).setTwin(T[d+1].getEdge(1));for(l=0;l<4;l++)this.faces.push(T[l]);for(l=0,c=f.length;l<c;l++)if((s=f[l])!==r&&s!==o&&s!==a&&s!==u){x=this.tolerance;var F=null;for(d=0;d<4;d++)(p=this.faces[d].distanceToPoint(s.point))>x&&(x=p,F=this.faces[d]);null!==F&&this.addVertexToFace(s,F)}return this},reindexFaces:function(){for(var t=[],e=0;e<this.faces.length;e++){var n=this.faces[e];n.mark===r&&t.push(n)}return this.faces=t,this},nextVertexToAdd:function(){if(!1===this.assigned.isEmpty()){var t,e=0,n=this.assigned.first().face,i=n.outside;do{var s=n.distanceToPoint(i.point);s>e&&(e=s,t=i),i=i.next}while(null!==i&&i.face===n);return t}},computeHorizon:function(t,e,n,i){var s;this.deleteFaceVertices(n),n.mark=1,s=null===e?e=n.getEdge(0):e.next;do{var o=s.twin,a=o.face;a.mark===r&&(a.distanceToPoint(t)>this.tolerance?this.computeHorizon(t,o,a,i):i.push(s)),s=s.next}while(s!==e);return this},addAdjoiningFace:function(t,e){var n=h.create(t,e.tail(),e.head());return this.faces.push(n),n.getEdge(-1).setTwin(e.twin),n.getEdge(0)},addNewFaces:function(t,e){this.newFaces=[];for(var n=null,i=null,s=0;s<e.length;s++){var r=e[s],o=this.addAdjoiningFace(t,r);null===n?n=o:o.next.setTwin(i),this.newFaces.push(o.face),i=o}return n.next.setTwin(i),this},addVertexToHull:function(t){var e=[];return this.unassigned.clear(),this.removeVertexFromFace(t,t.face),this.computeHorizon(t.point,null,t.face,e),this.addNewFaces(t,e),this.resolveUnassignedPoints(this.newFaces),this},cleanup:function(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this},compute:function(){var t;for(this.computeInitialHull();void 0!==(t=this.nextVertexToAdd());)this.addVertexToHull(t);return this.reindexFaces(),this.cleanup(),this}}),Object.assign(h,{create:function(t,e,n){var i=new h,s=new u(t,i),r=new u(e,i),o=new u(n,i);return s.next=o.prev=r,r.next=s.prev=o,o.next=r.prev=s,i.edge=s,i.compute()}}),Object.assign(h.prototype,{getEdge:function(t){for(var e=this.edge;t>0;)e=e.next,t--;for(;t<0;)e=e.prev,t++;return e},compute:function(){void 0===s&&(s=new t.Triangle);var e=this.edge.tail(),n=this.edge.head(),i=this.edge.next.head();return s.set(e.point,n.point,i.point),s.getNormal(this.normal),s.getMidpoint(this.midpoint),this.area=s.getArea(),this.constant=this.normal.dot(this.midpoint),this},distanceToPoint:function(t){return this.normal.dot(t)-this.constant}}),Object.assign(u.prototype,{head:function(){return this.vertex},tail:function(){return this.prev?this.prev.vertex:null},length:function(){var t=this.head(),e=this.tail();return null!==e?e.point.distanceTo(t.point):-1},lengthSquared:function(){var t=this.head(),e=this.tail();return null!==e?e.point.distanceToSquared(t.point):-1},setTwin:function(t){return this.twin=t,t.twin=this,this}}),Object.assign(c.prototype,{first:function(){return this.head},last:function(){return this.tail},clear:function(){return this.head=this.tail=null,this},insertBefore:function(t,e){return e.prev=t.prev,e.next=t,null===e.prev?this.head=e:e.prev.next=e,t.prev=e,this},insertAfter:function(t,e){return e.prev=t,e.next=t.next,null===e.next?this.tail=e:e.next.prev=e,t.next=e,this},append:function(t){return null===this.head?this.head=t:this.tail.next=t,t.prev=this.tail,t.next=null,this.tail=t,this},appendChain:function(t){for(null===this.head?this.head=t:this.tail.next=t,t.prev=this.tail;null!==t.next;)t=t.next;return this.tail=t,this},remove:function(t){return null===t.prev?this.head=t.next:t.prev.next=t.next,null===t.next?this.tail=t.prev:t.next.prev=t.prev,this},removeSubList:function(t,e){return null===t.prev?this.head=e.next:t.prev.next=e.next,null===e.next?this.tail=t.prev:e.next.prev=t.prev,this},isEmpty:function(){return null===this.head}}),a}()});
//# sourceMappingURL=../sourcemaps/math/ConvexHull.js.map
