/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs","../threex"],function(t,e){"use strict";var i={c:null,u:[new t.Vector3,new t.Vector3,new t.Vector3],e:[]},n={c:null,u:[new t.Vector3,new t.Vector3,new t.Vector3],e:[]},a=[[],[],[]],r=[[],[],[]],s=[],o=new t.Vector3,h=new t.Vector3,c=new t.Vector3,l=new t.Vector3,u=new t.Vector3,f=new t.Vector3,S=new t.Matrix3,m=new t.Box3,z=new t.Matrix4,y=new t.Matrix4,M=new t.Ray;function d(e=new t.Vector3,i=new t.Vector3,n=new t.Matrix3){this.center=e,this.halfSize=i,this.rotation=n}Object.assign(d.prototype,{set:function(t,e,i){return this.center=t,this.halfSize=e,this.rotation=i,this},copy:function(t){return this.center.copy(t.center),this.halfSize.copy(t.halfSize),this.rotation.copy(t.rotation),this},clone:function(){return(new this.constructor).copy(this)},getSize:function(t){return t.copy(this.halfSize).multiplyScalar(2)},clampPoint:function(e,i){var n=this.halfSize;l.subVectors(e,this.center),this.rotation.extractBasis(o,h,c),i.copy(this.center);var a=t.MathUtils.clamp(l.dot(o),-n.x,n.x);i.add(o.multiplyScalar(a));var r=t.MathUtils.clamp(l.dot(h),-n.y,n.y);i.add(h.multiplyScalar(r));var s=t.MathUtils.clamp(l.dot(c),-n.z,n.z);return i.add(c.multiplyScalar(s)),i},containsPoint:function(t){return l.subVectors(t,this.center),this.rotation.extractBasis(o,h,c),Math.abs(l.dot(o))<=this.halfSize.x&&Math.abs(l.dot(h))<=this.halfSize.y&&Math.abs(l.dot(c))<=this.halfSize.z},intersectsBox3:function(t){return this.intersectsOBB(p.fromBox3(t))},intersectsSphere:function(t){return this.clampPoint(t.center,f),f.distanceToSquared(t.center)<=t.radius*t.radius},intersectsOBB:function(t,e=Number.EPSILON){i.c=this.center,i.e[0]=this.halfSize.x,i.e[1]=this.halfSize.y,i.e[2]=this.halfSize.z,this.rotation.extractBasis(i.u[0],i.u[1],i.u[2]),n.c=t.center,n.e[0]=t.halfSize.x,n.e[1]=t.halfSize.y,n.e[2]=t.halfSize.z,t.rotation.extractBasis(n.u[0],n.u[1],n.u[2]);for(var o=0;o<3;o++)for(var h=0;h<3;h++)a[o][h]=i.u[o].dot(n.u[h]);l.subVectors(n.c,i.c),s[0]=l.dot(i.u[0]),s[1]=l.dot(i.u[1]),s[2]=l.dot(i.u[2]);for(o=0;o<3;o++)for(h=0;h<3;h++)r[o][h]=Math.abs(a[o][h])+e;var c,u;for(o=0;o<3;o++)if(c=i.e[o],u=n.e[0]*r[o][0]+n.e[1]*r[o][1]+n.e[2]*r[o][2],Math.abs(s[o])>c+u)return!1;for(o=0;o<3;o++)if(c=i.e[0]*r[0][o]+i.e[1]*r[1][o]+i.e[2]*r[2][o],u=n.e[o],Math.abs(s[0]*a[0][o]+s[1]*a[1][o]+s[2]*a[2][o])>c+u)return!1;return c=i.e[1]*r[2][0]+i.e[2]*r[1][0],u=n.e[1]*r[0][2]+n.e[2]*r[0][1],!(Math.abs(s[2]*a[1][0]-s[1]*a[2][0])>c+u)&&(c=i.e[1]*r[2][1]+i.e[2]*r[1][1],u=n.e[0]*r[0][2]+n.e[2]*r[0][0],!(Math.abs(s[2]*a[1][1]-s[1]*a[2][1])>c+u)&&(c=i.e[1]*r[2][2]+i.e[2]*r[1][2],u=n.e[0]*r[0][1]+n.e[1]*r[0][0],!(Math.abs(s[2]*a[1][2]-s[1]*a[2][2])>c+u)&&(c=i.e[0]*r[2][0]+i.e[2]*r[0][0],u=n.e[1]*r[1][2]+n.e[2]*r[1][1],!(Math.abs(s[0]*a[2][0]-s[2]*a[0][0])>c+u)&&(c=i.e[0]*r[2][1]+i.e[2]*r[0][1],u=n.e[0]*r[1][2]+n.e[2]*r[1][0],!(Math.abs(s[0]*a[2][1]-s[2]*a[0][1])>c+u)&&(c=i.e[0]*r[2][2]+i.e[2]*r[0][2],u=n.e[0]*r[1][1]+n.e[1]*r[1][0],!(Math.abs(s[0]*a[2][2]-s[2]*a[0][2])>c+u)&&(c=i.e[0]*r[1][0]+i.e[1]*r[0][0],u=n.e[1]*r[2][2]+n.e[2]*r[2][1],!(Math.abs(s[1]*a[0][0]-s[0]*a[1][0])>c+u)&&(c=i.e[0]*r[1][1]+i.e[1]*r[0][1],u=n.e[0]*r[2][2]+n.e[2]*r[2][0],!(Math.abs(s[1]*a[0][1]-s[0]*a[1][1])>c+u)&&(c=i.e[0]*r[1][2]+i.e[1]*r[0][2],u=n.e[0]*r[2][1]+n.e[1]*r[2][0],!(Math.abs(s[1]*a[0][2]-s[0]*a[1][2])>c+u)))))))))},intersectsPlane:function(t){this.rotation.extractBasis(o,h,c);const e=this.halfSize.x*Math.abs(t.normal.dot(o))+this.halfSize.y*Math.abs(t.normal.dot(h))+this.halfSize.z*Math.abs(t.normal.dot(c)),i=t.normal.dot(this.center)-t.constant;return Math.abs(i)<=e},intersectRay:function(t,e){var i,n,a,r;return this.getSize(u),m.setFromCenterAndSize(l.set(0,0,0),u),i=z,n=this.rotation,a=i.elements,r=n.elements,a[0]=r[0],a[1]=r[1],a[2]=r[2],a[3]=0,a[4]=r[3],a[5]=r[4],a[6]=r[5],a[7]=0,a[8]=r[6],a[9]=r[7],a[10]=r[8],a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1,z.setPosition(this.center),M.copy(t).applyMatrix4(y.getInverse(z)),M.intersectBox(m,e)?e.applyMatrix4(z):null},intersectsRay:function(t){return null!==this.intersectRay(t,l)},fromBox3:function(t){return t.getCenter(this.center),t.getSize(this.halfSize).multiplyScalar(.5),this.rotation.identity(),this},equals:function(t){return t.center.equals(this.center)&&t.halfSize.equals(this.halfSize)&&t.rotation.equals(this.rotation)},applyMatrix4:function(t){var e=t.elements,i=l.set(e[0],e[1],e[2]).length(),n=l.set(e[4],e[5],e[6]).length(),a=l.set(e[8],e[9],e[10]).length();t.determinant()<0&&(i=-i),S.setFromMatrix4(t);var r=1/i,s=1/n,o=1/a;return S.elements[0]*=r,S.elements[1]*=r,S.elements[2]*=r,S.elements[3]*=s,S.elements[4]*=s,S.elements[5]*=s,S.elements[6]*=o,S.elements[7]*=o,S.elements[8]*=o,this.rotation.multiply(S),this.halfSize.x*=i,this.halfSize.y*=n,this.halfSize.z*=a,l.setFromMatrixPosition(t),this.center.add(l),this}});var p=new d;return e.math.OBB=d});
//# sourceMappingURL=../sourcemaps/math/OBB.js.map
