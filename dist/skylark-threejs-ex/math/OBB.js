/**
 * skylark-threejs-ex - A version of threejs extentions library that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-threejs-ex/
 * @license MIT
 */
define(["skylark-threejs"],function(t){"use strict";var e={c:null,u:[new t.Vector3,new t.Vector3,new t.Vector3],e:[]},i={c:null,u:[new t.Vector3,new t.Vector3,new t.Vector3],e:[]},n=[[],[],[]],a=[[],[],[]],r=[],s=new t.Vector3,o=new t.Vector3,h=new t.Vector3,c=new t.Vector3,l=new t.Vector3,u=new t.Vector3,f=new t.Matrix3,S=new t.Box3,z=new t.Matrix4,m=new t.Matrix4,y=new t.Ray;function M(e=new t.Vector3,i=new t.Vector3,n=new t.Matrix3){this.center=e,this.halfSize=i,this.rotation=n}Object.assign(M.prototype,{set:function(t,e,i){return this.center=t,this.halfSize=e,this.rotation=i,this},copy:function(t){return this.center.copy(t.center),this.halfSize.copy(t.halfSize),this.rotation.copy(t.rotation),this},clone:function(){return(new this.constructor).copy(this)},getSize:function(t){return t.copy(this.halfSize).multiplyScalar(2)},clampPoint:function(e,i){var n=this.halfSize;c.subVectors(e,this.center),this.rotation.extractBasis(s,o,h),i.copy(this.center);var a=t.MathUtils.clamp(c.dot(s),-n.x,n.x);i.add(s.multiplyScalar(a));var r=t.MathUtils.clamp(c.dot(o),-n.y,n.y);i.add(o.multiplyScalar(r));var l=t.MathUtils.clamp(c.dot(h),-n.z,n.z);return i.add(h.multiplyScalar(l)),i},containsPoint:function(t){return c.subVectors(t,this.center),this.rotation.extractBasis(s,o,h),Math.abs(c.dot(s))<=this.halfSize.x&&Math.abs(c.dot(o))<=this.halfSize.y&&Math.abs(c.dot(h))<=this.halfSize.z},intersectsBox3:function(t){return this.intersectsOBB(d.fromBox3(t))},intersectsSphere:function(t){return this.clampPoint(t.center,u),u.distanceToSquared(t.center)<=t.radius*t.radius},intersectsOBB:function(t,s=Number.EPSILON){e.c=this.center,e.e[0]=this.halfSize.x,e.e[1]=this.halfSize.y,e.e[2]=this.halfSize.z,this.rotation.extractBasis(e.u[0],e.u[1],e.u[2]),i.c=t.center,i.e[0]=t.halfSize.x,i.e[1]=t.halfSize.y,i.e[2]=t.halfSize.z,t.rotation.extractBasis(i.u[0],i.u[1],i.u[2]);for(var o=0;o<3;o++)for(var h=0;h<3;h++)n[o][h]=e.u[o].dot(i.u[h]);c.subVectors(i.c,e.c),r[0]=c.dot(e.u[0]),r[1]=c.dot(e.u[1]),r[2]=c.dot(e.u[2]);for(o=0;o<3;o++)for(h=0;h<3;h++)a[o][h]=Math.abs(n[o][h])+s;var l,u;for(o=0;o<3;o++)if(l=e.e[o],u=i.e[0]*a[o][0]+i.e[1]*a[o][1]+i.e[2]*a[o][2],Math.abs(r[o])>l+u)return!1;for(o=0;o<3;o++)if(l=e.e[0]*a[0][o]+e.e[1]*a[1][o]+e.e[2]*a[2][o],u=i.e[o],Math.abs(r[0]*n[0][o]+r[1]*n[1][o]+r[2]*n[2][o])>l+u)return!1;return l=e.e[1]*a[2][0]+e.e[2]*a[1][0],u=i.e[1]*a[0][2]+i.e[2]*a[0][1],!(Math.abs(r[2]*n[1][0]-r[1]*n[2][0])>l+u)&&(l=e.e[1]*a[2][1]+e.e[2]*a[1][1],u=i.e[0]*a[0][2]+i.e[2]*a[0][0],!(Math.abs(r[2]*n[1][1]-r[1]*n[2][1])>l+u)&&(l=e.e[1]*a[2][2]+e.e[2]*a[1][2],u=i.e[0]*a[0][1]+i.e[1]*a[0][0],!(Math.abs(r[2]*n[1][2]-r[1]*n[2][2])>l+u)&&(l=e.e[0]*a[2][0]+e.e[2]*a[0][0],u=i.e[1]*a[1][2]+i.e[2]*a[1][1],!(Math.abs(r[0]*n[2][0]-r[2]*n[0][0])>l+u)&&(l=e.e[0]*a[2][1]+e.e[2]*a[0][1],u=i.e[0]*a[1][2]+i.e[2]*a[1][0],!(Math.abs(r[0]*n[2][1]-r[2]*n[0][1])>l+u)&&(l=e.e[0]*a[2][2]+e.e[2]*a[0][2],u=i.e[0]*a[1][1]+i.e[1]*a[1][0],!(Math.abs(r[0]*n[2][2]-r[2]*n[0][2])>l+u)&&(l=e.e[0]*a[1][0]+e.e[1]*a[0][0],u=i.e[1]*a[2][2]+i.e[2]*a[2][1],!(Math.abs(r[1]*n[0][0]-r[0]*n[1][0])>l+u)&&(l=e.e[0]*a[1][1]+e.e[1]*a[0][1],u=i.e[0]*a[2][2]+i.e[2]*a[2][0],!(Math.abs(r[1]*n[0][1]-r[0]*n[1][1])>l+u)&&(l=e.e[0]*a[1][2]+e.e[1]*a[0][2],u=i.e[0]*a[2][1]+i.e[1]*a[2][0],!(Math.abs(r[1]*n[0][2]-r[0]*n[1][2])>l+u)))))))))},intersectsPlane:function(t){this.rotation.extractBasis(s,o,h);const e=this.halfSize.x*Math.abs(t.normal.dot(s))+this.halfSize.y*Math.abs(t.normal.dot(o))+this.halfSize.z*Math.abs(t.normal.dot(h)),i=t.normal.dot(this.center)-t.constant;return Math.abs(i)<=e},intersectRay:function(t,e){var i,n,a,r;return this.getSize(l),S.setFromCenterAndSize(c.set(0,0,0),l),i=z,n=this.rotation,a=i.elements,r=n.elements,a[0]=r[0],a[1]=r[1],a[2]=r[2],a[3]=0,a[4]=r[3],a[5]=r[4],a[6]=r[5],a[7]=0,a[8]=r[6],a[9]=r[7],a[10]=r[8],a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1,z.setPosition(this.center),y.copy(t).applyMatrix4(m.getInverse(z)),y.intersectBox(S,e)?e.applyMatrix4(z):null},intersectsRay:function(t){return null!==this.intersectRay(t,c)},fromBox3:function(t){return t.getCenter(this.center),t.getSize(this.halfSize).multiplyScalar(.5),this.rotation.identity(),this},equals:function(t){return t.center.equals(this.center)&&t.halfSize.equals(this.halfSize)&&t.rotation.equals(this.rotation)},applyMatrix4:function(t){var e=t.elements,i=c.set(e[0],e[1],e[2]).length(),n=c.set(e[4],e[5],e[6]).length(),a=c.set(e[8],e[9],e[10]).length();t.determinant()<0&&(i=-i),f.setFromMatrix4(t);var r=1/i,s=1/n,o=1/a;return f.elements[0]*=r,f.elements[1]*=r,f.elements[2]*=r,f.elements[3]*=s,f.elements[4]*=s,f.elements[5]*=s,f.elements[6]*=o,f.elements[7]*=o,f.elements[8]*=o,this.rotation.multiply(f),this.halfSize.x*=i,this.halfSize.y*=n,this.halfSize.z*=a,c.setFromMatrixPosition(t),this.center.add(c),this}});var d=new M;return M});
//# sourceMappingURL=../sourcemaps/math/OBB.js.map
